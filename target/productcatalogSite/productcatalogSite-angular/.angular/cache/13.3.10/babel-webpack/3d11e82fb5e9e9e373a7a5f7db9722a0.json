{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1046);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  20:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.core\");\n    /***/\n  },\n\n  /***/\n  23:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.draganddrop\");\n    /***/\n  },\n\n  /***/\n  1046:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(20), __webpack_require__(1047), __webpack_require__(1048), __webpack_require__(23)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            extend = $.extend,\n            Class = kendo.Class,\n            NS = \".k-imageeditor-pane\",\n            CLICK = \"click\";\n        var paneStyles = {\n          form: \"k-imageeditor-pane-form\",\n          button: \"k-imageeditor-pane-button\",\n          confirmButton: \"k-imageeditor-pane-confirm-button\",\n          cropOverlay: \"k-imageeditor-crop-overlay\",\n          crop: \"k-imageeditor-crop\",\n          resizeHandle: \"k-resize-handle\",\n          resizeHandlePrefix: \"k-resize-\"\n        };\n\n        var round = function (f) {\n          return Math.round(f * 1000) / 1000;\n        };\n\n        var Pane = Class.extend({\n          init: function (imageeditor) {\n            var that = this;\n            that.imageeditor = imageeditor;\n\n            if (that.imageeditor.currentPaneTool) {\n              that.imageeditor.currentPaneTool.destroy();\n            }\n\n            that.element = $(\"<div></div>\").addClass(paneStyles.form);\n          },\n          open: function () {\n            var that = this,\n                imageeditor = that.imageeditor,\n                commonMessages = imageeditor.options.messages.common;\n            imageeditor.paneWrapper.append(that.element);\n            that.formWidget = new kendo.ui.Form(that.element, extend(that.formSettings(), {\n              buttonsTemplate: kendo.format(\"<button class='{0} k-button k-button-md k-rounded-md k-button-solid k-button-solid-base' data-action='cancel'><span class='k-button-text'>{2}</span></button>\" + \"<button class='{0} {1} k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary' data-action='confirm'><span class='k-button-text'>{3}</span></button>\", paneStyles.button, paneStyles.confirmButton, commonMessages.cancel, commonMessages.confirm)\n            }));\n            that.bindButtonEvents();\n            imageeditor.paneWrapper.show();\n            imageeditor.currentPaneTool = that;\n          },\n          bindButtonEvents: function () {\n            var that = this,\n                formWidget = that.formWidget,\n                buttons = formWidget.element.find(\".\" + paneStyles.button);\n            that._clickHandler = that._click.bind(that);\n            buttons.on(CLICK + NS, that._clickHandler);\n          },\n          _click: function (ev) {\n            var that = this,\n                target = $(ev.target).closest(\".\" + paneStyles.button),\n                action = target.data(\"action\");\n\n            if (that[action]) {\n              that[action]();\n            }\n          },\n          cancel: function () {\n            this.destroy();\n          },\n          confirm: function () {\n            window.console.error(\"Pane's confirm method is not implemented!\");\n            this.destroy();\n          },\n          refresh: function () {},\n          destroy: function () {\n            var that = this,\n                imageeditor = that.imageeditor;\n            that.formWidget.element.find(\".\" + paneStyles.button).off(NS);\n            that.formWidget.destroy();\n            imageeditor.paneWrapper.html(\"\");\n            imageeditor.paneWrapper.hide();\n            delete imageeditor.currentPaneTool;\n          }\n        });\n        var CropPane = Pane.extend({\n          init: function (imageeditor) {\n            var that = this;\n            Pane.fn.init.call(that, imageeditor);\n            that.buildCropModel();\n            that.canvasUI();\n          },\n          confirm: function () {\n            var that = this,\n                model = that.formWidget._model.toJSON();\n\n            that.destroy();\n            that.imageeditor.executeCommand({\n              command: \"CropImageEditorCommand\",\n              options: model\n            });\n          },\n          formSettings: function () {\n            var that = this,\n                cropMessages = that.imageeditor.options.messages.panes.crop,\n                commonMessages = that.imageeditor.options.messages.common,\n                aspectRatioItems = cropMessages.aspectRatioItems,\n                aspectRatioDS = [];\n\n            if (aspectRatioItems) {\n              for (var key in aspectRatioItems) {\n                aspectRatioDS.push({\n                  value: key,\n                  text: aspectRatioItems[key]\n                });\n              }\n            } else {\n              aspectRatioDS = [{\n                value: \"originalRatio\",\n                text: \"Original ratio\"\n              }, {\n                value: \"1:1\",\n                text: \"1:1 (Square)\"\n              }, {\n                value: \"4:5\",\n                text: \"4:5 (8:10)\"\n              }, {\n                value: \"5:7\",\n                text: \"5:7\"\n              }, {\n                value: \"2:3\",\n                text: \"2:3 (4:6)\"\n              }, {\n                value: \"16:9\",\n                text: \"16:9\"\n              }];\n            }\n\n            return {\n              formData: that._model,\n              change: that.onChange.bind(that),\n              items: [{\n                type: \"group\",\n                label: cropMessages.title || \"Crop Image\",\n                layout: \"grid\",\n                grid: {\n                  cols: 2,\n                  gutter: \"0 8px\"\n                },\n                items: [{\n                  label: cropMessages.aspectRatio || \"Aspect ratio:\",\n                  field: \"aspectRatio\",\n                  editor: \"DropDownList\",\n                  editorOptions: {\n                    dataValueField: \"value\",\n                    dataTextField: \"text\",\n                    dataSource: aspectRatioDS\n                  },\n                  colSpan: 2\n                }, {\n                  label: cropMessages.orientation,\n                  field: \"orientation\",\n                  editor: that._orientationEditor.bind(that),\n                  colSpan: 2\n                }, {\n                  label: commonMessages.width || \"Width:\",\n                  field: \"width\",\n                  attributes: {\n                    style: \"max-width: 100px;\"\n                  },\n                  editor: \"NumericTextBox\",\n                  editorOptions: {\n                    format: \"n0\",\n                    max: that._model.width,\n                    min: 0\n                  },\n                  colSpan: 1\n                }, {\n                  label: commonMessages.height || \"Height:\",\n                  field: \"height\",\n                  attributes: {\n                    style: \"max-width: 100px;\"\n                  },\n                  editor: \"NumericTextBox\",\n                  editorOptions: {\n                    format: \"n0\",\n                    max: that._model.height,\n                    min: 0\n                  },\n                  colSpan: 1\n                }, {\n                  label: commonMessages.lockAspectRatio || \"Lock aspect ratio\",\n                  field: \"lockAspectRatio\",\n                  colSpan: 2\n                }]\n              }]\n            };\n          },\n          _orientationEditor: function (container, options) {\n            var that = this,\n                cropMessages = that.imageeditor.options.messages.panes.crop,\n                value = options.model[options.field];\n            that._orientationWidget = $(\"<div name='\" + options.field + \"'></div>\").appendTo(container).kendoButtonGroup({\n              items: [{\n                text: cropMessages.portrait || \"Portrait\",\n                attributes: {\n                  \"data-value\": \"portrait\"\n                },\n                selected: value === \"portrait\"\n              }, {\n                text: cropMessages.landscape || \"Landscape\",\n                attributes: {\n                  \"data-value\": \"landscape\"\n                },\n                selected: value === \"landscape\"\n              }],\n              select: function (ev) {\n                var value = ev.sender.wrapper.find(\".k-selected\").data(\"value\");\n                options.model.set(options.field, value);\n              }\n            }).data(\"kendoButtonGroup\");\n          },\n          buildCropModel: function () {\n            var that = this,\n                imageeditor = that.imageeditor,\n                canvas = imageeditor.getCanvasElement(),\n                width = canvas.width,\n                height = canvas.height;\n            that._model = {\n              top: 0,\n              left: 0,\n              aspectRatio: \"originalRatio\",\n              width: width,\n              height: height,\n              orientation: width - height < 0 ? \"portrait\" : \"landscape\",\n              lockAspectRatio: true\n            };\n          },\n          canvasUI: function () {\n            var that = this,\n                imageeditor = that.imageeditor,\n                canvasContainer = that.imageeditor.canvasContainer,\n                cropOverlay = $(\"<div></div>\").addClass(paneStyles.cropOverlay),\n                cropElement = $(\"<div></div>\").addClass(paneStyles.crop),\n                handle = \"<span class='\" + paneStyles.resizeHandle + \"'></span>\",\n                handles = [\"nw\", \"n\", \"ne\", \"w\", \"e\", \"sw\", \"s\", \"se\"],\n                zoomLevel = imageeditor.getZoomLevel();\n\n            for (var i = 0; i < handles.length; i++) {\n              var handleElm = $(handle).addClass(paneStyles.resizeHandlePrefix + handles[i]).attr(\"data-orientation\", handles[i]);\n\n              that._initResizeHandle(handleElm);\n\n              cropElement.append(handleElm);\n            }\n\n            that.cropElement = cropElement;\n            that._canvasUI = cropOverlay.append(cropElement).appendTo(canvasContainer);\n            var width = Math.round(that._model.width * zoomLevel);\n            var height = Math.round(that._model.height * zoomLevel);\n            var borderWidth = parseInt(that.cropElement.css(\"border-top-width\"), 10);\n            that.cropElement.css({\n              width: width,\n              height: height,\n              backgroundImage: \"url('\" + imageeditor._image.src + \"')\",\n              backgroundSize: kendo.format(\"{0}px {1}px\", width, height),\n              backgroundClip: \"content-box\",\n              backgroundPosition: kendo.format(\"-{0}px -{0}px\", borderWidth)\n            });\n            that.cropElement.kendoDraggable({\n              ignore: \".\" + paneStyles.resizeHandle,\n              drag: function (ev) {\n                that._adjustTopLeft(ev.target.offsetTop + ev.y.delta, ev.target.offsetLeft + ev.x.delta);\n              }\n            });\n          },\n          refresh: function () {\n            var that = this,\n                newModel = that.formWidget._model,\n                zoomLevel = that.imageeditor.getZoomLevel(),\n                width = Math.round(newModel.width * zoomLevel),\n                height = Math.round(newModel.height * zoomLevel),\n                top = Math.round(newModel.top * zoomLevel),\n                left = Math.round(newModel.left * zoomLevel),\n                borderWidth = parseInt(that.cropElement.css(\"border-top-width\"), 10);\n            that.cropElement.css({\n              top: top,\n              left: left,\n              width: width,\n              height: height,\n              backgroundSize: kendo.format(\"{0}px {1}px\", that._model.width * zoomLevel, that._model.height * zoomLevel),\n              backgroundPosition: kendo.format(\"-{0}px -{1}px\", left + borderWidth, top + borderWidth)\n            });\n          },\n          _initResizeHandle: function (handle) {\n            var that = this;\n            handle.kendoDraggable({\n              drag: function (ev) {\n                var $target = $(ev.sender.element),\n                    newModel = that.formWidget._model,\n                    oldModel = that._model,\n                    orientation = $target.data(\"orientation\"),\n                    adjustments = {},\n                    zoomLevel = that.imageeditor.getZoomLevel(),\n                    correctedLeft = newModel.left * zoomLevel,\n                    correctedTop = newModel.top * zoomLevel;\n\n                if (orientation.indexOf(\"w\") >= 0) {\n                  adjustments.left = that.cropElement[0].offsetLeft + ev.x.delta;\n                  adjustments.width = that.cropElement[0].offsetWidth - ev.x.delta;\n                } else if (orientation.indexOf(\"e\") >= 0) {\n                  adjustments.width = that.cropElement[0].offsetWidth + ev.x.delta;\n                }\n\n                if (orientation.indexOf(\"n\") >= 0) {\n                  adjustments.top = that.cropElement[0].offsetTop + ev.y.delta;\n                  adjustments.height = that.cropElement[0].offsetHeight - ev.y.delta;\n                } else if (orientation.indexOf(\"s\") >= 0) {\n                  adjustments.height = that.cropElement[0].offsetHeight + ev.y.delta;\n                }\n\n                if (adjustments.width && (adjustments.left || correctedLeft) + adjustments.width <= oldModel.width * zoomLevel) {\n                  newModel.set(\"width\", Math.round(adjustments.width / zoomLevel));\n                }\n\n                if (adjustments.height && (adjustments.top || correctedTop) + adjustments.height <= oldModel.height * zoomLevel) {\n                  newModel.set(\"height\", Math.round(adjustments.height / zoomLevel));\n                }\n\n                if (adjustments.top || adjustments.left) {\n                  that._adjustTopLeft(adjustments.top, adjustments.left);\n                }\n              }\n            });\n          },\n          _adjustTopLeft: function (top, left, compare) {\n            var that = this,\n                compareModel = compare || that.formWidget._model,\n                newModel = that.formWidget._model,\n                oldModel = that._model,\n                zoomLevel = that.imageeditor.getZoomLevel();\n\n            if (top >= 0 && top / zoomLevel + compareModel.height <= oldModel.height) {\n              newModel.set(\"top\", Math.round(top / zoomLevel));\n            }\n\n            if (left >= 0 && left / zoomLevel + compareModel.width <= oldModel.width) {\n              newModel.set(\"left\", Math.round(left / zoomLevel));\n            }\n          },\n          onChange: function (ev) {\n            var that = this,\n                zoomLevel = that.imageeditor.getZoomLevel(),\n                newModel = ev.sender._model,\n                oldModel = that._model,\n                maxWidth = oldModel.width,\n                maxHeight = oldModel.height,\n                originalRatio = oldModel.width + \":\" + oldModel.height,\n                gcd = that._gcd(oldModel.width, oldModel.height);\n\n            originalRatio = oldModel.width / gcd + \":\" + oldModel.height / gcd;\n\n            if (ev.field === \"aspectRatio\" && ev.value === \"originalRatio\") {\n              newModel.set(\"top\", 0);\n              newModel.set(\"left\", 0);\n              newModel.set(\"orientation\", oldModel.orientation);\n              newModel.set(\"width\", oldModel.width);\n              newModel.set(\"height\", oldModel.height);\n            } else if (ev.field === \"orientation\") {\n              var tempModel = extend({}, newModel, {\n                width: newModel.height,\n                height: newModel.width\n              });\n\n              var newSize = that._calcSize(tempModel, originalRatio, maxWidth, maxHeight);\n\n              newModel.set(\"width\", newSize.width);\n              newModel.set(\"height\", newSize.height);\n\n              that._orientationWidget.select(ev.value === \"portrait\" ? 0 : 1);\n            } else if (newModel.lockAspectRatio) {\n              var force = ev.field;\n\n              var size = that._calcSize(newModel, originalRatio, maxWidth, maxHeight, force);\n\n              newModel.set(\"width\", size.width);\n              newModel.set(\"height\", size.height);\n            }\n\n            var width = Math.round(newModel.width * zoomLevel);\n            var height = Math.round(newModel.height * zoomLevel);\n            var top = Math.round(newModel.top * zoomLevel);\n            var left = Math.round(newModel.left * zoomLevel);\n            var borderWidth = parseInt(that.cropElement.css(\"border-top-width\"), 10);\n            that.cropElement.css({\n              top: top,\n              left: left,\n              width: width,\n              height: height,\n              backgroundPosition: kendo.format(\"-{0}px -{1}px\", left + borderWidth, top + borderWidth)\n            });\n          },\n          _calcSize: function (model, originalRatio, maxWidth, maxHeight, force) {\n            var width = Math.min(model.width, maxWidth),\n                height = Math.min(model.height, maxHeight),\n                isPortrait = model.orientation === \"portrait\",\n                ratios = model.aspectRatio;\n\n            if (ratios.indexOf(\":\") < 0) {\n              ratios = originalRatio;\n            }\n\n            ratios = ratios.split(\":\").map(function (value) {\n              return parseInt(value, 10);\n            });\n            var wRatio = isPortrait ? Math.min(ratios[0], ratios[1]) : Math.max(ratios[0], ratios[1]);\n            var hRatio = !isPortrait ? Math.min(ratios[0], ratios[1]) : Math.max(ratios[0], ratios[1]);\n            var expectedRatio = round(wRatio / hRatio);\n            var realRatio = round(width / height);\n            var sizeByRatio = {\n              width: Math.round(height * expectedRatio),\n              height: Math.round(width / expectedRatio)\n            };\n\n            if (force === \"width\") {\n              return {\n                width: width,\n                height: sizeByRatio.height\n              };\n            }\n\n            if (force === \"height\") {\n              return {\n                width: sizeByRatio.width,\n                height: height\n              };\n            }\n\n            if (realRatio > expectedRatio) {\n              width = sizeByRatio.width;\n            } else if (realRatio < expectedRatio) {\n              height = sizeByRatio.height;\n            }\n\n            return {\n              width: width,\n              height: height\n            };\n          },\n          _gcd: function (a, b) {\n            return b === 0 ? a : this._gcd(b, a % b);\n          },\n          destroy: function () {\n            kendo.destroy(this._canvasUI);\n\n            this._canvasUI.remove();\n\n            Pane.fn.destroy.call(this);\n          }\n        });\n        var ResizePane = Pane.extend({\n          init: function (imageeditor) {\n            Pane.fn.init.call(this, imageeditor);\n            this.buildResizeModel();\n          },\n          confirm: function () {\n            var that = this,\n                originalWidth = that._model.width,\n                originalHeight = that._model.height,\n                model = that.formWidget._model.toJSON();\n\n            if (model.measure === \"percents\") {\n              model.width = originalWidth * (model.width / 100);\n              model.height = originalHeight * (model.height / 100);\n            }\n\n            that.imageeditor.executeCommand({\n              command: \"ResizeImageEditorCommand\",\n              options: model\n            });\n            that.destroy();\n          },\n          formSettings: function () {\n            var that = this,\n                resizeMessages = that.imageeditor.options.messages.panes.resize,\n                commonMessages = that.imageeditor.options.messages.common;\n            return {\n              formData: that._model,\n              change: that.onChange.bind(that),\n              items: [{\n                type: \"group\",\n                label: resizeMessages.title || \"Resize image\",\n                layout: \"grid\",\n                grid: {\n                  cols: 2,\n                  gutter: \"0 8px\"\n                },\n                items: [{\n                  label: commonMessages.width || \"Width:\",\n                  field: \"width\",\n                  attributes: {\n                    style: \"max-width: 100px;\"\n                  },\n                  editor: \"NumericTextBox\",\n                  editorOptions: {\n                    format: \"n0\",\n                    min: 0\n                  },\n                  colSpan: 1\n                }, {\n                  field: \"measureW\",\n                  editor: \"DropDownList\",\n                  attributes: {\n                    style: \"max-width: 100px;\"\n                  },\n                  label: {\n                    text: \"&nbsp;\",\n                    encoded: false\n                  },\n                  editorOptions: {\n                    dataTextField: \"text\",\n                    dataValueField: \"value\",\n                    dataSource: [{\n                      text: resizeMessages.pixels || \"Pixels\",\n                      value: \"pixels\"\n                    }, {\n                      text: resizeMessages.percents || \"Percents\",\n                      value: \"percents\"\n                    }]\n                  },\n                  colSpan: 1\n                }, {\n                  label: commonMessages.height || \"Height:\",\n                  field: \"height\",\n                  attributes: {\n                    style: \"max-width: 100px;\"\n                  },\n                  editor: \"NumericTextBox\",\n                  editorOptions: {\n                    format: \"n0\",\n                    min: 0\n                  },\n                  colSpan: 1\n                }, {\n                  field: \"measureH\",\n                  label: {\n                    text: \"&nbsp;\",\n                    encoded: false\n                  },\n                  attributes: {\n                    style: \"max-width: 100px;\"\n                  },\n                  editor: \"DropDownList\",\n                  editorOptions: {\n                    dataTextField: \"text\",\n                    dataValueField: \"value\",\n                    dataSource: [{\n                      text: resizeMessages.pixels || \"Pixels\",\n                      value: \"pixels\"\n                    }, {\n                      text: resizeMessages.percents || \"Percents\",\n                      value: \"percents\"\n                    }]\n                  },\n                  colSpan: 1\n                }, {\n                  label: commonMessages.lockAspectRatio || \"Lock aspect ratio\",\n                  field: \"lockAspectRatio\",\n                  colSpan: 2\n                }]\n              }]\n            };\n          },\n          buildResizeModel: function () {\n            var that = this,\n                imageeditor = that.imageeditor,\n                canvas = imageeditor.getCanvasElement(),\n                width = canvas.width,\n                height = canvas.height;\n            that._model = {\n              width: width,\n              height: height,\n              measure: \"pixels\",\n              measureW: \"pixels\",\n              measureH: \"pixels\",\n              lockAspectRatio: true,\n              ratio: round(width / height)\n            };\n          },\n          onChange: function (ev) {\n            var that = this,\n                newModel = ev.sender._model,\n                aspectRatioLocked = newModel.lockAspectRatio;\n\n            if (ev.field === \"measureW\" || ev.field === \"measureH\") {\n              newModel.set(\"measureW\", ev.value);\n              newModel.set(\"measureH\", ev.value);\n              newModel.set(\"measure\", ev.value);\n            } else if (ev.field === \"measure\") {\n              that.resetNumericsTo(ev.value);\n            } else if (ev.field === \"width\" && aspectRatioLocked && !that._preventChange) {\n              newModel.set(\"height\", newModel.width / newModel.ratio);\n            } else if (ev.field === \"height\" && aspectRatioLocked && !that._preventChange) {\n              newModel.set(\"width\", newModel.height * newModel.ratio);\n            }\n\n            newModel.set(\"ratio\", round(newModel.width / newModel.height));\n          },\n          resetNumericsTo: function (type) {\n            var that = this,\n                originalWidth = that._model.width,\n                originalHeight = that._model.height,\n                formWidget = that.formWidget,\n                model = formWidget._model,\n                widthNumeric = formWidget.element.find(\"[name=width]\").data(\"kendoNumericTextBox\"),\n                heightNumeric = formWidget.element.find(\"[name=height]\").data(\"kendoNumericTextBox\"),\n                isPercent = type === \"percents\",\n                options = {\n              percents: {\n                format: \"#\\\\\\%\"\n              },\n              pixels: {\n                format: \"n0\"\n              }\n            };\n            widthNumeric.setOptions(options[type]);\n            heightNumeric.setOptions(options[type]);\n            that._preventChange = true;\n            model.set(\"width\", isPercent ? originalWidth / widthNumeric.value() * 100 : originalWidth * (widthNumeric.value() / 100));\n            model.set(\"height\", isPercent ? originalHeight / heightNumeric.value() * 100 : originalHeight * (heightNumeric.value() / 100));\n            that._preventChange = false;\n          }\n        });\n        extend(kendo.ui.imageeditor, {\n          ImageEditorPane: Pane,\n          panes: {\n            crop: CropPane,\n            resize: ResizePane\n          }\n        });\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1047:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.form\");\n    /***/\n  },\n\n  /***/\n  1048:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.buttongroup\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}