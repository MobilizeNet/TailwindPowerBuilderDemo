{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1276);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1051:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.core\");\n    /***/\n  },\n\n  /***/\n  1052:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.popup\");\n    /***/\n  },\n\n  /***/\n  1132:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.fx\");\n    /***/\n  },\n\n  /***/\n  1276:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1051), __webpack_require__(1052), __webpack_require__(1132)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"floatingactionbutton\",\n        name: \"Floating Action Button\",\n        category: \"web\",\n        description: \"The Floating Action Button represents the primary action of a screen and provides the ability to display related actions.\",\n        depends: [\"core\"]\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n            NS = \".kendoFloatingActionButton\",\n            ui = kendo.ui,\n            keys = kendo.keys,\n            support = kendo.support,\n            extend = $.extend,\n            DOT = '.',\n            ID = 'id',\n            HIDDEN = 'k-hidden',\n            LEFT = 'left',\n            RIGHT = 'right',\n            TOP = 'top',\n            BOTTOM = 'bottom',\n            CENTER = 'center',\n            START = 'start',\n            AUTO = 'auto',\n            ARIA_DISABLED = 'aria-disabled',\n            ARIA_HASPOPUP = 'aria-haspopup',\n            ARIA_CONTROLS = 'aria-controls',\n            ARIA_EXPANDED = 'aria-expanded',\n            ARIA_LABEL = 'aria-label',\n            ARIA_ROLE = 'role',\n            ROLE_MENU = 'menu',\n            ROLE_MENU_ITEM = 'menuitem',\n            TABINDEX = 'tabindex',\n            CLICK = 'click',\n            EXPAND = 'expand',\n            COLLAPSE = 'collapse',\n            KEYDOWN = 'keydown',\n            HOVEREVENTS = \"mouseenter\" + NS + \" mouseleave\" + NS;\n        var cssClasses = {\n          widget: 'k-fab',\n          text: 'k-fab-text',\n          icon: 'k-fab-icon',\n          list: 'k-fab-items',\n          listTop: 'k-fab-items-top',\n          listBottom: 'k-fab-items-bottom',\n          listTextLeft: 'k-text-left',\n          listTextRight: 'k-text-right',\n          item: 'k-fab-item',\n          itemIcon: 'k-fab-item-icon',\n          itemText: 'k-fab-item-text',\n          popup: 'k-fab-popup',\n          popupTransparent: 'k-popup-transparent',\n          disabled: 'k-state-disabled',\n          hover: 'k-state-hover',\n          focus: 'k-state-focus'\n        };\n        var templates = {\n          icon: '<span class=\"k-fab-icon k-icon k-i-#: icon #\"></span>',\n          text: '<span class=\"k-fab-text\">#:text#</span>',\n          item: '# if (text) { # ' + '<span class=\"k-fab-item-text\" aria-hidden=\"true\">#:text#</span>' + '# } #' + '# if (icon) { # ' + '<span class=\"k-fab-item-icon k-icon k-i-#: icon #\"></span>' + '# } #'\n        };\n        var FloatingActionButton = Widget.extend({\n          init: function (element, options) {\n            var that = this;\n            Widget.fn.init.call(that, element, options);\n\n            that._wrapper();\n\n            that._content();\n\n            that._appearance();\n\n            that._renderList();\n\n            that._initPopup();\n\n            that._aria();\n\n            that._attachEvents();\n\n            kendo.notify(that);\n          },\n          options: {\n            name: 'FloatingActionButton',\n            icon: '',\n            text: '',\n            items: [],\n            themeColor: 'primary',\n            fillMode: 'solid',\n            size: 'medium',\n            shape: 'rectangle',\n            rounded: 'full',\n            align: 'bottom end',\n            alignOffset: {\n              x: 16,\n              y: 16\n            },\n            positionMode: 'fixed',\n            visible: true,\n            enable: true,\n            enabled: true,\n            _classNames: []\n          },\n          events: [CLICK, EXPAND, COLLAPSE],\n          _offsetMap: {\n            start: LEFT,\n            end: RIGHT,\n            top: TOP,\n            bottom: BOTTOM\n          },\n          _reversedOffsetMap: {\n            start: RIGHT,\n            end: LEFT\n          },\n          _getAlignment: function () {\n            var that = this,\n                alignPoints = that.options.align.split(' ');\n            return {\n              vertical: alignPoints[0],\n              horizontal: alignPoints[1]\n            };\n          },\n          _getOffset: function () {\n            var that = this,\n                options = that.options,\n                isRtl = support.isRtl(that.element),\n                alignment = that._getAlignment(),\n                alignOffset = options.alignOffset,\n                horizontalMap = isRtl ? that._reversedOffsetMap : that._offsetMap,\n                horizontalMapReversed = isRtl ? that._offsetMap : that._reversedOffsetMap,\n                offset = {};\n\n            offset[that._offsetMap[alignment.vertical]] = alignOffset.y;\n            offset[horizontalMap[alignment.horizontal]] = alignOffset.x;\n            offset[horizontalMapReversed[alignment.horizontal]] = AUTO;\n            return offset;\n          },\n          _wrapper: function () {\n            var that = this;\n            that.wrapper = that.element.addClass(cssClasses.widget);\n            that.wrapper.css(that._getOffset());\n          },\n          _content: function () {\n            var that = this,\n                options = that.options,\n                text = options.text,\n                icon = options.icon;\n            that.icon(icon);\n            that.text(text !== '' ? text : that.element.text());\n          },\n          _appearance: function () {\n            var that = this,\n                options = that.options;\n            that._align = options.align;\n            that._visible = options.visible;\n            that._enabled = options.enabled;\n\n            that._updateClassNames();\n          },\n          _updateClassNames: function () {\n            var that = this,\n                classNames = [cssClasses.widget],\n                keepClassNames = that.options._classNames,\n                align = that._align,\n                visible = that._visible,\n                enabled = that._enabled; // Remove all class names\n\n            $(that.element[0].classList).each(function () {\n              var className = this + \"\";\n\n              if (className.indexOf('k-') === 0 && keepClassNames.indexOf(className) === -1) {\n                that.element.removeClass(className);\n              }\n            }); // Align\n\n            if (typeof align === 'string' && align.split(' ').length == 2) {\n              classNames.push('k-' + align.replace(' ', '-'));\n            } // Visibility\n\n\n            if (visible === false) {\n              classNames.push(HIDDEN);\n            } // Enabled\n\n\n            if (enabled === false) {\n              classNames.push(cssClasses.disabled);\n            }\n\n            that.element.addClass(classNames.join(' '));\n\n            that._applyCssClasses();\n          },\n          _aria: function () {\n            var that = this,\n                element = that.element,\n                popup = that._popup,\n                enabled = that._enabled;\n            element.attr(ARIA_DISABLED, !enabled);\n            element.attr(ARIA_HASPOPUP, popup ? true : null);\n            element.attr(ARIA_EXPANDED, popup ? false : null);\n            element.attr(ARIA_CONTROLS, popup ? popup.element.attr(ID) : null);\n\n            if (popup) {\n              popup.element.attr(ARIA_ROLE, ROLE_MENU);\n              popup.element.find(DOT + cssClasses.item).attr(ARIA_ROLE, ROLE_MENU_ITEM).attr(TABINDEX, -1);\n            }\n          },\n          _renderList: function () {\n            var that = this,\n                items = that.options.items,\n                appendTarget = document.body,\n                container = $(\"<ul>\").addClass(cssClasses.list);\n\n            if (!items.length) {\n              return;\n            } // Append\n\n\n            that._list = container.appendTo(appendTarget); // Render\n\n            items.forEach(that._renderListItem.bind(that)); // Orientation\n\n            container.addClass(that._getListOrientation());\n          },\n          _renderListItem: function (item) {\n            var that = this,\n                itemTemplate = kendo.template(templates.item),\n                template = item.template ? kendo.template(item.template) : itemTemplate,\n                itemWrapper = $(\"<li>\").addClass(cssClasses.item); // Alignment\n\n            itemWrapper.addClass(that._getListItemsAlignment()); // Classes\n\n            itemWrapper.addClass(item.cssClass); // Title\n\n            itemWrapper.attr(ARIA_LABEL, item.title || item.label || \"\"); // State\n\n            that._enableListItem(itemWrapper, item.enabled); // Template\n\n\n            itemWrapper.append(template({\n              icon: item.icon,\n              text: item.label\n            }));\n\n            that._list.append(itemWrapper);\n          },\n          _enableListItem: function (item, value) {\n            if (!item || value === undefined) {\n              return;\n            }\n\n            item.toggleClass(cssClasses.disabled, !value);\n\n            if (value) {\n              item.removeAttr(ARIA_DISABLED);\n            } else {\n              item.attr(ARIA_DISABLED, true);\n            }\n          },\n          _getListOrientation: function () {\n            var that = this,\n                alignment = that._getAlignment();\n\n            if (alignment.vertical === BOTTOM) {\n              return cssClasses.listTop;\n            }\n\n            return cssClasses.listBottom;\n          },\n          _getListItemsAlignment: function () {\n            var that = this,\n                isRtl = support.isRtl(that.element),\n                alignment = that._getAlignment();\n\n            if (alignment.horizontal === START || alignment.horizontal === CENTER) {\n              return !isRtl ? cssClasses.listTextLeft : cssClasses.listTextRight;\n            }\n\n            return !isRtl ? cssClasses.listTextRight : cssClasses.listTextLeft;\n          },\n          _getListItemOffset: function () {\n            var that = this,\n                element = that.element,\n                icons = that._list.find(DOT + cssClasses.itemIcon),\n                margin = 0;\n\n            if (element.length && icons.length && !that.options.text) {\n              margin = element.outerWidth() / 2 - icons.first().outerWidth() / 2;\n            }\n\n            return margin;\n          },\n          _initPopup: function () {\n            var that = this,\n                element = that.element,\n                options = that.options,\n                list = that._list,\n                positionOptions;\n\n            if (!list) {\n              return;\n            }\n\n            positionOptions = that._getPopupPosition();\n            that._popup = new ui.Popup(list, extend({}, options.popup, {\n              anchor: element,\n              appendTo: list.parent(),\n              copyAnchorStyles: false,\n              autosize: false,\n              collision: \"\",\n              position: positionOptions.position,\n              origin: positionOptions.origin,\n              animation: {\n                open: {\n                  effects: kendo.parseEffects(ui.Popup.fn.options.animation.open.effects, positionOptions.flipped)\n                }\n              },\n              open: that._popupOpenHandler.bind(that),\n              close: that._popupCloseHandler.bind(that),\n              activate: that._popupExpandHandler.bind(that),\n              deactivate: that._popupCollapseHandler.bind(that)\n            }));\n\n            that._popup.element.addClass([cssClasses.popup, cssClasses.popupTransparent].join(' '));\n\n            that._setPopupId();\n          },\n          _setPopupId: function () {\n            var that = this,\n                id = that.element.attr(ID);\n\n            if (!id) {\n              id = kendo.guid();\n            }\n\n            that._popup.element.attr(ID, id + \"-list\");\n          },\n          _getPopupPosition: function () {\n            var that = this,\n                align = that.options.align,\n                isRtl = support.isRtl(that.element),\n                start = isRtl ? RIGHT : LEFT,\n                end = isRtl ? LEFT : RIGHT,\n                origin,\n                position,\n                flipped = false;\n\n            switch (align) {\n              case \"top end\":\n              case \"middle end\":\n                origin = \"bottom \" + end;\n                position = \"top \" + end;\n                break;\n\n              case \"bottom start\":\n              case \"bottom center\":\n                origin = \"top \" + start;\n                position = \"bottom \" + start;\n                flipped = true;\n                break;\n\n              case \"bottom end\":\n                origin = \"top \" + end;\n                position = \"bottom \" + end;\n                flipped = true;\n                break;\n\n              default:\n                origin = \"bottom \" + start;\n                position = \"top \" + start;\n            }\n\n            return {\n              origin: origin,\n              position: position,\n              flipped: flipped\n            };\n          },\n          _popupOpenHandler: function () {\n            var that = this,\n                popup = that._popup,\n                containerOffset = this._getListItemOffset();\n\n            this.element.attr(ARIA_EXPANDED, true); // Set popup offset\n\n            popup.element.css({\n              paddingLeft: containerOffset\n            });\n            popup.element.css({\n              paddingRight: containerOffset\n            });\n          },\n          _popupCloseHandler: function () {\n            this.element.attr(ARIA_EXPANDED, false);\n          },\n          _popupExpandHandler: function (ev) {\n            if (this.trigger(EXPAND)) {\n              ev.preventDefault();\n            }\n\n            this._popup.element.find(DOT + cssClasses.item).first().trigger(\"focus\");\n          },\n          _popupCollapseHandler: function (ev) {\n            if (this.trigger(COLLAPSE)) {\n              ev.preventDefault();\n            }\n          },\n          _attachEvents: function () {\n            var that = this,\n                popup = that._popup;\n            that.element.on(CLICK + NS, that._click.bind(that));\n\n            if (popup) {\n              popup.element.on(CLICK + NS, DOT + cssClasses.item, that._itemClick.bind(that)).on(KEYDOWN + NS, DOT + cssClasses.item, that._itemKeydown.bind(that)).on(HOVEREVENTS, DOT + cssClasses.item, that._itemHover.bind(that));\n            }\n          },\n          _click: function (ev) {\n            var that = this,\n                options = that.options,\n                popup = that._popup;\n\n            if (that.trigger(CLICK, {\n              event: ev\n            })) {\n              ev.preventDefault();\n              return;\n            }\n\n            if (!popup && !options.items.length) {\n              return;\n            }\n\n            if (!popup.visible()) {\n              popup.open();\n            } else {\n              popup.close();\n            }\n          },\n          _itemClick: function (ev) {\n            var that = this,\n                target = $(ev.target),\n                item,\n                itemOptions,\n                handler,\n                eventData;\n\n            if (!target) {\n              return;\n            }\n\n            item = target.closest(DOT + cssClasses.item);\n\n            if (item.length) {\n              itemOptions = that.options.items[item.index()];\n              handler = itemOptions.click && kendo.isFunction(itemOptions.click) ? itemOptions.click : null;\n              eventData = {\n                sender: that,\n                target: item,\n                item: itemOptions\n              };\n\n              if (handler) {\n                that.element.trigger(\"focus\");\n\n                that._popup.close();\n\n                handler.call(that, eventData);\n              }\n            }\n          },\n          _itemKeydown: function (ev) {\n            var that = this,\n                target = $(ev.target),\n                keyCode = ev.keyCode,\n                element = that.element,\n                popup = that._popup,\n                isBottom = that._getAlignment().vertical === BOTTOM,\n                isDisabled = target.hasClass(cssClasses.disabled),\n                listItems = that._list.children(),\n                index = listItems.index(ev.target);\n\n            if (!target.is(DOT + cssClasses.item)) {\n              return;\n            }\n\n            ev.preventDefault();\n\n            if ((keyCode === keys.ENTER || keyCode === keys.SPACEBAR) && !isDisabled) {\n              that._itemClick(ev);\n            }\n\n            if (!isBottom && keyCode === keys.DOWN || isBottom && keyCode === keys.UP) {\n              if (index === listItems.length - 1) {\n                listItems.first().trigger(\"focus\");\n                return;\n              }\n\n              $(listItems[index + 1]).trigger(\"focus\");\n            }\n\n            if (!isBottom && keyCode === keys.UP || isBottom && keyCode === keys.DOWN) {\n              if (index === 0) {\n                listItems.last().trigger(\"focus\");\n                return;\n              }\n\n              $(listItems[index - 1]).trigger(\"focus\");\n            }\n\n            if (keyCode === keys.ESC || keyCode === keys.TAB) {\n              popup.close();\n              element.trigger(\"focus\");\n            }\n\n            if (keyCode === keys.HOME) {\n              listItems.first().trigger(\"focus\");\n            }\n\n            if (keyCode === keys.END) {\n              listItems.last().trigger(\"focus\");\n            }\n          },\n          _itemHover: function (ev) {\n            var target = $(kendo.eventTarget(ev) || ev.target).closest(DOT + cssClasses.item);\n\n            if (!target.hasClass(cssClasses.item)) {\n              return;\n            }\n\n            target.siblings().removeClass(cssClasses.hover);\n            target.toggleClass(cssClasses.hover);\n          },\n          text: function (text) {\n            var that = this,\n                element = that.element,\n                textElement = element.find(DOT + cssClasses.text),\n                textTemplate = kendo.template(templates.text);\n\n            if (arguments.length === 0 || text === undefined) {\n              return that._text;\n            }\n\n            that.options.text = that._text = kendo.htmlEncode(text); // Clear text node\n\n            element.contents().filter(function () {\n              return this.nodeType === 3;\n            }).remove(); // Remove text\n\n            if (text === false || text === null || text === '') {\n              that._text = '';\n              textElement.remove();\n              return;\n            } // Set text\n\n\n            if (!textElement.length) {\n              textElement = $(textTemplate({\n                text: text\n              })).appendTo(element);\n              return;\n            }\n\n            textElement.text(text);\n          },\n          icon: function (icon) {\n            var that = this,\n                element = that.element,\n                iconElement = element.find(DOT + cssClasses.icon),\n                iconTemplate = kendo.template(templates.icon);\n\n            if (arguments.length === 0 || icon === undefined) {\n              return that._icon;\n            }\n\n            that.options.icon = that._icon = kendo.htmlEncode(icon); // Remove icon\n\n            if (icon === false || icon === null || icon === '') {\n              that._icon = '';\n              iconElement.remove();\n              return;\n            } // Set icon\n\n\n            iconElement.remove();\n            element.prepend(iconTemplate({\n              icon: icon\n            }));\n          },\n          themeColor: function (color) {\n            var that = this;\n\n            if (color === undefined) {\n              return that.options.themeColor;\n            }\n\n            that.setOptions({\n              themeColor: color\n            });\n          },\n          shape: function (shape) {\n            var that = this;\n\n            if (shape === undefined) {\n              return that.options.shape;\n            }\n\n            this.setOptions({\n              shape: shape\n            });\n          },\n          hide: function () {\n            var that = this;\n            that.options.visible = that._visible = false;\n\n            that._updateClassNames();\n          },\n          show: function () {\n            var that = this;\n            that.options.visible = that._visible = true;\n\n            that._updateClassNames();\n          },\n          enable: function (enable) {\n            var that = this;\n\n            if (enable === undefined) {\n              enable = true;\n            }\n\n            that.options.enabled = that._enabled = enable;\n\n            that._updateClassNames();\n\n            that.element.attr(ARIA_DISABLED, !enable);\n          },\n          setOptions: function (options) {\n            var that = this;\n            Widget.fn.setOptions.call(that, options);\n            that.element.removeAttr(\"style\");\n            that.element.css(that._getOffset());\n\n            that._content();\n\n            that._appearance();\n\n            if (options.align || options.items) {\n              that.element.off(NS);\n              that.destroyPopup();\n\n              that._renderList();\n\n              that._initPopup();\n\n              that._attachEvents();\n            }\n\n            that._aria();\n          },\n          destroyPopup: function () {\n            var that = this;\n\n            if (that._popup) {\n              that._popup.destroy();\n\n              that._popup = null;\n\n              that._list.off(NS);\n\n              that._list.remove();\n\n              that._list = null;\n            }\n          },\n          destroy: function () {\n            var that = this;\n            that.destroyPopup();\n            that.element.off(NS);\n            Widget.fn.destroy.call(that);\n          }\n        });\n        kendo.cssProperties.registerPrefix(\"FloatingActionButton\", \"k-fab-\");\n        kendo.cssProperties.registerValues(\"FloatingActionButton\", [{\n          prop: \"fillMode\",\n          values: ['solid']\n        }, {\n          prop: \"themeColor\",\n          values: ['primary', 'secondary', 'tertiary', 'info', 'success', 'warning', 'error', 'dark', 'light', 'inverse']\n        }, {\n          prop: \"rounded\",\n          values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n        }]);\n        ui.plugin(FloatingActionButton);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}