{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1281);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1063:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.data\");\n    /***/\n  },\n\n  /***/\n  1217:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.resizable\");\n    /***/\n  },\n\n  /***/\n  1281:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1063), __webpack_require__(1217), __webpack_require__(1282), __webpack_require__(1283), __webpack_require__(1284), __webpack_require__(1285), __webpack_require__(1286), __webpack_require__(1287)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"gantt\",\n        name: \"Gantt\",\n        category: \"web\",\n        description: \"The Gantt component.\",\n        depends: [\"data\", \"resizable\", \"switch\", \"gantt.data\", \"gantt.editors\", \"gantt.list\", \"gantt.timeline\", \"pdf\"]\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            keys = $.extend({\n          F10: 121\n        }, kendo.keys),\n            supportsMedia = (\"matchMedia\" in window),\n            mobileOS = kendo.support.mobileOS,\n            Widget = kendo.ui.Widget,\n            ObservableObject = kendo.data.ObservableObject,\n            ObservableArray = kendo.data.ObservableArray,\n            Query = kendo.data.Query,\n            isArray = Array.isArray,\n            inArray = $.inArray,\n            isFunction = kendo.isFunction,\n            extend = $.extend,\n            isPlainObject = $.isPlainObject,\n            outerWidth = kendo._outerWidth,\n            outerHeight = kendo._outerHeight,\n            defaultIndicatorWidth = 3,\n            NS = \".kendoGantt\",\n            PERCENTAGE_FORMAT = \"p0\",\n            TABINDEX = \"tabIndex\",\n            CLICK = \"click\",\n            STRING = \"string\",\n            ARIA_DESCENDANT = \"aria-activedescendant\",\n            ARIA_LABEL = \"aria-label\",\n            ACTIVE_CELL = \"gantt_active_cell\",\n            DOT = \".\",\n            TASK_DELETE_CONFIRM = \"Are you sure you want to delete this task?\",\n            DEPENDENCY_DELETE_CONFIRM = \"Are you sure you want to delete this dependency?\",\n            TOGGLE_BUTTON_TEMPLATE = kendo.template('<button class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-icon-button k-gantt-toggle\" type=\"button\" ' + ARIA_LABEL + '=\"Toggle\"><span class=\"k-button-icon #=styles.iconToggle#\"></span></button>'),\n            BUTTON_TEMPLATE = '<button aria-label=\"#=text#\" class=\"#=styles.button# #=styles.buttonDefaults# #=className#\" type=\"button\" ' + '#if (action) {#' + 'data-action=\"#=action#\"' + '#}#' + '>' + '<span class=\"k-button-icon #=iconClass#\"></span>' + '<span class=\"k-button-text\">#=text#</span>' + '</button>',\n            COMMAND_BUTTON_TEMPLATE = '<a class=\"#=className#\" #=attr# href=\"\\\\#\"><span class=\"k-button-text\">#=text#</span></a>',\n            VIEWS_DROPDOWN_TEMPLATE = kendo.template('<select aria-label=\"#= label #\" class=\"k-dropdown k-picker k-dropdown-list #= styles.viewsDropdown #\">' + '#for(var view in views){#' + '<option value=\"#=view#\">#=views[view].title#</option>' + '#}#' + '</select>'),\n            HEADER_VIEWS_TEMPLATE = kendo.template('<div class=\"#=styles.viewsWrapper#\">' + '<span class=\"k-button-group #=styles.views#\">' + '#for(var view in views){#' + '<button type=\"button\" class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-view-#= view.toLowerCase() #\" data-#=ns#name=\"#=view#\">' + '<span class=\"k-button-text\">#=views[view].title#</span>' + '</button>' + '#}#' + '</span>' + '</div>');\n        var ganttStyles = {\n          wrapper: \"k-widget k-gantt\",\n          plannedTasks: \"k-gantt-planned\",\n          rowHeight: \"k-gantt-rowheight\",\n          content: \"k-gantt-content\",\n          listWrapper: \"k-gantt-treelist\",\n          list: \"k-gantt-treelist\",\n          timelineWrapper: \"k-gantt-timeline\",\n          timeline: \"k-gantt-timeline\",\n          splitBarWrapper: \"k-splitbar k-splitbar-horizontal k-splitbar-draggable-horizontal\",\n          splitBar: \"k-splitbar\",\n          splitBarHover: \"k-splitbar-horizontal-hover\",\n          popupWrapper: \"k-list-container\",\n          popupList: \"k-list k-reset\",\n          resizeHandle: \"k-resize-handle\",\n          icon: \"k-icon\",\n          item: \"k-item\",\n          line: \"k-gantt-line\",\n          buttonDelete: \"k-gantt-delete\",\n          buttonCancel: \"k-gantt-cancel\",\n          buttonSave: \"k-gantt-update\",\n          buttonToggle: \"k-gantt-toggle\",\n          buttonDefaults: \"k-button-md k-rounded-md k-button-solid\",\n          primary: \"k-button-solid-primary\",\n          hovered: \"k-state-hover\",\n          selected: \"k-selected\",\n          focused: \"k-focus\",\n          focusedCell: \"k-state-focused\",\n          gridHeader: \"k-grid-header\",\n          gridHeaderWrap: \"k-grid-header-wrap\",\n          gridContent: \"k-grid-content\",\n          tasks: \"k-gantt-tasks\",\n          popup: {\n            form: \"k-popup-edit-form\",\n            editForm: \"k-gantt-edit-form\",\n            formContainer: \"k-edit-form-container\",\n            resourcesFormContainer: \"k-resources-form-container\",\n            message: \"k-popup-message\",\n            buttonsContainer: \"k-edit-buttons\",\n            button: \"k-button\",\n            editField: \"k-edit-field\",\n            editLabel: \"k-edit-label\",\n            resourcesField: \"k-gantt-resources\"\n          },\n          toolbar: {\n            headerWrapper: \"k-gantt-header k-toolbar k-gantt-toolbar\",\n            footerWrapper: \"k-gantt-footer k-toolbar k-gantt-toolbar\",\n            toolbar: \"k-gantt-toolbar\",\n            views: \"k-gantt-views\",\n            viewsWrapper: \"k-gantt-views-wrapper\",\n            viewsDropdown: \"k-views-dropdown\",\n            button: \"k-button\",\n            buttonToggle: \"k-gantt-toggle\",\n            buttonDefaults: \"k-button-md k-rounded-md k-button-solid\",\n            iconPlus: \"k-icon k-i-plus\",\n            iconPdf: \"k-icon k-i-file-pdf\",\n            iconToggle: \"k-icon k-i-layout-1-by-4\",\n            viewButton: \"k-view\",\n            link: \"k-link\",\n            pdfButton: \"k-gantt-pdf\",\n            appendButton: \"k-gantt-create\"\n          }\n        };\n\n        function selector(uid) {\n          return \"[\" + kendo.attr(\"uid\") + (uid ? \"='\" + uid + \"']\" : \"]\");\n        }\n\n        function trimOptions(options) {\n          delete options.name;\n          delete options.prefix;\n          delete options.remove;\n          delete options.edit;\n          delete options.add;\n          delete options.navigate;\n          return options;\n        }\n\n        function focusTable(table, direct) {\n          var wrapper = table.parents('[' + kendo.attr(\"role\") + '=\"gantt\"]');\n          var scrollPositions = [];\n          var parents = scrollableParents(wrapper);\n          table.attr(TABINDEX, 0);\n\n          if (direct) {\n            parents.each(function (index, parent) {\n              scrollPositions[index] = $(parent).scrollTop();\n            });\n          }\n\n          try {\n            //The setActive method does not cause the document to scroll to the active object in the current page\n            table[0].setActive();\n          } catch (e) {\n            table[0].focus();\n          }\n\n          if (direct) {\n            parents.each(function (index, parent) {\n              $(parent).scrollTop(scrollPositions[index]);\n            });\n          }\n        }\n\n        function scrollableParents(element) {\n          return $(element).parentsUntil(\"body\").filter(function (index, element) {\n            var computedStyle = kendo.getComputedStyles(element, [\"overflow\"]);\n            return computedStyle.overflow != \"visible\";\n          }).add(window);\n        }\n\n        var defaultCommands;\n        var Gantt = Widget.extend({\n          init: function (element, options, events) {\n            if (isArray(options)) {\n              options = {\n                dataSource: options\n              };\n            }\n\n            defaultCommands = {\n              append: {\n                text: \"Add Task\",\n                action: \"add\",\n                className: Gantt.styles.toolbar.appendButton + \" k-button-solid-base\",\n                iconClass: Gantt.styles.toolbar.iconPlus\n              },\n              pdf: {\n                text: \"Export to PDF\",\n                className: Gantt.styles.toolbar.pdfButton + \" k-button-solid-base\",\n                iconClass: Gantt.styles.toolbar.iconPdf\n              }\n            };\n            Widget.fn.init.call(this, element, options);\n\n            if (events) {\n              this._events = events;\n            }\n\n            this._wrapper();\n\n            this._resources();\n\n            if (!this.options.views || !this.options.views.length) {\n              this.options.views = [\"day\", \"week\", \"month\"];\n            }\n\n            this._timeline();\n\n            this._toolbar();\n\n            this._footer();\n\n            this._adjustDimensions(); // Prevent extra refresh from setting the view\n\n\n            this._preventRefresh = true;\n            this.view(this.timeline._selectedViewName);\n            this._preventRefresh = false;\n\n            this._dataSource();\n\n            this._assignments();\n\n            this._dropDowns();\n\n            this._list();\n\n            this._dependencies();\n\n            this._resizable();\n\n            this._scrollable();\n\n            this._dataBind();\n\n            this._attachEvents();\n\n            this._createEditor();\n\n            kendo.notify(this);\n          },\n          events: [\"dataBinding\", \"dataBound\", \"add\", \"edit\", \"remove\", \"cancel\", \"save\", \"change\", \"navigate\", \"moveStart\", \"move\", \"moveEnd\", \"resizeStart\", \"resize\", \"resizeEnd\", \"columnHide\", \"columnReorder\", \"columnResize\", \"columnShow\", \"togglePlannedTasks\"],\n          options: {\n            name: \"Gantt\",\n            autoBind: true,\n            navigatable: false,\n            selectable: true,\n            editable: true,\n            resizable: false,\n            columnResizeHandleWidth: defaultIndicatorWidth,\n            columns: [],\n            views: [],\n            dataSource: {},\n            dependencies: {},\n            resources: {},\n            assignments: {},\n            taskTemplate: null,\n            messages: {\n              save: \"Save\",\n              cancel: \"Cancel\",\n              destroy: \"Delete\",\n              deleteTaskConfirmation: TASK_DELETE_CONFIRM,\n              deleteDependencyConfirmation: DEPENDENCY_DELETE_CONFIRM,\n              deleteTaskWindowTitle: \"Delete task\",\n              deleteDependencyWindowTitle: \"Delete dependency\",\n              selectView: \"Select view\",\n              views: {\n                day: \"Day\",\n                week: \"Week\",\n                month: \"Month\",\n                year: \"Year\",\n                start: \"Start\",\n                end: \"End\"\n              },\n              actions: {\n                append: \"Add Task\",\n                addChild: \"Add Child\",\n                insertBefore: \"Add Above\",\n                insertAfter: \"Add Below\",\n                pdf: \"Export to PDF\"\n              },\n              editor: {\n                editorTitle: \"Task\",\n                resourcesEditorTitle: \"Resources\",\n                title: \"Title\",\n                start: \"Start\",\n                end: \"End\",\n                plannedStart: \"Planned Start\",\n                plannedEnd: \"Planned End\",\n                percentComplete: \"Complete\",\n                resources: \"Resources\",\n                assignButton: \"Assign\",\n                resourcesHeader: \"Resources\",\n                unitsHeader: \"Units\"\n              },\n              plannedTasks: {\n                switchText: \"Planned Tasks\",\n                offsetTooltipAdvanced: \"Met deadline earlier\",\n                offsetTooltipDelay: \"Delay\",\n                seconds: \"seconds\",\n                minutes: \"minutes\",\n                hours: \"hours\",\n                days: \"days\"\n              }\n            },\n            showWorkHours: true,\n            showWorkDays: true,\n            toolbar: null,\n            workDayStart: new Date(1980, 1, 1, 8, 0, 0),\n            workDayEnd: new Date(1980, 1, 1, 17, 0, 0),\n            workWeekStart: 1,\n            workWeekEnd: 5,\n            hourSpan: 1,\n            snap: true,\n            height: 600,\n            listWidth: \"30%\",\n            rowHeight: null,\n            showPlannedTasks: false\n          },\n          select: function (value) {\n            var list = this.list;\n\n            if (!value) {\n              return list.select();\n            }\n\n            if (typeof value === STRING) {\n              value = list.content.find(value);\n            }\n\n            list.select(value);\n            this.list.element.find(\"table[role=treegrid]\").trigger(\"focus\");\n            return;\n          },\n          clearSelection: function () {\n            this.list.clearSelection();\n            this.list.trigger(\"change\");\n          },\n          destroy: function () {\n            Widget.fn.destroy.call(this);\n\n            if (this.dataSource) {\n              this.dataSource.unbind(\"change\", this._refreshHandler);\n              this.dataSource.unbind(\"progress\", this._progressHandler);\n              this.dataSource.unbind(\"error\", this._errorHandler);\n            }\n\n            if (this.dependencies) {\n              this.dependencies.unbind(\"change\", this._dependencyRefreshHandler);\n              this.dependencies.unbind(\"error\", this._dependencyErrorHandler);\n            }\n\n            if (this.timeline) {\n              this.timeline.unbind();\n              this.timeline.destroy();\n            }\n\n            if (this.list) {\n              this.list.unbind();\n              this.list.destroy();\n            }\n\n            if (this.footerDropDown) {\n              this.footerDropDown.destroy();\n            }\n\n            if (this.headerDropDown) {\n              this.headerDropDown.destroy();\n            }\n\n            if (this._editor) {\n              this._editor.destroy();\n            }\n\n            if (this._resizeDraggable) {\n              this._resizeDraggable.destroy();\n            }\n\n            this.toolbar.off(NS);\n\n            if (supportsMedia) {\n              this._mediaQuery.removeListener(this._mediaQueryHandler);\n\n              this._mediaQuery = null;\n            }\n\n            $(window).off(\"resize\" + NS, this._resizeHandler);\n            $(this.wrapper).off(NS);\n            this.toolbar = null;\n            this.footer = null;\n            kendo.destroy(this.element);\n          },\n          setOptions: function (options) {\n            var newOptions = kendo.deepExtend({}, this.options, options);\n            var events = this._events;\n\n            if (!options.views) {\n              var selectedView = this.view().name;\n              newOptions.views = $.map(this.options.views, function (view) {\n                var isSettings = isPlainObject(view);\n                var name = isSettings ? typeof view.type !== \"string\" ? view.title : view.type : view;\n\n                if (selectedView === name) {\n                  if (isSettings) {\n                    view.selected = true;\n                  } else {\n                    view = {\n                      type: name,\n                      selected: true\n                    };\n                  }\n                } else if (isSettings) {\n                  view.selected = false;\n                }\n\n                return view;\n              });\n            }\n\n            if (!options.dataSource) {\n              newOptions.dataSource = this.dataSource;\n            }\n\n            if (!options.dependencies) {\n              newOptions.dependencies = this.dependencies;\n            }\n\n            if (!options.resources) {\n              newOptions.resources = this.resources;\n            }\n\n            if (!options.assignments) {\n              newOptions.assignments = this.assignments;\n            }\n\n            this.destroy();\n            this.element.empty();\n            this.options = null;\n            this.init(this.element, newOptions, events);\n\n            Widget.fn._setEvents.call(this, newOptions);\n          },\n          _attachEvents: function () {\n            this._resizeHandler = this.resize.bind(this, false);\n            $(window).on(\"resize\" + NS, this._resizeHandler);\n\n            if (supportsMedia && this._mediaQuery.matches === true) {\n              this._mediaQueryHandler({\n                matches: true\n              });\n            }\n          },\n          _wrapper: function () {\n            var ganttStyles = Gantt.styles;\n            var splitBarHandleClassName = [ganttStyles.icon, ganttStyles.resizeHandle].join(\" \");\n            var options = this.options;\n            var height = options.height;\n            var width = options.width;\n            this.wrapper = this.element.addClass(ganttStyles.wrapper);\n            this.layout = $(\"<div class='\" + ganttStyles.content + \"' />\").appendTo(this.wrapper).append(\"<div class='\" + ganttStyles.listWrapper + \"'><div></div></div>\").append(\"<div class='\" + ganttStyles.splitBarWrapper + \"'><div class='\" + splitBarHandleClassName + \"'></div></div>\").append(\"<div class='\" + ganttStyles.timelineWrapper + \"'><div></div></div>\");\n\n            if (options.showPlannedTasks) {\n              this.wrapper.addClass(ganttStyles.plannedTasks);\n            }\n\n            if (height) {\n              this.wrapper.css(\"height\", height);\n            }\n\n            if (width) {\n              this.wrapper.css(\"width\", width);\n            }\n\n            if (options.rowHeight) {\n              this.wrapper.addClass(ganttStyles.rowHeight);\n            }\n\n            this.treelistWrapper = this.wrapper.find(DOT + ganttStyles.list);\n            this.splitbar = this.wrapper.find(DOT + ganttStyles.splitBar);\n            this.timelineWrapper = this.wrapper.find(DOT + ganttStyles.timeline);\n            this.treelistWrapper.css(\"width\", options.listWidth);\n            this.timelineWrapper.css(\"width\", this.wrapper.width() - this.treelistWrapper.outerWidth() - this.splitbar.outerWidth());\n          },\n          _toolbar: function () {\n            var that = this;\n            var ganttStyles = Gantt.styles;\n            var viewsSelector = DOT + ganttStyles.toolbar.views + \" > button\";\n            var viewsDropdownSelector = DOT + ganttStyles.toolbar.viewsDropdown;\n            var pdfSelector = DOT + ganttStyles.toolbar.pdfButton;\n            var toggleSelector = DOT + ganttStyles.buttonToggle;\n            var contentSelector = DOT + ganttStyles.gridContent;\n            var splitbar = that.splitbar;\n            var treelist = that.treelistWrapper;\n            var timeline = that.timelineWrapper;\n            var actions = this.options.toolbar;\n            var toolbar;\n            var views;\n            var toggleButton;\n\n            var mediaQueryHandler = function (e) {\n              if (e.matches) {\n                treelist.addClass(\"k-hidden\");\n                splitbar.addClass(\"k-hidden\");\n                treelist.width(\"100%\");\n              } else {\n                treelist.removeClass(\"k-hidden\");\n                splitbar.removeClass(\"k-hidden\");\n                timeline.removeClass(\"k-hidden\");\n                treelist.width(treelist.outerWidth());\n                that.refresh();\n                timeline.find(contentSelector).scrollTop(that.scrollTop);\n              }\n\n              that._resize();\n            };\n\n            if (!isFunction(actions)) {\n              actions = typeof actions === STRING ? actions : this._actions(actions);\n              actions = kendo.template(actions).bind(this);\n            }\n\n            toggleButton = $(TOGGLE_BUTTON_TEMPLATE({\n              styles: ganttStyles.toolbar\n            }));\n            views = $(HEADER_VIEWS_TEMPLATE({\n              ns: kendo.ns,\n              views: this.timeline.views,\n              styles: ganttStyles.toolbar\n            }));\n            toolbar = $(\"<div role='toolbar' class='\" + ganttStyles.toolbar.headerWrapper + \"'>\").append(toggleButton).append(actions({})).append(\"<span class='k-spacer k-toolbar-spacer' />\").append(views);\n\n            if (views.find(\"button\").length > 1) {\n              views.prepend(VIEWS_DROPDOWN_TEMPLATE({\n                ns: kendo.ns,\n                views: this.timeline.views,\n                styles: ganttStyles.toolbar,\n                label: this.options.messages.selectView\n              }));\n            }\n\n            if (this.toggeSwitchWrap) {\n              this.toggeSwitchWrap.insertBefore(views);\n            }\n\n            this.wrapper.prepend(toolbar);\n            this.toolbar = toolbar;\n\n            if (supportsMedia) {\n              this._mediaQueryHandler = mediaQueryHandler.bind(this);\n              this._mediaQuery = window.matchMedia(\"(max-width: 480px)\");\n\n              this._mediaQuery.addListener(this._mediaQueryHandler);\n            }\n\n            toolbar.on(\"change\" + NS, viewsDropdownSelector, function () {\n              var list = that.list;\n              var name = $(this).val();\n\n              if (list.editable && list.editable.trigger(\"validate\")) {\n                return;\n              }\n\n              if (!that.trigger(\"navigate\", {\n                view: name\n              })) {\n                that.view(name);\n              }\n\n              that.toolbar.find(DOT + ganttStyles.focused).removeClass(ganttStyles.focused);\n            }).on(CLICK + NS, viewsSelector, function (e) {\n              e.preventDefault();\n              var list = that.list;\n              var name = $(this).attr(kendo.attr(\"name\"));\n\n              if (list.editor && !list.editor.end()) {\n                return;\n              }\n\n              if (!that.trigger(\"navigate\", {\n                view: name\n              })) {\n                that.view(name);\n              }\n\n              that.toolbar.find(DOT + ganttStyles.focused).removeClass(ganttStyles.focused);\n            }).on(\"keydown\" + NS, viewsSelector, function (e) {\n              var views = $(DOT + ganttStyles.toolbar.views).children(\":not(.k-current-view)\");\n              var focusedViewIndex = views.index(that._focusedView && that._focusedView[0] || views.closest(DOT + ganttStyles.selected)[0]);\n\n              if (e.keyCode === keys.RIGHT) {\n                $(that.toolbar.find(DOT + ganttStyles.focused)).removeClass(ganttStyles.focused);\n                that._focusedView = focusedViewIndex + 1 === views.length ? $(views[0]) : $(views[focusedViewIndex + 1]);\n\n                that._focusedView.trigger(\"focus\").addClass(ganttStyles.focused);\n\n                e.preventDefault();\n              } else if (e.keyCode === keys.LEFT) {\n                $(that.toolbar.find(DOT + ganttStyles.focused)).removeClass(ganttStyles.focused);\n                that._focusedView = focusedViewIndex === 0 ? $(views[views.length - 1]) : $(views[focusedViewIndex - 1]);\n\n                that._focusedView.trigger(\"focus\").addClass(ganttStyles.focused);\n\n                e.preventDefault();\n              } else if ((e.keyCode === keys.ENTER || e.keyCode === keys.SPACEBAR) && that._focusedView) {\n                that.view(that._focusedView.text().toLowerCase());\n                e.preventDefault();\n              } else if (e.keyCode >= 49 && e.keyCode <= 57) {\n                that.view(that.timeline._viewByIndex(e.keyCode - 49));\n              }\n            }).on(CLICK + NS, pdfSelector, function (e) {\n              e.preventDefault();\n              that.saveAsPDF();\n            }).on(CLICK + NS, toggleSelector, function (e) {\n              e.preventDefault();\n\n              if (treelist.is(\":visible\")) {\n                treelist.addClass(\"k-hidden\");\n                timeline.removeClass(\"k-hidden\");\n                that.refresh();\n                timeline.find(contentSelector).scrollTop(that.scrollTop);\n              } else {\n                treelist.removeClass(\"k-hidden\");\n                timeline.addClass(\"k-hidden\");\n                treelist.find(contentSelector).scrollTop(that.scrollTop);\n              }\n\n              that._resize();\n            });\n            this.wrapper.on(\"focusout\" + NS, function (e) {\n              if (!$(e.relatedTarget).closest(DOT + ganttStyles.toolbar.toolbar).length) {\n                that.toolbar.find(DOT + ganttStyles.focused).removeClass(ganttStyles.focused);\n              }\n\n              if (!$(e.relatedTarget).closest(DOT + ganttStyles.toolbar.views).length) {\n                that.toolbar.find(DOT + ganttStyles.toolbar.views).removeClass(ganttStyles.toolbar.expanded);\n              }\n            });\n          },\n          _actions: function () {\n            var options = this.options;\n            var editable = options.editable;\n            var actions = options.toolbar;\n            var html = \"\";\n            var action;\n\n            if (!isArray(actions)) {\n              if (editable && editable.create !== false) {\n                actions = [\"append\"];\n              } else {\n                return html;\n              }\n            }\n\n            for (var i = 0, length = actions.length; i < length; i++) {\n              action = actions[i];\n\n              if (action === \"plannedTasks\" || action.name === \"plannedTasks\") {\n                this._createPlannedTasksSwitch();\n\n                continue;\n              }\n\n              html += this._createButton(action);\n            }\n\n            return html;\n          },\n          _footer: function () {\n            var editable = this.options.editable;\n\n            if (!editable || editable.create === false) {\n              return;\n            }\n\n            var ganttStyles = Gantt.styles.toolbar;\n            var messages = this.options.messages.actions;\n            var button = $(kendo.template(BUTTON_TEMPLATE)(extend(true, {\n              styles: ganttStyles\n            }, defaultCommands.append, {\n              text: messages.append\n            })));\n            var footer = $(\"<div class='\" + ganttStyles.footerWrapper + \"'>\").append(button);\n            this.wrapper.append(footer);\n            this.footer = footer;\n          },\n          _createButton: function (command) {\n            var template = command.template || BUTTON_TEMPLATE;\n            var messages = this.options.messages.actions;\n            var commandName = typeof command === STRING ? command : command.name || command.text;\n            var className = defaultCommands[commandName] ? defaultCommands[commandName].className : \"k-gantt-\" + (commandName || \"\").replace(/\\s/g, \"\");\n            var options = {\n              iconClass: \"\",\n              action: \"\",\n              text: commandName,\n              className: className,\n              styles: Gantt.styles.toolbar\n            };\n\n            if (!options.className) {\n              options.className = \"k-button-solid-base\";\n            } else if (options.className.indexOf(\"k-button-solid-primary\") === -1) {\n              options.className += \" k-button-solid-base\";\n            }\n\n            if (!commandName && !(isPlainObject(command) && command.template)) {\n              throw new Error(\"Custom commands should have name specified\");\n            }\n\n            options = extend(true, options, defaultCommands[commandName], {\n              text: messages[commandName]\n            });\n\n            if (isPlainObject(command)) {\n              if (command.className && inArray(options.className, command.className.split(\" \")) < 0) {\n                command.className += \" \" + options.className;\n              }\n\n              options = extend(true, options, command);\n            }\n\n            return kendo.template(template)(options);\n          },\n          _adjustDimensions: function () {\n            var element = this.element;\n            var toolbarHeight = outerHeight(this.toolbar);\n            var footerHeight = this.footer ? outerHeight(this.footer) : 0;\n            var totalHeight = element.height();\n            var totalWidth = element.width();\n            var splitBarWidth = this.splitbar.is(\":visible\") ? outerWidth(this.splitbar) : 0;\n            var treeListWidth = this.treelistWrapper.is(\":visible\") ? outerWidth(this.treelistWrapper) : 0;\n            var timelineWidth = totalWidth - (treeListWidth + splitBarWidth);\n            this.layout.children().height(totalHeight - (toolbarHeight + footerHeight));\n            this.timelineWrapper.width(timelineWidth);\n\n            if (totalWidth < treeListWidth + splitBarWidth) {\n              this.treelistWrapper.width(totalWidth - splitBarWidth);\n            }\n          },\n          _scrollTo: function (value) {\n            var view = this.timeline.view();\n            var list = this.list;\n            var attr = kendo.attr(\"uid\");\n            var id = typeof value === \"string\" ? value : value.closest(\"tr\" + selector()).attr(attr);\n            var action;\n            var scrollTarget;\n\n            var scrollIntoView = function () {\n              if (scrollTarget.length !== 0) {\n                action();\n              }\n            };\n\n            if (view.content.is(\":visible\")) {\n              scrollTarget = view.content.find(selector(id));\n\n              action = function () {\n                view._scrollTo(scrollTarget);\n              };\n            } else {\n              scrollTarget = list.element.find(selector(id));\n\n              action = function () {\n                scrollTarget.get(0).scrollIntoView();\n              };\n            }\n\n            scrollIntoView();\n          },\n          _dropDowns: function () {\n            var that = this;\n            var actionsSelector = DOT + Gantt.styles.toolbar.appendButton;\n            var actionMessages = this.options.messages.actions;\n            var timeline = this.timeline;\n            var editable = this.options.editable;\n\n            var handler = function (e) {\n              var type = e.type;\n              var orderId;\n              var dataSource = that.dataSource;\n\n              var task = dataSource._createNewModel({});\n\n              var selected = that.dataItem(that.select());\n              var parent = dataSource.taskParent(selected);\n\n              var firstSlot = timeline.view()._timeSlots()[0];\n\n              var target = type === \"add\" ? selected : parent;\n              var editable = that.list.editor;\n\n              if (editable && editable.trigger(\"validate\")) {\n                return;\n              }\n\n              task.set(\"title\", \"New task\");\n\n              if (target) {\n                task.set(\"parentId\", target.get(\"id\"));\n                task.set(\"start\", target.get(\"start\"));\n                task.set(\"end\", target.get(\"end\"));\n                task.set(\"plannedStart\", target.get(\"plannedStart\"));\n                task.set(\"plannedEnd\", target.get(\"plannedEnd\"));\n              } else {\n                task.set(\"start\", firstSlot.start);\n                task.set(\"end\", firstSlot.end);\n              }\n\n              if (type !== \"add\") {\n                orderId = selected.get(\"orderId\");\n                orderId = type === \"insert-before\" ? orderId : orderId + 1;\n              }\n\n              that._createTask(task, orderId);\n            };\n\n            if (!editable || editable.create === false) {\n              return;\n            }\n\n            this.footerDropDown = new kendo.gantt.TaskDropDown(this.footer.children(actionsSelector).eq(0), {\n              messages: {\n                actions: actionMessages\n              },\n              direction: \"up\",\n              animation: {\n                open: {\n                  effects: \"slideIn:up\"\n                }\n              }\n            });\n            this.headerDropDown = new kendo.gantt.TaskDropDown(this.toolbar.children(actionsSelector).eq(0), {\n              messages: {\n                actions: actionMessages\n              }\n            });\n            this.footerDropDown.bind(\"command\", handler);\n            this.headerDropDown.bind(\"command\", handler);\n          },\n          _getListEditable: function () {\n            var editable = false,\n                options = this.options;\n\n            if (options.editable !== false) {\n              editable = \"incell\";\n\n              if (options.editable && options.editable.update === false) {\n                editable = false;\n              } else {\n                if (!options.editable || options.editable.reorder !== false) {\n                  editable = {\n                    mode: \"incell\",\n                    move: {\n                      reorderable: true\n                    }\n                  };\n                }\n              }\n            }\n\n            return editable;\n          },\n          _getListOptions: function () {\n            var options = this.options,\n                editable = this._getListEditable(),\n                listWrapper = this.wrapper.find(DOT + ganttStyles.list),\n                ganttListOptions = {\n              columns: options.columns || [],\n              dataSource: this.dataSource,\n              selectable: options.selectable,\n              reorderable: options.reorderable,\n              editable: editable,\n              resizable: options.resizable,\n              filterable: options.filterable,\n              columnMenu: options.columnMenu,\n              columnResizeHandleWidth: this.options.columnResizeHandleWidth,\n              listWidth: outerWidth(listWrapper),\n              resourcesField: this.resources.field,\n              rowHeight: this.options.rowHeight\n            };\n\n            return ganttListOptions;\n          },\n          _attachResourceEditor: function (columns) {\n            var column;\n\n            for (var i = 0; i < columns.length; i++) {\n              column = columns[i];\n\n              if (column.field === this.resources.field && typeof column.editor !== \"function\") {\n                column.editor = this._createResourceEditor.bind(this);\n              }\n            }\n          },\n          _attachListEvents: function () {\n            var that = this,\n                navigatable = that.options.navigatable,\n                toggleButtons = this.wrapper.find(DOT + ganttStyles.toolbar.toolbar + \" \" + DOT + ganttStyles.toolbar.appendButton),\n                restoreFocus = function () {\n              var element;\n\n              if (navigatable && that._cachedCurrent) {\n                element = that.list.content.find(\"tr\").eq(that._cachedCurrent.rowIndex).find(\"td\").eq(that._cachedCurrent.columnIndex);\n\n                that._current(element);\n\n                focusTable(that.list.content.find(\"table\"), true);\n              }\n\n              delete that._cachedCurrent;\n            };\n\n            that.list.bind(\"columnShow\", function (e) {\n              that.trigger(\"columnShow\", {\n                column: e.column\n              });\n            }).bind(\"columnHide\", function (e) {\n              that.trigger(\"columnHide\", {\n                column: e.column\n              });\n            }).bind(\"columnReorder\", function (e) {\n              that.trigger(\"columnReorder\", {\n                column: e.column,\n                oldIndex: e.oldIndex,\n                newIndex: e.newIndex\n              });\n            }).bind(\"columnResize\", function (e) {\n              that.trigger(\"columnResize\", {\n                column: e.column,\n                oldWidth: e.oldWidth,\n                newWidth: e.newWidth\n              });\n            }).bind(\"render\", function () {\n              that._navigatable();\n            }, true).bind(\"beforeEdit\", function (e) {\n              that._cachedCurrent = {\n                rowIndex: e.container.closest(\"tr\").index(),\n                columnIndex: e.container.index()\n              };\n\n              if (that.trigger(\"edit\", {\n                task: e.model,\n                container: e.container\n              })) {\n                e.preventDefault();\n              }\n            }).bind(\"cancel\", function (e) {\n              if (that.trigger(\"cancel\", {\n                task: e.model,\n                container: e.cell\n              })) {\n                e.preventDefault();\n                return;\n              }\n\n              that._preventItemChange = true;\n              that.list.closeCell(true);\n              restoreFocus();\n            }).bind(\"save\", function (e) {\n              var updatedValues = e.values;\n              that._preventRefresh = true;\n\n              if (that.updateDuration === null || that.updateDuration === undefined) {\n                that.updateDuration = e.model.duration();\n              }\n\n              if (that.updatePlannedDuration === null || that.updatePlannedDuration === undefined) {\n                that.updatePlannedDuration = e.model.plannedDuration();\n              }\n\n              if (updatedValues.hasOwnProperty(\"end\")) {\n                that.previousEnd = e.model.get(\"end\");\n              }\n\n              if (updatedValues.hasOwnProperty(\"start\")) {\n                that.previousStart = e.model.get(\"start\");\n                updatedValues.end = new Date(updatedValues.start.getTime() + that.updateDuration);\n              }\n\n              if (updatedValues.hasOwnProperty(\"plannedEnd\") && updatedValues.plannedEnd) {\n                that.previousPlannedEnd = e.model.get(\"plannedEnd\");\n              }\n\n              if (updatedValues.hasOwnProperty(\"plannedStart\") && updatedValues.plannedStart) {\n                that.previousPlannedStart = e.model.get(\"plannedStart\");\n                updatedValues.plannedEnd = new Date(updatedValues.plannedStart.getTime() + that.updatePlannedDuration);\n              }\n\n              if (updatedValues.hasOwnProperty(\"percentComplete\")) {\n                that.previousPercentComplete = e.model.get(\"percentComplete\");\n              }\n\n              that.updatedValues = updatedValues;\n            }).bind(\"itemChange\", function (e) {\n              var updateInfo = that.updatedValues;\n              var task = e.data;\n              var resourcesField = that.resources.field;\n\n              if (that._preventItemChange) {\n                that._preventItemChange = false;\n                return;\n              }\n\n              if (that.previousStart) {\n                task.set(\"start\", that.previousStart);\n                that.previousStart = null;\n              }\n\n              if (that.previousEnd) {\n                task.set(\"end\", that.previousEnd);\n                that.previousEnd = null;\n              }\n\n              if (that.previousPlannedStart) {\n                task.set(\"plannedStart\", that.previousPlannedStart);\n                that.previousPlannedStart = null;\n              }\n\n              if (that.previousPlannedEnd) {\n                task.set(\"plannedEnd\", that.previousPlannedEnd);\n                that.previousPlannedEnd = null;\n              }\n\n              if (that.previousPercentComplete !== null && that.previousPercentComplete !== undefined) {\n                task.set(\"percentComplete\", that.previousPercentComplete);\n                that.previousPercentComplete = null;\n              }\n\n              if (!that.trigger(\"save\", {\n                task: task,\n                values: updateInfo\n              })) {\n                if (updateInfo) {\n                  that._preventRefresh = true;\n                  that.dataSource.update(task, updateInfo);\n\n                  if (updateInfo[resourcesField]) {\n                    that._updateAssignments(task.get(\"id\"), updateInfo[resourcesField]);\n                  }\n                }\n\n                that._preventRefresh = false;\n\n                that._requestStart();\n\n                that.dataSource.sync().then(function () {\n                  restoreFocus();\n                });\n              } else if (that.dataSource.hasChanges()) {\n                that.dataSource.cancelChanges(task);\n                that._preventRefresh = false;\n                that.refresh();\n              }\n\n              that.updatedValues = null;\n              that.updateDuration = null;\n            }).bind(\"change\", function () {\n              that.trigger(\"change\");\n              var selection = that.list.select();\n\n              if (selection.length) {\n                toggleButtons.removeAttr(\"data-action\", \"add\");\n                that.timeline.select(\"[data-uid='\" + selection.attr(\"data-uid\") + \"']\");\n              } else {\n                toggleButtons.attr(\"data-action\", \"add\");\n                that.timeline.clearSelection();\n              }\n            }).bind(\"collapse\", function (e) {\n              e.preventDefault();\n              var row = that.list.element.find(\"tr[data-uid='\" + e.model.uid + \"']\");\n              e.model.set(\"expanded\", false);\n              that._cachedCurrent = {\n                rowIndex: row.index(),\n                columnIndex: row.find(\".k-state-focused\").index()\n              };\n              restoreFocus();\n            }).bind(\"expand\", function (e) {\n              e.preventDefault();\n              var row = that.list.element.find(\"tr[data-uid='\" + e.model.uid + \"']\");\n              e.model.set(\"expanded\", true);\n              that._cachedCurrent = {\n                rowIndex: row.index(),\n                columnIndex: row.find(\".k-state-focused\").index()\n              };\n              restoreFocus();\n            }).bind(\"dragend\", function (e) {\n              var dataSource = that.dataSource,\n                  task,\n                  updateInfo;\n\n              if (e.position === \"over\") {\n                dataSource.cancelChanges();\n                updateInfo = {\n                  parentId: e.source.parentId\n                };\n                task = dataSource.get(e.source.id);\n\n                if (!that.trigger(\"save\", {\n                  task: task,\n                  values: updateInfo\n                })) {\n                  dataSource.update(task, updateInfo);\n                }\n\n                dataSource.sync();\n              }\n            }).bind(\"dataBound\", function () {\n              if (that.dataSource.sort().length === 0) {\n                that.dataSource.sort([{\n                  field: \"orderId\",\n                  dir: \"asc\"\n                }]);\n              }\n            }).bind(\"reorder\", function (e) {\n              that._updateTask(e.task, e.updateInfo);\n\n              restoreFocus();\n            });\n          },\n          _list: function () {\n            var ganttStyles = Gantt.styles,\n                listWrapper = this.wrapper.find(DOT + ganttStyles.list),\n                listElement = listWrapper.find(\"> div\"),\n                listOptions = this._getListOptions();\n\n            this._attachResourceEditor(listOptions.columns);\n\n            this.list = new kendo.ui.GanttList(listElement, listOptions);\n\n            this._attachListEvents();\n          },\n          _timeline: function () {\n            var that = this;\n            var ganttStyles = Gantt.styles;\n            var options = trimOptions(extend(true, {\n              resourcesField: this.resources.field\n            }, this.options));\n            var element = this.wrapper.find(DOT + ganttStyles.timeline + \" > div\");\n            this.timeline = new kendo.ui.GanttTimeline(element, options);\n            this.timeline.bind(\"navigate\", function (e) {\n              var viewName = e.view.replace(/\\./g, \"\\\\.\").toLowerCase();\n              that.toolbar.find(DOT + ganttStyles.toolbar.views + \" > button\").removeClass(ganttStyles.selected).end().find(DOT + ganttStyles.toolbar.viewButton + \"-\" + viewName).addClass(ganttStyles.selected);\n              that.toolbar.find(DOT + ganttStyles.toolbar.viewsDropdown).val(e.view);\n              that.refresh();\n            }).bind(\"moveStart\", function (e) {\n              var editable = that.list.editor;\n\n              if (editable && !editable.end()) {\n                e.preventDefault();\n                return;\n              }\n\n              if (that.trigger(\"moveStart\", {\n                task: e.task\n              })) {\n                e.preventDefault();\n              }\n            }).bind(\"move\", function (e) {\n              var task = e.task;\n              var start = e.start;\n              var end = new Date(start.getTime() + task.duration());\n\n              if (that.trigger(\"move\", {\n                task: task,\n                start: start,\n                end: end\n              })) {\n                e.preventDefault();\n              }\n            }).bind(\"moveEnd\", function (e) {\n              var task = e.task;\n              var start = e.start;\n              var end = new Date(start.getTime() + task.duration());\n\n              if (!that.trigger(\"moveEnd\", {\n                task: task,\n                start: start,\n                end: end\n              })) {\n                that._updateTask(that.dataSource.getByUid(task.uid), {\n                  start: start,\n                  end: end\n                });\n              }\n            }).bind(\"resizeStart\", function (e) {\n              var editable = that.list.editor;\n\n              if (editable && !editable.end()) {\n                e.preventDefault();\n                return;\n              }\n\n              if (that.trigger(\"resizeStart\", {\n                task: e.task\n              })) {\n                e.preventDefault();\n              }\n            }).bind(\"resize\", function (e) {\n              if (that.trigger(\"resize\", {\n                task: e.task,\n                start: e.start,\n                end: e.end\n              })) {\n                e.preventDefault();\n              }\n            }).bind(\"resizeEnd\", function (e) {\n              var task = e.task;\n              var updateInfo = {};\n\n              if (e.resizeStart) {\n                updateInfo.start = e.start;\n              } else {\n                updateInfo.end = e.end;\n              }\n\n              if (!that.trigger(\"resizeEnd\", {\n                task: task,\n                start: e.start,\n                end: e.end\n              })) {\n                that._updateTask(that.dataSource.getByUid(task.uid), updateInfo);\n              }\n            }).bind(\"percentResizeStart\", function (e) {\n              var editable = that.list.editor;\n\n              if (editable && !editable.end()) {\n                e.preventDefault();\n              }\n            }).bind(\"percentResizeEnd\", function (e) {\n              that._updateTask(that.dataSource.getByUid(e.task.uid), {\n                percentComplete: e.percentComplete\n              });\n            }).bind(\"dependencyDragStart\", function (e) {\n              var editable = that.list.editor;\n\n              if (editable && !editable.end()) {\n                e.preventDefault();\n              }\n            }).bind(\"dependencyDragEnd\", function (e) {\n              var dependency = that.dependencies._createNewModel({\n                type: e.type,\n                predecessorId: e.predecessor.id,\n                successorId: e.successor.id\n              });\n\n              that._createDependency(dependency);\n            }).bind(\"select\", function (e) {\n              var editable = that.list.editor;\n\n              if (editable) {\n                editable.end();\n              }\n\n              that.select(\"[data-uid='\" + e.uid + \"']\");\n            }).bind(\"editTask\", function (e) {\n              var editable = that.list.editor;\n\n              if (editable && !editable.end()) {\n                return;\n              }\n\n              that.editTask(e.uid);\n            }).bind(\"clear\", function () {\n              that.clearSelection();\n            }).bind(\"removeTask\", function (e) {\n              var editable = that.list.editor;\n\n              if (editable && !editable.end()) {\n                return;\n              }\n\n              that.removeTask(that.dataSource.getByUid(e.uid));\n            }).bind(\"removeDependency\", function (e) {\n              var editable = that.list.editor;\n\n              if (editable && !editable.end()) {\n                return;\n              }\n\n              that.removeDependency(that.dependencies.getByUid(e.uid));\n            });\n          },\n          _dataSource: function () {\n            var options = this.options;\n            var dataSource = options.dataSource;\n            dataSource = isArray(dataSource) ? {\n              data: dataSource\n            } : dataSource;\n\n            if (this.dataSource && this._refreshHandler) {\n              this.dataSource.unbind(\"change\", this._refreshHandler).unbind(\"progress\", this._progressHandler).unbind(\"error\", this._errorHandler);\n            } else {\n              this._refreshHandler = this.refresh.bind(this);\n              this._progressHandler = this._requestStart.bind(this);\n              this._errorHandler = this._error.bind(this);\n            }\n\n            this.dataSource = kendo.data.GanttDataSource.create(dataSource).bind(\"change\", this._refreshHandler).bind(\"progress\", this._progressHandler).bind(\"error\", this._errorHandler);\n          },\n          _dependencies: function () {\n            var dependencies = this.options.dependencies || {};\n            var dataSource = isArray(dependencies) ? {\n              data: dependencies\n            } : dependencies;\n\n            if (this.dependencies && this._dependencyRefreshHandler) {\n              this.dependencies.unbind(\"change\", this._dependencyRefreshHandler).unbind(\"error\", this._dependencyErrorHandler);\n            } else {\n              this._dependencyRefreshHandler = this.refreshDependencies.bind(this);\n              this._dependencyErrorHandler = this._error.bind(this);\n            }\n\n            this.dependencies = kendo.data.GanttDependencyDataSource.create(dataSource).bind(\"change\", this._dependencyRefreshHandler).bind(\"error\", this._dependencyErrorHandler);\n          },\n          _resources: function () {\n            var resources = this.options.resources;\n            var dataSource = resources.dataSource || {};\n            this.resources = {\n              field: \"resources\",\n              dataTextField: \"name\",\n              dataColorField: \"color\",\n              dataFormatField: \"format\"\n            };\n            extend(this.resources, resources);\n            this.resources.dataSource = kendo.data.DataSource.create(dataSource);\n          },\n          _assignments: function () {\n            var assignments = this.options.assignments;\n            var dataSource = assignments.dataSource || {};\n\n            if (this.assignments) {\n              this.assignments.dataSource.unbind(\"change\", this._assignmentsRefreshHandler);\n            } else {\n              this._assignmentsRefreshHandler = this.refresh.bind(this);\n            }\n\n            this.assignments = {\n              dataTaskIdField: \"taskId\",\n              dataResourceIdField: \"resourceId\",\n              dataValueField: \"value\"\n            };\n            extend(this.assignments, assignments);\n            this.assignments.dataSource = kendo.data.DataSource.create(dataSource);\n            this.assignments.dataSource.bind(\"change\", this._assignmentsRefreshHandler);\n          },\n          _createEditor: function () {\n            var that = this;\n            var editor = this._editor = new kendo.gantt.PopupEditor(this.wrapper, extend({}, this.options, {\n              target: this,\n              resources: {\n                field: this.resources.field,\n                editor: this._createResourceEditor.bind(this)\n              },\n              createButton: this._createPopupButton.bind(this)\n            }));\n            editor.bind(\"cancel\", function (e) {\n              var task = that.dataSource.getByUid(e.model.uid);\n\n              if (that.trigger(\"cancel\", {\n                container: e.container,\n                task: task\n              })) {\n                e.preventDefault();\n                return;\n              }\n\n              that.cancelTask();\n            }).bind(\"edit\", function (e) {\n              var task = that.dataSource.getByUid(e.model.uid);\n\n              if (that.trigger(\"edit\", {\n                container: e.container,\n                task: task\n              })) {\n                e.preventDefault();\n              }\n            }).bind(\"save\", function (e) {\n              var task = that.dataSource.getByUid(e.model.uid);\n              that.saveTask(task, e.updateInfo);\n            }).bind(\"remove\", function (e) {\n              that.removeTask(e.model.uid);\n            }).bind(\"close\", that._onDialogClose);\n          },\n          _onDialogClose: function () {},\n          _createResourceEditor: function (container, options) {\n            var that = this;\n            var model = options instanceof ObservableObject ? options : options.model;\n            var id = model.get(\"id\");\n            var messages = this.options.messages;\n            var resourcesField = this.resources.field;\n            var unitsValidation = {\n              step: 0.01\n            };\n            var assignmentsModel = this.assignments.dataSource.options.schema.model;\n\n            if (assignmentsModel && assignmentsModel.fields.Units && assignmentsModel.fields.Units.validation) {\n              extend(true, unitsValidation, assignmentsModel.fields.Units.validation);\n            }\n\n            var editor = this._resourceEditor = new kendo.gantt.ResourceEditor(container, {\n              resourcesField: resourcesField,\n              unitsValidation: unitsValidation,\n              data: this._wrapResourceData(id),\n              model: model,\n              messages: extend({}, messages.editor),\n              buttons: [{\n                name: \"update\",\n                text: messages.save,\n                className: Gantt.styles.primary\n              }, {\n                name: \"cancel\",\n                text: messages.cancel\n              }],\n              createButton: this._createPopupButton.bind(this),\n              save: function (e) {\n                that._updateAssignments(e.model.get(\"id\"), e.model.get(resourcesField));\n              }\n            });\n            editor.open();\n          },\n          _createPopupButton: function (command) {\n            var commandName = command.name || command.text;\n            var options = {\n              className: Gantt.styles.popup.button + \" \" + Gantt.styles.buttonDefaults + \" k-gantt-\" + (commandName || \"\").replace(/\\s/g, \"\"),\n              text: commandName,\n              attr: \"\"\n            };\n\n            if (!commandName && !(isPlainObject(command) && command.template)) {\n              throw new Error(\"Custom commands should have name specified\");\n            }\n\n            if (isPlainObject(command)) {\n              if (command.className) {\n                command.className += \" \" + options.className;\n              }\n\n              options = extend(true, options, command);\n            }\n\n            if (!options.className) {\n              options.className = \"k-button-solid-base\";\n            } else if (options.className.indexOf(\"k-button-solid-primary\") === -1) {\n              options.className += \" k-button-solid-base\";\n            }\n\n            return kendo.template(COMMAND_BUTTON_TEMPLATE)(options);\n          },\n          view: function (type) {\n            return this.timeline.view(type);\n          },\n          range: function (range) {\n            var dataSource = this.dataSource;\n            var view = this.view();\n            var timeline = this.timeline;\n\n            if (range) {\n              view.options.range = {\n                start: range.start,\n                end: range.end\n              };\n\n              timeline._render(dataSource.taskTree());\n\n              timeline._renderDependencies(this.dependencies.view());\n            }\n\n            return {\n              start: view.start,\n              end: view.end\n            };\n          },\n          date: function (date) {\n            var view = this.view();\n\n            if (date) {\n              view.options.date = date;\n\n              view._scrollToDate(date);\n            }\n\n            return view.options.date;\n          },\n          dataItem: function (value) {\n            if (!value) {\n              return null;\n            }\n\n            var list = this.list;\n            var element = list.element.find(value);\n            return list._modelFromElement(element);\n          },\n          setDataSource: function (dataSource) {\n            this.options.dataSource = dataSource;\n\n            this._dataSource();\n\n            this.list.setDataSource(this.dataSource);\n\n            if (this.options.autoBind) {\n              dataSource.fetch();\n            }\n          },\n          setDependenciesDataSource: function (dependencies) {\n            this.options.dependencies = dependencies;\n\n            this._dependencies();\n\n            if (this.options.autoBind) {\n              dependencies.fetch();\n            }\n          },\n          items: function () {\n            return this.wrapper.children(\".k-task\");\n          },\n          _updateAssignments: function (id, resources) {\n            var dataSource = this.assignments.dataSource;\n            var taskId = this.assignments.dataTaskIdField;\n            var resourceId = this.assignments.dataResourceIdField;\n            var hasMatch = false;\n            var assignments = new Query(dataSource.view()).filter({\n              field: taskId,\n              operator: \"eq\",\n              value: id\n            }).toArray();\n            var assignment;\n            var resource;\n            var value;\n\n            while (assignments.length) {\n              assignment = assignments[0];\n\n              for (var i = 0, length = resources.length; i < length; i++) {\n                resource = resources[i];\n\n                if (assignment.get(resourceId) === resource.get(\"id\")) {\n                  value = resources[i].get(\"value\");\n\n                  this._updateAssignment(assignment, value);\n\n                  resources.splice(i, 1);\n                  hasMatch = true;\n                  break;\n                }\n              }\n\n              if (!hasMatch) {\n                this._removeAssignment(assignment);\n              }\n\n              hasMatch = false;\n              assignments.shift();\n            }\n\n            for (var j = 0, newLength = resources.length; j < newLength; j++) {\n              resource = resources[j];\n\n              this._createAssignment(resource, id);\n            }\n\n            dataSource.sync();\n          },\n          cancelTask: function () {\n            var editor = this._editor;\n            var container = editor.container;\n\n            if (container) {\n              editor.close();\n            }\n          },\n          editTask: function (uid) {\n            var task = typeof uid === \"string\" ? this.dataSource.getByUid(uid) : uid;\n\n            if (!task) {\n              return;\n            }\n\n            var taskCopy = this.dataSource._createNewModel(task.toJSON());\n\n            taskCopy.uid = task.uid;\n            this.cancelTask();\n\n            this._editTask(taskCopy);\n          },\n          _editTask: function (task) {\n            this._editor.editTask(task, this.options.editable.plannedTasks);\n          },\n          saveTask: function (task, updateInfo) {\n            var editor = this._editor;\n            var container = editor.container;\n            var editable = editor.editable;\n\n            if (container && editable && editable.end()) {\n              this._updateTask(task, updateInfo);\n            }\n          },\n          _updateTask: function (task, updateInfo) {\n            var that = this;\n            var resourcesField = that.resources.field;\n\n            if (!that.trigger(\"save\", {\n              task: task,\n              values: updateInfo\n            })) {\n              if (updateInfo) {\n                that._preventRefresh = true;\n                that.dataSource.update(task, updateInfo);\n\n                if (updateInfo[resourcesField]) {\n                  that._updateAssignments(task.get(\"id\"), updateInfo[resourcesField]);\n                }\n              }\n\n              that._syncDataSource();\n            } else if (task && task.dirty) {\n              that.dataSource.cancelChanges(task);\n              that._preventRefresh = false;\n              that.refresh();\n            }\n          },\n          _updateAssignment: function (assignment, value) {\n            var resourceValueField = this.assignments.dataValueField;\n            assignment.set(resourceValueField, value);\n          },\n          removeTask: function (uid) {\n            var that = this;\n            var task = typeof uid === \"string\" ? this.dataSource.getByUid(uid) : uid;\n\n            if (!task) {\n              return;\n            }\n\n            this._taskConfirm(function (cancel) {\n              if (!cancel) {\n                that._removeTask(task);\n              }\n            }, task);\n          },\n          _createTask: function (task, index) {\n            if (!this.trigger(\"add\", {\n              task: task,\n              dependency: null\n            })) {\n              var dataSource = this.dataSource;\n              this._preventRefresh = true;\n\n              if (index === undefined) {\n                dataSource.add(task);\n              } else {\n                dataSource.insert(index, task);\n              }\n\n              this._scrollToUid = task.uid;\n\n              this._syncDataSource();\n            }\n          },\n          _createDependency: function (dependency) {\n            if (!this.trigger(\"add\", {\n              task: null,\n              dependency: dependency\n            })) {\n              this._preventDependencyRefresh = true;\n              this.dependencies.add(dependency);\n              this._preventDependencyRefresh = false;\n              this.dependencies.sync();\n            }\n          },\n          _createAssignment: function (resource, id) {\n            var assignments = this.assignments;\n            var dataSource = assignments.dataSource;\n            var taskId = assignments.dataTaskIdField;\n            var resourceId = assignments.dataResourceIdField;\n            var resourceValue = assignments.dataValueField;\n\n            var assignment = dataSource._createNewModel();\n\n            assignment[taskId] = id;\n            assignment[resourceId] = resource.get(\"id\");\n            assignment[resourceValue] = resource.get(\"value\");\n            dataSource.add(assignment);\n          },\n          removeDependency: function (uid) {\n            var that = this;\n            var dependency = typeof uid === \"string\" ? this.dependencies.getByUid(uid) : uid;\n\n            if (!dependency) {\n              return;\n            }\n\n            this._dependencyConfirm(function (cancel) {\n              if (!cancel) {\n                that._removeDependency(dependency);\n              }\n            }, dependency);\n          },\n          _removeTaskDependencies: function (task, dependencies) {\n            this._preventDependencyRefresh = true;\n\n            for (var i = 0, length = dependencies.length; i < length; i++) {\n              this.dependencies.remove(dependencies[i]);\n            }\n\n            this._preventDependencyRefresh = false;\n            this.dependencies.sync();\n          },\n          _removeTaskAssignments: function (task) {\n            var dataSource = this.assignments.dataSource;\n            var assignments = dataSource.view();\n            var filter = {\n              field: this.assignments.dataTaskIdField,\n              operator: \"eq\",\n              value: task.get(\"id\")\n            };\n            assignments = new Query(assignments).filter(filter).toArray();\n            this._preventRefresh = true;\n\n            for (var i = 0, length = assignments.length; i < length; i++) {\n              dataSource.remove(assignments[i]);\n            }\n\n            this._preventRefresh = false;\n            dataSource.sync();\n          },\n          _removeTask: function (task) {\n            var dependencies = this.dependencies.dependencies(task.id);\n\n            if (!this.trigger(\"remove\", {\n              task: task,\n              dependencies: dependencies\n            })) {\n              this._removeTaskDependencies(task, dependencies);\n\n              this._removeTaskAssignments(task);\n\n              this._preventRefresh = true;\n\n              if (this.dataSource.remove(task)) {\n                this._syncDataSource();\n              }\n\n              this._preventRefresh = false;\n            }\n          },\n          _removeDependency: function (dependency) {\n            if (!this.trigger(\"remove\", {\n              task: null,\n              dependencies: [dependency]\n            })) {\n              if (this.dependencies.remove(dependency)) {\n                this.dependencies.sync();\n              }\n            }\n          },\n          _removeAssignment: function (assignment) {\n            this.assignments.dataSource.remove(assignment);\n          },\n          _taskConfirm: function (callback, task) {\n            var messages = this.options.messages;\n\n            this._confirm(callback, {\n              model: task,\n              text: messages.deleteTaskConfirmation,\n              title: messages.deleteTaskWindowTitle\n            });\n          },\n          _dependencyConfirm: function (callback, dependency) {\n            var messages = this.options.messages;\n\n            this._confirm(callback, {\n              model: dependency,\n              text: messages.deleteDependencyConfirmation,\n              title: messages.deleteDependencyWindowTitle\n            });\n          },\n          _confirm: function (callback, options) {\n            var editable = this.options.editable;\n            var messages;\n            var buttons;\n\n            if (editable === true || editable.confirmation !== false) {\n              messages = this.options.messages;\n              buttons = [{\n                name: \"delete\",\n                text: messages.destroy,\n                className: Gantt.styles.primary,\n                click: function () {\n                  callback();\n                }\n              }, {\n                name: \"cancel\",\n                text: messages.cancel,\n                click: function () {\n                  callback(true);\n                }\n              }];\n              this.showDialog(extend(true, {}, options, {\n                buttons: buttons\n              }));\n            } else {\n              callback();\n            }\n          },\n          showDialog: function (options) {\n            this._editor.showDialog(options);\n          },\n          refresh: function () {\n            if (this._preventRefresh || !this.list || this.list.editor) {\n              return;\n            }\n\n            this._progress(false);\n\n            var dataSource = this.dataSource;\n            var taskTree = dataSource.taskTree();\n            var scrollToUid = this._scrollToUid;\n            var current;\n            var cachedUid;\n            var cachedIndex = -1;\n\n            if (this.current) {\n              cachedUid = this.current.closest(\"tr\").attr(kendo.attr(\"uid\"));\n              cachedIndex = this.current.index();\n            }\n\n            if (this.trigger(\"dataBinding\")) {\n              return;\n            }\n\n            if (this.resources.dataSource.data().length !== 0) {\n              this._assignResources(taskTree);\n            }\n\n            if (this._editor) {\n              this._editor.close();\n            }\n\n            this.clearSelection();\n\n            this.list._renderTree(taskTree);\n\n            this.timeline._render(taskTree);\n\n            this.timeline._renderDependencies(this.dependencies.view());\n\n            if (scrollToUid) {\n              this._scrollTo(scrollToUid);\n\n              this.select(selector(scrollToUid));\n            }\n\n            if ((scrollToUid || cachedUid) && cachedIndex >= 0) {\n              current = this.list.element.find(\"tr\" + selector(scrollToUid || cachedUid) + \" > td\").eq(cachedIndex);\n\n              this._current(current);\n            }\n\n            this._scrollToUid = null;\n            this.trigger(\"dataBound\");\n          },\n          refreshDependencies: function () {\n            if (this._preventDependencyRefresh) {\n              return;\n            }\n\n            if (this.trigger(\"dataBinding\")) {\n              return;\n            }\n\n            this.timeline._renderDependencies(this.dependencies.view());\n\n            this.trigger(\"dataBound\");\n          },\n          _assignResources: function (taskTree) {\n            var resources = this.resources;\n            var assignments = this.assignments;\n\n            var groupAssigments = function () {\n              var data = assignments.dataSource.view();\n              var group = {\n                field: assignments.dataTaskIdField\n              };\n              data = new Query(data).group(group).toArray();\n              return data;\n            };\n\n            var assigments = groupAssigments();\n\n            var applyTaskResource = function (task, action) {\n              var taskId = task.get(\"id\");\n              kendo.setter(resources.field)(task, new ObservableArray([]));\n\n              for (var i = 0, length = assigments.length; i < length; i++) {\n                if (assigments[i].value === taskId) {\n                  action(task, assigments[i].items);\n                }\n              }\n            };\n\n            var wrapTask = function (task, items) {\n              for (var j = 0, length = items.length; j < length; j++) {\n                var item = items[j];\n                var resource = resources.dataSource.get(item.get(assignments.dataResourceIdField));\n                var resourceValue = item.get(assignments.dataValueField);\n                var resourcedId = item.get(assignments.dataResourceIdField);\n                var valueFormat = resource.get(resources.dataFormatField) || PERCENTAGE_FORMAT;\n                var formatedValue = kendo.toString(resourceValue, valueFormat);\n                task[resources.field].push(new ObservableObject({\n                  id: resourcedId,\n                  name: resource.get(resources.dataTextField),\n                  color: resource.get(resources.dataColorField),\n                  value: resourceValue,\n                  formatedValue: formatedValue\n                }));\n              }\n            };\n\n            for (var i = 0, length = taskTree.length; i < length; i++) {\n              applyTaskResource(taskTree[i], wrapTask);\n            }\n          },\n          _wrapResourceData: function (id) {\n            var that = this;\n            var result = [];\n            var resource;\n            var resources = this.resources.dataSource.view();\n            var assignments = this.assignments.dataSource.view();\n            var taskAssignments = new Query(assignments).filter({\n              field: that.assignments.dataTaskIdField,\n              operator: \"eq\",\n              value: id\n            }).toArray();\n\n            var valuePerResource = function (id) {\n              var resourceValue = null;\n              new Query(taskAssignments).filter({\n                field: that.assignments.dataResourceIdField,\n                operator: \"eq\",\n                value: id\n              }).select(function (assignment) {\n                resourceValue += assignment.get(that.assignments.dataValueField);\n              });\n              return resourceValue;\n            };\n\n            for (var i = 0, length = resources.length; i < length; i++) {\n              resource = resources[i];\n              result.push({\n                id: resource.get(\"id\"),\n                name: resource.get(that.resources.dataTextField),\n                format: resource.get(that.resources.dataFormatField) || PERCENTAGE_FORMAT,\n                value: valuePerResource(resource.id)\n              });\n            }\n\n            return result;\n          },\n          _syncDataSource: function () {\n            this._preventRefresh = false;\n\n            this._requestStart();\n\n            this.dataSource.sync();\n          },\n          _requestStart: function () {\n            this._progress(true);\n          },\n          _error: function () {\n            this._progress(false);\n          },\n          _progress: function (toggle) {\n            kendo.ui.progress(this.element, toggle);\n          },\n          _resizable: function () {\n            var that = this;\n            var wrapper = this.wrapper;\n            var ganttStyles = Gantt.styles;\n            var contentSelector = DOT + ganttStyles.gridContent;\n            var treeListWrapper = wrapper.find(DOT + ganttStyles.list);\n            var timelineWrapper = wrapper.find(DOT + ganttStyles.timeline);\n            var treeListWidth;\n            var timelineWidth;\n            var timelineScroll;\n            this._resizeDraggable = wrapper.find(DOT + ganttStyles.splitBar).height(treeListWrapper.height()).hover(function () {\n              $(this).addClass(ganttStyles.splitBarHover);\n            }, function () {\n              $(this).removeClass(ganttStyles.splitBarHover);\n            }).end().kendoResizable({\n              orientation: \"horizontal\",\n              handle: DOT + ganttStyles.splitBar,\n              \"start\": function () {\n                treeListWidth = treeListWrapper.width();\n                timelineWidth = timelineWrapper.width();\n                timelineScroll = kendo.scrollLeft(timelineWrapper.find(contentSelector));\n              },\n              \"resize\": function (e) {\n                var delta = e.x.initialDelta;\n\n                if (kendo.support.isRtl(wrapper)) {\n                  delta *= -1;\n                }\n\n                if (treeListWidth + delta < 0 || timelineWidth - delta < 0) {\n                  return;\n                }\n\n                treeListWrapper.width(treeListWidth + delta);\n                timelineWrapper.width(timelineWidth - delta);\n                kendo.scrollLeft(timelineWrapper.find(contentSelector), timelineScroll + delta);\n\n                that.timeline.view()._renderCurrentTime();\n              }\n            }).data(\"kendoResizable\");\n          },\n          _scrollable: function () {\n            var that = this;\n            var ganttStyles = Gantt.styles;\n            var contentSelector = DOT + ganttStyles.gridContent;\n            var headerSelector = DOT + ganttStyles.gridHeaderWrap;\n            var timelineHeader = this.timeline.element.find(headerSelector);\n            var timelineContent = this.timeline.element.find(contentSelector);\n            var treeListHeader = this.list.element.find(headerSelector);\n            var treeListContent = this.list.element.find(contentSelector);\n\n            if (mobileOS) {\n              treeListContent.css(\"overflow-y\", \"auto\");\n            }\n\n            timelineContent.on(\"scroll\", function () {\n              that.scrollTop = this.scrollTop;\n              kendo.scrollLeft(timelineHeader, this.scrollLeft);\n              treeListContent.scrollTop(this.scrollTop);\n            });\n            treeListContent.on(\"scroll\", function () {\n              kendo.scrollLeft(treeListHeader, this.scrollLeft);\n            }).on(\"DOMMouseScroll\" + NS + \" mousewheel\" + NS, function (e) {\n              var scrollTop = timelineContent.scrollTop();\n              var delta = kendo.wheelDeltaY(e);\n\n              if (delta) {\n                e.preventDefault(); //In Firefox DOMMouseScroll event cannot be canceled\n\n                $(e.currentTarget).one(\"wheel\" + NS, false);\n                timelineContent.scrollTop(scrollTop + -delta);\n              }\n            });\n          },\n          _navigatable: function () {\n            var that = this;\n            var navigatable = this.options.navigatable;\n            var editable = this.options.editable;\n            var ganttStyles = Gantt.styles;\n            var contentSelector = DOT + ganttStyles.gridContent;\n            var headerSelector = DOT + ganttStyles.gridHeaderWrap;\n            var headerTable = this.list.element.find(headerSelector).find(\"table\");\n            var contentTable = this.list.element.find(contentSelector).find(\"table\");\n            var isRtl = kendo.support.isRtl(this.wrapper);\n            var timelineContent = this.timeline.element.find(DOT + ganttStyles.gridContent);\n            var tables = headerTable.add(contentTable);\n            var attr = selector();\n            var cellIndex;\n            var expandState = {\n              collapse: false,\n              expand: true\n            };\n\n            var scroll = function (reverse) {\n              var width = that.timeline.view()._timeSlots()[0].offsetWidth;\n\n              kendo.scrollLeft(timelineContent, kendo.scrollLeft(timelineContent) + (reverse ? -width : width));\n            };\n\n            var scrollVertical = function (reverse) {\n              var height = that.timeline.view()._rowHeight;\n\n              timelineContent.scrollTop(timelineContent.scrollTop() + (reverse ? -height : height));\n            };\n\n            var moveVertical = function (method) {\n              var parent = that.current.parent(\"tr\" + selector());\n              var index = that.current.index();\n              var sibling = parent[method]('tr:visible').first();\n\n              if (that.select().length !== 0) {\n                that.clearSelection();\n              }\n\n              if (sibling.length !== 0) {\n                that._current(sibling.children(\"td\").eq(index));\n\n                that._scrollTo(that.current);\n              } else {\n                if (that.current.is(\"td\") && method == \"prevAll\") {\n                  focusTable(headerTable);\n                } else if (that.current.is(\"th\") && method == \"nextAll\") {\n                  focusTable(contentTable);\n                }\n              }\n            };\n\n            var moveHorizontal = function (method) {\n              var subling = that.current[method]();\n\n              if (subling.length !== 0) {\n                that._current(subling);\n\n                cellIndex = that.current.index();\n              }\n            };\n\n            var toggleExpandedState = function (value) {\n              var model = that.dataItem(that.current);\n\n              if (model.summary && model.expanded !== value) {\n                model.set(\"expanded\", value);\n              }\n            };\n\n            var deleteAction = function () {\n              var editable = that.options.editable;\n\n              if (!editable || editable.destroy === false || that.list.editor) {\n                return;\n              }\n\n              var selectedTask = that.select();\n              var uid = kendo.attr(\"uid\");\n\n              if (selectedTask.length) {\n                that.removeTask(selectedTask.attr(uid));\n              }\n            };\n\n            $(this.wrapper).on(\"mousedown\" + NS, \"tr\" + attr + \", div\" + attr + \":not(\" + DOT + ganttStyles.line + \")\", function (e) {\n              var currentTarget = $(e.currentTarget);\n              var isInput = $(e.target).is(\":button,a,:input,a>.k-icon,textarea,span.k-icon:not(.k-i-none),span.k-link,.k-input,.k-multiselect-wrap\");\n              var current;\n\n              if (e.ctrlKey) {\n                return;\n              }\n\n              if (navigatable) {\n                if (currentTarget.is(\"tr\")) {\n                  current = $(e.target).closest(\"td\");\n                } else {\n                  current = that.list.content.find(\"tr\" + selector(currentTarget.attr(kendo.attr(\"uid\"))) + \" > td\").first();\n                }\n\n                that._current(current);\n              }\n\n              if ((navigatable || editable) && !isInput) {\n                that._focusTimeout = setTimeout(function () {\n                  focusTable(that.list.content.find(\"table\"), true);\n                }, 2);\n              }\n            }).on(\"keydown\" + NS, function (e) {\n              var key = e.keyCode;\n              var that = this;\n              var focusableItems = $(that._getToolbarItems());\n              var idx = focusableItems.index(that.toolbar.find(DOT + ganttStyles.focused)[0]);\n\n              if (idx === -1 && $(e.target).closest(DOT + ganttStyles.toolbar.views).length) {\n                idx = focusableItems.index(that.toolbar.find(\".k-gantt-views > .k-selected:visible, .k-views-dropdown:visible\")[0]);\n              }\n\n              var itemToFocus = e.shiftKey ? focusableItems[idx - 1] : focusableItems[idx + 1];\n\n              if (key === keys.F10) {\n                that.toolbar.find(\".k-button:visible\").first().addClass(ganttStyles.focused).trigger(\"focus\");\n                e.preventDefault();\n              } else if (key == keys.TAB && $(e.target).closest(DOT + ganttStyles.toolbar.toolbar).length) {\n                that.toolbar.find(DOT + ganttStyles.focused).removeClass(ganttStyles.focused).trigger(\"blur\");\n\n                if (itemToFocus) {\n                  $(itemToFocus).addClass(ganttStyles.focused).trigger(\"focus\");\n                  e.preventDefault();\n                  return;\n                }\n\n                if (this.list.element.is(\":visible\")) {\n                  this.list.element.find(\"table[role=treegrid]\").trigger(\"focus\");\n                } else {\n                  this.element.find(DOT + ganttStyles.tasks)[0].focus();\n                }\n\n                e.preventDefault();\n              }\n            }.bind(this));\n\n            if (navigatable !== true) {\n              contentTable.on(\"keydown\" + NS, function (e) {\n                if (e.keyCode == keys.DELETE) {\n                  deleteAction();\n                }\n              });\n              return;\n            }\n\n            tables.on(\"focus\" + NS, function () {\n              var selector = this === contentTable.get(0) ? \"td\" : \"th\";\n              var selection = that.select();\n              var current = that.current || $(selection.length ? selection : this).find(selector).eq(cellIndex || 0);\n\n              that._current(current);\n\n              $(that.toolbar.find(DOT + ganttStyles.focused)).removeClass(ganttStyles.focused);\n            }).on(\"blur\" + NS, function () {\n              that._current();\n\n              if (this == headerTable) {\n                $(this).attr(TABINDEX, -1);\n              }\n            }).on(\"keydown\" + NS, function (e) {\n              var key = e.keyCode;\n              var isCell;\n\n              if (!that.current) {\n                return;\n              }\n\n              isCell = that.current.is(\"td\");\n\n              switch (key) {\n                case keys.RIGHT:\n                  e.preventDefault();\n\n                  if (e.altKey) {\n                    scroll();\n                  } else if (e.ctrlKey) {\n                    toggleExpandedState(isRtl ? expandState.collapse : expandState.expand);\n                  } else {\n                    moveHorizontal(isRtl ? \"prev\" : \"next\");\n                  }\n\n                  break;\n\n                case keys.LEFT:\n                  e.preventDefault();\n\n                  if (e.altKey) {\n                    scroll(true);\n                  } else if (e.ctrlKey) {\n                    toggleExpandedState(isRtl ? expandState.expand : expandState.collapse);\n                  } else {\n                    moveHorizontal(isRtl ? \"next\" : \"prev\");\n                  }\n\n                  break;\n\n                case keys.UP:\n                  e.preventDefault();\n\n                  if (e.altKey) {\n                    scrollVertical(true);\n                  } else {\n                    moveVertical(\"prevAll\");\n                  }\n\n                  break;\n\n                case keys.DOWN:\n                  e.preventDefault();\n\n                  if (e.altKey) {\n                    scrollVertical();\n                  } else {\n                    moveVertical(\"nextAll\");\n                  }\n\n                  break;\n\n                case keys.SPACEBAR:\n                  e.preventDefault();\n\n                  if (isCell) {\n                    that.select(that.current.closest(\"tr\"));\n                  }\n\n                  break;\n\n                case keys.ENTER:\n                  e.preventDefault();\n\n                  if (isCell) {\n                    if (that.options.editable && that.options.editable.update !== false) {\n                      that.list._startEditHandler(that.current);\n\n                      $(this).one(\"keyup\", function (e) {\n                        /* Stop the event propagation so that the list widget won't close its editor immediately */\n                        e.stopPropagation();\n                      });\n                    }\n                  } else {\n                    /* Sort */\n                    that.current.children(\"a.k-link\").click();\n                  }\n\n                  break;\n\n                case keys.DELETE:\n                  if (isCell) {\n                    deleteAction();\n                  }\n\n                  break;\n\n                default:\n                  if (key >= 49 && key <= 57 && e.target.tagName.toLowerCase() !== \"input\") {\n                    that.view(that.timeline._viewByIndex(key - 49));\n                  }\n\n                  break;\n              }\n            });\n          },\n          _getToolbarItems: function () {\n            return this.toolbar.find(\"> .k-button:visible\").toArray().concat(this.toolbar.find(\".k-views-dropdown:visible\").toArray(), this.toolbar.find(\".k-gantt-views > .k-selected:visible\").toArray());\n          },\n          _current: function (element) {\n            var ganttStyles = Gantt.styles;\n            var activeElement;\n\n            if (this.current && this.current.length) {\n              this.current.removeClass(ganttStyles.focusedCell).removeAttr(\"id\");\n            }\n\n            if (element && element.length) {\n              this.current = element.addClass(ganttStyles.focusedCell).attr(\"id\", ACTIVE_CELL);\n              activeElement = $(kendo._activeElement());\n\n              if (activeElement.is(\"table\") && this.wrapper.find(activeElement).length > 0) {\n                activeElement.removeAttr(ARIA_DESCENDANT).attr(ARIA_DESCENDANT, ACTIVE_CELL);\n              }\n            } else {\n              this.current = null;\n            }\n          },\n          _dataBind: function () {\n            var that = this;\n\n            if (that.options.autoBind) {\n              this._preventRefresh = true;\n              this._preventDependencyRefresh = true;\n              var promises = $.map([this.dataSource, this.dependencies, this.resources.dataSource, this.assignments.dataSource], function (dataSource) {\n                return dataSource.fetch();\n              });\n              $.when.apply(null, promises).done(function () {\n                that._preventRefresh = false;\n                that._preventDependencyRefresh = false;\n                that.refresh();\n              });\n            }\n          },\n          _resize: function () {\n            this._adjustDimensions();\n\n            this.timeline.view()._adjustHeight();\n\n            this.timeline.view()._renderCurrentTime();\n\n            this.list._adjustHeight();\n          },\n          _createPlannedTasksSwitch: function () {\n            var that = this;\n            var switchLabel = that.options.messages.plannedTasks.switchText;\n            var toggeSwitchWrap = $(\"<span class='k-gantt-planned-wrap'><label>\" + switchLabel + \"</label></span>\");\n            var plannedToggle = new kendo.ui.Switch($(\"<input id='planned-switch' class='k-gantt-planned-switch'>\"), {\n              checked: that.options.showPlannedTasks,\n              change: that._togglePlannedTasks.bind(that),\n              messages: {\n                checked: \"\",\n                unchecked: \"\"\n              }\n            });\n            toggeSwitchWrap.append(plannedToggle.wrapper);\n            that.toggeSwitchWrap = toggeSwitchWrap;\n            that.toggleSwitch = plannedToggle;\n          },\n          _togglePlannedTasks: function (e) {\n            var timeline = this.timeline;\n\n            if (!this.trigger(\"togglePlannedTasks\", {\n              showPlannedTasks: !timeline.options.showPlannedTasks\n            })) {\n              this.wrapper.toggleClass(ganttStyles.plannedTasks);\n\n              timeline._setPlanned(!timeline.options.showPlannedTasks);\n\n              timeline._render(this.dataSource.taskTree());\n\n              timeline._renderDependencies(this.dependencies.view());\n            } else {\n              e.preventDefault();\n            }\n          }\n        });\n\n        if (kendo.PDFMixin) {\n          kendo.PDFMixin.extend(Gantt.fn);\n\n          Gantt.fn._drawPDF = function () {\n            var ganttStyles = Gantt.styles;\n            var listTableWidth = this.wrapper.find(DOT + ganttStyles.list + \" \" + DOT + ganttStyles.gridContent + \">table\").width();\n            var content = this.wrapper.clone();\n            content.find(DOT + ganttStyles.list).css(\"width\", listTableWidth);\n            return this._drawPDFShadow({\n              content: content\n            }, {\n              avoidLinks: this.options.pdf.avoidLinks\n            });\n          };\n        }\n\n        kendo.ui.plugin(Gantt);\n        extend(true, Gantt, {\n          styles: ganttStyles\n        });\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1282:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.switch\");\n    /***/\n  },\n\n  /***/\n  1283:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.gantt.data\");\n    /***/\n  },\n\n  /***/\n  1284:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.gantt.editors\");\n    /***/\n  },\n\n  /***/\n  1285:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.gantt.list\");\n    /***/\n  },\n\n  /***/\n  1286:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.gantt.timeline\");\n    /***/\n  },\n\n  /***/\n  1287:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.pdf\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}