{"ast":null,"code":"import { geometry as geo, drawing } from '@progress/kendo-drawing';\nimport { deepExtend, defined } from '../../common';\nimport { ARROW_POINTER } from '../constants';\nimport LinearPointer from './linear-pointer';\nimport ArrowLinearPointerAnimation from './arrow-linear-pointer-animation';\nconst Point = geo.Point;\nconst Path = drawing.Path;\n\nclass ArrowLinearPointer extends LinearPointer {\n  constructor(scale, options) {\n    super(scale, options);\n\n    if (!defined(this.options.size)) {\n      this.options.size = this.scale.options.majorTicks.size * 0.6;\n    }\n  }\n\n  pointerShape() {\n    const {\n      scale,\n      options: {\n        size\n      }\n    } = this;\n    const halfSize = size / 2;\n    const sign = scale.options.mirror ? -1 : 1;\n    let shape;\n\n    if (scale.options.vertical) {\n      shape = [new Point(0, 0 - halfSize), new Point(0 - sign * size, 0), new Point(0, 0 + halfSize)];\n    } else {\n      shape = [new Point(0 - halfSize, 0), new Point(0, 0 + sign * size), new Point(0 + halfSize, 0)];\n    }\n\n    return shape;\n  }\n\n  repaint() {\n    const {\n      scale,\n      options\n    } = this;\n    const animation = new ArrowLinearPointerAnimation(this.elements, deepExtend(options.animation, {\n      vertical: scale.options.vertical,\n      mirror: scale.options.mirror,\n      margin: this._margin(options.margin),\n      from: scale.getSlot(options._oldValue),\n      to: scale.getSlot(options.value)\n    }));\n\n    if (options.animation.transitions === false) {\n      animation.options.duration = 0;\n    }\n\n    animation.setup();\n    animation.play();\n  }\n\n  render() {\n    const {\n      scale,\n      options\n    } = this;\n    const elementOptions = this.getElementOptions();\n    const shape = this.pointerShape(options.value);\n    options.animation.type = ARROW_POINTER;\n    const elements = new Path({\n      stroke: elementOptions.stroke,\n      fill: elementOptions.fill\n    }).moveTo(shape[0]).lineTo(shape[1]).lineTo(shape[2]).close();\n    const slot = scale.getSlot(options.value);\n    elements.transform(geo.transform().translate(slot.x1, slot.y1));\n    this.elements = elements;\n    return elements;\n  }\n\n}\n\nexport default ArrowLinearPointer;","map":null,"metadata":{},"sourceType":"module"}