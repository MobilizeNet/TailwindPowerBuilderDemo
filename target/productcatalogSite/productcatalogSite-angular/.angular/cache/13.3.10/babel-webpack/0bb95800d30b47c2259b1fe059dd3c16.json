{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { ActionService, ActionState, PendingEvent } from '../../Application';\nimport { ExceptionHandler } from '../../System';\nimport { ServerAction } from '../Server';\n\nvar ActionServiceV5 = function (_super) {\n  __extends(ActionServiceV5, _super);\n\n  function ActionServiceV5() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ActionServiceV5.prototype.send = function (action, includeDirty) {\n    var request = this.requestBuilder.create(action);\n\n    if (action.requestConfig.includeDirty) {\n      request.Changed = this.changeBuffer.getChanges();\n    }\n\n    if (request.Actions) {\n      request.Actions = request.Actions.concat(this.buildCommandGenerators().map(function (c) {\n        return new ServerAction(c.receiverId, c.command, c.data);\n      }));\n    }\n\n    if (action.highPriority) {\n      this.pendingEvents.unshift(new PendingEvent(action, request));\n    } else {\n      this.pendingEvents.push(new PendingEvent(action, request));\n    }\n\n    this.sendActions();\n  };\n\n  ActionServiceV5.prototype.sendActions = function () {\n    var _this = this;\n\n    if (this.state === ActionState.Idle) {\n      this.state = ActionState.Sending;\n      var event_1 = this.pendingEvents.shift();\n      var data = JSON.stringify(event_1.request);\n      this.http.post(this.urlResolver.resolveUrl(event_1.action), data, function (response) {\n        _this.handleResponse(event_1.action, response);\n      }, event_1.action.requestConfig, event_1.action.serverEvent);\n    }\n  };\n\n  ActionServiceV5.prototype.sendImmediateAction = function (action, includeDirty) {\n    var _this = this;\n\n    var request = this.requestBuilder.create(action);\n\n    if (action.requestConfig.includeDirty) {\n      request.Changed = this.changeBuffer.getChanges();\n    }\n\n    if (request.Actions) {\n      request.Actions = request.Actions.concat(this.buildCommandGenerators().map(function (c) {\n        return new ServerAction(c.receiverId, c.command, c.data);\n      }));\n    }\n\n    var event = new PendingEvent(action, request);\n    var data = JSON.stringify(event.request);\n    this.http.post(this.urlResolver.resolveUrl(event.action), data, function (response) {\n      _this.handleResponse(event.action, response);\n    }, event.action.requestConfig, event.action.serverEvent);\n  };\n\n  __decorate([ExceptionHandler('onException'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], ActionServiceV5.prototype, \"sendActions\", null);\n\n  __decorate([ExceptionHandler('onException'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object, Boolean]), __metadata(\"design:returntype\", void 0)], ActionServiceV5.prototype, \"sendImmediateAction\", null);\n\n  return ActionServiceV5;\n}(ActionService);\n\nexport { ActionServiceV5 }; //# sourceMappingURL=data:application/json;base64,","map":null,"metadata":{},"sourceType":"module"}