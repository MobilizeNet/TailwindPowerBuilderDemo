{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1430);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1063:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.data\");\n    /***/\n  },\n\n  /***/\n  1132:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.fx\");\n    /***/\n  },\n\n  /***/\n  1136:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.draganddrop\");\n    /***/\n  },\n\n  /***/\n  1430:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1132), __webpack_require__(1063), __webpack_require__(1136)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"scrollview\",\n        name: \"ScrollView\",\n        category: \"web\",\n        description: \"The Kendo ScrollView widget is used to scroll content wider than the device screen.\",\n        depends: [\"fx\", \"data\", \"draganddrop\"]\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            Transition = kendo.effects.Transition,\n            Pane = kendo.ui.Pane,\n            keys = kendo.keys,\n            PaneDimensions = kendo.ui.PaneDimensions,\n            Widget = ui.DataBoundWidget,\n            DataSource = kendo.data.DataSource,\n            // Math\n        math = Math,\n            abs = math.abs,\n            ceil = math.ceil,\n            round = math.round,\n            max = math.max,\n            min = math.min,\n            floor = math.floor,\n            CHANGE = \"change\",\n            CLICK = \"click\",\n            CHANGING = \"changing\",\n            REFRESH = \"refresh\",\n            CURRENT_PAGE_CLASS = \"primary\",\n            VIRTUAL_PAGE_CLASS = \"scrollview-page\",\n            FUNCTION = \"function\",\n            ITEM_CHANGE = \"itemChange\",\n            CLEANUP = \"cleanup\",\n            NS = \".ScrollView\",\n            DOT = \".\",\n            KEYDOWN = \"keydown\",\n            FOCUS = \"focus\",\n            FOCUSOUT = \"focusout\",\n            FOCUSED = \"k-state-focused\",\n            TABINDEX = \"tabindex\",\n            VIRTUAL_PAGE_COUNT = 3,\n            LEFT_PAGE = -1,\n            CETER_PAGE = 0,\n            RIGHT_PAGE = 1,\n            LEFT_SWIPE = -1,\n            NUDGE = 0,\n            RIGHT_SWIPE = 1;\n\n        function className(name) {\n          return \"k-\" + name;\n        }\n\n        var ScrollViewDataReader = kendo.Observable.extend({\n          init: function (dataSource) {\n            var that = this;\n            this.dataSource = dataSource;\n            this.pendingRequestArray = [];\n            this.initialFetch = false;\n            this.useRanges = dataSource.options.serverPaging;\n            kendo.Observable.fn.init.call(this);\n            dataSource.bind(\"change\", function () {\n              that._change();\n            });\n          },\n          _change: function () {\n            this.trigger(\"reset\", {\n              offset: this.offset\n            });\n          },\n          page: function (page, callback) {\n            var that = this;\n\n            if (!this.useRanges) {\n              this.dataSource.page(page + 1);\n\n              if (callback) {\n                callback(that.dataSource.view());\n              } else {\n                that.trigger(\"page\", {\n                  page: page\n                });\n              }\n            }\n\n            if (this.useRanges) {\n              this.dataSource.range(page * this.dataSource.pageSize(), this.dataSource.pageSize(), function () {\n                if (callback) {\n                  callback(that.dataSource.view());\n                } else {\n                  that.trigger(\"page\", {\n                    page: page\n                  });\n                }\n              });\n            }\n          },\n          scrollTo: function (page) {\n            var pageCount = Math.ceil(this.dataSource.total() / this.dataSource.pageSize() || 1);\n            var prevPage = page - 1;\n            var prevPrefetch = prevPage - 1;\n            var currentPage = page;\n            var nextPage = pageCount > 0 && page + 1 >= pageCount ? -1 : page + 1;\n            var nextPrefetch = pageCount > 0 && nextPage + 1 >= pageCount ? -1 : nextPage + 1;\n\n            if (nextPage >= 0) {\n              this.pendingRequestArray.push(nextPage);\n            }\n\n            if (prevPage >= 0) {\n              this.pendingRequestArray.push(prevPage);\n            }\n\n            if (prevPrefetch >= 0) {\n              this.pendingRequestArray.push(prevPrefetch);\n            }\n\n            if (nextPrefetch >= 0) {\n              this.pendingRequestArray.push(nextPrefetch);\n            }\n\n            this.page(currentPage);\n          },\n          getViewData: function () {\n            var view = this.dataSource.view();\n            var data;\n\n            if (this.dataSource.options.pageSize > 1) {\n              data = [];\n\n              for (var index = 0; index < view.length; index++) {\n                data.push(view[index]);\n              }\n            } else {\n              data = view[0];\n            }\n\n            return data;\n          },\n          destroy: function () {\n            var that = this;\n            that.dataSource.unbind();\n            that.dataSource = null;\n          }\n        });\n        kendo.ui.ScrollViewDataReader = ScrollViewDataReader;\n        var Pager = kendo.Class.extend({\n          init: function (scrollView) {\n            var that = this,\n                element = $(\"<ul class='\" + className(\"scrollview-nav\") + \"'/>\"),\n                navigationWrapElement = $(\"<div class='\" + className(\"scrollview-nav-wrap\") + \"'></div>\");\n            navigationWrapElement.append(element);\n\n            scrollView._navigationContainer.append(navigationWrapElement);\n\n            this._changeProxy = that._change.bind(that);\n            this._refreshProxy = that._refresh.bind(that);\n            scrollView.bind(CHANGE, this._changeProxy);\n            scrollView.bind(REFRESH, this._refreshProxy);\n            element.on(CLICK + NS, \"li.k-link\", this._click.bind(scrollView));\n            $.extend(that, {\n              element: element,\n              scrollView: scrollView\n            });\n\n            that._navigatable();\n          },\n          items: function () {\n            return this.element.children();\n          },\n          _focus: function () {\n            var that = this;\n            that._focused = true;\n\n            that._setCurrent(that.element.find(DOT + className(CURRENT_PAGE_CLASS)));\n          },\n          _blur: function () {\n            var that = this;\n            that._focused = false;\n\n            if (that._current) {\n              that._current.removeClass(FOCUSED);\n\n              that._current.removeAttr(\"id\");\n\n              that.element.removeAttr(\"aria-activedescendant\");\n            }\n          },\n          _keyDown: function (e) {\n            var that = this;\n            var handled;\n            var next;\n            var current = that._current;\n            var key = e.keyCode;\n\n            if (key == keys.LEFT) {\n              handled = true;\n              next = current.prev(\"li.k-link\");\n\n              if (next.length) {\n                that._setCurrent(next);\n              }\n            }\n\n            if (key == keys.RIGHT) {\n              handled = true;\n              next = current.next(\"li.k-link\");\n\n              if (next.length) {\n                that._setCurrent(next);\n              }\n            }\n\n            if (e.keyCode == keys.SPACEBAR || e.keyCode == keys.ENTER) {\n              handled = true;\n\n              that._current.trigger(\"click\");\n            }\n\n            if (handled) {\n              e.preventDefault(); // prevent changing of items in scrollview\n\n              e.stopPropagation();\n            }\n          },\n          _setCurrent: function (current) {\n            if (!this._focused) {\n              return;\n            }\n\n            var that = this;\n            var id = kendo.guid();\n            var next = $(current);\n\n            if (that._current) {\n              $(that._current).removeClass(FOCUSED).removeAttr(\"id\");\n              that.element.removeAttr(\"aria-activedescendant\");\n            }\n\n            next.attr(\"id\", id).addClass(FOCUSED);\n            that.element.attr(\"aria-activedescendant\", id);\n            that._current = next;\n          },\n          _navigatable: function () {\n            var that = this;\n            var pageable = that.scrollView.options.pageable || {};\n\n            if (!that.scrollView.options.navigatable) {\n              return;\n            }\n\n            that.element.attr(TABINDEX, 0).attr(\"aria-label\", that.scrollView.options.messages.pagerLabel).attr(\"role\", \"listbox\");\n            that._ariaTemplate = kendo.template(pageable.ARIATemplate || \"Item #=data.index#\");\n            that.element.on(KEYDOWN + NS, that, that._keyDown.bind(that));\n            that.element.on(FOCUS + NS, that._focus.bind(that));\n            that.element.on(FOCUSOUT + NS, that._blur.bind(that));\n          },\n          _refresh: function (e) {\n            var pageHTML = \"\";\n            var navigatable = this.scrollView.options.navigatable;\n            var current;\n\n            for (var idx = 0; idx < e.pageCount; idx++) {\n              if (navigatable) {\n                pageHTML += '<li class=\"k-link\" role=\"option\" aria-label=\"' + this._ariaTemplate({\n                  index: idx\n                }) + '\" aria-selected=\"false\"></li>';\n              } else {\n                pageHTML += '<li class=\"k-link\"></li>';\n              }\n            }\n\n            this.element.html(pageHTML);\n            current = this.items().eq(e.page);\n            current.addClass(className(CURRENT_PAGE_CLASS));\n\n            if (navigatable) {\n              current.attr(\"aria-selected\", true);\n            }\n\n            this.scrollView._toggleNavigation({\n              currentPage: e.page\n            });\n          },\n          _change: function (e) {\n            if (e.isDefaultPrevented()) {\n              return;\n            }\n\n            var innerNavigationContainer = this.scrollView._navigationContainer.find(\".k-scrollview-nav\");\n\n            var scrollViewWidth = this.scrollView.element.width();\n            var containerOffset = (scrollViewWidth - innerNavigationContainer.width()) / 2;\n            var pageWidth = innerNavigationContainer.find(\"li.k-link\").eq(0).outerWidth(true) / 2;\n            var items = this.items();\n            var navigatable = this.scrollView.options.navigatable;\n            var current;\n            items.removeClass(className(CURRENT_PAGE_CLASS));\n            current = items.eq(e.nextPage).addClass(className(CURRENT_PAGE_CLASS));\n\n            if (navigatable) {\n              items.attr(\"aria-selected\", false);\n\n              this._setCurrent(current);\n\n              current.attr(\"aria-selected\", true);\n            }\n\n            var itemOffset = this.items().eq(e.nextPage).length > 0 ? this.items().eq(e.nextPage).position().left : 0;\n\n            if (itemOffset > scrollViewWidth / 2 || itemOffset < kendo.scrollLeft(innerNavigationContainer) + scrollViewWidth / 2) {\n              var translate = 0;\n\n              if (itemOffset > scrollViewWidth / 2) {\n                translate = kendo.scrollLeft(innerNavigationContainer) + itemOffset - scrollViewWidth / 2;\n              } else {\n                translate = kendo.scrollLeft(innerNavigationContainer) - (scrollViewWidth / 2 - itemOffset);\n              }\n\n              translate += containerOffset + pageWidth;\n              innerNavigationContainer.animate({\n                \"scrollLeft\": translate\n              }, 300);\n            }\n\n            this.scrollView._toggleNavigation({\n              currentPage: e.currentPage,\n              nextPage: e.nextPage\n            });\n          },\n          _click: function (e) {\n            var newPage = $(e.currentTarget).index();\n            this.scrollTo(newPage);\n          },\n          destroy: function () {\n            this.scrollView.unbind(CHANGE, this._changeProxy);\n            this.scrollView.unbind(REFRESH, this._refreshProxy);\n            this.element.off(NS);\n            this.element.remove();\n          }\n        });\n        kendo.ui.ScrollViewPager = Pager;\n        var TRANSITION_END = \"transitionEnd\",\n            DRAG_START = \"dragStart\",\n            DRAG_END = \"dragEnd\";\n        var ElasticPane = kendo.Observable.extend({\n          init: function (element, options) {\n            var that = this;\n            kendo.Observable.fn.init.call(this);\n            this.element = element;\n            this.container = element.parent();\n            var movable, transition, userEvents, dimensions, dimension, pane;\n            movable = new kendo.ui.Movable(that.element);\n            transition = new Transition({\n              axis: \"x\",\n              movable: movable,\n              onEnd: function () {\n                that.trigger(TRANSITION_END);\n              }\n            });\n            userEvents = new kendo.UserEvents(element, {\n              fastTap: true,\n              start: function (e) {\n                if (abs(e.x.velocity) * 2 >= abs(e.y.velocity)) {\n                  userEvents.capture();\n                } else {\n                  userEvents.cancel();\n                }\n\n                that.trigger(DRAG_START, e);\n                transition.cancel();\n              },\n              allowSelection: true,\n              end: function (e) {\n                that.trigger(DRAG_END, e);\n              }\n            });\n            dimensions = new PaneDimensions({\n              element: that.element,\n              container: that.container\n            });\n            dimension = dimensions.x;\n            dimension.bind(CHANGE, function () {\n              that.trigger(CHANGE);\n            });\n            pane = new Pane({\n              dimensions: dimensions,\n              userEvents: userEvents,\n              movable: movable,\n              elastic: true\n            });\n            $.extend(that, {\n              duration: options && options.duration || 1,\n              movable: movable,\n              transition: transition,\n              userEvents: userEvents,\n              dimensions: dimensions,\n              dimension: dimension,\n              pane: pane\n            });\n            this.bind([TRANSITION_END, DRAG_START, DRAG_END, CHANGE], options);\n          },\n          size: function () {\n            return {\n              width: this.dimensions.x.getSize(),\n              height: this.dimensions.y.getSize()\n            };\n          },\n          total: function () {\n            return this.dimension.getTotal();\n          },\n          offset: function () {\n            return -this.movable.x;\n          },\n          updateDimension: function () {\n            this.dimension.update(true);\n          },\n          refresh: function () {\n            this.dimensions.refresh();\n            this.dimensions.y.enabled = false;\n          },\n          moveTo: function (offset) {\n            this.movable.moveAxis(\"x\", -offset);\n          },\n          transitionTo: function (offset, ease, instant) {\n            if (instant) {\n              this.moveTo(-offset);\n            } else {\n              this.transition.moveTo({\n                location: offset,\n                duration: this.duration,\n                ease: ease\n              });\n            }\n          },\n          destroy: function () {\n            var that = this;\n            that.userEvents.destroy();\n            that.unbind();\n            that.movable = that.tansition = that.dimensions = that.dimension = that.pane = null;\n            that.element.remove();\n          }\n        });\n        kendo.ui.ScrollViewElasticPane = ElasticPane;\n        var ScrollViewContent = kendo.Observable.extend({\n          init: function (element, pane, options) {\n            var that = this;\n            kendo.Observable.fn.init.call(this);\n            that.element = element;\n            that.pane = pane;\n\n            that._getPages();\n\n            this.page = 0;\n            this.pageSize = options.pageSize || 1;\n            this.contentHeight = options.contentHeight;\n            this.enablePager = options.enablePager;\n            this.pagerOverlay = options.pagerOverlay;\n          },\n          scrollTo: function (page, instant) {\n            var that = this;\n\n            if (page == that.page && !instant) {\n              return;\n            }\n\n            if (!that.trigger(\"resize\", {\n              currentPage: this.page,\n              nextPage: page,\n              data: undefined\n            })) {\n              that.page = page;\n              that.pane.transitionTo(-page * that.pane.size().width, Transition.easeOutExpo, instant);\n            }\n          },\n          paneMoved: function (swipeType, bounce, callback,\n          /*internal*/\n          instant) {\n            var that = this,\n                pane = that.pane,\n                width = pane.size().width * that.pageSize,\n                approx = round,\n                ease = bounce ? Transition.easeOutBack : Transition.easeOutExpo,\n                snap,\n                nextPage;\n\n            if (swipeType === LEFT_SWIPE) {\n              approx = ceil;\n            } else if (swipeType === RIGHT_SWIPE) {\n              approx = floor;\n            }\n\n            nextPage = approx(pane.offset() / width);\n\n            if (nextPage < 0 || nextPage >= that.pageCount) {\n              var tansition = nextPage < 0 ? 0 : -this.page * this.pane.size().width;\n              return this.pane.transitionTo(tansition, ease, instant);\n            }\n\n            snap = max(that.minSnap, min(-nextPage * width, that.maxSnap));\n\n            if (nextPage != that.page) {\n              if (callback && callback({\n                currentPage: that.page,\n                nextPage: nextPage\n              })) {\n                snap = -that.page * pane.size().width;\n              }\n            }\n\n            pane.transitionTo(snap, ease, instant);\n          },\n          updatePage: function () {\n            var pane = this.pane,\n                page = round(pane.offset() / pane.size().width);\n\n            if (page != this.page) {\n              this.page = page;\n              return true;\n            }\n\n            return false;\n          },\n          forcePageUpdate: function () {\n            return this.updatePage();\n          },\n          resizeTo: function (size) {\n            var pane = this.pane,\n                width = size.width;\n            this.pageElements.width(width);\n\n            if (this.contentHeight === \"100%\") {\n              var containerHeight = this.element.parent().height();\n\n              if (this.enablePager === true) {\n                var pager = this.element.parent().find(\"ul.k-scrollview-nav\");\n\n                if (!this.pagerOverlay && pager.length) {\n                  containerHeight -= kendo._outerHeight(pager, true);\n                }\n              }\n\n              this.element.css(\"height\", containerHeight);\n              this.pageElements.css(\"height\", containerHeight);\n            } // re-read pane dimension after the pageElements have been resized.\n\n\n            pane.updateDimension();\n\n            if (!this._paged) {\n              this.page = floor(pane.offset() / width);\n            }\n\n            this.scrollTo(this.page, true, true);\n            this.pageCount = floor(pane.total() / width);\n            this.minSnap = -(this.pageCount - 1) * width;\n            this.maxSnap = 0;\n          },\n          _getPages: function () {\n            this.pageElements = this.element.find(kendo.roleSelector(\"page\"));\n            this._paged = this.pageElements.length > 0;\n          },\n          destroy: function () {\n            var that = this;\n            that.pane = null;\n            that.element.remove();\n          }\n        });\n        kendo.ui.ScrollViewContent = ScrollViewContent;\n        var VirtualScrollViewContent = kendo.Observable.extend({\n          init: function (element, pane, options) {\n            var that = this;\n            kendo.Observable.fn.init.call(this);\n            that.element = element;\n            that.pane = pane;\n            that.options = options;\n\n            that._templates();\n\n            that.page = options.page || 0;\n            that.pages = [];\n\n            that._initPages();\n\n            that.resizeTo(that.pane.size());\n            that.pane.dimension.forceEnabled();\n          },\n          setDataSource: function (dataSource) {\n            this.dataSource = DataSource.create(dataSource);\n\n            this._dataReader();\n\n            this._pendingPageRefresh = false;\n            this._pendingWidgetRefresh = false;\n          },\n          _viewShow: function () {\n            var that = this;\n\n            if (that._pendingWidgetRefresh) {\n              setTimeout(function () {\n                that._resetPages();\n              }, 0);\n              that._pendingWidgetRefresh = false;\n            }\n          },\n          _dataReader: function () {\n            this.dataReader = new ScrollViewDataReader(this.dataSource);\n            this._pageProxy = this._onPage.bind(this);\n            this._resetProxy = this._onReset.bind(this);\n            this.dataReader.bind({\n              \"page\": this._pageProxy,\n              \"reset\": this._resetProxy\n            });\n          },\n          _templates: function () {\n            var template = this.options.template,\n                emptyTemplate = this.options.emptyTemplate,\n                templateProxy = {},\n                emptyTemplateProxy = {};\n\n            if (typeof template === FUNCTION) {\n              templateProxy.template = template;\n              template = \"#=this.template(data)#\";\n            }\n\n            this.template = kendo.template(template).bind(templateProxy);\n\n            if (typeof emptyTemplate === FUNCTION) {\n              emptyTemplateProxy.emptyTemplate = emptyTemplate;\n              emptyTemplate = \"#=this.emptyTemplate(data)#\";\n            }\n\n            this.emptyTemplate = kendo.template(emptyTemplate).bind(emptyTemplateProxy);\n          },\n          _initPages: function () {\n            var pages = this.pages,\n                element = this.element,\n                page;\n\n            for (var i = 0; i < VIRTUAL_PAGE_COUNT; i++) {\n              page = new Page(element);\n              pages.push(page);\n            }\n\n            this.pane.updateDimension();\n          },\n          resizeTo: function (size) {\n            var pages = this.pages,\n                pane = this.pane;\n\n            for (var i = 0; i < pages.length; i++) {\n              pages[i].setWidth(size.width);\n            }\n\n            if (this.options.contentHeight === \"auto\") {\n              this.element.css(\"height\", this.pages[1].element.height());\n            } else if (this.options.contentHeight === \"100%\") {\n              var containerHeight = this.element.parent().height();\n\n              if (this.options.enablePager === true) {\n                var pager = this.element.parent().find(\"ul.k-scrollview-nav\");\n\n                if (!this.options.pagerOverlay && pager.length) {\n                  containerHeight -= kendo._outerHeight(pager, true);\n                }\n              }\n\n              this.element.css(\"height\", containerHeight);\n              pages[0].element.css(\"height\", containerHeight);\n              pages[1].element.css(\"height\", containerHeight);\n              pages[2].element.css(\"height\", containerHeight);\n            } else if (this.options.contentHeight) {\n              pages[0].element.css(\"height\", this.options.contentHeight);\n              pages[1].element.css(\"height\", this.options.contentHeight);\n              pages[2].element.css(\"height\", this.options.contentHeight);\n            }\n\n            pane.updateDimension();\n\n            this._repositionPages();\n\n            this.width = size.width;\n          },\n          scrollTo: function (page, instant, silent) {\n            var that = this;\n            var dataReader = that.dataReader;\n\n            if (page == that.page && !instant) {\n              return;\n            }\n\n            dataReader.page(page, function (data) {\n              if (silent) {\n                dataReader.scrollTo(page);\n                return;\n              }\n\n              if (!that.trigger(\"resize\", {\n                currentPage: that.page,\n                nextPage: page,\n                data: data\n              })) {\n                if (!instant) {\n                  dataReader.pagerScroll = page > that.page ? -1 : 1;\n                  that.page = page + dataReader.pagerScroll;\n                } else {\n                  that.page = page;\n                }\n\n                dataReader.scrollTo(page);\n              }\n            });\n          },\n          paneMoved: function (swipeType, bounce, callback,\n          /*internal*/\n          instant) {\n            var that = this,\n                pane = that.pane,\n                width = pane.size().width,\n                offset = pane.offset(),\n                thresholdPassed = Math.abs(offset) >= width / 3,\n                ease = bounce ? kendo.effects.Transition.easeOutBack : kendo.effects.Transition.easeOutExpo,\n                isEndReached = that.dataSource.options.serverPaging ? that.page + 2 > that.pageCount : false,\n                nextPage,\n                delta = 0,\n                data,\n                element;\n\n            if (swipeType === RIGHT_SWIPE) {\n              if (that.page !== 0) {\n                delta = -1; //backward\n              }\n            } else if (swipeType === LEFT_SWIPE && !isEndReached) {\n              delta = 1; //forward\n            } else if (offset > 0 && thresholdPassed && !isEndReached) {\n              delta = 1; //forward\n            } else if (offset < 0 && thresholdPassed) {\n              if (that.page !== 0) {\n                delta = -1; //backward\n              }\n            }\n\n            nextPage = that.page;\n\n            if (delta) {\n              nextPage = delta > 0 ? nextPage + 1 : nextPage - 1;\n\n              if (that instanceof kendo.ui.VirtualScrollViewContent) {\n                that.dataReader.page(nextPage);\n                data = that.dataReader.getViewData();\n              } else {\n                data = undefined;\n              }\n\n              if (!(data instanceof Array)) {\n                data = [data];\n              }\n\n              element = that.pages ? that.pages[1].element : undefined;\n            }\n\n            if (callback && that.page != nextPage && callback({\n              currentPage: that.page,\n              nextPage: nextPage,\n              element: element,\n              data: data\n            })) {\n              delta = 0;\n            }\n\n            if (delta === 0) {\n              that._cancelMove(ease, instant);\n            } else if (delta === -1) {\n              that._moveBackward(instant);\n            } else if (delta === 1) {\n              that._moveForward(instant);\n            }\n          },\n          updatePage: function () {\n            var pages = this.pages;\n\n            if (this.pane.offset() === 0) {\n              return false;\n            }\n\n            if (this.pane.offset() > 0) {\n              pages.push(this.pages.shift()); //forward\n\n              this.page++;\n\n              if (this.page + 2 < this.pageCount) {\n                this.dataReader.pendingRequestArray.push(this.page + 2);\n              }\n\n              if (this.page + 1 < this.pageCount) {\n                this.dataReader.page(this.page + 1);\n              }\n\n              if (this.page + 1 == this.pageCount) {\n                this.setPageContent(this.pages[2], null);\n              }\n            } else {\n              pages.unshift(this.pages.pop()); //back\n\n              this.page--;\n\n              if (this.page - 2 >= 0) {\n                this.dataReader.pendingRequestArray.push(this.page - 2);\n              }\n\n              if (this.page - 1 >= 0) {\n                this.dataReader.page(this.page - 1);\n              }\n            }\n\n            this._repositionPages();\n\n            this._resetMovable();\n\n            return true;\n          },\n          forcePageUpdate: function () {\n            var offset = this.pane.offset(),\n                threshold = this.pane.size().width * 3 / 4;\n\n            if (abs(offset) > threshold) {\n              return this.updatePage();\n            }\n\n            return false;\n          },\n          _resetMovable: function () {\n            this.pane.moveTo(0);\n          },\n          _moveForward: function (instant) {\n            this.pane.transitionTo(-this.width, kendo.effects.Transition.easeOutExpo, instant);\n          },\n          _moveBackward: function (instant) {\n            this.pane.transitionTo(this.width, kendo.effects.Transition.easeOutExpo, instant);\n          },\n          _cancelMove: function (ease,\n          /*internal*/\n          instant) {\n            this.pane.transitionTo(0, ease, instant);\n          },\n          _resetPages: function () {\n            this.page = this.options.page || 0;\n\n            this._repositionPages();\n\n            this.trigger(\"reset\");\n          },\n          _onPage: function (e) {\n            if (e.page >= this.pageCount) {\n              this.setPageContent(this.pages[2], null);\n            }\n\n            if (this.page == e.page) {\n              if (!this.dataReader.pagerScroll || this.dataReader.pagerScroll === 0 && this.dataReader.initialFetch) {\n                this.setPageContent(this.pages[1], this.dataReader.getViewData());\n              } else {\n                if (this.dataReader.pagerScroll < 0) {\n                  this._moveForward();\n                } else {\n                  this._moveBackward();\n                }\n\n                this.dataReader.pagerScroll = 0;\n                this.setPageContent(this.pages[1], this.dataReader.getViewData());\n              }\n            } else if (this.page + 1 == e.page) {\n              this.setPageContent(this.pages[2], this.dataReader.getViewData());\n            } else if (this.page - 1 == e.page) {\n              this.setPageContent(this.pages[0], this.dataReader.getViewData());\n            }\n\n            if (this.dataReader.pendingRequestArray.length > 0 && this.dataReader.initialFetch) {\n              var item = this.dataReader.pendingRequestArray.shift();\n              this.dataReader.page(item);\n            }\n          },\n          _onReset: function () {\n            this.pageCount = ceil(this.dataSource.total() / this.dataSource.pageSize());\n          },\n          _repositionPages: function () {\n            var pages = this.pages;\n            pages[0].position(LEFT_PAGE);\n            pages[1].position(CETER_PAGE);\n            pages[2].position(RIGHT_PAGE);\n          },\n          setPageContent: function (page, data) {\n            var template = this.template,\n                emptyTemplate = this.emptyTemplate;\n\n            if (data !== null && data !== undefined) {\n              page.content(template(data));\n            } else {\n              page.content(emptyTemplate({}));\n            }\n          },\n          destroy: function () {\n            var that = this;\n            var pages = that.pages;\n            that.dataReader.unbind();\n            that.dataSource.unbind();\n            that.dataReader = that.dataSource = that.pane = null;\n\n            for (var index = 0; index < pages.length; index++) {\n              pages[index].destroy();\n            }\n\n            that.element.remove();\n          }\n        });\n        kendo.ui.VirtualScrollViewContent = VirtualScrollViewContent;\n        var Page = kendo.Class.extend({\n          init: function (container) {\n            this.element = $(\"<li class='\" + className(VIRTUAL_PAGE_CLASS) + \"'></li>\");\n            this.width = container.width();\n            this.element.width(this.width);\n            container.append(this.element);\n          },\n          content: function (theContent) {\n            this.element.html(theContent);\n          },\n          position: function (position) {\n            //position can be -1, 0, 1\n            this.element.css(\"transform\", \"translate3d(\" + this.width * position + \"px, 0, 0)\");\n          },\n          setWidth: function (width) {\n            this.width = width;\n            this.element.width(width);\n          },\n          destroy: function () {\n            var that = this;\n            that.element.remove();\n            that.element = null;\n          }\n        });\n        kendo.ui.VirtualPage = Page;\n        var ScrollView = Widget.extend({\n          init: function (element, options) {\n            var that = this;\n            Widget.fn.init.call(that, element, options);\n            options = that.options;\n            element = that.element;\n            kendo.stripWhitespace(element[0]);\n\n            if (element.children().length === 0) {\n              element.wrapInner(\"<ul class='k-scrollview-wrap'/>\");\n            } else {\n              element.wrapInner(\"<div class='k-scrollview-wrap'/>\");\n            }\n\n            that.itemsWrapper = element.find(\".k-scrollview-wrap\");\n            element.addClass(\"k-widget \" + className(\"scrollview\"));\n\n            that._initNavigation();\n\n            if (this.options.pageable || this.options.enablePager) {\n              this.pager = new Pager(this);\n\n              if (this.options.pagerOverlay) {\n                element.addClass(className(\"scrollview-overlay\"));\n              }\n            } else {\n              this._changeProxy = that._toggleNavigation.bind(that);\n              this.bind(CHANGE, this._changeProxy);\n            }\n\n            that.inner = element.children().first();\n            that.page = 0;\n            that.inner.css(\"height\", options.contentHeight);\n            that.pane = new ElasticPane(that.inner, {\n              duration: this.options.duration,\n              transitionEnd: this._transitionEnd.bind(this),\n              dragStart: this._dragStart.bind(this),\n              dragEnd: this._dragEnd.bind(this),\n              change: this[REFRESH].bind(this)\n            });\n            that.bind(\"resize\", function () {\n              that.pane.refresh();\n            });\n            that.page = options.page;\n            var empty = this.inner.children().length === 0;\n            var content = empty ? new VirtualScrollViewContent(that.inner, that.pane, options) : new ScrollViewContent(that.inner, that.pane, options);\n            content.page = that.page;\n            content.bind(\"reset\", function () {\n              this._pendingPageRefresh = false;\n              that.trigger(REFRESH, {\n                pageCount: content.pageCount,\n                page: content.page\n              });\n\n              that._toggleNavigation({\n                currentPage: content.page,\n                nextPage: content.page\n              });\n            });\n            content.bind(\"resize\", function (e) {\n              var currentPage = content.page;\n              var nextPage = e.nextPage;\n\n              if (currentPage != nextPage) {\n                e._defaultPrevented = that.trigger(CHANGE, {\n                  currentPage: content.page,\n                  nextPage: e.nextPage,\n                  data: e.data\n                });\n              }\n\n              that._toggleNavigation({\n                currentPage: content.page,\n                nextPage: e.nextPage\n              });\n            });\n            content.bind(ITEM_CHANGE, function (e) {\n              that.trigger(ITEM_CHANGE, e);\n              that.angular(\"compile\", function () {\n                return {\n                  elements: e.item,\n                  data: [{\n                    dataItem: e.data\n                  }]\n                };\n              });\n            });\n            content.bind(CLEANUP, function (e) {\n              that.angular(\"cleanup\", function () {\n                return {\n                  elements: e.item\n                };\n              });\n            });\n            that._content = content;\n            that.setDataSource(options.dataSource);\n            that.viewInit();\n            that.viewShow();\n\n            that._navigatable();\n          },\n          options: {\n            name: \"ScrollView\",\n            ARIATemplate: \"Item #=data.index# of #=data.total#\",\n            page: 0,\n            duration: 400,\n            velocityThreshold: 0.8,\n            contentHeight: \"auto\",\n            pageSize: 1,\n            bounceVelocityThreshold: 1.6,\n            enablePager: true,\n            enableNavigationButtons: true,\n            pagerOverlay: true,\n            navigatable: false,\n            autoBind: true,\n            pageable: false,\n            template: \"\",\n            emptyTemplate: \"\",\n            messages: {\n              previousButtonLabel: \"Previous\",\n              nextButtonLabel: \"Next\",\n              pagerLabel: \"ScrollView pager\"\n            }\n          },\n          events: [CHANGING, CHANGE, REFRESH],\n          destroy: function () {\n            Widget.fn.destroy.call(this);\n\n            this._content.destroy();\n\n            this.pane.destroy();\n\n            if (this.pager) {\n              this.pager.destroy();\n            }\n\n            this._navigationContainer.off(NS);\n\n            this._navigationContainer = null;\n            this.itemsWrapper.off(NS);\n            this.itemsWrapper = null;\n\n            if (this.options.navigatable) {\n              this.ariaLiveEl = this._current = null;\n            }\n\n            this.inner = null;\n            kendo.destroy(this.element);\n          },\n          viewInit: function () {\n            if (this.options.autoBind) {\n              this._content.scrollTo(this._content.page, true, true);\n            }\n          },\n          viewShow: function () {\n            this.pane.refresh();\n          },\n          refresh: function () {\n            var content = this._content;\n            var options = this.options;\n            content.resizeTo(this.pane.size());\n            this.page = content.page;\n\n            if (content instanceof ScrollViewContent || content.dataReader.initialFetch) {\n              if (options.enablePager) {\n                this.trigger(REFRESH, {\n                  pageCount: content.pageCount,\n                  page: content.page\n                });\n              } else {\n                this.trigger(CHANGE, {\n                  pageCount: content.pageCount,\n                  currentPage: content.page\n                });\n              }\n            }\n          },\n          content: function (html) {\n            this.element.children().first().html(html);\n\n            this._content._getPages();\n\n            this.pane.refresh();\n          },\n          scrollTo: function (page, instant, silent) {\n            this._content.scrollTo(page, instant, silent);\n          },\n          prev: function () {\n            var that = this,\n                prevPage = that._content.page - 1;\n\n            if (that._content instanceof VirtualScrollViewContent) {\n              that._content.paneMoved(RIGHT_SWIPE, undefined, function (eventData) {\n                return that.trigger(CHANGE, eventData);\n              });\n            } else if (prevPage > -1) {\n              that.scrollTo(prevPage);\n            }\n          },\n          next: function () {\n            var that = this,\n                nextPage = that._content.page + 1;\n\n            if (that._content instanceof VirtualScrollViewContent) {\n              that._content.paneMoved(LEFT_SWIPE, undefined, function (eventData) {\n                return that.trigger(CHANGE, eventData);\n              });\n            } else if (nextPage < that._content.pageCount) {\n              that.scrollTo(nextPage);\n            }\n          },\n          setDataSource: function (dataSource) {\n            var that = this;\n\n            if (!(this._content instanceof VirtualScrollViewContent)) {\n              return;\n            } // the scrollview should have a ready datasource for MVVM to function properly. But an empty datasource should not empty the element\n\n\n            var emptyDataSource = !dataSource;\n\n            if (dataSource instanceof DataSource) {\n              dataSource.options.pageSize = dataSource.options.pageSize || 1;\n              this.dataSource = dataSource = new DataSource(dataSource.options);\n            } else {\n              this.dataSource = DataSource.create(dataSource);\n            }\n\n            this._content.setDataSource(this.dataSource);\n\n            if (this.options.autoBind && !emptyDataSource) {\n              this.dataSource.fetch(function () {\n                that._content.dataReader.initialFetch = true;\n                that.scrollTo(that._content.page, true, true);\n\n                that._content.trigger(\"reset\");\n              });\n            }\n          },\n          items: function () {\n            return this.element.find(\".k-\" + VIRTUAL_PAGE_CLASS);\n          },\n          _updateAria: function () {\n            var content = this._content;\n\n            if (this.options.navigatable) {\n              this.ariaLiveEl.html(this._ariaTemplate({\n                index: content.page + 1,\n                total: content.pageCount\n              }));\n            }\n          },\n          _setCurrent: function (current) {\n            if (!this._focused) {\n              return;\n            }\n\n            var that = this;\n            var page = that._content.page;\n            var id = kendo.guid();\n            var children = that.itemsWrapper.children();\n            var next = $(current || children.eq(page));\n\n            if (that._content.pages) {\n              children.attr(\"aria-hidden\", true);\n\n              that._content.pages[1].element.removeAttr(\"aria-hidden\");\n\n              return;\n            }\n\n            if (that._current) {\n              $(that._current).removeClass(FOCUSED).removeAttr(\"id\");\n              children.attr(\"aria-hidden\", true);\n            }\n\n            next.attr(\"id\", id).removeAttr(\"aria-hidden\").addClass(FOCUSED);\n            that.itemsWrapper.attr(\"aria-activedescendant\", id);\n\n            that._updateAria();\n\n            that._current = next;\n          },\n          _dragStart: function () {\n            this._content.forcePageUpdate();\n          },\n          _dragEnd: function (e) {\n            var that = this,\n                velocity = e.x.velocity,\n                velocityThreshold = this.options.velocityThreshold,\n                swipeType = NUDGE,\n                bounce = abs(velocity) > this.options.bounceVelocityThreshold;\n\n            if (velocity > velocityThreshold) {\n              swipeType = RIGHT_SWIPE;\n            } else if (velocity < -velocityThreshold) {\n              swipeType = LEFT_SWIPE;\n            }\n\n            this._content.paneMoved(swipeType, bounce, function (eventData) {\n              return that.trigger(CHANGE, eventData);\n            });\n          },\n          _transitionEnd: function () {\n            this._content.updatePage();\n\n            if (this.options.navigatable) {\n              this._setCurrent();\n            }\n          },\n          _initNavigation: function () {\n            var that = this;\n            var prevArrow;\n            var nextArrow;\n            var messages = that.options.messages;\n            var navigationContainer = that._navigationContainer = $(\"<div class='k-scrollview-elements'></div>\");\n\n            if (that.options.navigatable) {\n              prevArrow = $('<a class=\"k-scrollview-prev\" role=\"button\" aria-label=\"' + messages.previousButtonLabel + '\"><span class=\"k-icon k-i-arrowhead-w\"></span></a>');\n              nextArrow = $('<a class=\"k-scrollview-next\" role=\"button\" aria-label=\"' + messages.nextButtonLabel + '\"><span class=\"k-icon k-i-arrowhead-e\"></span></a>');\n            } else {\n              prevArrow = $('<a class=\"k-scrollview-prev\"><span class=\"k-icon k-i-arrowhead-w\"></span></a>');\n              nextArrow = $('<a class=\"k-scrollview-next\"><span class=\"k-icon k-i-arrowhead-e\"></span></a>');\n            }\n\n            prevArrow.hide();\n            nextArrow.hide();\n            navigationContainer.append(prevArrow);\n            navigationContainer.append(nextArrow);\n            that.element.append(navigationContainer);\n\n            if (that.options.navigatable) {\n              that.ariaLiveEl = $(\"<div aria-live='polite' aria-atomic='true' class='k-sr-only'></div>\");\n              that.element.append(that.ariaLiveEl);\n            }\n\n            navigationContainer.on(CLICK + NS, \"a.k-scrollview-prev\", that.prev.bind(that));\n            navigationContainer.on(CLICK + NS, \"a.k-scrollview-next\", that.next.bind(that));\n          },\n          _navigatable: function () {\n            var that = this;\n            var navigationContainer = that._navigationContainer;\n\n            if (!that.options.navigatable) {\n              return;\n            }\n\n            that._ariaTemplate = kendo.template(that.options.ARIATemplate);\n            navigationContainer.find(\">a.k-scrollview-prev\").attr(TABINDEX, 0);\n            navigationContainer.find(\">a.k-scrollview-next\").attr(TABINDEX, 0);\n            navigationContainer.on(KEYDOWN + NS, that, function (e) {\n              var target = $(e.target);\n\n              if (e.keyCode == keys.SPACEBAR || e.keyCode == keys.ENTER) {\n                e.preventDefault();\n                target.click();\n              }\n            });\n            that.itemsWrapper.attr(\"aria-roledescription\", \"carousel\").attr(TABINDEX, 0);\n            that.itemsWrapper.on(KEYDOWN + NS, that, that._keyDown.bind(that));\n            that.itemsWrapper.on(FOCUS + NS, that._focus.bind(that));\n            that.itemsWrapper.on(FOCUSOUT + NS, that._blur.bind(that));\n          },\n          _focus: function () {\n            var that = this;\n            that._focused = true;\n\n            that._setCurrent();\n          },\n          _blur: function () {\n            if (this._current) {\n              this._current.removeClass(FOCUSED);\n\n              this._current.removeAttr(\"id\");\n\n              this.itemsWrapper.removeAttr(\"aria-activedescendant\");\n            }\n          },\n          _keyDown: function (e) {\n            var that = this;\n            var handled;\n            var key = e.keyCode;\n\n            if (key == keys.LEFT) {\n              handled = true;\n              that.prev();\n            }\n\n            if (key == keys.RIGHT) {\n              handled = true;\n              that.next();\n            }\n\n            if (handled) {\n              e.preventDefault();\n              e.stopPropagation();\n            }\n          },\n          _toggleNavigation: function (e) {\n            var page = e.nextPage || e.nextPage === 0 ? e.nextPage : e.currentPage;\n            var navigationContainer = this._navigationContainer;\n            var prevArrow = navigationContainer.find(\">a.k-scrollview-prev\");\n            var nextArrow = navigationContainer.find(\">a.k-scrollview-next\");\n            prevArrow.hide();\n            nextArrow.hide();\n\n            if (page || page === 0) {\n              if (page !== 0) {\n                prevArrow.show();\n              }\n\n              if (page != this._content.pageCount - 1) {\n                nextArrow.show();\n              }\n            }\n          }\n        });\n        ui.plugin(ScrollView);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}