{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(29);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  29:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(30), __webpack_require__(31), __webpack_require__(32)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function ($, undefined) {\n        // WARNING: removing the following jshint declaration and turning\n        // == into === to make JSHint happy will break functionality.\n\n        /*jshint eqnull:true  */\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            html = kendo.html,\n            Color = kendo.Color,\n            extend = $.extend,\n            BACKGROUNDCOLOR = \"background-color\",\n            MESSAGES = {\n          apply: \"Apply\",\n          cancel: \"Cancel\",\n          noColor: \"no color\",\n          clearColor: \"Clear color\",\n          previewInput: null,\n          contrastRatio: \"Contrast ratio:\",\n          fail: \"Fail\",\n          pass: \"Pass\",\n          hex: \"HEX\",\n          toggleFormat: \"Toggle format\",\n          red: \"Red\",\n          green: \"Green\",\n          blue: \"Blue\",\n          alpha: \"Alpha\",\n          gradient: \"Gradient view\",\n          palette: \"Palette view\"\n        },\n            NS = \".kendoColorTools\",\n            CLICK_NS = \"click\" + NS,\n            KEYDOWN_NS = \"keydown\" + NS,\n            ColorSelector = ui.colorpicker.ColorSelector,\n            KEYS = kendo.keys,\n            NO_COLOR = \"k-no-color\",\n            SELECTED = \"k-selected\",\n            PREVIEW_MASK = \".k-color-preview-mask\",\n            VIEWS = {\n          \"gradient\": ui.ColorGradient,\n          \"palette\": ui.ColorPalette\n        };\n\n        function bind(callback, obj) {\n          return function () {\n            return callback.apply(obj, arguments);\n          };\n        }\n\n        var FlatColorPicker = ColorSelector.extend({\n          init: function (element, options) {\n            var that = this;\n\n            if (options && options.autoupdate === false) {\n              options._standalone = false;\n            }\n\n            ColorSelector.fn.init.call(that, element, options);\n            options = that.options = kendo.deepExtend({}, that.options, options);\n            element = that.element;\n            that.wrapper = element.addClass(\"k-flatcolorpicker k-coloreditor\").append(that._template());\n            that._selectedColor = $(\".k-coloreditor-preview-color\", element);\n            that._previousColor = $(\".k-coloreditor-current-color\", element);\n            that._viewsContainer = $(\".k-coloreditor-views\", element);\n            element.find(\".k-button[data-view=\" + that.options.view + \"]\").addClass(SELECTED);\n            var value = that.color();\n\n            that._changeView(options.view);\n\n            that._setViewSize();\n\n            if (value) {\n              that._updateUI(value);\n\n              that._previousColor.children(PREVIEW_MASK).css(BACKGROUNDCOLOR, value.toDisplay());\n\n              that._selectedColor.children(PREVIEW_MASK).css(BACKGROUNDCOLOR, value.toDisplay());\n            } else {\n              that._selectedColor.addClass(NO_COLOR);\n\n              that._previousColor.addClass(NO_COLOR);\n            }\n\n            element.on(KEYDOWN_NS, bind(that._keydown, that)).on(CLICK_NS, \".k-coloreditor-reset\", function () {\n              that._clearColor = true;\n\n              that._updateUI(null);\n\n              that._view.value(null);\n            }).on(CLICK_NS, \".k-coloreditor-apply\", function () {\n              if (that._clearColor) {\n                that._select(null);\n              } else {\n                that._select(that._view.color());\n              }\n            }).on(CLICK_NS, \".k-coloreditor-cancel\", function () {\n              delete that._clearColor;\n\n              that._updateUI(that.color());\n\n              that._cancel();\n            }).on(CLICK_NS, \".k-button[data-view]\", function (ev) {\n              var viewButton = $(ev.target).closest(\"[data-view]\");\n\n              if (viewButton.is(\".\" + SELECTED)) {\n                return;\n              }\n\n              element.find(\".k-button[data-view]\").removeClass(SELECTED);\n              viewButton.addClass(SELECTED);\n\n              that._changeView(viewButton.data(\"view\"));\n            });\n          },\n          destroy: function () {\n            var that = this;\n            ColorSelector.fn.destroy.call(this);\n\n            if (that._view) {\n              that._view.destroy();\n\n              that._viewsContainer.empty();\n            }\n\n            that.element.off(NS);\n            that._selectedColor = that._previousColor = that._viewsContainer = that._view = null;\n          },\n          options: {\n            name: \"FlatColorPicker\",\n            opacity: false,\n            buttons: false,\n            input: true,\n            preview: true,\n            clearButton: false,\n            format: \"hex\",\n            formats: [\"rgb\", \"hex\"],\n            view: \"gradient\",\n            views: [\"gradient\", \"palette\"],\n            palette: null,\n            autoupdate: true,\n            backgroundColor: null,\n            columns: 10,\n            tileSize: 24,\n            messages: MESSAGES,\n            size: \"medium\" // Fake styling option to accomplish colorpicker's size for textbox and button\n\n          },\n          setBackgroundColor: function (color) {\n            var that = this;\n\n            if (that._view && that._view.setBackgroundColor) {\n              that._view.setBackgroundColor(color);\n            }\n          },\n          _select: function (value) {\n            var that = this;\n\n            ColorSelector.fn._select.call(that, value);\n\n            that._updatePreviousColor(value);\n          },\n          _updatePreviousColor: function (value) {\n            var that = this;\n\n            if (value) {\n              that._previousColor.removeClass(NO_COLOR);\n\n              that._previousColor.children(PREVIEW_MASK).css(BACKGROUNDCOLOR, value.toDisplay());\n            } else {\n              that._previousColor.addClass(NO_COLOR);\n\n              that._previousColor.children(PREVIEW_MASK).css(BACKGROUNDCOLOR, \"\");\n            }\n          },\n          _changeView: function (mode) {\n            var that = this,\n                options = $.extend({}, that.options),\n                selector = VIEWS[mode],\n                selectedColor,\n                hsvColor;\n\n            if (that._view && that._view._colorInput) {\n              that.options.format = that._view._colorInput._viewModel.format;\n            }\n\n            that.options.view = mode;\n            delete options.name;\n            delete options.change;\n            delete options.select;\n            delete options.cancel;\n            delete options._standalone;\n\n            if (that._view) {\n              selectedColor = that._view.color();\n\n              that._view.destroy();\n\n              that._viewsContainer.empty();\n            }\n\n            if (selectedColor) {\n              selectedColor = selectedColor.toHSV();\n              hsvColor = Color.fromHSV(that._cachedHue || 0, selectedColor.s, selectedColor.v, selectedColor.a);\n              that._cachedHue = selectedColor.toHSV().h;\n              selectedColor = selectedColor.equals(hsvColor) ? hsvColor : selectedColor;\n            }\n\n            if (selector) {\n              that._view = new VIEWS[mode]($(\"<div></div>\").appendTo(that._viewsContainer), options);\n\n              that._view.value(selectedColor);\n\n              that._view.bind(\"change\", function (ev) {\n                delete that._clearColor;\n\n                that._updateUI(ev.sender.color(), true);\n              });\n\n              that._view.bind(\"forceSelect\", function (ev) {\n                delete that._clearColor;\n\n                that._select(ev.sender.color());\n              });\n            }\n          },\n          _onEnable: function (enable) {\n            var that = this;\n\n            if (that._view) {\n              that._view._onEnable(enable);\n            }\n          },\n          focus: function () {\n            var that = this;\n\n            if (that._view) {\n              that._view.focus();\n            }\n          },\n          _updateUI: function (color, dontChangeView) {\n            var that = this;\n\n            if (color && color.toDisplay) {\n              that._selectedColor.removeClass(NO_COLOR);\n\n              that._selectedColor.children(PREVIEW_MASK).css(BACKGROUNDCOLOR, color.toDisplay());\n            } else {\n              that._selectedColor.addClass(NO_COLOR);\n\n              that._selectedColor.children(PREVIEW_MASK).css(BACKGROUNDCOLOR, \"\");\n            }\n\n            that._triggerSelect(color);\n\n            if (that.options.autoupdate) {\n              that._updatePreviousColor(color);\n            }\n\n            if (!dontChangeView) {\n              that._view.value(color);\n            }\n          },\n          _setViewSize: function () {\n            var that = this,\n                wrapper = that.wrapper[0],\n                previewWidth = parseInt(that.options.tileSize.width || that.options.tileSize, 10),\n                previewHeight = parseInt(that.options.tileSize.width || that.options.tileSize, 10),\n                previewColumns = that.options.columns;\n            wrapper.style.setProperty(\"--kendo-color-preview-columns\", previewColumns);\n            wrapper.style.setProperty(\"--kendo-color-preview-width\", previewWidth + \"px\");\n            wrapper.style.setProperty(\"--kendo-color-preview-height\", previewHeight + \"px\");\n          },\n          _keydown: function (e) {\n            if (e.keyCode == KEYS.ESC) {\n              this._cancel();\n            }\n          },\n          _template: function () {\n            var that = this,\n                options = that.options,\n                buttonOptions = extend({}, options, {\n              fillMode: \"flat\",\n              themeColor: \"base\",\n              rounded: \"medium\"\n            });\n            return kendo.template('<div class=\"k-coloreditor-header k-hstack\">' + '# if (views && views.length > 1) { #' + '<div class=\"k-coloreditor-header-actions k-hstack\">' + '<div class=\"k-button-group k-button-group-flat\">' + html.renderButton('<button  data-view=\"gradient\" title=\"#:messages.gradient#\"></button>', extend({\n              icon: \"color-canvas\"\n            }, buttonOptions)) + html.renderButton('<button  data-view=\"palette\" title=\"#:messages.palette#\"></button>', extend({\n              icon: \"palette\"\n            }, buttonOptions)) + '</div>' + '</div>' + '# } #' + '<div class=\"k-spacer\"></div>' + '<div class=\"k-coloreditor-header-actions k-hstack\">' + '# if (clearButton) { #' + html.renderButton('<button class=\"k-coloreditor-reset\" title=\"#:messages.clearColor#\"></button>', extend({\n              icon: \"reset-color\"\n            }, buttonOptions)) + '# } #' + '# if (preview) { #' + '<div class=\"k-coloreditor-preview k-vstack\">' + '<span class=\"k-coloreditor-preview-color k-color-preview\">' + '<span class=\"k-color-preview-mask\"></span>' + '</span>' + '<span class=\"k-coloreditor-current-color k-color-preview\">' + '<span class=\"k-color-preview-mask\"></span>' + '</span>' + '</div>' + '# } #' + '</div>' + '</div>' + '<div class=\"k-coloreditor-views k-vstack\"></div>' + '# if (buttons) { #' + '<div class=\"k-coloreditor-footer k-actions k-hstack k-justify-content-end\">' + html.renderButton('<button class=\"k-coloreditor-cancel\" title=\"#:messages.cancel#\">#: messages.cancel #</button>', extend({}, buttonOptions, {\n              fillMode: \"solid\"\n            })) + html.renderButton('<button class=\"k-coloreditor-apply\" title=\"#:messages.apply#\">#: messages.apply #</button>', extend({}, buttonOptions, {\n              fillMode: \"solid\",\n              themeColor: \"primary\"\n            })) + '</div>' + '# } #')(options);\n          }\n        });\n        ui.plugin(FlatColorPicker);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  30:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./colorgradient\");\n    /***/\n  },\n\n  /***/\n  31:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./colorpalette\");\n    /***/\n  },\n\n  /***/\n  32:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.html.button\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}