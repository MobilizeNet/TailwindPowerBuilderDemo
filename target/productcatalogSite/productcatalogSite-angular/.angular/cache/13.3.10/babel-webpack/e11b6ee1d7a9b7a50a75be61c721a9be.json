{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1082);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1051:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.core\");\n    /***/\n  },\n\n  /***/\n  1082:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1051)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"avatar\",\n        name: \"Avatar\",\n        category: \"web\",\n        description: \"The Avatar component represents an icon, text, or image rendered in a styled container.\",\n        depends: [\"core\"]\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n            DASH = \"-\";\n        var AVATAR_STYLES = {\n          widget: \"k-widget\",\n          avatar: \"k-avatar\",\n          bordered: \"k-avatar-bordered\"\n        };\n        var AVATAR_TYPE = {\n          icon: \"icon\",\n          image: \"image\",\n          text: \"text\"\n        };\n        var Avatar = Widget.extend({\n          init: function (element, options) {\n            var that = this;\n            options = options || {};\n            Widget.fn.init.call(that, element, options);\n\n            this._fromMarkup();\n\n            this._wrapper();\n\n            if (this._markupContent && this._markupContent.length > 0) {\n              this._contentFromMarkup();\n            } else {\n              this._content();\n            }\n          },\n          options: {\n            name: \"Avatar\",\n            alt: null,\n            border: false,\n            className: null,\n            fillMode: \"solid\",\n            icon: null,\n            image: null,\n            rounded: \"full\",\n            size: \"medium\",\n            style: null,\n            text: null,\n            themeColor: \"primary\",\n            type: AVATAR_TYPE.text\n          },\n          events: [],\n          setOptions: function (options) {\n            var currentOptions = this.options,\n                wrapper = this.wrapper,\n                updatedOptions = $.extend({}, currentOptions, options);\n            Widget.fn.setOptions.call(this, options);\n\n            if (!updatedOptions[updatedOptions.type]) {\n              currentOptions = this._optionsFromWrapper(currentOptions);\n            }\n\n            if (updatedOptions.border === false) {\n              wrapper.removeClass(AVATAR_STYLES.bordered);\n            }\n\n            wrapper.empty();\n            this.options = currentOptions;\n\n            this._wrapper();\n\n            this._content();\n          },\n          _content: function () {\n            var span = this.wrapper.find(\"> span\"),\n                options = this.options,\n                type = options.type,\n                content;\n\n            if (type === AVATAR_TYPE.icon) {\n              content = $(\"<span class='k-icon k-i-\" + options.icon + \"'>\");\n            } else if (type === AVATAR_TYPE.image) {\n              content = $(\"<img src='\" + options.image + \"'>\");\n\n              if (options.alt) {\n                content.attr(\"alt\", options.alt);\n              }\n            } else if (type === AVATAR_TYPE.text) {\n              content = $(\"<span>\" + options.text + \"</span>\");\n            }\n\n            span.append(content);\n          },\n          _contentFromMarkup: function () {\n            var span = this.wrapper.find(\"> span\").first();\n            span.append(this._markupContent);\n          },\n          _fromMarkup: function () {\n            var element = this.element,\n                options = this.options,\n                image,\n                icon;\n            element.children().slice(1).remove();\n            image = element.children(\"img\");\n            icon = element.children(\".k-icon\");\n\n            if (image.length > 0) {\n              options.type = AVATAR_TYPE.image;\n              this._markupContent = image.first();\n            } else if (icon.length > 0) {\n              options.type = AVATAR_TYPE.icon;\n              this._markupContent = icon.first();\n            } else if (element.children().length > 0) {\n              options.type = AVATAR_TYPE.text;\n              this._markupContent = element.children();\n            }\n          },\n          _optionsFromWrapper: function (updatedOptions) {\n            var wrapper = this.wrapper,\n                classes,\n                image;\n\n            if (updatedOptions.type === AVATAR_TYPE.text) {\n              updatedOptions.text = wrapper.text().trim();\n            } else if (updatedOptions.type === AVATAR_TYPE.icon) {\n              classes = wrapper.find(\".k-icon\").attr(\"class\").split(/\\s+/);\n              classes.forEach(function (name) {\n                if (name.indexOf(\"k-i-\") === 0) {\n                  updatedOptions.icon = name.substring(4);\n                }\n              });\n            } else if (updatedOptions.type === AVATAR_TYPE.image) {\n              image = wrapper.find(\"img\");\n              updatedOptions.image = image.attr(\"src\");\n\n              if (image.attr(\"alt\")) {\n                updatedOptions.alt = image.attr(\"alt\");\n              }\n            }\n\n            return updatedOptions;\n          },\n          _wrapper: function () {\n            var wrapper = this.element,\n                options = this.options,\n                span = $(\"<span>\");\n            this.wrapper = wrapper;\n            wrapper.addClass(AVATAR_STYLES.avatar);\n\n            this._applyCssClasses();\n\n            if (options.border) {\n              wrapper.addClass(AVATAR_STYLES.bordered);\n            }\n\n            if (options.style) {\n              wrapper.css(options.style);\n            }\n\n            if (options.className) {\n              wrapper.addClass(options.className);\n            }\n\n            span.addClass(AVATAR_STYLES.avatar + DASH + options.type);\n            wrapper.prepend(span);\n          }\n        });\n        kendo.cssProperties.registerPrefix(\"Avatar\", \"k-avatar-\");\n        kendo.cssProperties.registerValues(\"Avatar\", [{\n          prop: \"rounded\",\n          values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n        }]);\n        kendo.ui.plugin(Avatar);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}