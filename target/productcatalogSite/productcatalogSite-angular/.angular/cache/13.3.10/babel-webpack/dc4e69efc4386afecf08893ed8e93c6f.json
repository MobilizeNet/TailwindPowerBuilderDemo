{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1729);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  6:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.combobox\");\n    /***/\n  },\n\n  /***/\n  962:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.popup\");\n    /***/\n  },\n\n  /***/\n  976:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.dropdownlist\");\n    /***/\n  },\n\n  /***/\n  978:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.colorpicker\");\n    /***/\n  },\n\n  /***/\n  1039:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.toolbar\");\n    /***/\n  },\n\n  /***/\n  1729:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1039), __webpack_require__(978), __webpack_require__(6), __webpack_require__(976), __webpack_require__(962), __webpack_require__(1730)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function (kendo) {\n        /* jshint eqnull:true */\n        var $ = kendo.jQuery;\n        var ToolBar = kendo.ui.ToolBar;\n        var MESSAGES = kendo.spreadsheet.messages.toolbar = {\n          addColumnLeft: \"Add column left\",\n          addColumnRight: \"Add column right\",\n          addRowAbove: \"Add row above\",\n          addRowBelow: \"Add row below\",\n          alignment: \"Alignment\",\n          alignmentButtons: {\n            justtifyLeft: \"Align left\",\n            justifyCenter: \"Center\",\n            justifyRight: \"Align right\",\n            justifyFull: \"Justify\",\n            alignTop: \"Align top\",\n            alignMiddle: \"Align middle\",\n            alignBottom: \"Align bottom\"\n          },\n          backgroundColor: \"Background\",\n          bold: \"Bold\",\n          borders: \"Borders\",\n          copy: \"Copy\",\n          cut: \"Cut\",\n          deleteColumn: \"Delete column\",\n          deleteRow: \"Delete row\",\n          filter: \"Filter\",\n          fontFamily: \"Font\",\n          fontSize: \"Font size\",\n          format: \"Custom format...\",\n          formatTypes: {\n            automatic: \"Automatic\",\n            text: \"Text\",\n            number: \"Number\",\n            percent: \"Percent\",\n            financial: \"Financial\",\n            currency: \"Currency\",\n            date: \"Date\",\n            time: \"Time\",\n            dateTime: \"Date time\",\n            duration: \"Duration\",\n            moreFormats: \"More formats...\"\n          },\n          formatDecreaseDecimal: \"Decrease decimal\",\n          formatIncreaseDecimal: \"Increase decimal\",\n          freeze: \"Freeze panes\",\n          freezeButtons: {\n            freezePanes: \"Freeze panes\",\n            freezeRows: \"Freeze rows\",\n            freezeColumns: \"Freeze columns\",\n            unfreeze: \"Unfreeze panes\"\n          },\n          insertComment: \"Insert comment\",\n          insertImage: \"Insert image\",\n          italic: \"Italic\",\n          merge: \"Merge cells\",\n          mergeButtons: {\n            mergeCells: \"Merge all\",\n            mergeHorizontally: \"Merge horizontally\",\n            mergeVertically: \"Merge vertically\",\n            unmerge: \"Unmerge\"\n          },\n          open: \"Open...\",\n          paste: \"Paste\",\n          quickAccess: {\n            redo: \"Redo\",\n            undo: \"Undo\"\n          },\n          exportAs: \"Export...\",\n          toggleGridlines: \"Toggle gridlines\",\n          sort: \"Sort\",\n          sortButtons: {\n            // sortSheetAsc: \"Sort sheet A to Z\",\n            // sortSheetDesc: \"Sort sheet Z to A\",\n            sortRangeAsc: \"Sort range A to Z\",\n            sortRangeDesc: \"Sort range Z to A\"\n          },\n          textColor: \"Text Color\",\n          textWrap: \"Wrap text\",\n          underline: \"Underline\",\n          validation: \"Data validation...\",\n          hyperlink: \"Link\"\n        };\n        var defaultTools = {\n          home: [\"open\", \"exportAs\", [\"cut\", \"copy\", \"paste\"], [\"bold\", \"italic\", \"underline\"], \"hyperlink\", \"insertComment\", \"insertImage\", \"backgroundColor\", \"textColor\", \"borders\", \"fontSize\", \"fontFamily\", \"alignment\", \"textWrap\", [\"formatDecreaseDecimal\", \"formatIncreaseDecimal\"], \"format\", \"merge\", \"freeze\", \"filter\", \"toggleGridlines\"],\n          insert: [[\"addColumnLeft\", \"addColumnRight\", \"addRowBelow\", \"addRowAbove\"], [\"deleteColumn\", \"deleteRow\"]],\n          data: [\"sort\", \"filter\", \"validation\"]\n        };\n        var toolDefaults = {\n          //home tab\n          open: {\n            type: \"open\",\n            overflow: \"never\",\n            iconClass: \"file-excel\"\n          },\n          exportAs: {\n            type: \"exportAsDialog\",\n            dialogName: \"exportAs\",\n            overflow: \"never\",\n            text: \"\",\n            iconClass: \"file-excel\"\n          },\n          bold: {\n            type: \"button\",\n            command: \"PropertyChangeCommand\",\n            property: \"bold\",\n            value: true,\n            iconClass: \"bold\",\n            togglable: true\n          },\n          italic: {\n            type: \"button\",\n            command: \"PropertyChangeCommand\",\n            property: \"italic\",\n            value: true,\n            iconClass: \"italic\",\n            togglable: true\n          },\n          underline: {\n            type: \"button\",\n            command: \"PropertyChangeCommand\",\n            property: \"underline\",\n            value: true,\n            iconClass: \"underline\",\n            togglable: true\n          },\n          formatDecreaseDecimal: {\n            type: \"button\",\n            command: \"AdjustDecimalsCommand\",\n            value: -1,\n            iconClass: \"decimal-decrease\"\n          },\n          formatIncreaseDecimal: {\n            type: \"button\",\n            command: \"AdjustDecimalsCommand\",\n            value: +1,\n            iconClass: \"decimal-increase\"\n          },\n          textWrap: {\n            type: \"button\",\n            command: \"TextWrapCommand\",\n            property: \"wrap\",\n            value: true,\n            iconClass: \"text-wrap\",\n            togglable: true\n          },\n          cut: {\n            type: \"button\",\n            command: \"ToolbarCutCommand\",\n            iconClass: \"cut\"\n          },\n          copy: {\n            type: \"button\",\n            command: \"ToolbarCopyCommand\",\n            iconClass: \"copy\"\n          },\n          paste: {\n            type: \"button\",\n            command: \"ToolbarPasteCommand\",\n            iconClass: \"paste\"\n          },\n          separator: {\n            type: \"separator\"\n          },\n          alignment: {\n            type: \"alignment\",\n            iconClass: \"align-left\"\n          },\n          backgroundColor: {\n            type: \"colorPicker\",\n            property: \"background\",\n            iconClass: \"paint\"\n          },\n          textColor: {\n            type: \"colorPicker\",\n            property: \"color\",\n            iconClass: \"foreground-color\"\n          },\n          fontFamily: {\n            type: \"fontFamily\",\n            property: \"fontFamily\",\n            iconClass: \"font-family\"\n          },\n          fontSize: {\n            type: \"fontSize\",\n            property: \"fontSize\",\n            iconClass: \"font-size\"\n          },\n          format: {\n            type: \"format\",\n            property: \"format\",\n            iconClass: \"custom-format\"\n          },\n          filter: {\n            type: \"filter\",\n            property: \"hasFilter\",\n            iconClass: \"filter\"\n          },\n          merge: {\n            type: \"merge\",\n            iconClass: \"cells-merge\"\n          },\n          freeze: {\n            type: \"freeze\",\n            iconClass: \"pane-freeze\"\n          },\n          borders: {\n            type: \"borders\",\n            iconClass: \"borders-all\"\n          },\n          formatCells: {\n            type: \"dialog\",\n            dialogName: \"formatCells\",\n            overflow: \"never\"\n          },\n          hyperlink: {\n            type: \"dialog\",\n            dialogName: \"hyperlink\",\n            iconClass: \"link-horizontal\",\n            overflow: \"never\",\n            text: \"\"\n          },\n          toggleGridlines: {\n            type: \"button\",\n            command: \"GridLinesChangeCommand\",\n            property: \"gridLines\",\n            value: true,\n            iconClass: \"border-no\",\n            togglable: true\n          },\n          insertComment: {\n            type: \"dialog\",\n            dialogName: \"insertComment\",\n            property: \"comment\",\n            togglable: true,\n            overflow: \"never\",\n            iconClass: \"comment\",\n            text: \"\"\n          },\n          insertImage: {\n            type: \"dialog\",\n            dialogName: \"insertImage\",\n            overflow: \"never\",\n            iconClass: \"image\",\n            text: \"\"\n          },\n          //insert tab\n          addColumnLeft: {\n            type: \"button\",\n            command: \"AddColumnCommand\",\n            value: \"left\",\n            iconClass: \"table-column-insert-left\"\n          },\n          addColumnRight: {\n            type: \"button\",\n            command: \"AddColumnCommand\",\n            value: \"right\",\n            iconClass: \"table-column-insert-right\"\n          },\n          addRowBelow: {\n            type: \"button\",\n            command: \"AddRowCommand\",\n            value: \"below\",\n            iconClass: \"table-row-insert-below\"\n          },\n          addRowAbove: {\n            type: \"button\",\n            command: \"AddRowCommand\",\n            value: \"above\",\n            iconClass: \"table-row-insert-above\"\n          },\n          deleteColumn: {\n            type: \"button\",\n            command: \"DeleteColumnCommand\",\n            iconClass: \"table-column-delete\"\n          },\n          deleteRow: {\n            type: \"button\",\n            command: \"DeleteRowCommand\",\n            iconClass: \"table-row-delete\"\n          },\n          //data tab\n          sort: {\n            type: \"sort\",\n            iconClass: \"sort-desc\"\n          },\n          validation: {\n            type: \"dialog\",\n            dialogName: \"validation\",\n            iconClass: \"exception\",\n            overflow: \"never\"\n          }\n        };\n        var SpreadsheetToolBar = ToolBar.extend({\n          init: function (element, options) {\n            options.items = this._expandTools(options.tools || SpreadsheetToolBar.prototype.options.tools[options.toolbarName]);\n            ToolBar.fn.init.call(this, element, options);\n\n            var handleClick = this._click.bind(this);\n\n            this.element.addClass(\"k-spreadsheet-toolbar\");\n\n            this._addSeparators(this.element);\n\n            var that = this;\n            this.element.on(\"keydown\", function (e) {\n              var tool;\n\n              if (e.keyCode === 9) {\n                tool = that._nextTool(e.shiftKey ? -1 : 1);\n\n                if (tool) {\n                  document.activeElement.blur();\n\n                  if ($(tool).is(\".k-upload-button\")) {\n                    $(tool).addClass(\"k-focus\");\n                  }\n\n                  if ($(tool).find(\"input\").length) {\n                    $(tool).find(\"input\").trigger(\"focus\");\n                  } else {\n                    tool.focus();\n                  }\n\n                  e.preventDefault();\n                }\n              }\n            });\n            this.element.on(\"focusout\", function () {\n              $(this).find(\".k-toolbar-first-visible\").removeClass(\"k-focus\");\n            });\n            this.bind({\n              click: handleClick,\n              toggle: handleClick\n            });\n          },\n          _nextTool: function (direction) {\n            var that = this;\n            var tools = that.element.find(\".k-dropdownlist, .k-combobox, .k-button, .k-button-group > a\").not(\"[tabindex=-1]\");\n            var activeIndex = tools.index($(document.activeElement).closest(\".k-dropdownlist, .k-combobox, .k-button, .k-button-group > a\").not(\"[tabindex=-1]\"));\n\n            if (activeIndex > 0) {\n              return tools[activeIndex + direction];\n            }\n          },\n          _addSeparators: function (element) {\n            var groups = element.children(\".k-dropdownlist, .k-combobox, a.k-button, .k-button-group\");\n            groups.before(\"<span class='k-separator'></span>\");\n          },\n          _expandTools: function (tools) {\n            function expandTool(toolName) {\n              // expand string to object, add missing tool properties\n              var options = $.isPlainObject(toolName) ? toolName : toolDefaults[toolName] || {};\n              var spriteCssClass = \"k-icon k-i-\" + options.iconClass;\n              var type = options.type;\n              var typeDefaults = {\n                button: {\n                  showText: \"overflow\"\n                },\n                colorPicker: {\n                  toolIcon: spriteCssClass,\n                  spriteCssClass: spriteCssClass\n                },\n                borders: {\n                  spriteCssClass: spriteCssClass\n                },\n                alignment: {\n                  spriteCssClass: spriteCssClass\n                },\n                merge: {\n                  spriteCssClass: spriteCssClass\n                },\n                freeze: {\n                  spriteCssClass: spriteCssClass\n                }\n              };\n              var tool = kendo.deepExtend({\n                name: options.name || toolName,\n                text: MESSAGES[options.name || toolName],\n                icon: options.iconClass,\n                attributes: {\n                  title: MESSAGES[options.name || toolName],\n                  \"aria-label\": MESSAGES[options.name || toolName]\n                }\n              }, typeDefaults[type], options);\n\n              if (type == \"splitButton\") {\n                tool.menuButtons = tool.menuButtons.map(expandTool);\n              }\n\n              if (tool.name === \"fontSize\" || toolName === \"fontSize\") {\n                tool.attributes[\"aria-label\"] = null;\n              }\n\n              tool.attributes[\"data-tool\"] = toolName;\n\n              if (options.property) {\n                tool.attributes[\"data-property\"] = options.property;\n              }\n\n              return tool;\n            }\n\n            return tools.reduce(function (tools, tool) {\n              if (Array.isArray(tool)) {\n                tools.push({\n                  type: \"buttonGroup\",\n                  buttons: tool.map(expandTool)\n                });\n              } else {\n                tools.push(expandTool.call(this, tool));\n              }\n\n              return tools;\n            }, []);\n          },\n          _click: function (e) {\n            var toolName = e.target.attr(\"data-tool\");\n            var tool = toolDefaults[toolName] || {};\n            var commandType = tool.command;\n\n            if (!commandType) {\n              return;\n            }\n\n            var args = {\n              command: commandType,\n              options: {\n                property: tool.property || null,\n                value: tool.value || null\n              }\n            };\n\n            if (typeof args.options.value === \"boolean\") {\n              args.options.value = e.checked ? true : null;\n            }\n\n            this.action(args);\n          },\n          events: [\"click\", \"toggle\", \"open\", \"close\", \"overflowOpen\", \"overflowClose\", \"action\", \"dialog\"],\n          options: {\n            name: \"SpreadsheetToolBar\",\n            resizable: true,\n            tools: defaultTools\n          },\n          action: function (args) {\n            this.trigger(\"action\", args);\n          },\n          dialog: function (args) {\n            this.trigger(\"dialog\", args);\n          },\n          refresh: function (activeCell) {\n            var range = activeCell;\n\n            var tools = this._tools();\n\n            function setToggle(tool, value) {\n              var toolbar = tool.toolbar;\n              var overflow = tool.overflow;\n              var togglable = toolbar && toolbar.options.togglable || overflow && overflow.options.togglable;\n\n              if (!togglable) {\n                return;\n              }\n\n              var toggle = false;\n\n              if (typeof value === \"boolean\") {\n                toggle = value;\n              } else if (typeof value === \"string\") {\n                if (toolbar.options.hasOwnProperty(\"value\")) {\n                  toggle = toolbar.options.value === value;\n                } else {\n                  // if no value is specified in the tool\n                  // options, assume it should be ON if the\n                  // range value is not null, and OFF otherwise.\n                  toggle = value != null;\n                }\n              }\n\n              toolbar.toggle(toggle);\n\n              if (overflow) {\n                overflow.toggle(toggle);\n              }\n            }\n\n            function update(tool, value) {\n              var toolbar = tool.toolbar;\n              var overflow = tool.overflow;\n              var selection, enabled;\n\n              if (toolbar && toolbar.update) {\n                toolbar.update(value);\n              }\n\n              if (overflow && overflow.update) {\n                overflow.update(value);\n              }\n\n              if (tool.type == \"filter\") {\n                selection = range.sheet().selection();\n\n                if (selection && selection._ref && selection._ref.height) {\n                  enabled = value || selection._ref.height() > 1;\n                  toolbar.enable(enabled);\n                  overflow.enable(enabled);\n                }\n              }\n            }\n\n            for (var i = 0; i < tools.length; i++) {\n              var property = tools[i].property;\n              var tool = tools[i].tool;\n              var value = kendo.isFunction(range[property]) ? range[property]() : range;\n\n              if (property == \"gridLines\") {\n                // the law of leaky abstractions kicks in.  this\n                // isn't really a property of the range, it's\n                // per-sheet.\n                value = range.sheet().showGridLines();\n              }\n\n              if (tool.type === \"button\") {\n                setToggle(tool, value);\n              } else {\n                update(tool, value);\n              }\n            }\n\n            this.resize();\n          },\n          _tools: function () {\n            return this.element.find(\"[data-property]\").toArray().map(function (element) {\n              element = $(element);\n              return {\n                property: element.attr(\"data-property\"),\n                tool: this._getItem(element)\n              };\n            }.bind(this));\n          },\n          destroy: function () {\n            // TODO: move to ToolBar.destroy to take care of these\n            this.element.find(\"[data-command],.k-button\").each(function () {\n              var element = $(this);\n              var instance = element.data(\"instance\");\n\n              if (instance && instance.destroy) {\n                instance.destroy();\n              }\n            });\n            ToolBar.fn.destroy.call(this);\n          }\n        });\n        kendo.spreadsheet.ToolBar = SpreadsheetToolBar;\n        var DropDownTool = kendo.toolbar.Item.extend({\n          init: function (options, toolbar) {\n            var dropDownList = $(\"<select />\").attr(\"title\", options.attributes.title).attr(\"aria-label\", options.attributes.title).kendoDropDownList({\n              height: \"auto\",\n              autoWidth: true\n            }).data(\"kendoDropDownList\");\n            this.dropDownList = dropDownList;\n            this.element = dropDownList.wrapper;\n            this.options = options;\n            this.toolbar = toolbar;\n            this.attributes();\n            this.addUidAttr();\n            this.addOverflowAttr();\n            dropDownList.bind(\"open\", this._open.bind(this));\n            dropDownList.bind(\"change\", this._change.bind(this));\n            this.element.width(options.width).attr({\n              \"data-command\": \"PropertyChangeCommand\",\n              \"data-property\": options.property\n            });\n          },\n          _open: function () {\n            var ddl = this.dropDownList;\n            var list = ddl.list;\n            var listWidth;\n            list.css({\n              whiteSpace: \"nowrap\",\n              width: \"auto\"\n            });\n            listWidth = list.width();\n\n            if (listWidth > 0) {\n              listWidth += 20;\n            } else {\n              listWidth = ddl._listWidth;\n            }\n\n            list.css(\"width\", listWidth + kendo.support.scrollbar());\n            ddl._listWidth = listWidth;\n          },\n          _change: function (e) {\n            var that = this;\n            var instance = e.sender;\n            var value = instance.value();\n            var dataItem = instance.dataItem();\n            var popupName = dataItem ? dataItem.popup : undefined;\n\n            if (popupName) {\n              setTimeout(function () {\n                that.toolbar.dialog({\n                  name: popupName\n                });\n              });\n            } else {\n              that.toolbar.action({\n                command: \"PropertyChangeCommand\",\n                options: {\n                  property: this.options.property,\n                  value: value == \"null\" ? null : value\n                }\n              });\n            }\n          },\n          value: function (value) {\n            if (value !== undefined) {\n              this.dropDownList.value(value);\n            } else {\n              return this.dropDownList.value();\n            }\n          }\n        });\n        var PopupTool = kendo.toolbar.Item.extend({\n          init: function (options, toolbar) {\n            this.element = $(\"<a role='button' href='#' class='k-button k-button-md k-rounded-md  k-button-solid k-button-solid-base'>\" + \"<span class='k-button-icon k-icon \" + options.spriteCssClass + \"'></span>\" + \"<span class='k-button-text'><span class='k-icon k-i-arrow-s'></span></span>\" + \"</a>\");\n            this.element.on(\"click touchend\", this.open.bind(this)).attr(\"data-command\", options.command);\n            this.options = options;\n            this.toolbar = toolbar;\n            this.attributes();\n            this.addUidAttr();\n            this.addOverflowAttr();\n\n            this._popup();\n          },\n          destroy: function () {\n            this.popup.destroy();\n          },\n          open: function (ev) {\n            ev.preventDefault();\n            this.popup.toggle();\n          },\n          _popup: function () {\n            var element = this.element;\n            this.popup = $(\"<div class='k-spreadsheet-popup' />\").appendTo(element).kendoPopup({\n              anchor: element\n            }).data(\"kendoPopup\");\n          }\n        });\n        kendo.toolbar.registerComponent(\"dialog\", kendo.toolbar.ToolBarButton.extend({\n          init: function (options, toolbar) {\n            kendo.toolbar.ToolBarButton.fn.init.call(this, options, toolbar);\n            this._dialogName = options.dialogName;\n            this.element.on(\"click touchend\", this.open.bind(this)).data(\"instance\", this);\n          },\n          open: function () {\n            this.toolbar.dialog({\n              name: this._dialogName\n            });\n          }\n        }));\n        kendo.toolbar.registerComponent(\"exportAsDialog\", kendo.toolbar.Item.extend({\n          init: function (options, toolbar) {\n            this._dialogName = options.dialogName;\n            this.toolbar = toolbar;\n            this._title = options.attributes.title;\n            this.element = $(\"<button type='button' role='button' class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-icon-button'>\" + \"<span class='k-button-icon k-icon k-i-download'></span>\" + \"</button>\").attr(\"title\", this._title).attr(\"aria-label\", this._title).data(\"instance\", this);\n            this.element.on(\"click\", this.open.bind(this)).data(\"instance\", this);\n          },\n          open: function () {\n            this.toolbar.dialog({\n              name: this._dialogName\n            });\n          }\n        }));\n        var OverflowDialogButton = kendo.toolbar.OverflowButton.extend({\n          init: function (options, toolbar) {\n            kendo.toolbar.OverflowButton.fn.init.call(this, options, toolbar);\n            this.element.on(\"click touchend\", this._click.bind(this));\n            this.message = this.options.text;\n            var instance = this.element.data(\"button\");\n            this.element.data(this.options.type, instance);\n          },\n          _click: $.noop\n        });\n        var ColorPicker = PopupTool.extend({\n          init: function (options, toolbar) {\n            PopupTool.fn.init.call(this, options, toolbar);\n            this.popup.element.addClass(\"k-spreadsheet-colorpicker\");\n            this.colorChooser = new kendo.spreadsheet.ColorChooser(this.popup.element, {\n              change: this._colorChange.bind(this)\n            });\n            this.element.attr({\n              \"data-property\": options.property\n            });\n            this.element.data({\n              type: \"colorPicker\",\n              colorPicker: this,\n              instance: this\n            });\n          },\n          destroy: function () {\n            this.colorChooser.destroy();\n            PopupTool.fn.destroy.call(this);\n          },\n          update: function (value) {\n            this.value(value);\n          },\n          value: function (value) {\n            this.colorChooser.value(value);\n          },\n          _colorChange: function (e) {\n            this.toolbar.action({\n              command: \"PropertyChangeCommand\",\n              options: {\n                property: this.options.property,\n                value: e.sender.value()\n              }\n            });\n            this.popup.close();\n          }\n        });\n        var ColorPickerButton = OverflowDialogButton.extend({\n          init: function (options, toolbar) {\n            options.iconName = \"text\";\n            OverflowDialogButton.fn.init.call(this, options, toolbar);\n          },\n          _click: function () {\n            this.toolbar.dialog({\n              name: \"colorPicker\",\n              options: {\n                title: this.options.property,\n                property: this.options.property\n              }\n            });\n          }\n        });\n        kendo.toolbar.registerComponent(\"colorPicker\", ColorPicker, ColorPickerButton);\n        var FONT_SIZES = [8, 9, 10, 11, 12, 13, 14, 16, 18, 20, 22, 24, 26, 28, 36, 48, 72];\n        var DEFAULT_FONT_SIZE = 12;\n        var FontSize = kendo.toolbar.Item.extend({\n          init: function (options, toolbar) {\n            var comboBox = $(\"<input />\").attr(\"aria-label\", options.attributes.title).attr(\"title\", options.attributes.title).kendoComboBox({\n              change: this._valueChange.bind(this),\n              clearButton: false,\n              dataSource: options.fontSizes || FONT_SIZES,\n              value: DEFAULT_FONT_SIZE\n            }).data(\"kendoComboBox\");\n            this.comboBox = comboBox;\n            this.element = comboBox.wrapper;\n            this.options = options;\n            this.toolbar = toolbar;\n            this.attributes();\n            this.addUidAttr();\n            this.addOverflowAttr();\n            this.element.width(options.width).attr({\n              \"data-command\": \"PropertyChangeCommand\",\n              \"data-property\": options.property\n            });\n            this.element.data({\n              type: \"fontSize\",\n              fontSize: this\n            });\n          },\n          _valueChange: function (e) {\n            this.toolbar.action({\n              command: \"PropertyChangeCommand\",\n              options: {\n                property: this.options.property,\n                value: kendo.parseInt(e.sender.value())\n              }\n            });\n          },\n          update: function (value) {\n            this.value(kendo.parseInt(value) || DEFAULT_FONT_SIZE);\n          },\n          value: function (value) {\n            if (value !== undefined) {\n              this.comboBox.value(value);\n            } else {\n              return this.comboBox.value();\n            }\n          }\n        });\n        var FontSizeButton = OverflowDialogButton.extend({\n          _click: function () {\n            this.toolbar.dialog({\n              name: \"fontSize\",\n              options: {\n                sizes: FONT_SIZES,\n                defaultSize: DEFAULT_FONT_SIZE\n              }\n            });\n          },\n          update: function (value) {\n            this._value = value || DEFAULT_FONT_SIZE;\n            this.element.find(\".k-button-text\").text(this.message + \" (\" + this._value + \") ...\");\n          }\n        });\n        kendo.toolbar.registerComponent(\"fontSize\", FontSize, FontSizeButton);\n        var FONT_FAMILIES = [\"Arial\", \"Courier New\", \"Georgia\", \"Times New Roman\", \"Trebuchet MS\", \"Verdana\"];\n        var DEFAULT_FONT_FAMILY = \"Arial\";\n        var FontFamily = DropDownTool.extend({\n          init: function (options, toolbar) {\n            DropDownTool.fn.init.call(this, options, toolbar);\n            var ddl = this.dropDownList;\n            ddl.setDataSource(options.fontFamilies || FONT_FAMILIES);\n            ddl.value(DEFAULT_FONT_FAMILY);\n            this.element.data({\n              type: \"fontFamily\",\n              fontFamily: this\n            });\n          },\n          update: function (value) {\n            this.value(value || DEFAULT_FONT_FAMILY);\n          }\n        });\n        var FontFamilyButton = OverflowDialogButton.extend({\n          _click: function () {\n            this.toolbar.dialog({\n              name: \"fontFamily\",\n              options: {\n                fonts: FONT_FAMILIES,\n                defaultFont: DEFAULT_FONT_FAMILY\n              }\n            });\n          },\n          update: function (value) {\n            this._value = value || DEFAULT_FONT_FAMILY;\n            this.element.find(\".k-button-text\").text(this.message + \" (\" + this._value + \") ...\");\n          }\n        });\n        kendo.toolbar.registerComponent(\"fontFamily\", FontFamily, FontFamilyButton);\n        var defaultFormats = kendo.spreadsheet.formats = {\n          automatic: null,\n          text: \"@\",\n          number: \"#,0.00\",\n          percent: \"0.00%\",\n          financial: '_(\"$\"* #,##0.00_);_(\"$\"* (#,##0.00);_(\"$\"* \"-\"??_);_(@_)',\n          currency: \"$#,##0.00;[Red]$#,##0.00\",\n          date: \"m/d/yyyy\",\n          time: \"h:mm:ss AM/PM\",\n          dateTime: \"m/d/yyyy h:mm\",\n          duration: \"[h]:mm:ss\"\n        };\n        var Format = DropDownTool.extend({\n          _revertTitle: function (e) {\n            e.sender.value(\"\");\n            e.sender.wrapper.width(\"auto\");\n          },\n          init: function (options, toolbar) {\n            DropDownTool.fn.init.call(this, options, toolbar);\n            var ddl = this.dropDownList;\n            var icon = \"<span class='k-icon k-i-\" + options.iconClass + \"' style='line-height: 1em; width: 1.35em;'></span>\";\n            ddl.bind(\"change\", this._revertTitle.bind(this));\n            ddl.bind(\"dataBound\", this._revertTitle.bind(this));\n            ddl.setOptions({\n              dataValueField: \"format\",\n              dataTextField: \"name\",\n              dataValuePrimitive: true,\n              valueTemplate: icon,\n              template: \"# if (data.sample) { #\" + \"<span class='k-spreadsheet-sample'>#: data.sample #</span>\" + \"# } #\" + \"#: data.name #\"\n            });\n            ddl.text(icon);\n            ddl.setDataSource([{\n              format: defaultFormats.automatic,\n              name: MESSAGES.formatTypes.automatic\n            }, {\n              format: defaultFormats.text,\n              name: MESSAGES.formatTypes.text\n            }, {\n              format: defaultFormats.number,\n              name: MESSAGES.formatTypes.number,\n              sample: \"1,499.99\"\n            }, {\n              format: defaultFormats.percent,\n              name: MESSAGES.formatTypes.percent,\n              sample: \"14.50%\"\n            }, {\n              format: defaultFormats.financial,\n              name: MESSAGES.formatTypes.financial,\n              sample: \"(1,000.12)\"\n            }, {\n              format: defaultFormats.currency,\n              name: MESSAGES.formatTypes.currency,\n              sample: \"$1,499.99\"\n            }, {\n              format: defaultFormats.date,\n              name: MESSAGES.formatTypes.date,\n              sample: \"4/21/2012\"\n            }, {\n              format: defaultFormats.time,\n              name: MESSAGES.formatTypes.time,\n              sample: \"5:49:00 PM\"\n            }, {\n              format: defaultFormats.dateTime,\n              name: MESSAGES.formatTypes.dateTime,\n              sample: \"4/21/2012 5:49:00\"\n            }, {\n              format: defaultFormats.duration,\n              name: MESSAGES.formatTypes.duration,\n              sample: \"168:05:00\"\n            }, {\n              popup: \"formatCells\",\n              name: MESSAGES.formatTypes.moreFormats\n            }]);\n            this.element.data({\n              type: \"format\",\n              format: this\n            });\n            ddl.wrapper.find(\"[role='option']\").attr(\"aria-label\", \"Select format\");\n          }\n        });\n        var FormatButton = OverflowDialogButton.extend({\n          _click: function () {\n            this.toolbar.dialog({\n              name: \"formatCells\"\n            });\n          }\n        });\n        kendo.toolbar.registerComponent(\"format\", Format, FormatButton);\n        var BorderChangeTool = PopupTool.extend({\n          init: function (options, toolbar) {\n            PopupTool.fn.init.call(this, options, toolbar);\n\n            this._borderPalette();\n\n            this.element.data({\n              type: \"borders\",\n              instance: this\n            });\n          },\n          destroy: function () {\n            this.borderPalette.destroy();\n            PopupTool.fn.destroy.call(this);\n          },\n          _borderPalette: function () {\n            var element = $(\"<div />\").appendTo(this.popup.element);\n            this.borderPalette = new kendo.spreadsheet.BorderPalette(element, {\n              change: this._action.bind(this)\n            });\n          },\n          _action: function (e) {\n            this.toolbar.action({\n              command: \"BorderChangeCommand\",\n              options: {\n                border: e.type,\n                style: {\n                  size: 1,\n                  color: e.color\n                }\n              }\n            });\n          }\n        });\n        var BorderChangeButton = OverflowDialogButton.extend({\n          _click: function () {\n            this.toolbar.dialog({\n              name: \"borders\"\n            });\n          }\n        });\n        kendo.toolbar.registerComponent(\"borders\", BorderChangeTool, BorderChangeButton);\n        var AlignmentTool = PopupTool.extend({\n          init: function (options, toolbar) {\n            PopupTool.fn.init.call(this, options, toolbar);\n            this.element.attr({\n              \"data-property\": \"alignment\"\n            });\n\n            this._defineButtons();\n\n            this._commandPalette();\n\n            this.popup.element.on(\"click\", \".k-button\", function (e) {\n              this._action($(e.currentTarget));\n            }.bind(this));\n            this.element.data({\n              type: \"alignment\",\n              alignment: this,\n              instance: this\n            });\n          },\n          _defineButtons: function () {\n            this.buttons = [{\n              property: \"textAlign\",\n              value: \"left\",\n              iconClass: \"align-left\",\n              text: MESSAGES.alignmentButtons.justtifyLeft\n            }, {\n              property: \"textAlign\",\n              value: \"center\",\n              iconClass: \"align-center\",\n              text: MESSAGES.alignmentButtons.justifyCenter\n            }, {\n              property: \"textAlign\",\n              value: \"right\",\n              iconClass: \"align-right\",\n              text: MESSAGES.alignmentButtons.justifyRight\n            }, {\n              property: \"textAlign\",\n              value: \"justify\",\n              iconClass: \"align-justify\",\n              text: MESSAGES.alignmentButtons.justifyFull\n            }, {\n              property: \"verticalAlign\",\n              value: \"top\",\n              iconClass: \"align-top\",\n              text: MESSAGES.alignmentButtons.alignTop\n            }, {\n              property: \"verticalAlign\",\n              value: \"center\",\n              iconClass: \"align-middle\",\n              text: MESSAGES.alignmentButtons.alignMiddle\n            }, {\n              property: \"verticalAlign\",\n              value: \"bottom\",\n              iconClass: \"align-bottom\",\n              text: MESSAGES.alignmentButtons.alignBottom\n            }];\n          },\n          destroy: function () {\n            this.popup.element.off();\n            PopupTool.fn.destroy.call(this);\n          },\n          update: function (range) {\n            var textAlign = range.textAlign();\n            var verticalAlign = range.verticalAlign();\n            var element = this.popup.element;\n            element.find(\".k-button\").removeClass(\"k-selected\");\n\n            if (textAlign) {\n              element.find(\"[data-property=textAlign][data-value=\" + textAlign + \"]\").addClass(\"k-selected\");\n            }\n\n            if (verticalAlign) {\n              element.find(\"[data-property=verticalAlign][data-value=\" + verticalAlign + \"]\").addClass(\"k-selected\");\n            }\n          },\n          _commandPalette: function () {\n            var buttons = this.buttons;\n            var element = $(\"<div />\").appendTo(this.popup.element);\n            buttons.forEach(function (options, index) {\n              var button = \"<a role='button' title='\" + options.text + \"' data-property='\" + options.property + \"' data-value='\" + options.value + \"' class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-icon-button'>\" + \"<span class='k-button-icon k-icon k-i-\" + options.iconClass + \"'></span>\" + \"</a>\";\n\n              if (index !== 0 && buttons[index - 1].property !== options.property) {\n                element.append($(\"<span class='k-separator' />\"));\n              }\n\n              element.append(button);\n            });\n          },\n          _action: function (button) {\n            var property = button.attr(\"data-property\");\n            var value = button.attr(\"data-value\");\n            this.toolbar.action({\n              command: \"PropertyChangeCommand\",\n              options: {\n                property: property,\n                value: value\n              }\n            });\n          }\n        });\n        var AlignmentButton = OverflowDialogButton.extend({\n          _click: function () {\n            this.toolbar.dialog({\n              name: \"alignment\"\n            });\n          }\n        });\n        kendo.toolbar.registerComponent(\"alignment\", AlignmentTool, AlignmentButton);\n        var MergeTool = PopupTool.extend({\n          init: function (options, toolbar) {\n            PopupTool.fn.init.call(this, options, toolbar);\n            this.popup.element.addClass(\"k-menu-popup\");\n\n            this._defineButtons();\n\n            this._commandPalette();\n\n            this.popup.element.on(\"click\", \".k-menu-item\", function (e) {\n              this._action($(e.currentTarget));\n            }.bind(this));\n            this.element.data({\n              type: \"merge\",\n              merge: this,\n              instance: this\n            });\n          },\n          _defineButtons: function () {\n            this.buttons = [{\n              value: \"cells\",\n              iconClass: \"cells-merge\",\n              text: MESSAGES.mergeButtons.mergeCells\n            }, {\n              value: \"horizontally\",\n              iconClass: \"cells-merge-horizontally\",\n              text: MESSAGES.mergeButtons.mergeHorizontally\n            }, {\n              value: \"vertically\",\n              iconClass: \"cells-merge-vertically\",\n              text: MESSAGES.mergeButtons.mergeVertically\n            }, {\n              value: \"unmerge\",\n              iconClass: \"table-unmerge\",\n              text: MESSAGES.mergeButtons.unmerge\n            }];\n          },\n          destroy: function () {\n            this.popup.element.off();\n            PopupTool.fn.destroy.call(this);\n          },\n          _commandPalette: function () {\n            var element = $(\"<ul class='k-group k-menu-group k-reset k-menu-group-md'>\").appendTo(this.popup.element);\n            this.buttons.forEach(function (options) {\n              var item = \"<li class='k-item k-menu-item' data-value='\" + options.value + \"'>\" + \"<span class='k-link k-menu-link'>\" + \"<span class='k-icon k-i-\" + options.iconClass + \"'></span>\" + \"<span class='k-menu-link-text'>\" + options.text + \"</span>\" + \"</span>\" + \"</li>\";\n              element.append(item);\n            });\n          },\n          _action: function (button) {\n            var value = button.attr(\"data-value\");\n            this.toolbar.action({\n              command: \"MergeCellCommand\",\n              options: {\n                value: value\n              }\n            });\n          }\n        });\n        var MergeButton = OverflowDialogButton.extend({\n          _click: function () {\n            this.toolbar.dialog({\n              name: \"merge\"\n            });\n          }\n        });\n        kendo.toolbar.registerComponent(\"merge\", MergeTool, MergeButton);\n        var FreezeTool = PopupTool.extend({\n          init: function (options, toolbar) {\n            PopupTool.fn.init.call(this, options, toolbar);\n            this.popup.element.addClass(\"k-menu-popup\");\n\n            this._defineButtons();\n\n            this._commandPalette();\n\n            this.popup.element.on(\"click\", \".k-menu-item\", function (e) {\n              this._action($(e.currentTarget));\n            }.bind(this));\n            this.element.data({\n              type: \"freeze\",\n              freeze: this,\n              instance: this\n            });\n          },\n          _defineButtons: function () {\n            this.buttons = [{\n              value: \"panes\",\n              iconClass: \"pane-freeze\",\n              text: MESSAGES.freezeButtons.freezePanes\n            }, {\n              value: \"rows\",\n              iconClass: \"row-freeze\",\n              text: MESSAGES.freezeButtons.freezeRows\n            }, {\n              value: \"columns\",\n              iconClass: \"column-freeze\",\n              text: MESSAGES.freezeButtons.freezeColumns\n            }, {\n              value: \"unfreeze\",\n              iconClass: \"table-unmerge\",\n              text: MESSAGES.freezeButtons.unfreeze\n            }];\n          },\n          destroy: function () {\n            this.popup.element.off();\n            PopupTool.fn.destroy.call(this);\n          },\n          _commandPalette: function () {\n            var element = $(\"<ul class='k-group k-menu-group k-reset k-menu-group-md'>\").appendTo(this.popup.element);\n            this.buttons.forEach(function (options) {\n              var item = \"<li class='k-item k-menu-item' data-value='\" + options.value + \"'>\" + \"<span class='k-link k-menu-link'>\" + \"<span class='k-icon k-i-\" + options.iconClass + \"'></span>\" + \"<span class='k-menu-link-text'>\" + options.text + \"</span>\" + \"</span>\" + \"</li>\";\n              element.append(item);\n            });\n          },\n          _action: function (button) {\n            var value = button.attr(\"data-value\");\n            this.toolbar.action({\n              command: \"FreezePanesCommand\",\n              options: {\n                value: value\n              }\n            });\n          }\n        });\n        var FreezeButton = OverflowDialogButton.extend({\n          _click: function () {\n            this.toolbar.dialog({\n              name: \"freeze\"\n            });\n          }\n        });\n        kendo.toolbar.registerComponent(\"freeze\", FreezeTool, FreezeButton);\n        var Sort = DropDownTool.extend({\n          _revertTitle: function (e) {\n            e.sender.wrapper.find('[role=\"option\"]').attr(\"aria-label\", e.sender.value());\n            e.sender.value(\"\");\n            e.sender.wrapper.width(\"auto\");\n          },\n          init: function (options, toolbar) {\n            DropDownTool.fn.init.call(this, options, toolbar);\n            var ddl = this.dropDownList;\n            ddl.bind(\"change\", this._revertTitle.bind(this));\n            ddl.bind(\"dataBound\", this._revertTitle.bind(this));\n            ddl.setOptions({\n              valueTemplate: \"<span class='k-icon k-i-\" + options.iconClass + \"' style='line-height: 1em; width: 1.35em;'></span>\",\n              template: \"<span class='k-icon k-i-#= iconClass #' style='line-height: 1em; width: 1.35em;'></span>#=text#\",\n              dataTextField: \"text\",\n              dataValueField: \"value\"\n            });\n            ddl.setDataSource([// { value: \"asc\", sheet: true, asc: true,  text: MESSAGES.sortButtons.sortSheetAsc,  iconClass: \"sort-asc\" },\n            // { value: \"desc\", sheet: true, asc: false, text: MESSAGES.sortButtons.sortSheetDesc,  , iconClass: \"sort-desc\" },\n            {\n              value: \"asc\",\n              sheet: false,\n              text: MESSAGES.sortButtons.sortRangeAsc,\n              iconClass: \"sort-asc\"\n            }, {\n              value: \"desc\",\n              sheet: false,\n              text: MESSAGES.sortButtons.sortRangeDesc,\n              iconClass: \"sort-desc\"\n            }]);\n            ddl.select(0);\n            ddl.wrapper.find('[role=\"option\"]').attr(\"aria-label\", \"asc\");\n            this.element.data({\n              type: \"sort\",\n              sort: this\n            });\n          },\n          _change: function (e) {\n            var instance = e.sender;\n            var dataItem = instance.dataItem();\n\n            if (dataItem) {\n              this.toolbar.action({\n                command: \"SortCommand\",\n                options: {\n                  value: dataItem.value,\n                  sheet: dataItem.sheet\n                }\n              });\n            }\n          },\n          value: $.noop\n        });\n        var SortButton = OverflowDialogButton.extend({\n          _click: function () {\n            this.toolbar.dialog({\n              name: \"sort\"\n            });\n          }\n        });\n        kendo.toolbar.registerComponent(\"sort\", Sort, SortButton);\n        var Filter = kendo.toolbar.ToolBarButton.extend({\n          init: function (options, toolbar) {\n            options.showText = \"overflow\";\n            kendo.toolbar.ToolBarButton.fn.init.call(this, options, toolbar);\n            this.element.on(\"click\", this._click.bind(this));\n            this.element.data({\n              type: \"filter\",\n              filter: this\n            });\n          },\n          _click: function () {\n            this.toolbar.action({\n              command: \"FilterCommand\"\n            });\n          },\n          update: function (value) {\n            this.toggle(value);\n          }\n        });\n        var FilterButton = OverflowDialogButton.extend({\n          init: function (options, toolbar) {\n            OverflowDialogButton.fn.init.call(this, options, toolbar);\n            this.element.data({\n              type: \"filter\",\n              filter: this\n            });\n          },\n          _click: function () {\n            this.toolbar.action({\n              command: \"FilterCommand\"\n            });\n          },\n          update: function (value) {\n            this.toggle(value);\n          }\n        });\n        kendo.toolbar.registerComponent(\"filter\", Filter, FilterButton);\n        var Open = kendo.toolbar.Item.extend({\n          init: function (options, toolbar) {\n            this.toolbar = toolbar;\n            this.element = $(\"<div class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-upload-button k-icon-button'>\" + \"<span class='k-button-icon k-icon k-i-folder-open'></span>\" + \"</div>\").data(\"instance\", this);\n            this._title = options.attributes.title;\n\n            this._reset();\n          },\n          _reset: function () {\n            this.element.find(\"input\").remove();\n            $(\"<input type='file' autocomplete='off' accept='.xlsx'/>\").attr(\"title\", this._title).attr(\"aria-label\", this._title).one(\"change\", this._change.bind(this)).appendTo(this.element);\n          },\n          _change: function (e) {\n            this.toolbar.action({\n              command: \"OpenCommand\",\n              options: {\n                file: e.target.files[0]\n              }\n            });\n\n            this._reset();\n          }\n        });\n        kendo.toolbar.registerComponent(\"open\", Open);\n        kendo.spreadsheet.TabStrip = kendo.ui.TabStrip.extend({\n          init: function (element, options) {\n            kendo.ui.TabStrip.fn.init.call(this, element, options);\n            element.addClass(\"k-spreadsheet-tabstrip\");\n\n            this._quickAccessButtons();\n\n            this.toolbars = {};\n            var tabs = options.dataSource;\n            this.contentElements.each(function (idx, element) {\n              this._toolbar($(element), tabs[idx].id, options.toolbarOptions[tabs[idx].id]);\n            }.bind(this));\n            this.one(\"activate\", function () {\n              //force resize of the tabstrip after TabStrip tab is opened\n              this.toolbars[this.options.dataSource[0].id].resize();\n            });\n          },\n          events: kendo.ui.TabStrip.fn.events.concat([\"action\", \"dialog\"]),\n          destroy: function () {\n            this.quickAccessToolBar.off(\"click\");\n            kendo.ui.TabStrip.fn.destroy.call(this);\n\n            for (var name in this.toolbars) {\n              this.toolbars[name].destroy();\n            }\n          },\n          action: function (args) {\n            this.trigger(\"action\", args);\n          },\n          dialog: function (args) {\n            this.trigger(\"dialog\", args);\n          },\n          refreshTools: function (range) {\n            var toolbars = this.toolbars;\n\n            for (var name in toolbars) {\n              if (toolbars.hasOwnProperty(name)) {\n                toolbars[name].refresh(range);\n              }\n            }\n          },\n          _quickAccessButtons: function () {\n            var buttons = [{\n              title: MESSAGES.quickAccess.undo,\n              iconClass: \"undo\",\n              action: \"undo\"\n            }, {\n              title: MESSAGES.quickAccess.redo,\n              iconClass: \"redo\",\n              action: \"redo\"\n            }];\n            var buttonTemplate = kendo.template(\"<a role='button' href='\\\\#' title='#= title #' data-action='#= action #' class='k-button k-button-md k-rounded-md k-button-flat k-button-flat-base k-icon-button' aria-label='#= title #'><span class='k-button-icon k-icon k-i-#=iconClass#'></span></a>\");\n            this.quickAccessToolBar = $(\"<div />\", {\n              \"class\": \"k-spreadsheet-quick-access-toolbar\",\n              \"html\": kendo.render(buttonTemplate, buttons)\n            }).insertBefore(this.wrapper);\n            this.quickAccessToolBar.on(\"click\", \".k-button\", function (e) {\n              e.preventDefault();\n              var action = $(e.currentTarget).attr(\"data-action\");\n              this.action({\n                action: action\n              });\n            }.bind(this));\n            this.quickAccessAdjust();\n          },\n          quickAccessAdjust: function () {\n            this.tabGroup.css(\"padding-left\", kendo._outerWidth(this.quickAccessToolBar));\n          },\n          _toolbar: function (container, name, tools) {\n            var element;\n            var options;\n\n            if (this.toolbars[name]) {\n              this.toolbars[name].destroy();\n              container.children(\".k-toolbar\").remove();\n            }\n\n            if (tools) {\n              element = container.html(\"<div></div>\").children(\"div\");\n              options = {\n                tools: typeof tools === \"boolean\" ? undefined : tools,\n                toolbarName: name,\n                action: this.action.bind(this),\n                dialog: this.dialog.bind(this)\n              };\n              this.toolbars[name] = new kendo.spreadsheet.ToolBar(element, options);\n            }\n          }\n        });\n      })(window.kendo);\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1730:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./borderpalette\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}