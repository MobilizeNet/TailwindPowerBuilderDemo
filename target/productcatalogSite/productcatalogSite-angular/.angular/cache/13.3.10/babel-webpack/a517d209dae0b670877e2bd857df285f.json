{"ast":null,"code":"const DELETED = {};\n\nclass LegacySet {\n  constructor(values) {\n    this._index = {};\n    this._values = values ? values.slice(0) : [];\n\n    for (let i = 0; i < this._values.length; i++) {\n      this._index[this._values[i]] = i;\n    }\n  }\n\n  values() {\n    return this._values.filter(item => item !== DELETED);\n  }\n\n  has(value) {\n    return this._index[value] !== undefined;\n  }\n\n  add(value) {\n    if (!this.has(value)) {\n      this._index[value] = this._values.length;\n\n      this._values.push(value);\n    }\n  }\n\n  delete(value) {\n    const index = this._index[value];\n\n    if (index !== undefined) {\n      this._values[index] = DELETED;\n      delete this._index[value];\n    }\n  }\n\n  clear() {\n    this._index = {};\n    this._values = [];\n  }\n\n  get size() {\n    return this._values.length;\n  }\n\n}\n\nclass SetWrapper {\n  constructor(values) {\n    this._set = new Set(values);\n  }\n\n  values() {\n    return Array.from(this._set);\n  }\n\n  has(value) {\n    return this._set.has(value);\n  }\n\n  add(value) {\n    this._set.add(value);\n  }\n\n  delete(value) {\n    this._set.delete(value);\n  }\n\n  clear() {\n    this._set.clear();\n  }\n\n  get size() {\n    return this._set.size;\n  }\n\n} // TODO: Drop LegacySet when removing support for IE10\n\n\nlet supportsSet = () => {\n  let supported = false;\n\n  if (typeof Set === 'function') {\n    const set = new Set([1]);\n    supported = set.has(1);\n  }\n\n  return supported;\n};\n\nexport default function createHashSet(values) {\n  if (supportsSet()) {\n    return new SetWrapper(values);\n  }\n\n  return new LegacySet(values);\n}","map":null,"metadata":{},"sourceType":"module"}