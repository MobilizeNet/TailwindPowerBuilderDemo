{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(961);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  954:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo-drawing\");\n    /***/\n  },\n\n  /***/\n  961:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(962), __webpack_require__(954)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function ($) {\n        var NS = \".kendo\";\n        var kendo = window.kendo;\n        var deepExtend = kendo.deepExtend;\n        var utils = kendo.drawing.util;\n        var defined = utils.defined;\n        var limitValue = utils.limitValue;\n        var eventCoordinates = utils.eventCoordinates;\n        var outerWidth = kendo._outerWidth;\n        var outerHeight = kendo._outerHeight;\n        var TOOLTIP_TEMPLATE = '<div class=\"k-tooltip\">' + '<div class=\"k-tooltip-content\"></div>' + '</div>';\n        var TOOLTIP_CLOSE_TEMPLATE = '<div class=\"k-tooltip-button\"><a href=\"\\\\#\" class=\"k-icon k-i-close\">close</a></div>';\n        var SurfaceTooltip = kendo.Class.extend({\n          init: function (surface, options) {\n            this.element = $(TOOLTIP_TEMPLATE);\n            this.content = this.element.children(\".k-tooltip-content\");\n            options = options || {};\n            this.options = deepExtend({}, this.options, this._tooltipOptions(options));\n            this.popupOptions = {\n              appendTo: options.appendTo,\n              animation: options.animation,\n              copyAnchorStyles: false,\n              collision: \"fit fit\"\n            };\n            this._openPopupHandler = this._openPopup.bind(this);\n            this.surface = surface;\n\n            this._bindEvents();\n          },\n          options: {\n            position: \"top\",\n            showOn: \"mouseenter\",\n            offset: 7,\n            autoHide: true,\n            hideDelay: 0,\n            showAfter: 100\n          },\n          _bindEvents: function () {\n            this._showHandler = this._showEvent.bind(this);\n            this._surfaceLeaveHandler = this._surfaceLeave.bind(this);\n            this._mouseleaveHandler = this._mouseleave.bind(this);\n            this._mousemoveHandler = this._mousemove.bind(this);\n            this.surface.bind(\"click\", this._showHandler);\n            this.surface.bind(\"mouseenter\", this._showHandler);\n            this.surface.bind(\"mouseleave\", this._mouseleaveHandler);\n            this.surface.bind(\"mousemove\", this._mousemoveHandler);\n            this.surface.element.on(\"mouseleave\" + NS, this._surfaceLeaveHandler);\n            this.element.on(\"click\" + NS, \".k-tooltip-button\", this._hideClick.bind(this));\n            this.element.on(\"mouseleave\" + NS, this._tooltipLeave.bind(this));\n          },\n          getPopup: function () {\n            if (!this.popup) {\n              this.popup = new kendo.ui.Popup(this.element, this.popupOptions);\n            }\n\n            return this.popup;\n          },\n          destroy: function () {\n            var popup = this.popup;\n            this.surface.unbind(\"click\", this._showHandler);\n            this.surface.unbind(\"mouseenter\", this._showHandler);\n            this.surface.unbind(\"mouseleave\", this._mouseleaveHandler);\n            this.surface.unbind(\"mousemove\", this._mousemoveHandler);\n            this.surface.element.off(\"mouseleave\" + NS, this._surfaceLeaveHandler);\n            this.element.off(\"click\" + NS);\n            this.element.off(\"mouseleave\" + NS);\n\n            if (popup) {\n              popup.destroy();\n              delete this.popup;\n            }\n\n            delete this.popupOptions;\n            clearTimeout(this._timeout);\n            delete this.element;\n            delete this.content;\n            delete this.surface;\n          },\n          _tooltipOptions: function (options) {\n            options = options || {};\n            return {\n              position: options.position,\n              showOn: options.showOn,\n              offset: options.offset,\n              autoHide: options.autoHide,\n              width: options.width,\n              height: options.height,\n              content: options.content,\n              shared: options.shared,\n              hideDelay: options.hideDelay,\n              showAfter: options.showAfter\n            };\n          },\n          _tooltipShape: function (shape) {\n            while (shape && !shape.options.tooltip) {\n              shape = shape.parent;\n            }\n\n            return shape;\n          },\n          _updateContent: function (target, shape, options) {\n            var content = options.content;\n\n            if (kendo.isFunction(content)) {\n              content = content({\n                element: shape,\n                target: target\n              });\n            }\n\n            if (content) {\n              this.content.html(content);\n              return true;\n            }\n          },\n          _position: function (shape, options, elementSize, event) {\n            var position = options.position;\n            var tooltipOffset = options.offset || 0;\n            var surface = this.surface;\n\n            var offset = surface._instance._elementOffset();\n\n            var size = surface.getSize();\n            var surfaceOffset = surface._instance._offset;\n            var bbox = shape.bbox();\n            var width = elementSize.width;\n            var height = elementSize.height;\n            var left = 0,\n                top = 0;\n            bbox.origin.translate(offset.left, offset.top);\n\n            if (surfaceOffset) {\n              bbox.origin.translate(-surfaceOffset.x, -surfaceOffset.y);\n            }\n\n            if (position == \"cursor\" && event) {\n              var coord = eventCoordinates(event);\n              left = coord.x - width / 2;\n              top = coord.y - height - tooltipOffset;\n            } else if (position == \"left\") {\n              left = bbox.origin.x - width - tooltipOffset;\n              top = bbox.center().y - height / 2;\n            } else if (position == \"right\") {\n              left = bbox.bottomRight().x + tooltipOffset;\n              top = bbox.center().y - height / 2;\n            } else if (position == \"bottom\") {\n              left = bbox.center().x - width / 2;\n              top = bbox.bottomRight().y + tooltipOffset;\n            } else {\n              left = bbox.center().x - width / 2;\n              top = bbox.origin.y - height - tooltipOffset;\n            }\n\n            return {\n              left: limitValue(left, offset.left, offset.left + size.width),\n              top: limitValue(top, offset.top, offset.top + size.height)\n            };\n          },\n          show: function (shape, options) {\n            this._show(shape, shape, deepExtend({}, this.options, this._tooltipOptions(shape.options.tooltip), options));\n          },\n          hide: function () {\n            var popup = this.popup;\n            var current = this._current;\n            delete this._current;\n            clearTimeout(this._showTimeout);\n\n            if (popup && popup.visible() && current && !this.surface.trigger(\"tooltipClose\", {\n              element: current.shape,\n              target: current.target,\n              popup: popup\n            })) {\n              popup.close();\n            }\n          },\n          _hideClick: function (e) {\n            e.preventDefault();\n            this.hide();\n          },\n          _show: function (target, shape, options, event, delay) {\n            var current = this._current;\n            clearTimeout(this._timeout);\n\n            if (current && (current.shape === shape && options.shared || current.target === target)) {\n              return;\n            }\n\n            clearTimeout(this._showTimeout);\n            var popup = this.getPopup();\n\n            if (!this.surface.trigger(\"tooltipOpen\", {\n              element: shape,\n              target: target,\n              popup: popup\n            }) && this._updateContent(target, shape, options)) {\n              this._autoHide(options);\n\n              var elementSize = this._measure(options);\n\n              if (popup.visible()) {\n                popup.close(true);\n              }\n\n              this._current = {\n                options: options,\n                elementSize: elementSize,\n                shape: shape,\n                target: target,\n                position: this._position(options.shared ? shape : target, options, elementSize, event)\n              };\n\n              if (delay) {\n                this._showTimeout = setTimeout(this._openPopupHandler, options.showAfter || 0);\n              } else {\n                this._openPopup();\n              }\n            }\n          },\n          _openPopup: function () {\n            var current = this._current;\n            var position = current.position;\n            this.getPopup().open(position.left, position.top);\n          },\n          _autoHide: function (options) {\n            if (options.autoHide && this._closeButton) {\n              this.element.removeClass(\"k-tooltip-closable\");\n\n              this._closeButton.remove();\n\n              delete this._closeButton;\n            }\n\n            if (!options.autoHide && !this._closeButton) {\n              this.element.addClass(\"k-tooltip-closable\");\n              this._closeButton = $(TOOLTIP_CLOSE_TEMPLATE).appendTo(this.element);\n            }\n          },\n          _showEvent: function (e) {\n            var shape = this._tooltipShape(e.element);\n\n            if (shape) {\n              var options = deepExtend({}, this.options, this._tooltipOptions(shape.options.tooltip));\n\n              if (options && options.showOn == e.type) {\n                this._show(e.element, shape, options, e.originalEvent, true);\n              }\n            }\n          },\n          _measure: function (options) {\n            var popup = this.getPopup();\n            var width, height;\n            this.element.css({\n              width: \"auto\",\n              height: \"auto\"\n            });\n            var visible = popup.visible();\n\n            if (!visible) {\n              popup.wrapper.show();\n            }\n\n            this.element.css({\n              width: defined(options.width) ? options.width : \"auto\",\n              height: defined(options.height) ? options.height : \"auto\"\n            });\n            width = outerWidth(this.element);\n            height = outerHeight(this.element);\n\n            if (!visible) {\n              popup.wrapper.hide();\n            }\n\n            return {\n              width: width,\n              height: height\n            };\n          },\n          _mouseleave: function (e) {\n            if (this.popup && !this._popupRelatedTarget(e.originalEvent)) {\n              var tooltip = this;\n              var current = tooltip._current;\n\n              if (current && current.options.autoHide) {\n                tooltip._timeout = setTimeout(function () {\n                  clearTimeout(tooltip._showTimeout);\n                  tooltip.hide();\n                }, current.options.hideDelay || 0);\n              }\n            }\n          },\n          _mousemove: function (e) {\n            var current = this._current;\n\n            if (current && e.element) {\n              var options = current.options;\n\n              if (options.position == \"cursor\") {\n                var position = this._position(e.element, options, current.elementSize, e.originalEvent);\n\n                current.position = position;\n                this.getPopup().wrapper.css({\n                  left: position.left,\n                  top: position.top\n                });\n              }\n            }\n          },\n          _surfaceLeave: function (e) {\n            if (this.popup && !this._popupRelatedTarget(e)) {\n              clearTimeout(this._showTimeout);\n              this.hide();\n            }\n          },\n          _popupRelatedTarget: function (e) {\n            return e.relatedTarget && $(e.relatedTarget).closest(this.popup.wrapper).length;\n          },\n          _tooltipLeave: function () {\n            var tooltip = this;\n            var current = tooltip._current;\n\n            if (current && current.options.autoHide) {\n              tooltip._timeout = setTimeout(function () {\n                tooltip.hide();\n              }, current.options.hideDelay || 0);\n            }\n          }\n        });\n        kendo.drawing.SurfaceTooltip = SurfaceTooltip;\n      })(window.kendo.jQuery);\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  962:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.popup\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}