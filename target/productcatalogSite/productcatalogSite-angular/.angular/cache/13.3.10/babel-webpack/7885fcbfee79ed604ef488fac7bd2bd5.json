{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1396);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1058:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.dom\");\n    /***/\n  },\n\n  /***/\n  1213:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.html.chip\");\n    /***/\n  },\n\n  /***/\n  1214:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.html.chiplist\");\n    /***/\n  },\n\n  /***/\n  1396:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1058), __webpack_require__(1213), __webpack_require__(1214), __webpack_require__(1397)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"pivot.configurator\",\n        name: \"PivotConfigurator\",\n        category: \"web\",\n        depends: [\"dropdownlist\", \"treeview\", \"treeview.draganddrop\", \"pivot.fieldmenu\", \"html.chip\", \"html.chiplist\", \"pivot.common\"],\n        hidden: true\n      };\n      /*jshint eqnull: true, laxbreak:true */\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            Widget = ui.Widget,\n            common = window.kendo.pivotgrid.common,\n            fetchDiscover = common.fetchDiscover,\n            configuratorReducer = common.configuratorReducer,\n            PIVOT_CONFIGURATOR_ACTION = common.PIVOT_CONFIGURATOR_ACTION,\n            ns = \".kendoPivotConfigurator\",\n            HOVER_EVENTS = \"mouseenter\" + ns + \" mouseleave\" + ns,\n            SETTINGS_TEMPLATE = kendo.template('<div class=\"k-pivotgrid-configurator-header\">' + '<div class=\"k-pivotgrid-configurator-header-text\">#:title#</div>' + '</div>'),\n            CONTENT_TEMPLATE = kendo.template('<div class=\"k-pivotgrid-configurator-content\">' + '<form class=\"#:formClass#\">' + '#if (horizontal) {# <div class=\"k-form-field-wrapper\"> #}#' + '<div class=\"k-form-field\">' + '<label class=\"k-label\">Fields</label>' + '</div>' + '<div class=\"k-form-field\">' + '<div class=\"k-fields-list-wrapper\"></div>' + '</div>' + '#if (horizontal) {# </div><div class=\"k-form-field-wrapper\"> #}#' + '<div class=\"k-form-field\">' + '<label class=\"k-label\">Columns</label>' + '</div>' + '<div class=\"k-chip-list k-column-fields\"></div>' + '<div class=\"k-form-field\">' + '<label class=\"k-label\">Rows</label>' + '</div>' + '<div class=\"k-chip-list k-row-fields\"></div>' + '#if (horizontal) {# </div><div class=\"k-form-field-wrapper\"> #}#' + '<div class=\"k-form-field\">' + '<label class=\"k-label\">Values</label>' + '</div>' + '<div class=\"k-chip-list k-column-fields\"></div>' + '#if (horizontal) {# </div> #}#' + '</form>' + '</div>'),\n            TARGET_ITEM_TEMPLATE = '<span>' + '<span class=\"k-chip-label\">#:name#</span>' + '#if (menuenabled) {# <span class=\"k-icon k-i-more-vertical\"></span> #}#' + '</span>',\n            ACTIONS_TEMPLATE = kendo.template('<div class=\"k-pivotgrid-configurator-actions k-actions k-hstack k-justify-content-end\">' + '<button class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base\">' + '<span class=\"k-button-text\">#:cancelText#</span>' + '</button>' + '<button class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary\">' + '<span class=\"k-button-text\">#:applyText#</span>' + '</button>' + '</div>'),\n            SETTING_CONTAINER_TEMPLATE = kendo.template('<div class=\"k-pivotgrid-target k-pivotgrid-configurator-section\"><strong>${name}</strong><div class=\"k-pivotgrid-target-wrap\"></div>');\n\n        function addKPI(data) {\n          var found;\n          var idx = 0;\n          var length = data.length;\n\n          for (; idx < length; idx++) {\n            if (data[idx].type == 2) {\n              found = true;\n              break;\n            }\n          }\n\n          if (found) {\n            data.splice(idx + 1, 0, {\n              caption: \"KPIs\",\n              defaultHierarchy: \"[KPIs]\",\n              name: \"KPIs\",\n              uniqueName: \"[KPIs]\"\n            });\n          }\n        }\n\n        function kpiNode(node) {\n          return {\n            name: node.uniqueName,\n            type: node.type\n          };\n        }\n\n        function normalizeKPIs(data) {\n          for (var idx = 0, length = data.length; idx < length; idx++) {\n            data[idx].uniqueName = data[idx].name;\n            data[idx].type = \"kpi\";\n          }\n\n          return data;\n        }\n\n        function settingTargetFromNode(node) {\n          var target = $(node).closest(\".k-pivot-setting\");\n\n          if (target.length) {\n            return target.data(\"kendoPivotSettingTarget\");\n          }\n\n          return null;\n        }\n\n        var PivotConfiguratorV2 = Widget.extend({\n          init: function (element, options) {\n            Widget.fn.init.call(this, element, options);\n            this.element.addClass(\"k-widget k-pivotgrid-configurator k-pos-relative\");\n\n            this._dataSource();\n\n            this._layout();\n\n            this.refresh();\n\n            if (options.height) {\n              this.element.height(options.height);\n            }\n\n            kendo.notify(this);\n          },\n          events: [],\n          options: {\n            name: \"PivotConfiguratorV2\",\n            orientation: \"vertical\",\n            filterable: false,\n            sortable: false,\n            messages: {\n              title: \"Settings\",\n              cancelButtonText: \"Cancel\",\n              applyButtonText: \"Apply\",\n              measures: \"Select some fields to begin setup\",\n              columns: \"Select some fields to begin setup\",\n              rows: \"Select some fields to begin setup\"\n            }\n          },\n          setDataSource: function (dataSource) {\n            this.options.dataSource = dataSource;\n\n            this._dataSource();\n\n            if (this.measures) {\n              this.measures.setDataSource(dataSource);\n            }\n\n            if (this.rows) {\n              this.rows.setDataSource(dataSource);\n            }\n\n            if (this.columns) {\n              this.columns.setDataSource(dataSource);\n            }\n\n            this.refresh();\n          },\n          _dataSource: function () {\n            var that = this;\n\n            if (that.dataSource && that._refreshHandler) {\n              that.dataSource.unbind(\"change\", that._refreshHandler).unbind(\"error\", that._errorHandler).unbind(\"progress\", that._progressHandler);\n            } else {\n              that._errorHandler = that._error.bind(that);\n              that._refreshHandler = that.refresh.bind(that);\n              that._progressHandler = that._requestStart.bind(that);\n            }\n\n            that.dataSource = kendo.data.PivotDataSourceV2.create(that.options.dataSource);\n            that.dataSource.bind(\"change\", that._refreshHandler).bind(\"error\", that._errorHandler).bind(\"progress\", that._progressHandler);\n          },\n          _layout: function () {\n            var that = this;\n            var options = that.options;\n            var messages = options.messages;\n            var horizontal = options.orientation == \"horizontal\";\n            var panel = $(\"<div class='k-pivotgrid-configurator-panel k-pivotgrid-configurator-push'></div>\");\n            panel.addClass(horizontal ? \"k-pivotgrid-configurator-horizontal\" : \"k-pivotgrid-configurator-vertical\");\n            that.element.append(panel);\n            that.panel = panel;\n            $(SETTINGS_TEMPLATE({\n              title: this.options.messages.title\n            })).appendTo(that.panel);\n            $(CONTENT_TEMPLATE({\n              formClass: horizontal ? \"k-form k-form-horizontal\" : \"k-form\",\n              filterable: options.filterable,\n              horizontal: horizontal\n            })).appendTo(that.panel).find(\".k-chip-list\").each(function (index, elm) {\n              kendo.html.renderChipList(elm, $.extend({}, options));\n            });\n\n            that._fields();\n\n            $(ACTIONS_TEMPLATE({\n              cancelText: messages.cancelButtonText,\n              applyText: messages.applyButtonText\n            })).appendTo(that.panel);\n\n            that._targets();\n\n            that.element.on(\"click\" + ns, \".k-pivotgrid-configurator-actions > button\", that._actions.bind(that));\n          },\n          _actions: function (e) {\n            e.preventDefault();\n            var target = $(e.currentTarget);\n\n            if (target.index()) {\n              this.columns._applyState();\n\n              this.rows._applyState();\n\n              this.measures._applyState();\n\n              this.dataSource.read();\n            } else {\n              this.columns._cancelChanges();\n\n              this.rows._cancelChanges();\n\n              this.measures._cancelChanges();\n\n              this.treeView.dataSource.read();\n            }\n          },\n          _targets: function () {\n            var that = this;\n            var columns = that.panel.find(\".k-column-fields\").first();\n            var rows = that.panel.find(\".k-row-fields\");\n            var measures = that.panel.find(\".k-chip-list\").last();\n            var options = this.options;\n            var targetItemTemplate = kendo.html.renderChip(TARGET_ITEM_TEMPLATE, $.extend({}, options, {\n              fillMode: \"solid\",\n              themeColor: \"base\",\n              rounded: \"full\",\n              removable: true,\n              removeIcon: \"close-circle\"\n            }));\n            this.columns = this._createTarget(columns, {\n              filterable: options.filterable,\n              sortable: options.sortable,\n              template: targetItemTemplate,\n              connectWith: rows,\n              messages: {\n                empty: options.messages.columns\n              }\n            });\n            this.rows = this._createTarget(rows, {\n              filterable: options.filterable,\n              sortable: options.sortable,\n              template: targetItemTemplate,\n              setting: \"rows\",\n              connectWith: columns,\n              messages: {\n                empty: this.options.messages.rows\n              }\n            });\n            this.measures = this._createTarget(measures, {\n              setting: \"measures\",\n              template: targetItemTemplate,\n              messages: {\n                empty: options.messages.measures\n              }\n            });\n          },\n          _createTarget: function (element, options) {\n            var that = this;\n            return new kendo.ui.PivotSettingTargetV2(element, $.extend({\n              dataSource: this.dataSource,\n              hint: function (element) {\n                return element.clone();\n              },\n              remove: function (e) {\n                var item = that.treeView.wrapper.find(\"[data-name='\" + e.name + \"']\").closest(\"li\");\n                var id = item.attr(kendo.attr(\"uid\"));\n                var dataItem = that.treeView.dataSource.getByUid(id);\n\n                if (dataItem) {\n                  dataItem.checked = false;\n                  item.find(\"input\").attr(\"checked\", false);\n                }\n              },\n              template: options.template\n            }, options));\n          },\n          _fields: function () {\n            var that = this;\n            var container = that.element.find(\".k-fields-list-wrapper\");\n            this.treeView = $(\"<div/>\").appendTo(container).kendoTreeView({\n              checkboxes: {\n                checkChildren: true,\n                template: '#if ((item.hasChildren || item.aggregator) && item.uniqueName !== \"[KPIs]\" && item.uniqueName !== \"[Measures]\") {# <input type=\"checkbox\" data-name=\"#:item.uniqueName#\" #= item.checked ? \"checked\" : \"\" # class=\"k-checkbox k-checkbox-md k-rounded-md\" id=\"#:item.uid#\" tabindex=\"-1\"> #}#'\n              },\n              dataTextField: \"caption\",\n              autoBind: false,\n              check: function (e) {\n                var dataItem = e.sender.dataItem(e.node);\n                var action = {\n                  type: PIVOT_CONFIGURATOR_ACTION.toggleSelection,\n                  payload: dataItem\n                };\n                var state = {\n                  columnAxes: that.columns._state(),\n                  rowAxes: that.rows._state(),\n                  measureAxes: that.measures._state()\n                };\n                var result = configuratorReducer(state, action);\n\n                if (dataItem.defaultHierarchy && dataItem.items.length) {\n                  that._checkMembers([{\n                    name: dataItem.defaultHierarchy\n                  }], dataItem.items);\n\n                  dataItem.items.trigger(\"change\");\n                }\n\n                if (result.columnAxes) {\n                  that.columns._state(result.columnAxes);\n\n                  that.columns._redraw();\n                }\n\n                if (result.rowAxes) {\n                  that.rows._state(result.rowAxes);\n\n                  that.rows._redraw();\n                }\n\n                if (result.measureAxes) {\n                  that.measures._state(result.measureAxes);\n\n                  that.measures._redraw();\n                }\n              },\n              dataSource: this._treeViewDataSource()\n            }).data(\"kendoTreeView\");\n            this.treeView.wrapper.off(\"click\", this.treeView._clickHandler);\n          },\n          _treeViewDataSource: function () {\n            var that = this;\n            return kendo.data.HierarchicalDataSource.create({\n              schema: {\n                model: {\n                  id: \"uniqueName\",\n                  hasChildren: function (item) {\n                    return !(\"hierarchyUniqueName\" in item) && !(\"aggregator\" in item);\n                  }\n                }\n              },\n              transport: {\n                read: function (options) {\n                  var node;\n                  var transport = that.dataSource.transport;\n                  var catalog = transport.catalog();\n                  var cube = transport.cube();\n                  var fetchOptions = {\n                    url: transport.options.read\n                  };\n\n                  var columns = that.columns._state();\n\n                  var rows = that.rows._state();\n\n                  var measures = that.measures._state();\n\n                  var members = columns.concat(rows).concat(measures);\n\n                  if ($.isEmptyObject(options.data)) {\n                    var fetchOpts = {\n                      connection: {\n                        catalog: catalog,\n                        cube: cube\n                      },\n                      restrictions: {\n                        catalogName: catalog,\n                        cubeName: cube\n                      },\n                      command: 'schemaDimensions'\n                    };\n                    fetchDiscover(fetchOptions, fetchOpts).then(function (newFields) {\n                      that._checkMembers(members, newFields);\n\n                      addKPI(newFields);\n                      options.success(newFields);\n                    });\n                  } else {\n                    //Hack to get the actual node as the HierarchicalDataSource does not support passing it\n                    node = that.treeView.dataSource.get(options.data.uniqueName);\n\n                    if (node.uniqueName === \"[KPIs]\") {\n                      fetchDiscover(fetchOptions, that._getKPIOptions(catalog, cube)).then(function (newFields) {\n                        options.success(normalizeKPIs(newFields));\n                      });\n                    } else if (node.type == \"kpi\") {\n                      options.success(buildKPImeasures(node));\n                    } else {\n                      fetchDiscover(fetchOptions, that._loadFieldsCommand(node, catalog, cube)).then(function (newFields) {\n                        that._checkMembers(members, newFields);\n\n                        options.success(newFields);\n                      });\n                    }\n                  }\n                }\n              }\n            });\n          },\n          _checkMembers: function (members, newData) {\n            var hash = {};\n            var index = 0;\n\n            for (index = 0; index < members.length; index++) {\n              hash[members[index].name] = true;\n            }\n\n            for (index = 0; index < newData.length; index++) {\n              if (hash[newData[index].uniqueName]) {\n                newData[index].checked = true;\n              }\n            }\n          },\n          _getKPIOptions: function (catalog, cube) {\n            return {\n              connection: {\n                catalog: catalog,\n                cube: cube\n              },\n              restrictions: {\n                catalogName: catalog,\n                cubeName: cube\n              },\n              command: 'schemaKPIs'\n            };\n          },\n          _loadFieldsCommand: function (field, catalog, cube) {\n            var command;\n            var dimensionUniqueName;\n            var hierarchyUniqueName;\n\n            if (field.type === 2) {\n              command = 'schemaMeasures';\n            } else if (field.dimensionUniqueName) {\n              command = 'schemaLevels';\n              hierarchyUniqueName = field.uniqueName;\n            } else {\n              command = 'schemaHierarchies';\n              dimensionUniqueName = field.uniqueName;\n            }\n\n            var options = {\n              connection: {\n                catalog: catalog,\n                cube: cube\n              },\n              restrictions: {\n                catalogName: catalog,\n                cubeName: cube,\n                hierarchyUniqueName: hierarchyUniqueName,\n                dimensionUniqueName: dimensionUniqueName\n              },\n              command: command\n            };\n            return options;\n          },\n          _progress: function (toggle) {\n            kendo.ui.progress(this.element, toggle);\n          },\n          _error: function () {\n            this._progress(false);\n          },\n          _requestStart: function () {\n            this._progress(true);\n          },\n          destroy: function () {\n            Widget.fn.destroy.call(this);\n            this.dataSource.unbind(\"change\", this._refreshHandler);\n            this.element.off(ns);\n            this.rows.destroy();\n            this.columns.destroy();\n            this.measures.destroy();\n            this.treeView.destroy();\n            this.element = null;\n            this._refreshHandler = null;\n          },\n          refresh: function () {\n            if (this.treeView) {\n              this.treeView.dataSource.fetch();\n            }\n\n            this._progress(false);\n          }\n        });\n        ui.plugin(PivotConfiguratorV2);\n        var PivotConfigurator = Widget.extend({\n          init: function (element, options) {\n            Widget.fn.init.call(this, element, options);\n            this.element.addClass(\"k-pivotgrid-configurator-panel kendo-jquery\");\n\n            if (this.options.height) {\n              this.element.outerHeight(this.options.height);\n            }\n\n            this._dataSource();\n\n            this._layout();\n\n            this.refresh();\n            kendo.notify(this);\n          },\n          events: [],\n          options: {\n            name: \"PivotConfigurator\",\n            filterable: false,\n            sortable: false,\n            messages: {\n              measures: \"Drop Data Fields Here\",\n              columns: \"Drop Column Fields Here\",\n              rows: \"Drop Rows Fields Here\",\n              measuresLabel: \"Measures\",\n              columnsLabel: \"Columns\",\n              rowsLabel: \"Rows\",\n              fieldsLabel: \"Fields\"\n            }\n          },\n          _dataSource: function () {\n            var that = this;\n\n            if (that.dataSource && that._refreshHandler) {\n              that.dataSource.unbind(\"change\", that._refreshHandler).unbind(\"error\", that._errorHandler).unbind(\"progress\", that._progressHandler);\n            } else {\n              that._errorHandler = that._error.bind(that);\n              that._refreshHandler = that.refresh.bind(that);\n              that._progressHandler = that._requestStart.bind(that);\n            }\n\n            that.dataSource = kendo.data.PivotDataSource.create(that.options.dataSource);\n            that.dataSource.bind(\"change\", that._refreshHandler).bind(\"error\", that._errorHandler).bind(\"progress\", that._progressHandler);\n          },\n          setDataSource: function (dataSource) {\n            this.options.dataSource = dataSource;\n\n            this._dataSource();\n\n            if (this.measures) {\n              this.measures.setDataSource(dataSource);\n            }\n\n            if (this.rows) {\n              this.rows.setDataSource(dataSource);\n            }\n\n            if (this.columns) {\n              this.columns.setDataSource(dataSource);\n            }\n\n            this.refresh();\n          },\n          _treeViewDataSource: function () {\n            var that = this;\n            return kendo.data.HierarchicalDataSource.create({\n              schema: {\n                model: {\n                  id: \"uniqueName\",\n                  hasChildren: function (item) {\n                    return !(\"hierarchyUniqueName\" in item) && !(\"aggregator\" in item);\n                  }\n                }\n              },\n              transport: {\n                read: function (options) {\n                  var promise;\n                  var node;\n                  var kpi;\n\n                  if ($.isEmptyObject(options.data)) {\n                    promise = that.dataSource.schemaDimensions();\n                    promise.done(function (data) {\n                      if (!that.dataSource.cubeBuilder) {\n                        addKPI(data);\n                      }\n\n                      options.success(data);\n                    }).fail(options.error);\n                  } else {\n                    //Hack to get the actual node as the HierarchicalDataSource does not support passing it\n                    node = that.treeView.dataSource.get(options.data.uniqueName);\n\n                    if (node.uniqueName === \"[KPIs]\") {\n                      kpi = true;\n                      promise = that.dataSource.schemaKPIs();\n                      promise.done(function (data) {\n                        options.success(normalizeKPIs(data));\n                      }).fail(options.error);\n                    } else if (node.type == \"kpi\") {\n                      kpi = true;\n                      options.success(buildKPImeasures(node));\n                    }\n\n                    if (!kpi) {\n                      if (node.type == 2) {\n                        //measure\n                        promise = that.dataSource.schemaMeasures();\n                      } else if (node.dimensionUniqueName) {\n                        // hierarchy\n                        promise = that.dataSource.schemaLevels(options.data.uniqueName);\n                      } else {\n                        // dimension\n                        promise = that.dataSource.schemaHierarchies(options.data.uniqueName);\n                      }\n\n                      promise.done(options.success).fail(options.error);\n                    }\n                  }\n                }\n              }\n            });\n          },\n          _progress: function (toggle) {\n            kendo.ui.progress(this.element, toggle);\n          },\n          _error: function () {\n            this._progress(false);\n          },\n          _requestStart: function () {\n            this._progress(true);\n          },\n          _layout: function () {\n            $('<div class=\"k-pivotgrid-configurator\"><div class=\"k-pivotgrid-configurator-content\"></div></div>').appendTo(this.element);\n            this.form = this.element.find('.k-pivotgrid-configurator-content');\n\n            this._fields();\n\n            this._targets();\n          },\n          _fields: function () {\n            var container = $('<div class=\"k-pivotgrid-fields k-pivotgrid-configurator-section\"><strong>' + this.options.messages.fieldsLabel + '</strong><div class=\"k-fields-list-wrapper\"></div></div>').appendTo(this.form);\n            var template = '# if (item.type == 2 || item.uniqueName == \"[KPIs]\") { #' + '<span class=\"k-icon k-i-#= (item.type == 2 ? \\\"sum\\\" : \\\"kpi\\\") #\"></span>' + '# } else if (item.type && item.type !== \"kpi\") { #' + '<span class=\"k-icon k-i-arrows-dimensions\"></span>' + '# } #' + '#: item.caption || item.name #';\n            this.treeView = $(\"<div/>\").appendTo(container.find('.k-fields-list-wrapper')).kendoTreeView({\n              template: template,\n              dataTextField: \"caption\",\n              dragAndDrop: true,\n              autoBind: false,\n              dataSource: this._treeViewDataSource(),\n              dragstart: function (e) {\n                var dataItem = this.dataItem(e.sourceNode);\n\n                if (!dataItem.hasChildren && !dataItem.aggregator && !dataItem.measure || dataItem.type == 2 || dataItem.uniqueName === \"[KPIs]\") {\n                  e.preventDefault();\n                }\n              },\n              drag: function (e) {\n                var status = \"k-i-cancel\";\n                var setting = settingTargetFromNode(e.dropTarget);\n\n                if (setting && setting.validate(this.dataItem(e.sourceNode))) {\n                  status = \"k-i-plus\";\n                }\n\n                e.setStatusClass(status);\n              },\n              drop: function (e) {\n                e.preventDefault();\n                var setting = settingTargetFromNode(e.dropTarget);\n                var node = this.dataItem(e.sourceNode);\n                var idx, length, measures;\n                var name;\n\n                if (setting && setting.validate(node)) {\n                  name = node.defaultHierarchy || node.uniqueName;\n\n                  if (node.type === \"kpi\") {\n                    measures = buildKPImeasures(node);\n                    length = measures.length;\n                    name = [];\n\n                    for (idx = 0; idx < length; idx++) {\n                      name.push(kpiNode(measures[idx]));\n                    }\n                  } else if (node.kpi) {\n                    name = [kpiNode(node)];\n                  }\n\n                  setting.add(name);\n                }\n              }\n            }).data(\"kendoTreeView\");\n          },\n          _createTarget: function (element, options) {\n            var template = '';\n            var sortable = options.sortable;\n            var icons = '';\n\n            if (sortable) {\n              icons += '#if (data.sortIcon) {#';\n              icons += '<span class=\"k-chip-action\"><span class=\"k-icon ${data.sortIcon}-sm\"></span></span>';\n              icons += '#}#';\n            }\n\n            if (options.filterable || sortable) {\n              icons += '<span class=\"k-setting-fieldmenu k-chip-action\"><span class=\"k-icon k-i-more-vertical\"></span></span>';\n            }\n\n            icons += '<span class=\"k-setting-delete k-chip-action\"><span class=\"k-icon k-i-close\"></span></span>';\n            template = '' + '<span class=\"k-chip k-chip-md k-rounded-full k-chip-solid k-chip-solid-base\" data-' + kendo.ns + 'name=\"${data.name}\">' + '<span class=\"k-chip-content\">' + '<span class=\"k-chip-text\">${data.name}</span>' + '</span>' + '<span class=\"k-chip-actions k-field-actions\">' + icons + '</span>' + '</span>';\n            return new kendo.ui.PivotSettingTarget(element, $.extend({\n              dataSource: this.dataSource,\n              template: template,\n              emptyTemplate: '<span class=\"k-empty\">${data}</span>'\n            }, options));\n          },\n          _targets: function () {\n            var container = $('<div class=\"k-pivotgrid-targets\"/>').appendTo(this.form);\n            var columnsContainer = $(SETTING_CONTAINER_TEMPLATE({\n              name: this.options.messages.columnsLabel,\n              icon: \"k-i-columns\"\n            })).appendTo(container);\n            var columns = $('<div class=\"k-column-fields k-chip-list\" />').appendTo(columnsContainer.find('.k-pivotgrid-target-wrap'));\n            var rowsContainer = $(SETTING_CONTAINER_TEMPLATE({\n              name: this.options.messages.rowsLabel,\n              icon: \"k-i-rows\"\n            })).appendTo(container);\n            var rows = $('<div class=\"k-column-fields k-chip-list\" />').appendTo(rowsContainer.find('.k-pivotgrid-target-wrap'));\n            var measuresContainer = $(SETTING_CONTAINER_TEMPLATE({\n              name: this.options.messages.measuresLabel,\n              icon: \"k-i-sum\"\n            })).appendTo(container);\n            var measures = $('<div class=\"k-column-fields k-chip-list\" />').appendTo(measuresContainer.find('.k-pivotgrid-target-wrap'));\n            var options = this.options;\n            this.columns = this._createTarget(columns, {\n              filterable: options.filterable,\n              sortable: options.sortable,\n              connectWith: rows,\n              messages: {\n                empty: options.messages.columns,\n                fieldMenu: options.messages.fieldMenu\n              }\n            });\n            this.rows = this._createTarget(rows, {\n              filterable: options.filterable,\n              sortable: options.sortable,\n              setting: \"rows\",\n              connectWith: columns,\n              messages: {\n                empty: this.options.messages.rows,\n                fieldMenu: this.options.messages.fieldMenu\n              }\n            });\n            this.measures = this._createTarget(measures, {\n              setting: \"measures\",\n              messages: {\n                empty: options.messages.measures\n              }\n            });\n            columns.add(rows).add(measures).on(HOVER_EVENTS, \".k-item:not(.k-empty)\", this._toggleHover);\n          },\n          _toggleHover: function (e) {\n            $(e.currentTarget).toggleClass(\"k-state-hover\", e.type === \"mouseenter\");\n          },\n          _resize: function () {\n            var element = this.element;\n            var height = this.options.height;\n\n            if (!height) {\n              return;\n            }\n\n            element.outerHeight(height);\n          },\n          refresh: function () {\n            var dataSource = this.dataSource;\n\n            if (dataSource.cubeBuilder || this._cube !== dataSource.cube() || this._catalog !== dataSource.catalog()) {\n              this.treeView.dataSource.fetch();\n            }\n\n            this._catalog = this.dataSource.catalog();\n            this._cube = this.dataSource.cube();\n\n            this._resize();\n\n            this._progress(false);\n          },\n          destroy: function () {\n            Widget.fn.destroy.call(this);\n            this.dataSource.unbind(\"change\", this._refreshHandler);\n            this.form.find(\".k-pivot-setting\").off(ns);\n            this.rows.destroy();\n            this.columns.destroy();\n            this.measures.destroy();\n            this.treeView.destroy();\n            this.element = null;\n            this._refreshHandler = null;\n          }\n        });\n\n        function kpiMeasure(name, measure, type) {\n          return {\n            hierarchyUniqueName: name,\n            uniqueName: measure,\n            caption: measure,\n            measure: measure,\n            name: measure,\n            type: type,\n            kpi: true\n          };\n        }\n\n        function buildKPImeasures(node) {\n          var name = node.name;\n          return [kpiMeasure(name, node.value, \"value\"), kpiMeasure(name, node.goal, \"goal\"), kpiMeasure(name, node.status, \"status\"), kpiMeasure(name, node.trend, \"trend\")];\n        }\n\n        kendo.cssProperties.registerPrefix(\"HTMLChip\", \"k-chip-\");\n        kendo.cssProperties.registerValues(\"HTMLChip\", [{\n          prop: \"rounded\",\n          values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n        }]);\n        ui.plugin(PivotConfigurator);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1397:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.pivot.common\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}