{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { DirtyCache, DirtyModel, DirtyProperty } from '../../Core';\nimport { ErrorCodes, ExceptionHandlerClass } from '../../System/Aop';\n\nvar DirtyCacheV5 = function (_super) {\n  __extends(DirtyCacheV5, _super);\n\n  function DirtyCacheV5() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DirtyCacheV5.prototype.change = function (model, property) {\n    var _this = this;\n\n    if (property && model.UniqueID && !model.isCoreSynchronizing()) {\n      if (this.items.some(function (item) {\n        return item.name === model.UniqueID;\n      })) {\n        this.items.filter(function (item) {\n          return item.name === model.UniqueID;\n        }).forEach(function (item) {\n          item.properties.push(new DirtyProperty(_this.getPropertyName(property), _this.getPropertyValue(model, property)));\n        });\n      } else {\n        var dirty = new DirtyModel(model.UniqueID, new Array(new DirtyProperty(this.getPropertyName(property), this.getPropertyValue(model, property))));\n        dirty.mapperId = model.mapperId;\n        this.items.push(dirty);\n      }\n    }\n  };\n\n  DirtyCacheV5.prototype.getChanges = function () {\n    var changed = [];\n\n    while (this.items.length > 0) {\n      var currentItem = this.items.shift();\n      var itemProperties = currentItem.toReduce();\n      itemProperties.Id = currentItem.name;\n      itemProperties.MapperId = currentItem.mapperId;\n      changed.push(itemProperties);\n    }\n\n    return changed;\n  };\n\n  DirtyCacheV5 = __decorate([ExceptionHandlerClass(ErrorCodes.ClientCore)], DirtyCacheV5);\n  return DirtyCacheV5;\n}(DirtyCache);\n\nexport { DirtyCacheV5 }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGlydHlDYWNoZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy92NS9Db3JlL0RpcnR5Q2FjaGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBbUJBLE9BQU8sRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLGFBQWEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNuRSxPQUFPLEVBQUUsVUFBVSxFQUFFLHFCQUFxQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFHckU7SUFBa0MsZ0NBQVU7SUFBNUM7O0lBZ0NBLENBQUM7SUE5QkcsNkJBQU0sR0FBTixVQUFPLEtBQWEsRUFBRSxRQUFnQjtRQUF0QyxpQkFjQztRQVpHLElBQUksUUFBUSxJQUFJLEtBQUssQ0FBQyxRQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsbUJBQW1CLEVBQUUsRUFBRTtZQUM1RCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLENBQUMsUUFBUSxFQUE1QixDQUE0QixDQUFDLEVBQUU7Z0JBQ3ZELElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLENBQUMsUUFBUSxFQUE1QixDQUE0QixDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsSUFBSTtvQkFDaEUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxhQUFhLENBQUMsS0FBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsRUFBRSxLQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDcEgsQ0FBQyxDQUFDLENBQUM7YUFDTjtpQkFBTTtnQkFDSCxJQUFNLEtBQUssR0FBRyxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUN2QyxJQUFJLEtBQUssQ0FBZ0IsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN6SCxLQUFLLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUM7Z0JBQ2hDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzFCO1NBQ0o7SUFDTCxDQUFDO0lBRUQsaUNBQVUsR0FBVjtRQUNJLElBQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNuQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUMxQixJQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ3ZDLElBQU0sY0FBYyxHQUFHLFdBQVcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUU5QyxjQUFjLENBQUMsRUFBRSxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUM7WUFDckMsY0FBYyxDQUFDLFFBQVEsR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDO1lBRS9DLE9BQU8sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7U0FDaEM7UUFFRCxPQUFPLE9BQU8sQ0FBQztJQUNuQixDQUFDO0lBL0JRLFlBQVk7UUFEeEIscUJBQXFCLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQztPQUNoQyxZQUFZLENBZ0N4QjtJQUFELG1CQUFDO0NBQUEsQUFoQ0QsQ0FBa0MsVUFBVSxHQWdDM0M7U0FoQ1ksWUFBWSIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4qIENvcHlyaWdodCAoQykgTW9iaWxpemUuTmV0IDxpbmZvQG1vYmlsaXplLm5ldD4gLSBBbGwgUmlnaHRzIFJlc2VydmVkXHJcbipcclxuKiBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgTW9iaWxpemUgRnJhbWV3b3Jrcywgd2hpY2ggaXNcclxuKiBwcm9wcmlldGFyeSBhbmQgY29uZmlkZW50aWFsLlxyXG4qXHJcbiogTk9USUNFOiAgQWxsIGluZm9ybWF0aW9uIGNvbnRhaW5lZCBoZXJlaW4gaXMsIGFuZCByZW1haW5zXHJcbiogdGhlIHByb3BlcnR5IG9mIE1vYmlsaXplLk5ldCBDb3Jwb3JhdGlvbi5cclxuKiBUaGUgaW50ZWxsZWN0dWFsIGFuZCB0ZWNobmljYWwgY29uY2VwdHMgY29udGFpbmVkIGhlcmVpbiBhcmVcclxuKiBwcm9wcmlldGFyeSB0byBNb2JpbGl6ZS5OZXQgQ29ycG9yYXRpb24gYW5kIG1heSBiZSBjb3ZlcmVkXHJcbiogYnkgVS5TLiBQYXRlbnRzLCBhbmQgYXJlIHByb3RlY3RlZCBieSB0cmFkZSBzZWNyZXQgb3IgY29weXJpZ2h0IGxhdy5cclxuKiBEaXNzZW1pbmF0aW9uIG9mIHRoaXMgaW5mb3JtYXRpb24gb3IgcmVwcm9kdWN0aW9uIG9mIHRoaXMgbWF0ZXJpYWxcclxuKiBpcyBzdHJpY3RseSBmb3JiaWRkZW4gdW5sZXNzIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbiBpcyBvYnRhaW5lZFxyXG4qIGZyb20gTW9iaWxpemUuTmV0IENvcnBvcmF0aW9uLlxyXG4qXHJcbiogVGhpcyBmaWxlIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zIGRlZmluZWQgaW5cclxuKiBmaWxlICdMSUNFTlNFLnR4dCcsIHdoaWNoIGlzIHBhcnQgb2YgdGhpcyBzb3VyY2UgY29kZSBwYWNrYWdlLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuaW1wb3J0IHsgSUNoYW5nZUJ1ZmZlciwgSU1vZGVsIH0gZnJvbSAnLi4vLi4vQ29udHJhY3QnO1xyXG5pbXBvcnQgeyBEaXJ0eUNhY2hlLCBEaXJ0eU1vZGVsLCBEaXJ0eVByb3BlcnR5IH0gZnJvbSAnLi4vLi4vQ29yZSc7XHJcbmltcG9ydCB7IEVycm9yQ29kZXMsIEV4Y2VwdGlvbkhhbmRsZXJDbGFzcyB9IGZyb20gJy4uLy4uL1N5c3RlbS9Bb3AnO1xyXG5cclxuQEV4Y2VwdGlvbkhhbmRsZXJDbGFzcyhFcnJvckNvZGVzLkNsaWVudENvcmUpXHJcbmV4cG9ydCBjbGFzcyBEaXJ0eUNhY2hlVjUgZXh0ZW5kcyBEaXJ0eUNhY2hlIGltcGxlbWVudHMgSUNoYW5nZUJ1ZmZlciB7XHJcblxyXG4gICAgY2hhbmdlKG1vZGVsOiBJTW9kZWwsIHByb3BlcnR5OiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICAvLyBhZGQgb25seSB2YWxpZCBjaGFuZ2VzXHJcbiAgICAgICAgaWYgKHByb3BlcnR5ICYmIG1vZGVsLlVuaXF1ZUlEICYmICFtb2RlbC5pc0NvcmVTeW5jaHJvbml6aW5nKCkpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXRlbXMuc29tZShpdGVtID0+IGl0ZW0ubmFtZSA9PT0gbW9kZWwuVW5pcXVlSUQpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1zLmZpbHRlcihpdGVtID0+IGl0ZW0ubmFtZSA9PT0gbW9kZWwuVW5pcXVlSUQpLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5wcm9wZXJ0aWVzLnB1c2gobmV3IERpcnR5UHJvcGVydHkodGhpcy5nZXRQcm9wZXJ0eU5hbWUocHJvcGVydHkpLCB0aGlzLmdldFByb3BlcnR5VmFsdWUobW9kZWwsIHByb3BlcnR5KSkpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkaXJ0eSA9IG5ldyBEaXJ0eU1vZGVsKG1vZGVsLlVuaXF1ZUlELFxyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBBcnJheTxEaXJ0eVByb3BlcnR5PihuZXcgRGlydHlQcm9wZXJ0eSh0aGlzLmdldFByb3BlcnR5TmFtZShwcm9wZXJ0eSksIHRoaXMuZ2V0UHJvcGVydHlWYWx1ZShtb2RlbCwgcHJvcGVydHkpKSkpO1xyXG4gICAgICAgICAgICAgICAgZGlydHkubWFwcGVySWQgPSBtb2RlbC5tYXBwZXJJZDtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMucHVzaChkaXJ0eSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q2hhbmdlcygpOiBhbnkge1xyXG4gICAgICAgIGNvbnN0IGNoYW5nZWQgPSBbXTtcclxuICAgICAgICB3aGlsZSAodGhpcy5pdGVtcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRJdGVtID0gdGhpcy5pdGVtcy5zaGlmdCgpO1xyXG4gICAgICAgICAgICBjb25zdCBpdGVtUHJvcGVydGllcyA9IGN1cnJlbnRJdGVtLnRvUmVkdWNlKCk7XHJcbiAgICAgICAgICAgIC8vIEFkZCBJZCBhbmQgUHJvamVjdGlvbklkLCB3aGljaCBhcmUgZXhwZWN0ZWQgYnkgdGhlIHNlcnZlci5cclxuICAgICAgICAgICAgaXRlbVByb3BlcnRpZXMuSWQgPSBjdXJyZW50SXRlbS5uYW1lO1xyXG4gICAgICAgICAgICBpdGVtUHJvcGVydGllcy5NYXBwZXJJZCA9IGN1cnJlbnRJdGVtLm1hcHBlcklkO1xyXG5cclxuICAgICAgICAgICAgY2hhbmdlZC5wdXNoKGl0ZW1Qcm9wZXJ0aWVzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjaGFuZ2VkO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==","map":null,"metadata":{},"sourceType":"module"}