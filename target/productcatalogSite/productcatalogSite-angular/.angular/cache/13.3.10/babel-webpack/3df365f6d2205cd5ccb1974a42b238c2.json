{"ast":null,"code":"import { Class } from '../common';\n\nclass Highlight extends Class {\n  constructor() {\n    super();\n    this._points = [];\n  }\n\n  destroy() {\n    this._points = [];\n  }\n\n  show(points, opacity) {\n    const arrayPoints = [].concat(points);\n    this.hide();\n\n    for (let i = 0; i < arrayPoints.length; i++) {\n      const point = arrayPoints[i];\n\n      if (point && point.toggleHighlight && point.hasHighlight()) {\n        this.togglePointHighlight(point, true, opacity);\n\n        this._points.push(point);\n      }\n    }\n  }\n\n  togglePointHighlight(point, show, opacity) {\n    const toggleHandler = (point.options.highlight || {}).toggle;\n\n    if (toggleHandler) {\n      const eventArgs = {\n        category: point.category,\n        series: point.series,\n        dataItem: point.dataItem,\n        value: point.value,\n        stackValue: point.stackValue,\n        preventDefault: preventDefault,\n        visual: point.highlightVisual(),\n        show: show\n      };\n      toggleHandler(eventArgs);\n\n      if (!eventArgs._defaultPrevented) {\n        point.toggleHighlight(show, opacity);\n      }\n    } else {\n      point.toggleHighlight(show, opacity);\n    }\n  }\n\n  hide() {\n    const points = this._points;\n\n    while (points.length) {\n      this.togglePointHighlight(points.pop(), false);\n    }\n  }\n\n  isHighlighted(element) {\n    const points = this._points;\n\n    for (let i = 0; i < points.length; i++) {\n      const point = points[i];\n\n      if (element === point) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}\n\nfunction preventDefault() {\n  this._defaultPrevented = true;\n}\n\nexport default Highlight;","map":null,"metadata":{},"sourceType":"module"}