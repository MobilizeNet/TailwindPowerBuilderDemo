{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(22);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  20:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.core\");\n    /***/\n  },\n\n  /***/\n  22:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(20), __webpack_require__(23)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function ($, undefined) {\n        var kendo = window.kendo;\n        var Widget = kendo.ui.Widget;\n        var extend = $.extend;\n        var DOT = \".\";\n        var SPACE = \" \";\n        var NS = \".kendoChat\";\n        var MESSAGE_GROUP_TEMPLATE = kendo.template('<div #:text# class=\"#=styles.messageGroup# #= url ? \"\" : styles.noAvatar #\">' + '<p class=\"#=styles.author#\">#:text#</p>' + '# if (url) { #' + '<img src=\"#=url#\" alt=\"#:text#\" class=\"#=styles.avatar#\">' + '# } #' + '</div>');\n        var SELF_MESSAGE_GROUP_TEMPLATE = kendo.template('<div me class=\"#=styles.messageGroup# #=styles.self# #= url ? \"\" : styles.noAvatar #\">' + '# if (url) { #' + '<img src=\"#=url#\" alt=\"#:text#\" class=\"#=styles.avatar#\">' + '# } #' + '</div>');\n        var TEXT_MESSAGE_TEMPLATE = kendo.template('<div class=\"#=styles.message#\">' + '<time class=\"#=styles.messageTime#\">#= kendo.toString(kendo.parseDate(timestamp), \"HH:mm:ss\") #</time>' + '<div class=\"#=styles.bubble#\">#:text#</div>' + '</div>');\n        var TYPING_INDICATOR_TEMPLATE = kendo.template('<div class=\"#=styles.messageListContent# #=styles.typingIndicatorBubble#\">' + '<p class=\"#=styles.author#\">#:text#</p>' + '<div class=\"#=styles.message#\">' + '<div class=\"#=styles.bubble#\">' + '<div class=\"#=styles.typingIndicator#\">' + '<span></span><span></span><span></span>' + '</div>' + '</div>' + '</div>' + '</div>');\n        var SUGGESTED_ACTIONS_TEMPLATE = kendo.template('<div class=\"#=styles.suggestedActions#\">' + '# for (var i = 0; i < suggestedActions.length; i++) { #' + '<span role=\"button\" tabindex=\"0\" class=\"#=styles.suggestedAction#\" data-value=\"#:suggestedActions[i].value#\">#:suggestedActions[i].title#</span>' + '# } #' + '</div>');\n        var HERO_CARD_TEMPLATE = kendo.template('<div class=\"#=styles.card# #=styles.cardRich#\">' + '# if (typeof images !== \"undefined\" && images.length > 0) { #' + '<img src=\"#:images[0].url#\" alt=\"#:images[0].alt#\" class=\"#=styles.cardImage#\" />' + '# } #' + '<div class=\"#=styles.cardBody#\">' + '# if (typeof title !== \"undefined\") { #' + '<h5 class=\"#=styles.cardTitle#\">#:title#</h5>' + '# } #' + '# if (typeof subtitle !== \"undefined\") { #' + '<h6 class=\"#=styles.cardSubtitle#\">#:subtitle#</h6>' + '# } #' + '# if (typeof text !== \"undefined\") { #' + '<p>#:text#</p>' + '# } #' + '</div>' + '# if (typeof buttons !== \"undefined\" && buttons.length > 0) { #' + '<div class=\"#=styles.cardActions# #=styles.cardActionsVertical#\">' + '# for (var i = 0; i < buttons.length; i++) { #' + '<span class=\"#=styles.cardAction#\"><span class=\"#=styles.button# #=styles.buttonPrimary#\" data-value=\"#:buttons[i].value#\">#:buttons[i].title#</span></span>' + '# } #' + '</div>' + '# } #' + '</div>');\n        extend(kendo.chat, {\n          Templates: {},\n          Components: {}\n        });\n\n        kendo.chat.registerTemplate = function (templateName, template) {\n          kendo.chat.Templates[templateName] = kendo.template(template);\n        };\n\n        kendo.chat.getTemplate = function (templateName) {\n          return kendo.chat.Templates[templateName] || TEXT_MESSAGE_TEMPLATE;\n        };\n\n        kendo.chat.registerTemplate(\"text\", TEXT_MESSAGE_TEMPLATE);\n        kendo.chat.registerTemplate(\"message\", TEXT_MESSAGE_TEMPLATE);\n        kendo.chat.registerTemplate(\"typing\", TYPING_INDICATOR_TEMPLATE);\n        kendo.chat.registerTemplate(\"suggestedAction\", SUGGESTED_ACTIONS_TEMPLATE);\n        kendo.chat.registerTemplate(\"heroCard\", HERO_CARD_TEMPLATE);\n        kendo.chat.registerTemplate(\"application/vnd.microsoft.card.hero\", HERO_CARD_TEMPLATE);\n\n        kendo.chat.registerComponent = function (componentName, component) {\n          kendo.chat.Components[componentName] = component;\n        };\n\n        kendo.chat.getComponent = function (componentName) {\n          return kendo.chat.Components[componentName] || null;\n        };\n\n        var Component = kendo.chat.Component = kendo.Class.extend({\n          init: function (options, view) {\n            this.element = $('<div></div>');\n            this.options = options;\n            this.view = view;\n          },\n          destroy: function () {\n            kendo.destroy(this.element);\n          }\n        });\n        var Calendar = Component.extend({\n          init: function (options, view) {\n            Component.fn.init.call(this, options, view);\n            this.element.kendoCalendar({\n              change: function () {\n                view.trigger(\"suggestedAction\", {\n                  text: kendo.toString(this.value(), 'd'),\n                  type: \"message\"\n                });\n              }\n            });\n          },\n          destroy: function () {}\n        });\n        kendo.chat.registerComponent(\"calendar\", Calendar);\n        var viewStyles = {\n          wrapper: \"k-widget k-chat\",\n          messageList: \"k-avatars\",\n          messageListContent: \"k-message-list-content\",\n          messageTime: \"k-message-time\",\n          messageGroup: \"k-message-group\",\n          message: \"k-message\",\n          only: \"k-only\",\n          first: \"k-first\",\n          middle: \"k-middle\",\n          last: \"k-last\",\n          author: \"k-author\",\n          avatar: \"k-avatar\",\n          noAvatar: \"k-no-avatar\",\n          self: \"k-alt\",\n          button: \"k-button\",\n          buttonDefaults: \"k-button-md k-rounded-md k-button-solid k-button-solid-base\",\n          iconButton: \"k-icon-button\",\n          buttonIcon: \"k-button-icon\",\n          buttonPrimary: \"k-button-md k-rounded-md k-button-flat k-button-flat-primary\",\n          scrollButtonIcon: \"k-icon\",\n          scrollButtonIconLeft: \"k-i-arrow-chevron-left\",\n          scrollButtonIconRight: \"k-i-arrow-chevron-right\",\n          typingIndicator: \"k-typing-indicator\",\n          typingIndicatorBubble: \"k-typing-indicator-bubble\",\n          bubble: \"k-bubble\",\n          suggestedActions: \"k-quick-replies\",\n          suggestedAction: \"k-quick-reply\",\n          cardWrapper: \"k-card-container\",\n          cardDeckScrollWrap: \"k-card-deck-scrollwrap\",\n          cardDeck: \"k-card-deck\",\n          cardList: \"k-card-list\",\n          card: \"k-card\",\n          cardRich: \"k-card-type-rich\",\n          cardBody: \"k-card-body\",\n          cardImage: \"k-card-image\",\n          cardTitle: \"k-card-title\",\n          cardSubtitle: \"k-card-subtitle\",\n          cardActions: \"k-card-actions\",\n          cardActionsVertical: \"k-card-actions-vertical\",\n          cardAction: \"k-card-action\",\n          selected: \"k-state-selected\"\n        };\n        var ChatView = kendo.chat.ChatView = Widget.extend({\n          init: function (element, options) {\n            Widget.fn.init.call(this, element, options);\n\n            this._list();\n\n            this._lastSender = null;\n            this.typingParticipants = [];\n\n            this._attachEvents();\n\n            this._scrollable();\n          },\n          events: [],\n          options: {\n            messages: {\n              isTyping: \" is typing.\",\n              areTyping: \" are typing.\",\n              and: \" and \"\n            }\n          },\n          destroy: function () {\n            Widget.fn.destroy.call(this);\n\n            if (this._scrollDraggable) {\n              this._scrollDraggable.destroy();\n            }\n\n            this.element.empty();\n            this.element.off(NS);\n            this.list = null;\n            this._lastSender = null;\n          },\n          _list: function () {\n            var viewStyles = ChatView.styles;\n            this.element.addClass(viewStyles.messageList).attr(\"role\", \"log\").attr(\"aria-label\", this.options.messages.messageListLabel);\n            this.list = $(\"<div>\").addClass(viewStyles.messageListContent).appendTo(this.element);\n          },\n          _attachEvents: function () {\n            var styles = ChatView.styles;\n            this.element.on(\"click\" + NS, this._listClick.bind(this)).on(\"click\" + NS, DOT + styles.message, this._messageClick.bind(this)).on(\"click\" + NS, DOT + styles.suggestedAction, this._suggestedActionClick.bind(this)).on(\"click\" + NS, DOT + styles.cardAction + SPACE + DOT + styles.button, this._cardActionClick.bind(this));\n            this.element.on(\"keydown\" + NS, DOT + styles.suggestedAction, this._suggestedActionKeydown.bind(this));\n          },\n          _scrollable: function () {\n            var viewStyles = ChatView.styles;\n            this.element.on(\"click\" + NS, DOT + viewStyles.cardDeckScrollWrap + SPACE + DOT + viewStyles.button, this._scrollButtonClick.bind(this));\n          },\n          _scrollButtonClick: function (e) {\n            var viewStyles = ChatView.styles;\n            var button = $(e.currentTarget);\n            var scrollToLeft = button.find(DOT + viewStyles.scrollButtonIconLeft).length !== 0;\n            var scrollContainer = button.siblings(DOT + viewStyles.cardDeck);\n            var lastCard = scrollContainer.find(DOT + viewStyles.card).last();\n            var cardWidth = lastCard.outerWidth(true);\n\n            if (scrollToLeft) {\n              kendo.scrollLeft(scrollContainer, kendo.scrollLeft(scrollContainer) - cardWidth);\n            } else {\n              kendo.scrollLeft(scrollContainer, kendo.scrollLeft(scrollContainer) + cardWidth);\n            }\n          },\n          getTemplate: function (templateName) {\n            return kendo.chat.getTemplate(templateName);\n          },\n          getComponent: function (type) {\n            return kendo.chat.getComponent(type);\n          },\n          renderMessage: function (message, sender) {\n            if (!message.timestamp) {\n              message.timestamp = new Date();\n            }\n\n            if (!message.text) {\n              message.text = \"\";\n            }\n\n            var bubbleElement = this._renderTemplate(message.type, message);\n\n            this._renderBubble(message.type, bubbleElement, sender);\n\n            if (message.type == \"typing\") {\n              if (this.typingParticipants.length > 0) {\n                this._removeTypingParticipant(sender);\n              }\n            } else {\n              this._lastSender = sender.id;\n            }\n          },\n          renderSuggestedActions: function (suggestedActions) {\n            this._removeSuggestedActions();\n\n            var element = this._renderTemplate(\"suggestedAction\", {\n              suggestedActions: suggestedActions\n            });\n\n            this.list.append(element);\n\n            this._scrollToBottom();\n          },\n          renderAttachments: function (options) {\n            var wrapper = this._renderAttachmentWrapper(options.attachmentLayout);\n\n            var cardContainer = options.attachmentLayout === \"carousel\" ? wrapper.find(DOT + ChatView.styles.cardDeck) : wrapper;\n            var attachments = options.attachments;\n\n            if (!attachments.length) {\n              return;\n            }\n\n            for (var i = 0; i < attachments.length; i++) {\n              var cardElement = this._renderTemplate(attachments[i].contentType, attachments[i].content);\n\n              cardContainer.append(cardElement);\n            }\n\n            this._removeSuggestedActions();\n\n            this._removeTypingIndicator();\n\n            this.list.append(wrapper);\n            this._lastSender = null;\n          },\n          renderComponent: function (type) {\n            var componentType = this.getComponent(type);\n            var component = new componentType({}, this);\n            this.list.append(component.element);\n\n            this._scrollToBottom();\n          },\n          _renderAttachmentWrapper: function (layout) {\n            var viewStyles = ChatView.styles;\n            var wrapper = $(\"<div>\");\n\n            if (layout === \"carousel\") {\n              wrapper.addClass(viewStyles.cardDeckScrollWrap);\n\n              var buttonLeft = this._renderScrollButton(viewStyles.scrollButtonIconLeft);\n\n              wrapper.append(buttonLeft);\n              wrapper.append($(\"<div>\").addClass(viewStyles.cardDeck));\n\n              var buttonRight = this._renderScrollButton(viewStyles.scrollButtonIconRight);\n\n              wrapper.append(buttonRight);\n            } else {\n              wrapper.addClass(viewStyles.cardList);\n            }\n\n            return wrapper;\n          },\n          _renderScrollButton: function (directionClass) {\n            var viewStyles = ChatView.styles;\n            return $(\"<button>\").addClass(viewStyles.button).addClass(viewStyles.buttonDefaults).addClass(viewStyles.iconButton).append($(\"<span>\").addClass(viewStyles.buttonIcon).addClass(viewStyles.scrollButtonIcon).addClass(directionClass));\n          },\n          _removeSuggestedActions: function () {\n            this.list.find(DOT + ChatView.styles.suggestedActions).remove();\n          },\n          _listClick: function (e) {\n            var styles = ChatView.styles;\n            var targetElement = $(e.target);\n\n            if (targetElement.hasClass(styles.message) || targetElement.parents(DOT + styles.message).length) {\n              return;\n            }\n\n            this._clearSelection();\n          },\n          _messageClick: function (e) {\n            this._clearSelection();\n\n            $(e.currentTarget).addClass(ChatView.styles.selected);\n          },\n          _suggestedActionClick: function (e) {\n            var text = $(e.target).data(\"value\") || \"\";\n            this.trigger(\"actionClick\", {\n              text: text\n            });\n\n            this._removeSuggestedActions();\n          },\n          _suggestedActionKeydown: function (e) {\n            if (e.keyCode === kendo.keys.SPACEBAR || e.keyCode === kendo.keys.ENTER) {\n              this._suggestedActionClick(e);\n            }\n          },\n          _cardActionClick: function (e) {\n            var text = $(e.target).data(\"value\") || \"\";\n            this.trigger(\"actionClick\", {\n              text: text\n            });\n          },\n          _renderBubble: function (messageType, bubbleElement, sender) {\n            this._removeSuggestedActions();\n\n            this._removeTypingIndicator();\n\n            var group = this._getMessageGroup(sender, messageType);\n\n            this._appendToGroup(group, bubbleElement, messageType);\n\n            this._scrollToBottom();\n          },\n          _renderTemplate: function (type, options) {\n            var componentType = this.getComponent(type);\n            var element;\n\n            if (componentType) {\n              var component = new componentType(options, this);\n              element = component.element;\n            } else {\n              var template = this.getTemplate(type);\n              var templateOptions = extend(true, {}, options, {\n                styles: ChatView.styles\n              });\n              element = $(template(templateOptions));\n            }\n\n            return element;\n          },\n          _getMessageGroup: function (sender, messageType) {\n            var viewStyles = ChatView.styles;\n\n            var template = this._getMessageGroupTemplate(sender, messageType);\n\n            var appendTarget = messageType == \"typing\" ? this.element : this.list;\n            var group;\n\n            if (sender.id === this._lastSender && this._lastSender !== null && messageType !== \"typing\") {\n              group = this.list.find(DOT + viewStyles.messageGroup).last();\n\n              if (group.length) {\n                return group;\n              }\n            }\n\n            return $(template({\n              text: sender.name,\n              url: sender.iconUrl,\n              styles: viewStyles\n            })).appendTo(appendTarget);\n          },\n          _getMessageGroupTemplate: function (sender, messageType) {\n            var isOwnMessage = sender.id === this.options.user.id;\n            var template = isOwnMessage ? SELF_MESSAGE_GROUP_TEMPLATE : MESSAGE_GROUP_TEMPLATE;\n\n            if (messageType == \"typing\") {\n              template = TYPING_INDICATOR_TEMPLATE;\n            }\n\n            return template;\n          },\n          _appendToGroup: function (group, messageElement, messageType) {\n            var viewStyles = ChatView.styles;\n            var children = group.find(DOT + viewStyles.message);\n            var childrenCount = children.length;\n            var indicator = this.element.find(DOT + viewStyles.typingIndicator);\n\n            if (indicator.length && messageType == \"typing\") {\n              return;\n            }\n\n            messageElement.addClass(childrenCount === 0 ? viewStyles.only : viewStyles.last);\n            children.filter(DOT + viewStyles.only).removeClass(viewStyles.only).addClass(viewStyles.first);\n            children.filter(DOT + viewStyles.last).removeClass(viewStyles.last).addClass(viewStyles.middle);\n            group.append(messageElement);\n          },\n          _renderTypingIndicator: function (sender) {\n            var indicator = this.element.find(DOT + viewStyles.typingIndicatorBubble),\n                indicatorList,\n                participants;\n\n            this._addTypingParticipant(sender);\n\n            if (indicator.length) {\n              participants = this._composeTypingParticipantsText(this.typingParticipants);\n              indicatorList = indicator.find(DOT + viewStyles.author).first();\n              indicatorList.text(participants);\n            } else {\n              $(TYPING_INDICATOR_TEMPLATE({\n                text: sender.name + this.options.messages.isTyping,\n                styles: viewStyles\n              })).appendTo(this.element);\n            }\n\n            this._scrollToBottom();\n          },\n          _addTypingParticipant: function (sender) {\n            var found = false;\n\n            for (var i = 0; i < this.typingParticipants.length; i += 1) {\n              if (this.typingParticipants[i].id == sender.id) {\n                found = true;\n                break;\n              }\n            }\n\n            if (!found) {\n              this.typingParticipants.push(sender);\n            }\n          },\n          _removeTypingParticipant: function (sender) {\n            var indicator = this.element.find(DOT + viewStyles.typingIndicatorBubble),\n                indicatorList,\n                participants;\n\n            if (indicator.length) {\n              for (var i = 0; i < this.typingParticipants.length; i += 1) {\n                if (this.typingParticipants[i].id == sender.id) {\n                  this.typingParticipants.splice(i, 1);\n                }\n              }\n\n              participants = this._composeTypingParticipantsText(this.typingParticipants);\n\n              if (participants === \"\") {\n                indicator.remove();\n              } else {\n                indicatorList = indicator.find(DOT + viewStyles.author).first();\n                indicatorList.text(participants);\n              }\n            }\n          },\n          _composeTypingParticipantsText: function (participants) {\n            var messages = this.options.messages,\n                typingAction = participants.length == 1 ? messages.isTyping : messages.areTyping,\n                typingText = \"\";\n\n            if (participants.length === 0) {\n              return typingText;\n            }\n\n            typingText = this.typingParticipants.map(function (author) {\n              return author.name;\n            }).join(', ').replace(/,(?!.*,)/gmi, messages.and.trimRight()) + typingAction;\n            return typingText;\n          },\n          _removeTypingIndicator: function () {\n            var indicator = this.element.find(DOT + viewStyles.typingIndicatorBubble);\n\n            if (indicator.length) {\n              this.typingParticipants = [];\n              indicator.remove();\n            }\n          },\n          _clearSelection: function () {\n            var selectedClass = ChatView.styles.selected;\n            this.element.find(DOT + selectedClass).removeClass(selectedClass);\n          },\n          _scrollToBottom: function () {\n            this.element.scrollTop(this.element.prop(\"scrollHeight\"));\n          }\n        });\n        extend(true, ChatView, {\n          styles: viewStyles\n        });\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  23:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.draganddrop\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}