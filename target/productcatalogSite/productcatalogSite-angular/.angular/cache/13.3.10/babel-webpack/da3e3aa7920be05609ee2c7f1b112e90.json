{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1431);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1051:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.core\");\n    /***/\n  },\n\n  /***/\n  1112:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.userevents\");\n    /***/\n  },\n\n  /***/\n  1431:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1051), __webpack_require__(1112)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"selectable\",\n        name: \"Selectable\",\n        category: \"framework\",\n        depends: [\"core\", \"userevents\"],\n        advanced: true\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n            abs = Math.abs,\n            ARIASELECTED = \"aria-selected\",\n            SELECTED = \"k-state-selected\",\n            ACTIVE = \"k-state-selecting\",\n            SELECTABLE = \"k-selectable\",\n            CHANGE = \"change\",\n            NS = \".kendoSelectable\",\n            UNSELECT = \"unselect\",\n            UNSELECTING = \"k-state-unselecting\",\n            INPUTSELECTOR = \"input,a,textarea,.k-multiselect-wrap,select,button,.k-button>span,.k-button>img,span.k-icon.k-i-arrow-60-down,span.k-icon.k-i-arrow-60-up,label.k-checkbox-label.k-no-text,.k-icon.k-i-collapse,.k-icon.k-i-expand,span.k-numeric-wrap,.k-focusable\",\n            msie = kendo.support.browser.msie,\n            supportEventDelegation = false,\n            extend = $.extend;\n\n        (function ($) {\n          (function () {\n            $('<div class=\"parent\"><span></span></div>').on(\"click\", \">*\", function () {\n              supportEventDelegation = true;\n            }).find(\"span\").trigger(\"click\").end().off();\n          })();\n        })($);\n\n        var Selectable = Widget.extend({\n          init: function (element, options) {\n            var that = this,\n                multiple,\n                dragToSelect;\n            Widget.fn.init.call(that, element, options);\n            that._marquee = $(\"<div class='k-marquee'><div class='k-marquee-color'></div></div>\");\n            that._lastActive = null;\n            that.element.addClass(SELECTABLE);\n            that.relatedTarget = that.options.relatedTarget;\n            multiple = that.options.multiple;\n            dragToSelect = that.options.dragToSelect;\n            that.userEvents = new kendo.UserEvents(that.element, {\n              global: true,\n              allowSelection: true,\n              filter: (!supportEventDelegation ? \".\" + SELECTABLE + \" \" : \"\") + that.options.filter,\n              tap: that._tap.bind(that),\n              touchAction: multiple ? \"none\" : \"pan-x pan-y\"\n            });\n\n            if (multiple) {\n              if (dragToSelect) {\n                that.userEvents.bind(\"start\", that._start.bind(that)).bind(\"move\", that._move.bind(that)).bind(\"end\", that._end.bind(that));\n              }\n\n              that.userEvents.bind(\"select\", that._select.bind(that));\n            }\n          },\n          events: [CHANGE, UNSELECT],\n          options: {\n            name: \"Selectable\",\n            filter: \">*\",\n            inputSelectors: INPUTSELECTOR,\n            multiple: false,\n            dragToSelect: true,\n            relatedTarget: $.noop,\n            ignoreOverlapped: false,\n            addIdToRanges: false\n          },\n          _isElement: function (target) {\n            var elements = this.element;\n            var idx,\n                length = elements.length,\n                result = false;\n            target = target[0];\n\n            for (idx = 0; idx < length; idx++) {\n              if (elements[idx] === target) {\n                result = true;\n                break;\n              }\n            }\n\n            return result;\n          },\n          _tap: function (e) {\n            var target = $(e.target),\n                that = this,\n                ctrlKey = e.event.ctrlKey || e.event.metaKey,\n                multiple = that.options.multiple,\n                shiftKey = multiple && e.event.shiftKey,\n                selectedClass = that.options.selectedClass || SELECTED,\n                selected,\n                whichCode = e.event.which,\n                buttonCode = e.event.button; //in case of hierarchy or right-click\n\n            if (!that._isElement(target.closest(\".\" + SELECTABLE)) || whichCode && whichCode == 3 || buttonCode && buttonCode == 2) {\n              return;\n            }\n\n            if (!this._allowSelection(e.event.target)) {\n              return;\n            }\n\n            selected = target.hasClass(selectedClass);\n\n            if (!multiple || !ctrlKey) {\n              that.clear();\n            }\n\n            target = target.add(that.relatedTarget(target));\n\n            if (shiftKey) {\n              that.selectRange(that._firstSelectee(), target, e);\n            } else {\n              if (selected && ctrlKey) {\n                that._unselect(target);\n\n                that._notify(CHANGE, e);\n              } else {\n                that.value(target, e);\n              }\n\n              that._lastActive = that._downTarget = target;\n            }\n          },\n          _start: function (e) {\n            var that = this,\n                target = $(e.target),\n                selectedClass = that.options.selectedClass || SELECTED,\n                selected = target.hasClass(selectedClass),\n                currentElement,\n                ctrlKey = e.event.ctrlKey || e.event.metaKey;\n\n            if (!this._allowSelection(e.event.target)) {\n              return;\n            }\n\n            that._downTarget = target; //in case of hierarchy\n\n            if (!that._isElement(target.closest(\".\" + SELECTABLE))) {\n              that.userEvents.cancel();\n              return;\n            }\n\n            if (that.options.useAllItems) {\n              that._items = that.element.find(that.options.filter);\n            } else {\n              currentElement = target.closest(that.element);\n              that._items = currentElement.find(that.options.filter);\n            }\n\n            e.sender.capture();\n\n            that._marquee.appendTo(document.body).css({\n              left: e.x.client + 1,\n              top: e.y.client + 1,\n              width: 0,\n              height: 0\n            });\n\n            if (!ctrlKey) {\n              that.clear();\n            }\n\n            target = target.add(that.relatedTarget(target));\n\n            if (selected) {\n              that._selectElement(target, true);\n\n              if (ctrlKey) {\n                target.addClass(UNSELECTING);\n              }\n            }\n          },\n          _move: function (e) {\n            var that = this,\n                position = {\n              left: e.x.startLocation > e.x.location ? e.x.location : e.x.startLocation,\n              top: e.y.startLocation > e.y.location ? e.y.location : e.y.startLocation,\n              width: abs(e.x.initialDelta),\n              height: abs(e.y.initialDelta)\n            };\n\n            that._marquee.css(position);\n\n            that._invalidateSelectables(position, e.event.ctrlKey || e.event.metaKey);\n\n            e.preventDefault();\n          },\n          _end: function (e) {\n            var that = this,\n                rangeSelectedAttr = kendo.attr(\"range-selected\"),\n                uid = kendo.guid();\n\n            that._marquee.remove();\n\n            that._unselect(that.element.find(that.options.filter + \".\" + UNSELECTING)).removeClass(UNSELECTING);\n\n            var target = that.element.find(that.options.filter + \".\" + ACTIVE);\n            target = target.add(that.relatedTarget(target));\n\n            if (that.options.addIdToRanges) {\n              for (var i = 0; i < that._currentlyActive.length; i++) {\n                $(that._currentlyActive[i]).attr(rangeSelectedAttr, uid);\n              }\n            }\n\n            that.value(target, e);\n            that._lastActive = that._downTarget;\n            that._items = null;\n          },\n          _invalidateSelectables: function (position, ctrlKey) {\n            var idx,\n                length,\n                target = this._downTarget[0],\n                items = this._items,\n                selectedClass = this.options.selectedClass || SELECTED,\n                related,\n                toSelect;\n            this._currentlyActive = [];\n\n            for (idx = 0, length = items.length; idx < length; idx++) {\n              toSelect = items.eq(idx);\n              related = toSelect.add(this.relatedTarget(toSelect));\n\n              if (collision(toSelect, position)) {\n                if (toSelect.hasClass(selectedClass)) {\n                  if (ctrlKey && target !== toSelect[0]) {\n                    related.removeClass(selectedClass).addClass(UNSELECTING);\n                  }\n                } else if (!toSelect.hasClass(ACTIVE) && !toSelect.hasClass(UNSELECTING) && !this._collidesWithActiveElement(related, position)) {\n                  related.addClass(ACTIVE);\n                }\n\n                this._currentlyActive.push(related[0]);\n              } else {\n                if (toSelect.hasClass(ACTIVE)) {\n                  related.removeClass(ACTIVE);\n                } else if (ctrlKey && toSelect.hasClass(UNSELECTING)) {\n                  related.removeClass(UNSELECTING).addClass(selectedClass);\n                }\n              }\n            }\n          },\n          _collidesWithActiveElement: function (element, marqueeRect) {\n            if (!this.options.ignoreOverlapped) {\n              return false;\n            }\n\n            var activeElements = this._currentlyActive;\n            var elemRect = element[0].getBoundingClientRect();\n            var activeElementRect;\n            var collision = false;\n            var isRtl = kendo.support.isRtl(element);\n            var leftRight = isRtl ? \"right\" : \"left\";\n            var tempRect = {};\n            marqueeRect.right = marqueeRect.left + marqueeRect.width;\n            marqueeRect.bottom = marqueeRect.top + marqueeRect.height;\n\n            for (var i = 0; i < activeElements.length; i++) {\n              activeElementRect = activeElements[i].getBoundingClientRect();\n\n              if (overlaps(elemRect, activeElementRect)) {\n                tempRect[leftRight] = leftRight === \"left\" ? activeElementRect.right : activeElementRect.left;\n                elemRect = extend({}, elemRect, tempRect);\n\n                if (elemRect.left > elemRect.right) {\n                  return true;\n                }\n\n                collision = !overlaps(elemRect, marqueeRect);\n              }\n            }\n\n            return collision;\n          },\n          value: function (val, e) {\n            var that = this,\n                selectElement = that._selectElement.bind(that);\n\n            if (val) {\n              val.each(function () {\n                selectElement(this);\n              });\n\n              that._notify(CHANGE, e);\n\n              return;\n            }\n\n            return that.element.find(that.options.filter + \".\" + (that.options.selectedClass || SELECTED));\n          },\n          selectedRanges: function () {\n            var that = this;\n            var rangeSelectedAttr = kendo.attr(\"range-selected\");\n            var map = {};\n            that.element.find(\"[\" + rangeSelectedAttr + \"]\").each(function (_, elem) {\n              var rangeId = $(elem).attr(rangeSelectedAttr);\n              var mapLocation = map[rangeId];\n\n              if (!mapLocation) {\n                mapLocation = map[rangeId] = [];\n              }\n\n              mapLocation.push($(elem));\n            });\n            return map;\n          },\n          selectedSingleItems: function () {\n            var that = this;\n            var rangeSelectedAttr = kendo.attr(\"range-selected\");\n            return that.element.find(that.options.filter + \".\" + (that.options.selectedClass || SELECTED) + \":not([\" + rangeSelectedAttr + \"])\").toArray().map(function (elem) {\n              return $(elem);\n            });\n          },\n          _firstSelectee: function () {\n            var that = this,\n                selected;\n\n            if (that._lastActive !== null) {\n              return that._lastActive;\n            }\n\n            selected = that.value();\n            return selected.length > 0 ? selected[0] : that.element.find(that.options.filter)[0];\n          },\n          _selectElement: function (element, preventNotify) {\n            var toSelect = $(element),\n                selectedClass = this.options.selectedClass || SELECTED,\n                isPrevented = !preventNotify && this._notify(\"select\", {\n              element: element\n            });\n\n            toSelect.removeClass(ACTIVE);\n\n            if (!isPrevented) {\n              toSelect.addClass(selectedClass);\n\n              if (this.options.aria) {\n                toSelect.attr(ARIASELECTED, true);\n              }\n            }\n          },\n          _notify: function (name, args) {\n            args = args || {};\n            return this.trigger(name, args);\n          },\n          _unselect: function (element) {\n            if (this.trigger(UNSELECT, {\n              element: element\n            })) {\n              return;\n            }\n\n            var rangeSelectedAttr = kendo.attr(\"range-selected\");\n            element.removeClass(this.options.selectedClass || SELECTED).removeAttr(rangeSelectedAttr);\n\n            if (this.options.aria) {\n              element.attr(ARIASELECTED, false);\n            }\n\n            return element;\n          },\n          _select: function (e) {\n            if (this._allowSelection(e.event.target)) {\n              if (!msie || msie && !$(kendo._activeElement()).is(this.options.inputSelectors)) {\n                e.preventDefault();\n              }\n            }\n          },\n          _allowSelection: function (target) {\n            if ($(target).is(this.options.inputSelectors)) {\n              this.userEvents.cancel();\n              this._downTarget = null;\n              return false;\n            }\n\n            return true;\n          },\n          resetTouchEvents: function () {\n            this.userEvents.cancel();\n          },\n          clear: function () {\n            var items = this.element.find(this.options.filter + \".\" + (this.options.selectedClass || SELECTED));\n\n            this._unselect(items);\n          },\n          selectRange: function (start, end, e) {\n            var that = this,\n                idx,\n                tmp,\n                items;\n            that.clear();\n\n            if (that.element.length > 1) {\n              items = that.options.continuousItems();\n            }\n\n            if (!items || !items.length) {\n              items = that.element.find(that.options.filter);\n            }\n\n            start = $.inArray($(start)[0], items);\n            end = $.inArray($(end)[0], items);\n\n            if (start > end) {\n              tmp = start;\n              start = end;\n              end = tmp;\n            }\n\n            if (!that.options.useAllItems) {\n              end += that.element.length - 1;\n            }\n\n            for (idx = start; idx <= end; idx++) {\n              that._selectElement(items[idx]);\n            }\n\n            that._notify(CHANGE, e);\n          },\n          destroy: function () {\n            var that = this;\n            Widget.fn.destroy.call(that);\n            that.element.off(NS);\n            that.userEvents.destroy();\n            that._marquee = that._lastActive = that.element = that.userEvents = null;\n          }\n        });\n\n        Selectable.parseOptions = function (selectable) {\n          var selectableMode = selectable.mode || selectable;\n          var asLowerString = typeof selectableMode === \"string\" && selectableMode.toLowerCase();\n          return {\n            multiple: asLowerString && asLowerString.indexOf(\"multiple\") > -1,\n            cell: asLowerString && asLowerString.indexOf(\"cell\") > -1\n          };\n        };\n\n        function collision(element, position) {\n          if (!element.is(\":visible\")) {\n            return false;\n          }\n\n          var elementPosition = kendo.getOffset(element),\n              right = position.left + position.width,\n              bottom = position.top + position.height;\n          elementPosition.right = elementPosition.left + kendo._outerWidth(element);\n          elementPosition.bottom = elementPosition.top + kendo._outerHeight(element);\n          return !(elementPosition.left > right || elementPosition.right < position.left || elementPosition.top > bottom || elementPosition.bottom < position.top);\n        }\n\n        function overlaps(firstRect, secondRect) {\n          return !(firstRect.right <= secondRect.left || firstRect.left >= secondRect.right || firstRect.bottom <= secondRect.top || firstRect.top >= secondRect.bottom);\n        }\n\n        kendo.ui.plugin(Selectable);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}