{"ast":null,"code":"import { drawing as draw } from '@progress/kendo-drawing';\nimport { ChartElement, Box, Point } from '../../core';\nimport PointEventsMixin from '../mixins/point-events-mixin';\nimport { WHITE } from '../../common/constants';\nimport { deepExtend, setDefaultOptions } from '../../common';\n\nclass FunnelSegment extends ChartElement {\n  constructor(value, options, segmentOptions) {\n    super(options);\n    this.value = value;\n    this.options.index = segmentOptions.index;\n  }\n\n  reflow(chartBox) {\n    const points = this.points;\n    const label = this.children[0];\n    this.box = new Box(points[0].x, points[0].y, points[1].x, points[2].y);\n\n    if (label) {\n      label.reflow(new Box(chartBox.x1, points[0].y, chartBox.x2, points[2].y));\n    }\n  }\n\n  createVisual() {\n    const options = this.options;\n    let visual;\n    super.createVisual();\n\n    if (options.visual) {\n      visual = options.visual({\n        category: this.category,\n        dataItem: this.dataItem,\n        value: this.value,\n        series: this.series,\n        percentage: this.percentage,\n        points: this.points,\n        options: options,\n        sender: this.getSender(),\n        createVisual: () => this.createPath()\n      });\n    } else {\n      visual = this.createPath();\n    }\n\n    if (visual) {\n      this.visual.append(visual);\n    }\n  }\n\n  createPath() {\n    const options = this.options;\n    const border = options.border;\n    const path = draw.Path.fromPoints(this.points, {\n      fill: {\n        color: options.color,\n        opacity: options.opacity\n      },\n      stroke: {\n        color: border.color,\n        opacity: border.opacity,\n        width: border.width\n      }\n    }).close();\n    return path;\n  }\n\n  createHighlight(style) {\n    return draw.Path.fromPoints(this.points, style);\n  }\n\n  highlightVisual() {\n    return this.visual.children[0];\n  }\n\n  highlightVisualArgs() {\n    const path = draw.Path.fromPoints(this.points).close();\n    return {\n      options: this.options,\n      path: path\n    };\n  }\n\n  tooltipAnchor() {\n    const box = this.box;\n    return {\n      point: new Point(box.center().x, box.y1),\n      align: {\n        horizontal: \"center\",\n        vertical: \"top\"\n      }\n    };\n  }\n\n  formatValue(format) {\n    const point = this;\n    return point.owner.formatPointValue(point, format);\n  }\n\n}\n\nsetDefaultOptions(FunnelSegment, {\n  color: WHITE,\n  border: {\n    width: 1\n  }\n});\ndeepExtend(FunnelSegment.prototype, PointEventsMixin);\nexport default FunnelSegment;","map":null,"metadata":{},"sourceType":"module"}