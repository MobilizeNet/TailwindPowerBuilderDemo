{"ast":null,"code":"import IntlService from './intl-service';\nimport { FORMAT_REGEX } from '../common/constants';\nimport { isString } from '../common';\nconst FORMAT_REPLACE_REGEX = /\\{(\\d+)(:[^\\}]+)?\\}/g;\n\nclass FormatService {\n  constructor(intlService) {\n    this._intlService = intlService;\n  }\n\n  get intl() {\n    return this._intlService || IntlService.implementation;\n  }\n\n  set intl(value) {\n    this._intlService = value;\n  }\n\n  auto(formatString, ...values) {\n    const intl = this.intl;\n\n    if (isString(formatString) && formatString.match(FORMAT_REGEX)) {\n      return intl.format(formatString, ...values);\n    }\n\n    return intl.toString(values[0], formatString);\n  }\n\n  localeAuto(formatString, values, locale) {\n    const intl = this.intl;\n    let result;\n\n    if (isString(formatString) && formatString.match(FORMAT_REGEX)) {\n      result = formatString.replace(FORMAT_REPLACE_REGEX, function (match, index, placeholderFormat) {\n        let value = values[parseInt(index, 10)];\n        return intl.toString(value, placeholderFormat ? placeholderFormat.substring(1) : \"\", locale);\n      });\n    } else {\n      result = intl.toString(values[0], formatString, locale);\n    }\n\n    return result;\n  }\n\n}\n\nexport default FormatService;","map":null,"metadata":{},"sourceType":"module"}