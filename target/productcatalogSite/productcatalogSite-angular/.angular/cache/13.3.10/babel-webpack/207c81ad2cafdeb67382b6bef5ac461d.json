{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1037);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  5:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.data\");\n    /***/\n  },\n\n  /***/\n  1037:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(5)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            extend = $.extend,\n            data = kendo.data,\n            Node = data.Node,\n            HierarchicalDataSource = data.HierarchicalDataSource,\n            DataSource = data.DataSource;\n        extend(true, kendo.data, {\n          schemas: {\n            \"filemanager\": {\n              data: function (data) {\n                return data.items || data || [];\n              },\n              model: {\n                id: \"path\",\n                hasChildren: \"hasDirectories\",\n                fields: {\n                  name: {\n                    editable: true,\n                    type: \"string\",\n                    defaultValue: \"New Folder\"\n                  },\n                  size: {\n                    editable: false,\n                    type: \"number\"\n                  },\n                  path: {\n                    editable: false,\n                    type: \"string\"\n                  },\n                  extension: {\n                    editable: false,\n                    type: \"string\"\n                  },\n                  isDirectory: {\n                    editable: false,\n                    defaultValue: true,\n                    type: \"boolean\"\n                  },\n                  hasDirectories: {\n                    editable: false,\n                    defaultValue: false,\n                    type: \"boolean\"\n                  },\n                  created: {\n                    type: \"date\",\n                    editable: false\n                  },\n                  createdUtc: {\n                    type: \"date\",\n                    editable: false\n                  },\n                  modified: {\n                    type: \"date\",\n                    editable: false\n                  },\n                  modifiedUtc: {\n                    type: \"date\",\n                    editable: false\n                  }\n                }\n              }\n            }\n          }\n        });\n        var FileEntry = Node.define({\n          init: function (value) {\n            var that = this,\n                isDirectory = this.isDirectory;\n            Node.fn.init.call(this, value);\n\n            if (typeof isDirectory === \"string\") {\n              isDirectory = kendo.getter(isDirectory);\n            }\n\n            if (kendo.isFunction(isDirectory)) {\n              var isDirectoryObject = isDirectory.call(that, that);\n\n              if (isDirectoryObject && isDirectoryObject.length === 0) {\n                that.isDirectory = false;\n              } else {\n                that.isDirectory = !!isDirectoryObject;\n              }\n            }\n\n            if (that.isDirectory) {\n              that._initChildren();\n            }\n          },\n          _initChildren: function () {\n            var that = this;\n            var children, transport, parameterMap;\n\n            if (!(that.children instanceof kendo.data.FileManagerDataSource)) {\n              children = that.children = new kendo.data.FileManagerDataSource(that._childrenOptions);\n              transport = children.transport;\n              parameterMap = transport.parameterMap;\n\n              transport.parameterMap = function (data, type) {\n                if (type === \"read\" || type === \"create\") {\n                  data.target = that.id;\n                }\n\n                if (parameterMap) {\n                  data = parameterMap.call(that, data, type);\n                }\n\n                return data;\n              };\n\n              children.parent = function () {\n                return that;\n              };\n\n              children.bind(\"change\", function (e) {\n                e.node = e.node || that;\n                that.trigger(\"change\", e);\n              });\n              children.bind(\"error\", function (e) {\n                var collection = that.parent();\n\n                if (collection) {\n                  e.node = e.node || that;\n                  collection.trigger(\"error\", e);\n                }\n              });\n\n              that._updateChildrenField();\n            }\n          },\n          isNew: function () {\n            if (this.fileManagerNewItem) {\n              delete this.fileManagerNewItem;\n              return true;\n            }\n\n            return this.id === this._defaultId;\n          }\n        });\n        var FileManagerDataSource = HierarchicalDataSource.extend({\n          init: function (options) {\n            var fileEntry = FileEntry.define({\n              children: options\n            });\n\n            if (options.filter && !options.serverFiltering) {\n              this._hierarchicalFilter = options.filter;\n              options.filter = null;\n            }\n\n            DataSource.fn.init.call(this, $.extend(true, {}, {\n              schema: {\n                modelBase: fileEntry,\n                model: fileEntry\n              }\n            }, options));\n            this.isLocalBinding = this.transport instanceof kendo.data.LocalTransport;\n\n            this._attachBubbleHandlers();\n          },\n          insert: function (index, model) {\n            var parentNode = this.parent();\n\n            if (parentNode && parentNode._initChildren) {\n              if (model && model.isDirectory) {\n                parentNode.hasDirectories = true;\n              }\n\n              parentNode.hasChildren = true;\n\n              parentNode._initChildren();\n            }\n\n            return DataSource.fn.insert.call(this, index, model);\n          },\n          remove: function (node) {\n            var that = this,\n                parentNode = node.parentNode(),\n                dataSource = that,\n                result;\n\n            if (parentNode && parentNode._initChildren) {\n              dataSource = parentNode.children;\n            }\n\n            that._cleanDestroyed(node);\n\n            result = DataSource.fn.remove.call(dataSource, node);\n\n            if (parentNode && dataSource.data() && !dataSource.data().length) {\n              parentNode.hasChildren = false;\n            } else if (parentNode && !this._hasDirectories(parentNode)) {\n              parentNode.hasDirectories = false;\n            }\n\n            return result;\n          },\n          _cleanDestroyed: function (node) {\n            var that = this,\n                dataSource = that;\n\n            if (node.parentNode && node.parentNode()) {\n              node = node.parentNode();\n              dataSource = node.children;\n              dataSource._destroyed = [];\n\n              that._cleanDestroyed(node);\n            } else {\n              dataSource._destroyed = [];\n            }\n          },\n          _hasDirectories: function (node) {\n            var result;\n\n            if (!node.children.data()) {\n              return false;\n            }\n\n            result = node.children.data().filter(function (item) {\n              return item.isDirectory;\n            });\n            return !!result.length;\n          }\n        });\n\n        FileManagerDataSource.create = function (options) {\n          options = options && options.push ? {\n            data: options\n          } : options;\n          var dataSource = options || {},\n              data = dataSource.data;\n\n          if (data && data._dataSource) {\n            return data._dataSource;\n          }\n\n          dataSource.data = data;\n          return dataSource instanceof FileManagerDataSource ? dataSource : new FileManagerDataSource(dataSource);\n        };\n\n        kendo.observableFileManagerData = function (array) {\n          var dataSource = FileManagerDataSource.create({\n            data: array,\n            schema: kendo.data.schemas.filemanager\n          });\n          dataSource.fetch();\n          dataSource._data._dataSource = dataSource;\n          return dataSource._data;\n        };\n\n        extend(kendo.data, {\n          FileManagerDataSource: FileManagerDataSource,\n          FileEntry: FileEntry\n        });\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}