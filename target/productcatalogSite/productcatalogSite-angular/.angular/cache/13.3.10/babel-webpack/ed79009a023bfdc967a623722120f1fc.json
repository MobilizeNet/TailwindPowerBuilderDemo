{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1494);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1051:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.core\");\n    /***/\n  },\n\n  /***/\n  1052:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.popup\");\n    /***/\n  },\n\n  /***/\n  1060:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"jquery\");\n    /***/\n  },\n\n  /***/\n  1132:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.fx\");\n    /***/\n  },\n\n  /***/\n  1494:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n    /* WEBPACK VAR INJECTION */\n\n\n    (function (jQuery) {\n      (function (f, define) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1051), __webpack_require__(1052), __webpack_require__(1132)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n      })(function () {\n        var __meta__ = {\n          // jshint ignore:line\n          id: \"tooltip\",\n          name: \"Tooltip\",\n          category: \"web\",\n          description: \"The Tooltip widget displays a popup hint for a given html element.\",\n          depends: [\"core\", \"popup\"],\n          features: [{\n            id: \"tooltip-fx\",\n            name: \"Animation\",\n            description: \"Support for animation\",\n            depends: [\"fx\"]\n          }]\n        };\n\n        (function ($, undefined) {\n          var kendo = window.kendo,\n              Widget = kendo.ui.Widget,\n              Popup = kendo.ui.Popup,\n              isFunction = kendo.isFunction,\n              isPlainObject = $.isPlainObject,\n              extend = $.extend,\n              DOCUMENT = $(document),\n              isLocalUrl = kendo.isLocalUrl,\n              ARIAIDSUFFIX = \"_tb_active\",\n              DESCRIBEDBY = \"aria-describedby\",\n              SHOW = \"show\",\n              HIDE = \"hide\",\n              ERROR = \"error\",\n              CONTENTLOAD = \"contentLoad\",\n              REQUESTSTART = \"requestStart\",\n              KCONTENTFRAME = \"k-content-frame\",\n              TEMPLATE = '<div role=\"tooltip\" class=\"k-widget k-tooltip#if (!autoHide) {# k-tooltip-closable#}#\">' + '<div class=\"k-tooltip-content\"></div>' + '#if (!autoHide) {# <div class=\"k-tooltip-button\"><a href=\"\\\\#\" class=\"k-icon k-i-close\" title=\"Close\"></a></div> #}#' + '#if (callout){ #<div class=\"k-callout k-callout-#=dir#\"></div>#}#' + '</div>',\n              IFRAMETEMPLATE = kendo.template(\"<iframe frameborder='0' class='\" + KCONTENTFRAME + \"' src='#= content.url #'>\" + \"This page requires frames in order to show content\" + \"</iframe>\"),\n              NS = \".kendoTooltip\",\n              POSITIONS = {\n            bottom: {\n              origin: \"bottom center\",\n              position: \"top center\"\n            },\n            top: {\n              origin: \"top center\",\n              position: \"bottom center\"\n            },\n            left: {\n              origin: \"center left\",\n              position: \"center right\",\n              collision: \"fit flip\"\n            },\n            right: {\n              origin: \"center right\",\n              position: \"center left\",\n              collision: \"fit flip\"\n            },\n            center: {\n              position: \"center center\",\n              origin: \"center center\"\n            }\n          },\n              REVERSE = {\n            \"top\": \"bottom\",\n            \"bottom\": \"top\",\n            \"left\": \"right\",\n            \"right\": \"left\",\n            \"center\": \"center\"\n          },\n              DIRCLASSES = {\n            bottom: \"n\",\n            top: \"s\",\n            left: \"e\",\n            right: \"w\",\n            center: \"n\"\n          },\n              DIMENSIONS = {\n            \"horizontal\": {\n              offset: \"top\",\n              size: \"outerHeight\"\n            },\n            \"vertical\": {\n              offset: \"left\",\n              size: \"outerWidth\"\n            }\n          },\n              DEFAULTCONTENT = function (e) {\n            return e.target.data(kendo.ns + \"title\");\n          };\n\n          function restoreTitle(element) {\n            while (element.length) {\n              if (restoreTitleAttributeForElement(element)) {\n                break;\n              }\n\n              element = element.parent();\n            }\n          }\n\n          function restoreTitleAttributeForElement(element) {\n            var title = element.data(kendo.ns + \"title\");\n\n            if (title) {\n              element.attr(\"title\", title);\n              element.removeData(kendo.ns + \"title\");\n              return true;\n            }\n          }\n\n          function saveTitleAttributeForElement(element) {\n            var title = element.attr(\"title\");\n\n            if (title) {\n              element.data(kendo.ns + \"title\", title);\n              element.attr(\"title\", \"\");\n              return true;\n            }\n          }\n\n          function saveTitleAttributes(element) {\n            while (element.length && !element.is(\"body\")) {\n              if (saveTitleAttributeForElement(element)) {\n                break;\n              }\n\n              element = element.parent();\n            }\n          }\n\n          var TooltipBase = Widget.extend({\n            init: function (element, options) {\n              var that = this,\n                  axis;\n              Widget.fn.init.call(that, element, options);\n              axis = that.options.position.match(/left|right/) ? \"horizontal\" : \"vertical\";\n              that.dimensions = DIMENSIONS[axis];\n\n              if (kendo.support.touch && this._isShownOnMouseEnter()) {\n                that.element.on(kendo.support.mousedown + NS, that.options.filter, that._showOn.bind(that));\n              }\n\n              that.element.on(that.options.showOn + NS, that.options.filter, that._showOn.bind(that));\n            },\n            options: {\n              name: \"TooltipBase\",\n              filter: \"\",\n              offset: 0,\n              showAfter: 100,\n              hideAfter: 100,\n              callout: true,\n              position: \"bottom\",\n              showOn: \"mouseenter\",\n              animation: {\n                open: {\n                  effects: \"fade:in\",\n                  duration: 0\n                },\n                close: {\n                  duration: 40,\n                  hide: true\n                }\n              }\n            },\n            destroy: function () {\n              var popup = this.popup;\n\n              if (popup) {\n                popup.element.off(NS);\n                popup.destroy();\n              }\n\n              clearTimeout(this.timeout);\n              Widget.fn.destroy.call(this);\n            },\n            hide: function () {\n              if (this.popup) {\n                this.popup.close();\n              }\n            },\n            show: function (target) {\n              target = target || this.element;\n\n              this._saveTitle(target);\n\n              this._show(target);\n            },\n            target: function () {\n              if (this.popup) {\n                return this.popup.options.anchor;\n              }\n\n              return null;\n            },\n            _showOn: function (e) {\n              var that = this;\n              var currentTarget = $(e.currentTarget);\n\n              if (that._isShownOnClick() && !that._isShownOnMouseEnter()) {\n                that._show(currentTarget);\n              } else if (that._isShownOnFocus()) {\n                that._saveTitle(currentTarget);\n\n                that._show(currentTarget);\n              } else {\n                clearTimeout(that.timeout);\n                that.timeout = setTimeout(function () {\n                  that._show(currentTarget);\n                }, that.options.showAfter);\n              }\n            },\n            _isShownOnFocus: function () {\n              return this.options.showOn && this.options.showOn.match(/focus/);\n            },\n            _isShownOnMouseEnter: function () {\n              return this.options.showOn && this.options.showOn.match(/mouseenter/);\n            },\n            _isShownOnClick: function () {\n              return this.options.showOn && this.options.showOn.match(/click/);\n            },\n            _positionCallout: function () {\n              var that = this,\n                  position = that.options.position,\n                  dimensions = that.dimensions,\n                  offset = dimensions.offset,\n                  popup = that.popup,\n                  anchor = popup.options.anchor,\n                  anchorOffset = $(anchor).offset(),\n                  elementOffset = $(popup.element).offset(),\n                  cssClass = DIRCLASSES[popup.flipped ? REVERSE[position] : position],\n                  offsetAmount = anchorOffset[offset] - elementOffset[offset] + $(anchor)[dimensions.size]() / 2;\n\n              that._offset(position, that.options.offset);\n\n              that.arrow.removeClass(\"k-callout-n k-callout-s k-callout-w k-callout-e\").addClass(\"k-callout-\" + cssClass).css(offset, offsetAmount);\n            },\n            _offset: function (position, offsetAmount, arrowWidth) {\n              var that = this,\n                  isTopLeft = position == \"top\" || position == \"left\",\n                  isFlipped = that.popup.flipped,\n                  direction = isTopLeft && isFlipped || !isTopLeft && !isFlipped ? 1 : -1,\n                  marginRule = isTopLeft ? \"margin-\" + position : \"margin-\" + REVERSE[position],\n                  offset = (arrowWidth || kendo._outerWidth(that.arrow)) / 2 + offsetAmount;\n              that.popup.wrapper.css(marginRule, offset * direction + \"px\");\n            },\n            _addDescribedBy: function () {\n              var that = this,\n                  anchor = that.popup.options.anchor,\n                  ariaId = anchor[0].id || that.element[0].id || kendo.guid(),\n                  describedBy = [];\n\n              if (anchor.attr(DESCRIBEDBY)) {\n                describedBy.push(anchor.attr(DESCRIBEDBY));\n              }\n\n              if (ariaId) {\n                describedBy.push(ariaId + ARIAIDSUFFIX);\n                anchor.attr(DESCRIBEDBY, describedBy.join(\" \"));\n                that.popup.element.attr(\"id\", ariaId + ARIAIDSUFFIX);\n              }\n            },\n            _removeDescribedBy: function (target) {\n              var tooltipId = this.popup.element.attr(\"id\"),\n                  currentDescribedBy = target.attr(DESCRIBEDBY),\n                  arrayAttr,\n                  finalArray,\n                  finalDescribedbyAttr;\n\n              if (!currentDescribedBy) {\n                return;\n              }\n\n              arrayAttr = currentDescribedBy.split(\" \");\n\n              if (arrayAttr && arrayAttr.length > 0) {\n                finalArray = arrayAttr.filter(function (val) {\n                  return val !== tooltipId;\n                });\n              }\n\n              if (finalArray && finalArray.length > 0) {\n                finalDescribedbyAttr = finalArray.join(\" \");\n                target.attr(DESCRIBEDBY, finalDescribedbyAttr);\n              } else {\n                target.removeAttr(DESCRIBEDBY);\n              }\n            },\n            _openPopup: function () {\n              if (!this.popup) {\n                return;\n              }\n\n              this.popup._hovered = true;\n              this.popup.open();\n            }\n          });\n          kendo.ui.plugin(TooltipBase);\n          var Tooltip = TooltipBase.extend({\n            init: function (element, options) {\n              var that = this,\n                  axis;\n              TooltipBase.fn.init.call(that, element, options);\n              axis = that.options.position.match(/left|right/) ? \"horizontal\" : \"vertical\";\n              that.dimensions = DIMENSIONS[axis];\n              that._documentKeyDownHandler = that._documentKeyDown.bind(that);\n\n              if (this._isShownOnMouseEnter() || this._isShownOnClick()) {\n                that.element.on(\"mouseenter\" + NS, that.options.filter, that._mouseenter.bind(that));\n              }\n\n              if (this.options.autoHide && this._isShownOnMouseEnter()) {\n                that.element.on(\"mouseleave\" + NS, that.options.filter, that._mouseleave.bind(that));\n              }\n\n              if (this.options.autoHide && this._isShownOnFocus()) {\n                that.element.on(\"blur\" + NS, that.options.filter, that._blur.bind(that));\n              }\n\n              if (kendo.support.touch) {\n                that.element.on(kendo.support.mousedown + NS, that.options.filter, that._mouseenter.bind(that));\n              }\n            },\n            options: {\n              name: \"Tooltip\",\n              filter: \"\",\n              content: DEFAULTCONTENT,\n              showAfter: 100,\n              callout: true,\n              offset: 0,\n              position: \"bottom\",\n              showOn: \"mouseenter\",\n              autoHide: true,\n              width: null,\n              height: null,\n              animation: {\n                open: {\n                  effects: \"fade:in\",\n                  duration: 0\n                },\n                close: {\n                  duration: 40,\n                  hide: true\n                }\n              }\n            },\n            events: [SHOW, HIDE, CONTENTLOAD, ERROR, REQUESTSTART],\n            _mouseenter: function (e) {\n              saveTitleAttributes($(e.currentTarget));\n            },\n            _saveTitle: function (target) {\n              saveTitleAttributes(target);\n            },\n            _appendContent: function (target) {\n              var that = this,\n                  contentOptions = that.options.content,\n                  element = that.content,\n                  showIframe = that.options.iframe,\n                  iframe;\n\n              if (isPlainObject(contentOptions) && contentOptions.url) {\n                if (!(\"iframe\" in that.options)) {\n                  showIframe = !isLocalUrl(contentOptions.url);\n                }\n\n                that.trigger(REQUESTSTART, {\n                  options: contentOptions,\n                  target: target\n                });\n\n                if (!showIframe) {\n                  element.empty();\n                  kendo.ui.progress(element, true); // perform AJAX request\n\n                  that._ajaxRequest(contentOptions);\n                } else {\n                  element.hide();\n                  iframe = element.find(\".\" + KCONTENTFRAME)[0];\n\n                  if (iframe) {\n                    // refresh existing iframe\n                    iframe.src = contentOptions.url || iframe.src;\n                  } else {\n                    element.html(IFRAMETEMPLATE({\n                      content: contentOptions\n                    }));\n                  }\n\n                  element.find(\".\" + KCONTENTFRAME).off(\"load\" + NS).on(\"load\" + NS, function () {\n                    that.trigger(CONTENTLOAD);\n                    element.show();\n                  });\n                }\n              } else if (contentOptions && isFunction(contentOptions)) {\n                contentOptions = contentOptions({\n                  sender: this,\n                  target: target\n                });\n                element.html(contentOptions || \"\");\n              } else {\n                element.html(contentOptions);\n              }\n\n              that.angular(\"compile\", function () {\n                return {\n                  elements: element\n                };\n              });\n            },\n            _ajaxRequest: function (options) {\n              var that = this,\n                  successFn = function (data) {\n                kendo.ui.progress(that.content, false);\n                that.content.html(data);\n                that.contentLoading = false;\n                that.trigger(CONTENTLOAD);\n\n                that._openPopup();\n              };\n\n              that.contentLoading = true;\n              jQuery.ajax(extend({\n                type: \"GET\",\n                dataType: \"html\",\n                cache: false,\n                error: function (xhr, status) {\n                  kendo.ui.progress(that.content, false);\n                  that.trigger(ERROR, {\n                    status: status,\n                    xhr: xhr\n                  });\n                },\n                success: successFn.bind(that)\n              }, options));\n            },\n            _documentKeyDown: function (e) {\n              if (e.keyCode === kendo.keys.ESC) {\n                this.hide();\n              }\n            },\n            refresh: function () {\n              var that = this,\n                  popup = that.popup;\n\n              if (popup && popup.options.anchor) {\n                that._appendContent(popup.options.anchor);\n              }\n            },\n            _show: function (target) {\n              var that = this,\n                  current = that.target();\n\n              if (!that.popup) {\n                that._initPopup();\n              }\n\n              if (current && current[0] != target[0]) {\n                that.popup.close();\n                that.popup.element.kendoStop(true, true); // animation can be too long to hide the element before it is shown again\n              }\n\n              if (!current || current[0] != target[0]) {\n                that._appendContent(target);\n\n                that.popup.options.anchor = target;\n              }\n\n              that.popup.one(\"deactivate\", function () {\n                restoreTitle(target);\n\n                that._removeDescribedBy(target);\n\n                this.element.removeAttr(\"id\").attr(\"aria-hidden\", true);\n                DOCUMENT.off(\"keydown\" + NS, that._documentKeyDownHandler);\n              });\n\n              if (!that.contentLoading) {\n                that._openPopup();\n              }\n            },\n            _initPopup: function () {\n              var that = this,\n                  options = that.options,\n                  wrapper = $(kendo.template(TEMPLATE)({\n                callout: options.callout && options.position !== \"center\",\n                dir: DIRCLASSES[options.position],\n                autoHide: options.autoHide\n              }));\n              that.popup = new Popup(wrapper, extend({\n                autosize: true,\n                activate: function () {\n                  that._addDescribedBy();\n\n                  if (options.callout) {\n                    that._positionCallout();\n                  } else {\n                    that._offset(that.options.position, that.options.offset);\n                  }\n\n                  this.element.removeAttr(\"aria-hidden\");\n                  DOCUMENT.on(\"keydown\" + NS, that._documentKeyDownHandler);\n                  that.trigger(SHOW);\n                  that.popup._hovered = undefined;\n                },\n                close: function () {\n                  that.trigger(HIDE);\n                },\n                copyAnchorStyles: false,\n                animation: options.animation\n              }, POSITIONS[options.position]));\n              wrapper.css({\n                width: options.width,\n                height: options.height\n              });\n              that.content = wrapper.find(\".k-tooltip-content\");\n              that.arrow = wrapper.find(\".k-callout\");\n\n              if (options.autoHide && this._isShownOnMouseEnter()) {\n                wrapper.on(\"mouseleave\" + NS, that._mouseleave.bind(that));\n              } else {\n                wrapper.on(\"click\" + NS, \".k-tooltip-button\", that._closeButtonClick.bind(that));\n              }\n            },\n            _closeButtonClick: function (e) {\n              e.preventDefault();\n              this.hide();\n            },\n            _mouseleave: function (e) {\n              var that = this;\n              clearTimeout(that.timeout);\n              that.timeout = setTimeout(function () {\n                that._closePopup(e.currentTarget);\n              }, that.options.hideAfter);\n            },\n            _blur: function (e) {\n              this._closePopup(e.currentTarget);\n            },\n            _closePopup: function (target) {\n              if (this.popup && !this.popup._hovered) {\n                this.popup.close();\n              } else {\n                restoreTitle($(target));\n              }\n            },\n            destroy: function () {\n              this.element.off(NS);\n              DOCUMENT.off(\"keydown\" + NS, this._documentKeyDownHandler);\n              TooltipBase.fn.destroy.call(this);\n            }\n          });\n          kendo.ui.plugin(Tooltip);\n        })(window.kendo.jQuery);\n\n        return window.kendo;\n      }, __webpack_require__(3));\n      /* WEBPACK VAR INJECTION */\n\n    }).call(exports, __webpack_require__(1060));\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}