{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1382);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1063:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.data\");\n    /***/\n  },\n\n  /***/\n  1382:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1063)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"panelbar\",\n        name: \"PanelBar\",\n        category: \"web\",\n        description: \"The PanelBar widget displays hierarchical data as a multi-level expandable panel bar.\",\n        depends: [\"core\", \"data\", \"data.odata\"]\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            keys = kendo.keys,\n            extend = $.extend,\n            each = $.each,\n            isArray = Array.isArray,\n            template = kendo.template,\n            Widget = ui.Widget,\n            HierarchicalDataSource = kendo.data.HierarchicalDataSource,\n            excludedNodesRegExp = /^(ul|a|div)$/i,\n            NS = \".kendoPanelBar\",\n            IMG = \"img\",\n            HREF = \"href\",\n            LAST = \"k-last\",\n            LINK = \"k-link\",\n            LINKSELECTOR = \".\" + LINK,\n            ERROR = \"error\",\n            ITEM = \".k-item\",\n            GROUP = \".k-group\",\n            VISIBLEGROUP = GROUP + \":visible\",\n            IMAGE = \"k-image\",\n            FIRST = \"k-first\",\n            CHANGE = \"change\",\n            EXPAND = \"expand\",\n            SELECT = \"select\",\n            CLICK = \"click\",\n            CONTENT = \"k-content\",\n            ACTIVATE = \"activate\",\n            COLLAPSE = \"collapse\",\n            DATABOUND = \"dataBound\",\n            MOUSEENTER = \"mouseenter\",\n            MOUSELEAVE = \"mouseleave\",\n            CONTENTLOAD = \"contentLoad\",\n            UNDEFINED = \"undefined\",\n            ACTIVECLASS = \"k-state-active\",\n            GROUPS = \"> .k-panel\",\n            CONTENTS = \"> .k-content\",\n            STRING = \"string\",\n            FOCUSEDCLASS = \"k-state-focused\",\n            DISABLEDCLASS = \"k-state-disabled\",\n            SELECTEDCLASS = \"k-state-selected\",\n            SELECTEDSELECTOR = \".\" + SELECTEDCLASS,\n            HIGHLIGHTCLASS = \"k-state-highlight\",\n            ACTIVEITEMSELECTOR = ITEM + \":not(.k-state-disabled)\",\n            clickableItems = \"> \" + ACTIVEITEMSELECTOR + \" > \" + LINKSELECTOR + \", .k-panel > \" + ACTIVEITEMSELECTOR + \" > \" + LINKSELECTOR,\n            disabledItems = ITEM + \".k-state-disabled > .k-link\",\n            selectableItems = \"> li > \" + SELECTEDSELECTOR + \", .k-panel > li > \" + SELECTEDSELECTOR,\n            ARIA_DISABLED = \"aria-disabled\",\n            ARIA_EXPANDED = \"aria-expanded\",\n            ARIA_HIDDEN = \"aria-hidden\",\n            ARIA_SELECTED = \"aria-selected\",\n            VISIBLE = \":visible\",\n            EMPTY = \":empty\",\n            SINGLE = \"single\",\n            bindings = {\n          text: \"dataTextField\",\n          url: \"dataUrlField\",\n          spriteCssClass: \"dataSpriteCssClassField\",\n          imageUrl: \"dataImageUrlField\"\n        },\n            itemIcon,\n            rendering = {\n          aria: function (item) {\n            var attr = \"\";\n\n            if (item.items || item.content || item.contentUrl || item.expanded) {\n              attr += ARIA_EXPANDED + \"='\" + (item.expanded ? \"true\" : \"false\") + \"' \";\n            }\n\n            if (item.enabled === false) {\n              attr += ARIA_DISABLED + \"='true'\";\n            }\n\n            return attr;\n          },\n          wrapperCssClass: function (group, item) {\n            var result = \"k-item\",\n                index = item.index;\n            result += group.firstLevel ? \" k-panelbar-header\" : \" k-panelbar-item\";\n\n            if (item.enabled === false) {\n              result += \" \" + DISABLEDCLASS;\n            } else if (item.expanded === true) {\n              result += \" \" + ACTIVECLASS;\n            }\n\n            if (index === 0) {\n              result += \" k-first\";\n            }\n\n            if (index == group.length - 1) {\n              result += \" k-last\";\n            }\n\n            if (item.cssClass) {\n              result += \" \" + item.cssClass;\n            }\n\n            if (item.level) {\n              result += \" k-level-\" + item.level();\n            }\n\n            return result;\n          },\n          textClass: function (item) {\n            var result = LINK;\n\n            if (item.selected) {\n              result += \" \" + SELECTEDCLASS;\n            }\n\n            return result;\n          },\n          textAttributes: function (url) {\n            return url ? \" href='\" + url + \"'\" : \"\";\n          },\n          arrowClass: function (item) {\n            var result = \"k-icon\";\n            result += item.expanded ? \" k-panelbar-toggle k-panelbar-collapse k-i-arrow-chevron-up\" : \" k-panelbar-toggle k-panelbar-expand k-i-arrow-chevron-down\";\n            return result;\n          },\n          text: function (item) {\n            return item.encoded === false ? item.text : kendo.htmlEncode(item.text);\n          },\n          groupAttributes: function (group) {\n            return group.expanded !== true ? \" style='display:none'\" : \"\";\n          },\n          ariaHidden: function (group) {\n            return group.expanded !== true;\n          },\n          groupCssClass: function () {\n            return \"k-panelbar-group k-group k-panel\";\n          },\n          contentAttributes: function (content) {\n            return content.item.expanded !== true ? \" style='display:none'\" : \"\";\n          },\n          content: function (item) {\n            return item.content ? item.content : item.contentUrl ? \"\" : \"&nbsp;\";\n          },\n          contentUrl: function (item) {\n            return item.contentUrl ? 'href=\"' + item.contentUrl + '\"' : \"\";\n          }\n        };\n\n        function updateFirstLast(items) {\n          items = $(items);\n          items.filter(\".k-first:not(:first-child)\").removeClass(FIRST);\n          items.filter(\".k-last:not(:last-child)\").removeClass(LAST);\n          items.filter(\":first-child\").addClass(FIRST);\n          items.filter(\":last-child\").addClass(LAST);\n        }\n\n        function updateLevel(item) {\n          item = $(item);\n          item.addClass(\"k-level-\" + item.parentsUntil(\".k-panelbar\", \"ul\").length);\n        }\n\n        function updateItemHtml(item) {\n          var wrapper = item,\n              group = item.children(\"ul\"),\n              toggleButton = wrapper.children(\".k-link\").children(\".k-icon\");\n\n          if (item.hasClass(\"k-panelbar\")) {\n            return;\n          }\n\n          if (!toggleButton.length && group.length) {\n            toggleButton = $(\"<span class='k-icon' />\").appendTo(wrapper);\n          } else if (!group.length || !group.children().length) {\n            toggleButton.remove();\n            group.remove();\n          }\n        }\n\n        itemIcon = function (item) {\n          return item.children(\"span\").children(\".k-icon\");\n        };\n\n        var PanelBar = kendo.ui.DataBoundWidget.extend({\n          init: function (element, options) {\n            var that = this,\n                content,\n                hasDataSource;\n\n            if (isArray(options)) {\n              options = {\n                dataSource: options\n              };\n            }\n\n            hasDataSource = options && !!options.dataSource;\n            Widget.fn.init.call(that, element, options);\n            element = that.wrapper = that.element.addClass(\"k-panelbar\");\n            options = that.options;\n\n            if (element[0].id) {\n              that._itemId = element[0].id + \"_pb_active\";\n            }\n\n            that._tabindex();\n\n            that._accessors();\n\n            that._dataSource();\n\n            that._templates();\n\n            that._initData(hasDataSource);\n\n            that._updateClasses();\n\n            that._animations(options);\n\n            element.on(CLICK + NS, clickableItems, that._click.bind(that)).on(MOUSEENTER + NS + \" \" + MOUSELEAVE + NS, clickableItems, that._toggleHover).on(CLICK + NS, disabledItems, false).on(CLICK + NS, \".k-request-retry\", that._retryRequest.bind(that)).on(\"keydown\" + NS, that._keydown.bind(that)).on(\"focus\" + NS, function () {\n              var item = that.select();\n\n              that._current(item[0] ? item : that._first());\n            }).on(\"blur\" + NS, function () {\n              that._current(null);\n            }).attr(\"role\", \"tree\");\n            content = element.find(\"li.\" + ACTIVECLASS + \" > .\" + CONTENT);\n\n            if (content[0]) {\n              that.expand(content.parent(), false);\n            }\n\n            if (!options.dataSource) {\n              that._angularCompile();\n            }\n\n            kendo.notify(that);\n          },\n          events: [EXPAND, COLLAPSE, SELECT, ACTIVATE, CHANGE, ERROR, DATABOUND, CONTENTLOAD],\n          options: {\n            name: \"PanelBar\",\n            dataSource: {},\n            animation: {\n              expand: {\n                effects: \"expand:vertical\",\n                duration: 200\n              },\n              collapse: {\n                // if collapse animation effects are defined, they will be used instead of expand.reverse\n                duration: 200\n              }\n            },\n            messages: {\n              loading: \"Loading...\",\n              requestFailed: \"Request failed.\",\n              retry: \"Retry\"\n            },\n            autoBind: true,\n            loadOnDemand: true,\n            expandMode: \"multiple\",\n            template: \"\",\n            dataTextField: null\n          },\n          _angularCompile: function () {\n            var that = this;\n            that.angular(\"compile\", function () {\n              return {\n                elements: that.element.children(\"li\"),\n                data: [{\n                  dataItem: that.options.$angular\n                }]\n              };\n            });\n          },\n          _angularCompileElements: function (html, items) {\n            var that = this;\n            that.angular(\"compile\", function () {\n              return {\n                elements: html,\n                data: $.map(items, function (item) {\n                  return [{\n                    dataItem: item\n                  }];\n                })\n              };\n            });\n          },\n          _angularCleanup: function () {\n            var that = this;\n            that.angular(\"cleanup\", function () {\n              return {\n                elements: that.element.children(\"li\")\n              };\n            });\n          },\n          destroy: function () {\n            Widget.fn.destroy.call(this);\n            this.element.off(NS);\n\n            this._angularCleanup();\n\n            kendo.destroy(this.element);\n          },\n          _initData: function (hasDataSource) {\n            var that = this;\n\n            if (hasDataSource) {\n              that.element.empty();\n\n              if (that.options.autoBind) {\n                that._progress(true);\n\n                that.dataSource.fetch();\n              }\n            }\n          },\n          _templates: function () {\n            var that = this,\n                options = that.options,\n                fieldAccessor = that._fieldAccessor.bind(that);\n\n            if (options.template && typeof options.template == STRING) {\n              options.template = template(options.template);\n            } else if (!options.template) {\n              options.template = template(\"# var text = \" + fieldAccessor(\"text\") + \"(data.item); #\" + \"# if (typeof data.item.encoded != 'undefined' && data.item.encoded === false) {#\" + \"<span class='k-panelbar-item-text'>#= text #</span>\" + \"# } else { #\" + \"<span class='k-panelbar-item-text'>#: text #</span>\" + \"# } #\");\n            }\n\n            that.templates = {\n              content: template(\"<div class='k-panelbar-content k-content'#= contentAttributes(data) #>#= content(item) #</div>\"),\n              group: template(\"<ul role='group' aria-hidden='#= ariaHidden(group) #' class='#= groupCssClass(group) #'#= groupAttributes(group) #>\" + \"#= renderItems(data) #\" + \"</ul>\"),\n              itemWrapper: template(\"# var url = \" + fieldAccessor(\"url\") + \"(item); #\" + \"# var imageUrl = \" + fieldAccessor(\"imageUrl\") + \"(item); #\" + \"# var spriteCssClass = \" + fieldAccessor(\"spriteCssClass\") + \"(item); #\" + \"# var contentUrl = contentUrl(item); #\" + \"# var tag = url||contentUrl ? 'a' : 'span'; #\" + \"<#= tag # class='#= textClass(item) #' #= contentUrl ##= textAttributes(url) #>\" + \"# if (imageUrl) { #\" + \"<img class='k-panelbar-item-icon k-image' alt='' src='#= imageUrl #' />\" + \"# } #\" + \"# if (spriteCssClass) { #\" + \"<span class='k-sprite #= spriteCssClass #'></span>\" + \"# } #\" + \"#= data.panelBar.options.template(data) #\" + \"#= arrow(data) #\" + \"</#= tag #>\"),\n              item: template(\"<li role='treeitem' #=aria(item)#class='#= wrapperCssClass(group, item) #'\" + kendo.attr(\"uid\") + \"='#= item.uid #'>\" + \"#= itemWrapper(data) #\" + \"# if (item.items && item.items.length > 0) { #\" + \"#= subGroup({ items: item.items, panelBar: panelBar, group: { expanded: item.expanded } }) #\" + \"# } else if (item.content || item.contentUrl) { #\" + \"#= renderContent(data) #\" + \"# } #\" + \"</li>\"),\n              loading: template(\"<li class='k-item'><span class='k-icon k-i-loading'></span> #: data.messages.loading #</li>\"),\n              retry: template(\"<li class='k-item'>\" + \"#: data.messages.requestFailed # \" + \"<button class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-request-retry'><span class='k-button-text'>#: data.messages.retry #</span></button>\" + \"</li>\"),\n              arrow: template(\"<span class='#= arrowClass(item) #'></span>\"),\n              empty: template(\"\")\n            };\n          },\n          setOptions: function (options) {\n            var animation = this.options.animation;\n\n            this._animations(options);\n\n            options.animation = extend(true, animation, options.animation);\n\n            if (\"dataSource\" in options) {\n              this.setDataSource(options.dataSource);\n            }\n\n            Widget.fn.setOptions.call(this, options);\n          },\n          expand: function (element, useAnimation) {\n            var that = this,\n                animBackup = {};\n            element = this.element.find(element);\n\n            if (that._animating && element.find(\"ul\").is(\":visible\")) {\n              that.one(\"complete\", function () {\n                setTimeout(function () {\n                  that.expand(element);\n                });\n              });\n              return;\n            }\n\n            that._animating = true;\n            useAnimation = useAnimation !== false;\n            element.each(function (index, item) {\n              item = $(item);\n              var wrapper = element.children(\".k-group,.k-content\");\n\n              if (!wrapper.length) {\n                wrapper = that._addGroupElement(element);\n              }\n\n              var groups = wrapper.add(item.find(CONTENTS));\n\n              if (!item.hasClass(DISABLEDCLASS) && groups.length > 0) {\n                if (that.options.expandMode == SINGLE && that._collapseAllExpanded(item)) {\n                  return that;\n                }\n\n                element.find(\".\" + HIGHLIGHTCLASS).removeClass(HIGHLIGHTCLASS);\n                item.addClass(HIGHLIGHTCLASS);\n\n                if (!useAnimation) {\n                  animBackup = that.options.animation;\n                  that.options.animation = {\n                    expand: {\n                      effects: {}\n                    },\n                    collapse: {\n                      hide: true,\n                      effects: {}\n                    }\n                  };\n                }\n\n                if (!that._triggerEvent(EXPAND, item)) {\n                  that._toggleItem(item, false, false);\n                }\n\n                if (!useAnimation) {\n                  that.options.animation = animBackup;\n                }\n              }\n            });\n            return that;\n          },\n          collapse: function (element, useAnimation) {\n            var that = this,\n                animBackup = {};\n            that._animating = true;\n            useAnimation = useAnimation !== false;\n            element = that.element.find(element);\n            element.each(function (index, item) {\n              item = $(item);\n              var groups = item.find(GROUPS).add(item.find(CONTENTS));\n\n              if (!item.hasClass(DISABLEDCLASS) && groups.is(VISIBLE)) {\n                item.removeClass(HIGHLIGHTCLASS);\n\n                if (!useAnimation) {\n                  animBackup = that.options.animation;\n                  that.options.animation = {\n                    expand: {\n                      effects: {}\n                    },\n                    collapse: {\n                      hide: true,\n                      effects: {}\n                    }\n                  };\n                }\n\n                if (!that._triggerEvent(COLLAPSE, item)) {\n                  that._toggleItem(item, true);\n                }\n\n                if (!useAnimation) {\n                  that.options.animation = animBackup;\n                }\n              }\n            });\n            return that;\n          },\n          updateArrow: function (items) {\n            var that = this;\n            items = $(items);\n            items.children(LINKSELECTOR).children(\".k-panelbar-collapse, .k-panelbar-expand\").remove();\n            items.filter(function () {\n              var dataItem = that.dataItem(this);\n\n              if (!dataItem) {\n                return $(this).find(\".k-panel\").length > 0 || $(this).find(\".k-content\").length > 0;\n              }\n\n              return dataItem.hasChildren || dataItem.content || dataItem.contentUrl;\n            }).children(\".k-link:not(:has([class*=k-i-arrow]))\").each(function () {\n              var item = $(this),\n                  parent = item.parent();\n              item.append(\"<span class='k-icon \" + (parent.hasClass(ACTIVECLASS) ? \" k-panelbar-toggle k-panelbar-collapse k-i-arrow-chevron-up\" : \" k-panelbar-toggle k-panelbar-expand k-i-arrow-chevron-down\") + \"'/>\");\n            });\n          },\n          _accessors: function () {\n            var that = this,\n                options = that.options,\n                i,\n                field,\n                textField,\n                element = that.element;\n\n            for (i in bindings) {\n              field = options[bindings[i]];\n              textField = element.attr(kendo.attr(i + \"-field\"));\n\n              if (!field && textField) {\n                field = textField;\n              }\n\n              if (!field) {\n                field = i;\n              }\n\n              if (!isArray(field)) {\n                field = [field];\n              }\n\n              options[bindings[i]] = field;\n            }\n          },\n          _progress: function (item, showProgress) {\n            var element = this.element;\n            var loadingText = this.templates.loading({\n              messages: this.options.messages\n            });\n\n            if (arguments.length == 1) {\n              showProgress = item;\n\n              if (showProgress) {\n                element.html(loadingText);\n              } else {\n                element.empty();\n              }\n            } else {\n              itemIcon(item).toggleClass(\"k-i-loading\", showProgress).removeClass(\"k-i-refresh\");\n            }\n          },\n          _refreshRoot: function (items) {\n            var that = this;\n            var parent = that.element;\n            var groupData = {\n              firstLevel: true,\n              expanded: true,\n              length: parent.children().length\n            };\n            this.element.empty();\n            var rootItemsHtml = $.map(items, function (value, idx) {\n              if (typeof value === \"string\") {\n                return $(value);\n              } else {\n                value.items = [];\n                return $(that.renderItem({\n                  group: groupData,\n                  item: extend(value, {\n                    index: idx\n                  })\n                }));\n              }\n            });\n            this.element.append(rootItemsHtml);\n            var elements = this.element.children(\".k-item\");\n\n            for (var i = 0; i < items.length; i++) {\n              this.trigger(\"itemChange\", {\n                item: elements.eq(i).find(\".k-link\").first(),\n                data: items[i],\n                ns: ui\n              });\n            }\n\n            this._angularCompileElements(rootItemsHtml, items);\n          },\n          _refreshChildren: function (item, parentNode) {\n            var i, children, child;\n            parentNode.children(\".k-group\").empty();\n            var items = item.children.data();\n\n            if (!items.length) {\n              updateItemHtml(parentNode);\n              children = parentNode.children(\".k-group\").children(\"li\");\n\n              this._angularCompileElements(children, items);\n            } else {\n              this.append(item.children, parentNode);\n\n              if (this.options.loadOnDemand) {\n                this._toggleGroup(parentNode.children(\".k-group\"), false);\n              }\n\n              children = parentNode.children(\".k-group\").children(\"li\");\n\n              for (i = 0; i < children.length; i++) {\n                child = children.eq(i);\n                this.trigger(\"itemChange\", {\n                  item: child.find(\".k-link\").first(),\n                  data: this.dataItem(child),\n                  ns: ui\n                });\n              }\n            }\n          },\n          findByUid: function (uid) {\n            var items = this.element.find(\".k-item\");\n            var uidAttr = kendo.attr(\"uid\");\n            var result;\n\n            for (var i = 0; i < items.length; i++) {\n              if (items[i].getAttribute(uidAttr) == uid) {\n                result = items[i];\n                break;\n              }\n            }\n\n            return $(result);\n          },\n          refresh: function (e) {\n            var options = this.options;\n            var node = e.node;\n            var action = e.action;\n            var items = e.items;\n            var parentNode = this.wrapper;\n            var loadOnDemand = options.loadOnDemand;\n\n            if (e.field) {\n              if (!items[0] || !items[0].level) {\n                return;\n              }\n\n              return this._updateItems(items, e.field);\n            }\n\n            if (node) {\n              parentNode = this.findByUid(node.uid);\n\n              this._progress(parentNode, false);\n            }\n\n            if (action == \"add\") {\n              this._appendItems(e.index, items, parentNode);\n            } else if (action == \"remove\") {\n              this.remove(this.findByUid(items[0].uid));\n            } else if (action == \"itemchange\") {\n              this._updateItems(items);\n            } else if (action == \"itemloaded\") {\n              this._refreshChildren(node, parentNode);\n            } else {\n              this._refreshRoot(items);\n            }\n\n            if (action != \"remove\") {\n              for (var k = 0; k < items.length; k++) {\n                if (!loadOnDemand || items[k].expanded) {\n                  var tempItem = items[k];\n\n                  if (this._hasChildItems(tempItem)) {\n                    tempItem.load();\n                  }\n                }\n              }\n            }\n\n            this.trigger(DATABOUND, {\n              node: node ? parentNode : undefined\n            });\n          },\n          _error: function (e) {\n            var node = e.node && this.findByUid(e.node.uid);\n            var retryHtml = this.templates.retry({\n              messages: this.options.messages\n            });\n\n            if (node) {\n              this._progress(node, false);\n\n              this._expanded(node, false);\n\n              itemIcon(node).addClass(\"k-i-refresh\");\n              e.node.loaded(false);\n            } else {\n              this._progress(false);\n\n              this.element.html(retryHtml);\n            }\n          },\n          _retryRequest: function (e) {\n            e.preventDefault();\n            this.dataSource.fetch();\n          },\n          items: function () {\n            return this.element.find(\".k-item > span:first-child\");\n          },\n          setDataSource: function (dataSource) {\n            var options = this.options;\n            options.dataSource = dataSource;\n\n            this._dataSource();\n\n            if (this.options.autoBind) {\n              this._progress(true);\n\n              this.dataSource.fetch();\n            }\n          },\n          _bindDataSource: function () {\n            this._refreshHandler = this.refresh.bind(this);\n            this._errorHandler = this._error.bind(this);\n            this.dataSource.bind(CHANGE, this._refreshHandler);\n            this.dataSource.bind(ERROR, this._errorHandler);\n          },\n          _unbindDataSource: function () {\n            var dataSource = this.dataSource;\n\n            if (dataSource) {\n              dataSource.unbind(CHANGE, this._refreshHandler);\n              dataSource.unbind(ERROR, this._errorHandler);\n            }\n          },\n          // generates accessor function for a given field name, honoring the data*Field arrays\n          _fieldAccessor: function (fieldName) {\n            var fieldBindings = this.options[bindings[fieldName]] || [],\n                count = fieldBindings.length,\n                result = \"(function(item) {\";\n\n            if (count === 0) {\n              result += \"return item['\" + fieldName + \"'];\";\n            } else {\n              result += \"var levels = [\" + $.map(fieldBindings, function (x) {\n                return \"function(d){ return \" + kendo.expr(x) + \"}\";\n              }).join(\",\") + \"];\";\n              result += \"if(item.level){return levels[Math.min(item.level(), \" + count + \"-1)](item);}else\";\n              result += \"{return levels[\" + count + \"-1](item)}\";\n            }\n\n            result += \"})\";\n            return result;\n          },\n          _dataSource: function () {\n            var that = this,\n                options = that.options,\n                dataSource = options.dataSource;\n\n            if (!dataSource) {\n              return;\n            }\n\n            dataSource = isArray(dataSource) ? {\n              data: dataSource\n            } : dataSource;\n\n            that._unbindDataSource();\n\n            if (!dataSource.fields) {\n              dataSource.fields = [{\n                field: \"text\"\n              }, {\n                field: \"url\"\n              }, {\n                field: \"spriteCssClass\"\n              }, {\n                field: \"imageUrl\"\n              }];\n            }\n\n            that.dataSource = HierarchicalDataSource.create(dataSource);\n\n            that._bindDataSource();\n          },\n          _appendItems: function (index, items, parentNode) {\n            var that = this,\n                children,\n                wrapper;\n\n            if (parentNode.hasClass(\"k-panelbar\")) {\n              children = parentNode.children(\"li\");\n              wrapper = parentNode;\n            } else {\n              wrapper = parentNode.children(\".k-group\");\n\n              if (!wrapper.length) {\n                wrapper = that._addGroupElement(parentNode);\n              }\n\n              children = wrapper.children(\"li\");\n            }\n\n            var groupData = {\n              firstLevel: parentNode.hasClass(\"k-panelbar\"),\n              expanded: true,\n              length: children.length\n            };\n            var itemsHtml = $.map(items, function (value, idx) {\n              if (typeof value === \"string\") {\n                return $(value);\n              } else {\n                return $(that.renderItem({\n                  group: groupData,\n                  item: extend(value, {\n                    index: idx\n                  })\n                }));\n              }\n            });\n\n            if (typeof index == UNDEFINED) {\n              index = children.length;\n            }\n\n            for (var i = 0; i < itemsHtml.length; i++) {\n              if (children.length === 0 || index === 0) {\n                wrapper.append(itemsHtml[i]);\n              } else {\n                itemsHtml[i].insertAfter(children[index - 1]);\n              }\n            }\n\n            that._angularCompileElements(itemsHtml, items);\n\n            if (that.dataItem(parentNode)) {\n              that.dataItem(parentNode).hasChildren = true;\n              that.updateArrow(parentNode);\n            }\n          },\n          _updateItems: function (items, field) {\n            var that = this;\n            var i, node, nodeWrapper, item;\n            var context = {\n              panelBar: that.options,\n              item: item,\n              group: {}\n            };\n            var render = field != \"expanded\";\n\n            if (field == \"selected\") {\n              if (items[0][field]) {\n                var currentNode = that.findByUid(items[0].uid);\n\n                if (!currentNode.hasClass(DISABLEDCLASS)) {\n                  that.select(currentNode, true);\n                }\n              } else {\n                that.clearSelection();\n              }\n            } else {\n              var elements = $.map(items, function (item) {\n                return that.findByUid(item.uid);\n              });\n\n              if (render) {\n                that.angular(\"cleanup\", function () {\n                  return {\n                    elements: elements\n                  };\n                });\n              }\n\n              for (i = 0; i < items.length; i++) {\n                context.item = item = items[i];\n                context.panelBar = that;\n                nodeWrapper = elements[i];\n                node = nodeWrapper.parent();\n\n                if (render) {\n                  context.group = {\n                    firstLevel: node.hasClass(\"k-panelbar\"),\n                    expanded: nodeWrapper.parent().hasClass(ACTIVECLASS),\n                    length: nodeWrapper.children().length\n                  };\n                  nodeWrapper.children(\".k-link\").remove();\n                  nodeWrapper.prepend(that.templates.itemWrapper(extend(context, {\n                    arrow: item.hasChildren || item.content || item.contentUrl ? that.templates.arrow : that.templates.empty\n                  }, rendering)));\n                }\n\n                if (field == \"expanded\") {\n                  that._toggleItem(nodeWrapper, !item[field], item[field] ? \"true\" : true);\n                } else if (field == \"enabled\") {\n                  that.enable(nodeWrapper, item[field]);\n\n                  if (!item[field]) {\n                    if (item.selected) {\n                      item.set(\"selected\", false);\n                    }\n                  }\n                }\n\n                if (nodeWrapper.length) {\n                  this.trigger(\"itemChange\", {\n                    item: nodeWrapper.find(\".k-link\").first(),\n                    data: item,\n                    ns: ui\n                  });\n                }\n              }\n\n              if (render) {\n                that.angular(\"compile\", function () {\n                  return {\n                    elements: elements,\n                    data: $.map(items, function (item) {\n                      return [{\n                        dataItem: item\n                      }];\n                    })\n                  };\n                });\n              }\n            }\n          },\n          _toggleDisabled: function (element, enable) {\n            element = this.element.find(element);\n            element.toggleClass(DISABLEDCLASS, !enable).attr(ARIA_DISABLED, !enable);\n          },\n          dataItem: function (item) {\n            var uid = $(item).closest(ITEM).attr(kendo.attr(\"uid\")),\n                dataSource = this.dataSource;\n            return dataSource && dataSource.getByUid(uid);\n          },\n          select: function (element, skipChange) {\n            var that = this;\n\n            if (element === undefined) {\n              return that.element.find(selectableItems).parent();\n            }\n\n            element = that.element.find(element);\n\n            if (!element.length) {\n              this._updateSelected(element);\n            } else {\n              element.each(function () {\n                var item = $(this),\n                    link = item.children(LINKSELECTOR);\n\n                if (item.hasClass(DISABLEDCLASS)) {\n                  return that;\n                }\n\n                that._updateSelected(link, skipChange);\n              });\n            }\n\n            return that;\n          },\n          clearSelection: function () {\n            this.select($());\n          },\n          enable: function (element, state) {\n            this._toggleDisabled(element, state !== false);\n\n            return this;\n          },\n          disable: function (element) {\n            this._toggleDisabled(element, false);\n\n            return this;\n          },\n          append: function (item, referenceItem) {\n            referenceItem = this.element.find(referenceItem);\n\n            var inserted = this._insert(item, referenceItem, referenceItem.length ? referenceItem.find(GROUPS) : null);\n\n            each(inserted.items, function () {\n              inserted.group.append(this);\n              updateFirstLast(this);\n              updateLevel(this);\n            });\n            this.updateArrow(referenceItem);\n            updateFirstLast(inserted.group.find(\".k-first, .k-last\"));\n            inserted.group.height(\"auto\");\n            return this;\n          },\n          insertBefore: function (item, referenceItem) {\n            referenceItem = this.element.find(referenceItem);\n\n            var inserted = this._insert(item, referenceItem, referenceItem.parent());\n\n            each(inserted.items, function () {\n              referenceItem.before(this);\n              updateFirstLast(this);\n              updateLevel(this);\n            });\n            updateFirstLast(referenceItem);\n            inserted.group.height(\"auto\");\n            return this;\n          },\n          insertAfter: function (item, referenceItem) {\n            referenceItem = this.element.find(referenceItem);\n\n            var inserted = this._insert(item, referenceItem, referenceItem.parent());\n\n            each(inserted.items, function () {\n              referenceItem.after(this);\n              updateFirstLast(this);\n              updateLevel(this);\n            });\n            updateFirstLast(referenceItem);\n            inserted.group.height(\"auto\");\n            return this;\n          },\n          remove: function (element) {\n            element = this.element.find(element);\n            var that = this,\n                parent = element.parentsUntil(that.element, ITEM),\n                group = element.parent(\"ul\");\n            element.remove();\n\n            if (group && !group.hasClass(\"k-panelbar\") && !group.children(ITEM).length) {\n              group.remove();\n            }\n\n            if (parent.length) {\n              parent = parent.eq(0);\n              that.updateArrow(parent);\n              updateFirstLast(parent);\n            }\n\n            return that;\n          },\n          reload: function (element) {\n            var that = this;\n            element = that.element.find(element);\n            element.each(function () {\n              var item = $(this);\n\n              that._ajaxRequest(item, item.children(\".\" + CONTENT), !item.is(VISIBLE));\n            });\n          },\n          _first: function () {\n            return this.element.children(ACTIVEITEMSELECTOR).first();\n          },\n          _last: function () {\n            var item = this.element.children(ACTIVEITEMSELECTOR).last(),\n                group = item.children(VISIBLEGROUP);\n\n            if (group[0]) {\n              return group.children(ACTIVEITEMSELECTOR).last();\n            }\n\n            return item;\n          },\n          _current: function (candidate) {\n            var that = this,\n                focused = that._focused,\n                id = that._itemId;\n\n            if (candidate === undefined) {\n              return focused;\n            }\n\n            that.element.removeAttr(\"aria-activedescendant\");\n\n            if (focused && focused.length) {\n              if (focused[0].id === id) {\n                focused.removeAttr(\"id\");\n              }\n\n              focused.children(LINKSELECTOR).removeClass(FOCUSEDCLASS);\n            }\n\n            if ($(candidate).length) {\n              id = candidate[0].id || id;\n              candidate.attr(\"id\", id).children(LINKSELECTOR).addClass(FOCUSEDCLASS);\n              that.element.attr(\"aria-activedescendant\", id);\n            }\n\n            that._focused = candidate;\n          },\n          _keydown: function (e) {\n            var that = this,\n                key = e.keyCode,\n                current = that._current();\n\n            if (e.target != e.currentTarget) {\n              return;\n            }\n\n            if (key == keys.DOWN || key == keys.RIGHT) {\n              that._current(that._nextItem(current));\n\n              e.preventDefault();\n            } else if (key == keys.UP || key == keys.LEFT) {\n              that._current(that._prevItem(current));\n\n              e.preventDefault();\n            } else if (key == keys.ENTER || key == keys.SPACEBAR) {\n              that._click(e);\n\n              e.preventDefault();\n            } else if (key == keys.HOME) {\n              that._current(that._first());\n\n              e.preventDefault();\n            } else if (key == keys.END) {\n              that._current(that._last());\n\n              e.preventDefault();\n            }\n          },\n          _nextItem: function (item) {\n            if (!item) {\n              return this._first();\n            }\n\n            var group = item.children(VISIBLEGROUP),\n                next = item.nextAll(\":visible\").first();\n\n            if (group[0]) {\n              next = group.children(\".\" + FIRST);\n            }\n\n            if (!next[0]) {\n              next = item.parent(VISIBLEGROUP).parent(ITEM).next();\n            }\n\n            if (!next[0]) {\n              next = this._first();\n            }\n\n            if (next.hasClass(DISABLEDCLASS)) {\n              next = this._nextItem(next);\n            }\n\n            return next;\n          },\n          _prevItem: function (item) {\n            if (!item) {\n              return this._last();\n            }\n\n            var prev = item.prevAll(\":visible\").first(),\n                result;\n\n            if (!prev[0]) {\n              prev = item.parent(VISIBLEGROUP).parent(ITEM);\n\n              if (!prev[0]) {\n                prev = this._last();\n              }\n            } else {\n              result = prev;\n\n              while (result[0]) {\n                result = result.children(VISIBLEGROUP).children(\".\" + LAST);\n\n                if (result[0]) {\n                  prev = result;\n                }\n              }\n            }\n\n            if (prev.hasClass(DISABLEDCLASS)) {\n              prev = this._prevItem(prev);\n            }\n\n            return prev;\n          },\n          _insert: function (item, referenceItem, parent) {\n            var that = this,\n                items,\n                plain = $.isPlainObject(item),\n                isReferenceItem = referenceItem && referenceItem[0],\n                groupData;\n\n            if (!isReferenceItem) {\n              parent = that.element;\n            }\n\n            groupData = {\n              firstLevel: parent.hasClass(\"k-panelbar\"),\n              expanded: $(referenceItem).hasClass(ACTIVECLASS),\n              length: parent.children().length\n            };\n\n            if (isReferenceItem && !parent.length) {\n              parent = $(that.renderGroup({\n                group: groupData,\n                options: that.options\n              })).appendTo(referenceItem);\n            }\n\n            if (plain || Array.isArray(item) || item instanceof HierarchicalDataSource) {\n              // is JSON or HierarchicalDataSource\n              if (item instanceof HierarchicalDataSource) {\n                item = item.data();\n              }\n\n              items = $.map(plain ? [item] : item, function (value, idx) {\n                if (typeof value === \"string\") {\n                  return $(value);\n                } else {\n                  return $(that.renderItem({\n                    group: groupData,\n                    item: extend(value, {\n                      index: idx\n                    })\n                  }));\n                }\n              });\n\n              if (isReferenceItem) {\n                var dataItem = that.dataItem(referenceItem);\n\n                if (dataItem) {\n                  dataItem.hasChildren = true;\n                  referenceItem.attr(ARIA_EXPANDED, dataItem.expanded).not(\".\" + ACTIVECLASS).children(\"ul\").attr(ARIA_HIDDEN, !dataItem.expanded);\n                } else {\n                  referenceItem.attr(ARIA_EXPANDED, false);\n                }\n              }\n            } else {\n              if (typeof item == \"string\" && item.charAt(0) != \"<\") {\n                items = that.element.find(item);\n              } else {\n                items = $(item);\n              }\n\n              that._updateItemsClasses(items);\n            }\n\n            if (!item.length) {\n              item = [item];\n            }\n\n            that._angularCompileElements(items, item);\n\n            return {\n              items: items,\n              group: parent\n            };\n          },\n          _toggleHover: function (e) {\n            var target = $(e.currentTarget);\n\n            if (!target.parents(\"li.\" + DISABLEDCLASS).length) {\n              target.toggleClass(\"k-state-hover\", e.type == MOUSEENTER);\n            }\n          },\n          _updateClasses: function () {\n            var that = this,\n                panels,\n                items,\n                expanded,\n                panelsParent,\n                dataItem;\n            panels = that.element.find(\"li > ul\").not(function () {\n              return $(this).parentsUntil(\".k-panelbar\", \"div\").length;\n            }).addClass(\"k-panelbar-group k-group k-panel\").attr(\"role\", \"group\");\n            panelsParent = panels.parent();\n            dataItem = that.dataItem(panelsParent);\n            expanded = dataItem && dataItem.expanded || false;\n            panels.parent().not(\"[\" + ARIA_EXPANDED + \"]\").attr(ARIA_EXPANDED, expanded).not(\".\" + ACTIVECLASS).children(\"ul\").attr(ARIA_HIDDEN, !expanded).hide();\n            items = that.element.add(panels).children();\n\n            that._updateItemsClasses(items);\n\n            that.updateArrow(items);\n            updateFirstLast(items);\n          },\n          _updateItemsClasses: function (items) {\n            var length = items.length,\n                idx = 0;\n\n            for (; idx < length; idx++) {\n              this._updateItemClasses(items[idx], idx);\n            }\n          },\n          _updateItemClasses: function (item, index) {\n            var selected = this._selected,\n                contentUrls = this.options.contentUrls,\n                url = contentUrls && contentUrls[index],\n                root = this.element[0],\n                wrapElement,\n                link;\n            item = $(item).addClass(\"k-item\").attr(\"role\", \"treeitem\");\n\n            if (kendo.support.browser.msie) {\n              // IE10 doesn't apply list-style: none on invisible items otherwise.\n              item.css(\"list-style-position\", \"inside\").css(\"list-style-position\", \"\");\n            }\n\n            item.children(IMG).addClass(IMAGE);\n            link = item.children(\"a\").addClass(LINK);\n\n            if (link[0]) {\n              link.attr(\"href\", url); //url can be undefined\n\n              link.children(IMG).addClass(IMAGE);\n            }\n\n            item.filter(\"li[disabled]\").addClass(\"k-state-disabled\").attr(ARIA_DISABLED, true).prop(\"disabled\", false);\n            item.children(\"div\").addClass(CONTENT + \" k-panelbar-content\").attr(ARIA_HIDDEN, true).hide().parent().attr(ARIA_EXPANDED, false);\n            link = item.children(SELECTEDSELECTOR);\n\n            if (link[0]) {\n              if (selected) {\n                selected.removeAttr(ARIA_SELECTED).children(SELECTEDSELECTOR).removeClass(SELECTEDCLASS);\n              }\n\n              link.addClass(SELECTEDCLASS);\n              this._selected = item.attr(ARIA_SELECTED, true);\n            }\n\n            if (!item.children(LINKSELECTOR)[0]) {\n              wrapElement = \"<span class='\" + LINK + \"'><span class='k-panelbar-item-text'></span></span>\";\n\n              if (contentUrls && contentUrls[index] && item[0].parentNode == root) {\n                wrapElement = '<a class=\"k-link\" href=\"' + contentUrls[index] + '\"></a>';\n              }\n\n              item.contents() // exclude groups, real links, templates and empty text nodes\n              .filter(function () {\n                return !this.nodeName.match(excludedNodesRegExp) && !(this.nodeType == 3 && !kendo.trim(this.nodeValue.trim));\n              }).wrapAll(wrapElement);\n            }\n\n            if (item.parent(\".k-panelbar\")[0]) {\n              item.addClass(\"k-panelbar-header\");\n            } else {\n              item.addClass(\"k-panelbar-item\");\n            }\n\n            if (!/k\\-level\\-\\d+/i.test(item.attr(\"class\"))) {\n              item.addClass(\"k-level-\" + item.parentsUntil(this.element, \"ul\").length);\n            }\n          },\n          _click: function (e) {\n            var that = this,\n                target = e.type == CLICK ? $(e.target) : that._current().children(LINKSELECTOR),\n                element = that.element,\n                prevent,\n                contents,\n                href,\n                isAnchor;\n\n            if (target.parents(\"li.\" + DISABLEDCLASS).length) {\n              return;\n            }\n\n            if (target.closest(\".k-panelbar\")[0] != element[0]) {\n              return;\n            }\n\n            if (target.is(\":kendoFocusable\") && !target.hasClass(LINK)) {\n              return;\n            }\n\n            var link = target.closest(LINKSELECTOR),\n                item = link.closest(ITEM);\n\n            that._updateSelected(link);\n\n            var wrapper = item.children(\".k-group,.k-content\");\n            var dataItem = this.dataItem(item);\n\n            if (!wrapper.length && (that.options.loadOnDemand && dataItem && dataItem.hasChildren || this._hasChildItems(item) || item.content || item.contentUrl)) {\n              wrapper = that._addGroupElement(item);\n            }\n\n            contents = item.find(GROUPS).add(item.find(CONTENTS));\n            href = link.attr(HREF);\n            isAnchor = href && (href.charAt(href.length - 1) == \"#\" || href.indexOf(\"#\" + that.element[0].id + \"-\") != -1);\n            prevent = !!(isAnchor || contents.length);\n\n            if (contents.data(\"animating\") && prevent) {\n              e.preventDefault();\n              return;\n            }\n\n            if (that._triggerEvent(SELECT, item)) {\n              prevent = true;\n            }\n\n            if (prevent === false) {\n              return;\n            }\n\n            if (that.options.expandMode == SINGLE) {\n              if (that._collapseAllExpanded(item) && prevent) {\n                e.preventDefault();\n                return;\n              }\n            }\n\n            if (contents.length) {\n              var visibility = contents.is(VISIBLE);\n\n              if (!that._triggerEvent(!visibility ? EXPAND : COLLAPSE, item)) {\n                prevent = that._toggleItem(item, visibility);\n              }\n            }\n\n            if (prevent) {\n              e.preventDefault();\n            }\n          },\n          _hasChildItems: function (item) {\n            return item.items && item.items.length > 0 || item.hasChildren;\n          },\n          _toggleItem: function (element, isVisible, expanded) {\n            var that = this,\n                childGroup = element.find(GROUPS),\n                link = element.find(LINKSELECTOR),\n                url = link.attr(HREF),\n                prevent,\n                content,\n                dataItem = that.dataItem(element),\n                notVisible = !isVisible;\n            var loaded = dataItem && dataItem.loaded();\n\n            if (dataItem && !expanded && dataItem.expanded !== notVisible) {\n              dataItem.set(\"expanded\", notVisible);\n              prevent = dataItem.hasChildren || !!dataItem.content || !!dataItem.contentUrl;\n              return prevent;\n            }\n\n            if (dataItem && (!expanded || expanded === \"true\") && !loaded && !dataItem.content && !dataItem.contentUrl) {\n              if (that.options.loadOnDemand) {\n                this._progress(element, true);\n              }\n\n              element.children(\".k-group,.k-content\").remove();\n              prevent = dataItem.hasChildren;\n              dataItem.load();\n            } else {\n              if (childGroup.length) {\n                this._toggleGroup(childGroup, isVisible);\n\n                prevent = true;\n              } else {\n                content = element.children(\".\" + CONTENT);\n\n                if (content.length) {\n                  prevent = true;\n\n                  if (!content.is(EMPTY) || url === undefined) {\n                    that._toggleGroup(content, isVisible);\n                  } else {\n                    that._ajaxRequest(element, content, isVisible);\n                  }\n                }\n              }\n            }\n\n            return prevent;\n          },\n          _toggleGroup: function (element, visibility) {\n            var that = this,\n                animationSettings = that.options.animation,\n                animation = animationSettings.expand,\n                hasCollapseAnimation = animationSettings.collapse && \"effects\" in animationSettings.collapse,\n                collapse = extend({}, animationSettings.expand, animationSettings.collapse);\n\n            if (!hasCollapseAnimation) {\n              collapse = extend(collapse, {\n                reverse: true\n              });\n            }\n\n            if (element.is(VISIBLE) != visibility) {\n              that._animating = false;\n              return;\n            }\n\n            element.attr(ARIA_HIDDEN, !!visibility);\n            element.parent().attr(ARIA_EXPANDED, !visibility).toggleClass(ACTIVECLASS, !visibility).find(\"> .k-link > .k-panelbar-collapse,> .k-link > .k-panelbar-expand\").toggleClass(\"k-i-arrow-chevron-up\", !visibility).toggleClass(\"k-panelbar-collapse\", !visibility).toggleClass(\"k-i-arrow-chevron-down\", visibility).toggleClass(\"k-panelbar-expand\", visibility);\n\n            if (visibility) {\n              animation = extend(collapse, {\n                hide: true\n              });\n\n              animation.complete = function () {\n                that._animationCallback();\n              };\n            } else {\n              animation = extend({\n                complete: function (element) {\n                  that._triggerEvent(ACTIVATE, element.closest(ITEM));\n\n                  that._animationCallback();\n                }\n              }, animation);\n            }\n\n            element.toggle(0).kendoStop(true, true).kendoAnimate(animation);\n          },\n          _animationCallback: function () {\n            var that = this;\n            that.trigger(\"complete\");\n            that._animating = false;\n          },\n          _addGroupElement: function (element) {\n            var group = $('<ul role=\"group\" aria-hidden=\"true\" class=\"k-panelbar-group k-group k-panel\" style=\"display:none\"></ul>');\n            element.append(group);\n            return group;\n          },\n          _collapseAllExpanded: function (item) {\n            var that = this,\n                children,\n                stopExpand = false;\n            var groups = item.find(GROUPS).add(item.find(CONTENTS));\n\n            if (groups.is(VISIBLE)) {\n              stopExpand = true;\n            }\n\n            if (!(groups.is(VISIBLE) || groups.length === 0)) {\n              children = item.siblings();\n              children.find(GROUPS).add(children.find(CONTENTS)).filter(function () {\n                return $(this).is(VISIBLE);\n              }).each(function (index, content) {\n                content = $(content);\n                stopExpand = that._triggerEvent(COLLAPSE, content.closest(ITEM));\n\n                if (!stopExpand) {\n                  that._toggleGroup(content, true);\n                }\n              });\n              that.one(\"complete\", function () {\n                setTimeout(function () {\n                  children.each(function (index, child) {\n                    var dataItem = that.dataItem(child);\n\n                    if (dataItem) {\n                      dataItem.set(\"expanded\", false);\n                    }\n                  });\n                });\n              });\n            }\n\n            return stopExpand;\n          },\n          _ajaxRequest: function (element, contentElement, isVisible) {\n            var that = this,\n                statusIcon = element.find(\".k-panelbar-collapse, .k-panelbar-expand\"),\n                link = element.find(LINKSELECTOR),\n                loadingIconTimeout = setTimeout(function () {\n              statusIcon.addClass(\"k-i-loading\");\n            }, 100),\n                data = {},\n                url = link.attr(HREF);\n            $.ajax({\n              type: \"GET\",\n              cache: false,\n              url: url,\n              dataType: \"html\",\n              data: data,\n              error: function (xhr, status) {\n                statusIcon.removeClass(\"k-i-loading\");\n\n                if (that.trigger(ERROR, {\n                  xhr: xhr,\n                  status: status\n                })) {\n                  this.complete();\n                }\n              },\n              complete: function () {\n                clearTimeout(loadingIconTimeout);\n                statusIcon.removeClass(\"k-i-loading\");\n              },\n              success: function (data) {\n                function getElements() {\n                  return {\n                    elements: contentElement.get()\n                  };\n                }\n\n                try {\n                  that.angular(\"cleanup\", getElements);\n                  contentElement.html(data);\n                  that.angular(\"compile\", getElements);\n                } catch (e) {\n                  var console = window.console;\n\n                  if (console && console.error) {\n                    console.error(e.name + \": \" + e.message + \" in \" + url);\n                  }\n\n                  this.error(this.xhr, \"error\");\n                }\n\n                that._toggleGroup(contentElement, isVisible);\n\n                that.trigger(CONTENTLOAD, {\n                  item: element[0],\n                  contentElement: contentElement[0]\n                });\n              }\n            });\n          },\n          _triggerEvent: function (eventName, element) {\n            var that = this;\n            return that.trigger(eventName, {\n              item: element[0]\n            });\n          },\n          _updateSelected: function (link, skipChange) {\n            var that = this,\n                element = that.element,\n                item = link.parent(ITEM),\n                selected = that._selected,\n                dataItem = that.dataItem(item);\n\n            if (selected) {\n              selected.removeAttr(ARIA_SELECTED);\n            }\n\n            that._selected = item.attr(ARIA_SELECTED, true);\n            element.find(selectableItems).removeClass(SELECTEDCLASS);\n            element.find(\"> .\" + HIGHLIGHTCLASS + \", .k-panel > .\" + HIGHLIGHTCLASS).removeClass(HIGHLIGHTCLASS);\n            link.addClass(SELECTEDCLASS);\n            link.parentsUntil(element, ITEM).filter(\":has(.k-link)\").addClass(HIGHLIGHTCLASS);\n\n            that._current(item[0] ? item : null);\n\n            if (dataItem) {\n              dataItem.set(\"selected\", true);\n            }\n\n            if (!skipChange) {\n              that.trigger(CHANGE);\n            }\n          },\n          _animations: function (options) {\n            if (options && \"animation\" in options && !options.animation) {\n              options.animation = {\n                expand: {\n                  effects: {}\n                },\n                collapse: {\n                  hide: true,\n                  effects: {}\n                }\n              };\n            }\n          },\n          renderItem: function (options) {\n            var that = this;\n            options = extend({\n              panelBar: that,\n              group: {}\n            }, options);\n            var empty = that.templates.empty,\n                item = options.item;\n            return that.templates.item(extend(options, {\n              itemWrapper: that.templates.itemWrapper,\n              renderContent: that.renderContent,\n              arrow: that._hasChildItems(item) || item.content || item.contentUrl ? that.templates.arrow : empty,\n              subGroup: !options.loadOnDemand || item.expanded ? that.renderGroup : empty\n            }, rendering));\n          },\n          renderGroup: function (options) {\n            var that = this;\n            var templates = that.templates || options.panelBar.templates;\n            return templates.group(extend({\n              renderItems: function (options) {\n                var html = \"\",\n                    i = 0,\n                    items = options.items,\n                    len = items ? items.length : 0,\n                    group = extend({\n                  length: len\n                }, options.group);\n\n                for (; i < len; i++) {\n                  html += options.panelBar.renderItem(extend(options, {\n                    group: group,\n                    item: extend({\n                      index: i\n                    }, items[i])\n                  }));\n                }\n\n                return html;\n              }\n            }, options, rendering));\n          },\n          renderContent: function (options) {\n            return options.panelBar.templates.content(extend(options, rendering));\n          }\n        });\n        kendo.ui.plugin(PanelBar);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}