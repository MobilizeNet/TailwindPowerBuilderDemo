{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1010);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  982:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../main\");\n    /***/\n  },\n\n  /***/\n  1010:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(982), __webpack_require__(1011), __webpack_require__(1012), __webpack_require__(1013)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function (kendo, undefined) {\n        var global = window;\n        var math = global.Math;\n        var abs = math.abs;\n        var $ = kendo.jQuery;\n        var extend = $.extend;\n        var Editor = kendo.ui.editor;\n        var dom = Editor.Dom;\n        var TableElementResizing = Editor.TableElementResizing;\n        var ResizingUtils = Editor.ResizingUtils;\n        var constrain = ResizingUtils.constrain;\n        var calculatePercentageRatio = ResizingUtils.calculatePercentageRatio;\n        var getScrollBarWidth = ResizingUtils.getScrollBarWidth;\n        var inPercentages = ResizingUtils.inPercentages;\n        var toPercentages = ResizingUtils.toPercentages;\n        var toPixels = ResizingUtils.toPixels;\n        var outerWidth = kendo._outerWidth;\n        var NS = \".kendoEditorColumnResizing\";\n        var RESIZE_HANDLE_CLASS = \"k-column-resize-handle\";\n        var RESIZE_MARKER_CLASS = \"k-column-resize-marker\";\n        var BODY = \"body\";\n        var TBODY = \"tbody\";\n        var THEAD = \"thead\";\n        var TD = \"td\";\n        var TH = \"th\";\n        var TR = \"tr\";\n        var COLATTR = \"col-index\";\n        var COMMA = \",\";\n        var WIDTH = \"width\";\n        var ColumnResizing = TableElementResizing.extend({\n          options: {\n            tags: [TD, TH],\n            min: 20,\n            rootElement: null,\n            eventNamespace: NS,\n            rtl: false,\n            handle: {\n              dataAttribute: \"column\",\n              width: 10,\n              height: 0,\n              classNames: {\n                handle: RESIZE_HANDLE_CLASS,\n                marker: RESIZE_MARKER_CLASS\n              },\n              template: '<div class=\"k-column-resize-handle-wrapper\" unselectable=\"on\" contenteditable=\"false\">' + '<div class=\"' + RESIZE_HANDLE_CLASS + '\">' + '<div class=\"' + RESIZE_MARKER_CLASS + '\"></div>' + '</div>' + '</div>'\n            }\n          },\n          elementBorderHovered: function (column, e) {\n            var that = this;\n            var options = that.options;\n            var handleWidth = options.handle.width;\n            var borderOffset = column.offset().left + (options.rtl ? 0 : outerWidth(column));\n            var mousePosition = e.clientX + $(column[0].ownerDocument).scrollLeft();\n\n            if (mousePosition > borderOffset - handleWidth && mousePosition < borderOffset + handleWidth) {\n              return true;\n            } else {\n              return false;\n            }\n          },\n          setResizeHandlePosition: function (column) {\n            var that = this;\n            var tableInnerElement = $(that.element.tHead || that.element.tBodies[0]);\n            var options = that.options;\n            var rtl = options.rtl;\n            var handleWidth = options.handle.width;\n            var rootElement = $(options.rootElement);\n            var scrollTopOffset = rootElement.is(BODY) ? 0 : rootElement.scrollTop();\n            var scrollLeftOffset = rootElement.is(BODY) ? 0 : kendo.scrollLeft(rootElement);\n            var columnWidthOffset = rtl ? 0 : outerWidth(column);\n            var scrollBarWidth = rtl ? getScrollBarWidth(rootElement[0]) : 0;\n            var columnOffsetLeft = column.offset().left - (rootElement.offset().left + parseFloat(rootElement.css(\"borderLeftWidth\"))) - parseFloat(column.css(\"marginLeft\"));\n            var innerElementOffsetTop = tableInnerElement.offset().top - (rootElement.offset().top + parseFloat(rootElement.css(\"borderTopWidth\"))) - parseFloat(tableInnerElement.css(\"marginTop\"));\n            var browser = kendo.support.browser;\n\n            if (rtl && (browser.mozilla || browser.webkit && browser.version >= 85)) {\n              scrollLeftOffset = scrollLeftOffset * -1;\n            }\n\n            that.resizeHandle.css({\n              top: innerElementOffsetTop + scrollTopOffset,\n              left: columnOffsetLeft + columnWidthOffset + (scrollLeftOffset - scrollBarWidth) - handleWidth / 2,\n              position: \"absolute\"\n            });\n          },\n          setResizeHandleDimensions: function () {\n            var that = this;\n            var tableHead = $(that.element).children(THEAD);\n            var tableBody = $(that.element).children(TBODY);\n            var fullHeight = tableHead.length > 0 ? tableHead.height() + tableBody.height() : tableBody.height();\n            that.resizeHandle.css({\n              width: that.options.handle.width,\n              height: fullHeight\n            });\n          },\n          setResizeHandleDragPosition: function (e) {\n            var that = this;\n            var column = $($(e.currentTarget).data(that.options.handle.dataAttribute));\n            var options = that.options;\n            var rootElement = $(options.rootElement);\n            var handleWidth = options.handle ? options.handle.width : 0;\n            var min = options.min;\n            var rtl = options.rtl;\n            var columnWidth = outerWidth(column);\n            var columnLeftOffset = column.offset().left - (rootElement.offset().left + parseFloat(rootElement.css(\"borderLeftWidth\"))) - parseFloat(column.css(\"marginLeft\"));\n            var adjacentColumnWidth = outerWidth(column.next());\n            var resizeHandle = $(that.resizeHandle);\n            var scrollLeftOffset = rootElement.is(BODY) ? 0 : kendo.scrollLeft(rootElement);\n            var scrollBarWidth = rtl ? getScrollBarWidth(rootElement[0]) : 0;\n            var resizeHandleOffsetLeft = resizeHandle.offset().left - (rootElement.offset().left + parseFloat(rootElement.css(\"borderLeftWidth\"))) - parseFloat(resizeHandle.css(\"marginLeft\"));\n            var browser = kendo.support.browser;\n\n            if (rtl && (browser.mozilla || browser.webkit && browser.version >= 85)) {\n              scrollLeftOffset = scrollLeftOffset * -1;\n            }\n\n            var handleOffset = constrain({\n              value: resizeHandleOffsetLeft + (scrollLeftOffset - scrollBarWidth) + e.x.delta,\n              min: columnLeftOffset + (scrollLeftOffset - scrollBarWidth) - (rtl ? adjacentColumnWidth : 0) + min,\n              max: columnLeftOffset + columnWidth + (scrollLeftOffset - scrollBarWidth) + (rtl ? 0 : adjacentColumnWidth) - handleWidth - min\n            });\n            resizeHandle.css({\n              left: handleOffset\n            });\n          },\n          resize: function (e) {\n            var that = this;\n            var column = $($(e.currentTarget).data(that.options.handle.dataAttribute));\n            var options = that.options;\n            var rtlModifier = options.rtl ? -1 : 1;\n            var min = options.min;\n            var initialDeltaX = rtlModifier * e.x.initialDelta;\n            var newWidth;\n            var initialAdjacentColumnWidth;\n            var initialColumnWidth;\n            var colIndex;\n            var nextColumn;\n            dom.reMapTableColumns(that.element, COLATTR);\n            colIndex = parseInt(column.attr(COLATTR), 10);\n\n            if (column.prop(\"colSpan\") > 1) {\n              column = $(that.element).find(\"[\" + COLATTR + \"=\" + (colIndex + column.prop(\"colSpan\") - 1) + \"]\").eq(0);\n              colIndex = parseInt(column.attr(COLATTR), 10);\n            }\n\n            nextColumn = $(that.element).find(\"[\" + COLATTR + \"=\" + (colIndex + 1) + \"]:not([colspan])\");\n\n            that._setTableComputedWidth();\n\n            that._setColumnsComputedWidth();\n\n            initialColumnWidth = outerWidth(column);\n            initialAdjacentColumnWidth = outerWidth(nextColumn);\n            newWidth = constrain({\n              value: initialColumnWidth + initialDeltaX,\n              min: min,\n              max: initialColumnWidth + initialAdjacentColumnWidth - min\n            });\n\n            that._resizeColumn(column[0], newWidth);\n\n            that._resizeTopAndBottomColumns(column[0], newWidth);\n\n            that._resizeAdjacentColumns(parseInt(column.attr(COLATTR), 10), initialAdjacentColumnWidth, initialColumnWidth, initialColumnWidth - newWidth);\n\n            dom.clearTableMappings(that.element, COLATTR);\n          },\n          _setTableComputedWidth: function () {\n            var element = this.element;\n\n            if (element.style[WIDTH] === \"\") {\n              element.style[WIDTH] = toPixels(outerWidth($(element)));\n            }\n          },\n          _setColumnsComputedWidth: function () {\n            var that = this;\n            var tableInnerElement = $(that.element.tHead || that.element.tBodies[0]);\n            var innerElementWidth = outerWidth(tableInnerElement);\n            var columns = tableInnerElement.children(TR).children(TD);\n            var length = columns.length;\n            var currentColumnsWidths = columns.map(function () {\n              return outerWidth($(this));\n            });\n            var i;\n\n            for (i = 0; i < length; i++) {\n              if (inPercentages(columns[i].style[WIDTH])) {\n                columns[i].style[WIDTH] = toPercentages(calculatePercentageRatio(currentColumnsWidths[i], innerElementWidth));\n              } else {\n                columns[i].style[WIDTH] = toPixels(currentColumnsWidths[i]);\n              }\n            }\n          },\n          _resizeTopAndBottomColumns: function (column, newWidth) {\n            var that = this;\n            var columnIndex = $(column).attr(COLATTR);\n            var topAndBottomColumns = $(that.element).children(TBODY + COMMA + THEAD).children(TR).children(that.options.tags.join(COMMA)).filter(function () {\n              var cell = this;\n              return $(cell).attr(COLATTR) === columnIndex && cell !== column;\n            });\n            var length = topAndBottomColumns.length;\n            var i;\n\n            for (i = 0; i < length; i++) {\n              that._resizeColumn(topAndBottomColumns[i], newWidth);\n            }\n          },\n          _resizeColumn: function (column, newWidth) {\n            var innerTableElement = $(this.element.tHead || this.element.tBodies[0]);\n\n            if (inPercentages(column.style[WIDTH])) {\n              column.style[WIDTH] = toPercentages(calculatePercentageRatio(newWidth, outerWidth(innerTableElement)));\n            } else {\n              column.style[WIDTH] = toPixels(newWidth);\n            }\n          },\n          _resizeAdjacentColumns: function (columnIndex, initialAdjacentColumnWidth, initialColumnWidth, deltaWidth) {\n            var that = this;\n            var adjacentColumns = $(that.element).children(TBODY + COMMA + THEAD).children(TR).children(that.options.tags.join(COMMA)).filter(function () {\n              return parseInt($(this).attr(COLATTR), 10) === columnIndex + 1;\n            });\n            var length = adjacentColumns.length;\n            var i;\n\n            for (i = 0; i < length; i++) {\n              that._resizeAdjacentColumn(adjacentColumns[i], initialAdjacentColumnWidth, initialColumnWidth, deltaWidth);\n            }\n          },\n          _resizeAdjacentColumn: function (adjacentColumn, initialAdjacentColumnWidth, initialColumnWidth, deltaWidth) {\n            var that = this;\n            var min = that.options.min;\n            var newWidth;\n            newWidth = constrain({\n              value: initialAdjacentColumnWidth + deltaWidth,\n              min: min,\n              max: abs(initialColumnWidth + initialAdjacentColumnWidth - min)\n            });\n\n            that._resizeColumn(adjacentColumn, newWidth);\n          }\n        });\n\n        ColumnResizing.create = function (editor) {\n          TableElementResizing.create(editor, {\n            name: \"columnResizing\",\n            type: ColumnResizing,\n            eventNamespace: NS\n          });\n        };\n\n        ColumnResizing.dispose = function (editor) {\n          TableElementResizing.dispose(editor, {\n            eventNamespace: NS\n          });\n        };\n\n        extend(Editor, {\n          ColumnResizing: ColumnResizing\n        });\n      })(window.kendo);\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1011:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./resizing-utils\");\n    /***/\n  },\n\n  /***/\n  1012:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./table-element-resizing\");\n    /***/\n  },\n\n  /***/\n  1013:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../dom\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}