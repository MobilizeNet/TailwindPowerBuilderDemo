{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1322);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1052:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.popup\");\n    /***/\n  },\n\n  /***/\n  1063:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.data\");\n    /***/\n  },\n\n  /***/\n  1322:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1063), __webpack_require__(1052)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"list\",\n        name: \"List\",\n        category: \"framework\",\n        depends: [\"data\", \"popup\"],\n        hidden: true\n      };\n      /*jshint evil: true*/\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            outerHeight = kendo._outerHeight,\n            percentageUnitsRegex = /^\\d+(\\.\\d+)?%$/i,\n            Widget = ui.Widget,\n            keys = kendo.keys,\n            support = kendo.support,\n            htmlEncode = kendo.htmlEncode,\n            activeElement = kendo._activeElement,\n            outerWidth = kendo._outerWidth,\n            ObservableArray = kendo.data.ObservableArray,\n            ID = \"id\",\n            CHANGE = \"change\",\n            FOCUSED = \"k-focus\",\n            HOVER = \"k-hover\",\n            KSELECTED = \"k-selected\",\n            LOADING = \"k-i-loading k-input-loading-icon\",\n            LIST = \"k-list\",\n            TABLE = \"k-table\",\n            DATA_TABLE = \"k-data-table\",\n            TABLE_MD = \"k-table-md\",\n            LIST_UL = \"k-list-ul\",\n            TABLE_LIST = \"k-table-list\",\n            FIXED_GROUP_HEADER = \".k-list-group-sticky-header\",\n            GROUP_LABEL = \".k-list-item-group-label\",\n            ITEMSELECTOR = \".k-list-item\",\n            OPEN = \"open\",\n            CLOSE = \"close\",\n            CASCADE = \"cascade\",\n            SELECT = \"select\",\n            CLICK = \"click\",\n            MOUSELEAVE = \"mouseleave\",\n            MOUSEENTER = \"mouseenter\",\n            ACTIVATE = \"activate\",\n            DEACTIVATE = \"deactivate\",\n            DATA_BINDING = \"dataBinding\",\n            DATA_BOUND = \"dataBound\",\n            SELECTED_ITEM_CHANGE = \"selectedItemChange\",\n            SELECTED = \"selected\",\n            REQUESTSTART = \"requestStart\",\n            REQUESTEND = \"requestEnd\",\n            BLUR = \"blur\",\n            FOCUS = \"focus\",\n            FOCUSOUT = \"focusout\",\n            extend = $.extend,\n            isArray = Array.isArray,\n            browser = support.browser,\n            HIDDENCLASS = \"k-hidden\",\n            WIDTH = \"width\",\n            TEXT = \"text\",\n            VALUE = \"value\",\n            isIE = browser.msie,\n            quotRegExp = /\"/g,\n            alternativeNames = {\n          \"ComboBox\": [\"DropDownList\", \"MultiColumnComboBox\"],\n          \"DropDownList\": [\"ComboBox\", \"MultiColumnComboBox\"],\n          \"MultiColumnComboBox\": [\"ComboBox\", \"DropDownList\"]\n        },\n            UL_EL = '<ul unselectable=\"on\"/>',\n            LIST_EL = \"<div class='k-list'/>\",\n            NO_DATA_EL = '<div class=\"k-no-data\" style=\"display: none;\"></div>',\n            LIST_FOOTER_EL = '<div class=\"k-list-footer\"></div>',\n            TABLE_FOOTER_EL = '<div class=\"k-table-footer\">' + '<span class=\"k-table-td\"></span>' + '</div>',\n            MOUSEDOWN = \"mousedown\",\n            LIST_SUFFIX = \"-list\",\n            LISTBOX_SUFFIX = \"_listbox\",\n            ARIA_LABELLEDBY = \"aria-labelledby\",\n            ARIA_LABEL = \"aria-label\",\n            ARIA_ACTIVEDESCENDANT = \"aria-activedescendant\",\n            ARIA_AUTOCOMPLETE = \"aria-autocomplete\",\n            ARIA_CONTROLS = \"aria-controls\",\n            ARIA_LIVE = \"aria-live\",\n            ARIA_EXPANDED = \"aria-expanded\",\n            ARIA_HIDDEN = \"aria-hidden\",\n            ARIA_BUSY = \"aria-busy\",\n            ARIA_MULTISELECTABLE = \"aria-multiselectable\",\n            ARIA_SELECTED = \"aria-selected\",\n            GROUP_ROW_SEL = \".k-table-group-row\";\n        var List = kendo.ui.DataBoundWidget.extend({\n          init: function (element, options) {\n            var that = this,\n                id;\n            Widget.fn.init.call(that, element, options);\n            element = that.element;\n            options = that.options;\n            that._isSelect = element.is(SELECT);\n\n            if (that._isSelect && that.element[0].length) {\n              if (!options.dataSource) {\n                options.dataTextField = options.dataTextField || TEXT;\n                options.dataValueField = options.dataValueField || VALUE;\n              }\n            }\n\n            that._listSize = kendo.cssProperties.getValidClass({\n              widget: \"List\",\n              propName: \"size\",\n              value: options.size\n            });\n            that.ul = $(UL_EL).attr({\n              tabIndex: -1,\n              \"aria-hidden\": true\n            });\n            that.list = $(LIST_EL).addClass(that._listSize).append(that.ul);\n            id = element.attr(ID);\n\n            if (!id) {\n              id = kendo.guid();\n            }\n\n            that.list.attr(ID, id + LIST_SUFFIX);\n            that.ul.attr(ID, id + LISTBOX_SUFFIX);\n\n            if (options.columns && options.columns.length) {\n              that.list.removeClass(LIST).addClass(DATA_TABLE);\n              that.list.removeClass(that._listSize).addClass(TABLE_MD);\n              that.ul.removeClass(LIST_UL).addClass(TABLE);\n\n              that._columnsHeader();\n            }\n\n            that._header();\n\n            that._noData();\n\n            that._footer();\n\n            that._accessors();\n\n            that._initValue();\n          },\n          options: {\n            valuePrimitive: false,\n            footerTemplate: \"\",\n            headerTemplate: \"\",\n            noDataTemplate: true,\n            size: \"medium\",\n            messages: {\n              \"noData\": \"No data found.\",\n              \"clear\": \"clear\"\n            }\n          },\n          setOptions: function (options) {\n            Widget.fn.setOptions.call(this, options);\n\n            if (options && options.enable !== undefined) {\n              options.enabled = options.enable;\n            }\n\n            if (options.columns && options.columns.length) {\n              this._columnsHeader();\n            }\n\n            this._header();\n\n            this._noData();\n\n            this._footer();\n\n            this._renderFooter();\n\n            this._renderNoData();\n          },\n          focus: function () {\n            this._focused.trigger(FOCUS);\n          },\n          readonly: function (readonly) {\n            this._editable({\n              readonly: readonly === undefined ? true : readonly,\n              disable: false\n            });\n          },\n          enable: function (enable) {\n            this._editable({\n              readonly: false,\n              disable: !(enable = enable === undefined ? true : enable)\n            });\n          },\n          _header: function () {\n            var list = this;\n            var header = $(list.header);\n            var template = list.options.headerTemplate;\n\n            this._angularElement(header, \"cleanup\");\n\n            kendo.destroy(header);\n            header.remove();\n\n            if (!template) {\n              list.header = null;\n              return;\n            }\n\n            var headerTemplate = typeof template !== \"function\" ? kendo.template(template) : template;\n            header = $(headerTemplate({}));\n            list.header = header[0] ? header : null;\n\n            if (list.list.parent.length > 0) {\n              list.list.before(header);\n            }\n\n            this._angularElement(list.header, \"compile\");\n          },\n          _columnsHeader: function () {\n            var list = this;\n            var columnsHeader = $(list.columnsHeader);\n\n            this._angularElement(columnsHeader, \"cleanup\");\n\n            kendo.destroy(columnsHeader);\n            columnsHeader.remove();\n            var header = \"<div class='k-table-header'><div class='k-table-header-wrap'><table class='k-table' role='presentation'>\";\n            var colGroup = \"<colgroup>\";\n            var row = \"<tr class='k-table-row'>\";\n\n            for (var idx = 0; idx < this.options.columns.length; idx++) {\n              var currentColumn = this.options.columns[idx];\n              var title = currentColumn.title || currentColumn.field || \"\";\n              var template = currentColumn.headerTemplate || title;\n              var columnsHeaderTemplate = typeof template !== \"function\" ? kendo.template(template) : template;\n              var currentWidth = currentColumn.width;\n              var currentWidthInt = parseInt(currentWidth, 10);\n              var widthStyle = '';\n\n              if (currentWidth && !isNaN(currentWidthInt)) {\n                widthStyle += \"style='width:\";\n                widthStyle += currentWidthInt;\n                widthStyle += percentageUnitsRegex.test(currentWidth) ? \"%\" : \"px\";\n                widthStyle += \";'\";\n              }\n\n              colGroup += \"<col \" + widthStyle + \"/>\";\n              row += \"<th class='k-table-th'>\";\n              row += columnsHeaderTemplate(currentColumn);\n              row += \"</th>\";\n            }\n\n            colGroup += \"</colgroup>\";\n            row += \"</tr>\";\n            header += colGroup;\n            header += \"<thead class='k-table-thead'>\";\n            header += row;\n            header += \"</thead></table></div></div>\";\n            list.columnsHeader = columnsHeader = $(header);\n            list.list.prepend(columnsHeader);\n\n            this._angularElement(list.columnsHeader, \"compile\");\n          },\n          _noData: function () {\n            var list = this;\n            var noData = $(list.noData);\n            var template = list.options.noDataTemplate === true ? list.options.messages.noData : list.options.noDataTemplate;\n            list.angular(\"cleanup\", function () {\n              return {\n                elements: noData\n              };\n            });\n            kendo.destroy(noData);\n            noData.remove();\n\n            if (!template) {\n              list.noData = null;\n              return;\n            }\n\n            list.noData = $(NO_DATA_EL).appendTo(list.list);\n            list.noDataTemplate = typeof template !== \"function\" ? kendo.template(template) : template;\n          },\n          _footer: function () {\n            var list = this;\n            var footer = $(list.footer);\n            var template = list.options.footerTemplate;\n            var footerEl = this.options.columns && this.options.columns.length ? TABLE_FOOTER_EL : LIST_FOOTER_EL;\n\n            this._angularElement(footer, \"cleanup\");\n\n            kendo.destroy(footer);\n            footer.remove();\n\n            if (!template) {\n              list.footer = null;\n              return;\n            }\n\n            list.footer = $(footerEl).appendTo(list.list);\n            list.footerTemplate = typeof template !== \"function\" ? kendo.template(template) : template;\n          },\n          _listOptions: function (options) {\n            var that = this;\n            var currentOptions = that.options;\n            var virtual = currentOptions.virtual;\n            var changeEventOption = {\n              change: that._listChange.bind(that)\n            };\n\n            var listBoundHandler = that._listBound.bind(that);\n\n            var focusedElm = that._focused;\n            var inputId = that.element.attr(\"id\");\n            var labelElm = $(\"label[for=\\\"\" + that.element.attr(\"id\") + \"\\\"]\");\n            var labelledBy = focusedElm.attr(ARIA_LABELLEDBY);\n\n            if (!labelledBy && labelElm.length) {\n              labelledBy = labelElm.attr(\"id\") || that._generateLabelId(labelElm, inputId || kendo.guid());\n            }\n\n            virtual = typeof virtual === \"object\" ? virtual : {};\n            options = $.extend({\n              autoBind: false,\n              selectable: true,\n              dataSource: that.dataSource,\n              click: that._click.bind(that),\n              activate: that._activateItem.bind(that),\n              columns: currentOptions.columns,\n              deactivate: that._deactivateItem.bind(that),\n              dataBinding: function () {\n                that.trigger(DATA_BINDING);\n              },\n              dataBound: listBoundHandler,\n              height: currentOptions.height,\n              dataValueField: currentOptions.dataValueField,\n              dataTextField: currentOptions.dataTextField,\n              groupTemplate: currentOptions.groupTemplate,\n              fixedGroupTemplate: currentOptions.fixedGroupTemplate,\n              template: currentOptions.template,\n              ariaLabel: focusedElm.attr(ARIA_LABEL),\n              ariaLabelledBy: labelledBy,\n              listSize: that._listSize\n            }, options, virtual, changeEventOption);\n\n            if (!options.template) {\n              options.template = \"#:\" + kendo.expr(options.dataTextField, \"data\") + \"#\";\n            }\n\n            if (currentOptions.$angular) {\n              options.$angular = currentOptions.$angular;\n            }\n\n            return options;\n          },\n          _initList: function () {\n            var that = this;\n\n            var listOptions = that._listOptions({\n              selectedItemChange: that._listChange.bind(that)\n            });\n\n            if (!that.options.virtual) {\n              that.listView = new kendo.ui.StaticList(that.ul, listOptions);\n            } else {\n              that.listView = new kendo.ui.VirtualList(that.ul, listOptions);\n              that.list.addClass(\"k-virtual-list\");\n            }\n\n            that.listView.bind(\"listBound\", that._listBound.bind(that));\n\n            that._setListValue();\n          },\n          _setListValue: function (value) {\n            value = value || this.options.value;\n\n            if (value !== undefined) {\n              this.listView.value(value).done(this._updateSelectionState.bind(this));\n            }\n          },\n          _updateSelectionState: $.noop,\n          _listMousedown: function (e) {\n            if (!this.filterInput || this.filterInput[0] !== e.target) {\n              e.preventDefault();\n            }\n          },\n          _isFilterEnabled: function () {\n            var filter = this.options.filter;\n            return filter && filter !== \"none\";\n          },\n          _hideClear: function () {\n            var list = this;\n\n            if (list._clear) {\n              list._clear.addClass(HIDDENCLASS);\n            }\n          },\n          _showClear: function () {\n            if (this._clear) {\n              this._clear.removeClass(HIDDENCLASS);\n            }\n          },\n          _clearValue: function () {\n            this._clearText();\n\n            this._accessor(\"\");\n\n            this.listView.value([]);\n\n            if (this._isSelect) {\n              this._customOption = undefined;\n            }\n\n            if (this._isFilterEnabled() && !this.options.enforceMinLength) {\n              this._filter({\n                word: \"\",\n                open: false\n              });\n\n              if (this.options.highlightFirst) {\n                this.listView.focus(0);\n              }\n            }\n\n            this._change();\n          },\n          _clearText: function () {\n            this.text(\"\");\n          },\n          _clearFilter: function () {\n            if (!this.options.virtual) {\n              this.listView.bound(false);\n            }\n\n            this._filterSource();\n          },\n          _filterSource: function (filter, force) {\n            var that = this;\n            var options = that.options;\n            var isMultiColumnFiltering = options.filterFields && filter && filter.logic && filter.filters && filter.filters.length;\n            var dataSource = that.dataSource;\n            var expression = extend({}, dataSource.filter() || {});\n            var resetPageSettings = filter || expression.filters && expression.filters.length && !filter;\n            var removed = removeFiltersForField(expression, options.dataTextField);\n\n            this._clearFilterExpressions(expression);\n\n            if ((filter || removed) && that.trigger(\"filtering\", {\n              filter: filter\n            })) {\n              return $.Deferred().reject().promise();\n            }\n\n            var newExpression = {\n              filters: [],\n              logic: \"and\"\n            };\n\n            if (isMultiColumnFiltering) {\n              newExpression.filters.push(filter);\n            } else {\n              this._pushFilterExpression(newExpression, filter);\n            }\n\n            if (isValidFilterExpr(expression)) {\n              if (newExpression.logic === expression.logic) {\n                newExpression.filters = newExpression.filters.concat(expression.filters);\n              } else {\n                newExpression.filters.push(expression);\n              }\n            }\n\n            if (that._cascading) {\n              this.listView.setDSFilter(newExpression);\n            }\n\n            var dataSourceState = extend({}, {\n              page: resetPageSettings ? 1 : dataSource.page(),\n              pageSize: resetPageSettings ? dataSource.options.pageSize : dataSource.pageSize(),\n              sort: dataSource.sort(),\n              filter: dataSource.filter(),\n              group: dataSource.group(),\n              aggregate: dataSource.aggregate()\n            }, {\n              filter: newExpression\n            });\n            return dataSource[force ? \"read\" : \"query\"](dataSource._mergeState(dataSourceState));\n          },\n          _pushFilterExpression: function (newExpression, filter) {\n            if (isValidFilterExpr(filter) && filter.value !== \"\") {\n              newExpression.filters.push(filter);\n            }\n          },\n          _clearFilterExpressions: function (expression) {\n            if (!expression.filters) {\n              return;\n            }\n\n            var filtersToRemove;\n\n            for (var i = 0; i < expression.filters.length; i++) {\n              if (\"fromFilter\" in expression.filters[i]) {\n                filtersToRemove = i;\n              }\n            }\n\n            if (!isNaN(filtersToRemove)) {\n              expression.filters.splice(filtersToRemove, 1);\n            }\n          },\n          _angularElement: function (element, action) {\n            if (!element) {\n              return;\n            }\n\n            this.angular(action, function () {\n              return {\n                elements: element\n              };\n            });\n          },\n          _renderNoData: function () {\n            var list = this;\n            var noData = list.noData;\n\n            if (!noData) {\n              return;\n            }\n\n            this._angularElement(noData, \"cleanup\");\n\n            noData.html(list.noDataTemplate({\n              instance: list\n            }));\n\n            this._angularElement(noData, \"compile\");\n          },\n          _toggleNoData: function (show) {\n            $(this.noData).toggle(show);\n          },\n          _toggleHeader: function (show) {\n            var groupHeader = this.listView.content.prev(FIXED_GROUP_HEADER);\n            groupHeader.toggle(show);\n          },\n          _renderFooter: function () {\n            var list = this,\n                footer = list.footer ? this.options.columns && this.options.columns.length ? list.footer.children().first() : list.footer : null;\n\n            if (!footer) {\n              return;\n            }\n\n            this._angularElement(footer, \"cleanup\");\n\n            footer.html(list.footerTemplate({\n              instance: list\n            }));\n\n            this._angularElement(footer, \"compile\");\n          },\n          _allowOpening: function () {\n            return this.options.noDataTemplate || this.dataSource.flatView().length;\n          },\n          _initValue: function () {\n            var that = this,\n                value = that.options.value;\n\n            if (value !== null) {\n              that.element.val(value);\n            } else {\n              value = that._accessor();\n              that.options.value = value;\n            }\n\n            that._old = value;\n          },\n          _ignoreCase: function () {\n            var that = this,\n                model = that.dataSource.reader.model,\n                field;\n\n            if (model && model.fields) {\n              field = model.fields[that.options.dataTextField];\n\n              if (field && field.type && field.type !== \"string\") {\n                that.options.ignoreCase = false;\n              }\n            }\n          },\n          _focus: function (candidate) {\n            return this.listView.focus(candidate);\n          },\n          _filter: function (options) {\n            var that = this;\n            var widgetOptions = that.options;\n            var word = options.word;\n            var filterFields = widgetOptions.filterFields;\n            var field = widgetOptions.dataTextField;\n            var expression;\n\n            if (filterFields && filterFields.length) {\n              expression = {\n                logic: \"or\",\n                filters: [],\n                fromFilter: true\n              };\n\n              for (var i = 0; i < filterFields.length; i++) {\n                this._pushFilterExpression(expression, that._buildExpression(word, filterFields[i]));\n              }\n            } else {\n              expression = that._buildExpression(word, field);\n            }\n\n            that._open = options.open;\n\n            that._filterSource(expression);\n          },\n          _buildExpression: function (value, field) {\n            var that = this;\n            var widgetOptions = that.options;\n            var ignoreCase = widgetOptions.ignoreCase;\n            var accentFoldingFiltering = that.dataSource.options.accentFoldingFiltering;\n            return {\n              value: ignoreCase ? accentFoldingFiltering ? value.toLocaleLowerCase(accentFoldingFiltering) : value.toLowerCase() : value,\n              field: field,\n              operator: widgetOptions.filter,\n              ignoreCase: ignoreCase\n            };\n          },\n          _clearButton: function () {\n            var list = this;\n            var clearTitle = list.options.messages.clear;\n\n            if (!list._clear) {\n              list._clear = $('<span unselectable=\"on\" class=\"k-clear-value\" title=\"' + clearTitle + '\"><span class=\"k-icon k-i-x\"></span></span>').attr({\n                \"role\": \"button\",\n                \"tabIndex\": -1\n              });\n            }\n\n            if (!list.options.clearButton) {\n              list._clear.remove();\n            }\n\n            this._hideClear();\n          },\n          search: function (word) {\n            var options = this.options;\n            word = typeof word === \"string\" ? word : this._inputValue();\n            clearTimeout(this._typingTimeout);\n\n            if (!options.enforceMinLength && !word.length || word.length >= options.minLength) {\n              this._state = \"filter\";\n\n              if (this.listView) {\n                this.listView._emptySearch = !kendo.trim(word).length;\n              }\n\n              if (!this._isFilterEnabled()) {\n                this._searchByWord(word);\n              } else {\n                this._filter({\n                  word: word,\n                  open: true\n                });\n              }\n            }\n          },\n          current: function (candidate) {\n            return this._focus(candidate);\n          },\n          items: function () {\n            return this.ul[0].children;\n          },\n          destroy: function () {\n            var that = this;\n            var ns = that.ns;\n            Widget.fn.destroy.call(that);\n\n            that._unbindDataSource();\n\n            that.listView.destroy();\n            that.list.off(ns);\n            that.popup.destroy();\n\n            if (that._form) {\n              that._form.off(\"reset\", that._resetHandler);\n            }\n          },\n          dataItem: function (index) {\n            var that = this;\n\n            if (index === undefined) {\n              return that.listView.selectedDataItems()[0];\n            }\n\n            if (typeof index !== \"number\") {\n              if (that.options.virtual) {\n                return that.dataSource.getByUid($(index).data(\"uid\"));\n              }\n\n              index = $(that.items()).index(index);\n            }\n\n            return that.dataSource.flatView()[index];\n          },\n          _activateItem: function () {\n            var current = this.listView.focus();\n\n            if (current && this.popup.visible()) {\n              this._focused.add(this.filterInput).attr(ARIA_ACTIVEDESCENDANT, current.attr(\"id\"));\n            }\n          },\n          _deactivateItem: function () {\n            this._focused.add(this.filterInput).removeAttr(ARIA_ACTIVEDESCENDANT);\n          },\n          _accessors: function () {\n            var that = this;\n            var element = that.element;\n            var options = that.options;\n            var getter = kendo.getter;\n            var textField = element.attr(kendo.attr(\"text-field\"));\n            var valueField = element.attr(kendo.attr(\"value-field\"));\n\n            if (!options.dataTextField && textField) {\n              options.dataTextField = textField;\n            }\n\n            if (!options.dataValueField && valueField) {\n              options.dataValueField = valueField;\n            }\n\n            that._text = getter(options.dataTextField);\n            that._value = getter(options.dataValueField);\n          },\n          _aria: function (id) {\n            var that = this,\n                options = that.options,\n                element = that._focused,\n                autocomplete;\n\n            if (options.suggest !== undefined) {\n              if (options.filter === \"none\") {\n                if (options.suggest === true) {\n                  autocomplete = \"inline\";\n                } else {\n                  autocomplete = \"none\";\n                }\n              } else {\n                if (options.suggest === true) {\n                  autocomplete = \"both\";\n                } else {\n                  autocomplete = \"list\";\n                }\n              }\n\n              element.attr(ARIA_AUTOCOMPLETE, autocomplete);\n            }\n\n            id = id ? id + \" \" + that.ul[0].id : that.ul[0].id;\n            element.attr({\n              \"aria-owns\": id,\n              \"aria-controls\": id\n            });\n\n            if (that.filterInput && that.filterInput.length > 0) {\n              that.filterInput.attr(ARIA_CONTROLS, id);\n            }\n\n            that.ul.attr(ARIA_LIVE, !that._isFilterEnabled() ? \"off\" : \"polite\");\n\n            that._ariaLabel(that._focused);\n          },\n          _blur: function () {\n            var that = this;\n\n            that._change();\n\n            that.close();\n            that._userTriggered = false;\n          },\n          _isValueChanged: function (value) {\n            return value !== unifyType(this._old, typeof value);\n          },\n          _change: function () {\n            var that = this;\n            var index = that.selectedIndex;\n            var optionValue = that.options.value;\n            var value = that.value();\n            var trigger;\n\n            if (that._isSelect && !that.listView.bound() && optionValue) {\n              value = optionValue;\n            }\n\n            if (that._isValueChanged(value)) {\n              trigger = true;\n            } else if (that._valueBeforeCascade !== undefined && that._valueBeforeCascade !== unifyType(that._old, typeof that._valueBeforeCascade) && that._userTriggered) {\n              trigger = true;\n            } else if (index !== undefined && index !== that._oldIndex && !that.listView.isFiltered()) {\n              trigger = true;\n            }\n\n            if (trigger) {\n              if (that._old === null || that._old === \"\" || value === \"\") {\n                that._valueBeforeCascade = that._old = value;\n              } else {\n                if (that.dataItem()) {\n                  that._valueBeforeCascade = that._old = that.options.dataValueField ? that.dataItem()[that.options.dataValueField] : that.dataItem();\n                } else {\n                  that._valueBeforeCascade = that._old = null;\n                }\n              }\n\n              that._oldIndex = index;\n\n              if (!that._typing) {\n                // trigger the DOM change event so any subscriber gets notified\n                that.element.trigger(CHANGE);\n              }\n\n              that.trigger(CHANGE);\n            }\n\n            that.typing = false;\n          },\n          _data: function () {\n            return this.dataSource.view();\n          },\n          _enable: function () {\n            var that = this,\n                options = that.options,\n                disabled = that.element.is(\"[disabled]\");\n\n            if (options.enable !== undefined) {\n              options.enabled = options.enable;\n            }\n\n            if (!options.enabled || disabled) {\n              that.enable(false);\n            } else {\n              that.readonly(that.element.is(\"[readonly]\"));\n            }\n          },\n          _dataValue: function (dataItem) {\n            var value = this._value(dataItem);\n\n            if (value === undefined) {\n              value = this._text(dataItem);\n            }\n\n            return value;\n          },\n          _offsetHeight: function () {\n            var offsetHeight = 0;\n            var siblings = this.listView.content.parent().prevAll(\":visible\");\n            siblings.each(function () {\n              var element = $(this);\n              offsetHeight += outerHeight(element, true);\n            });\n            return offsetHeight;\n          },\n          _height: function (length) {\n            var that = this;\n            var list = that.list;\n            var height = that.options.height;\n            var visible = that.popup.visible();\n            var isMccb = this.options.columns && this.options.columns.length;\n            var offsetTop, popups;\n\n            if (length || that.options.noDataTemplate) {\n              // Check where animation container stays\n              popups = list.parent().add(list.closest(\".k-animation-container\")).show();\n\n              if (!list.parent().is(\":visible\")) {\n                popups.hide();\n                return;\n              }\n\n              height = that.listView.content[0].scrollHeight > height ? height : \"auto\";\n              popups.height(height);\n\n              if (height !== \"auto\") {\n                offsetTop = that._offsetHeight();\n                height = height - offsetTop;\n\n                if (isMccb) {\n                  height = height - (outerHeight($(that.footer)) || 0) - (outerHeight($(that.columnsHeader)) || 0);\n                }\n              }\n\n              if (isMccb) {\n                that.listView.content.outerHeight(height);\n              } else {\n                that.listView.content.parent().outerHeight(height);\n              }\n\n              if (!visible) {\n                popups.hide();\n              }\n            }\n\n            return height;\n          },\n          _openHandler: function (e) {\n            var current;\n\n            this._adjustListWidth();\n\n            if (this.trigger(OPEN)) {\n              e.preventDefault();\n            } else {\n              this._focused.attr(ARIA_EXPANDED, true);\n\n              this.ul.attr(ARIA_HIDDEN, false);\n              current = this.listView.focus();\n\n              if (current) {\n                this._focused.add(this.filterInput).attr(ARIA_ACTIVEDESCENDANT, current.attr(\"id\"));\n              }\n            }\n          },\n          _adjustListWidth: function () {\n            var that = this,\n                list = that.list.parent(),\n                width = list[0].style.width,\n                wrapper = that.wrapper,\n                computedStyle,\n                computedWidth;\n\n            if (!list.data(WIDTH) && width) {\n              return;\n            }\n\n            computedStyle = window.getComputedStyle ? window.getComputedStyle(wrapper[0], null) : 0;\n            computedWidth = parseFloat(computedStyle && computedStyle.width) || outerWidth(wrapper);\n\n            if (computedStyle && browser.msie) {\n              // getComputedStyle returns different box in IE.\n              computedWidth += parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight) + parseFloat(computedStyle.borderLeftWidth) + parseFloat(computedStyle.borderRightWidth);\n            }\n\n            if (list.css(\"box-sizing\") !== \"border-box\") {\n              width = computedWidth - (outerWidth(list) - list.width());\n            } else {\n              width = computedWidth;\n            }\n\n            list.css({\n              fontFamily: wrapper.css(\"font-family\"),\n              width: that.options.autoWidth ? \"auto\" : width,\n              minWidth: width,\n              whiteSpace: that.options.autoWidth ? \"nowrap\" : \"normal\"\n            }).data(WIDTH, width);\n            return true;\n          },\n          _closeHandler: function (e) {\n            if (this.trigger(CLOSE)) {\n              e.preventDefault();\n            } else {\n              this._focused.attr(ARIA_EXPANDED, false);\n\n              this.ul.attr(ARIA_HIDDEN, true);\n\n              this._focused.add(this.filterInput).removeAttr(ARIA_ACTIVEDESCENDANT);\n            }\n          },\n          _focusItem: function () {\n            var listView = this.listView;\n            var noFocusedItem = !listView.focus();\n            var index = last(listView.select());\n\n            if (index === undefined && this.options.highlightFirst && noFocusedItem) {\n              index = 0;\n            }\n\n            if (index !== undefined) {\n              listView.focus(index);\n            } else if (noFocusedItem) {\n              listView.scrollToIndex(0);\n            }\n          },\n          _calculateGroupPadding: function (height) {\n            var li = this.ul.children(\".k-first\").first();\n            var groupHeader = this.listView.content.prev(FIXED_GROUP_HEADER);\n            var padding = 0;\n            var direction = 'right';\n\n            if (groupHeader[0] && groupHeader[0].style.display !== \"none\") {\n              if (height !== \"auto\") {\n                padding = kendo.support.scrollbar();\n              }\n\n              if (this.element.parents('.k-rtl').length) {\n                direction = 'left';\n              }\n\n              padding += parseFloat(li.css(\"border-\" + direction + \"-width\"), 10) + parseFloat(li.children(GROUP_LABEL).css(\"padding-\" + direction), 10);\n              groupHeader.css(\"padding-\" + direction, padding);\n            }\n          },\n          _calculatePopupHeight: function (force) {\n            var height = this._height(this.dataSource.flatView().length || force);\n\n            this._calculateGroupPadding(height);\n\n            this._calculateColumnsHeaderPadding(height);\n          },\n          _calculateColumnsHeaderPadding: function (height) {\n            if (this.options.columns && this.options.columns.length) {\n              var list = this;\n              var isRtl = support.isRtl(list.wrapper);\n              var scrollbar = kendo.support.scrollbar();\n              list.columnsHeader.css(isRtl ? \"padding-left\" : \"padding-right\", height !== \"auto\" ? scrollbar : 0);\n            }\n          },\n          _refreshScroll: function () {\n            var listView = this.listView;\n            var enableYScroll = listView.element.height() > listView.content.height();\n\n            if (this.options.autoWidth) {\n              listView.content.css({\n                overflowX: \"hidden\",\n                overflowY: enableYScroll ? \"scroll\" : \"auto\"\n              });\n            }\n          },\n          _resizePopup: function (force) {\n            if (this.options.virtual) {\n              return;\n            }\n\n            if (!this.popup.element.is(\":visible\")) {\n              this.popup.one(\"open\", function (force) {\n                return function () {\n                  this._calculatePopupHeight(force);\n                }.bind(this);\n              }.call(this, force));\n              this.popup.one(ACTIVATE, this._refreshScroll.bind(this));\n            } else {\n              this._calculatePopupHeight(force);\n            }\n          },\n          _popup: function () {\n            var list = this;\n            list.list.wrap(\"<div>\");\n            list.popup = new ui.Popup(list.list.parent(), extend({}, list.options.popup, {\n              anchor: list.wrapper,\n              open: list._openHandler.bind(list),\n              close: list._closeHandler.bind(list),\n              animation: list.options.animation,\n              isRtl: support.isRtl(list.wrapper),\n              autosize: list.options.autoWidth\n            }));\n            list.popup.element.prepend(list.header).on(MOUSEDOWN + this.ns, this._listMousedown.bind(this));\n          },\n          _toggleHover: function (e) {\n            $(e.currentTarget).toggleClass(HOVER, e.type === MOUSEENTER);\n          },\n          _toggle: function (open, preventFocus) {\n            var that = this;\n            var touchEnabled = support.mobileOS && (support.touch || support.MSPointers || support.pointers);\n            open = open !== undefined ? open : !that.popup.visible();\n\n            if (!preventFocus && !touchEnabled && that._focused[0] !== activeElement()) {\n              that._prevent = true;\n\n              that._focused.trigger(FOCUS);\n\n              that._prevent = false;\n            }\n\n            that[open ? OPEN : CLOSE]();\n          },\n          _triggerCascade: function () {\n            var that = this;\n\n            if (!that._cascadeTriggered || that.value() !== unifyType(that._cascadedValue, typeof that.value())) {\n              that._cascadedValue = that.value();\n              that._cascadeTriggered = true;\n              that.trigger(CASCADE, {\n                userTriggered: that._userTriggered\n              });\n            }\n          },\n          _triggerChange: function () {\n            if (this._valueBeforeCascade !== this.value()) {\n              this.trigger(CHANGE);\n            }\n          },\n          _unbindDataSource: function () {\n            var that = this;\n            that.dataSource.unbind(REQUESTSTART, that._requestStartHandler).unbind(REQUESTEND, that._requestEndHandler).unbind(\"error\", that._errorHandler);\n          },\n          requireValueMapper: function (options, value) {\n            var hasValue = (options.value instanceof Array ? options.value.length : options.value) || (value instanceof Array ? value.length : value);\n\n            if (hasValue && options.virtual && typeof options.virtual.valueMapper !== \"function\") {\n              throw new Error(\"ValueMapper is not provided while the value is being set. See http://docs.telerik.com/kendo-ui/controls/editors/combobox/virtualization#the-valuemapper-function\");\n            }\n          }\n        });\n\n        function unifyType(value, type) {\n          if (value !== undefined && value !== \"\" && value !== null) {\n            if (type === \"boolean\") {\n              if (typeof value !== \"boolean\") {\n                value = value.toString().toLowerCase() === \"true\";\n              }\n\n              value = Boolean(value);\n            } else if (type === \"number\") {\n              value = Number(value);\n            } else if (type === \"string\") {\n              value = value.toString();\n            }\n          }\n\n          return value;\n        }\n\n        extend(List, {\n          inArray: function (node, parentNode) {\n            var idx,\n                length,\n                siblings = parentNode.children;\n\n            if (!node || node.parentNode !== parentNode) {\n              return -1;\n            }\n\n            for (idx = 0, length = siblings.length; idx < length; idx++) {\n              if (node === siblings[idx]) {\n                return idx;\n              }\n            }\n\n            return -1;\n          },\n          unifyType: unifyType\n        });\n        kendo.ui.List = List;\n        ui.Select = List.extend({\n          init: function (element, options) {\n            List.fn.init.call(this, element, options);\n            this._initial = this.element.val();\n          },\n          setDataSource: function (dataSource) {\n            var that = this;\n            var parent;\n            that.options.dataSource = dataSource;\n\n            that._dataSource();\n\n            if (that.listView.bound()) {\n              that._initialIndex = null;\n              that.listView._current = null;\n            }\n\n            that.listView.setDataSource(that.dataSource);\n\n            if (that.options.autoBind) {\n              that.dataSource.fetch();\n            }\n\n            parent = that._parentWidget();\n\n            if (parent) {\n              that._cascadeSelect(parent);\n            }\n          },\n          close: function () {\n            this.popup.close();\n          },\n          select: function (candidate) {\n            var that = this;\n\n            if (candidate === undefined) {\n              return that.selectedIndex;\n            } else {\n              return that._select(candidate).done(function () {\n                that._cascadeValue = that._old = that._accessor();\n                that._oldIndex = that.selectedIndex;\n              });\n            }\n          },\n          _accessor: function (value, idx) {\n            return this[this._isSelect ? \"_accessorSelect\" : \"_accessorInput\"](value, idx);\n          },\n          _accessorInput: function (value) {\n            var element = this.element[0];\n\n            if (value === undefined) {\n              return element.value;\n            } else {\n              if (value === null) {\n                value = \"\";\n              }\n\n              element.value = value;\n            }\n          },\n          _accessorSelect: function (value, idx) {\n            var element = this.element[0];\n            var hasValue;\n\n            if (value === undefined) {\n              return getSelectedOption(element).value || \"\";\n            }\n\n            getSelectedOption(element).selected = false;\n\n            if (idx === undefined) {\n              idx = -1;\n            }\n\n            hasValue = value !== null && value !== \"\";\n\n            if (hasValue && idx == -1) {\n              this._custom(value);\n            } else {\n              if (value) {\n                element.value = value;\n              } else {\n                element.selectedIndex = idx;\n              }\n            }\n          },\n          _syncValueAndText: function () {\n            return true;\n          },\n          _custom: function (value) {\n            var that = this;\n            var element = that.element;\n            var custom = that._customOption;\n\n            if (!custom) {\n              custom = $(\"<option/>\");\n              that._customOption = custom;\n              element.append(custom);\n            }\n\n            custom.text(value);\n            custom[0].selected = true;\n          },\n          _hideBusy: function () {\n            var that = this;\n            clearTimeout(that._busy);\n\n            that._arrowIcon.removeClass(LOADING);\n\n            that._focused.attr(ARIA_BUSY, false);\n\n            that._busy = null;\n\n            that._showClear();\n          },\n          _showBusy: function (e) {\n            var that = this;\n\n            if (e.isDefaultPrevented()) {\n              return;\n            }\n\n            that._request = true;\n\n            if (that._busy) {\n              return;\n            }\n\n            that._busy = setTimeout(function () {\n              if (that._arrowIcon) {\n                //destroyed after request start\n                that._focused.attr(ARIA_BUSY, true);\n\n                that._arrowIcon.addClass(LOADING);\n\n                that._hideClear();\n              }\n            }, 100);\n          },\n          _requestEnd: function () {\n            this._request = false;\n\n            this._hideBusy();\n          },\n          _dataSource: function () {\n            var that = this,\n                element = that.element,\n                options = that.options,\n                dataSource = options.dataSource || {},\n                idx;\n            dataSource = Array.isArray(dataSource) ? {\n              data: dataSource\n            } : dataSource;\n\n            if (that._isSelect) {\n              idx = element[0].selectedIndex;\n\n              if (idx > -1) {\n                options.index = idx;\n              }\n\n              dataSource.select = element;\n              dataSource.fields = [{\n                field: options.dataTextField\n              }, {\n                field: options.dataValueField\n              }];\n            }\n\n            if (that.dataSource) {\n              that._unbindDataSource();\n            } else {\n              that._requestStartHandler = that._showBusy.bind(that);\n              that._requestEndHandler = that._requestEnd.bind(that);\n              that._errorHandler = that._hideBusy.bind(that);\n            }\n\n            that.dataSource = kendo.data.DataSource.create(dataSource).bind(REQUESTSTART, that._requestStartHandler).bind(REQUESTEND, that._requestEndHandler).bind(\"error\", that._errorHandler);\n          },\n          _firstItem: function () {\n            this.listView.focusFirst();\n          },\n          _lastItem: function () {\n            this.listView.focusLast();\n          },\n          _nextItem: function () {\n            return this.listView.focusNext();\n          },\n          _prevItem: function () {\n            return this.listView.focusPrev();\n          },\n          _getNormalizedDataItem: function (candidate) {\n            var that = this,\n                listView = that.listView,\n                isIndex = typeof candidate === \"number\",\n                hasOptionLabel = that.optionLabel && that.optionLabel.length,\n                index;\n\n            if (isIndex) {\n              index = hasOptionLabel ? --candidate : candidate;\n            } else {\n              index = listView.getElementIndex(candidate);\n            }\n\n            return listView.dataItemByIndex(index);\n          },\n          _getNormalizedSelectCandidate: function (candidate) {\n            var that = this,\n                hasOptionLabel = that.optionLabel && that.optionLabel.length,\n                isIndex = typeof candidate === \"number\",\n                normalizedCandidate = candidate;\n\n            if (hasOptionLabel && isIndex) {\n              normalizedCandidate++;\n            }\n\n            return normalizedCandidate;\n          },\n          _move: function (e) {\n            var that = this;\n            var listView = that.listView;\n            var key = e.keyCode;\n            var down = key === keys.DOWN;\n            var isVirtual = that.options.virtual;\n            var dataItem;\n            var pressed;\n            var current;\n            var moveIndex;\n            var selectCandidate;\n\n            if (key === keys.UP || down) {\n              if (e.altKey) {\n                that.toggle(down);\n              } else {\n                if (!listView.bound() && !that.ul[0].firstChild) {\n                  if (!that._fetch) {\n                    that.dataSource.one(CHANGE, function () {\n                      that._fetch = false;\n\n                      that._move(e);\n                    });\n                    that._fetch = true;\n\n                    that._filterSource();\n                  }\n\n                  e.preventDefault();\n                  return true; //pressed\n                }\n\n                current = that._focus();\n\n                if (!that._fetch && (!current || current.hasClass(KSELECTED))) {\n                  if (down) {\n                    moveIndex = that._nextItem();\n\n                    if (isVirtual && moveIndex <= 0 || !that._focus() && !moveIndex) {\n                      that._lastItem();\n                    }\n                  } else {\n                    moveIndex = that._prevItem();\n\n                    if (isVirtual && moveIndex >= listView.dataSource.total() - 1 || !that._focus() && !moveIndex) {\n                      that._firstItem();\n                    }\n                  }\n                }\n\n                selectCandidate = that._getNormalizedSelectCandidate(that._get(that._focus()) || moveIndex || 0);\n\n                that._select(selectCandidate, true).done(function () {\n                  var done = function () {\n                    if (!that.popup.visible()) {\n                      that._blur();\n                    }\n\n                    if (that._cascadedValue === null) {\n                      that._cascadedValue = that.value();\n                    } else {\n                      that._cascadedValue = that.dataItem() ? that.dataItem()[that.options.dataValueField] || that.dataItem() : null;\n                    }\n                  };\n\n                  if (that.trigger(SELECT, {\n                    dataItem: that._getNormalizedDataItem(selectCandidate),\n                    item: that._focus()\n                  })) {\n                    that._select(current).done(done);\n                  } else {\n                    done();\n                  }\n                });\n              }\n\n              e.preventDefault();\n              pressed = true;\n            } else if (key === keys.ENTER || key === keys.TAB) {\n              if (that.popup.visible()) {\n                e.preventDefault();\n              }\n\n              current = that._focus();\n              dataItem = that.dataItem();\n\n              if (!that.popup.visible() && (!dataItem || that.text() !== that._text(dataItem))) {\n                current = null;\n              }\n\n              var activeFilter = that.filterInput && that.filterInput[0] === activeElement();\n              var selection;\n\n              if (current) {\n                dataItem = listView.dataItemByIndex(listView.getElementIndex(current));\n                var shouldTrigger = true;\n\n                if (dataItem) {\n                  shouldTrigger = that._value(dataItem) !== List.unifyType(that.value(), typeof that._value(dataItem));\n                }\n\n                if (shouldTrigger && that.trigger(SELECT, {\n                  dataItem: dataItem,\n                  item: current\n                })) {\n                  return;\n                }\n\n                selection = that._select(current);\n              } else if (that.input) {\n                if (that._syncValueAndText() || that._isSelect) {\n                  that._accessor(that.input.val());\n                }\n\n                that.listView.value(that.input.val());\n              }\n\n              if (that._focusElement) {\n                that._focusElement(that.wrapper);\n              }\n\n              if (activeFilter && key === keys.TAB) {\n                that.wrapper.focusout();\n              } else {\n                if (selection && typeof selection.done === \"function\") {\n                  selection.done(function () {\n                    that._blur();\n                  });\n                } else {\n                  that._blur();\n                }\n              }\n\n              that.close();\n              pressed = true;\n            } else if (key === keys.ESC) {\n              if (that.popup.visible()) {\n                e.preventDefault();\n              }\n\n              that.close();\n              pressed = true;\n            } else if (that.popup.visible() && (key === keys.PAGEDOWN || key === keys.PAGEUP)) {\n              e.preventDefault();\n              var direction = key === keys.PAGEDOWN ? 1 : -1;\n              listView.scrollWith(direction * listView.screenHeight());\n              pressed = true;\n            }\n\n            return pressed;\n          },\n          _fetchData: function () {\n            var that = this;\n            var hasItems = !!that.dataSource.view().length;\n\n            if (that._request || that.options.cascadeFrom) {\n              return;\n            }\n\n            if (!that.listView.bound() && !that._fetch && !hasItems) {\n              that._fetch = true;\n              that.dataSource.fetch().done(function () {\n                that._fetch = false;\n              });\n            }\n          },\n          _options: function (data, optionLabel, value) {\n            var that = this,\n                element = that.element,\n                htmlElement = element[0],\n                length = data.length,\n                options = \"\",\n                option,\n                dataItem,\n                dataText,\n                dataValue,\n                idx = 0;\n\n            if (optionLabel) {\n              options = optionLabel;\n            }\n\n            for (; idx < length; idx++) {\n              option = \"<option\";\n              dataItem = data[idx];\n              dataText = that._text(dataItem);\n              dataValue = that._value(dataItem);\n\n              if (dataValue !== undefined) {\n                dataValue += \"\";\n\n                if (dataValue.indexOf('\"') !== -1) {\n                  dataValue = dataValue.replace(quotRegExp, \"&quot;\");\n                }\n\n                option += ' value=\"' + dataValue + '\"';\n              }\n\n              option += \">\";\n\n              if (dataText !== undefined) {\n                option += htmlEncode(dataText);\n              }\n\n              option += \"</option>\";\n              options += option;\n            }\n\n            element.html(options);\n\n            if (value !== undefined) {\n              htmlElement.value = value;\n\n              if (htmlElement.value && !value) {\n                htmlElement.selectedIndex = -1;\n              }\n            }\n\n            if (htmlElement.selectedIndex !== -1) {\n              option = getSelectedOption(htmlElement);\n\n              if (option) {\n                option.setAttribute(SELECTED, SELECTED);\n              }\n            }\n          },\n          _reset: function () {\n            var that = this,\n                element = that.element,\n                formId = element.attr(\"form\"),\n                form = formId ? $(\"#\" + formId) : element.closest(\"form\");\n\n            if (form[0]) {\n              that._resetHandler = function () {\n                setTimeout(function () {\n                  that.value(that._initial);\n                });\n              };\n\n              that._form = form.on(\"reset\", that._resetHandler);\n            }\n          },\n          _parentWidget: function () {\n            var name = this.options.name;\n\n            if (!this.options.cascadeFrom) {\n              return;\n            }\n\n            var parentElement = $(\"#\" + this.options.cascadeFrom);\n            var parent = parentElement.data(\"kendo\" + name);\n\n            if (!parent) {\n              for (var i = 0; i < alternativeNames[name].length; i += 1) {\n                parent = parentElement.data(\"kendo\" + alternativeNames[name][i]);\n\n                if (!!parent) {\n                  break;\n                }\n              }\n            }\n\n            return parent;\n          },\n          _cascade: function () {\n            var that = this;\n            var options = that.options;\n            var cascade = options.cascadeFrom;\n            var parent;\n\n            if (cascade) {\n              parent = that._parentWidget();\n\n              if (!parent) {\n                return;\n              }\n\n              that._cascadeHandlerProxy = that._cascadeHandler.bind(that);\n              that._cascadeFilterRequests = [];\n              options.autoBind = false;\n              parent.bind(\"set\", function () {\n                //will cascade\n                that.one(\"set\", function (e) {\n                  //get your value\n                  that._selectedValue = e.value || that._accessor();\n                });\n              });\n              parent.first(CASCADE, that._cascadeHandlerProxy); //refresh was called\n\n              if (parent.listView.bound()) {\n                that._toggleCascadeOnFocus();\n\n                that._cascadeSelect(parent);\n              } else {\n                parent.one(DATA_BOUND, function () {\n                  that._toggleCascadeOnFocus();\n\n                  if (parent.popup.visible()) {\n                    parent._focused.trigger(FOCUS);\n                  }\n                });\n\n                if (!parent.value()) {\n                  that.enable(false);\n                }\n              }\n            }\n          },\n          _toggleCascadeOnFocus: function () {\n            var that = this;\n\n            var parent = that._parentWidget();\n\n            var focusout = isIE && parent instanceof ui.DropDownList ? BLUR : FOCUSOUT;\n\n            parent._focused.add(parent.filterInput).on(FOCUS, function () {\n              parent.unbind(CASCADE, that._cascadeHandlerProxy);\n              parent.unbind(CHANGE, that._cascadeHandlerProxy);\n              parent.first(CHANGE, that._cascadeHandlerProxy);\n            });\n\n            parent._focused.add(parent.filterInput).on(focusout, function () {\n              parent.unbind(CHANGE, that._cascadeHandlerProxy);\n              parent.unbind(CASCADE, that._cascadeHandlerProxy);\n              parent.first(CASCADE, that._cascadeHandlerProxy);\n            });\n          },\n          _cascadeHandler: function (e) {\n            var parent = this._parentWidget();\n\n            var valueBeforeCascade = this.value();\n            this._userTriggered = e.userTriggered || parent._userTriggered;\n\n            if (this.listView.bound()) {\n              this._clearSelection(parent, true);\n            }\n\n            this._cascadeSelect(parent, valueBeforeCascade);\n          },\n          _cascadeChange: function (parent) {\n            var that = this;\n\n            var value = that._accessor() || that._selectedValue;\n\n            if (!that._cascadeFilterRequests.length) {\n              that._selectedValue = null;\n            }\n\n            if (that._userTriggered) {\n              that._clearSelection(parent, true);\n            } else if (value) {\n              if (value !== unifyType(that.listView.value()[0], typeof value)) {\n                that.value(value);\n              }\n\n              if (!that.dataSource.view()[0] || that.selectedIndex === -1) {\n                that._clearSelection(parent, true);\n              }\n            } else if (that.dataSource.flatView().length) {\n              that.select(that.options.index);\n            }\n\n            that.enable();\n\n            that._triggerCascade();\n\n            that._triggerChange();\n\n            that._userTriggered = false;\n          },\n          _cascadeSelect: function (parent, valueBeforeCascade) {\n            var that = this;\n            var dataItem = parent.dataItem();\n            var filterValue = dataItem ? dataItem[that.options.cascadeFromParentField] || parent._value(dataItem) : null;\n            var valueField = that.options.cascadeFromField || parent.options.dataValueField;\n            var expressions;\n            that._valueBeforeCascade = valueBeforeCascade !== undefined ? valueBeforeCascade : that.value();\n\n            if (filterValue || filterValue === 0) {\n              expressions = that.dataSource.filter() || {};\n              removeFiltersForField(expressions, valueField);\n\n              var handler = function () {\n                var currentHandler = that._cascadeFilterRequests.shift();\n\n                if (currentHandler) {\n                  that.unbind('dataBound', currentHandler);\n                }\n\n                currentHandler = that._cascadeFilterRequests[0];\n\n                if (currentHandler) {\n                  that.first('dataBound', currentHandler);\n                }\n\n                that._cascadeChange(parent);\n              };\n\n              that._cascadeFilterRequests.push(handler);\n\n              if (that._cascadeFilterRequests.length === 1) {\n                that.first('dataBound', handler);\n              }\n\n              that._cascading = true;\n\n              that._filterSource({\n                field: valueField,\n                operator: \"eq\",\n                value: filterValue\n              });\n\n              that._cascading = false;\n            } else {\n              that.enable(false);\n\n              that._clearSelection(parent);\n\n              that._triggerCascade();\n\n              that._triggerChange();\n\n              that._userTriggered = false;\n            }\n          }\n        });\n        var STATIC_LIST_NS = \".StaticList\";\n        var StaticList = kendo.ui.DataBoundWidget.extend({\n          init: function (element, options) {\n            Widget.fn.init.call(this, element, options);\n            this.element.attr(\"role\", \"listbox\").on(CLICK + STATIC_LIST_NS, \"li\", this._click.bind(this)).on(MOUSEENTER + STATIC_LIST_NS, \"li\", function () {\n              $(this).addClass(HOVER);\n            }).on(MOUSELEAVE + STATIC_LIST_NS, \"li\", function () {\n              $(this).removeClass(HOVER);\n            });\n\n            if (options && options.ariaLabel) {\n              this.element.attr(ARIA_LABEL, options.ariaLabel);\n            } else if (options && options.ariaLabelledBy) {\n              this.element.attr(ARIA_LABELLEDBY, options.ariaLabelledBy);\n            }\n\n            if (support.touch) {\n              this._touchHandlers();\n            }\n\n            if (this.options.selectable === \"multiple\") {\n              this.element.attr(ARIA_MULTISELECTABLE, true);\n            }\n\n            if (this.options.columns && this.options.columns.length) {\n              var thead = this.element.parent().find('.k-table-thead');\n              var row = $('<tr class=\"k-table-group-row\">' + '<th class=\"k-table-th\" colspan=\"' + this.options.columns.length + '\"></th>' + '</tr>');\n              thead.append(row);\n              this.header = row.find(\".k-table-th\");\n              this.content = this.element.wrap(\"<div class='k-table-body k-table-scroller' unselectable='on'></div>\").parent();\n              this.element.addClass(TABLE_LIST);\n            } else {\n              this.content = this.element.wrap(\"<div class='k-list-content k-list-scroller' unselectable='on'></div>\").parent();\n              this.header = this.content.before('<div class=\"k-list-group-sticky-header\" style=\"display:none\"></div>').prev();\n              this.element.addClass(LIST_UL);\n            }\n\n            this.bound(false);\n            this._optionID = kendo.guid();\n            this._selectedIndices = [];\n            this._view = [];\n            this._dataItems = [];\n            this._values = [];\n            var value = this.options.value;\n\n            if (value) {\n              this._values = Array.isArray(value) ? value.slice(0) : [value];\n            }\n\n            this._getter();\n\n            this._templates();\n\n            this.setDataSource(this.options.dataSource);\n\n            this._createOnScrollProxy();\n          },\n          options: {\n            name: \"StaticList\",\n            dataValueField: null,\n            valuePrimitive: false,\n            selectable: true,\n            template: null,\n            groupTemplate: null,\n            fixedGroupTemplate: null,\n            ariaLabel: null,\n            ariaLabelledBy: null\n          },\n          events: [CLICK, CHANGE, ACTIVATE, DEACTIVATE, DATA_BINDING, DATA_BOUND, SELECTED_ITEM_CHANGE],\n          setDataSource: function (source) {\n            var that = this;\n            var dataSource = source || {};\n            var value;\n            dataSource = Array.isArray(dataSource) ? {\n              data: dataSource\n            } : dataSource;\n            dataSource = kendo.data.DataSource.create(dataSource);\n\n            if (that.dataSource) {\n              that.dataSource.unbind(CHANGE, that._refreshHandler);\n              value = that.value();\n              that.value([]);\n              that.bound(false);\n              that.value(value);\n            } else {\n              that._refreshHandler = that.refresh.bind(that);\n            }\n\n            that.setDSFilter(dataSource.filter());\n            that.dataSource = dataSource.bind(CHANGE, that._refreshHandler);\n\n            that._fixedHeader();\n          },\n          _touchHandlers: function () {\n            var that = this;\n            var startY;\n            var endY;\n\n            var tapPosition = function (event) {\n              return (event.originalEvent || event).changedTouches[0].pageY;\n            };\n\n            that.element.on(\"touchstart\" + STATIC_LIST_NS, function (e) {\n              startY = tapPosition(e);\n            });\n            that.element.on(\"touchend\" + STATIC_LIST_NS, function (e) {\n              if (e.isDefaultPrevented()) {\n                return;\n              }\n\n              endY = tapPosition(e);\n\n              if (Math.abs(endY - startY) < 10) {\n                that._touchTriggered = true;\n\n                that._triggerClick($(e.target).closest(ITEMSELECTOR).get(0));\n              }\n            });\n          },\n          skip: function () {\n            return this.dataSource.skip();\n          },\n          setOptions: function (options) {\n            Widget.fn.setOptions.call(this, options);\n\n            this._getter();\n\n            this._templates();\n\n            this._render();\n          },\n          destroy: function () {\n            this.element.off(STATIC_LIST_NS);\n\n            if (this._refreshHandler) {\n              this.dataSource.unbind(CHANGE, this._refreshHandler);\n            }\n\n            clearTimeout(this._scrollId);\n            Widget.fn.destroy.call(this);\n          },\n          dataItemByIndex: function (index) {\n            return this.dataSource.flatView()[index];\n          },\n          screenHeight: function () {\n            return this.content[0].clientHeight;\n          },\n          scrollToIndex: function (index) {\n            var item = this.element[0].children[index];\n\n            if (item) {\n              this.scroll(item);\n            }\n          },\n          scrollWith: function (value) {\n            this.content.scrollTop(this.content.scrollTop() + value);\n          },\n          scroll: function (item) {\n            if (!item) {\n              return;\n            }\n\n            if (item[0]) {\n              item = item[0];\n            }\n\n            var content = this.content[0],\n                itemOffsetTop = item.offsetTop,\n                itemOffsetHeight = item.offsetHeight,\n                contentScrollTop = content.scrollTop,\n                contentOffsetHeight = content.clientHeight,\n                bottomDistance = itemOffsetTop + itemOffsetHeight;\n\n            if (contentScrollTop > itemOffsetTop) {\n              contentScrollTop = itemOffsetTop;\n            } else if (bottomDistance > contentScrollTop + contentOffsetHeight) {\n              contentScrollTop = bottomDistance - contentOffsetHeight;\n            }\n\n            content.scrollTop = contentScrollTop;\n          },\n          selectedDataItems: function (dataItems) {\n            if (dataItems === undefined) {\n              return this._dataItems.slice();\n            }\n\n            this._dataItems = dataItems;\n            this._values = this._getValues(dataItems);\n          },\n          _getValues: function (dataItems) {\n            var getter = this._valueGetter;\n            return $.map(dataItems, function (dataItem) {\n              return getter(dataItem);\n            });\n          },\n          focusNext: function () {\n            var current = this.focus();\n\n            if (!current) {\n              current = 0;\n            } else {\n              current = current.next();\n            }\n\n            this.focus(current);\n          },\n          focusPrev: function () {\n            var current = this.focus();\n\n            if (!current) {\n              current = this.element[0].children.length - 1;\n            } else {\n              current = current.prev();\n            }\n\n            this.focus(current);\n          },\n          focusFirst: function () {\n            this.focus(this.element[0].children[0]);\n          },\n          focusLast: function () {\n            this.focus(last(this.element[0].children));\n          },\n          focus: function (candidate) {\n            var that = this;\n            var id = that._optionID;\n            var hasCandidate;\n\n            if (candidate === undefined) {\n              return that._current;\n            }\n\n            candidate = last(that._get(candidate));\n            candidate = $(this.element[0].children[candidate]);\n\n            if (that._current) {\n              that._current.removeClass(FOCUSED).removeAttr(ID);\n\n              that.trigger(DEACTIVATE);\n            }\n\n            hasCandidate = !!candidate[0];\n\n            if (hasCandidate) {\n              candidate.addClass(FOCUSED);\n              that.scroll(candidate);\n              candidate.attr(\"id\", id);\n            }\n\n            that._current = hasCandidate ? candidate : null;\n            that.trigger(ACTIVATE);\n          },\n          focusIndex: function () {\n            return this.focus() ? this.focus().index() : undefined;\n          },\n          skipUpdate: function (skipUpdate) {\n            this._skipUpdate = skipUpdate;\n          },\n          select: function (indices) {\n            var that = this;\n            var selectable = that.options.selectable;\n            var singleSelection = selectable !== \"multiple\" && selectable !== false;\n            var selectedIndices = that._selectedIndices;\n            var uiSelectedIndices = [this.element.find(\".k-selected\").index()];\n            var added = [];\n            var removed = [];\n            var result;\n\n            if (indices === undefined) {\n              return selectedIndices.slice();\n            }\n\n            indices = that._get(indices);\n\n            if (indices.length === 1 && indices[0] === -1) {\n              indices = [];\n            }\n\n            var deferred = $.Deferred().resolve();\n            var filtered = that.isFiltered();\n\n            if (filtered && !singleSelection && that._deselectFiltered(indices)) {\n              return deferred;\n            }\n\n            if (singleSelection && !filtered && $.inArray(last(indices), selectedIndices) !== -1 && $.inArray(last(indices), uiSelectedIndices) !== -1) {\n              if (that._dataItems.length && that._view.length) {\n                that._dataItems = [that._view[selectedIndices[0]].item];\n              }\n\n              return deferred;\n            }\n\n            result = that._deselect(indices);\n            removed = result.removed;\n            indices = result.indices;\n\n            if (indices.length) {\n              if (singleSelection) {\n                indices = [last(indices)];\n              }\n\n              added = that._select(indices);\n            }\n\n            if (added.length || removed.length) {\n              that._valueComparer = null;\n              that.trigger(CHANGE, {\n                added: added,\n                removed: removed\n              });\n            }\n\n            return deferred;\n          },\n          removeAt: function (position) {\n            this._selectedIndices.splice(position, 1);\n\n            this._values.splice(position, 1);\n\n            this._valueComparer = null;\n            return {\n              position: position,\n              dataItem: this._dataItems.splice(position, 1)[0]\n            };\n          },\n          setValue: function (value) {\n            value = Array.isArray(value) || value instanceof ObservableArray ? value.slice(0) : [value];\n            this._values = value;\n            this._valueComparer = null;\n          },\n          value: function (value) {\n            var that = this;\n            var deferred = that._valueDeferred;\n            var indices;\n\n            if (value === undefined) {\n              return that._values.slice();\n            }\n\n            that.setValue(value);\n\n            if (!deferred || deferred.state() === \"resolved\") {\n              that._valueDeferred = deferred = $.Deferred();\n            }\n\n            if (that.bound()) {\n              indices = that._valueIndices(that._values);\n\n              if (that.options.selectable === \"multiple\") {\n                that.select(-1);\n              }\n\n              that.select(indices);\n              deferred.resolve();\n            }\n\n            that._skipUpdate = false;\n            return deferred;\n          },\n          items: function () {\n            return this.element.children(ITEMSELECTOR);\n          },\n          _click: function (e) {\n            if (this._touchTriggered) {\n              this._touchTriggered = false;\n              return;\n            }\n\n            if (!e.isDefaultPrevented()) {\n              this._triggerClick(e.currentTarget);\n            }\n          },\n          _createOnScrollProxy: function () {\n            var onScrollProxy = function () {\n              var that = this;\n              clearTimeout(that._scrollId);\n              that._scrollId = setTimeout(function () {\n                that._renderHeader();\n              }, 50);\n            };\n\n            this._onScroll = onScrollProxy.bind(this);\n          },\n          _triggerClick: function (item) {\n            if (!this.trigger(CLICK, {\n              item: $(item)\n            })) {\n              this.select(item);\n            }\n          },\n          _valueExpr: function (type, values) {\n            var that = this;\n            var idx = 0;\n            var body;\n            var comparer;\n            var normalized = [];\n\n            if (!that._valueComparer || that._valueType !== type) {\n              that._valueType = type;\n\n              for (; idx < values.length; idx++) {\n                normalized.push(unifyType(values[idx], type));\n              }\n\n              body = \"for (var idx = 0; idx < \" + normalized.length + \"; idx++) {\" + \" if (current === values[idx]) {\" + \"   return idx;\" + \" }\" + \"} \" + \"return -1;\";\n              comparer = new Function(\"current\", \"values\", body);\n\n              that._valueComparer = function (current) {\n                return comparer(current, normalized);\n              };\n            }\n\n            return that._valueComparer;\n          },\n          _dataItemPosition: function (dataItem, values) {\n            var value = this._valueGetter(dataItem);\n\n            var valueExpr = this._valueExpr(typeof value, values);\n\n            return valueExpr(value);\n          },\n          _getter: function () {\n            this._valueGetter = kendo.getter(this.options.dataValueField);\n          },\n          _deselect: function (indices) {\n            var that = this;\n            var children = that.element[0].children;\n            var selectable = that.options.selectable;\n            var selectedIndices = that._selectedIndices;\n            var dataItems = that._dataItems;\n            var values = that._values;\n            var removed = [];\n            var i = 0;\n            var j;\n            var index, selectedIndex;\n            var removedIndices = 0;\n            indices = indices.slice();\n\n            if (selectable === true || !indices.length) {\n              for (; i < selectedIndices.length; i++) {\n                $(children[selectedIndices[i]]).removeClass(KSELECTED).attr(ARIA_SELECTED, false);\n                removed.push({\n                  position: i,\n                  dataItem: dataItems[i]\n                });\n              }\n\n              that._values = [];\n              that._dataItems = [];\n              that._selectedIndices = [];\n            } else if (selectable === \"multiple\") {\n              for (; i < indices.length; i++) {\n                index = indices[i];\n\n                if (!$(children[index]).hasClass(KSELECTED)) {\n                  continue;\n                }\n\n                for (j = 0; j < selectedIndices.length; j++) {\n                  selectedIndex = selectedIndices[j];\n\n                  if (selectedIndex === index) {\n                    $(children[selectedIndex]).removeClass(KSELECTED).attr(ARIA_SELECTED, false);\n                    var dataItem = this._view[index].item;\n\n                    var position = this._dataItemPosition(dataItem, this._values);\n\n                    removed.push({\n                      position: position,\n                      dataItem: dataItem\n                    });\n                    dataItems.splice(j, 1);\n                    selectedIndices.splice(j, 1);\n                    indices.splice(i, 1);\n                    values.splice(j, 1);\n                    removedIndices += 1;\n                    i -= 1;\n                    j -= 1;\n                    break;\n                  }\n                }\n              }\n            }\n\n            return {\n              indices: indices,\n              removed: removed\n            };\n          },\n          _deselectFiltered: function (indices) {\n            var children = this.element[0].children;\n            var dataItem, index, position;\n            var removed = [];\n            var idx = 0;\n\n            for (; idx < indices.length; idx++) {\n              index = indices[idx];\n              dataItem = this._view[index].item;\n              position = this._dataItemPosition(dataItem, this._values);\n\n              if (position > -1) {\n                removed.push(this.removeAt(position));\n                $(children[index]).removeClass(KSELECTED);\n              }\n            }\n\n            if (removed.length) {\n              this.trigger(CHANGE, {\n                added: [],\n                removed: removed\n              });\n              return true;\n            }\n\n            return false;\n          },\n          _select: function (indices) {\n            var that = this;\n            var children = that.element[0].children;\n            var data = that._view;\n            var dataItem, index;\n            var added = [];\n            var idx = 0;\n\n            if (last(indices) !== -1) {\n              that.focus(indices);\n            }\n\n            for (; idx < indices.length; idx++) {\n              index = indices[idx];\n              dataItem = data[index];\n\n              if (index === -1 || !dataItem) {\n                continue;\n              }\n\n              dataItem = dataItem.item;\n\n              that._selectedIndices.push(index);\n\n              that._dataItems.push(dataItem);\n\n              that._values.push(that._valueGetter(dataItem));\n\n              $(children[index]).addClass(KSELECTED).attr(ARIA_SELECTED, true);\n              added.push({\n                dataItem: dataItem\n              });\n            }\n\n            return added;\n          },\n          getElementIndex: function (element) {\n            return $(element).data(\"offset-index\");\n          },\n          _get: function (candidate) {\n            if (typeof candidate === \"number\") {\n              candidate = [candidate];\n            } else if (!isArray(candidate)) {\n              candidate = this.getElementIndex(candidate);\n              candidate = [candidate !== undefined ? candidate : -1];\n            }\n\n            return candidate;\n          },\n          _template: function () {\n            var that = this;\n            var options = that.options;\n            var template = options.template;\n\n            if (!template) {\n              template = kendo.template('<li tabindex=\"-1\" role=\"option\" unselectable=\"on\" class=\"k-list-item\"><span class=\"k-list-item-text\">${' + kendo.expr(options.dataTextField, \"data\") + \"}</span></li>\", {\n                useWithBlock: false\n              });\n            } else {\n              template = kendo.template(template);\n\n              template = function (data) {\n                return '<li tabindex=\"-1\" role=\"option\" unselectable=\"on\" class=\"k-list-item\">' + template(data) + \"</li>\";\n              };\n            }\n\n            return template;\n          },\n          _templates: function () {\n            var template;\n            var options = this.options;\n            var templates = {\n              template: options.template,\n              groupTemplate: options.groupTemplate,\n              fixedGroupTemplate: options.fixedGroupTemplate\n            };\n\n            if (options.columns) {\n              for (var i = 0; i < options.columns.length; i++) {\n                var currentColumn = options.columns[i];\n                var templateText = currentColumn.field ? currentColumn.field.toString() : TEXT;\n                templates[\"column\" + i] = currentColumn.template || \"#: \" + templateText + \"#\";\n              }\n            }\n\n            for (var key in templates) {\n              template = templates[key];\n\n              if (template && typeof template !== \"function\") {\n                templates[key] = kendo.template(template);\n              }\n            }\n\n            this.templates = templates;\n          },\n          _normalizeIndices: function (indices) {\n            var newIndices = [];\n            var idx = 0;\n\n            for (; idx < indices.length; idx++) {\n              if (indices[idx] !== undefined) {\n                newIndices.push(indices[idx]);\n              }\n            }\n\n            return newIndices;\n          },\n          _valueIndices: function (values, indices) {\n            var data = this._view;\n            var idx = 0;\n            var index;\n            indices = indices ? indices.slice() : [];\n\n            if (!values.length) {\n              return [];\n            }\n\n            for (; idx < data.length; idx++) {\n              index = this._dataItemPosition(data[idx].item, values);\n\n              if (index !== -1) {\n                indices[index] = idx;\n              }\n            }\n\n            return this._normalizeIndices(indices);\n          },\n          _firstVisibleItem: function () {\n            var element = this.element[0];\n            var content = this.content[0];\n            var scrollTop = content.scrollTop;\n            var itemHeight = $(element.children[0]).height();\n            var itemIndex = Math.floor(scrollTop / itemHeight) || 0;\n            var item = element.children[itemIndex] || element.lastChild;\n            var forward = item.offsetTop < scrollTop;\n\n            while (item) {\n              if (forward) {\n                if (item.offsetTop + itemHeight > scrollTop || !item.nextSibling) {\n                  break;\n                }\n\n                item = item.nextSibling;\n              } else {\n                if (item.offsetTop <= scrollTop || !item.previousSibling) {\n                  break;\n                }\n\n                item = item.previousSibling;\n              }\n            }\n\n            return this._view[$(item).data(\"offset-index\")];\n          },\n          _fixedHeader: function () {\n            if (this.isGrouped() && this.templates.fixedGroupTemplate) {\n              if (this.header.closest(GROUP_ROW_SEL).length) {\n                this.header.closest(GROUP_ROW_SEL).show();\n              } else {\n                this.header.show();\n              }\n\n              this.content.scroll(this._onScroll);\n            } else {\n              if (this.header.closest(GROUP_ROW_SEL).length) {\n                this.header.closest(GROUP_ROW_SEL).hide();\n              } else {\n                this.header.hide();\n              }\n\n              this.content.off(\"scroll\", this._onScroll);\n            }\n          },\n          _renderHeader: function () {\n            var template = this.templates.fixedGroupTemplate;\n\n            if (!template) {\n              return;\n            }\n\n            var visibleItem = this._firstVisibleItem();\n\n            if (visibleItem && visibleItem.group.toString().length) {\n              this.header.html(template(visibleItem.group));\n            }\n          },\n          _renderItem: function (context) {\n            var item = '<li tabindex=\"-1\" role=\"option\" unselectable=\"on\" ';\n            var dataItem = context.item;\n            var notFirstItem = context.index !== 0;\n            var selected = context.selected;\n            var isGrouped = this.isGrouped();\n            var hasColumns = this.options.columns && this.options.columns.length;\n            var altRow = context.index % 2 === 1 ? \" k-table-alt-row\" : \"\";\n\n            if (hasColumns) {\n              item += 'class=\"k-table-row' + altRow;\n            } else {\n              item += 'class=\"k-list-item';\n            }\n\n            if (notFirstItem && context.newGroup) {\n              item += ' k-first';\n            }\n\n            if (context.isLastGroupedItem && hasColumns) {\n              item += ' k-last';\n            }\n\n            if (selected) {\n              item += ' k-selected';\n            }\n\n            item += '\" aria-selected=\"' + (selected ? \"true\" : \"false\") + '\" data-offset-index=\"' + context.index + '\">';\n\n            if (hasColumns) {\n              item += this._renderColumns(dataItem);\n            } else {\n              item += '<span class=\"k-list-item-text\">';\n              item += this.templates.template(dataItem);\n              item += '</span>';\n            }\n\n            if (notFirstItem && context.newGroup) {\n              if (hasColumns) {\n                item += '<span class=\"k-table-td k-table-group-td\"><span>' + this.templates.groupTemplate(context.group) + '</span></span>';\n              } else {\n                item += '<div class=\"k-list-item-group-label\">' + this.templates.groupTemplate(context.group) + '</div>';\n              }\n            } else if (isGrouped && hasColumns) {\n              item += '<span class=\"k-table-td k-table-spacer-td\"></span>';\n            }\n\n            return item + \"</li>\";\n          },\n          _renderColumns: function (dataItem) {\n            var item = \"\";\n\n            for (var i = 0; i < this.options.columns.length; i++) {\n              var currentWidth = this.options.columns[i].width;\n              var currentWidthInt = parseInt(currentWidth, 10);\n              var widthStyle = '';\n\n              if (currentWidth && !isNaN(currentWidthInt)) {\n                widthStyle += \"style='width:\";\n                widthStyle += currentWidthInt;\n                widthStyle += percentageUnitsRegex.test(currentWidth) ? \"%\" : \"px\";\n                widthStyle += \";'\";\n              }\n\n              item += \"<span class='k-table-td' \" + widthStyle + \">\";\n              item += this.templates[\"column\" + i](dataItem);\n              item += \"</span>\";\n            }\n\n            return item;\n          },\n          _render: function () {\n            var html = \"\";\n            var i = 0;\n            var idx = 0;\n            var context;\n            var dataContext = [];\n            var view = this.dataSource.view();\n            var values = this.value();\n            var group, newGroup, j;\n            var isGrouped = this.isGrouped();\n\n            if (isGrouped) {\n              for (i = 0; i < view.length; i++) {\n                group = view[i];\n                newGroup = true;\n\n                for (j = 0; j < group.items.length; j++) {\n                  context = {\n                    selected: this._selected(group.items[j], values),\n                    item: group.items[j],\n                    group: group.value,\n                    newGroup: newGroup,\n                    isLastGroupedItem: j === group.items.length - 1,\n                    index: idx\n                  };\n                  dataContext[idx] = context;\n                  idx += 1;\n                  html += this._renderItem(context);\n                  newGroup = false;\n                }\n              }\n            } else {\n              for (i = 0; i < view.length; i++) {\n                context = {\n                  selected: this._selected(view[i], values),\n                  item: view[i],\n                  index: i\n                };\n                dataContext[i] = context;\n                html += this._renderItem(context);\n              }\n            }\n\n            this._view = dataContext;\n            this.element[0].innerHTML = html;\n\n            if (isGrouped && dataContext.length) {\n              this._renderHeader();\n            }\n          },\n          _selected: function (dataItem, values) {\n            var select = !this.isFiltered() || this.options.selectable === \"multiple\";\n            return select && this._dataItemPosition(dataItem, values) !== -1;\n          },\n          setDSFilter: function (filter) {\n            this._lastDSFilter = extend({}, filter);\n          },\n          isFiltered: function () {\n            if (!this._lastDSFilter) {\n              this.setDSFilter(this.dataSource.filter());\n            }\n\n            return !kendo.data.Query.compareFilters(this.dataSource.filter(), this._lastDSFilter);\n          },\n          refresh: function (e) {\n            var that = this;\n            var action = e && e.action;\n            var skipUpdateOnBind = that.options.skipUpdateOnBind;\n            var isItemChange = action === \"itemchange\";\n            var result;\n            that.trigger(DATA_BINDING);\n\n            that._angularItems(\"cleanup\");\n\n            that._fixedHeader();\n\n            that._render();\n\n            that.bound(true);\n\n            if (isItemChange || action === \"remove\") {\n              result = mapChangedItems(that._dataItems, e.items);\n\n              if (result.changed.length) {\n                if (isItemChange) {\n                  that.trigger(SELECTED_ITEM_CHANGE, {\n                    items: result.changed\n                  });\n                } else {\n                  that.value(that._getValues(result.unchanged));\n                }\n              }\n            } else if (that.isFiltered() || that._skipUpdate || that._emptySearch) {\n              that.focus(0);\n\n              if (that._skipUpdate) {\n                that._skipUpdate = false;\n                that._selectedIndices = that._valueIndices(that._values, that._selectedIndices);\n              }\n            } else if (!skipUpdateOnBind && (!action || action === \"add\")) {\n              that.value(that._values);\n            }\n\n            if (that._valueDeferred) {\n              that._valueDeferred.resolve();\n            }\n\n            that._angularItems(\"compile\");\n\n            that.trigger(DATA_BOUND);\n          },\n          bound: function (bound) {\n            if (bound === undefined) {\n              return this._bound;\n            }\n\n            this._bound = bound;\n          },\n          isGrouped: function () {\n            return (this.dataSource.group() || []).length;\n          }\n        });\n        ui.plugin(StaticList);\n\n        function last(list) {\n          return list[list.length - 1];\n        }\n\n        function getSelectedOption(select) {\n          var index = select.selectedIndex;\n          return index > -1 ? select.options[index] : {};\n        }\n\n        function mapChangedItems(selected, itemsToMatch) {\n          var itemsLength = itemsToMatch.length;\n          var selectedLength = selected.length;\n          var dataItem;\n          var found;\n          var i, j;\n          var changed = [];\n          var unchanged = [];\n\n          if (selectedLength) {\n            for (i = 0; i < selectedLength; i++) {\n              dataItem = selected[i];\n              found = false;\n\n              for (j = 0; j < itemsLength; j++) {\n                if (dataItem === itemsToMatch[j]) {\n                  found = true;\n                  changed.push({\n                    index: i,\n                    item: dataItem\n                  });\n                  break;\n                }\n              }\n\n              if (!found) {\n                unchanged.push(dataItem);\n              }\n            }\n          }\n\n          return {\n            changed: changed,\n            unchanged: unchanged\n          };\n        }\n\n        function isValidFilterExpr(expression) {\n          if (!expression || $.isEmptyObject(expression)) {\n            return false;\n          }\n\n          if (expression.filters && !expression.filters.length) {\n            return false;\n          }\n\n          return true;\n        }\n\n        function removeFiltersForField(expression, field) {\n          var filters;\n          var found = false;\n\n          if (expression.filters) {\n            filters = $.grep(expression.filters, function (filter) {\n              found = removeFiltersForField(filter, field);\n\n              if (filter.filters) {\n                return filter.filters.length;\n              } else {\n                return filter.field != field;\n              }\n            });\n\n            if (!found && expression.filters.length !== filters.length) {\n              found = true;\n            }\n\n            expression.filters = filters;\n          }\n\n          return found;\n        }\n\n        kendo.cssProperties.registerPrefix(\"List\", \"k-list-\");\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}