{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1316);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1316:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1317)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"imagebrowser\",\n        name: \"ImageBrowser\",\n        category: \"web\",\n        description: \"\",\n        hidden: true,\n        depends: [\"filebrowser\"]\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            FileBrowser = kendo.ui.FileBrowser,\n            isPlainObject = $.isPlainObject,\n            extend = $.extend,\n            isFunction = kendo.isFunction,\n            trimSlashesRegExp = /(^\\/|\\/$)/g,\n            ERROR = \"error\",\n            NS = \".kendoImageBrowser\",\n            NAMEFIELD = \"name\",\n            SIZEFIELD = \"size\",\n            TYPEFIELD = \"type\",\n            DEFAULTSORTORDER = {\n          field: TYPEFIELD,\n          dir: \"asc\"\n        },\n            EMPTYTILE = kendo.template('<div class=\"k-listview-item k-listview-item-empty\"><span class=\"k-file-preview\"><span class=\"k-file-icon k-icon k-i-none\"></span></span><span class=\"k-file-name\">${text}</span></div>');\n        extend(true, kendo.data, {\n          schemas: {\n            \"imagebrowser\": {\n              data: function (data) {\n                return data.items || data || [];\n              },\n              model: {\n                id: \"name\",\n                fields: {\n                  name: \"name\",\n                  size: \"size\",\n                  type: \"type\"\n                }\n              }\n            }\n          }\n        });\n        extend(true, kendo.data, {\n          transports: {\n            \"imagebrowser\": kendo.data.RemoteTransport.extend({\n              init: function (options) {\n                kendo.data.RemoteTransport.fn.init.call(this, $.extend(true, {}, this.options, options));\n              },\n              _call: function (type, options) {\n                options.data = $.extend({}, options.data, {\n                  path: this.options.path()\n                });\n\n                if (isFunction(this.options[type])) {\n                  this.options[type].call(this, options);\n                } else {\n                  kendo.data.RemoteTransport.fn[type].call(this, options);\n                }\n              },\n              read: function (options) {\n                this._call(\"read\", options);\n              },\n              create: function (options) {\n                this._call(\"create\", options);\n              },\n              destroy: function (options) {\n                this._call(\"destroy\", options);\n              },\n              update: function () {//updates are handled by the upload\n              },\n              options: {\n                read: {\n                  type: \"POST\"\n                },\n                update: {\n                  type: \"POST\"\n                },\n                create: {\n                  type: \"POST\"\n                },\n                destroy: {\n                  type: \"POST\"\n                }\n              }\n            })\n          }\n        });\n\n        function offsetTop(element) {\n          return element.offsetTop - $(element).height();\n        }\n\n        function concatPaths(path, name) {\n          if (path === undefined || !path.match(/\\/$/)) {\n            path = (path || \"\") + \"/\";\n          }\n\n          return path + name;\n        }\n\n        function sizeFormatter(value) {\n          if (!value) {\n            return \"\";\n          }\n\n          var suffix = \" bytes\";\n\n          if (value >= 1073741824) {\n            suffix = \" GB\";\n            value /= 1073741824;\n          } else if (value >= 1048576) {\n            suffix = \" MB\";\n            value /= 1048576;\n          } else if (value >= 1024) {\n            suffix = \" KB\";\n            value /= 1024;\n          }\n\n          return Math.round(value * 100) / 100 + suffix;\n        }\n\n        var ImageBrowser = FileBrowser.extend({\n          init: function (element, options) {\n            var that = this;\n            options = options || {};\n            FileBrowser.fn.init.call(that, element, options);\n            that.element.addClass(\"k-imagebrowser\");\n          },\n          options: {\n            name: \"ImageBrowser\",\n            fileTypes: \"*.png,*.gif,*.jpg,*.jpeg\"\n          },\n          value: function () {\n            var that = this,\n                selected = that._selectedItem(),\n                path,\n                imageUrl = that.options.transport.imageUrl;\n\n            if (selected && selected.get(TYPEFIELD) === \"f\") {\n              path = concatPaths(that.path(), selected.get(NAMEFIELD)).replace(trimSlashesRegExp, \"\");\n\n              if (imageUrl) {\n                path = isFunction(imageUrl) ? imageUrl(path) : kendo.format(imageUrl, encodeURIComponent(path));\n              }\n\n              return path;\n            }\n          },\n          _fileUpload: function (e) {\n            var that = this,\n                options = that.options,\n                fileTypes = options.fileTypes,\n                filterRegExp = new RegExp((\"(\" + fileTypes.split(\",\").join(\")|(\") + \")\").replace(/\\*\\./g, \".*.\"), \"i\"),\n                fileName = e.files[0].name,\n                fileSize = e.files[0].size,\n                fileNameField = NAMEFIELD,\n                sizeField = SIZEFIELD,\n                file;\n\n            if (filterRegExp.test(fileName)) {\n              e.data = {\n                path: that.path()\n              };\n              file = that._createFile(fileName, fileSize);\n\n              if (!file) {\n                e.preventDefault();\n              } else {\n                file._uploading = true;\n                that.upload.one(\"error\", function () {\n                  file = undefined;\n                });\n                that.upload.one(\"success\", function (e) {\n                  if (file) {\n                    delete file._uploading;\n\n                    var model = that._insertFileToList(file);\n\n                    model.set(fileNameField, e.response[that._getFieldName(fileNameField)]);\n                    model.set(sizeField, e.response[that._getFieldName(sizeField)]);\n                    that._tiles = that.listView.items().filter(\"[\" + kendo.attr(\"type\") + \"=f]\");\n\n                    that._scroll();\n                  }\n                });\n              }\n            } else {\n              e.preventDefault();\n\n              that._showMessage(kendo.format(options.messages.invalidFileType, fileName, fileTypes));\n            }\n          },\n          _content: function () {\n            var that = this;\n            that.list = $('<div class=\"k-filemanager-listview\" />').appendTo(that.element).on(\"dblclick\" + NS, \".k-listview-item\", that._dblClick.bind(that));\n            that.listView = new kendo.ui.ListView(that.list, {\n              layout: \"flex\",\n              flex: {\n                direction: \"row\",\n                wrap: \"wrap\"\n              },\n              dataSource: that.dataSource,\n              template: that._itemTmpl(),\n              editTemplate: that._editTmpl(),\n              selectable: true,\n              autoBind: false,\n              dataBinding: function (e) {\n                that.toolbar.find(\".k-i-close\").parent().addClass(\"k-disabled\");\n\n                if (e.action === \"remove\" || e.action === \"sync\") {\n                  e.preventDefault();\n                  kendo.ui.progress(that.listView.content, false);\n                }\n              },\n              dataBound: function () {\n                if (that.dataSource.view().length) {\n                  that._tiles = this.items().filter(\"[\" + kendo.attr(\"type\") + \"=f]\");\n\n                  that._scroll();\n                } else {\n                  this.content.append(EMPTYTILE({\n                    text: that.options.messages.emptyFolder\n                  }));\n                }\n              },\n              change: that._listViewChange.bind(that)\n            });\n            that.listView.content.on(\"scroll\" + NS, that._scroll.bind(that));\n          },\n          _dataSource: function () {\n            var that = this,\n                options = that.options,\n                transport = options.transport,\n                typeSortOrder = extend({}, DEFAULTSORTORDER),\n                nameSortOrder = {\n              field: NAMEFIELD,\n              dir: \"asc\"\n            },\n                schema,\n                dataSource = {\n              type: transport.type || \"imagebrowser\",\n              sort: [typeSortOrder, nameSortOrder]\n            };\n\n            if (isPlainObject(transport)) {\n              transport.path = that.path.bind(that);\n              dataSource.transport = transport;\n            }\n\n            if (isPlainObject(options.schema)) {\n              dataSource.schema = options.schema;\n            } else if (transport.type && isPlainObject(kendo.data.schemas[transport.type])) {\n              schema = kendo.data.schemas[transport.type];\n            }\n\n            if (that.dataSource && that._errorHandler) {\n              that.dataSource.unbind(ERROR, that._errorHandler);\n            } else {\n              that._errorHandler = that._error.bind(that);\n            }\n\n            that.dataSource = kendo.data.DataSource.create(dataSource).bind(ERROR, that._errorHandler);\n          },\n          _loadImage: function (li) {\n            var that = this,\n                element = $(li),\n                dataItem = that.dataSource.getByUid(element.attr(kendo.attr(\"uid\"))),\n                name = dataItem.get(NAMEFIELD),\n                thumbnailUrl = that.options.transport.thumbnailUrl,\n                img = $(\"<img />\", {\n              alt: name\n            }),\n                urlJoin = \"?\";\n\n            if (dataItem._uploading) {\n              return;\n            }\n\n            img.hide().on(\"load\" + NS, function () {\n              $(this).prev().remove().end().addClass(\"k-image k-file-image\").fadeIn();\n            });\n            element.find(\".k-i-loading\").after(img);\n\n            if (isFunction(thumbnailUrl)) {\n              thumbnailUrl = thumbnailUrl(that.path(), encodeURIComponent(name));\n            } else {\n              if (thumbnailUrl.indexOf(\"?\") >= 0) {\n                urlJoin = \"&\";\n              }\n\n              thumbnailUrl = thumbnailUrl + urlJoin + \"path=\" + encodeURIComponent(that.path() + name);\n\n              if (dataItem._override) {\n                thumbnailUrl += \"&_=\" + new Date().getTime();\n                delete dataItem._override;\n              }\n            } // IE8 will trigger the load event immediately when the src is assigned\n            // if the image is loaded from the cache\n\n\n            img.attr(\"src\", thumbnailUrl);\n            li.loaded = true;\n          },\n          _scroll: function () {\n            var that = this;\n\n            if (that.options.transport && that.options.transport.thumbnailUrl) {\n              clearTimeout(that._timeout);\n              that._timeout = setTimeout(function () {\n                var height = kendo._outerHeight(that.listView.content),\n                    viewTop = that.listView.content.scrollTop(),\n                    viewBottom = viewTop + height;\n\n                that._tiles.each(function () {\n                  var top = offsetTop(this),\n                      bottom = top + this.offsetHeight;\n\n                  if (top >= viewTop && top < viewBottom || bottom >= viewTop && bottom < viewBottom) {\n                    that._loadImage(this);\n                  }\n\n                  if (top > viewBottom) {\n                    return false;\n                  }\n                });\n\n                that._tiles = that._tiles.filter(function () {\n                  return !this.loaded;\n                });\n              }, 250);\n            }\n          },\n          _itemTmpl: function () {\n            var that = this,\n                html = '<div class=\"k-listview-item\" ' + kendo.attr(\"uid\") + '=\"#=uid#\" ';\n            html += kendo.attr(\"type\") + '=\"${' + TYPEFIELD + '}\">';\n            html += '#if(' + TYPEFIELD + ' == \"d\") { #';\n            html += '<div class=\"k-file-preview\"><span class=\"k-file-icon k-icon k-i-folder\"></span></div>';\n            html += \"#}else{#\";\n\n            if (that.options.transport && that.options.transport.thumbnailUrl) {\n              html += '<div class=\"k-file-preview\"><span class=\"k-file-icon k-icon k-i-loading\"></span></div>';\n            } else {\n              html += '<div class=\"k-file-preview\"><span class=\"k-file-icon k-icon k-i-file\"></span></div>';\n            }\n\n            html += \"#}#\";\n            html += '<span class=\"k-file-name\">${' + NAMEFIELD + '}</span>';\n            html += '#if(' + TYPEFIELD + ' == \"f\") { # <span class=\"k-file-size\">${this.sizeFormatter(' + SIZEFIELD + ')}</span> #}#';\n            html += '</div>';\n            return kendo.template(html).bind({\n              sizeFormatter: sizeFormatter\n            });\n          }\n        });\n        kendo.ui.plugin(ImageBrowser);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1317:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.filebrowser\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}