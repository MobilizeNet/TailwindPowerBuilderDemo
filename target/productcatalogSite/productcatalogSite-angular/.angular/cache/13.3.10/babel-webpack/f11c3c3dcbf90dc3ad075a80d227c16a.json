{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1273);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1064:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.combobox\");\n    /***/\n  },\n\n  /***/\n  1065:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.dropdownlist\");\n    /***/\n  },\n\n  /***/\n  1115:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.numerictextbox\");\n    /***/\n  },\n\n  /***/\n  1197:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.datepicker\");\n    /***/\n  },\n\n  /***/\n  1273:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1274), __webpack_require__(1197), __webpack_require__(1115), __webpack_require__(1064), __webpack_require__(1065)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"filtercell\",\n        name: \"Row filter\",\n        category: \"framework\",\n        depends: [\"autocomplete\"],\n        advanced: true\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            DataSource = kendo.data.DataSource,\n            Widget = ui.Widget,\n            CHANGE = \"change\",\n            BOOL = \"boolean\",\n            ENUM = \"enums\",\n            STRING = \"string\",\n            EQ = \"Is equal to\",\n            NEQ = \"Is not equal to\",\n            nonValueOperators = [\"isnull\", \"isnotnull\", \"isempty\", \"isnotempty\", \"isnullorempty\", \"isnotnullorempty\"];\n\n        function isNonValueFilter(filter) {\n          var operator = typeof filter === \"string\" ? filter : filter.operator;\n          return $.inArray(operator, nonValueOperators) > -1;\n        }\n\n        function findFilterForField(filter, field) {\n          var filters = [];\n\n          if ($.isPlainObject(filter)) {\n            if (filter.hasOwnProperty(\"filters\")) {\n              filters = filter.filters;\n            } else if (filter.field == field) {\n              return filter;\n            }\n          }\n\n          if (Array.isArray(filter)) {\n            filters = filter;\n          }\n\n          for (var i = 0; i < filters.length; i++) {\n            var result = findFilterForField(filters[i], field);\n\n            if (result) {\n              return result;\n            }\n          }\n        }\n\n        function removeFiltersForField(expression, field) {\n          if (expression.filters) {\n            expression.filters = $.grep(expression.filters, function (filter) {\n              removeFiltersForField(filter, field);\n\n              if (filter.filters) {\n                return filter.filters.length;\n              } else {\n                return filter.field != field;\n              }\n            });\n          }\n        }\n\n        function removeDuplicates(dataSelector, dataTextField) {\n          var getter = kendo.getter(dataTextField, true);\n          return function (e) {\n            var items = dataSelector(e),\n                result = [],\n                index = 0,\n                seen = {};\n\n            while (index < items.length) {\n              var item = items[index++],\n                  text = getter(item);\n\n              if (!seen.hasOwnProperty(text)) {\n                result.push(item);\n                seen[text] = true;\n              }\n            }\n\n            return result;\n          };\n        }\n\n        var FilterCell = Widget.extend({\n          init: function (element, options) {\n            element = $(element).addClass(\"k-filtercell\");\n            var wrapper = this.wrapper = $(\"<span/>\").appendTo(element);\n            var that = this,\n                dataSource,\n                viewModel,\n                passedOptions = options,\n                first,\n                type,\n                operators = that.operators = options.operators || {},\n                input = that.input = $(\"<input/>\").attr(kendo.attr(\"bind\"), \"value: value\").appendTo(wrapper);\n            var suggestDataSource = options ? options.suggestDataSource : null;\n\n            if (suggestDataSource) {\n              // avoid deep cloning the suggest data source\n              options = $.extend({}, options, {\n                suggestDataSource: {}\n              });\n            }\n\n            Widget.fn.init.call(that, element[0], options);\n\n            if (suggestDataSource) {\n              that.options.suggestDataSource = suggestDataSource;\n            }\n\n            options = that.options;\n            dataSource = that.dataSource = options.dataSource; //gets the type from the dataSource or sets default to string\n\n            that.model = dataSource.reader.model;\n            type = options.type = STRING;\n            var fields = kendo.getter(\"reader.model.fields\", true)(dataSource) || {};\n            var target = fields[options.field];\n\n            if (target && target.type) {\n              type = options.type = target.type;\n            }\n\n            if (options.values) {\n              options.type = type = ENUM;\n            }\n\n            operators = operators[type] || options.operators[type];\n\n            if (!passedOptions.operator) {\n              for (first in operators) {\n                // get the first operator\n                options.operator = first;\n                break;\n              }\n            }\n\n            that._parse = function (value) {\n              /*jshint eqnull: true */\n              return value != null ? value + \"\" : value;\n            };\n\n            if (that.model && that.model.fields) {\n              var field = that.model.fields[options.field];\n\n              if (field) {\n                if (field.parse) {\n                  that._parse = field.parse.bind(field);\n                }\n              }\n            }\n\n            that.defaultOperator = options.operator;\n            that.viewModel = viewModel = kendo.observable({\n              operator: options.operator,\n              value: null,\n              operatorVisible: function () {\n                var val = this.get(\"value\");\n                return val !== null && val !== undefined && val != \"undefined\" || isNonValueFilter(this.get(\"operator\")) && that.dataSource.filter() && !that._clearInProgress;\n              }\n            });\n            that._prevOperator = options.operator;\n            viewModel.bind(CHANGE, that.updateDsFilter.bind(that));\n\n            if (type == STRING) {\n              that.initSuggestDataSource(options);\n            }\n\n            if (options.inputWidth !== null) {\n              input.addClass('k-sized-input');\n              input.width(options.inputWidth);\n            }\n\n            input.attr(\"aria-label\", that._getColumnTitle());\n            input.attr(\"title\", that._getColumnTitle());\n\n            that._setInputType(options, type);\n\n            if (type != BOOL && options.showOperators !== false) {\n              that._createOperatorDropDown(operators);\n            } else {\n              $('<div unselectable=\"on\" />').css(\"display\", \"none\").text(\"eq\").appendTo(wrapper);\n              wrapper.addClass(\"k-operator-hidden\");\n            }\n\n            that._createClearIcon();\n\n            kendo.bind(this.wrapper, viewModel);\n\n            if (type == STRING) {\n              if (!options.template) {\n                that.setAutoCompleteSource();\n              }\n            }\n\n            if (type == ENUM) {\n              that.setComboBoxSource(that.options.values);\n            }\n\n            that._refreshUI();\n\n            that._refreshHandler = that._refreshUI.bind(that);\n            that.dataSource.bind(CHANGE, that._refreshHandler);\n          },\n          _setInputType: function (options, type) {\n            var that = this,\n                input = that.input;\n\n            if (typeof options.template == \"function\") {\n              options.template.call(that.viewModel, {\n                element: that.input,\n                dataSource: that.suggestDataSource\n              });\n\n              that._angularItems(\"compile\");\n            } else if (type == STRING) {\n              input.attr(kendo.attr(\"role\"), \"autocomplete\").attr(kendo.attr(\"text-field\"), options.dataTextField || options.field).attr(kendo.attr(\"filter\"), options.suggestionOperator).attr(kendo.attr(\"delay\"), options.delay).attr(kendo.attr(\"min-length\"), options.minLength).attr(kendo.attr(\"value-primitive\"), true);\n            } else if (type == \"date\") {\n              input.attr(kendo.attr(\"role\"), \"datepicker\").attr(\"id\", kendo.guid());\n            } else if (type == BOOL) {\n              input.remove();\n              var radioInput = $(\"<input type='radio'/>\");\n              var wrapper = that.wrapper;\n              var inputName = kendo.guid();\n              var labelTrue = $(\"<label/>\").text(options.messages.isTrue).append(radioInput);\n              radioInput.attr(kendo.attr(\"bind\"), \"checked:value\").attr(\"name\", inputName).val(\"true\");\n              var labelFalse = labelTrue.clone().text(options.messages.isFalse);\n              radioInput.clone().val(\"false\").appendTo(labelFalse);\n              wrapper.append([labelTrue, labelFalse]);\n            } else if (type == \"number\") {\n              input.attr(kendo.attr(\"role\"), \"numerictextbox\").attr(\"title\", that._getColumnTitle());\n            } else if (type == ENUM) {\n              input.attr(kendo.attr(\"role\"), \"combobox\").attr(kendo.attr(\"text-field\"), \"text\").attr(kendo.attr(\"suggest\"), true).attr(kendo.attr(\"filter\"), \"contains\").attr(kendo.attr(\"value-field\"), \"value\").attr(kendo.attr(\"value-primitive\"), true);\n            }\n          },\n          _getColumnTitle: function () {\n            var column = this.options.column;\n            return column ? column.title || column.field : \"\";\n          },\n          _createOperatorDropDown: function (operators) {\n            var items = [],\n                viewModel = this.viewModel;\n\n            for (var prop in operators) {\n              items.push({\n                text: operators[prop],\n                value: prop\n              });\n            }\n\n            var dropdown = $('<input class=\"k-dropdown-operator\" ' + kendo.attr(\"bind\") + '=\"value: operator\"/>').appendTo(this.wrapper);\n            dropdown.attr(\"aria-label\", this._getColumnTitle());\n            this.operatorDropDown = dropdown.kendoDropDownList({\n              dataSource: items,\n              dataTextField: \"text\",\n              dataValueField: \"value\",\n              open: function () {\n                //TODO calc this\n                this.popup.element.width(150);\n              },\n              valuePrimitive: true\n            }).data(\"kendoDropDownList\");\n            viewModel.bind(\"change\", function () {\n              var ariaLabel = operators[viewModel.operator];\n              dropdown.attr(\"aria-label\", ariaLabel);\n            });\n            this.operatorDropDown.wrapper.attr(\"aria-label\", this._getColumnTitle()).find(\".k-i-arrow-s\").removeClass(\"k-i-arrow-s\").addClass(\"k-i-filter\");\n          },\n          initSuggestDataSource: function (options) {\n            var suggestDataSource = options.suggestDataSource;\n\n            if (!(suggestDataSource instanceof DataSource)) {\n              if (!options.customDataSource && suggestDataSource) {\n                suggestDataSource.group = undefined;\n              }\n\n              suggestDataSource = this.suggestDataSource = DataSource.create(suggestDataSource);\n            }\n\n            if (!options.customDataSource) {\n              suggestDataSource._pageSize = undefined;\n              suggestDataSource.reader.data = removeDuplicates(suggestDataSource.reader.data, this.options.field);\n            }\n\n            this.suggestDataSource = suggestDataSource;\n          },\n          setAutoCompleteSource: function () {\n            var autoComplete = this.input.data(\"kendoAutoComplete\");\n\n            if (autoComplete) {\n              autoComplete.setDataSource(this.suggestDataSource);\n            }\n          },\n          setComboBoxSource: function (values) {\n            var dataSource = DataSource.create({\n              data: values\n            });\n            var comboBox = this.input.data(\"kendoComboBox\");\n\n            if (comboBox && !this.options.template) {\n              comboBox.setDataSource(dataSource);\n            }\n          },\n          _refreshUI: function () {\n            var that = this,\n                filter = findFilterForField(that.dataSource.filter(), this.options.field) || {},\n                viewModel = that.viewModel;\n            that.manuallyUpdatingVM = true;\n            filter = $.extend(true, {}, filter); //MVVM check binding does not update the UI when changing the value to null/undefined\n\n            if (that.options.type == BOOL) {\n              if (viewModel.value !== filter.value) {\n                that.wrapper.find(\":radio\").prop(\"checked\", false);\n              }\n            }\n\n            if (filter.operator) {\n              viewModel.set(\"operator\", filter.operator);\n            }\n\n            viewModel.set(\"value\", filter.value);\n\n            if ($.isEmptyObject(filter)) {\n              viewModel.trigger(CHANGE, {\n                field: \"operatorVisible\"\n              });\n            }\n\n            that.manuallyUpdatingVM = false;\n          },\n          _applyFilter: function (filter) {\n            if (filter.filters.length) {\n              this.dataSource.filter(filter);\n            } else {\n              this.dataSource.filter({});\n            }\n          },\n          updateDsFilter: function (e) {\n            var that = this,\n                model = that.viewModel,\n                filter;\n\n            if (e.field == \"operator\" && model.value === undefined && !isNonValueFilter(model) && isNonValueFilter(that._prevOperator)) {\n              filter = that.dataSource.filter() || {\n                filters: [],\n                logic: \"and\"\n              };\n              removeFiltersForField(filter, that.options.field);\n              that._prevOperator = model.operator;\n\n              that._applyFilter(filter);\n\n              return;\n            }\n\n            if (that.manuallyUpdatingVM || e.field == \"operator\" && model.value === undefined && !isNonValueFilter(model) || e.field == \"operator\" && that._clearInProgress && model.value !== null) {\n              return;\n            }\n\n            var currentFilter = $.extend({}, that.viewModel.toJSON(), {\n              field: that.options.field\n            });\n            that._prevOperator = currentFilter.operator;\n            var expression = {\n              logic: \"and\",\n              filters: []\n            };\n            var prevented = false;\n\n            if (currentFilter.value !== undefined && currentFilter.value !== null || isNonValueFilter(currentFilter) && !this._clearInProgress) {\n              expression.filters.push(currentFilter);\n              prevented = that.trigger(CHANGE, {\n                filter: expression,\n                field: that.options.field\n              });\n            }\n\n            if (that._clearInProgress || currentFilter.value === null) {\n              prevented = that.trigger(CHANGE, {\n                filter: null,\n                field: that.options.field\n              });\n            }\n\n            if (prevented) {\n              return;\n            }\n\n            var mergeResult = that._merge(expression);\n\n            that._applyFilter(mergeResult);\n          },\n          _merge: function (expression) {\n            var that = this,\n                logic = expression.logic || \"and\",\n                filters = expression.filters,\n                filter,\n                result = that.dataSource.filter() || {\n              filters: [],\n              logic: \"and\"\n            },\n                idx,\n                length;\n            removeFiltersForField(result, that.options.field);\n\n            for (idx = 0, length = filters.length; idx < length; idx++) {\n              filter = filters[idx];\n              filter.value = that._parse(filter.value);\n            }\n\n            filters = $.grep(filters, function (filter) {\n              return filter.value !== \"\" && filter.value !== null || isNonValueFilter(filter);\n            });\n\n            if (filters.length) {\n              if (result.filters.length) {\n                expression.filters = filters;\n\n                if (result.logic !== \"and\") {\n                  result.filters = [{\n                    logic: result.logic,\n                    filters: result.filters\n                  }];\n                  result.logic = \"and\";\n                }\n\n                if (filters.length > 1) {\n                  result.filters.push(expression);\n                } else {\n                  result.filters.push(filters[0]);\n                }\n              } else {\n                result.filters = filters;\n                result.logic = logic;\n              }\n            }\n\n            return result;\n          },\n          _createClearIcon: function () {\n            var that = this;\n            $(\"<button type='button' class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-icon-button' title = '\" + that.options.messages.clear + \"'/>\").attr(\"aria-label\", that.options.messages.clear).attr(kendo.attr(\"bind\"), \"visible:operatorVisible\").html(\"<span class='k-button-icon k-icon k-i-filter-clear'></span>\").on(\"click\", that.clearFilter.bind(that)).appendTo(that.wrapper);\n          },\n          clearFilter: function () {\n            this._clearInProgress = true;\n\n            if (isNonValueFilter(this.viewModel.operator)) {\n              this.viewModel.set(\"operator\", this.defaultOperator);\n            }\n\n            this.viewModel.set(\"value\", null);\n            this._clearInProgress = false;\n          },\n          _angularItems: function (action) {\n            var elements = this.wrapper.closest(\"th\").get();\n            var column = this.options.column;\n            this.angular(action, function () {\n              return {\n                elements: elements,\n                data: [{\n                  column: column\n                }]\n              };\n            });\n          },\n          destroy: function () {\n            var that = this;\n            that.filterModel = null;\n            that.operatorDropDown = null;\n\n            that._angularItems(\"cleanup\");\n\n            if (that._refreshHandler) {\n              that.dataSource.bind(CHANGE, that._refreshHandler);\n              that._refreshHandler = null;\n            }\n\n            kendo.unbind(that.element);\n            Widget.fn.destroy.call(that);\n            kendo.destroy(that.element);\n          },\n          events: [CHANGE],\n          options: {\n            name: \"FilterCell\",\n            delay: 200,\n            minLength: 1,\n            inputWidth: null,\n            values: undefined,\n            customDataSource: false,\n            field: \"\",\n            dataTextField: \"\",\n            type: \"string\",\n            suggestDataSource: null,\n            suggestionOperator: \"startswith\",\n            operator: \"eq\",\n            showOperators: true,\n            template: null,\n            messages: {\n              isTrue: \"is true\",\n              isFalse: \"is false\",\n              filter: \"Filter\",\n              clear: \"Clear\",\n              operator: \"Operator\"\n            },\n            operators: {\n              string: {\n                eq: EQ,\n                neq: NEQ,\n                startswith: \"Starts with\",\n                contains: \"Contains\",\n                doesnotcontain: \"Does not contain\",\n                endswith: \"Ends with\",\n                isnull: \"Is null\",\n                isnotnull: \"Is not null\",\n                isempty: \"Is empty\",\n                isnotempty: \"Is not empty\",\n                isnullorempty: \"Has no value\",\n                isnotnullorempty: \"Has value\"\n              },\n              number: {\n                eq: EQ,\n                neq: NEQ,\n                gte: \"Is greater than or equal to\",\n                gt: \"Is greater than\",\n                lte: \"Is less than or equal to\",\n                lt: \"Is less than\",\n                isnull: \"Is null\",\n                isnotnull: \"Is not null\"\n              },\n              date: {\n                eq: EQ,\n                neq: NEQ,\n                gte: \"Is after or equal to\",\n                gt: \"Is after\",\n                lte: \"Is before or equal to\",\n                lt: \"Is before\",\n                isnull: \"Is null\",\n                isnotnull: \"Is not null\"\n              },\n              enums: {\n                eq: EQ,\n                neq: NEQ,\n                isnull: \"Is null\",\n                isnotnull: \"Is not null\"\n              }\n            }\n          }\n        });\n        ui.plugin(FilterCell);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1274:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.autocomplete\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}