{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1742);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1039:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.toolbar\");\n    /***/\n  },\n\n  /***/\n  1742:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1039)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            extend = $.extend,\n            ToolBar = kendo.ui.ToolBar,\n            Item = kendo.toolbar.Item,\n            CLICK = \"click\",\n            TOGGLE = \"toggle\",\n            CLOSE = \"close\",\n            ACTION = \"action\",\n            CHANGE = \"change\",\n            NS = \".taskBoardToolbar\";\n        var TaskBoardToolbarStyles = {\n          searchbox: \"k-searchbox k-textbox k-input k-input-md k-rounded-md k-input-solid\",\n          searchIcon: \"k-input-icon k-icon k-i-search\",\n          searchInput: \"k-input-inner\"\n        };\n        var TaskBoardToolBar = ToolBar.extend({\n          init: function (element, options) {\n            var that = this;\n\n            that._extendOptions(options);\n\n            ToolBar.fn.init.call(that, element, options);\n\n            that._attachEvents();\n          },\n          events: ToolBar.fn.events.concat([ACTION]),\n          defaultTools: {\n            addColumn: {\n              type: \"button\",\n              text: \"Add Column\",\n              name: \"addColumn\",\n              command: \"AddColumnCommand\",\n              icon: \"plus\",\n              rules: \"isEditable\"\n            },\n            spacer: {\n              type: \"spacer\"\n            },\n            search: {\n              type: \"TaskBoardSearch\",\n              text: \"Search\",\n              name: \"search\",\n              command: \"SearchCommand\",\n              icon: \"search\",\n              overflow: \"never\",\n              rules: \"isSearchable\"\n            }\n          },\n          _attachEvents: function () {\n            var that = this;\n            that.bind(TOGGLE, that._click.bind(that));\n            that.bind(CLOSE, that._click.bind(that));\n            that.bind(CLICK, that._click.bind(that));\n            that.bind(CHANGE, that._change.bind(that));\n          },\n          _extendOptions: function (options) {\n            var that = this,\n                tools = options.items ? options.items : Object.keys(that.defaultTools);\n            that.options = options;\n            that.options.items = that._extendToolsOptions(tools);\n          },\n          _extendToolsOptions: function (tools) {\n            var that = this,\n                messages = that.options.messages;\n\n            if (!tools.length) {\n              return;\n            }\n\n            return tools.map(function (tool) {\n              var isBuiltInTool = $.isPlainObject(tool) && Object.keys(tool).length === 1 && tool.name,\n                  attr = {},\n                  toolOptions;\n              tool = isBuiltInTool ? tool.name : tool;\n              toolOptions = $.isPlainObject(tool) ? tool : extend({}, that.defaultTools[tool] || {\n                name: tool,\n                command: tool + \"Command\",\n                type: \"button\"\n              });\n\n              if (!that._validateRules(toolOptions)) {\n                return {\n                  hidden: true\n                };\n              }\n\n              attr[kendo.attr(\"command\")] = toolOptions.command;\n              attr[kendo.attr(\"options\")] = toolOptions.options;\n              kendo.deepExtend(toolOptions, {\n                id: toolOptions.id || toolOptions.name + \"-\" + kendo.guid(),\n                name: toolOptions.name,\n                text: messages[toolOptions.name] || toolOptions.name,\n                attributes: extend({\n                  \"aria-label\": messages[toolOptions.name] || toolOptions.name,\n                  \"title\": messages[toolOptions.name]\n                }, attr),\n                overflow: toolOptions.overflow\n              });\n\n              if (toolOptions.type === \"buttonGroup\") {\n                toolOptions.buttons = toolOptions.buttons.map(that._mapButtonGroups.bind(that));\n              }\n\n              if (toolOptions.type === \"splitButton\") {\n                toolOptions.menuButtons = toolOptions.menuButtons.map(that._mapMenuButtons.bind(that));\n              }\n\n              return toolOptions;\n            }, that);\n          },\n          _mapButtonGroups: function (button) {\n            var that = this,\n                messages = that.options.messages,\n                attr = {};\n            attr[kendo.attr(\"command\")] = button.command;\n            attr[kendo.attr(\"options\")] = button.options;\n            return kendo.deepExtend(button, {\n              attributes: extend({}, button.attributes, {\n                \"aria-label\": messages[button.name],\n                \"title\": messages[button.name]\n              }, attr)\n            });\n          },\n          _mapMenuButtons: function (button) {\n            var that = this,\n                messages = that.options.messages,\n                attr = {};\n            attr[kendo.attr(\"command\")] = button.command;\n            attr[kendo.attr(\"options\")] = button.options;\n            return kendo.deepExtend(button, {\n              text: messages[button.name],\n              attributes: extend({}, button.attributes, {\n                \"aria-label\": messages[button.name],\n                \"title\": messages[button.name]\n              }, attr)\n            });\n          },\n          _validateRules: function (tool) {\n            var that = this,\n                states = that.options.states,\n                rules = tool.rules ? tool.rules.split(\";\") : [];\n\n            if (!rules.length) {\n              return true;\n            }\n\n            for (var i = 0; i < rules.length; i++) {\n              if (!states[rules[i]]) {\n                return false;\n              }\n            }\n\n            return true;\n          },\n          _click: function (ev) {\n            var command = $(ev.target).attr(kendo.attr(\"command\")),\n                options = $(ev.target).attr(kendo.attr(\"options\"));\n\n            if (!command) {\n              return;\n            }\n\n            this.action({\n              command: command,\n              options: options\n            });\n          },\n          _change: function (ev) {\n            var command = $(ev.target).attr(kendo.attr(\"command\")),\n                options = $(ev.target).attr(kendo.attr(\"options\"));\n            options = extend({}, options, {\n              value: $(ev.target).val()\n            });\n\n            if (!command) {\n              return;\n            }\n\n            this.action({\n              command: command,\n              options: options\n            });\n          },\n          isToolEnabled: function (toolName) {\n            var that = this,\n                options = that.options,\n                found = false;\n\n            for (var i = 0; i < options.items.length; i++) {\n              if (options.items[i].name == toolName) {\n                found = true;\n                break;\n              }\n            }\n\n            return options.items[toolName] || found;\n          },\n          action: function (args) {\n            this.trigger(ACTION, args);\n          },\n          destroy: function () {\n            if (this.search) {\n              this.search.destroy();\n            }\n\n            ToolBar.fn.destroy.call(this);\n          }\n        });\n        var SearchTool = Item.extend({\n          init: function (options, toolbar) {\n            var that = this,\n                styles = TaskBoardToolBar.styles,\n                element = $(\"<span class='\" + styles.searchbox + \"'></span>\"),\n                icon = $(\"<span class='\" + styles.searchInputIcon + \"'></span>\"),\n                input = $(\"<input class='\" + styles.searchInput + \"' autocomplete='off' />\");\n            that.element = element;\n            that.input = input;\n            that.icon = icon;\n            that.options = options;\n            that.options.type = \"taskBoardSearch\";\n            that.toolbar = toolbar;\n            that.attributes();\n            that.renderIcon();\n            that.addUidAttr();\n            that.addIdAttr();\n            that.addOverflowAttr();\n            that.input.attr({\n              placeholder: that.options.text,\n              title: that.options.text\n            });\n            that.element.append(icon).append(that.input);\n\n            that._bindEvents();\n\n            that.toolbar.search = that;\n          },\n          attributes: function () {\n            if (this.options.attributes) {\n              this.input.attr(this.options.attributes);\n            }\n          },\n          renderIcon: function () {\n            if (this.options.icon) {\n              this.icon.addClass(TaskBoardToolBar.styles.searchIcon);\n            }\n          },\n          _bindEvents: function () {\n            this._inputHandler = this._input.bind(this);\n            this.input.on(\"input\" + NS, this._inputHandler);\n          },\n          _input: function (ev) {\n            this.toolbar.trigger(CHANGE, {\n              target: ev.target\n            });\n          },\n          destroy: function () {\n            this.element.off(NS);\n          }\n        });\n        kendo.toolbar.registerComponent(\"TaskBoardSearch\", SearchTool);\n        extend(kendo.ui, {\n          taskboard: {\n            ToolBar: TaskBoardToolBar\n          }\n        });\n        extend(true, kendo.ui.taskboard.ToolBar, {\n          styles: TaskBoardToolbarStyles\n        });\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}