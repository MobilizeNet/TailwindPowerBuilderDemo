{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1211);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1052:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.popup\");\n    /***/\n  },\n\n  /***/\n  1089:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.html.button\");\n    /***/\n  },\n\n  /***/\n  1103:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.html.input\");\n    /***/\n  },\n\n  /***/\n  1114:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.binder\");\n    /***/\n  },\n\n  /***/\n  1211:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1212), __webpack_require__(1052), __webpack_require__(1114), __webpack_require__(1213), __webpack_require__(1214), __webpack_require__(1089), __webpack_require__(1103)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"dropdowntree\",\n        name: \"DropDownTree\",\n        category: \"web\",\n        description: \"The DropDownTree widget displays a hierarchy of items and allows the selection of single or multiple items.\",\n        depends: [\"treeview\", \"popup\", \"binder\", \"html.chip\", \"html.chiplist\", \"html.button\", \"html.input\"]\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            html = kendo.html,\n            Widget = ui.Widget,\n            TreeView = ui._dropdowntree,\n            ObservableArray = kendo.data.ObservableArray,\n            ObservableObject = kendo.data.ObservableObject,\n            extend = $.extend,\n            activeElement = kendo._activeElement,\n            ns = \".kendoDropDownTree\",\n            keys = kendo.keys,\n            support = kendo.support,\n            HIDDENCLASS = \"k-hidden\",\n            WIDTH = \"width\",\n            browser = support.browser,\n            outerWidth = kendo._outerWidth,\n            DOT = \".\",\n            DISABLED = \"disabled\",\n            READONLY = \"readonly\",\n            STATEDISABLED = \"k-disabled\",\n            ARIA_DISABLED = \"aria-disabled\",\n            HOVER = \"k-hover\",\n            FOCUSED = \"k-focus\",\n            HOVEREVENTS = \"mouseenter\" + ns + \" mouseleave\" + ns,\n            TABINDEX = \"tabindex\",\n            CLICK = \"click\",\n            OPEN = \"open\",\n            CLOSE = \"close\",\n            CHANGE = \"change\",\n            quotRegExp = /\"/g,\n            CHIP = \".k-chip\";\n        var DropDownTree = kendo.ui.Widget.extend({\n          init: function (element, options) {\n            this.ns = ns;\n            kendo.ui.Widget.fn.init.call(this, element, options);\n            this._selection = this._getSelection();\n            this._focusInputHandler = this._focusInput.bind(this);\n            this._initial = this.element.val();\n            this._values = [];\n            var value = this.options.value;\n\n            if (value === null || !value.length) {\n              this._noInitialValue = true;\n            }\n\n            if (!this._isNullorUndefined(value)) {\n              this._valueMethodCalled = true;\n              this._values = Array.isArray(value) ? value.slice(0) : [value];\n            }\n\n            this._inputTemplate();\n\n            this._accessors();\n\n            this._setTreeViewOptions(this.options);\n\n            this._dataSource();\n\n            this._selection._initWrapper();\n\n            this._applyCssClasses();\n\n            this._placeholder(true);\n\n            this._tabindex();\n\n            this.wrapper.data(TABINDEX, this.wrapper.attr(TABINDEX));\n            this.tree = $('<div/>').attr({\n              tabIndex: -1,\n              \"aria-hidden\": true\n            });\n            this.list = $(\"<div class='k-list-container'/>\").append(this.tree);\n\n            this._header();\n\n            this._noData();\n\n            this._footer();\n\n            this._reset();\n\n            this._popup();\n\n            this.popup.one(\"open\", this._popupOpen.bind(this));\n\n            this._clearButton();\n\n            this._filterHeader();\n\n            this._treeview();\n\n            this._renderFooter();\n\n            this._checkAll();\n\n            this._enable();\n\n            this._toggleCloseVisibility();\n\n            this._aria();\n\n            if (!this.options.autoBind) {\n              var text = options.text || \"\";\n\n              if (!this._isNullorUndefined(options.value)) {\n                this._preselect(options.value);\n              } else if (text) {\n                this._textAccessor(text);\n              } else if (options.placeholder) {\n                this._placeholder(true);\n              }\n            }\n\n            var disabled = $(this.element).parents(\"fieldset\").is(':disabled');\n\n            if (disabled) {\n              this.enable(false);\n            }\n\n            this._valueMethodCalled = false;\n            kendo.notify(this);\n          },\n          _preselect: function (data, value) {\n            this._selection._preselect(data, value);\n          },\n          _setTreeViewOptions: function (options) {\n            var treeviewOptions = {\n              autoBind: options.autoBind,\n              checkboxes: options.checkboxes,\n              dataImageUrlField: options.dataImageUrlField,\n              dataSpriteCssClassField: options.dataSpriteCssClassField,\n              dataTextField: options.dataTextField,\n              dataUrlField: options.dataUrlField,\n              loadOnDemand: options.loadOnDemand,\n              size: options.size\n            };\n            this.options.treeview = $.extend({}, treeviewOptions, this.options.treeview);\n\n            if (options.template) {\n              this.options.treeview.template = options.template;\n            }\n\n            if (options.size) {\n              this.options.treeview.size = options.size;\n            }\n          },\n          _dataSource: function () {\n            var rootDataSource = this.options.dataSource;\n            this.dataSource = kendo.data.HierarchicalDataSource.create(rootDataSource);\n\n            if (rootDataSource) {\n              $.extend(this.options.treeview, {\n                dataSource: this.dataSource\n              });\n            }\n          },\n          _popupOpen: function () {\n            var popup = this.popup;\n            popup.wrapper = kendo.wrap(popup.element);\n          },\n          _getSelection: function () {\n            if (this._isMultipleSelection()) {\n              this.options._altname = \"MultiSelectDropDownTree\";\n              return new ui.DropDownTree.MultipleSelection(this);\n            } else {\n              return new ui.DropDownTree.SingleSelection(this);\n            }\n          },\n          setDataSource: function (dataSource) {\n            this._isDataSourceSet = true;\n\n            if (this._tags) {\n              this._noInitialValue = true;\n              this.setValue([]);\n\n              this._tags.empty();\n\n              this.span.show();\n\n              this._multipleTags.empty();\n            }\n\n            this.dataSource = dataSource;\n            this.treeview.setDataSource(dataSource);\n            this._isDataSourceSet = false;\n          },\n          _isMultipleSelection: function () {\n            return this.options && (this.options.treeview.checkboxes || this.options.checkboxes);\n          },\n          options: {\n            name: \"DropDownTree\",\n            animation: {},\n            autoBind: true,\n            autoClose: true,\n            autoWidth: false,\n            clearButton: true,\n            dataTextField: \"\",\n            dataValueField: \"\",\n            dataImageUrlField: \"\",\n            dataSpriteCssClassField: \"\",\n            dataUrlField: \"\",\n            delay: 500,\n            enabled: true,\n            enforceMinLength: false,\n            filter: \"none\",\n            height: 200,\n            ignoreCase: true,\n            index: 0,\n            loadOnDemand: false,\n            messages: {\n              \"singleTag\": \"item(s) selected\",\n              \"clear\": \"clear\",\n              \"deleteTag\": \"delete\",\n              \"noData\": \"No data found.\"\n            },\n            minLength: 1,\n            checkboxes: false,\n            noDataTemplate: true,\n            placeholder: \"\",\n            checkAll: false,\n            checkAllTemplate: \"Check all\",\n            tagMode: \"multiple\",\n            template: null,\n            text: null,\n            treeview: {},\n            valuePrimitive: false,\n            footerTemplate: \"\",\n            headerTemplate: \"\",\n            value: null,\n            valueTemplate: null,\n            popup: null,\n            filterLabel: null,\n            size: \"medium\",\n            fillMode: \"solid\",\n            rounded: \"medium\"\n          },\n          events: [\"open\", \"close\", \"dataBound\", CHANGE, \"select\", \"filtering\"],\n          focus: function () {\n            this.wrapper.trigger(\"focus\");\n          },\n          dataItem: function (node) {\n            return this.treeview.dataItem(node);\n          },\n          readonly: function (readonly) {\n            this._editable({\n              readonly: readonly === undefined ? true : readonly,\n              disable: false\n            });\n\n            this._toggleCloseVisibility();\n          },\n          enable: function (enable) {\n            this._editable({\n              readonly: false,\n              disable: !(enable = enable === undefined ? true : enable)\n            });\n\n            this._toggleCloseVisibility();\n          },\n          toggle: function (open) {\n            this._toggle(open);\n          },\n          open: function () {\n            var popup = this.popup;\n\n            if (!this.options.autoBind && !this.dataSource.data().length) {\n              this.treeview._progress(true);\n\n              if (this._isFilterEnabled()) {\n                this._search();\n              } else {\n                this.dataSource.fetch();\n              }\n            }\n\n            if (popup.visible() || !this._allowOpening()) {\n              return;\n            }\n\n            if (this._isMultipleSelection()) {\n              popup.element.addClass(\"k-multiple-selection\");\n            }\n\n            popup.element.addClass(\"k-popup-dropdowntree\");\n            popup.one(\"activate\", this._focusInputHandler);\n            popup._hovered = true;\n            popup.open();\n          },\n          close: function () {\n            this.popup.close();\n          },\n          search: function (word) {\n            var options = this.options;\n            var filter;\n            clearTimeout(this._typingTimeout);\n\n            if (!options.enforceMinLength && !word.length || word.length >= options.minLength) {\n              filter = this._getFilter(word);\n\n              if (this.trigger(\"filtering\", {\n                filter: filter\n              }) || Array.isArray(this.options.dataTextField)) {\n                return;\n              }\n\n              this._filtering = true;\n              this.treeview.dataSource.filter(filter);\n            }\n          },\n          _getFilter: function (word) {\n            return {\n              field: this.options.dataTextField,\n              operator: this.options.filter,\n              value: word,\n              ignoreCase: this.options.ignoreCase\n            };\n          },\n          refresh: function () {\n            var data = this.treeview.dataSource.flatView();\n\n            this._renderFooter();\n\n            this._renderNoData();\n\n            if (this.filterInput && this.checkAll) {\n              this.checkAll.toggle(!this.filterInput.val().length);\n            }\n\n            this.tree.toggle(!!data.length);\n            $(this.noData).toggle(!data.length);\n          },\n          setOptions: function (options) {\n            if (this.options.checkboxes != options.checkboxes) {\n              delete options.checkboxes;\n              window.console.warn('setOptions method can not be used to set the checkboxes option in DropDownTree');\n            }\n\n            Widget.fn.setOptions.call(this, options);\n\n            this._setTreeViewOptions(options);\n\n            this._dataSource();\n\n            if (this.options.treeview || options.size) {\n              this.treeview.setOptions(this.options.treeview);\n            }\n\n            if (options.height && this.tree) {\n              this.tree.css('max-height', options.height);\n            }\n\n            this._header();\n\n            this._noData();\n\n            this._footer();\n\n            this._renderFooter();\n\n            this._renderNoData();\n\n            if (this.span && (this._isMultipleSelection() || this.span.hasClass(\"k-readonly\"))) {\n              this._placeholder(true);\n            }\n\n            this._inputTemplate();\n\n            this._accessors();\n\n            this._filterHeader();\n\n            this._checkAll();\n\n            this._enable();\n\n            if (options && (options.enable || options.enabled)) {\n              this.enable(true);\n            }\n\n            this._clearButton();\n          },\n          destroy: function () {\n            kendo.ui.Widget.fn.destroy.call(this);\n\n            if (this.treeview) {\n              this.treeview.destroy();\n            }\n\n            this.popup.destroy();\n            this.wrapper.off(ns);\n\n            this._clear.off(ns);\n\n            if (this.filterInput) {\n              this.filterInput.off(ns);\n            }\n\n            if (this.tagList) {\n              this.tagList.off(ns);\n            }\n\n            kendo.unbind(this.tagList);\n\n            if (this.options.checkAll && this.checkAll) {\n              this.checkAll.off(ns);\n            }\n\n            if (this._form) {\n              this._form.off(\"reset\", this._resetHandler);\n            }\n          },\n          setValue: function (value) {\n            value = Array.isArray(value) || value instanceof ObservableArray ? value.slice(0) : [value];\n            this._values = value;\n          },\n          items: function () {\n            return this.treeview.items();\n          },\n          value: function (value) {\n            var that = this;\n\n            if (value) {\n              if (that.filterInput && that.dataSource._filter) {\n                that._filtering = true;\n                that.dataSource.filter({});\n              } else if (!that.dataSource.data().length || !that.treeview.dataSource.data().length) {\n                that.dataSource.fetch(function () {\n                  if (that.options.loadOnDemand) {\n                    that._selection._setValue(value);\n                  } else {\n                    that.one('allNodesAreLoaded', function () {\n                      that._selection._setValue(value);\n                    });\n                  }\n                });\n                return;\n              }\n            }\n\n            return that._selection._setValue(value);\n          },\n          text: function (text) {\n            var loweredText;\n            var ignoreCase = this.options.ignoreCase;\n            text = text === null ? \"\" : text;\n\n            if (text !== undefined && !this._isMultipleSelection()) {\n              if (typeof text !== \"string\") {\n                this._textAccessor(text);\n\n                return;\n              }\n\n              loweredText = ignoreCase ? text : text.toLowerCase();\n\n              this._selectItemByText(loweredText);\n\n              this._textAccessor(loweredText);\n            } else {\n              return this._textAccessor();\n            }\n          },\n          _aria: function () {\n            var input = this.wrapper.find(\"span.k-input-inner\");\n            this.wrapper.attr({\n              \"aria-haspopup\": \"tree\",\n              \"aria-expanded\": false,\n              \"aria-owns\": this.treeview.element.attr(\"id\"),\n              \"role\": \"listbox\"\n            });\n            this._activeId = kendo.guid();\n\n            this._ariaLabel(this.wrapper);\n\n            if (this.filterInput && this.options.filterLabel) {\n              this.filterInput.attr(\"aria-label\", this.options.filterLabel);\n            }\n\n            if (!this.options.checkboxes && input.text().length) {\n              input.attr(\"role\", \"option\");\n              input.attr(\"aria-selected\", \"true\");\n              input.attr(\"id\", this._activeId);\n              this.wrapper.attr(\"aria-activedescendant\", this._activeId);\n            } else if (this.options.checkboxes) {\n              this.wrapper.attr({\n                \"aria-multiselectable\": true,\n                \"aria-describedby\": this.tagList[0].id\n              });\n              this.tagList.attr(\"role\", \"none\");\n            }\n          },\n          _header: function () {\n            var list = this;\n            var header = $(list.header);\n            var template = list.options.headerTemplate;\n\n            this._angularElement(header, \"cleanup\");\n\n            kendo.destroy(header);\n            header.remove();\n\n            if (!template) {\n              list.header = null;\n              return;\n            }\n\n            var headerTemplate = typeof template !== \"function\" ? kendo.template(template) : template;\n            header = $(headerTemplate({}));\n            list.header = header[0] ? header : null;\n            list.list.prepend(header);\n\n            this._angularElement(list.header, \"compile\");\n          },\n          _noData: function () {\n            var list = this;\n            var noData = $(list.noData);\n            var template = list.options.noDataTemplate === true ? list.options.messages.noData : list.options.noDataTemplate;\n            list.angular(\"cleanup\", function () {\n              return {\n                elements: noData\n              };\n            });\n            kendo.destroy(noData);\n            noData.remove();\n\n            if (!template) {\n              list.noData = null;\n              return;\n            }\n\n            list.noData = $('<div class=\"k-no-data\" style=\"display: none;\"></div>').appendTo(list.list);\n            list.noDataTemplate = typeof template !== \"function\" ? kendo.template(template) : template;\n          },\n          _renderNoData: function () {\n            var list = this;\n            var noData = list.noData;\n\n            if (!noData) {\n              return;\n            }\n\n            this._angularElement(noData, \"cleanup\");\n\n            noData.html(list.noDataTemplate({\n              instance: list\n            }));\n\n            this._angularElement(noData, \"compile\");\n          },\n          _footer: function () {\n            var list = this;\n            var footer = $(list.footer);\n            var template = list.options.footerTemplate;\n\n            this._angularElement(footer, \"cleanup\");\n\n            kendo.destroy(footer);\n            footer.remove();\n\n            if (!template) {\n              list.footer = null;\n              return;\n            }\n\n            list.footer = $('<div class=\"k-footer\"></div>').appendTo(list.list);\n            list.footerTemplate = typeof template !== \"function\" ? kendo.template(template) : template;\n          },\n          _renderFooter: function () {\n            var list = this;\n            var footer = list.footer;\n\n            if (!footer) {\n              return;\n            }\n\n            this._angularElement(footer, \"cleanup\");\n\n            footer.html(list.footerTemplate({\n              instance: list\n            }));\n\n            this._angularElement(footer, \"compile\");\n          },\n          _enable: function () {\n            var that = this,\n                options = that.options,\n                disabled = that.element.is(\"[disabled]\");\n\n            if (options.enable !== undefined) {\n              options.enabled = options.enable;\n            }\n\n            if (!options.enabled || disabled) {\n              that.enable(false);\n            } else {\n              that.readonly(that.element.is(\"[readonly]\"));\n            }\n          },\n          _adjustListWidth: function () {\n            var that = this,\n                list = that.list,\n                width = list[0].style.width,\n                wrapper = that.wrapper,\n                computedStyle,\n                computedWidth;\n\n            if (!list.data(WIDTH) && width) {\n              return;\n            }\n\n            computedStyle = window.getComputedStyle ? window.getComputedStyle(wrapper[0], null) : 0;\n            computedWidth = parseFloat(computedStyle && computedStyle.width) || outerWidth(wrapper);\n\n            if (computedStyle && browser.msie) {\n              // getComputedStyle returns different box in IE.\n              computedWidth += parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight) + parseFloat(computedStyle.borderLeftWidth) + parseFloat(computedStyle.borderRightWidth);\n            }\n\n            if (list.css(\"box-sizing\") !== \"border-box\") {\n              width = computedWidth - (outerWidth(list) - list.width());\n            } else {\n              width = computedWidth;\n            }\n\n            list.css({\n              fontFamily: wrapper.css(\"font-family\"),\n              width: that.options.autoWidth ? \"auto\" : width,\n              minWidth: width,\n              whiteSpace: that.options.autoWidth ? \"nowrap\" : \"normal\"\n            }).data(WIDTH, width);\n            return true;\n          },\n          _reset: function () {\n            var that = this,\n                element = that.element,\n                formId = element.attr(\"form\"),\n                form = formId ? $(\"#\" + formId) : element.closest(\"form\");\n\n            if (form[0]) {\n              that._resetHandler = function () {\n                setTimeout(function () {\n                  that.value(that._initial);\n                });\n              };\n\n              that._form = form.on(\"reset\", that._resetHandler);\n            }\n          },\n          _popup: function () {\n            var list = this;\n\n            if (list.options.checkboxes && list.options.checkAll) {\n              list.list.attr(\"role\", \"application\");\n            }\n\n            list.popup = new ui.Popup(list.list, extend({}, list.options.popup, {\n              anchor: list.wrapper,\n              open: list._openHandler.bind(list),\n              close: list._closeHandler.bind(list),\n              animation: list.options.animation,\n              isRtl: support.isRtl(list.wrapper),\n              autosize: list.options.autoWidth\n            }));\n          },\n          _angularElement: function (element, action) {\n            if (!element) {\n              return;\n            }\n\n            this.angular(action, function () {\n              return {\n                elements: element\n              };\n            });\n          },\n          _allowOpening: function () {\n            return this.options.noDataTemplate || this.treeview.dataSource.flatView().length;\n          },\n          _placeholder: function (show) {\n            if (this.span) {\n              this.span.toggleClass(\"k-readonly\", show).text(show ? this.options.placeholder : \"\");\n            }\n\n            if (this.span.text().trim().length > 0) {\n              this.span.parent().attr({\n                role: \"option\",\n                \"aria-selected\": true\n              });\n            } else {\n              this.span.parent().removeAttr(\"role\");\n              this.span.parent().removeAttr(\"aria-selected\");\n            }\n          },\n          _currentValue: function (dataItem) {\n            var currentValue = this._value(dataItem);\n\n            if (!currentValue && currentValue !== 0) {\n              currentValue = dataItem;\n            }\n\n            return currentValue;\n          },\n          _checkValue: function (dataItem) {\n            var value = \"\";\n            var indexOfValue = -1;\n            var currentValue = this.value();\n            var isMultiple = this.options.tagMode === \"multiple\";\n\n            if (dataItem || dataItem === 0) {\n              if (dataItem.level) {\n                dataItem._level = dataItem.level();\n              }\n\n              value = this._currentValue(dataItem);\n              indexOfValue = currentValue.indexOf(value);\n            }\n\n            if (dataItem.checked) {\n              var alreadyAddedTag = $.grep(this._tags, function (item) {\n                return item.uid === dataItem._tagUid;\n              });\n\n              if (alreadyAddedTag.length) {\n                return;\n              }\n\n              var itemToAdd = new ObservableObject(dataItem.toJSON());\n              dataItem._tagUid = itemToAdd.uid;\n\n              this._tags.push(itemToAdd);\n\n              if (this._tags.length === 1) {\n                this.span.hide();\n\n                if (!isMultiple) {\n                  this._multipleTags.push(itemToAdd);\n                }\n              }\n\n              if (indexOfValue === -1) {\n                currentValue.push(value);\n                this.setValue(currentValue);\n              }\n            } else {\n              var itemToRemove = this._tags.find(function (item) {\n                return item.uid === dataItem._tagUid;\n              });\n\n              var idx = this._tags.indexOf(itemToRemove);\n\n              if (idx !== -1) {\n                this._tags.splice(idx, 1);\n              } else {\n                this._treeViewCheckAllCheck(dataItem);\n\n                return;\n              }\n\n              if (this._tags.length === 0) {\n                this.span.show();\n\n                if (!isMultiple) {\n                  this._multipleTags.splice(0, 1);\n                }\n              }\n\n              if (indexOfValue !== -1) {\n                currentValue.splice(indexOfValue, 1);\n                this.setValue(currentValue);\n              }\n            }\n\n            this._treeViewCheckAllCheck(dataItem);\n\n            if (!this._preventChangeTrigger && !this._valueMethodCalled && !this._noInitialValue) {\n              this.trigger(CHANGE);\n            }\n\n            if (this.options.autoClose && this.popup.visible()) {\n              this.close();\n              this.wrapper.trigger(\"focus\");\n            }\n\n            this.popup.position();\n\n            this._toggleCloseVisibility();\n\n            this._updateSelectedOptions();\n          },\n          _updateSelectedOptions: function () {\n            if (this.element[0].tagName.toLowerCase() !== 'select') {\n              return;\n            }\n\n            var selectedItems = this._tags;\n            var options = '';\n            var dataItem = null;\n            var value = null;\n\n            if (selectedItems.length) {\n              for (var idx = 0; idx < selectedItems.length; idx++) {\n                dataItem = selectedItems[idx];\n                value = this._value(dataItem);\n                options += this._option(value, this._text(dataItem), true);\n              }\n            }\n\n            this.element.html(options);\n          },\n          _option: function (dataValue, dataText, selected) {\n            var option = \"<option\";\n\n            if (dataValue !== undefined) {\n              dataValue += \"\";\n\n              if (dataValue.indexOf('\"') !== -1) {\n                dataValue = dataValue.replace(quotRegExp, \"&quot;\");\n              }\n\n              option += ' value=\"' + dataValue + '\"';\n            }\n\n            if (selected) {\n              option += ' selected';\n            }\n\n            option += \">\";\n\n            if (dataText !== undefined) {\n              option += kendo.htmlEncode(dataText);\n            }\n\n            return option += \"</option>\";\n          },\n          _selectValue: function (dataItem) {\n            var value = \"\";\n            var text = \"\";\n\n            if (dataItem || dataItem === 0) {\n              if (dataItem.level) {\n                dataItem._level = dataItem.level();\n              }\n\n              text = this._text(dataItem) || dataItem;\n              value = this._currentValue(dataItem);\n            }\n\n            if (value === null) {\n              value = \"\";\n            }\n\n            this.setValue(value);\n\n            this._textAccessor(text, dataItem);\n\n            this._accessor(value);\n\n            if (!this._preventChangeTrigger && !this._valueMethodCalled) {\n              this.trigger(CHANGE);\n            }\n\n            this._valueMethodCalled = false;\n\n            if (this.options.autoClose && this.popup.visible()) {\n              this.close();\n              this.wrapper.trigger(\"focus\");\n            }\n\n            this.popup.position();\n\n            this._toggleCloseVisibility();\n          },\n          _clearClick: function (e) {\n            e.stopPropagation();\n            this.wrapper.trigger(\"focus\");\n\n            this._clearTextAndValue();\n          },\n          _clearTextAndValue: function () {\n            this.setValue([]);\n\n            this._clearInput();\n\n            this._clearText();\n\n            this._selection._clearValue();\n\n            this.popup.position();\n\n            this._toggleCloseVisibility();\n          },\n          _clearText: function () {\n            if (this.options.placeholder) {\n              this._placeholder(true);\n            } else {\n              if (this.span) {\n                this.span.html(\"\");\n              }\n            }\n          },\n          _inputTemplate: function () {\n            var template = this.options.valueTemplate;\n\n            if (!template) {\n              template = kendo.template('#:this._text(data)#', {\n                useWithBlock: false\n              }).bind(this);\n            } else {\n              template = kendo.template(template);\n            }\n\n            this.valueTemplate = template;\n          },\n          _assignInstance: function (text, value) {\n            var dataTextField = this.options.dataTextField;\n            var dataItem = {};\n\n            if (dataTextField) {\n              assign(dataItem, dataTextField.split(DOT), text);\n              assign(dataItem, this.options.dataValueField.split(DOT), value);\n              dataItem = new ObservableObject(dataItem);\n            } else {\n              dataItem = text;\n            }\n\n            return dataItem;\n          },\n          _textAccessor: function (text, dataItem) {\n            var valueTemplate = this.valueTemplate;\n            var span = this.span;\n\n            if (text === undefined) {\n              return span.text();\n            }\n\n            span.removeClass(\"k-readonly\");\n\n            if (!dataItem && ($.isPlainObject(text) || text instanceof ObservableObject)) {\n              dataItem = text;\n            }\n\n            if (!dataItem) {\n              dataItem = this._assignInstance(text, this._accessor());\n            }\n\n            var getElements = function () {\n              return {\n                elements: span.get(),\n                data: [{\n                  dataItem: dataItem\n                }]\n              };\n            };\n\n            this.angular(\"cleanup\", getElements);\n\n            try {\n              span.html(valueTemplate(dataItem));\n            } catch (e) {\n              //dataItem has missing fields required in custom template\n              if (span) {\n                span.html(\"\");\n              }\n            }\n\n            this.angular(\"compile\", getElements);\n          },\n          _accessors: function () {\n            var element = this.element;\n            var options = this.options;\n            var getter = kendo.getter;\n            var textField = element.attr(kendo.attr(\"text-field\"));\n            var valueField = element.attr(kendo.attr(\"value-field\"));\n\n            var getterFunction = function (field) {\n              if (Array.isArray(field)) {\n                var count = field.length;\n                var levels = $.map(field, function (x) {\n                  return function (d) {\n                    return d[x];\n                  };\n                });\n                return function (dataItem) {\n                  var level = dataItem._level;\n\n                  if (!level && level !== 0) {\n                    return;\n                  }\n\n                  return levels[Math.min(level, count - 1)](dataItem);\n                };\n              } else {\n                return getter(field);\n              }\n            };\n\n            if (!options.dataTextField && textField) {\n              options.dataTextField = textField;\n            }\n\n            if (!options.dataValueField && valueField) {\n              options.dataValueField = valueField;\n            }\n\n            options.dataTextField = options.dataTextField || \"text\";\n            options.dataValueField = options.dataValueField || \"value\";\n            this._text = getterFunction(options.dataTextField);\n            this._value = getterFunction(options.dataValueField);\n          },\n          _accessor: function (value, idx) {\n            return this._accessorInput(value, idx);\n          },\n          _accessorInput: function (value) {\n            var element = this.element[0];\n\n            if (value === undefined) {\n              return element.value;\n            } else {\n              if (value === null) {\n                value = \"\";\n              }\n\n              element.value = value;\n            }\n          },\n          _clearInput: function () {\n            var element = this.element[0];\n            element.value = \"\";\n          },\n          _clearButton: function () {\n            var clearTitle = this.options.messages.clear;\n\n            if (!this._clear) {\n              this._clear = $('<span unselectable=\"on\" class=\"k-clear-value\" title=\"' + clearTitle + '\"><span class=\"k-icon k-i-x\"></span></span>').attr({\n                \"role\": \"button\",\n                \"tabIndex\": -1\n              });\n            }\n\n            if (this.options.clearButton) {\n              this._clear.insertAfter(this.tagList || this.span.parent());\n\n              this.wrapper.addClass(\"k-dropdowntree-clearable\");\n            } else {\n              if (!this.options.clearButton) {\n                this._clear.remove();\n              }\n            }\n          },\n          _toggleCloseVisibility: function () {\n            var isReadOnly = this.element.attr(READONLY);\n            var hasValue = this.value() && !this._isMultipleSelection() || this.value().length;\n            var valueDoesNotEqualPlaceHolder = this.element.val() && this.element.val() !== this.options.placeholder;\n\n            if (!isReadOnly && (hasValue || valueDoesNotEqualPlaceHolder)) {\n              this._showClear();\n            } else {\n              this._hideClear();\n            }\n          },\n          _showClear: function () {\n            if (this._clear) {\n              this._clear.removeClass(HIDDENCLASS);\n            }\n          },\n          _hideClear: function () {\n            if (this._clear) {\n              this._clear.addClass(HIDDENCLASS);\n            }\n          },\n          _openHandler: function (e) {\n            this._adjustListWidth();\n\n            if (this.trigger(OPEN)) {\n              e.preventDefault();\n            } else {\n              this.wrapper.attr(\"aria-expanded\", true);\n              this.tree.attr(\"aria-hidden\", false).attr(\"role\", \"tree\");\n            }\n          },\n          _closeHandler: function (e) {\n            if (this.trigger(CLOSE)) {\n              e.preventDefault();\n            } else {\n              this.wrapper.attr(\"aria-expanded\", false);\n              this.tree.attr(\"aria-hidden\", true);\n            }\n          },\n          _treeview: function () {\n            var that = this;\n\n            if (that.options.height) {\n              that.tree.css('max-height', that.options.height);\n            }\n\n            that.tree.attr('id', kendo.guid());\n            that.treeview = new TreeView(that.tree, extend({\n              size: that.options.size\n            }, that.options.treeview), that);\n            that.dataSource = that.treeview.dataSource;\n            that.treeview.bind(\"select\", function (e) {\n              that.trigger(\"select\", e);\n            });\n          },\n          _treeViewDataBound: function (e) {\n            if (e.node && this._prev && this._prev.length) {\n              e.sender.expand(e.node);\n            }\n\n            if (this._filtering) {\n              if (!e.node) {\n                this._filtering = false;\n              }\n\n              if (!this._isMultipleSelection()) {\n                this._deselectItem(e);\n              }\n\n              return;\n            }\n\n            if (!this.treeview) {\n              this.treeview = e.sender;\n            }\n\n            if (!e.node) {\n              var rootItems = e.sender.dataSource.data();\n\n              this._checkLoadedItems(rootItems);\n\n              if (this._noInitialValue) {\n                this._noInitialValue = false;\n              }\n            } else {\n              var rootItem = e.sender.dataItem(e.node);\n\n              if (rootItem) {\n                var subItems = rootItem.children.data();\n\n                this._checkLoadedItems(subItems);\n              }\n            }\n\n            this.trigger(\"dataBound\", e);\n          },\n          _deselectItem: function (e) {\n            var items = [];\n\n            if (!e.node) {\n              items = e.sender.dataSource.data();\n            } else {\n              var rootItem = e.sender.dataItem(e.node);\n\n              if (rootItem) {\n                items = rootItem.children.data();\n              }\n            }\n\n            for (var i = 0; i < items.length; i++) {\n              if (items[i].selected && !this._valueComparer(items[i], this.value())) {\n                items[i].set(\"selected\", false);\n              }\n            }\n          },\n          _checkLoadedItems: function (items) {\n            var value = this.value();\n\n            if (!items) {\n              return;\n            }\n\n            for (var idx = 0; idx < items.length; idx++) {\n              this._selection._checkLoadedItem(items[idx], value);\n            }\n          },\n          _treeViewCheckAllCheck: function (dataItem) {\n            if (this.options.checkAll && this.checkAll) {\n              this._getAllChecked();\n\n              if (dataItem.checked) {\n                this._checkCheckAll();\n              } else {\n                this._uncheckCheckAll();\n              }\n            }\n          },\n          _checkCheckAll: function () {\n            var checkAllCheckbox = this.checkAll.find('.k-checkbox');\n\n            if (this._allItemsAreChecked) {\n              checkAllCheckbox.prop('checked', true).prop('indeterminate', false);\n            } else {\n              checkAllCheckbox.prop('indeterminate', true);\n            }\n          },\n          _uncheckCheckAll: function () {\n            var checkAllCheckbox = this.checkAll.find('.k-checkbox');\n\n            if (this._allItemsAreUnchecked) {\n              checkAllCheckbox.prop('checked', false).prop('indeterminate', false);\n            } else {\n              checkAllCheckbox.prop('indeterminate', true);\n            }\n          },\n          _filterHeader: function () {\n            var filterTemplate = '<div class=\"k-list-filter\">' + '<span class=\"k-searchbox k-input k-input-md k-rounded-md k-input-solid\" type=\"text\" autocomplete=\"off\">' + '<span class=\"k-input-icon k-icon k-i-search\"></span>' + '</span>' + '</div>';\n\n            if (this.filterInput) {\n              this.filterInput.off(ns).parent().remove();\n              this.filterInput = null;\n            }\n\n            if (this._isFilterEnabled()) {\n              this._disableCheckChildren();\n\n              this.filterInput = $('<input class=\"k-input-inner\" type=\"text\" />').attr({\n                placeholder: this.element.attr(\"placeholder\"),\n                title: this.element.attr(\"title\"),\n                role: \"searchbox\",\n                \"aria-haspopup\": \"listbox\",\n                \"aria-autocomplete\": \"list\"\n              });\n              this.filterInput.on(\"input\", this._filterChange.bind(this));\n              $(filterTemplate).insertBefore(this.tree).find(\".k-searchbox\").append(this.filterInput);\n            }\n          },\n          _filterChange: function () {\n            if (this.filterInput) {\n              this._search();\n            }\n          },\n          _disableCheckChildren: function () {\n            if (this._isMultipleSelection() && this.options.treeview.checkboxes && this.options.treeview.checkboxes.checkChildren) {\n              this.options.treeview.checkboxes.checkChildren = false;\n            }\n          },\n          _checkAll: function () {\n            if (this.checkAll) {\n              this.checkAll.find(\".k-checkbox-label, .k-checkbox\").off(ns);\n              this.checkAll.remove();\n              this.checkAll = null;\n            }\n\n            if (this._isMultipleSelection() && this.options.checkAll) {\n              var checkAllCheckbox = html.renderCheckBox(extend({}, this.options, {\n                label: \"Check All\",\n                rounded: \"medium\"\n              }));\n              this.checkAll = $('<div class=\"k-check-all\">' + checkAllCheckbox + '</div>').insertBefore(this.tree);\n              this.checkAll.find(\".k-checkbox-label\").html(kendo.template(this.options.checkAllTemplate)({\n                instance: this\n              }));\n              this.checkAll.find(\".k-checkbox\").on(\"change\" + ns, this._changeCheckAll.bind(this)).on(\"keydown\" + ns, this._keydownCheckAll.bind(this));\n              this._disabledCheckedItems = [];\n              this._disabledUnCheckedItems = [];\n\n              this._getAllChecked();\n\n              if (!this._allItemsAreUnchecked) {\n                this._checkCheckAll();\n              }\n            }\n          },\n          _changeCheckAll: function () {\n            var checkAllCheckbox = this.checkAll.find('.k-checkbox');\n            var isChecked = checkAllCheckbox.prop('checked');\n\n            this._updateCheckAll(isChecked);\n          },\n          _updateCheckAll: function (isChecked) {\n            var checkAllCheckbox = this.checkAll.find('.k-checkbox');\n\n            this._toggleCheckAllItems(isChecked);\n\n            checkAllCheckbox.prop('checked', isChecked);\n\n            if (this._disabledCheckedItems.length && this._disabledUnCheckedItems.length) {\n              checkAllCheckbox.prop('indeterminate', true);\n            } else if (this._disabledCheckedItems.length) {\n              checkAllCheckbox.prop('indeterminate', !isChecked);\n            } else if (this._disabledUnCheckedItems.length) {\n              checkAllCheckbox.prop('indeterminate', isChecked);\n            } else {\n              checkAllCheckbox.prop('indeterminate', false);\n            }\n\n            this._disabledCheckedItems = [];\n            this._disabledUnCheckedItems = [];\n          },\n          _keydownCheckAll: function (e) {\n            var key = e.keyCode;\n            var altKey = e.altKey;\n\n            if (altKey && key === keys.UP || key === keys.ESC || key === keys.TAB) {\n              this.close();\n              this.wrapper.trigger(\"focus\");\n              e.preventDefault();\n              return;\n            }\n\n            if (key === keys.UP) {\n              if (this.filterInput) {\n                this.filterInput.trigger(\"focus\");\n              } else {\n                this.wrapper.trigger(\"focus\");\n              }\n\n              e.preventDefault();\n            }\n\n            if (key === keys.DOWN) {\n              if (this.tree && this.tree.is(\":visible\")) {\n                this.tree.focus();\n              }\n\n              e.preventDefault();\n            }\n\n            if (key === keys.SPACEBAR && (browser.msie || browser.edge)) {\n              this._clickCheckAll();\n\n              e.preventDefault();\n            }\n          },\n          _clickCheckAll: function () {\n            var checkAllCheckbox = this.checkAll.find('.k-checkbox');\n            var isChecked = checkAllCheckbox.prop('checked');\n\n            this._updateCheckAll(!isChecked);\n\n            checkAllCheckbox.trigger(\"focus\");\n          },\n          //treeview\n          _dfs: function (items, action, prop) {\n            for (var idx = 0; idx < items.length; idx++) {\n              if (!this[action](items[idx], prop)) {\n                break;\n              }\n\n              this._traverceChildren(items[idx], action, prop);\n            }\n          },\n          _uncheckItemByUid: function (uid) {\n            this._dfs(this.dataSource.data(), '_uncheckItemEqualsUid', uid);\n          },\n          _uncheckItemEqualsUid: function (item, uid) {\n            if (item.enabled !== false && item._tagUid == uid) {\n              item.set(\"checked\", false);\n              return false;\n            }\n\n            return true;\n          },\n          _selectItemByText: function (text) {\n            this._dfs(this.dataSource.data(), '_itemEqualsText', text);\n          },\n          _itemEqualsText: function (item, text) {\n            if (item.enabled !== false && this._text(item) === text) {\n              this.treeview.select(this.treeview.findByUid(item.uid));\n\n              this._selectValue(item);\n\n              return false;\n            }\n\n            return true;\n          },\n          _selectItemByValue: function (value) {\n            this._dfs(this.dataSource.data(), '_itemEqualsValue', value);\n          },\n          _itemEqualsValue: function (item, value) {\n            if (item.enabled !== false && this._valueComparer(item, value)) {\n              this.treeview.select(this.treeview.findByUid(item.uid));\n              return false;\n            }\n\n            return true;\n          },\n          _checkItemByValue: function (value) {\n            var items = this.treeview.dataItems();\n\n            for (var idx = 0; idx < value.length; idx++) {\n              this._dfs(items, '_checkItemEqualsValue', value[idx]);\n            }\n          },\n          _checkItemEqualsValue: function (item, value) {\n            if (item.enabled !== false && this._valueComparer(item, value)) {\n              item.set(\"checked\", true);\n              return false;\n            }\n\n            return true;\n          },\n          _valueComparer: function (item, value) {\n            var itemValue = this._value(item);\n\n            var itemText;\n\n            if (!this._isNullorUndefined(itemValue)) {\n              if (this._isNullorUndefined(value)) {\n                return false;\n              }\n\n              var newValue = this._value(value);\n\n              if (newValue) {\n                return itemValue == newValue;\n              } else {\n                return itemValue == value;\n              }\n            }\n\n            itemText = this._text(item);\n\n            if (itemText) {\n              if (this._text(value)) {\n                return itemText == this._text(value);\n              } else {\n                return itemText == value;\n              }\n            }\n\n            return false;\n          },\n          _isNullorUndefined: function (value) {\n            return value === undefined || value === null;\n          },\n          _getAllChecked: function () {\n            this._allCheckedItems = [];\n            this._allItemsAreChecked = true;\n            this._allItemsAreUnchecked = true;\n\n            this._dfs(this.dataSource.data(), '_getAllCheckedItems');\n\n            return this._allCheckedItems;\n          },\n          _getAllCheckedItems: function (item) {\n            if (this._allItemsAreChecked) {\n              this._allItemsAreChecked = item.checked;\n            }\n\n            if (this._allItemsAreUnchecked) {\n              this._allItemsAreUnchecked = !item.checked;\n            }\n\n            if (item.checked) {\n              this._allCheckedItems.push(item);\n            }\n\n            return true;\n          },\n          _traverceChildren: function (item, action, prop) {\n            var childrenField = item._childrenOptions && item._childrenOptions.schema ? item._childrenOptions.schema.data : null;\n            var subItems = item[childrenField] || item.items || item.children;\n\n            if (!subItems) {\n              return;\n            }\n\n            this._dfs(subItems, action, prop);\n          },\n          _toggleCheckAllItems: function (checked) {\n            this._dfs(this.dataSource.data(), '_checkAllCheckItem', checked);\n          },\n          _checkAllCheckItem: function (item, checked) {\n            if (item.enabled === false) {\n              if (item.checked) {\n                this._disabledCheckedItems.push(item);\n              } else {\n                this._disabledUnCheckedItems.push(item);\n              }\n            } else {\n              item.set(\"checked\", checked);\n            }\n\n            return true;\n          },\n          _isFilterEnabled: function () {\n            var filter = this.options.filter;\n            return filter && filter !== \"none\";\n          },\n          _editable: function (options) {\n            var that = this;\n            var element = that.element;\n            var disable = options.disable;\n            var readonly = options.readonly;\n            var wrapper = that.wrapper.add(that.filterInput).off(ns);\n            var dropDownWrapper = that.wrapper.off(HOVEREVENTS);\n\n            if (that._isMultipleSelection()) {\n              that.tagList.off(CLICK + ns);\n            }\n\n            if (!readonly && !disable) {\n              element.prop(DISABLED, false).prop(READONLY, false);\n              dropDownWrapper.removeClass(STATEDISABLED).on(HOVEREVENTS, that._toggleHover);\n\n              that._clear.on(\"click\" + ns, that._clearClick.bind(that));\n\n              wrapper.attr(TABINDEX, wrapper.data(TABINDEX)).attr(ARIA_DISABLED, false).on(\"keydown\" + ns, that._keydown.bind(that)).on(\"focusin\" + ns, that._focusinHandler.bind(that)).on(\"focusout\" + ns, that._focusoutHandler.bind(that));\n              that.wrapper.on(CLICK + ns, that._wrapperClick.bind(that));\n\n              if (this._isMultipleSelection()) {\n                that.tagList.on(CLICK + ns, \"span.k-chip\", function (e) {\n                  $(e.currentTarget).addClass(FOCUSED);\n                });\n                that.tagList.on(CLICK + ns, \".k-i-x-circle\", function (e) {\n                  that._removeTagClick(e);\n                });\n              }\n            } else if (disable) {\n              wrapper.removeAttr(TABINDEX);\n              dropDownWrapper.addClass(STATEDISABLED);\n            } else {\n              wrapper.attr(TABINDEX, wrapper.data(TABINDEX));\n              dropDownWrapper.removeClass(STATEDISABLED);\n              wrapper.on(\"focusin\" + ns, that._focusinHandler.bind(that)).on(\"focusout\" + ns, that._focusoutHandler.bind(that));\n            }\n\n            element.attr(DISABLED, disable).attr(READONLY, readonly);\n            wrapper.attr(ARIA_DISABLED, disable);\n          },\n          _focusinHandler: function () {\n            this.wrapper.addClass(FOCUSED);\n            this._prevent = false;\n          },\n          _focusoutHandler: function () {\n            var that = this;\n\n            if (this._isMultipleSelection()) {\n              this.tagList.find(DOT + FOCUSED).removeClass(FOCUSED);\n            }\n\n            if (!that._prevent) {\n              this.wrapper.removeClass(FOCUSED);\n              that._prevent = true;\n              that.element.trigger(\"blur\");\n            }\n          },\n          _toggle: function (open) {\n            open = open !== undefined ? open : !this.popup.visible();\n            this[open ? OPEN : CLOSE]();\n          },\n          _wrapperClick: function (e) {\n            e.preventDefault();\n            this.popup.unbind(\"activate\", this._focusInputHandler);\n            this._focused = this.wrapper;\n            this._prevent = false;\n\n            this._toggle();\n          },\n          _toggleHover: function (e) {\n            $(e.currentTarget).toggleClass(HOVER, e.type === \"mouseenter\");\n          },\n          _focusInput: function () {\n            if (this.filterInput) {\n              this.filterInput.trigger(\"focus\");\n            } else if (this.checkAll) {\n              this.checkAll.find(\".k-checkbox\").trigger(\"focus\");\n            } else if (this.tree.is(\":visible\")) {\n              this.tree[0].focus({\n                preventScroll: true\n              });\n\n              this._ie11PreventScrollOnFocus();\n            }\n          },\n          _ie11PreventScrollOnFocus: function () {\n            if (browser.msie && browser.version == 11) {\n              var popup = this.popup;\n\n              popup._toggleResize(false);\n\n              setTimeout(function () {\n                popup._toggleResize(true);\n              }, 50);\n            }\n          },\n          _keydown: function (e) {\n            var key = e.keyCode;\n            var altKey = e.altKey;\n            var isFilterInputActive;\n            var isWrapperActive;\n            var focused, tagItem;\n            var isPopupVisible = this.popup.visible();\n\n            if (this.filterInput) {\n              isFilterInputActive = this.filterInput[0] === activeElement();\n            }\n\n            if (this.wrapper) {\n              isWrapperActive = this.wrapper[0] === activeElement();\n            }\n\n            if (isWrapperActive) {\n              if (key === keys.ESC) {\n                this._clearTextAndValue();\n\n                e.preventDefault();\n                return;\n              }\n\n              if (this._isMultipleSelection()) {\n                if (key === keys.LEFT) {\n                  this._focusPrevTag();\n\n                  e.preventDefault();\n                  return;\n                }\n\n                if (key === keys.RIGHT) {\n                  this._focusNextTag();\n\n                  e.preventDefault();\n                  return;\n                }\n\n                if (key === keys.HOME) {\n                  this._focusFirstTag();\n\n                  e.preventDefault();\n                  return;\n                }\n\n                if (key === keys.END) {\n                  this._focusLastTag();\n\n                  e.preventDefault();\n                  return;\n                }\n\n                if (key === keys.DELETE) {\n                  focused = this.tagList.find(DOT + FOCUSED).first();\n\n                  if (focused.length) {\n                    tagItem = this._tags[focused.index()];\n\n                    this._removeTag(tagItem);\n                  }\n\n                  e.preventDefault();\n                  return;\n                }\n\n                if (key === keys.BACKSPACE) {\n                  focused = this.tagList.find(DOT + FOCUSED).first();\n\n                  if (focused.length) {\n                    tagItem = this._tags[focused.index()];\n\n                    this._removeTag(tagItem);\n                  } else {\n                    focused = this._focusLastTag();\n\n                    if (focused.length) {\n                      tagItem = this._tags[focused.index()];\n\n                      this._removeTag(tagItem);\n                    }\n                  }\n\n                  e.preventDefault();\n                  return;\n                }\n              }\n            }\n\n            if (isFilterInputActive) {\n              if (key === keys.ESC) {\n                this._clearFilter();\n              }\n\n              if (key === keys.UP && !altKey) {\n                this.wrapper.trigger(\"focus\");\n                e.preventDefault();\n              }\n\n              if (browser.msie && browser.version < 10) {\n                if (key === keys.BACKSPACE || key === keys.DELETE) {\n                  this._search();\n                }\n              }\n\n              if (key === keys.TAB) {\n                this.close();\n                this.wrapper.trigger(\"focus\");\n                e.preventDefault();\n                return;\n              }\n            }\n\n            if (altKey && key === keys.UP || key === keys.ESC) {\n              this.close();\n              this.wrapper.trigger(\"focus\");\n              e.preventDefault();\n              return;\n            }\n\n            if (key === keys.ENTER && this._typingTimeout && this.filterInput && isPopupVisible) {\n              e.preventDefault();\n              return;\n            }\n\n            if (key === keys.SPACEBAR && !isFilterInputActive) {\n              this._toggle(!isPopupVisible);\n\n              e.preventDefault();\n            }\n\n            if (altKey && key === keys.DOWN && !isPopupVisible) {\n              this.open();\n              e.preventDefault();\n            }\n\n            if (key === keys.DOWN && isPopupVisible) {\n              if (this.filterInput && !isFilterInputActive) {\n                this.filterInput.trigger(\"focus\");\n              } else if (this.checkAll && this.checkAll.is(\":visible\")) {\n                this.checkAll.find('input').trigger(\"focus\");\n              } else if (this.tree.is(\":visible\")) {\n                this.tree[0].focus({\n                  preventScroll: true\n                });\n\n                this._ie11PreventScrollOnFocus();\n              }\n\n              e.preventDefault();\n            }\n\n            if (key === keys.TAB && isPopupVisible) {\n              this.close();\n              this.wrapper.trigger(\"focus\");\n              e.preventDefault();\n            }\n          },\n          _focusPrevTag: function () {\n            var focused = this.tagList.find(DOT + FOCUSED);\n\n            if (focused.length) {\n              var activedescendant = this._activeId;\n              focused.first().removeClass(FOCUSED).removeAttr(\"id\").prev(CHIP).addClass(FOCUSED).attr(\"id\", activedescendant);\n              this.wrapper.attr(\"aria-activedescendant\", activedescendant);\n            } else {\n              this._focusLastTag();\n            }\n          },\n          _focusNextTag: function () {\n            var focused = this.tagList.find(DOT + FOCUSED);\n\n            if (focused.length) {\n              var activedescendant = this._activeId;\n              focused.first().removeClass(FOCUSED).removeAttr(\"id\").next(CHIP).addClass(FOCUSED).attr(\"id\", activedescendant);\n              this.wrapper.attr(\"aria-activedescendant\", activedescendant);\n            } else {\n              this._focusFirstTag();\n            }\n          },\n          _focusFirstTag: function () {\n            var activedescendant = this._activeId;\n\n            this._clearDisabledTag();\n\n            var firstTag = this.tagList.children(CHIP).first().addClass(FOCUSED).attr(\"id\", activedescendant);\n            this.wrapper.attr(\"aria-activedescendant\", activedescendant);\n            return firstTag;\n          },\n          _focusLastTag: function () {\n            var activedescendant = this._activeId;\n\n            this._clearDisabledTag();\n\n            var lastTag = this.tagList.children(CHIP).last().addClass(FOCUSED).attr(\"id\", activedescendant);\n            this.wrapper.attr(\"aria-activedescendant\", activedescendant);\n            return lastTag;\n          },\n          _clearDisabledTag: function () {\n            this.tagList.find(DOT + FOCUSED).removeClass(FOCUSED).removeAttr(\"id\");\n          },\n          _search: function () {\n            var that = this;\n            clearTimeout(that._typingTimeout);\n            that._typingTimeout = setTimeout(function () {\n              var value = that.filterInput.val();\n\n              if (that._prev !== value) {\n                that._prev = value;\n                that.search(value);\n              }\n\n              that._typingTimeout = null;\n            }, that.options.delay);\n          },\n          _clearFilter: function () {\n            if (this.filterInput.val().length) {\n              this.filterInput.val(\"\");\n              this._prev = \"\";\n              this._filtering = true;\n              this.treeview.dataSource.filter({});\n            }\n          },\n          _removeTagClick: function (e) {\n            e.stopPropagation();\n\n            var tagItem = this._tags[$(e.currentTarget.closest(CHIP)).index()];\n\n            this._removeTag(tagItem);\n          },\n          _removeTag: function (tagItem) {\n            if (!tagItem) {\n              return;\n            }\n\n            var uid = tagItem.uid;\n\n            this._uncheckItemByUid(uid);\n          }\n        });\n\n        function assign(instance, fields, value) {\n          var idx = 0,\n              lastIndex = fields.length - 1,\n              field;\n\n          for (; idx < lastIndex; ++idx) {\n            field = fields[idx];\n\n            if (!(field in instance)) {\n              instance[field] = {};\n            }\n\n            instance = instance[field];\n          }\n\n          instance[fields[lastIndex]] = value;\n        }\n\n        ui.plugin(DropDownTree);\n        kendo.cssProperties.registerPrefix(\"DropDownTree\", \"k-picker-\");\n        kendo.cssProperties.registerValues(\"DropDownTree\", [{\n          prop: \"rounded\",\n          values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n        }]);\n        kendo.cssProperties.registerPrefix(\"MultiSelectDropDownTree\", \"k-input-\");\n        kendo.cssProperties.registerValues(\"MultiSelectDropDownTree\", [{\n          prop: \"rounded\",\n          values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n        }]);\n        var SingleSelection = kendo.Class.extend({\n          init: function (view) {\n            this._dropdowntree = view;\n          },\n          _initWrapper: function () {\n            this._wrapper();\n\n            this._span();\n          },\n          _preselect: function (data) {\n            var dropdowntree = this._dropdowntree;\n\n            dropdowntree._selectValue(data);\n          },\n          _wrapper: function () {\n            var dropdowntree = this._dropdowntree,\n                element = dropdowntree.element,\n                DOMelement = element[0],\n                wrapper;\n            wrapper = element.parent();\n\n            if (!wrapper.is(\"span.k-dropdowntree\")) {\n              wrapper = element.wrap(\"<span />\").parent();\n              wrapper[0].style.cssText = DOMelement.style.cssText;\n              wrapper[0].title = DOMelement.title;\n            }\n\n            dropdowntree._focused = dropdowntree.wrapper = wrapper.addClass(\"k-dropdowntree k-picker\").addClass(DOMelement.className).removeClass('input-validation-error').removeClass('k-invalid').css(\"display\", \"\").attr({\n              accesskey: element.attr(\"accesskey\"),\n              unselectable: \"on\"\n            });\n            element.hide().removeAttr(\"accesskey\");\n          },\n          _span: function () {\n            var dropdowntree = this._dropdowntree,\n                wrapper = dropdowntree.wrapper,\n                SELECTOR = \"span.k-input-value-text\",\n                span;\n            span = wrapper.find(SELECTOR);\n\n            if (!span[0]) {\n              wrapper.append('<span unselectable=\"on\" class=\"k-input-inner\"><span class=\"k-input-value-text\"></span></span>' + html.renderButton('<button unselectable=\"on\" class=\"k-input-button\" aria-label=\"select\" tabindex=\"-1\"></button>', extend({}, dropdowntree.options, {\n                icon: \"arrow-s\",\n                shape: null,\n                rounded: null\n              }))).append(dropdowntree.element);\n              span = wrapper.find(SELECTOR);\n            }\n\n            dropdowntree.span = span;\n            dropdowntree._arrow = wrapper.find(\".k-input-button\");\n            dropdowntree._arrowIcon = dropdowntree._arrow.find(\".k-icon\");\n          },\n          _setValue: function (value) {\n            var dropdowntree = this._dropdowntree;\n            var currentValue;\n\n            if (value === undefined || value === null) {\n              currentValue = dropdowntree._values.slice()[0];\n              value = typeof currentValue === \"object\" ? currentValue : dropdowntree._accessor() || currentValue;\n              return value === undefined || value === null ? \"\" : value;\n            }\n\n            dropdowntree._valueMethodCalled = true;\n\n            if (value.length === 0) {\n              dropdowntree._clearTextAndValue();\n\n              dropdowntree._valueMethodCalled = false;\n              return;\n            }\n\n            dropdowntree._selectItemByValue(value);\n\n            dropdowntree._toggleCloseVisibility();\n          },\n          _clearValue: function () {\n            var dropdowntree = this._dropdowntree;\n            var selectedNode = dropdowntree.treeview.select();\n\n            if (dropdowntree.treeview.dataItem(selectedNode)) {\n              dropdowntree.treeview.dataItem(selectedNode).set('selected', false);\n\n              if (!dropdowntree._valueMethodCalled) {\n                dropdowntree.trigger(CHANGE);\n              }\n            }\n          },\n          _checkLoadedItem: function (tempItem, value) {\n            var dropdowntree = this._dropdowntree;\n\n            if (!dropdowntree._isNullorUndefined(value) && value !== \"\") {\n              if (dropdowntree._valueComparer(tempItem, value)) {\n                dropdowntree._preventChangeTrigger = true;\n                tempItem.set(\"selected\", true);\n                dropdowntree._preventChangeTrigger = false;\n              } else if (tempItem.selected) {\n                dropdowntree.treeview.select(dropdowntree.treeview.findByUid(tempItem.uid));\n              }\n            } else if (!value && tempItem.selected) {\n              dropdowntree.treeview.select(dropdowntree.treeview.findByUid(tempItem.uid));\n            }\n          }\n        });\n        var MultipleSelection = kendo.Class.extend({\n          init: function (view) {\n            this._dropdowntree = view;\n          },\n          _initWrapper: function () {\n            var dropdowntree = this._dropdowntree;\n\n            this._tagTemplate();\n\n            dropdowntree.element.attr(\"multiple\", \"multiple\").hide();\n\n            this._wrapper();\n\n            dropdowntree._tags = new ObservableArray([]);\n            dropdowntree._multipleTags = new ObservableArray([]);\n\n            this._tagList();\n\n            dropdowntree.span = $('<span unselectable=\"on\" class=\"k-input-inner\"><span class=\"k-input-value-text\"></span></span>').appendTo(dropdowntree.tagList).find(\".k-input-value-text\");\n          },\n          _preselect: function (data, value) {\n            var dropdowntree = this._dropdowntree;\n            var valueToSelect = value || dropdowntree.options.value;\n\n            if (!Array.isArray(data) && !(data instanceof kendo.data.ObservableArray)) {\n              data = [data];\n            }\n\n            if ($.isPlainObject(data[0]) || data[0] instanceof kendo.data.ObservableObject || !dropdowntree.options.dataValueField) {\n              dropdowntree.dataSource.data(data);\n              dropdowntree.value(valueToSelect);\n            }\n          },\n          _tagTemplate: function () {\n            var dropdowntree = this._dropdowntree;\n            var options = dropdowntree.options;\n            var tagTemplate = options.valueTemplate;\n            var isMultiple = options.tagMode === \"multiple\";\n            var singleTag = options.messages.singleTag;\n            tagTemplate = tagTemplate ? kendo.template(tagTemplate) : dropdowntree.valueTemplate;\n\n            dropdowntree.valueTemplate = function (data) {\n              return html.renderChip('<span unselectable=\"on\" role=\"option\"' + 'class=\"' + (data.enabled === false ? \"k-disabled\" : \"\") + '\"' + (data.enabled === false ? 'aria-disabled=\"true\"' : '') + '>' + '</span>', $.extend({}, options, {\n                fillMode: \"solid\",\n                themeColor: \"base\",\n                rounded: \"medium\",\n                attr: {\n                  unselectable: \"on\"\n                },\n                text: isMultiple ? tagTemplate(data) : '<span unselectable=\"on\" data-bind=\"text: tags.length\"></span>' + '<span unselectable=\"on\">&nbsp;' + singleTag + '</span>',\n                removable: isMultiple,\n                removeIcon: \"x-circle\",\n                removableAttr: {\n                  unselectable: \"on\",\n                  \"aria-hidden\": true,\n                  \"aria-label\": dropdowntree.options.messages.deleteTag,\n                  title: dropdowntree.options.messages.deleteTag\n                }\n              }));\n            };\n          },\n          _wrapper: function () {\n            var dropdowntree = this._dropdowntree,\n                element = dropdowntree.element,\n                wrapper = element.parent(\"span.k-dropdowntree\");\n\n            if (!wrapper[0]) {\n              wrapper = element.wrap('<span class=\"k-dropdowntree k-input\" unselectable=\"on\" />').parent();\n              wrapper[0].style.cssText = element[0].style.cssText;\n              wrapper[0].title = element[0].title;\n            }\n\n            dropdowntree.wrapper = wrapper.addClass(element[0].className).css(\"display\", \"\");\n          },\n          _tagList: function () {\n            var dropdowntree = this._dropdowntree,\n                tagList = dropdowntree.wrapper.children(\"div.k-input-values\");\n\n            if (!tagList[0]) {\n              var isMultiple = dropdowntree.options.tagMode === \"multiple\";\n              var tagCollection = isMultiple ? \"tags\" : \"multipleTag\";\n              tagList = $(html.renderChipList('<div unselectable=\"on\" class=\"k-input-values\" data-template=\"tagTemplate\" data-bind=\"source: ' + tagCollection + '\" />', $.extend({}, dropdowntree.options))).appendTo(dropdowntree.wrapper);\n            }\n\n            dropdowntree.tagList = tagList;\n            dropdowntree.tagList.attr('id', kendo.guid() + \"_tagList\");\n            dropdowntree.wrapper.attr(\"aria-owns\", dropdowntree.tagList.attr('id'));\n            var viewModel = kendo.observable({\n              multipleTag: dropdowntree._multipleTags,\n              tags: dropdowntree._tags,\n              tagTemplate: dropdowntree.valueTemplate\n            });\n            kendo.bind(dropdowntree.tagList, viewModel);\n            dropdowntree.tagList.attr(\"data-stop\", true);\n          },\n          _setValue: function (value) {\n            var dropdowntree = this._dropdowntree;\n            var oldValues = dropdowntree._values;\n\n            if (value === undefined || value === null) {\n              return dropdowntree._values.slice();\n            }\n\n            dropdowntree.setValue(value);\n            dropdowntree._valueMethodCalled = true;\n\n            if (value.length) {\n              this._removeValues(oldValues, value);\n\n              dropdowntree._checkItemByValue(value);\n            } else {\n              dropdowntree._clearTextAndValue();\n            }\n\n            dropdowntree._valueMethodCalled = false;\n\n            dropdowntree._toggleCloseVisibility();\n          },\n          _removeValues: function (oldValues, value) {\n            var dropdowntree = this._dropdowntree;\n\n            var removedValues = this._getNewValues(oldValues, value);\n\n            for (var idx = 0; idx < removedValues.length; idx++) {\n              for (var j = 0; j < dropdowntree._tags.length; j++) {\n                if (dropdowntree._valueComparer(dropdowntree._tags[j], removedValues[idx])) {\n                  dropdowntree._uncheckItemByUid(dropdowntree._tags[j].uid);\n                }\n              }\n            }\n          },\n          _getNewValues: function (oldValues, value) {\n            var removedValues = [];\n\n            for (var idx = 0; idx < oldValues.length; idx++) {\n              if (value.indexOf(oldValues[idx]) === -1) {\n                removedValues.push(oldValues[idx]);\n              }\n            }\n\n            return removedValues;\n          },\n          _clearValue: function () {\n            var dropdowntree = this._dropdowntree;\n\n            var tagsArray = dropdowntree._tags.slice();\n\n            for (var idx = 0; idx < tagsArray.length; idx++) {\n              var uid = tagsArray[idx].uid;\n              dropdowntree._preventChangeTrigger = true;\n\n              dropdowntree._uncheckItemByUid(uid);\n            }\n\n            if (tagsArray.length) {\n              dropdowntree._preventChangeTrigger = false;\n\n              if (!dropdowntree._valueMethodCalled) {\n                dropdowntree.trigger(CHANGE);\n              }\n            }\n          },\n          _checkLoadedItem: function (tempItem, value) {\n            var dropdowntree = this._dropdowntree;\n\n            if (dropdowntree._noInitialValue && tempItem.checked) {\n              dropdowntree._checkValue(tempItem);\n\n              return;\n            }\n\n            if ((value.length || this._isDataSourceSet) && (value.indexOf(dropdowntree._currentValue(tempItem)) !== -1 || value.indexOf(tempItem)) !== -1 && !this._findTag(dropdowntree._currentValue(tempItem))) {\n              if (tempItem.checked) {\n                dropdowntree._checkValue(tempItem);\n              } else {\n                dropdowntree._preventChangeTrigger = true;\n                tempItem.set(\"checked\", true);\n                dropdowntree._preventChangeTrigger = false;\n              }\n            }\n          },\n          _findTag: function (tempItemValue) {\n            var dropdowntree = this._dropdowntree;\n            return dropdowntree._tags.find(function (item) {\n              return dropdowntree._valueComparer(item, tempItemValue);\n            });\n          }\n        });\n        kendo.ui.DropDownTree.SingleSelection = SingleSelection;\n        kendo.ui.DropDownTree.MultipleSelection = MultipleSelection;\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1212:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./dropdowntree/treeview\");\n    /***/\n  },\n\n  /***/\n  1213:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.html.chip\");\n    /***/\n  },\n\n  /***/\n  1214:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.html.chiplist\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}