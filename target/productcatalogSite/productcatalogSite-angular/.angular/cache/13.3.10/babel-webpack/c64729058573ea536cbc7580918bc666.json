{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1278);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1278:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1279)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"form\",\n        name: \"Form\",\n        category: \"web\",\n        description: \"The Form widget.\",\n        depends: [\"editable\"],\n        features: [{\n          id: \"form-dropdowns\",\n          name: \"DropDowns\",\n          description: \"Support for DropDown editors\",\n          depends: [\"autocomplete\", \"combobox\", \"multiselect\", \"dropdowntree\", \"multicolumncombobox\"]\n        }, {\n          id: \"form-datepickers\",\n          name: \"DatePickers\",\n          description: \"Support for DatePicker editors\",\n          depends: [\"dateinput\", \"datepicker\", \"datetimepicker\", \"timepicker\"]\n        }, {\n          id: \"form-inputs\",\n          name: \"Inputs\",\n          description: \"Support for Input editors\",\n          depends: [\"numerictextbox\", \"maskedtextbox\", \"switch\", \"rating\", \"slider\", \"colorpicker\", \"radiogroup\", \"checkboxgroup\", \"textbox\", \"textarea\", \"checkbox\"]\n        }, {\n          id: \"form-editor\",\n          name: \"Editor\",\n          description: \"Support for Editor editor\",\n          depends: [\"editor\"]\n        }]\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            NS = \".kendoForm\",\n            Widget = ui.Widget,\n            extend = $.extend,\n            VALIDATE = \"validate\",\n            VALIDATEFIELD = \"validateField\",\n            VALIDATEINPUT = \"validateInput\",\n            CHANGE = \"change\",\n            CLICK = \"click\" + NS,\n            SUBMIT = \"submit\",\n            CLEAR = \"clear\",\n            MAX_WIDTH = \"max-width\",\n            SET = \"set\",\n            EQUAL_SET = \"equalSet\",\n            GROUP = \"group\",\n            ARIA_DESCRIBEDBY = \"aria-describedby\",\n            DATA_STOP = \"data-stop\",\n            DATA_ROLE = \"data-role\",\n            EDITABLE = \"editable\",\n            FORM = \"form\",\n            DOT = \".\",\n            DATA_ROLE_RADIO_GROUP = \"[data-role='radiogroup']\",\n            DATA_ROLE_CHECKBOX_GROUP = \"[data-role='checkboxgroup']\";\n        var formStyles = {\n          form: \"k-widget k-form\",\n          horizontal: \"k-form-horizontal\",\n          vertical: \"\",\n          field: \"k-form-field\",\n          fieldsContainer: \"k-form-fields-container\",\n          fieldWrap: \"k-form-field-wrap\",\n          fieldError: \"k-form-field-error\",\n          fieldHint: \"k-form-hint\",\n          fieldset: \"k-form-fieldset\",\n          layout: \"k-form-layout\",\n          legend: \"k-form-legend\",\n          label: \"k-label k-form-label\",\n          optional: \"k-label-optional\",\n          buttonsContainer: \"k-form-buttons\",\n          buttonsEnd: \"k-buttons-end\",\n          submit: \"k-form-submit\",\n          clear: \"k-form-clear\",\n          invalid: \"k-invalid\",\n          hidden: \"k-hidden\"\n        };\n        var formOrientation = {\n          horizontal: \"horizontal\",\n          vertical: \"vertical\"\n        };\n        var Form = Widget.extend({\n          init: function (element, options) {\n            var that = this;\n            Widget.fn.init.call(that, element, options);\n            that.options = kendo.deepExtend({}, that.options, options);\n\n            if (options && options.formData) {\n              that.options.formData = options.formData;\n            }\n\n            that._wrapper();\n\n            that._setFields();\n\n            that._setModel();\n\n            that._renderContainers();\n\n            that._renderButtons();\n\n            that._editable();\n\n            that._renderFieldsHints();\n\n            that._setEvents();\n          },\n          events: [VALIDATEFIELD, VALIDATE, CHANGE, SUBMIT, CLEAR],\n          options: {\n            name: \"Form\",\n            orientation: formOrientation.vertical,\n            validatable: {\n              validateOnBlur: true,\n              validationSummary: false,\n              errorTemplate: null\n            },\n            buttonsTemplate: null,\n            messages: {\n              submit: \"Submit\",\n              clear: \"Clear\",\n              optional: \"(Optional)\"\n            },\n            layout: \"\",\n            grid: {},\n            formData: {},\n            items: [],\n            formatLabel: null,\n            focusFirst: false\n          },\n          _fieldTemplate: \"<div class='#:styles.field# #if (colSpan) { # k-colspan-#:colSpan# # } # #if (hidden) { ##:styles.hidden## } #'>\" + \"# if (label && !hidden) { # \" + \"<label class='#:styles.label#' for='#:id#' id='#:id#-form-label'>\" + \"# if (typeof label.encoded != 'undefined' && label.encoded === false) {#\" + \"#= label.text || label #\" + \"# } else { #\" + \"#: label.text || label #\" + \"# } #\" + \"# if (label.optional) { # <span class='#:styles.optional#'>#:optional#</span>  #}#\" + \"</label>\" + \"# } #\" + \"<div class='k-form-field-wrap' data-container-for='#:field#'></div>\" + \"</div>\",\n          _groupTemplate: \"<fieldset class='#:styles.fieldset# #if (colSpan) { #  k-colspan-#:colSpan# # }#'>\" + \"<legend class='#:styles.legend#'>#:label.text || label #</legend>\" + \"</fieldset>\",\n          _buttonsTemplate: \"<button class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary #:styles.submit#' type='submit'><span class='k-button-text'>#:messages.submit#</span></button>\" + \"<button class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-base #:styles.clear#'><span class='k-button-text'>#:messages.clear#</span></button>\",\n          _errorTemplate: \"<span class='k-form-error' id='#=field#-form-error'><div>#=message#</div></span>\",\n          _hintTemplate: \"<div class='k-form-hint' id='#=id#-form-hint'><span>#=message#</span></div>\",\n          _wrapper: function () {\n            var that = this,\n                options = that.options,\n                formStyles = Form.styles,\n                width = options.width,\n                height = options.height;\n            that.wrapper = that.element.addClass(formStyles.form).addClass(formStyles[options.orientation]);\n\n            if (height) {\n              that.wrapper.height(height);\n            }\n\n            if (width) {\n              that.wrapper.css(MAX_WIDTH, width);\n            }\n\n            that.layoutWrapper = that._setupLayoutContainer(that.wrapper, {\n              grid: options.grid,\n              layout: options.layout\n            });\n          },\n          _flattenFields: function (fields) {\n            var items = [].concat(fields),\n                item = items.shift(),\n                result = [],\n                push = [].push;\n\n            while (item) {\n              if (item.items) {\n                push.apply(items, item.items);\n              } else {\n                push.call(result, item);\n              }\n\n              item = items.shift();\n            }\n\n            return result;\n          },\n          _defaultLabel: function (fieldName) {\n            var that = this,\n                customFormat = that.options.formatLabel;\n\n            if (!fieldName.length) {\n              return;\n            }\n\n            if (kendo.isFunction(customFormat)) {\n              return customFormat(fieldName);\n            }\n\n            return fieldName.split(/(.*[a-z])(?=[A-Z])/).join(\" \").trim() + \":\";\n          },\n          _formatLabel: function (field, label) {\n            var that = this,\n                text = $.isPlainObject(label) ? label.text : label;\n\n            if (text !== undefined) {\n              return label;\n            }\n\n            return that._defaultLabel(field);\n          },\n          _defaultFields: function () {\n            var that = this,\n                options = that.options,\n                formDataFields = Object.keys(options.formData || {}),\n                itemFields = options.items || {},\n                defaultFormDataFields = [],\n                field;\n\n            if (itemFields.length) {\n              return itemFields;\n            }\n\n            for (var i = 0; i < formDataFields.length; i += 1) {\n              field = formDataFields[i];\n              defaultFormDataFields.push({\n                field: field,\n                id: field\n              });\n            }\n\n            return defaultFormDataFields;\n          },\n          _setFields: function () {\n            var that = this,\n                defaultFields = that._flattenFields(that._defaultFields()),\n                formData = that.options.formData || {},\n                fieldInfo,\n                fieldValue,\n                type,\n                editor,\n                attributes;\n\n            that._fields = [];\n\n            for (var field in defaultFields) {\n              fieldInfo = defaultFields[field];\n              fieldValue = formData[fieldInfo.field];\n              type = typeof fieldInfo.editor === \"string\" ? fieldInfo.editor : kendo.type(fieldValue ? kendo.parseDate(fieldValue.toString()) || fieldValue : fieldValue);\n              editor = kendo.isFunction(fieldInfo.editor) ? fieldInfo.editor : ui.Editable.fn.options.editors[type] ? \"\" : fieldInfo.editor;\n\n              if (!that._isHidden(fieldInfo.editor)) {\n                if (fieldInfo.label) {\n                  attributes = {\n                    \"aria-labelledby\": fieldInfo.id || fieldInfo.field + \"-form-label\"\n                  };\n                } else if (!fieldInfo.attributes || !fieldInfo.attributes[\"aria-label\"]) {\n                  attributes = {\n                    \"aria-label\": fieldInfo.name || fieldInfo.field\n                  };\n                }\n              }\n\n              fieldInfo = extend(true, {}, fieldInfo, {\n                id: fieldInfo.id || fieldInfo.field,\n                name: fieldInfo.name || fieldInfo.field,\n                type: type,\n                editor: editor,\n                attributes: attributes,\n                isHidden: that._isHidden(fieldInfo.editor) || that._isAntiForgeryToken(fieldInfo.name || fieldInfo.field)\n              });\n              that._fields[field] = fieldInfo;\n            }\n          },\n          _setModel: function () {\n            var that = this,\n                options = that.options,\n                formData = options.formData || {};\n\n            if (options.formData instanceof kendo.data.ObservableObject) {\n              that._model = formData;\n              return;\n            }\n\n            var MyModel = kendo.data.Model.define({\n              fields: that._fields\n            });\n            that._model = new MyModel(formData);\n          },\n          _editable: function () {\n            var that = this,\n                options = that.options,\n                validatorOptions = that.options.validatable;\n\n            that._addEditableMvvmAttributes();\n\n            that.editable = that.wrapper.kendoEditable({\n              model: that._model,\n              fields: that._fields || [],\n              validateOnBlur: validatorOptions.validateOnBlur,\n              validationSummary: validatorOptions.validationSummary,\n              errorTemplate: validatorOptions.errorTemplate || that._errorTemplate,\n              clearContainer: false,\n              skipFocus: !options.focusFirst,\n              target: that\n            }).getKendoEditable();\n            that.validator = that.editable.validatable;\n\n            that._removeEditableMvvmAttributes();\n          },\n          _addEditableMvvmAttributes: function () {\n            // required for two mvvm bindable widgets on one element\n            this.wrapper.attr(DATA_ROLE, EDITABLE);\n          },\n          _removeEditableMvvmAttributes: function () {\n            // required for two mvvm bindable widgets on one element\n            this.wrapper.attr(DATA_STOP, true).attr(DATA_ROLE, FORM);\n          },\n          _getItemTemplate: function (type) {\n            var that = this,\n                template;\n\n            if (type === GROUP) {\n              template = that._groupTemplate;\n            } else {\n              template = that._fieldTemplate;\n            }\n\n            return template;\n          },\n          _isHidden: function (editor) {\n            return typeof editor === \"string\" && editor === \"hidden\";\n          },\n          _isAntiForgeryToken: function (field) {\n            return field === ui.Editable.antiForgeryTokenName;\n          },\n          _renderField: function (item) {\n            var that = this,\n                formStyles = Form.styles,\n                renderedField;\n            renderedField = kendo.template(that._fieldTemplate)({\n              styles: formStyles,\n              id: item.id || item.field || \"\",\n              field: item.field || \"\",\n              label: that._formatLabel(item.field, item.label),\n              colSpan: item.colSpan || \"\",\n              optional: that.options.messages.optional,\n              hidden: that._isHidden(item.editor) || that._isAntiForgeryToken(item.field)\n            });\n            return renderedField;\n          },\n          _toggleFieldErrorState: function (element, state) {\n            var field = element.closest(DOT + formStyles.field);\n\n            if (field.length) {\n              field.toggleClass(formStyles.fieldError, state);\n            }\n          },\n          _renderFieldsHints: function () {\n            var that = this,\n                fields = that._fields,\n                field,\n                fieldWidgetInstance,\n                fieldElement,\n                hint;\n\n            for (var i = 0; i < fields.length; i += 1) {\n              field = fields[i];\n              fieldElement = that.wrapper.find(\"[name='\" + field.name + \"']\");\n\n              if (!fieldElement || !field.hint || field.isHidden) {\n                continue;\n              }\n\n              hint = $(kendo.template(that._hintTemplate)({\n                message: field.hint || \"\",\n                id: field.id\n              }));\n\n              that._associateHintContainer(fieldElement, hint.attr(\"id\"));\n\n              fieldWidgetInstance = kendo.widgetInstance(fieldElement);\n\n              if (fieldWidgetInstance) {\n                fieldElement = fieldWidgetInstance.wrapper;\n              }\n\n              if (that.validator._errorsByName(field.name).length) {\n                hint.toggleClass(formStyles.hidden);\n                kendo.removeAttribute(fieldElement, ARIA_DESCRIBEDBY, hint.attr(\"id\"));\n              }\n\n              hint.insertAfter(fieldElement);\n            }\n          },\n          _associateHintContainer: function (input, hintId) {\n            var nextFocusable = kendo.getWidgetFocusableElement(input);\n\n            if (!nextFocusable || !hintId) {\n              return;\n            }\n\n            kendo.toggleAttribute(nextFocusable, ARIA_DESCRIBEDBY, hintId);\n          },\n          _toggleHint: function (element, state) {\n            var that = this,\n                field = element.closest(DOT + formStyles.field),\n                hint;\n\n            if (field.length) {\n              hint = field.find(DOT + formStyles.fieldHint);\n\n              if (hint.length) {\n                hint.toggleClass(formStyles.hidden, state);\n\n                that._associateHintContainer(element, hint.attr(\"id\"));\n              }\n            }\n          },\n          _renderGroup: function (item) {\n            var that = this,\n                type = item.type,\n                child,\n                renderedGroup,\n                fieldsContainer;\n            fieldsContainer = renderedGroup = $(kendo.template(that._getItemTemplate(type))({\n              styles: formStyles,\n              label: item.label || \"\",\n              colSpan: item.colSpan\n            }));\n            fieldsContainer = that._setupLayoutContainer(renderedGroup, {\n              grid: item.grid,\n              layout: item.layout\n            }) || renderedGroup;\n\n            for (var i = 0; i < item.items.length; i += 1) {\n              child = item.items[i];\n              fieldsContainer.append(that._renderField(child));\n            }\n\n            return renderedGroup;\n          },\n          _renderContainers: function () {\n            var that = this,\n                defaultFields = that._defaultFields(),\n                columnsLayout = that.options.layout === \"grid\",\n                targetContainer = columnsLayout ? that.layoutWrapper : that.wrapper,\n                item,\n                type,\n                container;\n\n            for (var i = 0; i < defaultFields.length; i += 1) {\n              item = defaultFields[i];\n              type = item.type;\n\n              if (type === GROUP) {\n                container = that._renderGroup(item);\n              } else {\n                container = that._renderField(item);\n              }\n\n              targetContainer.append(container);\n            }\n          },\n          _renderButtons: function () {\n            var that = this,\n                wrapper = that.wrapper,\n                options = that.options,\n                messages = options.messages,\n                formStyles = Form.styles,\n                isHorizontal = options.orientation === formOrientation.horizontal,\n                buttonsContainer = wrapper.find(DOT + formStyles.buttonsContainer),\n                buttonsTemplate;\n\n            if (!buttonsContainer.length) {\n              buttonsContainer = $(\"<div />\").addClass(formStyles.buttonsContainer).addClass(isHorizontal ? formStyles.buttonsEnd : \"\");\n            }\n\n            buttonsTemplate = options.buttonsTemplate !== null ? options.buttonsTemplate : that._buttonsTemplate;\n            buttonsContainer.append(kendo.template(buttonsTemplate)({\n              styles: formStyles,\n              messages: messages\n            }));\n            that.element.append(buttonsContainer);\n          },\n          _setupLayoutContainer: function (appendTarget, options) {\n            var layout = options.layout,\n                grid = options.grid,\n                layoutClassNames = [],\n                layoutContainer;\n\n            if (typeof layout === \"string\" && layout !== \"\") {\n              layoutContainer = $(\"<div></div>\").appendTo(appendTarget).addClass(formStyles.layout);\n              layoutClassNames.push(\"k-d-\" + layout);\n            }\n\n            if (layout === \"grid\" && typeof grid === \"object\") {\n              if (typeof grid.cols === \"number\") {\n                layoutClassNames.push(\"k-grid-cols-\" + grid.cols);\n              } else if (typeof grid.cols === \"string\") {\n                layoutContainer.css(\"grid-template-columns\", grid.cols);\n              }\n\n              if (typeof grid.gutter === \"number\" || typeof grid.gutter === \"string\") {\n                layoutContainer.css(\"grid-gap\", grid.gutter);\n              }\n            }\n\n            if (layoutContainer) {\n              layoutContainer.addClass(layoutClassNames.join(\" \"));\n            }\n\n            return layoutContainer;\n          },\n          _setEvents: function () {\n            var that = this,\n                validator = that.validator;\n            validator.bind(VALIDATEINPUT, that._validateField.bind(that)).bind(VALIDATE, that._validate.bind(that));\n            that.wrapper.on(SUBMIT + NS, that._submit.bind(that)).on(CLEAR + NS, that._clear.bind(that)).on(CLICK + NS, DOT + formStyles.clear, that._clear.bind(that));\n\n            that._model.bind(CHANGE, that._change.bind(that));\n          },\n          _validateField: function (ev) {\n            var that = this,\n                data = {\n              model: that._model.toJSON(),\n              valid: ev.valid,\n              field: ev.field,\n              error: ev.error,\n              input: ev.input\n            };\n\n            that._toggleFieldErrorState(data.input, !data.valid);\n\n            that._toggleHint(data.input, !data.valid);\n\n            if (that.trigger(VALIDATEFIELD, data)) {\n              ev.preventDefault();\n            }\n          },\n          _validate: function (ev) {\n            var that = this,\n                data = {\n              model: that._model.toJSON(),\n              valid: ev.valid,\n              errors: ev.errors\n            };\n            that.trigger(VALIDATE, data);\n          },\n          _change: function (ev) {\n            var that = this,\n                field = ev.field,\n                data = {\n              field: field,\n              value: that._model[field]\n            };\n            that.trigger(CHANGE, data);\n          },\n          _submit: function (ev) {\n            var that = this,\n                jsonModel = that._model.toJSON();\n\n            if (that.trigger(SUBMIT, {\n              model: jsonModel\n            })) {\n              ev.preventDefault();\n            }\n          },\n          _clear: function (ev) {\n            var that = this;\n            ev.preventDefault();\n            that.clear();\n            that.trigger(CLEAR);\n          },\n          validate: function () {\n            var that = this,\n                validator = that.validator;\n\n            if (!validator) {\n              return;\n            }\n\n            return validator.validate();\n          },\n          clear: function () {\n            var that = this,\n                fields = that._fields,\n                model = that._model,\n                editable = that.editable,\n                validateOnBlur = that.validator.options.validateOnBlur;\n            that.validator.reset();\n\n            if (validateOnBlur) {\n              model.unbind(SET).unbind(EQUAL_SET);\n            }\n\n            for (var i = 0; i < fields.length; i += 1) {\n              var field = fields[i].field;\n              var element = that.wrapper.find(\"[name='\" + field + \"']\");\n              var widgetInstance = kendo.widgetInstance(element);\n              var isHiddenInput = element.is(\"input[type=hidden]\");\n\n              if (!element.is(DATA_ROLE_CHECKBOX_GROUP) && !element.is(DATA_ROLE_RADIO_GROUP) && !isHiddenInput) {\n                element.val(\"\");\n              }\n\n              if (widgetInstance) {\n                if (widgetInstance instanceof kendo.ui.Upload) {\n                  widgetInstance.clearAllFiles();\n                } else {\n                  widgetInstance.value(null);\n                }\n              }\n\n              that._toggleHint(element, false);\n\n              if (typeof model[field] === \"boolean\") {\n                element.val(\"false\");\n                model.set(field, false);\n              } else if (!isHiddenInput) {\n                model.set(field, null);\n              }\n            }\n\n            that.wrapper.find(DOT + formStyles.fieldError).removeClass(formStyles.fieldError);\n\n            if (validateOnBlur) {\n              model.bind(SET, editable._validateProxy).bind(EQUAL_SET, editable._validateProxy);\n            }\n          },\n          setOptions: function (newOptions) {\n            var that = this;\n            that.destroy();\n            that.wrapper.removeClass(formStyles.horizontal).removeAttr(DATA_STOP).empty();\n            that.init(that.element, newOptions);\n          },\n          destroy: function () {\n            var that = this;\n            that.wrapper.off(NS);\n            Widget.fn.destroy.call(that.editable);\n            Widget.fn.destroy.call(that);\n\n            if (that.editable) {\n              that.editable.destroy();\n              that.editable = null;\n            }\n          }\n        });\n        ui.plugin(Form);\n        extend(true, Form, {\n          styles: formStyles\n        });\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1279:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.editable\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}