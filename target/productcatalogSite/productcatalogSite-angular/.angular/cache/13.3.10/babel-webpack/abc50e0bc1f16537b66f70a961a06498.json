{"ast":null,"code":"import PolarPlotAreaBase from './polar-plotarea-base';\nimport PlotAreaBase from './plotarea-base';\nimport PolarLineChart from '../polar-line-chart/polar-line-chart';\nimport PolarScatterChart from '../polar-scatter-chart/polar-scatter-chart';\nimport PolarAreaChart from '../polar-area-chart/polar-area-chart';\nimport PlotAreaEventsMixin from '../mixins/plotarea-events-mixin';\nimport { PolarAxis, Point } from '../../core';\nimport { POLAR_AREA, POLAR_LINE, POLAR_SCATTER } from '../constants';\nimport filterSeriesByType from '../utils/filter-series-by-type';\nimport { ARC } from '../../common/constants';\nimport { deepExtend, eventElement, setDefaultOptions } from '../../common';\n\nclass PolarPlotArea extends PolarPlotAreaBase {\n  createPolarAxis() {\n    const polarAxis = new PolarAxis(this.options.xAxis, this.chartService);\n    this.polarAxis = polarAxis;\n    this.axisX = polarAxis;\n    this.appendAxis(polarAxis);\n  }\n\n  valueAxisOptions(defaults) {\n    return deepExtend(defaults, {\n      majorGridLines: {\n        type: ARC\n      },\n      minorGridLines: {\n        type: ARC\n      }\n    }, this.options.yAxis);\n  }\n\n  createValueAxis() {\n    super.createValueAxis();\n    this.axisY = this.valueAxis;\n  }\n\n  appendChart(chart, pane) {\n    this.valueAxisRangeTracker.update(chart.yAxisRanges);\n    PlotAreaBase.prototype.appendChart.call(this, chart, pane);\n  }\n\n  createCharts() {\n    const series = this.filterVisibleSeries(this.series);\n    const pane = this.panes[0];\n    this.createLineChart(filterSeriesByType(series, [POLAR_LINE]), pane);\n    this.createScatterChart(filterSeriesByType(series, [POLAR_SCATTER]), pane);\n    this.createAreaChart(filterSeriesByType(series, [POLAR_AREA]), pane);\n  }\n\n  createLineChart(series, pane) {\n    if (series.length === 0) {\n      return;\n    }\n\n    const lineChart = new PolarLineChart(this, {\n      series: series\n    });\n    this.appendChart(lineChart, pane);\n  }\n\n  createScatterChart(series, pane) {\n    if (series.length === 0) {\n      return;\n    }\n\n    const scatterChart = new PolarScatterChart(this, {\n      series: series\n    });\n    this.appendChart(scatterChart, pane);\n  }\n\n  createAreaChart(series, pane) {\n    if (series.length === 0) {\n      return;\n    }\n\n    const areaChart = new PolarAreaChart(this, {\n      series: series\n    });\n    this.appendChart(areaChart, pane);\n  }\n\n  _dispatchEvent(chart, e, eventType) {\n    const coords = chart._eventCoordinates(e);\n\n    const point = new Point(coords.x, coords.y);\n    const xValue = this.axisX.getValue(point);\n    const yValue = this.axisY.getValue(point);\n\n    if (xValue !== null && yValue !== null) {\n      chart.trigger(eventType, {\n        element: eventElement(e),\n        x: xValue,\n        y: yValue\n      });\n    }\n  }\n\n  createCrosshairs() {}\n\n}\n\nsetDefaultOptions(PolarPlotArea, {\n  xAxis: {},\n  yAxis: {}\n});\ndeepExtend(PolarPlotArea.prototype, PlotAreaEventsMixin);\nexport default PolarPlotArea;","map":null,"metadata":{},"sourceType":"module"}