{"ast":null,"code":"import { drawing as draw } from '@progress/kendo-drawing';\nimport { ChartElement } from '../../core';\nimport { FADEIN, INITIAL_ANIMATION_DURATION } from '../constants';\nimport { alignPathToPixel, setDefaultOptions } from '../../common';\n\nclass WaterfallSegment extends ChartElement {\n  constructor(from, to, series) {\n    super();\n    this.from = from;\n    this.to = to;\n    this.series = series;\n  }\n\n  linePoints() {\n    const from = this.from;\n    const {\n      from: {\n        box: fromBox\n      },\n      to: {\n        box: toBox\n      }\n    } = this;\n    const points = [];\n\n    if (from.isVertical) {\n      const y = from.aboveAxis ? fromBox.y1 : fromBox.y2;\n      points.push([fromBox.x1, y], [toBox.x2, y]);\n    } else {\n      const x = from.aboveAxis ? fromBox.x2 : fromBox.x1;\n      points.push([x, fromBox.y1], [x, toBox.y2]);\n    }\n\n    return points;\n  }\n\n  createVisual() {\n    super.createVisual();\n    const line = this.series.line || {};\n    const path = draw.Path.fromPoints(this.linePoints(), {\n      stroke: {\n        color: line.color,\n        width: line.width,\n        opacity: line.opacity,\n        dashType: line.dashType\n      }\n    });\n    alignPathToPixel(path);\n    this.visual.append(path);\n  }\n\n}\n\nsetDefaultOptions(WaterfallSegment, {\n  animation: {\n    type: FADEIN,\n    delay: INITIAL_ANIMATION_DURATION\n  }\n});\nexport default WaterfallSegment;","map":null,"metadata":{},"sourceType":"module"}