{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(921);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  893:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../../kendo.drawing\");\n    /***/\n  },\n\n  /***/\n  921:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(922), __webpack_require__(893)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function ($, undefined) {\n        // Imports ================================================================\n        var math = Math,\n            atan = math.atan,\n            exp = math.exp,\n            pow = math.pow,\n            sin = math.sin,\n            log = math.log,\n            tan = math.tan,\n            kendo = window.kendo,\n            Class = kendo.Class,\n            dataviz = kendo.dataviz,\n            deepExtend = kendo.deepExtend,\n            g = kendo.geometry,\n            Point = g.Point,\n            map = dataviz.map,\n            Location = map.Location,\n            util = kendo.drawing.util,\n            rad = util.rad,\n            deg = util.deg,\n            limit = util.limitValue; // Constants ==============================================================\n\n        var PI = math.PI,\n            PI_DIV_2 = PI / 2,\n            PI_DIV_4 = PI / 4,\n            DEG_TO_RAD = PI / 180; // Coordinate reference systems ===========================================\n\n        var WGS84 = {\n          a: 6378137,\n          // Semi-major radius\n          b: 6356752.314245179,\n          // Semi-minor radius\n          f: 0.0033528106647474805,\n          // Flattening\n          e: 0.08181919084262149 // Eccentricity\n\n        }; // WGS 84 / World Mercator\n\n        var Mercator = Class.extend({\n          init: function (options) {\n            this._initOptions(options);\n          },\n          MAX_LNG: 180,\n          MAX_LAT: 85.0840590501,\n          INVERSE_ITERATIONS: 15,\n          INVERSE_CONVERGENCE: 1e-12,\n          options: {\n            centralMeridian: 0,\n            datum: WGS84\n          },\n          forward: function (loc, clamp) {\n            var proj = this,\n                options = proj.options,\n                datum = options.datum,\n                r = datum.a,\n                lng0 = options.centralMeridian,\n                lat = limit(loc.lat, -proj.MAX_LAT, proj.MAX_LAT),\n                lng = clamp ? limit(loc.lng, -proj.MAX_LNG, proj.MAX_LNG) : loc.lng,\n                x = rad(lng - lng0) * r,\n                y = proj._projectLat(lat);\n\n            return new Point(x, y);\n          },\n          _projectLat: function (lat) {\n            var datum = this.options.datum,\n                ecc = datum.e,\n                r = datum.a,\n                y = rad(lat),\n                ts = tan(PI_DIV_4 + y / 2),\n                con = ecc * sin(y),\n                p = pow((1 - con) / (1 + con), ecc / 2); // See:\n            // http://en.wikipedia.org/wiki/Mercator_projection#Generalization_to_the_ellipsoid\n\n            return r * log(ts * p);\n          },\n          inverse: function (point, clamp) {\n            var proj = this,\n                options = proj.options,\n                datum = options.datum,\n                r = datum.a,\n                lng0 = options.centralMeridian,\n                lng = point.x / (DEG_TO_RAD * r) + lng0,\n                lat = limit(proj._inverseY(point.y), -proj.MAX_LAT, proj.MAX_LAT);\n\n            if (clamp) {\n              lng = limit(lng, -proj.MAX_LNG, proj.MAX_LNG);\n            }\n\n            return new Location(lat, lng);\n          },\n          _inverseY: function (y) {\n            var proj = this,\n                datum = proj.options.datum,\n                r = datum.a,\n                ecc = datum.e,\n                ecch = ecc / 2,\n                ts = exp(-y / r),\n                phi = PI_DIV_2 - 2 * atan(ts),\n                i;\n\n            for (i = 0; i <= proj.INVERSE_ITERATIONS; i++) {\n              var con = ecc * sin(phi),\n                  p = pow((1 - con) / (1 + con), ecch),\n                  dphi = PI_DIV_2 - 2 * atan(ts * p) - phi;\n              phi += dphi;\n\n              if (math.abs(dphi) <= proj.INVERSE_CONVERGENCE) {\n                break;\n              }\n            }\n\n            return deg(phi);\n          }\n        }); // WGS 84 / Pseudo-Mercator\n        // Used by Google Maps, Bing, OSM, etc.\n        // Spherical projection of ellipsoidal coordinates.\n\n        var SphericalMercator = Mercator.extend({\n          MAX_LAT: 85.0511287798,\n          _projectLat: function (lat) {\n            var r = this.options.datum.a,\n                y = rad(lat),\n                ts = tan(PI_DIV_4 + y / 2);\n            return r * log(ts);\n          },\n          _inverseY: function (y) {\n            var r = this.options.datum.a,\n                ts = exp(-y / r);\n            return deg(PI_DIV_2 - 2 * atan(ts));\n          }\n        });\n        var Equirectangular = Class.extend({\n          forward: function (loc) {\n            return new Point(loc.lng, loc.lat);\n          },\n          inverse: function (point) {\n            return new Location(point.y, point.x);\n          }\n        }); // TODO: Better (less cryptic name) for this class(es)\n\n        var EPSG3857 = Class.extend({\n          init: function () {\n            var crs = this,\n                proj = crs._proj = new SphericalMercator();\n            var c = this.c = 2 * PI * proj.options.datum.a; // Scale circumference to 1, mirror Y and shift origin to top left\n\n            this._tm = g.transform().translate(0.5, 0.5).scale(1 / c, -1 / c); // Inverse transform matrix\n\n            this._itm = g.transform().scale(c, -c).translate(-0.5, -0.5);\n          },\n          // Location <-> Point (screen coordinates for a given scale)\n          toPoint: function (loc, scale, clamp) {\n            var point = this._proj.forward(loc, clamp);\n\n            return point.transform(this._tm).scale(scale || 1);\n          },\n          toLocation: function (point, scale, clamp) {\n            point = point.clone().scale(1 / (scale || 1)).transform(this._itm);\n            return this._proj.inverse(point, clamp);\n          }\n        });\n        var EPSG3395 = Class.extend({\n          init: function () {\n            this._proj = new Mercator();\n          },\n          toPoint: function (loc) {\n            return this._proj.forward(loc);\n          },\n          toLocation: function (point) {\n            return this._proj.inverse(point);\n          }\n        }); // WGS 84\n\n        var EPSG4326 = Class.extend({\n          init: function () {\n            this._proj = new Equirectangular();\n          },\n          toPoint: function (loc) {\n            return this._proj.forward(loc);\n          },\n          toLocation: function (point) {\n            return this._proj.inverse(point);\n          }\n        }); // Exports ================================================================\n\n        deepExtend(dataviz, {\n          map: {\n            crs: {\n              EPSG3395: EPSG3395,\n              EPSG3857: EPSG3857,\n              EPSG4326: EPSG4326\n            },\n            datums: {\n              WGS84: WGS84\n            },\n            projections: {\n              Equirectangular: Equirectangular,\n              Mercator: Mercator,\n              SphericalMercator: SphericalMercator\n            }\n          }\n        });\n      })(window.kendo.jQuery);\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  922:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./location\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}