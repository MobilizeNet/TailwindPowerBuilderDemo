{"ast":null,"code":"import { Chart } from '../chart';\nimport Navigator from './navigator';\nimport { DEFAULT_WIDTH } from '../common/constants';\nimport { addClass, deepExtend, elementSize, grep, setDefaultOptions } from '../common';\nimport { NAVIGATOR_AXIS, NAVIGATOR_PANE } from './constants';\nconst AUTO_CATEGORY_WIDTH = 28;\n\nclass StockChart extends Chart {\n  applyDefaults(options, themeOptions) {\n    const width = elementSize(this.element).width || DEFAULT_WIDTH;\n    let theme = themeOptions;\n    const stockDefaults = {\n      seriesDefaults: {\n        categoryField: options.dateField\n      },\n      axisDefaults: {\n        categoryAxis: {\n          name: \"default\",\n          majorGridLines: {\n            visible: false\n          },\n          labels: {\n            step: 2\n          },\n          majorTicks: {\n            visible: false\n          },\n          maxDateGroups: Math.floor(width / AUTO_CATEGORY_WIDTH)\n        }\n      }\n    };\n\n    if (theme) {\n      theme = deepExtend({}, theme, stockDefaults);\n    }\n\n    Navigator.setup(options, theme);\n    super.applyDefaults(options, theme);\n  }\n\n  _setElementClass(element) {\n    addClass(element, 'k-chart k-stockchart');\n  }\n\n  setOptions(options) {\n    this.destroyNavigator();\n    super.setOptions(options);\n  }\n\n  noTransitionsRedraw() {\n    const transitions = this.options.transitions;\n    this.options.transitions = false;\n\n    this._fullRedraw();\n\n    this.options.transitions = transitions;\n  }\n\n  _resize() {\n    this.noTransitionsRedraw();\n  }\n\n  _redraw() {\n    const navigator = this.navigator;\n\n    if (!this._dirty() && navigator && navigator.options.partialRedraw) {\n      navigator.redrawSlaves();\n    } else {\n      this._fullRedraw();\n    }\n  }\n\n  _dirty() {\n    const options = this.options;\n    const series = [].concat(options.series, options.navigator.series);\n    const seriesCount = grep(series, function (s) {\n      return s && s.visible;\n    }).length;\n    const dirty = this._seriesCount !== seriesCount;\n    this._seriesCount = seriesCount;\n    return dirty;\n  }\n\n  _fullRedraw() {\n    let navigator = this.navigator;\n\n    if (!navigator) {\n      navigator = this.navigator = new Navigator(this);\n      this.trigger(\"navigatorCreated\", {\n        navigator: navigator\n      });\n    }\n\n    navigator.clean();\n    navigator.setRange();\n\n    super._redraw();\n\n    navigator.initSelection();\n  }\n\n  _trackSharedTooltip(coords) {\n    const plotArea = this._plotArea;\n    const pane = plotArea.paneByPoint(coords);\n\n    if (pane && pane.options.name === NAVIGATOR_PANE) {\n      this._unsetActivePoint();\n    } else {\n      super._trackSharedTooltip(coords);\n    }\n  }\n\n  bindCategories() {\n    super.bindCategories();\n    this.copyNavigatorCategories();\n  }\n\n  copyNavigatorCategories() {\n    const definitions = [].concat(this.options.categoryAxis);\n    let categories;\n\n    for (let axisIx = 0; axisIx < definitions.length; axisIx++) {\n      const axis = definitions[axisIx];\n\n      if (axis.name === NAVIGATOR_AXIS) {\n        categories = axis.categories;\n      } else if (categories && axis.pane === NAVIGATOR_PANE) {\n        axis.categories = categories;\n      }\n    }\n  }\n\n  destroyNavigator() {\n    if (this.navigator) {\n      this.navigator.destroy();\n      this.navigator = null;\n    }\n  }\n\n  destroy() {\n    this.destroyNavigator();\n    super.destroy();\n  }\n\n  _stopChartHandlers(e) {\n    const coords = this._eventCoordinates(e);\n\n    const pane = this._plotArea.paneByPoint(coords);\n\n    return super._stopChartHandlers(e) || pane && pane.options.name === NAVIGATOR_PANE;\n  }\n\n  _toggleDragZoomEvents() {\n    if (!this._dragZoomEnabled) {\n      this.element.style.touchAction = \"none\";\n      this._dragZoomEnabled = true;\n    }\n  }\n\n}\n\nsetDefaultOptions(StockChart, {\n  dateField: \"date\",\n  axisDefaults: {\n    categoryAxis: {\n      type: \"date\",\n      baseUnit: \"fit\",\n      justified: true\n    },\n    valueAxis: {\n      narrowRange: true,\n      labels: {\n        format: \"C\"\n      }\n    }\n  },\n  navigator: {\n    select: {},\n    seriesDefaults: {\n      markers: {\n        visible: false\n      },\n      tooltip: {\n        visible: false\n      },\n      highlight: {\n        visible: false\n      },\n      line: {\n        width: 2\n      }\n    },\n    hint: {},\n    visible: true\n  },\n  tooltip: {\n    visible: true\n  },\n  legend: {\n    visible: false\n  }\n});\nexport default StockChart;","map":null,"metadata":{},"sourceType":"module"}