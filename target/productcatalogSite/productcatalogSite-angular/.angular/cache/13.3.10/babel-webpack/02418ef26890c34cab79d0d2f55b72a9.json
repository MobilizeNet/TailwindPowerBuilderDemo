{"ast":null,"code":"import { drawing as draw, geometry as geom } from '@progress/kendo-drawing';\nimport LineSegment from '../line-chart/line-segment';\nimport { append, deepExtend, isFunction, last } from '../../common';\n\nclass AreaSegment extends LineSegment {\n  constructor(linePoints, currentSeries, seriesIx, prevSegment, stackPoints) {\n    super(linePoints, currentSeries, seriesIx);\n    this.prevSegment = prevSegment;\n    this.stackPoints = stackPoints;\n  }\n\n  createVisual() {\n    const series = this.series;\n    const defaults = series._defaults;\n    const lineOptions = series.line || {};\n    let color = series.color;\n\n    if (isFunction(color) && defaults) {\n      color = defaults.color;\n    }\n\n    this.visual = new draw.Group({\n      zIndex: series.zIndex\n    });\n    this.createFill({\n      fill: {\n        color: color,\n        opacity: series.opacity\n      },\n      stroke: null\n    });\n\n    if (lineOptions.width > 0 && lineOptions.visible !== false) {\n      this.createStroke({\n        stroke: deepExtend({\n          color: color,\n          opacity: series.opacity,\n          lineCap: \"butt\"\n        }, lineOptions)\n      });\n    }\n  }\n\n  strokeSegments() {\n    let segments = this._strokeSegments;\n\n    if (!segments) {\n      segments = this._strokeSegments = this.createStrokeSegments();\n    }\n\n    return segments;\n  }\n\n  createStrokeSegments() {\n    return this.segmentsFromPoints(this.points());\n  }\n\n  stackSegments() {\n    if (this.prevSegment) {\n      return this.prevSegment.createStackSegments(this.stackPoints);\n    }\n\n    return this.createStackSegments(this.stackPoints);\n  }\n\n  createStackSegments(stackPoints) {\n    return this.segmentsFromPoints(this.toGeometryPoints(stackPoints)).reverse();\n  }\n\n  segmentsFromPoints(points) {\n    return points.map(point => new geom.Segment(point));\n  }\n\n  createStroke(style) {\n    const stroke = new draw.Path(style);\n    stroke.segments.push.apply(stroke.segments, this.strokeSegments());\n    this.visual.append(stroke);\n  }\n\n  hasStackSegment() {\n    return this.prevSegment || this.stackPoints && this.stackPoints.length;\n  }\n\n  createFill(style) {\n    const strokeSegments = this.strokeSegments();\n    const fillSegments = strokeSegments.slice(0);\n    const hasStackSegments = this.hasStackSegment();\n\n    if (hasStackSegments) {\n      const stackSegments = this.stackSegments();\n      append(fillSegments, stackSegments);\n    }\n\n    const fill = new draw.Path(style);\n    fill.segments.push.apply(fill.segments, fillSegments);\n\n    if (!hasStackSegments && strokeSegments.length > 1) {\n      this.fillToAxes(fill);\n    }\n\n    this.visual.append(fill);\n  }\n\n  fillToAxes(fillPath) {\n    const chart = this.parent;\n    const invertAxes = chart.options.invertAxes;\n    const valueAxis = chart.seriesValueAxis(this.series);\n    const crossingValue = chart.categoryAxisCrossingValue(valueAxis);\n    const endSlot = valueAxis.getSlot(crossingValue, crossingValue, true);\n    const segments = this.strokeSegments();\n    const firstPoint = segments[0].anchor();\n    const lastPoint = last(segments).anchor();\n    let end = invertAxes ? endSlot.x1 : endSlot.y1;\n\n    if (invertAxes) {\n      fillPath.lineTo(end, lastPoint.y).lineTo(end, firstPoint.y);\n    } else {\n      fillPath.lineTo(lastPoint.x, end).lineTo(firstPoint.x, end);\n    }\n  }\n\n}\n\nexport default AreaSegment;","map":null,"metadata":{},"sourceType":"module"}