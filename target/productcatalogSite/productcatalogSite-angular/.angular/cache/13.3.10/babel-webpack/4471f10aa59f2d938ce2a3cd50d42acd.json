{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1404);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1051:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.core\");\n    /***/\n  },\n\n  /***/\n  1404:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1051)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"progressbar\",\n        name: \"ProgressBar\",\n        category: \"web\",\n        description: \"The ProgressBar offers rich functionality for displaying and tracking progress\",\n        depends: [\"core\"]\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            Widget = ui.Widget,\n            HORIZONTAL = \"horizontal\",\n            VERTICAL = \"vertical\",\n            DEFAULTMIN = 0,\n            DEFAULTMAX = 100,\n            DEFAULTVALUE = 0,\n            DEFAULTCHUNKCOUNT = 5,\n            KPROGRESSBAR = \"k-progressbar\",\n            KPROGRESSBARREVERSE = \"k-progressbar-reverse\",\n            KPROGRESSBARINDETERMINATE = \"k-progressbar-indeterminate\",\n            KPROGRESSBARCOMPLETE = \"k-complete\",\n            KPROGRESSWRAPPER = \"k-state-selected\",\n            KPROGRESSSTATUS = \"k-progress-status\",\n            LABEL_POSITION_END = \"k-progress-end\",\n            KCOMPLETEDCHUNK = \"k-state-selected\",\n            STATEDISABLED = \"k-state-disabled\",\n            PROGRESSTYPE = {\n          VALUE: \"value\",\n          PERCENT: \"percent\",\n          CHUNK: \"chunk\"\n        },\n            CHANGE = \"change\",\n            COMPLETE = \"complete\",\n            BOOLEAN = \"boolean\",\n            math = Math,\n            extend = $.extend,\n            HUNDREDPERCENT = 100,\n            DEFAULTANIMATIONDURATION = 400,\n            PRECISION = 3,\n            templates = {\n          progressStatus: \"<span class='k-progress-status-wrap \" + LABEL_POSITION_END + \"'><span class='k-progress-status'></span></span>\",\n          announceElement: '<span aria-live=\"polite\" class=\"k-sr-only k-progress-announce\"></span>'\n        };\n        var ProgressBar = Widget.extend({\n          init: function (element, options) {\n            var that = this;\n            Widget.fn.init.call(this, element, options);\n            options = that.options;\n            that._progressProperty = options.orientation === HORIZONTAL ? \"width\" : \"height\";\n\n            that._fields();\n\n            options.value = that._validateValue(options.value);\n\n            that._validateType(options.type);\n\n            that._wrapper();\n\n            if (options.ariaRole) {\n              that._aria();\n            }\n\n            that._progressAnimation();\n\n            if (options.value !== options.min && options.value !== false) {\n              that._updateProgress();\n            }\n          },\n          setOptions: function (options) {\n            var that = this,\n                wrapper = that.wrapper;\n            Widget.fn.setOptions.call(that, options);\n\n            if (options.hasOwnProperty(\"reverse\")) {\n              wrapper.toggleClass(\"k-progressbar-reverse\", options.reverse);\n            }\n\n            if (options.hasOwnProperty(\"enable\")) {\n              that.enable(options.enable);\n            }\n\n            if (options.ariaRole) {\n              that._aria();\n            }\n\n            that._progressAnimation();\n\n            that._validateValue();\n\n            that._updateProgress();\n          },\n          events: [CHANGE, COMPLETE],\n          options: {\n            name: \"ProgressBar\",\n            orientation: HORIZONTAL,\n            reverse: false,\n            min: DEFAULTMIN,\n            max: DEFAULTMAX,\n            value: DEFAULTVALUE,\n            enable: true,\n            type: PROGRESSTYPE.VALUE,\n            chunkCount: DEFAULTCHUNKCOUNT,\n            showStatus: true,\n            animation: {},\n            label: null,\n            labelId: null,\n            ariaRole: false\n          },\n          _aria: function () {\n            var that = this,\n                options = that.options,\n                wrapper = that.wrapper;\n            wrapper.attr({\n              \"role\": \"progressbar\",\n              \"aria-valuemin\": options.min,\n              \"aria-valuemax\": options.max\n            });\n\n            if (!!options.labelId) {\n              wrapper.attr(\"aria-labelledby\", options.labelId);\n            } else if (!!options.label) {\n              wrapper.attr(\"aria-label\", options.label);\n            }\n\n            that.announce = $(templates.announceElement);\n            that.announce.appendTo($(\"body\"));\n\n            if (options.value !== false) {\n              wrapper.attr(\"aria-valuenow\", options.value);\n              that.announce.text(that._calculatePercentage().toFixed() + \"%\");\n            }\n          },\n          _fields: function () {\n            var that = this;\n            that._isStarted = false;\n            that.progressWrapper = that.progressStatus = $();\n          },\n          _validateType: function (currentType) {\n            var isValid = false;\n            $.each(PROGRESSTYPE, function (k, type) {\n              if (type === currentType) {\n                isValid = true;\n                return false;\n              }\n            });\n\n            if (!isValid) {\n              throw new Error(kendo.format(\"Invalid ProgressBar type '{0}'\", currentType));\n            }\n          },\n          _wrapper: function () {\n            var that = this;\n            var container = that.wrapper = that.element;\n            var options = that.options;\n            var orientation = options.orientation;\n            var initialValue = options.value !== false ? options.value : options.min;\n            container.addClass(\"k-widget \" + KPROGRESSBAR);\n            container.addClass(KPROGRESSBAR + \"-\" + (orientation === HORIZONTAL ? HORIZONTAL : VERTICAL));\n\n            if (options.enable === false) {\n              container.addClass(STATEDISABLED);\n            }\n\n            if (options.reverse) {\n              container.addClass(KPROGRESSBARREVERSE);\n            }\n\n            if (options.value === false) {\n              container.addClass(KPROGRESSBARINDETERMINATE);\n            }\n\n            if (options.type === PROGRESSTYPE.CHUNK) {\n              that._addChunkProgressWrapper();\n            } else {\n              if (options.showStatus) {\n                that.progressStatus = that.wrapper.prepend(templates.progressStatus).find(\".\" + KPROGRESSSTATUS);\n\n                if (options.type === PROGRESSTYPE.VALUE) {\n                  that.progressStatus.text(initialValue);\n                } else {\n                  that.progressStatus.text(that._calculatePercentage(initialValue).toFixed() + \"%\");\n                }\n              }\n            }\n          },\n          value: function (value) {\n            return this._value(value);\n          },\n          _value: function (value) {\n            var that = this;\n            var options = that.options;\n            var validated;\n\n            if (value === undefined) {\n              return options.value;\n            } else {\n              if (typeof value !== BOOLEAN) {\n                value = that._roundValue(value);\n\n                if (!isNaN(value)) {\n                  validated = that._validateValue(value);\n\n                  if (validated !== options.value) {\n                    that.wrapper.removeClass(KPROGRESSBARINDETERMINATE);\n                    options.value = validated;\n                    that._isStarted = true;\n\n                    that._updateProgress();\n                  }\n                }\n              } else if (!value) {\n                that.wrapper.addClass(KPROGRESSBARINDETERMINATE);\n                that.wrapper.removeAttr(\"aria-valuenow\");\n                options.value = false;\n\n                if (that.announce) {\n                  that.announce.text(\"\");\n                }\n              }\n            }\n          },\n          _roundValue: function (value) {\n            value = parseFloat(value);\n            var power = math.pow(10, PRECISION);\n            return kendo._round(value * power) / power;\n          },\n          _validateValue: function (value) {\n            var that = this;\n            var options = that.options;\n\n            if (value !== false) {\n              if (value <= options.min || value === true) {\n                return options.min;\n              } else if (value >= options.max) {\n                return options.max;\n              }\n            } else if (value === false) {\n              return false;\n            }\n\n            if (isNaN(that._roundValue(value))) {\n              return options.min;\n            }\n\n            return value;\n          },\n          _updateProgress: function () {\n            var that = this;\n            var options = that.options;\n\n            var percentage = that._calculatePercentage();\n\n            if (options.type === PROGRESSTYPE.CHUNK) {\n              that._updateChunks(percentage);\n\n              that._onProgressUpdateAlways(options.value);\n            } else {\n              that._updateProgressWrapper(percentage);\n            }\n\n            if (options.ariaRole) {\n              that.wrapper.attr(\"aria-valuenow\", that.options.value);\n\n              if (that.announce) {\n                that.announce.text(percentage.toFixed() + \"%\");\n              }\n            }\n          },\n          _updateChunks: function (percentage) {\n            var that = this;\n            var options = that.options;\n            var chunkCount = options.chunkCount;\n            var percentagesPerChunk = parseInt(HUNDREDPERCENT / chunkCount * 100, 10) / 100;\n            var percentageParsed = parseInt(percentage * 100, 10) / 100;\n            var completedChunksCount = math.floor(percentageParsed / percentagesPerChunk);\n            var completedChunks;\n\n            if (options.orientation === HORIZONTAL && !options.reverse || options.orientation === VERTICAL && options.reverse) {\n              completedChunks = that.wrapper.find(\"li.k-item\").slice(0, completedChunksCount);\n            } else if (completedChunksCount === 0) {\n              completedChunks = kendo.jQuery();\n            } else {\n              completedChunks = that.wrapper.find(\"li.k-item\").slice(completedChunksCount * -1);\n            }\n\n            that.wrapper.find(\".\" + KCOMPLETEDCHUNK).removeClass(KCOMPLETEDCHUNK);\n            completedChunks.addClass(KCOMPLETEDCHUNK);\n          },\n          _updateProgressWrapper: function (percentage) {\n            var that = this;\n            var options = that.options;\n            var progressWrapper = that.wrapper.find(\".\" + KPROGRESSWRAPPER);\n            var animationDuration = that._isStarted ? that._animation.duration : 0;\n            var animationCssOptions = {};\n\n            if (progressWrapper.length === 0) {\n              that._addRegularProgressWrapper();\n            }\n\n            animationCssOptions[that._progressProperty] = percentage + \"%\";\n            that.progressWrapper.animate(animationCssOptions, {\n              duration: animationDuration,\n              start: that._onProgressAnimateStart.bind(that),\n              progress: that._onProgressAnimate.bind(that),\n              complete: that._onProgressAnimateComplete.bind(that, options.value),\n              always: that._onProgressUpdateAlways.bind(that, options.value)\n            });\n          },\n          _onProgressAnimateStart: function () {\n            this.progressWrapper.show();\n          },\n          _onProgressAnimate: function (e) {\n            var that = this;\n            var options = that.options;\n            var progressInPercent = parseFloat(e.elem.style[that._progressProperty], 10);\n            var progressStatusWrapSize;\n\n            if (options.showStatus) {\n              progressStatusWrapSize = 10000 / parseFloat(that.progressWrapper[0].style[that._progressProperty]);\n              that.progressWrapper.find(\".k-progress-status-wrap\").css(that._progressProperty, progressStatusWrapSize + \"%\");\n            }\n\n            if (options.type !== PROGRESSTYPE.CHUNK && progressInPercent <= 98) {\n              that.progressWrapper.removeClass(KPROGRESSBARCOMPLETE);\n            }\n          },\n          _onProgressAnimateComplete: function (currentValue) {\n            var that = this;\n            var options = that.options;\n            var progressWrapperSize = parseFloat(that.progressWrapper[0].style[that._progressProperty]);\n            var progressValue;\n\n            if (options.type !== PROGRESSTYPE.CHUNK && progressWrapperSize > 98) {\n              that.progressWrapper.addClass(KPROGRESSBARCOMPLETE);\n            }\n\n            if (options.showStatus) {\n              if (options.type === PROGRESSTYPE.VALUE) {\n                progressValue = currentValue;\n              } else if (options.type == PROGRESSTYPE.PERCENT) {\n                progressValue = that._calculatePercentage(currentValue).toFixed() + \"%\";\n              } else {\n                progressValue = math.floor(that._calculatePercentage(currentValue)) + \"%\";\n              }\n\n              that.progressStatus.text(progressValue);\n            }\n\n            if (currentValue === options.min) {\n              that.progressWrapper.hide();\n            }\n          },\n          _onProgressUpdateAlways: function (currentValue) {\n            var that = this;\n            var options = that.options;\n\n            if (that._isStarted) {\n              that.trigger(CHANGE, {\n                value: currentValue\n              });\n            }\n\n            if (currentValue === options.max && that._isStarted) {\n              that.trigger(COMPLETE, {\n                value: options.max\n              });\n            }\n          },\n          enable: function (enable) {\n            var that = this;\n            var options = that.options;\n            options.enable = typeof enable === \"undefined\" ? true : enable;\n            that.wrapper.toggleClass(STATEDISABLED, !options.enable);\n          },\n          destroy: function () {\n            var that = this;\n\n            if (that.announce) {\n              that.announce.remove();\n            }\n\n            Widget.fn.destroy.call(that);\n          },\n          _addChunkProgressWrapper: function () {\n            var that = this;\n            var options = that.options;\n            var container = that.wrapper;\n            var chunkSize = HUNDREDPERCENT / options.chunkCount;\n            var html = \"\";\n\n            if (options.chunkCount <= 1) {\n              options.chunkCount = 1;\n            }\n\n            html += \"<ul class='k-reset'>\";\n\n            for (var i = options.chunkCount - 1; i >= 0; i--) {\n              html += \"<li class='k-item'></li>\";\n            }\n\n            html += \"</ul>\";\n            container.append(html).find(\".k-item\").css(that._progressProperty, chunkSize + \"%\").first().addClass(\"k-first\").end().last().addClass(\"k-last\");\n\n            that._normalizeChunkSize();\n          },\n          _normalizeChunkSize: function () {\n            var that = this;\n            var options = that.options;\n            var lastChunk = that.wrapper.find(\".k-item\").last();\n            var currentSize = parseFloat(lastChunk[0].style[that._progressProperty]);\n            var difference = HUNDREDPERCENT - options.chunkCount * currentSize;\n\n            if (difference > 0) {\n              lastChunk.css(that._progressProperty, currentSize + difference + \"%\");\n            }\n          },\n          _addRegularProgressWrapper: function () {\n            var that = this;\n            that.progressWrapper = $(\"<div class='\" + KPROGRESSWRAPPER + \"'></div>\").appendTo(that.wrapper);\n\n            if (that.options.showStatus) {\n              that.progressWrapper.append(templates.progressStatus);\n              that.progressStatus = that.wrapper.find(\".\" + KPROGRESSSTATUS);\n            }\n          },\n          _calculateChunkSize: function () {\n            var that = this;\n            var chunkCount = that.options.chunkCount;\n            var chunkContainer = that.wrapper.find(\"ul.k-reset\");\n            return (parseInt(chunkContainer.css(that._progressProperty), 10) - (chunkCount - 1)) / chunkCount;\n          },\n          _calculatePercentage: function (currentValue) {\n            var that = this;\n            var options = that.options;\n            var value = currentValue !== undefined ? currentValue : options.value;\n            var min = options.min;\n            var max = options.max;\n            that._onePercent = math.abs((max - min) / 100);\n            return math.abs((value - min) / that._onePercent);\n          },\n          _progressAnimation: function () {\n            var that = this;\n            var options = that.options;\n            var animation = options.animation;\n\n            if (animation === false) {\n              that._animation = {\n                duration: 0\n              };\n            } else {\n              that._animation = extend({\n                duration: DEFAULTANIMATIONDURATION\n              }, options.animation);\n            }\n          }\n        });\n        kendo.ui.plugin(ProgressBar);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}