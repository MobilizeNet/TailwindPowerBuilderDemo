{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1118);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1052:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.popup\");\n    /***/\n  },\n\n  /***/\n  1118:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1052), __webpack_require__(1119), __webpack_require__(1120), __webpack_require__(1121)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"columnmenu\",\n        name: \"Column Menu\",\n        category: \"framework\",\n        depends: [\"popup\", \"filtermenu\", \"menu\", 'expansionpanel'],\n        advanced: true\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            extend = $.extend,\n            grep = $.grep,\n            map = $.map,\n            inArray = $.inArray,\n            Comparer = kendo.data.Comparer,\n            ACTIVE = \"k-state-selected\",\n            ASC = \"asc\",\n            DESC = \"desc\",\n            CHANGE = \"change\",\n            INIT = \"init\",\n            OPEN = \"open\",\n            SELECT = \"select\",\n            STICK = \"stick\",\n            UNSTICK = \"unstick\",\n            POPUP = \"kendoPopup\",\n            FILTERMENU = \"kendoFilterMenu\",\n            MENU = \"kendoMenu\",\n            EXPANSIONPANEL = \"kendoExpansionPanel\",\n            NS = \".kendoColumnMenu\",\n            COLUMNHEADERATTR = \"[role='columnheader']\",\n            Widget = ui.Widget;\n\n        function trim(text) {\n          return kendo.trim(text).replace(/&nbsp;/gi, \"\");\n        }\n\n        function toHash(arr, key) {\n          var result = {};\n          var idx, len, current;\n\n          for (idx = 0, len = arr.length; idx < len; idx++) {\n            current = arr[idx];\n            result[current[key]] = current;\n          }\n\n          return result;\n        }\n\n        function columnsGroupFilterHandler(column) {\n          return this.columns.indexOf(column.title) >= 0 || this.columns.indexOf(column.field) >= 0;\n        }\n\n        function leafColumns(columns) {\n          var result = [];\n\n          for (var idx = 0; idx < columns.length; idx++) {\n            if (!columns[idx].columns) {\n              result.push(columns[idx]);\n              continue;\n            }\n\n            result = result.concat(leafColumns(columns[idx].columns));\n          }\n\n          return result;\n        }\n\n        function attrEquals(attrName, attrValue) {\n          return \"[\" + kendo.attr(attrName) + \"='\" + (attrValue || \"\").replace(/'/g, \"\\\"\") + \"']\";\n        }\n\n        function insertElementAt(index, element, container) {\n          if (index > 0) {\n            element.insertAfter(container.children().eq(index - 1));\n          } else {\n            container.prepend(element);\n          }\n        }\n\n        function columnOccurrences(columns) {\n          var columnDict = {};\n          var signature;\n\n          for (var i = 0; i < columns.length; i++) {\n            signature = JSON.stringify(columns[i]);\n\n            if (columnDict[signature]) {\n              columnDict[signature].push(i);\n            } else {\n              columnDict[signature] = [i];\n            }\n          }\n\n          return columnDict;\n        }\n\n        function oldColumnOccurrences(renderedListElements, checkBoxes) {\n          var indexAttr = kendo.attr(\"index\");\n          var fieldAttr = kendo.attr(\"field\");\n          var columnDict = {};\n          var signature;\n          var columCheckbox;\n          var index;\n          var field;\n          var title;\n\n          for (var j = 0; j < renderedListElements.length; j++) {\n            columCheckbox = checkBoxes.eq(j);\n            index = parseInt(columCheckbox.attr(indexAttr), 10);\n            field = columCheckbox.attr(fieldAttr);\n            title = columCheckbox.attr(\"title\");\n            signature = field ? field : title;\n\n            if (columnDict[signature]) {\n              columnDict[signature].push(index);\n            } else {\n              columnDict[signature] = [index];\n            }\n          }\n\n          return columnDict;\n        }\n\n        var ColumnMenu = Widget.extend({\n          init: function (element, options) {\n            var that = this,\n                columnHeader;\n            options = options || {};\n            options.componentType = options.componentType || \"classic\";\n            Widget.fn.init.call(that, element, options);\n            element = that.element;\n            options = that.options;\n            that.owner = options.owner;\n            that.dataSource = options.dataSource;\n            that.field = element.attr(kendo.attr(\"field\"));\n            that.title = element.attr(kendo.attr(\"title\"));\n            columnHeader = $(element.closest(COLUMNHEADERATTR));\n\n            if (columnHeader.length) {\n              that.appendTo = columnHeader.find(options.appendTo);\n            } else {\n              that.appendTo = $(options.appendTo);\n            }\n\n            that.link = that._createLink();\n            that.wrapper = $('<div class=\"k-column-menu\"/>');\n            that._refreshHandler = that.refresh.bind(that);\n            that.dataSource.bind(CHANGE, that._refreshHandler);\n          },\n          _init: function () {\n            var that = this;\n            that.pane = that.options.pane;\n\n            if (that.pane) {\n              that._isMobile = true;\n            }\n\n            if (that._isMobile) {\n              that._createMobileMenu();\n            } else {\n              that._createMenu();\n            }\n\n            that.owner._muteAngularRebind(function () {\n              that._angularItems(\"compile\");\n            });\n\n            that._sort();\n\n            that._columns();\n\n            that._filter();\n\n            that._lockColumns();\n\n            that._stickyColumns();\n\n            that.trigger(INIT, {\n              field: that.field,\n              container: that.wrapper\n            });\n          },\n          events: [INIT, OPEN, \"sort\", \"filtering\", STICK, UNSTICK],\n          options: {\n            name: \"ColumnMenu\",\n            messages: {\n              sortAscending: \"Sort Ascending\",\n              sortDescending: \"Sort Descending\",\n              filter: \"Filter\",\n              column: \"Column\",\n              columns: \"Columns\",\n              columnVisibility: \"Column Visibility\",\n              clear: \"Clear\",\n              cancel: \"Cancel\",\n              done: \"Done\",\n              settings: \"Edit Column Settings\",\n              lock: \"Lock Column\",\n              unlock: \"Unlock Column\",\n              stick: \"Stick Column\",\n              unstick: \"Unstick Column\",\n              setColumnPosition: \"Set Column Position\",\n              apply: \"Apply\",\n              reset: \"Reset\",\n              buttonTitle: \"{0} edit column settings\"\n            },\n            filter: \"\",\n            columns: true,\n            sortable: true,\n            filterable: true,\n            animations: {\n              left: \"slide\"\n            },\n            encodeTitles: false,\n            componentType: \"classic\",\n            appendTo: null\n          },\n          _createMenu: function () {\n            var that = this,\n                options = that.options,\n                columns = that._ownerColumns(),\n                flattenMenuCols,\n                menuTemplate;\n\n            if (that._hasGroups()) {\n              columns = that._groupColumns(columns);\n              flattenMenuCols = that._flattenMenuCols(columns);\n\n              if (flattenMenuCols.length !== that.owner.columns.length) {\n                that._syncMenuCols(flattenMenuCols, that.owner.columns);\n              }\n            }\n\n            if (that._isModernComponentType()) {\n              menuTemplate = kendo.template(modernTemplate);\n            } else {\n              menuTemplate = kendo.template(template);\n            }\n\n            that.wrapper.html(menuTemplate({\n              uid: kendo.guid(),\n              ns: kendo.ns,\n              messages: options.messages,\n              sortable: options.sortable,\n              filterable: options.filterable,\n              columns: columns,\n              showColumns: options.columns,\n              hasLockableColumns: options.hasLockableColumns,\n              hasStickableColumns: options.hasStickableColumns,\n              encodeTitles: options.encodeTitles,\n              omitWrapAttribute: kendo.attr(\"omit-wrap\")\n            }));\n            that.popup = that.wrapper[POPUP]({\n              anchor: that.link,\n              copyAnchorStyles: false,\n              open: that._open.bind(that),\n              activate: that._activate.bind(that),\n              deactivate: that._deactivate.bind(that),\n              close: function (e) {\n                if (that.menu) {\n                  that.menu._closing = e.sender.element;\n                }\n\n                if (that.options.closeCallback) {\n                  that.options.closeCallback(that.element);\n                }\n              }\n            }).data(POPUP);\n\n            if (that._isModernComponentType()) {\n              that.popup.element.addClass(\"k-grid-columnmenu-popup\");\n\n              that._createExpanders();\n            } else {\n              that.menu = that.wrapper.children()[MENU]({\n                orientation: \"vertical\",\n                closeOnClick: false,\n                open: function () {\n                  that._updateMenuItems();\n                }\n              }).data(MENU);\n            }\n          },\n          _createLink: function () {\n            var that = this,\n                element = that.element,\n                appendTarget = that.appendTo.length ? element.find(that.appendTo) : element,\n                link = element.find(\".k-header-column-menu\"),\n                title = kendo.format(that.options.messages.buttonTitle, that.title || that.field);\n\n            if (!link[0]) {\n              element.addClass(\"k-filterable\");\n              link = appendTarget.append('<a class=\"k-header-column-menu\" href=\"#\" title=\"' + title + '\" aria-label=\"' + title + '\"><span class=\"k-icon k-i-more-vertical\"></span></a>').find(\".k-header-column-menu\");\n            }\n\n            link.attr(\"tabindex\", -1).on(\"click\" + NS, that._click.bind(that));\n            return link;\n          },\n          _createExpanders: function () {\n            var that = this;\n            var options = that.options;\n            var expanderOptions = {\n              expanded: false,\n              headerClass: \"k-columnmenu-item\",\n              useBareTemplate: true\n            };\n            that.wrapper.find(\".k-columns-item\")[EXPANSIONPANEL]($.extend(true, {}, expanderOptions, {\n              title: '<span class=\"k-icon k-i-columns\"></span><span>' + options.messages.columns + '</span>'\n            }));\n            that.wrapper.find(\".k-column-menu-filter\")[EXPANSIONPANEL]($.extend(true, {}, expanderOptions, {\n              title: '<span class=\"k-icon k-i-filter\"></span><span>' + options.messages.filter + '</span>'\n            }));\n            that.wrapper.find(\".k-column-menu-position\")[EXPANSIONPANEL]($.extend(true, {}, expanderOptions, {\n              title: '<span class=\"k-icon k-i-set-column-position\"></span><span>' + options.messages.setColumnPosition + '</span>'\n            }));\n          },\n          _syncMenuCols: function (menuCols, ownerCols) {\n            var length = ownerCols.length;\n            var ownerCol;\n            var menuColsFields = menuCols.map(function (col) {\n              return col.field;\n            });\n\n            for (var i = 0; i < length; i++) {\n              ownerCol = ownerCols[i];\n\n              if (menuColsFields.indexOf(ownerCol.field) < 0) {\n                ownerCol.menu = false;\n              }\n            }\n          },\n          _flattenMenuCols: function (cols) {\n            var result = [];\n            var length = cols.length;\n\n            for (var i = 0; i < length; i++) {\n              if (cols[i].columns) {\n                result = result.concat(this._flattenMenuCols(cols[i].columns));\n              } else if (!cols[i].groupHeader) {\n                result.push(cols[i]);\n              }\n            }\n\n            return result;\n          },\n          _groupColumns: function (columns, nest) {\n            var result = [];\n            var groups = this.options.columns.groups;\n            var length = groups.length;\n            var i;\n            var currGroup;\n            var filterHandler;\n            var group;\n            var groupColumns;\n\n            for (i = 0; i < length; i++) {\n              currGroup = groups[i];\n              filterHandler = columnsGroupFilterHandler.bind(currGroup);\n              group = {\n                title: currGroup.title,\n                groupHeader: true\n              };\n              groupColumns = columns.filter(filterHandler);\n              result.push(group);\n\n              if (nest) {\n                group.columns = groupColumns;\n              } else {\n                result = result.concat(groupColumns);\n              }\n            }\n\n            return result;\n          },\n          _hasGroups: function () {\n            return this.options.columns && this.options.columns.groups && this.options.columns.groups.length;\n          },\n          _isModernComponentType: function () {\n            return this.options.componentType === 'modern' && !this._isMobile;\n          },\n          _deactivate: function () {\n            if (this.menu) {\n              this.menu._closing = false;\n            }\n          },\n          _createMobileMenu: function () {\n            var that = this,\n                options = that.options,\n                columns = that._ownerColumns(),\n                groups,\n                flattenMenuCols;\n\n            if (that._hasGroups()) {\n              groups = that._groupColumns(columns, true);\n              flattenMenuCols = that._flattenMenuCols(groups);\n\n              if (flattenMenuCols.length !== that.owner.columns.length) {\n                that._syncMenuCols(flattenMenuCols, that.owner.columns);\n              }\n            }\n\n            var html = kendo.template(mobileTemplate)({\n              ns: kendo.ns,\n              field: that.field,\n              title: that.title || that.field,\n              messages: options.messages,\n              sortable: options.sortable,\n              filterable: options.filterable,\n              columns: columns,\n              showColumns: options.columns,\n              hasLockableColumns: options.hasLockableColumns,\n              hasStickableColumns: options.hasStickableColumns,\n              hasGroups: that._hasGroups(),\n              groups: groups\n            });\n            that.view = that.pane.append(html);\n            that.view.state = {\n              columns: {}\n            };\n            that.wrapper = that.view.element.find(\".k-column-menu\");\n            that.menu = new MobileMenu(that.wrapper.children(), {\n              pane: that.pane,\n              columnMenu: that\n            }); // The toggle animation of the switches should not propagate to the view\n\n            that.menu.element.on(\"transitionend\" + NS, function (e) {\n              e.stopPropagation();\n            });\n            var viewElement = that.view.wrapper && that.view.wrapper[0] ? that.view.wrapper : that.view.element;\n            viewElement.on(\"click\", \".k-header-done\", function (e) {\n              e.preventDefault();\n\n              that.menu._applyChanges();\n\n              that.menu._cancelChanges(false);\n\n              that.close();\n            });\n            viewElement.on(\"click\", \".k-header-cancel\", function (e) {\n              e.preventDefault();\n\n              that.menu._cancelChanges(true);\n\n              that.close();\n            });\n            that.view.bind(\"showStart\", function () {\n              var view = that.view || {\n                columns: {}\n              };\n\n              if (that.options.hasLockableColumns) {\n                that._updateLockedColumns();\n              }\n\n              if (that.options.hasStickableColumns) {\n                that._updateStickyColumns();\n              }\n\n              if (view.element.find(\".k-sort-asc.k-state-selected\").length) {\n                view.state.initialSort = \"asc\";\n              } else if (view.element.find(\".k-sort-desc.k-state-selected\").length) {\n                view.state.initialSort = \"desc\";\n              }\n            });\n          },\n          _angularItems: function (action) {\n            var that = this;\n            that.angular(action, function () {\n              var items = that.wrapper.find(\".k-columns-item input[\" + kendo.attr(\"field\") + \"]\").map(function () {\n                return $(this).closest(\"li\");\n              });\n              var data = map(that._ownerColumns(), function (col) {\n                return {\n                  column: col._originalObject\n                };\n              });\n              return {\n                elements: items,\n                data: data\n              };\n            });\n          },\n          destroy: function () {\n            var that = this;\n\n            that._angularItems(\"cleanup\");\n\n            Widget.fn.destroy.call(that);\n\n            if (that.filterMenu) {\n              that.filterMenu.destroy();\n            }\n\n            if (that._refreshHandler) {\n              that.dataSource.unbind(CHANGE, that._refreshHandler);\n            }\n\n            if (that.options.columns && that.owner) {\n              if (that._updateColumnsMenuHandler) {\n                that.owner.unbind(\"columnShow\", that._updateColumnsMenuHandler);\n                that.owner.unbind(\"columnHide\", that._updateColumnsMenuHandler);\n              }\n\n              if (that._updateColumnsLockedStateHandler) {\n                that.owner.unbind(\"columnLock\", that._updateColumnsLockedStateHandler);\n                that.owner.unbind(\"columnUnlock\", that._updateColumnsLockedStateHandler);\n              }\n            }\n\n            if (that.menu) {\n              that.menu.element.off(NS);\n              that.menu.destroy();\n            }\n\n            that.wrapper.off(NS);\n\n            if (that.popup) {\n              that.popup.destroy();\n            }\n\n            if (that.view) {\n              that.view.purge();\n            }\n\n            that.link.off(NS);\n            that.owner = null;\n            that.wrapper = null;\n            that.element = null;\n          },\n          close: function () {\n            if (this.menu) {\n              this.menu.close();\n            }\n\n            if (this.popup) {\n              this.popup.close();\n              this.popup.element.off(\"keydown\" + NS);\n            }\n          },\n          _click: function (e) {\n            var that = this;\n            e.preventDefault();\n            e.stopPropagation();\n            var options = this.options;\n\n            if (options.filter && this.element.is(!options.filter)) {\n              return;\n            }\n\n            if (!this.popup && !this.pane) {\n              this._init();\n            } else {\n              that._updateMenuItems();\n            }\n\n            if (this._isMobile) {\n              this.pane.navigate(this.view, this.options.animations.left);\n            } else {\n              this.popup.toggle();\n            }\n          },\n          _updateMenuItems: function () {\n            var that = this;\n\n            if (that.options.columns) {\n              that._setMenuItemsVisibility();\n\n              if (!that.options.columns.sort && !that.options.columns.groups) {\n                that._reorderMenuItems();\n              } else {\n                that._updateDataIndexes();\n              }\n            }\n          },\n          _setMenuItemsVisibility: function () {\n            var that = this;\n\n            that._eachRenderedMenuItem(function (index, column, renderedListElement) {\n              if (column.matchesMedia === false) {\n                renderedListElement.hide();\n              } else {\n                renderedListElement.show();\n              }\n            });\n          },\n          _reorderMenuItems: function () {\n            var that = this;\n\n            that._eachRenderedMenuItem(function (index, column, renderedListElement, renderedList) {\n              if (renderedListElement[0] && renderedListElement.index() !== index) {\n                insertElementAt(index, renderedListElement, renderedList);\n              }\n            });\n\n            that._updateDataIndexes();\n          },\n          _updateDataIndexes: function () {\n            var that = this;\n\n            var renderedList = that._isMobile && that.view ? $(that.view.element).find(\".k-columns-item\").children(\"ul\") : $(that.wrapper).find(\".k-menu-group\").first(),\n                mappedColumns = that._ownerColumns(true).map(function (x) {\n              return x.title || x.field;\n            });\n\n            renderedList.find(\"span.\" + (this._isMobile ? \"k-listgroup-form-field-wrapper\" : \"k-menu-link\") + \" input\").each(function (i) {\n              var columns;\n              var index;\n\n              if (that.options.columns.sort) {\n                columns = that._ownerColumns();\n                index = mappedColumns.indexOf(columns[i].title);\n                $(this).attr(kendo.attr(\"index\"), index);\n              } else {\n                $(this).attr(kendo.attr(\"index\"), i);\n              }\n            });\n          },\n          _eachRenderedMenuItem: function (callback) {\n            var that = this;\n            var renderedListElement;\n            var duplicateColumnIndex;\n            var fieldValue;\n            var currentColumn;\n            var columns = grep(leafColumns(that.owner.columns), function (col) {\n              var result = true,\n                  title = trim(col.title || \"\");\n\n              if (col.menu === false || !col.field && !title.length) {\n                result = false;\n              }\n\n              return result;\n            }).map(function (col) {\n              return {\n                field: col.field,\n                title: col.title,\n                matchesMedia: col.matchesMedia\n              };\n            });\n\n            var renderedList = that._getRenderedList();\n\n            var renderedListElements = that._getRenderedListElements(renderedList);\n\n            var oldOccurances = oldColumnOccurrences(renderedListElements, renderedList.find(\"input[type=checkbox]\"));\n            var columnOccurrence = columnOccurrences(columns);\n            var columnElements;\n\n            for (var i = 0; i < columns.length; i++) {\n              currentColumn = columns[i];\n              fieldValue = currentColumn.field ? currentColumn.field : currentColumn.title;\n              duplicateColumnIndex = $.inArray(i, columnOccurrence[JSON.stringify(currentColumn)]);\n              columnElements = $();\n\n              for (var idx = 0; idx < oldOccurances[fieldValue].length; idx++) {\n                columnElements = columnElements.add(renderedListElements.eq(oldOccurances[fieldValue][idx]));\n              }\n\n              renderedListElement = columnElements.find(attrEquals(\"field\", fieldValue)).closest(that._isModernComponentType() ? \"label\" : \"li\").eq(duplicateColumnIndex);\n              callback(i, currentColumn, renderedListElement, renderedList);\n            }\n          },\n          _getRenderedList: function () {\n            var that = this;\n\n            if (that._isModernComponentType()) {\n              return $(that.wrapper).find('.k-columns-item');\n            } else {\n              return that._isMobile && that.view ? $(that.view.element).find(\".k-columns-item\").children(\"ul\") : $(that.wrapper).find(\".k-menu-group\").first();\n            }\n          },\n          _getRenderedListElements: function (renderedList) {\n            var that = this;\n\n            if (that._isModernComponentType()) {\n              return renderedList.find('label');\n            } else {\n              return renderedList.find(\"span.\" + (this._isMobile ? \"k-listgroup-form-field-wrapper\" : \"k-menu-link\"));\n            }\n          },\n          _open: function () {\n            var that = this;\n            $(\".k-column-menu\").not(that.wrapper).each(function () {\n              $(this).data(POPUP).close();\n            });\n            that.popup.element.on(\"keydown\" + NS, function (e) {\n              if (that._isModernComponentType() && e.keyCode === kendo.keys.ENTER) {\n                $(e.target).click();\n              }\n\n              if (e.keyCode == kendo.keys.ESC) {\n                that.close();\n              }\n            });\n\n            if (that.options.hasLockableColumns) {\n              that._updateLockedColumns();\n            }\n\n            if (that.options.hasStickableColumns) {\n              that._updateStickyColumns();\n            }\n          },\n          _activate: function () {\n            if (this.menu) {\n              this.menu.element.trigger(\"focus\");\n            } else {\n              this.popup.element.find('[tabindex=0]').eq(0).trigger(\"focus\");\n            }\n\n            this.trigger(OPEN, {\n              field: this.field,\n              container: this.wrapper\n            });\n          },\n          _ownerColumns: function (omitSort) {\n            var columns = leafColumns(this.owner.columns),\n                menuColumns = grep(columns, function (col) {\n              var result = true,\n                  title = trim(col.title || \"\");\n\n              if (col.menu === false || !col.field && !title.length) {\n                result = false;\n              }\n\n              return result;\n            }),\n                result,\n                sort = this.options.columns.sort;\n            result = map(menuColumns, function (col) {\n              return {\n                originalField: col.field,\n                field: col.field || col.title,\n                title: col.title || col.field,\n                hidden: col.hidden,\n                matchesMedia: col.matchesMedia,\n                index: inArray(col, columns),\n                locked: !!col.locked,\n                _originalObject: col,\n                uid: col.headerAttributes.id\n              };\n            });\n\n            if (sort && !omitSort) {\n              result.sort(Comparer.create({\n                field: \"title\",\n                dir: sort\n              }));\n            }\n\n            return result;\n          },\n          _sort: function () {\n            var that = this;\n\n            if (that.options.sortable) {\n              that.refresh();\n\n              if (that._isModernComponentType()) {\n                that.wrapper.on(\"click\" + NS, \".k-sort-asc, .k-sort-desc\", that._sortHandler.bind(that));\n              } else {\n                that.menu.bind(SELECT, that._sortHandler.bind(that));\n              }\n            }\n          },\n          _sortHandler: function (e) {\n            var that = this,\n                item = e.item ? $(e.item) : $(e.target),\n                dir;\n\n            if (item.hasClass(\"k-sort-asc\")) {\n              dir = ASC;\n            } else if (item.hasClass(\"k-sort-desc\")) {\n              dir = DESC;\n            }\n\n            if (!dir) {\n              return;\n            }\n\n            that._getSortItemsContainer(item).find(\".k-sort-\" + (dir == ASC ? DESC : ASC)).removeClass(ACTIVE);\n\n            that._sortDataSource(item, dir);\n\n            if (!that._isMobile) {\n              that.close();\n            }\n          },\n          _getSortItemsContainer: function (item) {\n            return this._isModernComponentType() ? item.parents('.k-columnmenu-item-wrapper').first() : item.parent();\n          },\n          _sortDataSource: function (item, dir) {\n            var that = this,\n                sortable = that.options.sortable,\n                compare = sortable.compare === null ? undefined : sortable.compare,\n                dataSource = that.dataSource,\n                idx,\n                length,\n                sort = dataSource.sort() || [];\n            var removeClass = item.hasClass(ACTIVE) && sortable && sortable.allowUnsort !== false;\n            dir = !removeClass ? dir : undefined;\n\n            if (that.trigger(\"sort\", {\n              sort: {\n                field: that.field,\n                dir: dir,\n                compare: compare\n              }\n            })) {\n              return;\n            }\n\n            if (removeClass) {\n              item.removeClass(ACTIVE);\n            } else {\n              item.addClass(ACTIVE);\n            }\n\n            if (sortable.mode === \"multiple\") {\n              for (idx = 0, length = sort.length; idx < length; idx++) {\n                if (sort[idx].field === that.field) {\n                  sort.splice(idx, 1);\n                  break;\n                }\n              }\n\n              sort.push({\n                field: that.field,\n                dir: dir,\n                compare: compare\n              });\n            } else {\n              sort = [{\n                field: that.field,\n                dir: dir,\n                compare: compare\n              }];\n            }\n\n            dataSource.sort(sort);\n          },\n          _columns: function () {\n            var that = this;\n\n            if (that.options.columns) {\n              that._updateColumnsMenu();\n\n              that._updateColumnsMenuHandler = that._updateColumnsMenu.bind(that);\n              that.owner.bind([\"columnHide\", \"columnShow\"], that._updateColumnsMenuHandler);\n              that._updateColumnsLockedStateHandler = that._updateColumnsLockedState.bind(that);\n              that.owner.bind([\"columnUnlock\", \"columnLock\"], that._updateColumnsLockedStateHandler);\n\n              if (that._isModernComponentType()) {\n                that.wrapper.on(\"click\" + NS, '.k-columns-item .k-button:not(.k-button-solid-primary)', function () {\n                  that._updateColumnsMenu();\n                });\n                that.wrapper.on(\"click\" + NS, '.k-columns-item .k-button.k-button-solid-primary', that._applyColumnVisibility.bind(that));\n                that.wrapper.on(\"click\" + NS, '.k-columns-item .k-checkbox', function () {\n                  that._updateColumnsMenu(true);\n                });\n              } else {\n                that.menu.bind(SELECT, function (e) {\n                  var item = $(e.item),\n                      input,\n                      column,\n                      uidAttr = kendo.attr(\"uid\"),\n                      colIdx = 0,\n                      columns = grep(leafColumns(that.owner.columns), function (col) {\n                    var result = true,\n                        title = trim(col.title || \"\");\n\n                    if (col.menu === false || !col.field && !title.length) {\n                      result = false;\n                    }\n\n                    return result;\n                  });\n\n                  if (that._isMobile) {\n                    e.preventDefault();\n                  }\n\n                  if (!item.parent().closest(\"li.k-columns-item\")[0]) {\n                    return;\n                  }\n\n                  input = item.find(\":checkbox\");\n\n                  if (input.attr(\"disabled\")) {\n                    return;\n                  }\n\n                  colIdx = columns.map(function (col) {\n                    return col.headerAttributes.id;\n                  }).indexOf(input.attr(uidAttr));\n                  column = columns[colIdx];\n\n                  if (column.hidden === true) {\n                    that.owner.showColumn(column);\n                  } else {\n                    that.owner.hideColumn(column);\n                  }\n                });\n              }\n            }\n          },\n          _applyColumnVisibility: function () {\n            var that = this;\n            var fieldAttr = kendo.attr(\"field\");\n            var uidAttr = kendo.attr(\"uid\");\n            var checkboxes = that.wrapper.find(\".k-columns-item input[\" + fieldAttr + \"]\");\n            var columnsInMenu = grep(leafColumns(this.owner.columns), function (col) {\n              var result = true,\n                  title = trim(col.title || \"\");\n\n              if (col.menu === false || !col.field && !title.length) {\n                result = false;\n              }\n\n              return result;\n            });\n            var length = checkboxes.length;\n            var idx;\n            var colIdx;\n            var checkbox;\n            var column;\n            that.owner.unbind(\"columnShow\", that._updateColumnsMenuHandler);\n            that.owner.unbind(\"columnHide\", that._updateColumnsMenuHandler);\n\n            for (idx = 0; idx < length; idx++) {\n              checkbox = $(checkboxes[idx]);\n              colIdx = columnsInMenu.map(function (col) {\n                return col.headerAttributes.id;\n              }).indexOf(checkbox.attr(uidAttr));\n              column = columnsInMenu[colIdx];\n\n              if (checkbox.is(\":checked\") && column.hidden) {\n                that.owner.showColumn(column);\n              } else if (checkbox.is(\":not(:checked)\") && !column.hidden) {\n                that.owner.hideColumn(column);\n              }\n            }\n\n            that.popup.close();\n            that.owner.bind([\"columnHide\", \"columnShow\"], that._updateColumnsMenuHandler);\n          },\n          _updateColumnsMenu: function (omitCheckState) {\n            var idx,\n                length,\n                current,\n                checked,\n                locked,\n                that = this;\n            var fieldAttr = kendo.attr(\"field\"),\n                lockedAttr = kendo.attr(\"locked\"),\n                uidAttr = kendo.attr(\"uid\"),\n                columnIndexMap = {},\n                columnsCount = 0,\n                colIdx = 0;\n            omitCheckState = omitCheckState === true;\n            var columnsInMenu = grep(leafColumns(this.owner.columns), function (col, idx) {\n              var result = true,\n                  title = trim(col.title || \"\");\n\n              if (col.menu === false || !col.field && !title.length) {\n                result = false;\n              }\n\n              if (result) {\n                columnIndexMap[idx] = columnsCount;\n                columnsCount++;\n              }\n\n              return result;\n            }),\n                visibleFields = grep(this._ownerColumns(), function (field) {\n              if (omitCheckState) {\n                return that.wrapper.find(\"[role='menuitemcheckbox'] [\" + uidAttr + \"='\" + field.uid + \"']\").prop('checked');\n              }\n\n              return !field.hidden && field.matchesMedia !== false;\n            }),\n                visibleDataFields = grep(visibleFields, function (field) {\n              return field.originalField;\n            }),\n                lockedCount = grep(visibleDataFields, function (col) {\n              return col.locked === true;\n            }).length,\n                nonLockedCount = grep(visibleDataFields, function (col) {\n              return col.locked !== true;\n            }).length,\n                columnsNotInMenu = grep(this.owner.columns, function (col) {\n              return col.menu === false;\n            }),\n                hiddenColumnsNotInMenu = grep(columnsNotInMenu, function (col) {\n              return col.hidden;\n            });\n            this.wrapper.find(\"[role='menuitemcheckbox']\").attr(\"aria-checked\", false);\n            var checkboxes = this.wrapper.find(\".k-columns-item input[\" + fieldAttr + \"]\").prop(\"disabled\", false);\n\n            if (!omitCheckState) {\n              checkboxes.prop(\"checked\", false);\n            }\n\n            var switchWidget;\n\n            for (idx = 0, length = checkboxes.length; idx < length; idx++) {\n              current = checkboxes.eq(idx);\n              locked = current.attr(lockedAttr) === \"true\";\n              checked = false;\n              switchWidget = current.data(\"kendoSwitch\");\n              colIdx = columnsInMenu.map(function (col) {\n                return col.headerAttributes.id;\n              }).indexOf(current.attr(uidAttr));\n              checked = omitCheckState ? current.prop('checked') : !columnsInMenu[colIdx].hidden && columnsInMenu[colIdx].matchesMedia !== false;\n              current.prop(\"checked\", checked);\n\n              if (switchWidget) {\n                switchWidget.enable(true);\n                switchWidget.check(checked);\n              }\n\n              current.closest(\"[role='menuitemcheckbox']\").attr(\"aria-checked\", checked);\n\n              if (checked) {\n                if (lockedCount == 1 && locked) {\n                  current.prop(\"disabled\", true);\n\n                  if (switchWidget) {\n                    switchWidget.enable(false);\n                  }\n                }\n\n                if ((columnsNotInMenu.length === 0 || columnsNotInMenu.length === hiddenColumnsNotInMenu.length) && nonLockedCount == 1 && !locked) {\n                  current.prop(\"disabled\", true);\n\n                  if (switchWidget) {\n                    switchWidget.enable(false);\n                  }\n                }\n              }\n            }\n          },\n          _updateColumnsLockedState: function () {\n            var idx, length, current, column;\n            var fieldAttr = kendo.attr(\"field\");\n            var lockedAttr = kendo.attr(\"locked\");\n            var columns = toHash(this._ownerColumns(), \"field\");\n            var checkboxes = this.wrapper.find(\".k-columns-item input[type=checkbox]\");\n\n            for (idx = 0, length = checkboxes.length; idx < length; idx++) {\n              current = checkboxes.eq(idx);\n              column = columns[current.attr(fieldAttr)];\n\n              if (column) {\n                current.attr(lockedAttr, column.locked);\n              }\n            }\n\n            this._updateColumnsMenu();\n          },\n          _filter: function () {\n            var that = this,\n                widget = FILTERMENU,\n                options = that.options;\n\n            if (options.filterable !== false) {\n              if (options.filterable.multi) {\n                widget = \"kendoFilterMultiCheck\";\n\n                if (options.filterable.dataSource) {\n                  options.filterable.checkSource = options.filterable.dataSource;\n                  delete options.filterable.dataSource;\n                }\n              }\n\n              that.filterMenu = that.wrapper.find(\".k-filterable\")[widget](extend(true, {}, {\n                appendToElement: true,\n                dataSource: options.dataSource,\n                values: options.values,\n                field: that.field,\n                title: that.title,\n                change: function (e) {\n                  if (that.trigger(\"filtering\", {\n                    filter: e.filter,\n                    field: e.field\n                  })) {\n                    e.preventDefault();\n                  }\n                },\n                componentType: that.options.componentType,\n                cycleForm: !that._isModernComponentType()\n              }, options.filterable)).data(widget);\n\n              if (that._isMobile) {\n                that.menu.bind(SELECT, function (e) {\n                  var item = $(e.item);\n\n                  if (item.hasClass(\"k-filter-item\")) {\n                    that.pane.navigate(that.filterMenu.view, that.options.animations.left);\n                  }\n                });\n              }\n            }\n          },\n          _lockColumns: function () {\n            var that = this;\n\n            if (that._isModernComponentType()) {\n              that.wrapper.on(\"click\" + NS, \".k-lock, .k-unlock\", that._lockableHandler.bind(that));\n            } else {\n              that.menu.bind(SELECT, that._lockableHandler.bind(that));\n            }\n          },\n          _lockableHandler: function (e) {\n            var that = this;\n            var item = e.item ? $(e.item) : $(e.target);\n\n            if (item.hasClass(\"k-lock\")) {\n              that.owner.lockColumn(that.field);\n\n              if (!that._isMobile) {\n                that.close();\n              }\n            } else if (item.hasClass(\"k-unlock\")) {\n              that.owner.unlockColumn(that.field);\n\n              if (!that._isMobile) {\n                that.close();\n              }\n            }\n          },\n          _stickyColumns: function () {\n            var that = this;\n\n            if (that._isModernComponentType()) {\n              that.wrapper.on(\"click\" + NS, \".k-stick, .k-unstick\", that._stickableHandler.bind(that));\n            } else {\n              that.menu.bind(SELECT, that._stickableHandler.bind(that));\n            }\n          },\n          _stickableHandler: function (e) {\n            var that = this;\n            var item = e.item ? $(e.item) : $(e.target);\n            var field = that.field;\n            var columns = that.owner.columns;\n            var column = grep(columns, function (column) {\n              return column.field == field || column.title == field;\n            })[0];\n\n            if (item.hasClass(\"k-stick\")) {\n              that.owner.stickColumn(that.field);\n              that.trigger(STICK, {\n                column: column\n              });\n\n              if (!that._isMobile) {\n                that.close();\n              }\n            } else if (item.hasClass(\"k-unstick\")) {\n              that.owner.unstickColumn(that.field);\n              that.trigger(UNSTICK, {\n                column: column\n              });\n\n              if (!that._isMobile) {\n                that.close();\n              }\n            }\n          },\n          _updateLockedColumns: function () {\n            var field = this.field;\n            var columns = this.owner.columns;\n            var column = grep(columns, function (column) {\n              return column.field == field || column.title == field;\n            })[0];\n\n            if (!column) {\n              return;\n            }\n\n            var locked = column.locked === true;\n            var length = grep(columns, function (column) {\n              return !column.hidden && (column.locked && locked || !column.locked && !locked);\n            }).length;\n            var notLockable = column.lockable === false;\n            var lockItem = this.wrapper.find(\".k-lock\").removeClass(\"k-state-disabled\");\n            var unlockItem = this.wrapper.find(\".k-unlock\").removeClass(\"k-state-disabled\");\n\n            if (locked || length == 1 || notLockable) {\n              lockItem.addClass(\"k-state-disabled\");\n            }\n\n            if (!locked || length == 1 || notLockable) {\n              unlockItem.addClass(\"k-state-disabled\");\n            }\n\n            this._updateColumnsLockedState();\n          },\n          _updateStickyColumns: function () {\n            var field = this.field;\n            var columns = this.owner.columns;\n            var column = grep(columns, function (column) {\n              return column.field == field || column.title == field;\n            })[0];\n\n            if (!column) {\n              return;\n            }\n\n            var sticky = column.sticky === true;\n            var stickable = column.stickable === true;\n            var locked = column.locked === true;\n            var length = grep(columns, function (column) {\n              return !column.hidden && (column.locked && locked || !column.locked && !locked);\n            }).length;\n            var stickItem = this.wrapper.find(\".k-stick\").removeClass(\"k-state-disabled\");\n            var unstickItem = this.wrapper.find(\".k-unstick\").removeClass(\"k-state-disabled\");\n\n            if (sticky || !stickable || locked && length === 1) {\n              stickItem.addClass(\"k-state-disabled\");\n            }\n\n            if (!sticky || !stickable) {\n              unstickItem.addClass(\"k-state-disabled\");\n            }\n          },\n          refresh: function () {\n            var that = this,\n                sort = that.options.dataSource.sort() || [],\n                descriptor,\n                field = that.field,\n                idx,\n                length;\n            that.wrapper.find(\".k-sort-asc, .k-sort-desc\").removeClass(ACTIVE);\n\n            for (idx = 0, length = sort.length; idx < length; idx++) {\n              descriptor = sort[idx];\n\n              if (field == descriptor.field) {\n                that.wrapper.find(\".k-sort-\" + descriptor.dir).addClass(ACTIVE);\n              }\n            }\n\n            that.link[that._filterExist(that.dataSource.filter()) ? \"addClass\" : \"removeClass\"](\"k-state-active\");\n          },\n          _filterExist: function (filters) {\n            var found = false;\n            var filter;\n\n            if (!filters) {\n              return;\n            }\n\n            filters = filters.filters;\n\n            for (var idx = 0, length = filters.length; idx < length; idx++) {\n              filter = filters[idx];\n\n              if (filter.field == this.field) {\n                found = true;\n              } else if (filter.filters) {\n                found = found || this._filterExist(filter);\n              }\n            }\n\n            return found;\n          }\n        });\n        var modernTemplate = '#if(sortable){#' + '<div class=\"k-columnmenu-item-wrapper\">' + '<div>' + '<div class=\"k-columnmenu-item k-sort-asc\" tabindex=\"0\">' + '<span class=\"k-icon k-i-sort-asc-sm\"></span>${messages.sortAscending}' + '</div>' + '</div>' + '<div>' + '<div class=\"k-columnmenu-item k-sort-desc\" tabindex=\"0\">' + '<span class=\"k-icon k-i-sort-desc-sm\"></span>${messages.sortDescending}' + '</div>' + '</div>' + '</div>' + '#}#' + '#if(showColumns){#' + '<div class=\"k-columnmenu-item-wrapper\">' + '<div>' + '<div class=\"k-columnmenu-item-content k-columns-item\">' + '<div class=\"k-column-list-wrapper\">' + '<div class=\"k-column-list\" role=\"menu\">' + '#for (var idx = 0; idx < columns.length; idx++) {#' + '#if(columns[idx].groupHeader){#' + '<span class=\"k-column-menu-group-header\"><span class=\"k-column-menu-group-header-text\">#=columns[idx].title#</span></span>' + '#} else {#' + '<label class=\"k-column-list-item\" role=\"menuitemcheckbox\" aria-checked=\"false\" #=columns[idx].matchesMedia === false ? \"style=\\'display:none;\\'\" : \"\"#><input class=\"k-checkbox k-checkbox-md k-rounded-md\" type=\"checkbox\" title=\"#=encodeTitles ? kendo.htmlEncode(columns[idx].title) : columns[idx].title#\" data-#=ns#field=\"#=columns[idx].field.replace(/\\\"/g,\"&\\\\#34;\")#\" data-#=ns#index=\"#=columns[idx].index#\" data-#=ns#locked=\"#=columns[idx].locked#\" data-#=ns#uid=\"#=columns[idx].uid#\"/><span class=\"k-checkbox-label\"> #=encodeTitles ? kendo.htmlEncode(columns[idx].title) : columns[idx].title#</span></label>' + '#}#' + '#}#' + '</div>' + '</div>' + '<div class=\"k-columnmenu-actions\">' + '<button class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base\" type=\"button\">${messages.reset}</button>' + '<button class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary\" type=\"button\">${messages.apply}</button>' + '</div>' + '</div>' + '</div>' + '</div>' + '#}#' + '#if(filterable){#' + '<div class=\"k-columnmenu-item-wrapper\">' + '<div class=\"k-columnmenu-item-content k-column-menu-filter\">' + '<div class=\"k-filterable\"></div>' + '</div>' + '</div>' + '#}#' + '#if(hasLockableColumns || hasStickableColumns){#' + '<div class=\"k-columnmenu-item-wrapper\">' + '<div class=\"k-column-menu-position\">' + '#if(hasLockableColumns){#' + '<div class=\"k-columnmenu-item k-lock\" tabindex=\"0\">' + '<span class=\"k-icon k-i-lock\"></span>${messages.lock}' + '</div>' + '<div class=\"k-columnmenu-item k-unlock\" tabindex=\"0\">' + '<span class=\"k-icon k-i-unlock\"></span>${messages.unlock}' + '</div>' + '#}#' + '#if(hasStickableColumns){#' + '<div class=\"k-columnmenu-item k-stick\" tabindex=\"0\">' + '<span class=\"k-icon k-i-stick\"></span>${messages.stick}' + '</div>' + '<div class=\"k-columnmenu-item k-unstick\" tabindex=\"0\">' + '<span class=\"k-icon k-i-unstick\"></span>${messages.unstick}' + '</div>' + '#}#' + '</div>' + '</div>' + '#}#';\n        var template = '<ul id=\"#=uid#\">' + '#if(sortable){#' + '<li class=\"k-item k-menu-item k-sort-asc\"><span class=\"k-link k-menu-link\"><span class=\"k-icon k-i-sort-asc-sm\"></span><span class=\"k-menu-link-text\">${messages.sortAscending}</span></span></li>' + '<li class=\"k-item k-menu-item k-sort-desc\"><span class=\"k-link k-menu-link\"><span class=\"k-icon k-i-sort-desc-sm\"></span><span class=\"k-menu-link-text\">${messages.sortDescending}</span></span></li>' + '#if(showColumns || filterable){#' + '<li class=\"k-separator k-menu-separator\" role=\"presentation\"></li>' + '#}#' + '#}#' + '#if(showColumns){#' + '<li class=\"k-item k-menu-item k-columns-item\" aria-haspopup=\"true\"><span class=\"k-link k-menu-link\"><span class=\"k-icon k-i-columns\"></span><span class=\"k-menu-link-text\">${messages.columns}</span></span><ul>' + '#for (var idx = 0; idx < columns.length; idx++) {#' + '#if(columns[idx].groupHeader){#' + '<li class=\"k-column-menu-group-header\" #=omitWrapAttribute#=\"true\" ><span class=\"k-column-menu-group-header-text\">#=columns[idx].title#</span></li>' + '#} else {#' + '<li role=\"menuitemcheckbox\" aria-checked=\"false\" #=columns[idx].matchesMedia === false ? \"style=\\'display:none;\\'\" : \"\"#><input type=\"checkbox\" class=\"k-checkbox k-checkbox-md k-rounded-md\" title=\"#=encodeTitles ? kendo.htmlEncode(columns[idx].title) : columns[idx].title#\" data-#=ns#field=\"#=columns[idx].field.replace(/\\\"/g,\"&\\\\#34;\")#\" data-#=ns#index=\"#=columns[idx].index#\" data-#=ns#locked=\"#=columns[idx].locked#\" data-#=ns#uid=\"#=columns[idx].uid#\"/>#=encodeTitles ? kendo.htmlEncode(columns[idx].title) : columns[idx].title#</li>' + '#}#' + '#}#' + '</ul></li>' + '#if(filterable || hasLockableColumns || hasStickableColumns){#' + '<li class=\"k-separator k-menu-separator\" role=\"presentation\"></li>' + '#}#' + '#}#' + '#if(filterable){#' + '<li class=\"k-item k-menu-item k-filter-item\" aria-haspopup=\"true\"><span class=\"k-link k-menu-link\"><span class=\"k-icon k-i-filter\"></span><span class=\"k-menu-link-text\">${messages.filter}</span></span><ul>' + '<li><div class=\"k-filterable\"></div></li>' + '</ul></li>' + '#if(hasLockableColumns || hasStickableColumns){#' + '<li class=\"k-separator k-menu-separator\" role=\"presentation\"></li>' + '#}#' + '#}#' + '#if(hasLockableColumns || hasStickableColumns){#' + '<li class=\"k-item k-menu-item k-position-item\" aria-haspopup=\"true\"><span class=\"k-link k-menu-link\"><span class=\"k-icon k-i-set-column-position\"></span><span class=\"k-menu-link-text\">${messages.setColumnPosition}</span></span><ul>' + '#if(hasLockableColumns){#' + '<li class=\"k-item k-menu-item k-lock\"><span class=\"k-link k-menu-link\"><span class=\"k-icon k-i-lock\"></span><span class=\"k-menu-link-text\">${messages.lock}</span></span></li>' + '<li class=\"k-item k-menu-item k-unlock\"><span class=\"k-link k-menu-link\"><span class=\"k-icon k-i-unlock\"></span><span class=\"k-menu-link-text\">${messages.unlock}</span></span></li>' + '#if(hasStickableColumns){#' + '<li class=\"k-separator k-menu-separator\" role=\"presentation\"></li>' + '#}#' + '#}#' + '#if(hasStickableColumns){#' + '<li class=\"k-item k-menu-item k-stick\"><span class=\"k-link k-menu-link\"><span class=\"k-icon k-i-stick\"></span><span class=\"k-menu-link-text\">${messages.stick}</span></span></li>' + '<li class=\"k-item k-menu-item k-unstick\"><span class=\"k-link k-menu-link\"><span class=\"k-icon k-i-unstick\"></span><span class=\"k-menu-link-text\">${messages.unstick}</span></span></li>' + '#}#' + '</ul></li>' + '#}#' + '</ul>';\n        var mobileTemplate = '<div data-#=ns#role=\"view\" class=\"k-grid-column-menu\">' + '<div data-#=ns#role=\"header\" class=\"k-header\">' + '<a href=\"\\\\#\" class=\"k-header-cancel k-link\" title=\"#=messages.cancel#\" ' + 'aria-label=\"#=messages.cancel#\"><span class=\"k-icon k-i-arrow-chevron-left\"></span></a>' + '${messages.settings}' + '<a href=\"\\\\#\" class=\"k-header-done k-link\" title=\"#=messages.done#\" ' + 'aria-label=\"#=messages.done#\"><span class=\"k-icon k-i-check\"></span></a>' + '</div>' + '<div class=\"k-column-menu\">' + '<ul class=\"k-reset\">' + '<li>' + '<span class=\"k-list-title\">#=messages.column#: ${title}</span>' + '<ul class=\"k-listgroup k-listgroup-flush k-mb-4\">' + '#if(sortable){#' + '<li id=\"#=kendo.guid()#\" class=\"k-item k-listgroup-item k-sort-asc\"><span class=\"k-link\"><span class=\"k-icon k-i-sort-asc-sm\"></span><span class=\"k-item-title\">${messages.sortAscending}</span></span></li>' + '<li id=\"#=kendo.guid()#\" class=\"k-item k-listgroup-item k-sort-desc\"><span class=\"k-link\"><span class=\"k-icon k-i-sort-desc-sm\"></span><span class=\"k-item-title\">${messages.sortDescending}</span></span></li>' + '#}#' + '#if(hasLockableColumns){#' + '<li id=\"#=kendo.guid()#\" class=\"k-item k-listgroup-item k-lock\"><span class=\"k-link\"><span class=\"k-icon k-i-lock\"></span><span class=\"k-item-title\">${messages.lock}</span></span></li>' + '<li id=\"#=kendo.guid()#\" class=\"k-item k-listgroup-item k-unlock\"><span class=\"k-link\"><span class=\"k-icon k-i-unlock\"></span><span class=\"k-item-title\">${messages.unlock}</span></span></li>' + '#}#' + '#if(hasStickableColumns){#' + '<li id=\"#=kendo.guid()#\" class=\"k-item k-listgroup-item k-stick\"><span class=\"k-link\"><span class=\"k-icon k-i-stick\"></span><span class=\"k-item-title\">${messages.stick}</span></span></li>' + '<li id=\"#=kendo.guid()#\" class=\"k-item k-listgroup-item k-unstick\"><span class=\"k-link\"><span class=\"k-icon k-i-unstick\"></span><span class=\"k-item-title\">${messages.unstick}</span></span></li>' + '#}#' + '#if(filterable){#' + '<li id=\"#=kendo.guid()#\" class=\"k-item k-listgroup-item k-filter-item\">' + '<span class=\"k-link k-filterable\">' + '<span class=\"k-icon k-i-filter\"></span>' + '<span class=\"k-item-title\">${messages.filter}</span>' + '<span class=\"k-select\"><span class=\"k-icon k-i-arrow-chevron-right\"></span></span>' + '</span>' + '</li>' + '#}#' + '</ul>' + '</li>' + '#if(showColumns){#' + '<li class=\"k-columns-item\"><span class=\"k-list-title\">${messages.columnVisibility}</span>' + '#if(hasGroups){#' + '#for (var i = 0; i < groups.length; i++) {#' + '<span class=\"k-list-group-header k-pb-1\">#:groups[i].title#</span>' + '<ul class=\"k-listgroup k-listgroup-flush k-mb-4\">' + '#for (var idx = 0; idx < groups[i].columns.length; idx++) {#' + '<li id=\"#=kendo.guid()#\" class=\"k-item k-listgroup-item\">' + '<span class=\"k-listgroup-form-row\">' + '<span class=\"k-listgroup-form-field-label k-item-title\">' + '#=groups[i].columns[idx].title#' + '</span>' + '<span class=\"k-listgroup-form-field-wrapper\">' + '<input type=\"checkbox\" title=\"#=groups[i].columns[idx].title#\" ' + ' data-#=ns#field=\"#=groups[i].columns[idx].field.replace(/\\\"/g,\"&\\\\#34;\")#\"' + ' data-#=ns#index=\"#=groups[i].columns[idx].index#\"' + ' data-#=ns#uid=\"#=groups[i].columns[idx].uid#\"' + ' data-#=ns#locked=\"#=groups[i].columns[idx].locked#\" />' + '</span>' + '</span>' + '</li>' + '#}#' + '</ul>' + '#}#' + '#} else {#' + '<ul class=\"k-listgroup k-listgroup-flush k-mb-4\">' + '#for (var idx = 0; idx < columns.length; idx++) {#' + '<li id=\"#=kendo.guid()#\" class=\"k-item k-listgroup-item\">' + '<span class=\"k-listgroup-form-row\">' + '<span class=\"k-listgroup-form-field-label k-item-title\">' + '#=columns[idx].title#' + '</span>' + '<span class=\"k-listgroup-form-field-wrapper\">' + '<input type=\"checkbox\" title=\"#=columns[idx].title#\" ' + ' data-#=ns#field=\"#=columns[idx].field.replace(/\\\"/g,\"&\\\\#34;\")#\"' + ' data-#=ns#index=\"#=columns[idx].index#\"' + ' data-#=ns#uid=\"#=columns[idx].uid#\"' + ' data-#=ns#locked=\"#=columns[idx].locked#\" />' + '</span>' + '</span>' + '</li>' + '#}#' + '</ul>' + '#}#' + '</li>' + '#}#' + '<li class=\"k-item k-clear-wrap\">' + '<ul class=\"k-listgroup k-listgroup-flush\">' + '<li class=\"k-listgroup-item\">' + '<span class=\"k-link k-label k-clear\" title=\"#=messages.clear#\" aria-label=\"#=messages.clear#\">' + '#=messages.clear#' + '</span>' + '</li>' + '</ul>' + '</li>' + '</ul>' + '</div>' + '</div>';\n        var MobileMenu = Widget.extend({\n          init: function (element, options) {\n            var that = this;\n            Widget.fn.init.call(that, element, options);\n\n            that._createCheckBoxes();\n\n            that.element.on(\"click\" + NS, \"li.k-item:not(.k-separator):not(.k-state-disabled):not(:has(.k-switch))\", \"_click\");\n          },\n          events: [SELECT],\n          _click: function (e) {\n            var that = this;\n\n            if (!$(e.target).is(\"[type=checkbox]\")) {\n              e.preventDefault();\n            }\n\n            if ($(e.target).hasClass(\"k-clear\")) {\n              that._cancelChanges(true);\n\n              return;\n            }\n\n            if ($(e.target).hasClass(\"k-filterable\")) {\n              that._cancelChanges(true);\n\n              that.trigger(SELECT, {\n                item: e.currentTarget\n              });\n              return;\n            }\n\n            that._updateSelectedItems(e.currentTarget);\n          },\n          _updateSelectedItems: function (el) {\n            var that = this;\n            var item = $(el);\n            var state = that.options.columnMenu.view.state || {\n              columns: {}\n            };\n            var id = item.prop(\"id\");\n\n            if (item.hasClass(\"k-filter-item\")) {\n              return;\n            }\n\n            if (state[id]) {\n              state[id] = false;\n            } else {\n              state[id] = true;\n            }\n\n            if (item.hasClass(\"k-sort-asc\") || item.hasClass(\"k-sort-desc\")) {\n              var dir;\n              var otherItem;\n              var otherItemId;\n\n              if (item.hasClass(\"k-sort-asc\")) {\n                dir = \"asc\";\n                otherItem = that.element.find(\".k-sort-desc\");\n              } else {\n                dir = \"desc\";\n                otherItem = that.element.find(\".k-sort-asc\");\n              }\n\n              otherItemId = otherItem.prop(\"id\");\n\n              if (dir === state.initialSort && !item.hasClass(\"k-state-selected\")) {\n                state[id] = false;\n              }\n\n              if (state[otherItemId]) {\n                state[otherItemId] = false;\n              }\n\n              otherItem.removeClass(ACTIVE);\n            }\n\n            if (item.hasClass(ACTIVE)) {\n              item.removeClass(ACTIVE);\n            } else {\n              item.addClass(ACTIVE);\n            }\n          },\n          _cancelChanges: function (force) {\n            var that = this;\n            var menu = that.options.columnMenu;\n            var view = menu.view;\n            var state = view.state || {\n              columns: {}\n            };\n            var columns = state.columns;\n            that.element.find(\".\" + ACTIVE).removeClass(ACTIVE);\n            menu.refresh();\n\n            if (force) {\n              var selectedItems = [];\n\n              for (var key in columns) {\n                if (columns.hasOwnProperty(key)) {\n                  if (columns[key] === true) {\n                    var item = view.element.find(\"#\" + key);\n                    selectedItems.push(item[0]);\n                  }\n                }\n              } // In order to use the columns hide/show validation,\n              // triggering the Select event must be done backwards\n\n\n              for (var i = selectedItems.length - 1; i >= 0; i--) {\n                that.trigger(SELECT, {\n                  item: selectedItems[i]\n                });\n              }\n\n              if (menu.options.hasLockableColumns) {\n                menu._updateLockedColumns();\n              }\n\n              if (menu.options.hasStickableColumns) {\n                menu._updateStickyColumns();\n              }\n            }\n\n            that.options.columnMenu.view.state = {\n              columns: {}\n            };\n          },\n          _applyChanges: function () {\n            var that = this;\n            var view = that.options.columnMenu.view;\n            var state = view.state || {\n              columns: {}\n            };\n\n            for (var key in state) {\n              if (state.hasOwnProperty(key)) {\n                if (key !== \"initialSort\" && key !== \"columns\" && state[key] === true) {\n                  var item = view.element.find(\"#\" + key);\n\n                  if (item.hasClass(ACTIVE)) {\n                    item.removeClass(ACTIVE);\n                  } else {\n                    item.addClass(ACTIVE);\n                  }\n\n                  that.trigger(SELECT, {\n                    item: item[0]\n                  });\n                }\n              }\n            }\n          },\n          _createCheckBoxes: function () {\n            var that = this;\n            that.element.find(\".k-columns-item\").find(\"[type='checkbox']\").kendoSwitch({\n              messages: {\n                checked: \"\",\n                unchecked: \"\"\n              },\n              change: function (e) {\n                var item = e.sender.element.closest(\".k-item\");\n                var state = that.options.columnMenu.view.state || {\n                  columns: {}\n                };\n                var id = item.prop(\"id\");\n\n                if (state.columns[id]) {\n                  state.columns[id] = false;\n                } else {\n                  state.columns[id] = true;\n                }\n\n                that.trigger(SELECT, {\n                  item: item\n                });\n              }\n            });\n          },\n          _destroyCheckBoxes: function () {\n            var that = this;\n            var elements = that.element.find(\".k-columns-item\").find(\"[type='checkbox']\");\n            var switchWidget;\n\n            for (var i = 0; i < elements.length; i++) {\n              switchWidget = elements.eq(i).data(\"kendoSwitch\");\n\n              if (switchWidget) {\n                switchWidget.destroy();\n              }\n            }\n          },\n          close: function () {\n            this.options.pane.navigate(\"\");\n          },\n          destroy: function () {\n            var that = this;\n            Widget.fn.destroy.call(that);\n            that.element.off(NS);\n\n            that._destroyCheckBoxes();\n          }\n        });\n        ui.plugin(ColumnMenu);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1119:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.filtermenu\");\n    /***/\n  },\n\n  /***/\n  1120:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.menu\");\n    /***/\n  },\n\n  /***/\n  1121:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.expansionpanel\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}