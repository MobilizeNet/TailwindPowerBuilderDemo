{"ast":null,"code":"/**-----------------------------------------------------------------------------------------\n* Copyright © 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport * as i0 from '@angular/core';\nimport { Directive, Optional, Component, Input, ContentChild, NgModule } from '@angular/core';\nimport { drawDOM, exportPDF } from '@progress/kendo-drawing';\nimport { saveAs } from '@progress/kendo-file-saver';\nimport { validatePackage } from '@progress/kendo-licensing';\n/**\n * @hidden\n */\n\nconst _c0 = [\"*\"];\nconst packageMetadata = {\n  name: '@progress/kendo-angular-pdf-export',\n  productName: 'Kendo UI for Angular',\n  productCodes: ['KENDOUIANGULAR', 'KENDOUICOMPLETE'],\n  publishDate: 1650441084,\n  version: '',\n  licensingDocsUrl: 'https://www.telerik.com/kendo-angular-ui/my-license/?utm_medium=product&utm_source=kendoangular&utm_campaign=kendo-ui-angular-purchase-license-keys-warning'\n};\nlet PDFExportTemplateDirective = /*#__PURE__*/(() => {\n  class PDFExportTemplateDirective {\n    constructor(templateRef) {\n      this.templateRef = templateRef;\n    }\n\n  }\n\n  PDFExportTemplateDirective.ɵfac = function PDFExportTemplateDirective_Factory(t) {\n    return new (t || PDFExportTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef, 8));\n  };\n\n  PDFExportTemplateDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: PDFExportTemplateDirective,\n    selectors: [[\"\", \"kendoPDFTemplate\", \"\"]]\n  });\n  return PDFExportTemplateDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst FIELDS = ['bottom', 'left', 'right', 'top'];\n/**\n * Represents the Kendo UI PDFMargin component for Angular.\n */\n\nlet PDFExportMarginComponent = /*#__PURE__*/(() => {\n  class PDFExportMarginComponent {\n    /**\n     * @hidden\n     */\n    get options() {\n      const options = {};\n\n      for (let idx = 0; idx < FIELDS.length; idx++) {\n        const field = FIELDS[idx];\n        const value = this[field];\n\n        if (typeof value !== 'undefined') {\n          options[field] = value;\n        }\n      }\n\n      return options;\n    }\n\n  }\n\n  PDFExportMarginComponent.ɵfac = function PDFExportMarginComponent_Factory(t) {\n    return new (t || PDFExportMarginComponent)();\n  };\n\n  PDFExportMarginComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: PDFExportMarginComponent,\n    selectors: [[\"kendo-pdf-export-margin\"]],\n    inputs: {\n      left: \"left\",\n      top: \"top\",\n      right: \"right\",\n      bottom: \"bottom\"\n    },\n    decls: 0,\n    vars: 0,\n    template: function PDFExportMarginComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return PDFExportMarginComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @hidden\n */\n\n\nconst compileTemplate = templateRef => {\n  const context = {};\n  let embeddedView = templateRef.createEmbeddedView(context);\n\n  const result = data => {\n    Object.assign(context, data);\n    embeddedView.detectChanges();\n    const templateWrap = document.createElement('span');\n    embeddedView.rootNodes.forEach(rootNode => {\n      templateWrap.appendChild(rootNode.cloneNode(true));\n    });\n    return templateWrap;\n  };\n\n  result.destroy = () => {\n    embeddedView.destroy();\n    embeddedView = null;\n  };\n\n  return result;\n};\n/**\n * Represents the [Kendo UI PDF Export component for Angular]({% slug overview_pdfexport %}).\n *\n * @example\n * ```ts-preview\n * _@Component({\n *   selector: 'my-app',\n *   template: `\n *     <div class=\"example-config\">\n *       <button kendoButton (click)=\"pdf.saveAs('document.pdf')\">\n *         Save As PDF...\n *       </button>\n *     </div>\n *\n *     <kendo-pdf-export #pdf paperSize=\"A4\" margin=\"2cm\">\n *       Content goes here\n *     </kendo-pdf-export>\n *   `\n * })\n * export class AppComponent {\n * }\n * ```\n */\n\n\nlet PDFExportComponent = /*#__PURE__*/(() => {\n  class PDFExportComponent {\n    constructor(element) {\n      this.element = element;\n      /**\n       * The creator of the PDF document.\n       * @default \"Kendo UI PDF Generator\"\n       */\n\n      this.creator = 'Kendo UI PDF Generator';\n      /**\n       * Specifies the name of the exported PDF file.\n       * @default \"Export.pdf\"\n       */\n\n      this.fileName = 'export.pdf';\n      validatePackage(packageMetadata);\n    }\n\n    get drawMargin() {\n      const marginComponent = this.marginComponent;\n      let margin = this.margin;\n\n      if (marginComponent) {\n        margin = Object.assign(margin || {}, marginComponent.options);\n      }\n\n      return margin;\n    }\n    /**\n     * Saves the content as a PDF file with the specified name.\n     * @param fileName - The name of the exported file.\n     */\n\n\n    saveAs(fileName = this.fileName) {\n      this.save(this.element.nativeElement, fileName);\n    }\n    /**\n     * Exports the content as a `Group` for further processing.\n     *\n     * @return - The root group of the exported scene.\n     */\n\n\n    export() {\n      return this.exportElement(this.element.nativeElement);\n    }\n\n    save(element, fileName) {\n      this.exportElement(element).then(group => this.exportGroup(group, this.pdfOptions())).then(dataUri => this.saveDataUri(dataUri, fileName, this.saveOptions()));\n    }\n\n    exportElement(element) {\n      const promise = this.drawElement(element, this.drawOptions());\n      const cleanup = this.cleanup.bind(this);\n      promise.then(cleanup, cleanup);\n      return promise;\n    }\n\n    cleanup() {\n      if (this.pageTemplate) {\n        this.pageTemplate.destroy();\n        delete this.pageTemplate;\n      }\n    }\n\n    drawOptions() {\n      if (this.pageTemplateDirective) {\n        this.pageTemplate = compileTemplate(this.pageTemplateDirective.templateRef);\n      }\n\n      return {\n        avoidLinks: this.avoidLinks,\n        forcePageBreak: this.forcePageBreak,\n        keepTogether: this.keepTogether,\n        margin: this.drawMargin,\n        paperSize: this.paperSize,\n        landscape: this.landscape,\n        repeatHeaders: this.repeatHeaders,\n        scale: this.scale,\n        template: this.pageTemplate\n      };\n    }\n\n    pdfOptions() {\n      return {\n        autoPrint: this.autoPrint,\n        author: this.author,\n        creator: this.creator,\n        date: this.date,\n        imgDPI: this.imageResolution,\n        keywords: this.keywords,\n        landscape: this.landscape,\n        margin: this.drawMargin,\n        multiPage: true,\n        paperSize: this.paperSize,\n        producer: this.producer,\n        subject: this.subject,\n        title: this.title\n      };\n    }\n\n    saveOptions() {\n      return {\n        forceProxy: this.forceProxy,\n        proxyData: this.proxyData,\n        proxyTarget: this.proxyTarget,\n        proxyURL: this.proxyURL\n      };\n    }\n\n    drawElement(element, options) {\n      return drawDOM(element, options);\n    }\n\n    exportGroup(group, options) {\n      return exportPDF(group, options);\n    }\n\n    saveDataUri(dataUri, fileName, options) {\n      saveAs(dataUri, fileName, options);\n    }\n\n  }\n\n  PDFExportComponent.ɵfac = function PDFExportComponent_Factory(t) {\n    return new (t || PDFExportComponent)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  PDFExportComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: PDFExportComponent,\n    selectors: [[\"kendo-pdf-export\"]],\n    contentQueries: function PDFExportComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, PDFExportTemplateDirective, 5);\n        i0.ɵɵcontentQuery(dirIndex, PDFExportMarginComponent, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.pageTemplateDirective = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.marginComponent = _t.first);\n      }\n    },\n    inputs: {\n      autoPrint: \"autoPrint\",\n      author: \"author\",\n      avoidLinks: \"avoidLinks\",\n      forcePageBreak: \"forcePageBreak\",\n      keepTogether: \"keepTogether\",\n      creator: \"creator\",\n      date: \"date\",\n      imageResolution: \"imageResolution\",\n      fileName: \"fileName\",\n      forceProxy: \"forceProxy\",\n      keywords: \"keywords\",\n      landscape: \"landscape\",\n      margin: \"margin\",\n      paperSize: \"paperSize\",\n      repeatHeaders: \"repeatHeaders\",\n      scale: \"scale\",\n      proxyData: \"proxyData\",\n      proxyURL: \"proxyURL\",\n      proxyTarget: \"proxyTarget\",\n      producer: \"producer\",\n      subject: \"subject\",\n      title: \"title\"\n    },\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 0,\n    template: function PDFExportComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵprojection(1);\n        i0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  return PDFExportComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst COMPONENT_DIRECTIVES = [PDFExportComponent, PDFExportMarginComponent, PDFExportTemplateDirective];\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }}) definition for the PDF Export directive.\n */\n\nlet PDFExportModule = /*#__PURE__*/(() => {\n  class PDFExportModule {}\n\n  PDFExportModule.ɵfac = function PDFExportModule_Factory(t) {\n    return new (t || PDFExportModule)();\n  };\n\n  PDFExportModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: PDFExportModule\n  });\n  PDFExportModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return PDFExportModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { PDFExportComponent, PDFExportMarginComponent, PDFExportModule, PDFExportTemplateDirective, compileTemplate };","map":null,"metadata":{},"sourceType":"module"}