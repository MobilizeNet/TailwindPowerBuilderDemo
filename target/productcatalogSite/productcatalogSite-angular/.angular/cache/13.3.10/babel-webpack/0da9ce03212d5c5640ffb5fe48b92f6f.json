{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(946);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  943:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../../kendo.dataviz.chart\");\n    /***/\n  },\n\n  /***/\n  946:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n    /***********************************************************************\n    * WARNING: this file is auto-generated.  If you change it directly,\n    * your modifications will eventually be lost.  The source code is in\n    * `kendo-charts` repository, you should make your changes there and\n    * run `src-modules/sync.sh` in this repository.\n    */\n\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(943)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function () {\n        window.kendo.dataviz = window.kendo.dataviz || {};\n        var dataviz = kendo.dataviz;\n        var elementStyles = dataviz.elementStyles;\n        var deepExtend = dataviz.deepExtend;\n        var toTime = dataviz.toTime;\n        var datavizConstants = dataviz.constants;\n        var Chart = dataviz.Chart;\n        var drawing = kendo.drawing;\n        var FadeOutAnimation = drawing.Animation.extend({\n          setup: function () {\n            this._initialOpacity = parseFloat(elementStyles(this.element, 'opacity').opacity);\n          },\n          step: function (pos) {\n            elementStyles(this.element, {\n              opacity: String(dataviz.interpolateValue(this._initialOpacity, 0, pos))\n            });\n          },\n          abort: function () {\n            drawing.Animation.fn.abort.call(this);\n            elementStyles(this.element, {\n              display: 'none',\n              opacity: String(this._initialOpacity)\n            });\n          },\n          cancel: function () {\n            drawing.Animation.fn.abort.call(this);\n            elementStyles(this.element, {\n              opacity: String(this._initialOpacity)\n            });\n          }\n        });\n\n        function createDiv(className, style) {\n          var div = document.createElement(\"div\");\n          div.className = className;\n\n          if (style) {\n            div.style.cssText = style;\n          }\n\n          return div;\n        }\n\n        var NavigatorHint = dataviz.Class.extend({\n          init: function (container, chartService, options) {\n            this.options = deepExtend({}, this.options, options);\n            this.container = container;\n            this.chartService = chartService;\n            var padding = elementStyles(container, [\"paddingLeft\", \"paddingTop\"]);\n            this.chartPadding = {\n              top: padding.paddingTop,\n              left: padding.paddingLeft\n            };\n            this.createElements();\n            container.appendChild(this.element);\n          },\n          createElements: function () {\n            var element = this.element = createDiv('k-navigator-hint', 'display: none; position: absolute; top: 1px; left: 1px;');\n            var tooltip = this.tooltip = createDiv('k-tooltip k-chart-tooltip');\n            var scroll = this.scroll = createDiv('k-scroll');\n            tooltip.innerHTML = '&nbsp;';\n            element.appendChild(tooltip);\n            element.appendChild(scroll);\n          },\n          show: function (from, to, bbox) {\n            var ref = this;\n            var element = ref.element;\n            var options = ref.options;\n            var scroll = ref.scroll;\n            var tooltip = ref.tooltip;\n            var middle = dataviz.toDate(toTime(from) + toTime(to - from) / 2);\n            var scrollWidth = bbox.width() * 0.4;\n            var minPos = bbox.center().x - scrollWidth;\n            var maxPos = bbox.center().x;\n            var posRange = maxPos - minPos;\n            var range = options.max - options.min;\n            var scale = posRange / range;\n            var offset = middle - options.min;\n            var text = this.chartService.intl.format(options.format, from, to);\n            var template = dataviz.getTemplate(options);\n            this.clearHideTimeout();\n\n            if (!this._visible) {\n              elementStyles(element, {\n                visibility: 'hidden',\n                display: 'block'\n              });\n              this._visible = true;\n            }\n\n            if (template) {\n              text = template({\n                from: from,\n                to: to\n              });\n            }\n\n            tooltip.innerHTML = text;\n            elementStyles(tooltip, {\n              left: bbox.center().x - tooltip.offsetWidth / 2,\n              top: bbox.y1\n            });\n            var tooltipStyle = elementStyles(tooltip, ['marginTop', 'borderTopWidth', 'height']);\n            elementStyles(scroll, {\n              width: scrollWidth,\n              left: minPos + offset * scale,\n              top: bbox.y1 + tooltipStyle.marginTop + tooltipStyle.borderTopWidth + tooltipStyle.height / 2\n            });\n            elementStyles(element, {\n              visibility: 'visible'\n            });\n          },\n          clearHideTimeout: function () {\n            if (this._hideTimeout) {\n              clearTimeout(this._hideTimeout);\n            }\n\n            if (this._hideAnimation) {\n              this._hideAnimation.cancel();\n            }\n          },\n          hide: function () {\n            var this$1 = this;\n            this.clearHideTimeout();\n            this._hideTimeout = setTimeout(function () {\n              this$1._visible = false;\n              this$1._hideAnimation = new FadeOutAnimation(this$1.element);\n\n              this$1._hideAnimation.setup();\n\n              this$1._hideAnimation.play();\n            }, this.options.hideDelay);\n          },\n          destroy: function () {\n            this.clearHideTimeout();\n\n            if (this.container) {\n              this.container.removeChild(this.element);\n            }\n\n            delete this.container;\n            delete this.chartService;\n            delete this.element;\n            delete this.tooltip;\n            delete this.scroll;\n          }\n        });\n        dataviz.setDefaultOptions(NavigatorHint, {\n          format: \"{0:d} - {1:d}\",\n          hideDelay: 500\n        });\n        var NAVIGATOR_PANE = \"_navigator\";\n        var NAVIGATOR_AXIS = NAVIGATOR_PANE;\n        var constants = {\n          NAVIGATOR_AXIS: NAVIGATOR_AXIS,\n          NAVIGATOR_PANE: NAVIGATOR_PANE\n        };\n        var ZOOM_ACCELERATION = 3;\n        var Navigator = dataviz.Class.extend({\n          init: function (chart) {\n            this.chart = chart;\n            var options = this.options = deepExtend({}, this.options, chart.options.navigator);\n            var select = options.select;\n\n            if (select) {\n              select.from = this.parseDate(select.from);\n              select.to = this.parseDate(select.to);\n            }\n\n            if (!dataviz.defined(options.hint.visible)) {\n              options.hint.visible = options.visible;\n            }\n\n            var obj;\n            this.chartObserver = new dataviz.InstanceObserver(this, (obj = {}, obj[datavizConstants.DRAG] = '_drag', obj[datavizConstants.DRAG_END] = '_dragEnd', obj[datavizConstants.ZOOM] = '_zoom', obj[datavizConstants.ZOOM_END] = '_zoomEnd', obj));\n            chart.addObserver(this.chartObserver);\n          },\n          parseDate: function (value) {\n            return dataviz.parseDate(this.chart.chartService.intl, value);\n          },\n          clean: function () {\n            if (this.selection) {\n              this.selection.destroy();\n              this.selection = null;\n            }\n\n            if (this.hint) {\n              this.hint.destroy();\n              this.hint = null;\n            }\n          },\n          destroy: function () {\n            if (this.chart) {\n              this.chart.removeObserver(this.chartObserver);\n              delete this.chart;\n            }\n\n            this.clean();\n          },\n          redraw: function () {\n            this._redrawSelf();\n\n            this.initSelection();\n          },\n          initSelection: function () {\n            var ref = this;\n            var chart = ref.chart;\n            var options = ref.options;\n            var axis = this.mainAxis();\n            var ref$1 = axis.roundedRange();\n            var min = ref$1.min;\n            var max = ref$1.max;\n            var ref$2 = options.select;\n            var from = ref$2.from;\n            var to = ref$2.to;\n            var mousewheel = ref$2.mousewheel;\n            var axisClone = clone(axis);\n\n            if (axis.categoriesCount() === 0) {\n              return;\n            }\n\n            this.clean(); // \"Freeze\" the selection axis position until the next redraw\n\n            axisClone.box = axis.box;\n            this.selection = new dataviz.Selection(chart, axisClone, {\n              min: min,\n              max: max,\n              from: from || min,\n              to: to || max,\n              mousewheel: dataviz.valueOrDefault(mousewheel, {\n                zoom: \"left\"\n              }),\n              visible: options.visible\n            }, new dataviz.InstanceObserver(this, {\n              selectStart: '_selectStart',\n              select: '_select',\n              selectEnd: '_selectEnd'\n            }));\n\n            if (options.hint.visible) {\n              this.hint = new NavigatorHint(chart.element, chart.chartService, {\n                min: min,\n                max: max,\n                template: dataviz.getTemplate(options.hint),\n                format: options.hint.format\n              });\n            }\n          },\n          setRange: function () {\n            var plotArea = this.chart._createPlotArea(true);\n\n            var axis = plotArea.namedCategoryAxes[NAVIGATOR_AXIS];\n            var ref = axis.roundedRange();\n            var min = ref.min;\n            var max = ref.max;\n            var select = this.options.select || {};\n            var from = select.from || min;\n\n            if (from < min) {\n              from = min;\n            }\n\n            var to = select.to || max;\n\n            if (to > max) {\n              to = max;\n            }\n\n            this.options.select = deepExtend({}, select, {\n              from: from,\n              to: to\n            });\n            this.filterAxes();\n          },\n          _redrawSelf: function (silent) {\n            var plotArea = this.chart._plotArea;\n\n            if (plotArea) {\n              plotArea.redraw(dataviz.last(plotArea.panes), silent);\n            }\n          },\n          redrawSlaves: function () {\n            var chart = this.chart;\n            var plotArea = chart._plotArea;\n            var slavePanes = plotArea.panes.slice(0, -1); // Update the original series and categoryAxis before partial refresh.\n\n            plotArea.srcSeries = chart.options.series;\n            plotArea.options.categoryAxis = chart.options.categoryAxis;\n            plotArea.clearSeriesPointsCache();\n            plotArea.redraw(slavePanes);\n          },\n          _drag: function (e) {\n            var ref = this;\n            var chart = ref.chart;\n            var selection = ref.selection;\n\n            var coords = chart._eventCoordinates(e.originalEvent);\n\n            var navigatorAxis = this.mainAxis();\n            var naviRange = navigatorAxis.roundedRange();\n            var inNavigator = navigatorAxis.pane.box.containsPoint(coords);\n            var axis = chart._plotArea.categoryAxis;\n            var range = e.axisRanges[axis.options.name];\n            var select = this.options.select;\n            var duration;\n\n            if (!range || inNavigator || !selection) {\n              return;\n            }\n\n            if (select.from && select.to) {\n              duration = toTime(select.to) - toTime(select.from);\n            } else {\n              duration = toTime(selection.options.to) - toTime(selection.options.from);\n            }\n\n            var from = dataviz.toDate(dataviz.limitValue(toTime(range.min), naviRange.min, toTime(naviRange.max) - duration));\n            var to = dataviz.toDate(dataviz.limitValue(toTime(from) + duration, toTime(naviRange.min) + duration, naviRange.max));\n            this.options.select = {\n              from: from,\n              to: to\n            };\n\n            if (this.options.liveDrag) {\n              this.filterAxes();\n              this.redrawSlaves();\n            }\n\n            selection.set(from, to);\n            this.showHint(from, to);\n          },\n          _dragEnd: function () {\n            this.filterAxes();\n            this.filter();\n            this.redrawSlaves();\n\n            if (this.hint) {\n              this.hint.hide();\n            }\n          },\n          readSelection: function () {\n            var ref = this;\n            var ref_selection_options = ref.selection.options;\n            var from = ref_selection_options.from;\n            var to = ref_selection_options.to;\n            var select = ref.options.select;\n            select.from = from;\n            select.to = to;\n          },\n          filterAxes: function () {\n            var ref = this;\n            var select = ref.options.select;\n\n            if (select === void 0) {\n              select = {};\n            }\n\n            var chart = ref.chart;\n            var allAxes = chart.options.categoryAxis;\n            var from = select.from;\n            var to = select.to;\n\n            for (var idx = 0; idx < allAxes.length; idx++) {\n              var axis = allAxes[idx];\n\n              if (axis.pane !== NAVIGATOR_PANE) {\n                axis.min = from;\n                axis.max = to;\n              }\n            }\n          },\n          filter: function () {\n            var ref = this;\n            var chart = ref.chart;\n            var select = ref.options.select;\n\n            if (!chart.requiresHandlers([\"navigatorFilter\"])) {\n              return;\n            }\n\n            var mainAxis = this.mainAxis();\n            var args = {\n              from: select.from,\n              to: select.to\n            };\n\n            if (mainAxis.options.type !== 'category') {\n              var axisOptions = new dataviz.DateCategoryAxis(deepExtend({\n                baseUnit: \"fit\"\n              }, chart.options.categoryAxis[0], {\n                categories: [select.from, select.to]\n              }), chart.chartService).options;\n              args.from = dataviz.addDuration(axisOptions.min, -axisOptions.baseUnitStep, axisOptions.baseUnit);\n              args.to = dataviz.addDuration(axisOptions.max, axisOptions.baseUnitStep, axisOptions.baseUnit);\n            }\n\n            this.chart.trigger(\"navigatorFilter\", args);\n          },\n          _zoom: function (e) {\n            var ref = this;\n            var axis = ref.chart._plotArea.categoryAxis;\n            var selection = ref.selection;\n            var ref_options = ref.options;\n            var select = ref_options.select;\n            var liveDrag = ref_options.liveDrag;\n            var mainAxis = this.mainAxis();\n            var delta = e.delta;\n\n            if (!selection) {\n              return;\n            }\n\n            var fromIx = mainAxis.categoryIndex(selection.options.from);\n            var toIx = mainAxis.categoryIndex(selection.options.to);\n\n            var coords = this.chart._eventCoordinates(e.originalEvent);\n\n            e.originalEvent.preventDefault();\n\n            if (Math.abs(delta) > 1) {\n              delta *= ZOOM_ACCELERATION;\n            }\n\n            if (toIx - fromIx > 1) {\n              selection.zoom(delta, coords);\n              this.readSelection();\n            } else {\n              axis.options.min = select.from;\n              select.from = axis.scaleRange(-e.delta * this.chart._mousewheelZoomRate(), coords).min;\n            }\n\n            if (liveDrag) {\n              this.filterAxes();\n              this.redrawSlaves();\n            }\n\n            selection.set(select.from, select.to);\n            this.showHint(this.options.select.from, this.options.select.to);\n          },\n          _zoomEnd: function (e) {\n            this._dragEnd(e);\n          },\n          showHint: function (from, to) {\n            var plotArea = this.chart._plotArea;\n\n            if (this.hint) {\n              this.hint.show(from, to, plotArea.backgroundBox());\n            }\n          },\n          _selectStart: function (e) {\n            return this.chart._selectStart(e);\n          },\n          _select: function (e) {\n            this.showHint(e.from, e.to);\n            return this.chart._select(e);\n          },\n          _selectEnd: function (e) {\n            if (this.hint) {\n              this.hint.hide();\n            }\n\n            this.readSelection();\n            this.filterAxes();\n            this.filter();\n            this.redrawSlaves();\n            return this.chart._selectEnd(e);\n          },\n          mainAxis: function () {\n            var plotArea = this.chart._plotArea;\n\n            if (plotArea) {\n              return plotArea.namedCategoryAxes[NAVIGATOR_AXIS];\n            }\n          },\n          select: function (from, to) {\n            var select = this.options.select;\n\n            if (from && to) {\n              select.from = this.parseDate(from);\n              select.to = this.parseDate(to);\n              this.filterAxes();\n              this.filter();\n              this.redrawSlaves();\n              this.selection.set(from, to);\n            }\n\n            return {\n              from: select.from,\n              to: select.to\n            };\n          }\n        });\n\n        Navigator.setup = function (options, themeOptions) {\n          if (options === void 0) {\n            options = {};\n          }\n\n          if (themeOptions === void 0) {\n            themeOptions = {};\n          }\n\n          if (options.__navi) {\n            return;\n          }\n\n          options.__navi = true;\n          var naviOptions = deepExtend({}, themeOptions.navigator, options.navigator);\n          var panes = options.panes = [].concat(options.panes);\n          var paneOptions = deepExtend({}, naviOptions.pane, {\n            name: NAVIGATOR_PANE\n          });\n\n          if (!naviOptions.visible) {\n            paneOptions.visible = false;\n            paneOptions.height = 0.1;\n          }\n\n          panes.push(paneOptions);\n          Navigator.attachAxes(options, naviOptions);\n          Navigator.attachSeries(options, naviOptions, themeOptions);\n        };\n\n        Navigator.attachAxes = function (options, naviOptions) {\n          var series = naviOptions.series || [];\n          var categoryAxes = options.categoryAxis = [].concat(options.categoryAxis);\n          var valueAxes = options.valueAxis = [].concat(options.valueAxis);\n          var equallySpacedSeries = dataviz.filterSeriesByType(series, datavizConstants.EQUALLY_SPACED_SERIES);\n          var justifyAxis = equallySpacedSeries.length === 0;\n          var base = deepExtend({\n            type: \"date\",\n            pane: NAVIGATOR_PANE,\n            roundToBaseUnit: !justifyAxis,\n            justified: justifyAxis,\n            _collapse: false,\n            majorTicks: {\n              visible: true\n            },\n            tooltip: {\n              visible: false\n            },\n            labels: {\n              step: 1\n            },\n            autoBind: naviOptions.autoBindElements,\n            autoBaseUnitSteps: {\n              minutes: [1],\n              hours: [1, 2],\n              days: [1, 2],\n              weeks: [],\n              months: [1],\n              years: [1]\n            }\n          });\n          var user = naviOptions.categoryAxis;\n          categoryAxes.push(deepExtend({}, base, {\n            maxDateGroups: 200\n          }, user, {\n            name: NAVIGATOR_AXIS,\n            title: null,\n            baseUnit: \"fit\",\n            baseUnitStep: \"auto\",\n            labels: {\n              visible: false\n            },\n            majorTicks: {\n              visible: false\n            }\n          }), deepExtend({}, base, user, {\n            name: NAVIGATOR_AXIS + \"_labels\",\n            maxDateGroups: 20,\n            baseUnitStep: \"auto\",\n            labels: {\n              position: \"\"\n            },\n            plotBands: [],\n            autoBaseUnitSteps: {\n              minutes: []\n            },\n            _overlap: true\n          }), deepExtend({}, base, user, {\n            name: NAVIGATOR_AXIS + \"_ticks\",\n            maxDateGroups: 200,\n            majorTicks: {\n              width: 0.5\n            },\n            plotBands: [],\n            title: null,\n            labels: {\n              visible: false,\n              mirror: true\n            },\n            _overlap: true\n          }));\n          valueAxes.push(deepExtend({\n            name: NAVIGATOR_AXIS,\n            pane: NAVIGATOR_PANE,\n            majorGridLines: {\n              visible: false\n            },\n            visible: false\n          }, naviOptions.valueAxis));\n        };\n\n        Navigator.attachSeries = function (options, naviOptions, themeOptions) {\n          var series = options.series = options.series || [];\n          var navigatorSeries = [].concat(naviOptions.series || []);\n          var seriesColors = themeOptions.seriesColors;\n          var defaults = naviOptions.seriesDefaults;\n\n          for (var idx = 0; idx < navigatorSeries.length; idx++) {\n            series.push(deepExtend({\n              color: seriesColors[idx % seriesColors.length],\n              categoryField: naviOptions.dateField,\n              visibleInLegend: false,\n              tooltip: {\n                visible: false\n              }\n            }, defaults, navigatorSeries[idx], {\n              axis: NAVIGATOR_AXIS,\n              categoryAxis: NAVIGATOR_AXIS,\n              autoBind: naviOptions.autoBindElements\n            }));\n          }\n        };\n\n        function ClonedObject() {}\n\n        function clone(obj) {\n          ClonedObject.prototype = obj;\n          return new ClonedObject();\n        }\n\n        var AUTO_CATEGORY_WIDTH = 28;\n        var StockChart = Chart.extend({\n          applyDefaults: function (options, themeOptions) {\n            var width = dataviz.elementSize(this.element).width || datavizConstants.DEFAULT_WIDTH;\n            var theme = themeOptions;\n            var stockDefaults = {\n              seriesDefaults: {\n                categoryField: options.dateField\n              },\n              axisDefaults: {\n                categoryAxis: {\n                  name: \"default\",\n                  majorGridLines: {\n                    visible: false\n                  },\n                  labels: {\n                    step: 2\n                  },\n                  majorTicks: {\n                    visible: false\n                  },\n                  maxDateGroups: Math.floor(width / AUTO_CATEGORY_WIDTH)\n                }\n              }\n            };\n\n            if (theme) {\n              theme = deepExtend({}, theme, stockDefaults);\n            }\n\n            Navigator.setup(options, theme);\n            Chart.fn.applyDefaults.call(this, options, theme);\n          },\n          _setElementClass: function (element) {\n            dataviz.addClass(element, 'k-chart k-stockchart');\n          },\n          setOptions: function (options) {\n            this.destroyNavigator();\n            Chart.fn.setOptions.call(this, options);\n          },\n          noTransitionsRedraw: function () {\n            var transitions = this.options.transitions;\n            this.options.transitions = false;\n\n            this._fullRedraw();\n\n            this.options.transitions = transitions;\n          },\n          _resize: function () {\n            this.noTransitionsRedraw();\n          },\n          _redraw: function () {\n            var navigator = this.navigator;\n\n            if (!this._dirty() && navigator && navigator.options.partialRedraw) {\n              navigator.redrawSlaves();\n            } else {\n              this._fullRedraw();\n            }\n          },\n          _dirty: function () {\n            var options = this.options;\n            var series = [].concat(options.series, options.navigator.series);\n            var seriesCount = dataviz.grep(series, function (s) {\n              return s && s.visible;\n            }).length;\n            var dirty = this._seriesCount !== seriesCount;\n            this._seriesCount = seriesCount;\n            return dirty;\n          },\n          _fullRedraw: function () {\n            var navigator = this.navigator;\n\n            if (!navigator) {\n              navigator = this.navigator = new Navigator(this);\n              this.trigger(\"navigatorCreated\", {\n                navigator: navigator\n              });\n            }\n\n            navigator.clean();\n            navigator.setRange();\n\n            Chart.fn._redraw.call(this);\n\n            navigator.initSelection();\n          },\n          _trackSharedTooltip: function (coords) {\n            var plotArea = this._plotArea;\n            var pane = plotArea.paneByPoint(coords);\n\n            if (pane && pane.options.name === NAVIGATOR_PANE) {\n              this._unsetActivePoint();\n            } else {\n              Chart.fn._trackSharedTooltip.call(this, coords);\n            }\n          },\n          bindCategories: function () {\n            Chart.fn.bindCategories.call(this);\n            this.copyNavigatorCategories();\n          },\n          copyNavigatorCategories: function () {\n            var definitions = [].concat(this.options.categoryAxis);\n            var categories;\n\n            for (var axisIx = 0; axisIx < definitions.length; axisIx++) {\n              var axis = definitions[axisIx];\n\n              if (axis.name === NAVIGATOR_AXIS) {\n                categories = axis.categories;\n              } else if (categories && axis.pane === NAVIGATOR_PANE) {\n                axis.categories = categories;\n              }\n            }\n          },\n          destroyNavigator: function () {\n            if (this.navigator) {\n              this.navigator.destroy();\n              this.navigator = null;\n            }\n          },\n          destroy: function () {\n            this.destroyNavigator();\n            Chart.fn.destroy.call(this);\n          },\n          _stopChartHandlers: function (e) {\n            var coords = this._eventCoordinates(e);\n\n            var pane = this._plotArea.paneByPoint(coords);\n\n            return Chart.fn._stopChartHandlers.call(this, e) || pane && pane.options.name === NAVIGATOR_PANE;\n          },\n          _toggleDragZoomEvents: function () {\n            if (!this._dragZoomEnabled) {\n              this.element.style.touchAction = \"none\";\n              this._dragZoomEnabled = true;\n            }\n          }\n        });\n        dataviz.setDefaultOptions(StockChart, {\n          dateField: \"date\",\n          axisDefaults: {\n            categoryAxis: {\n              type: \"date\",\n              baseUnit: \"fit\",\n              justified: true\n            },\n            valueAxis: {\n              narrowRange: true,\n              labels: {\n                format: \"C\"\n              }\n            }\n          },\n          navigator: {\n            select: {},\n            seriesDefaults: {\n              markers: {\n                visible: false\n              },\n              tooltip: {\n                visible: true\n              },\n              line: {\n                width: 2\n              }\n            },\n            hint: {},\n            visible: true\n          },\n          tooltip: {\n            visible: true\n          },\n          legend: {\n            visible: false\n          }\n        });\n        kendo.deepExtend(kendo.dataviz, {\n          constants: constants,\n          Navigator: Navigator,\n          NavigatorHint: NavigatorHint,\n          StockChart: StockChart\n        });\n      })();\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}