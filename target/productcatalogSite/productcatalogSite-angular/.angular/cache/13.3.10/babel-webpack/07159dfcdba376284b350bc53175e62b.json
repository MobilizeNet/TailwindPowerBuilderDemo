{"ast":null,"code":"import { Class, deepExtend, elementStyles, getTemplate, setDefaultOptions } from '../common';\nimport { toDate, toTime } from '../date-utils';\nimport FadeOutAnimation from './fade-out-animation';\n\nfunction createDiv(className, style) {\n  const div = document.createElement(\"div\");\n  div.className = className;\n\n  if (style) {\n    div.style.cssText = style;\n  }\n\n  return div;\n}\n\nclass NavigatorHint extends Class {\n  constructor(container, chartService, options) {\n    super();\n    this.options = deepExtend({}, this.options, options);\n    this.container = container;\n    this.chartService = chartService;\n    const padding = elementStyles(container, [\"paddingLeft\", \"paddingTop\"]);\n    this.chartPadding = {\n      top: padding.paddingTop,\n      left: padding.paddingLeft\n    };\n    this.createElements();\n    container.appendChild(this.element);\n  }\n\n  createElements() {\n    const element = this.element = createDiv('k-navigator-hint', 'display: none; position: absolute; top: 1px; left: 1px;');\n    const tooltip = this.tooltip = createDiv('k-tooltip k-chart-tooltip');\n    const scroll = this.scroll = createDiv('k-scroll');\n    tooltip.innerHTML = '&nbsp;';\n    element.appendChild(tooltip);\n    element.appendChild(scroll);\n  }\n\n  show(from, to, bbox) {\n    const {\n      element,\n      options,\n      scroll,\n      tooltip\n    } = this;\n    const middle = toDate(toTime(from) + toTime(to - from) / 2);\n    const scrollWidth = bbox.width() * 0.4;\n    const minPos = bbox.center().x - scrollWidth;\n    const maxPos = bbox.center().x;\n    const posRange = maxPos - minPos;\n    const range = options.max - options.min;\n    const scale = posRange / range;\n    const offset = middle - options.min;\n    let text = this.chartService.intl.format(options.format, from, to);\n    const template = getTemplate(options);\n    this.clearHideTimeout();\n\n    if (!this._visible) {\n      elementStyles(element, {\n        visibility: 'hidden',\n        display: 'block'\n      });\n      this._visible = true;\n    }\n\n    if (template) {\n      text = template({\n        from: from,\n        to: to\n      });\n    }\n\n    tooltip.innerHTML = text;\n    elementStyles(tooltip, {\n      left: bbox.center().x - tooltip.offsetWidth / 2,\n      top: bbox.y1\n    });\n    const tooltipStyle = elementStyles(tooltip, ['marginTop', 'borderTopWidth', 'height']);\n    elementStyles(scroll, {\n      width: scrollWidth,\n      left: minPos + offset * scale,\n      top: bbox.y1 + tooltipStyle.marginTop + tooltipStyle.borderTopWidth + tooltipStyle.height / 2\n    });\n    elementStyles(element, {\n      visibility: 'visible'\n    });\n  }\n\n  clearHideTimeout() {\n    if (this._hideTimeout) {\n      clearTimeout(this._hideTimeout);\n    }\n\n    if (this._hideAnimation) {\n      this._hideAnimation.cancel();\n    }\n  }\n\n  hide() {\n    this.clearHideTimeout();\n    this._hideTimeout = setTimeout(() => {\n      this._visible = false;\n      this._hideAnimation = new FadeOutAnimation(this.element);\n\n      this._hideAnimation.setup();\n\n      this._hideAnimation.play();\n    }, this.options.hideDelay);\n  }\n\n  destroy() {\n    this.clearHideTimeout();\n\n    if (this.container) {\n      this.container.removeChild(this.element);\n    }\n\n    delete this.container;\n    delete this.chartService;\n    delete this.element;\n    delete this.tooltip;\n    delete this.scroll;\n  }\n\n}\n\nsetDefaultOptions(NavigatorHint, {\n  format: \"{0:d} - {1:d}\",\n  hideDelay: 500\n});\nexport default NavigatorHint;","map":null,"metadata":{},"sourceType":"module"}