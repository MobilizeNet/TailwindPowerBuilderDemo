{"ast":null,"code":"import { Constants, Events, Order } from '../Contract';\nimport { Inject } from './Inject';\n\nvar DeltaHandler = function () {\n  function DeltaHandler(inject) {\n    if (inject === void 0) {\n      inject = null;\n    }\n\n    this.inject = inject;\n    this.inject = inject ? inject : Inject.Instance;\n    this.event = this.inject.resolve(Constants.EventAggregator);\n    this.preWorkers = [];\n    this.workers = [];\n    this.postWorkers = [];\n  }\n\n  DeltaHandler.prototype.registerWorker = function (worker) {\n    if (worker) {\n      var selectedArray = void 0;\n\n      switch (worker.Order) {\n        case Order.PRE:\n          selectedArray = this.preWorkers;\n          break;\n\n        case Order.ORD:\n          selectedArray = this.workers;\n          break;\n\n        case Order.POST:\n          selectedArray = this.postWorkers;\n          break;\n      }\n\n      if (selectedArray.indexOf(worker) === -1) {\n        selectedArray.push(worker);\n      }\n    }\n  };\n\n  DeltaHandler.prototype.executeWorkers = function (response) {\n    this.preWorkers.forEach(function (worker) {\n      worker.process(response);\n    });\n    this.workers.forEach(function (worker) {\n      worker.process(response);\n    });\n    this.postWorkers.forEach(function (worker) {\n      worker.process(response);\n    });\n    this.event.publish(Events.ExecWorkQueue);\n  };\n\n  return DeltaHandler;\n}();\n\nexport { DeltaHandler }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVsdGFIYW5kbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL0FwcGxpY2F0aW9uL0RlbHRhSGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFrQkEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQXFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUUxSCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRWxDO0lBRUksc0JBQTZCLE1BQXNCO1FBQXRCLHVCQUFBLEVBQUEsYUFBc0I7UUFBdEIsV0FBTSxHQUFOLE1BQU0sQ0FBZ0I7UUFDL0MsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUNoRCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUM1RCxJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNsQixJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBT0QscUNBQWMsR0FBZCxVQUFlLE1BQW9CO1FBQy9CLElBQUksTUFBTSxFQUFFO1lBQ1IsSUFBSSxhQUFhLFNBQXFCLENBQUM7WUFFdkMsUUFBUSxNQUFNLENBQUMsS0FBSyxFQUFFO2dCQUNsQixLQUFLLEtBQUssQ0FBQyxHQUFHO29CQUNWLGFBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO29CQUNoQyxNQUFNO2dCQUNWLEtBQUssS0FBSyxDQUFDLEdBQUc7b0JBQ1YsYUFBYSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7b0JBQzdCLE1BQU07Z0JBQ1YsS0FBSyxLQUFLLENBQUMsSUFBSTtvQkFDWCxhQUFhLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztvQkFDakMsTUFBTTthQUNiO1lBRUQsSUFBSSxhQUFhLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO2dCQUN0QyxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQzlCO1NBQ0o7SUFDTCxDQUFDO0lBRUQscUNBQWMsR0FBZCxVQUFlLFFBQW1CO1FBQzlCLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFVBQUMsTUFBTTtZQUMzQixNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzdCLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBQyxNQUFNO1lBQ3hCLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDN0IsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFDLE1BQU07WUFDNUIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM3QixDQUFDLENBQUMsQ0FBQztRQUdILElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBQ0wsbUJBQUM7QUFBRCxDQUFDLEFBckRELElBcURDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiogQ29weXJpZ2h0IChDKSBNb2JpbGl6ZS5OZXQgPGluZm9AbW9iaWxpemUubmV0PiAtIEFsbCBSaWdodHMgUmVzZXJ2ZWRcclxuKlxyXG4qIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBNb2JpbGl6ZSBGcmFtZXdvcmtzLCB3aGljaCBpc1xyXG4qIHByb3ByaWV0YXJ5IGFuZCBjb25maWRlbnRpYWwuXHJcbipcclxuKiBOT1RJQ0U6ICBBbGwgaW5mb3JtYXRpb24gY29udGFpbmVkIGhlcmVpbiBpcywgYW5kIHJlbWFpbnNcclxuKiB0aGUgcHJvcGVydHkgb2YgTW9iaWxpemUuTmV0IENvcnBvcmF0aW9uLlxyXG4qIFRoZSBpbnRlbGxlY3R1YWwgYW5kIHRlY2huaWNhbCBjb25jZXB0cyBjb250YWluZWQgaGVyZWluIGFyZVxyXG4qIHByb3ByaWV0YXJ5IHRvIE1vYmlsaXplLk5ldCBDb3Jwb3JhdGlvbiBhbmQgbWF5IGJlIGNvdmVyZWRcclxuKiBieSBVLlMuIFBhdGVudHMsIGFuZCBhcmUgcHJvdGVjdGVkIGJ5IHRyYWRlIHNlY3JldCBvciBjb3B5cmlnaHQgbGF3LlxyXG4qIERpc3NlbWluYXRpb24gb2YgdGhpcyBpbmZvcm1hdGlvbiBvciByZXByb2R1Y3Rpb24gb2YgdGhpcyBtYXRlcmlhbFxyXG4qIGlzIHN0cmljdGx5IGZvcmJpZGRlbiB1bmxlc3MgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uIGlzIG9idGFpbmVkXHJcbiogZnJvbSBNb2JpbGl6ZS5OZXQgQ29ycG9yYXRpb24uXHJcbipcclxuKiBUaGlzIGZpbGUgaXMgc3ViamVjdCB0byB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMgZGVmaW5lZCBpblxyXG4qIGZpbGUgJ0xJQ0VOU0UudHh0Jywgd2hpY2ggaXMgcGFydCBvZiB0aGlzIHNvdXJjZSBjb2RlIHBhY2thZ2UuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5pbXBvcnQgeyBDb25zdGFudHMsIEV2ZW50cywgSURlbHRhSGFuZGxlciwgSURlbHRhV29ya2VyLCBJRXZlbnRBZ2dyZWdhdG9yLCBJSW5qZWN0LCBJUmVzcG9uc2UsIE9yZGVyIH0gZnJvbSAnLi4vQ29udHJhY3QnO1xyXG5cclxuaW1wb3J0IHsgSW5qZWN0IH0gZnJvbSAnLi9JbmplY3QnO1xyXG5cclxuZXhwb3J0IGNsYXNzIERlbHRhSGFuZGxlciBpbXBsZW1lbnRzIElEZWx0YUhhbmRsZXIge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgaW5qZWN0OiBJSW5qZWN0ID0gbnVsbCkge1xyXG4gICAgICAgIHRoaXMuaW5qZWN0ID0gaW5qZWN0ID8gaW5qZWN0IDogSW5qZWN0Lkluc3RhbmNlO1xyXG4gICAgICAgIHRoaXMuZXZlbnQgPSB0aGlzLmluamVjdC5yZXNvbHZlKENvbnN0YW50cy5FdmVudEFnZ3JlZ2F0b3IpO1xyXG4gICAgICAgIHRoaXMucHJlV29ya2VycyA9IFtdO1xyXG4gICAgICAgIHRoaXMud29ya2VycyA9IFtdO1xyXG4gICAgICAgIHRoaXMucG9zdFdvcmtlcnMgPSBbXTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHByZVdvcmtlcnM6IEFycmF5PElEZWx0YVdvcmtlcj47XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHdvcmtlcnM6IEFycmF5PElEZWx0YVdvcmtlcj47XHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHBvc3RXb3JrZXJzOiBBcnJheTxJRGVsdGFXb3JrZXI+O1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBldmVudDogSUV2ZW50QWdncmVnYXRvcjtcclxuXHJcbiAgICByZWdpc3Rlcldvcmtlcih3b3JrZXI6IElEZWx0YVdvcmtlcik6IHZvaWQge1xyXG4gICAgICAgIGlmICh3b3JrZXIpIHtcclxuICAgICAgICAgICAgbGV0IHNlbGVjdGVkQXJyYXk6IEFycmF5PElEZWx0YVdvcmtlcj47XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKHdvcmtlci5PcmRlcikge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBPcmRlci5QUkU6XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRBcnJheSA9IHRoaXMucHJlV29ya2VycztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgT3JkZXIuT1JEOlxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkQXJyYXkgPSB0aGlzLndvcmtlcnM7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIE9yZGVyLlBPU1Q6XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRBcnJheSA9IHRoaXMucG9zdFdvcmtlcnM7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZEFycmF5LmluZGV4T2Yod29ya2VyKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkQXJyYXkucHVzaCh3b3JrZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4ZWN1dGVXb3JrZXJzKHJlc3BvbnNlOiBJUmVzcG9uc2UpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnByZVdvcmtlcnMuZm9yRWFjaCgod29ya2VyKSA9PiB7XHJcbiAgICAgICAgICAgIHdvcmtlci5wcm9jZXNzKHJlc3BvbnNlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy53b3JrZXJzLmZvckVhY2goKHdvcmtlcikgPT4ge1xyXG4gICAgICAgICAgICB3b3JrZXIucHJvY2VzcyhyZXNwb25zZSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMucG9zdFdvcmtlcnMuZm9yRWFjaCgod29ya2VyKSA9PiB7XHJcbiAgICAgICAgICAgIHdvcmtlci5wcm9jZXNzKHJlc3BvbnNlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gZXhlY3V0ZSB0aGUgcmVnaXN0ZXJlZCB3b3JrIGFmdGVyIHRoZSBkZWx0YXMgaGF2ZSBiZWVuIHByb2Nlc3NlZFxyXG4gICAgICAgIHRoaXMuZXZlbnQucHVibGlzaChFdmVudHMuRXhlY1dvcmtRdWV1ZSk7XHJcbiAgICB9XHJcbn1cclxuIl19","map":null,"metadata":{},"sourceType":"module"}