{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1705);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  20:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.core\");\n    /***/\n  },\n\n  /***/\n  1705:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(20), __webpack_require__(1706)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function (kendo) {\n        // jshint laxbreak: true\n        var CellRef = kendo.spreadsheet.CellRef;\n        var RangeRef = kendo.spreadsheet.RangeRef;\n        var UnionRef = kendo.spreadsheet.UnionRef;\n        var Rectangle = kendo.Class.extend({\n          init: function Rectangle(left, top, width, height) {\n            this.left = left;\n            this.top = top;\n            this.width = width;\n            this.height = height;\n            this.right = this.left + this.width;\n            this.bottom = this.top + this.height;\n          },\n          offset: function (left, top) {\n            return new Rectangle(this.left + left, this.top + top, this.width, this.height);\n          },\n          resize: function (width, height) {\n            return new Rectangle(this.left, this.top, this.width + width, this.height + height);\n          },\n          intersects: function (x, y) {\n            if (x instanceof Rectangle) {\n              return this.intersectsRect(x);\n            }\n\n            return this.left < x && x < this.left + this.width && this.top < y && y < this.top + this.height;\n          },\n          intersectsRect: function (b) {\n            var a = this;\n            return a.left <= b.right && b.left <= a.right && a.top <= b.bottom && b.top <= a.bottom;\n          },\n          toDiv: function (className) {\n            return kendo.dom.element(\"div\", {\n              className: className,\n              style: {\n                width: this.width + \"px\",\n                height: this.height + \"px\",\n                top: this.top + \"px\",\n                left: this.left + \"px\"\n              }\n            });\n          }\n        }); // XXX: can we use ES5 yet? :-/\n        //\n        // Object.defineProperty(Rectangle.prototype, \"right\", {\n        //     get() {\n        //         return this.left + this.width;\n        //     }\n        // });\n        // Object.defineProperty(Rectangle.prototype, \"bottom\", {\n        //     get() {\n        //         return this.top + this.height;\n        //     }\n        // });\n\n        var Grid = kendo.Class.extend({\n          init: function (rows, columns, rowCount, columnCount, headerHeight, headerWidth) {\n            this.rowCount = rowCount;\n            this.columnCount = columnCount;\n            this._columns = columns;\n            this._rows = rows;\n            this._headerHeight = headerHeight;\n            this._headerWidth = headerWidth;\n          },\n          _resize: function (new_rows, new_cols) {\n            this.rowCount = new_rows;\n            this.columnCount = new_cols;\n          },\n          isAxis: function (ref) {\n            ref = ref.toRangeRef();\n            var topLeft = ref.topLeft;\n            var bottomRight = ref.bottomRight;\n            return topLeft.row === 0 && bottomRight.row === this.rowCount - 1 || topLeft.col === 0 && bottomRight.col === this.columnCount - 1;\n          },\n          width: function (start, end) {\n            return this._columns.sum(start, end);\n          },\n          height: function (start, end) {\n            return this._rows.sum(start, end);\n          },\n          totalHeight: function () {\n            return this._rows.total + this._headerHeight;\n          },\n          totalWidth: function () {\n            return this._columns.total + this._headerWidth;\n          },\n          index: function (row, column) {\n            return column * this.rowCount + row;\n          },\n          cellRef: function (index) {\n            return new CellRef(index % this.rowCount, index / this.rowCount >> 0);\n          },\n          rowRef: function (row) {\n            return new RangeRef(new CellRef(row, 0), new CellRef(row, this.columnCount - 1));\n          },\n          colRef: function (col) {\n            return new RangeRef(new CellRef(0, col), new CellRef(this.rowCount - 1, col));\n          },\n          cellRefIndex: function (ref) {\n            return this.index(ref.row, ref.col);\n          },\n          normalize: function (ref) {\n            if (ref instanceof RangeRef) {\n              return new RangeRef(this.normalize(ref.topLeft), this.normalize(ref.bottomRight)).setSheet(ref.sheet, ref.hasSheet());\n            }\n\n            if (ref instanceof UnionRef) {\n              return ref.map(function (ref) {\n                return this.normalize(ref);\n              }, this);\n            }\n\n            if (ref instanceof CellRef) {\n              ref = ref.clone();\n              ref.col = Math.max(0, Math.min(this.columnCount - 1, ref.col));\n              ref.row = Math.max(0, Math.min(this.rowCount - 1, ref.row));\n            }\n\n            return ref;\n          },\n          rectangle: function (ref) {\n            var topLeft = this.normalize(ref.topLeft);\n            var bottomRight = this.normalize(ref.bottomRight);\n            return new Rectangle(this.width(0, topLeft.col - 1), this.height(0, topLeft.row - 1), this.width(topLeft.col, bottomRight.col), this.height(topLeft.row, bottomRight.row));\n          },\n          pane: function (options) {\n            return new PaneGrid(new kendo.spreadsheet.PaneAxis(this._rows, options.row, options.rowCount, this._headerHeight), new kendo.spreadsheet.PaneAxis(this._columns, options.column, options.columnCount, this._headerWidth), this);\n          },\n          rangeDimensions: function (rangeRef) {\n            return {\n              rows: this._rows.values.iterator(rangeRef.topLeft.row, rangeRef.bottomRight.row),\n              columns: this._columns.values.iterator(rangeRef.topLeft.col, rangeRef.bottomRight.col)\n            };\n          },\n          forEach: function (ref, callback) {\n            var topLeft = this.normalize(ref.topLeft);\n            var bottomRight = this.normalize(ref.bottomRight);\n\n            for (var ci = topLeft.col; ci <= bottomRight.col; ci++) {\n              for (var ri = topLeft.row; ri <= bottomRight.row; ri++) {\n                callback(new CellRef(ri, ci));\n              }\n            }\n          },\n          trim: function (ref, property) {\n            var topLeft = this.normalize(ref.topLeft);\n            var bottomRight = this.normalize(ref.bottomRight);\n            var bottomRightRow = topLeft.row;\n            var bottomRightCol = topLeft.col;\n\n            for (var ci = topLeft.col; ci <= bottomRight.col; ci++) {\n              var start = this.index(topLeft.row, ci);\n              var end = this.index(bottomRight.row, ci);\n              var values = property.tree.intersecting(start, end);\n\n              if (values.length) {\n                var cell = this.cellRef(values[values.length - 1].end);\n                bottomRightRow = Math.max(bottomRightRow, cell.row);\n                bottomRightCol = ci;\n              }\n            }\n\n            return new RangeRef(ref.topLeft, new CellRef(Math.min(bottomRightRow, ref.bottomRight.row), bottomRightCol));\n          }\n        });\n        var PaneGrid = kendo.Class.extend({\n          init: function (rows, columns, grid) {\n            this.rows = rows;\n            this.columns = columns;\n            this._grid = grid;\n            this.headerHeight = rows.headerSize;\n            this.headerWidth = columns.headerSize;\n            this.hasRowHeader = columns.hasHeader;\n            this.hasColumnHeader = rows.hasHeader;\n          },\n          refresh: function (width, height) {\n            this.columns.viewSize(width);\n            this.rows.viewSize(height);\n            var x = this.columns.paneSegment();\n            var y = this.rows.paneSegment();\n            this.left = x.offset;\n            this.top = y.offset;\n            this.right = x.offset + x.length;\n            this.bottom = y.offset + y.length;\n            this.style = {\n              top: y.offset + \"px\",\n              left: x.offset + \"px\",\n              height: y.length + \"px\",\n              width: x.length + \"px\"\n            };\n          },\n          view: function (left, top) {\n            var rows = this.rows.visible(top);\n            var columns = this.columns.visible(left);\n            return {\n              rows: rows,\n              columns: columns,\n              rowOffset: rows.offset,\n              columnOffset: columns.offset,\n              mergedCellLeft: columns.start,\n              mergedCellTop: rows.start,\n              ref: new RangeRef(new CellRef(rows.values.start, columns.values.start), new CellRef(rows.values.end, columns.values.end))\n            };\n          },\n          contains: function (ref) {\n            return this.rows.contains(ref.topLeft.row, ref.bottomRight.row) && this.columns.contains(ref.topLeft.col, ref.bottomRight.col);\n          },\n          index: function (row, column) {\n            return this._grid.index(row, column);\n          },\n          boundingRectangle: function (ref) {\n            return this._grid.rectangle(ref);\n          },\n          cellRefIndex: function (ref) {\n            return this._grid.cellRefIndex(ref);\n          },\n          scrollBoundaries: function (cell) {\n            var position = this.boundingRectangle(cell);\n            var boundaries = {\n              top: Math.max(0, position.top - this.top + (this.hasColumnHeader ? 0 : this.headerHeight)),\n              left: Math.max(0, position.left - this.left + (this.hasRowHeader ? 0 : this.headerWidth)),\n              right: position.right - this.columns._viewSize + this.headerWidth,\n              bottom: position.bottom - this.rows._viewSize + this.headerHeight\n            };\n            var widthCompensation = this.columns.defaultValue / 2;\n            var heightCompensation = this.rows.defaultValue / 2;\n            boundaries.scrollTop = boundaries.top - heightCompensation;\n            boundaries.scrollBottom = boundaries.bottom + heightCompensation;\n            boundaries.scrollLeft = boundaries.left - widthCompensation;\n            boundaries.scrollRight = boundaries.right + widthCompensation;\n            return boundaries;\n          }\n        });\n        kendo.spreadsheet.Grid = Grid;\n        kendo.spreadsheet.PaneGrid = PaneGrid;\n        kendo.spreadsheet.Rectangle = Rectangle;\n      })(kendo);\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1706:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./references\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}