{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1478);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1063:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.data\");\n    /***/\n  },\n\n  /***/\n  1478:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1479), __webpack_require__(1480), __webpack_require__(1481), __webpack_require__(1482), __webpack_require__(1483), __webpack_require__(1484), __webpack_require__(1485), __webpack_require__(1063)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"taskboard\",\n        name: \"TaskBoard\",\n        category: \"web\",\n        description: \"The TaskBoard widget displays cards.\",\n        depends: [\"data\", \"sortable\", \"dialog\", \"form\", \"menu\", \"toolbar\"]\n      };\n      var TaskBoardStyles = {\n        wrapper: \"k-taskboard\",\n        header: \"k-taskboard-header\",\n        content: \"k-taskboard-content\",\n        toolbar: \"k-taskboard-toolbar k-toolbar-flat\",\n        columnsContainer: \"k-taskboard-columns-container\",\n        card: \"k-taskboard-card\",\n        column: \"k-taskboard-column\",\n        selected: \"k-state-selected\",\n        disabled: \"k-state-disabled\",\n        ignoreDrag: \"k-taskboard-drag-ignore\"\n      };\n\n      var preventDefault = function (ev) {\n        ev.preventDefault();\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n            DataSource = kendo.data.DataSource,\n            extend = $.extend,\n            ui = kendo.ui,\n            isArray = Array.isArray,\n            isPlainObject = $.isPlainObject,\n            GENERIC = \"_generic\",\n            DOT = \".\",\n            MOVE = \"move\",\n            MOVE_START = \"moveStart\",\n            MOVE_END = \"moveEnd\",\n            SELECT = \"select\",\n            EXECUTE = \"execute\",\n            ACTION = \"action\",\n            CHANGE = \"change\",\n            ERROR = \"change\",\n            DATABINDING = \"dataBinding\",\n            DATABOUND = \"dataBound\",\n            EDIT_CARD = \"editCard\",\n            SAVE_CARD = \"saveCard\",\n            DELETE_CARD = \"deleteCard\",\n            EDIT_COLUMN = \"editColumn\",\n            SAVE_COLUMN = \"saveColumn\",\n            DELETE_COLUMN = \"deleteColumn\",\n            COLUMNSDATABINDING = \"columnsDataBinding\",\n            COLUMNSDATABOUND = \"columnsDataBound\";\n        var TaskBoard = Widget.extend({\n          init: function (element, options) {\n            var that = this;\n            Widget.fn.init.call(that, element, options);\n            element = that.wrapper = that.element;\n            that._sortableIdentifier = that.element.attr(\"id\") || kendo.guid();\n\n            that._wrapper();\n\n            that._columnsDataSource();\n\n            that._initResources();\n\n            that._dataSource();\n\n            that._initToolbar();\n\n            that._initCardMenu();\n\n            that._initKeyboard();\n\n            if (that.options.autoBind) {\n              that.load();\n            }\n\n            kendo.notify(that);\n          },\n          events: [MOVE, MOVE_START, MOVE_END, CHANGE, EXECUTE, SELECT, DATABINDING, DATABOUND, COLUMNSDATABINDING, COLUMNSDATABOUND, EDIT_CARD, SAVE_CARD, DELETE_CARD, EDIT_COLUMN, SAVE_COLUMN, DELETE_COLUMN],\n          options: {\n            name: \"TaskBoard\",\n            autoBind: true,\n            height: 600,\n            width: \"100%\",\n            toolbar: true,\n            dataStatusField: \"status\",\n            dataTitleField: \"title\",\n            dataDescriptionField: \"description\",\n            dataCategoryField: \"category\",\n            dataOrderField: null,\n            cardMenu: true,\n            editable: true,\n            selectable: true,\n            reorderable: true,\n            previewPane: true,\n            search: {\n              operator: \"contains\"\n            },\n            dataSource: [],\n            columns: [],\n            columnSettings: {\n              dataStatusField: \"status\",\n              dataTextField: \"text\",\n              dataOrderField: null\n            },\n            resources: [],\n            messages: {\n              edit: \"Edit\",\n              createNewCard: \"Create new card\",\n              create: \"Create\",\n              search: \"Search\",\n              previewCard: \"Preview card\",\n              addCard: \"Add card\",\n              editCard: \"Edit card\",\n              deleteCard: \"Delete Card\",\n              addColumn: \"Add column\",\n              editColumn: \"Edit column\",\n              deleteColumn: \"Delete column\",\n              close: \"Close\",\n              cancel: \"Cancel\",\n              \"delete\": \"Delete\",\n              saveChanges: \"Save changes\",\n              title: \"Title:\",\n              description: \"Description:\",\n              newColumn: \"New column\",\n              deleteColumnConfirm: \"Are you sure you want to delete this column?\",\n              deleteCardConfirm: \"Are you sure you want to delete this card?\"\n            }\n          },\n          items: function () {\n            var that = this,\n                result = $([]);\n\n            for (var key in that._columns) {\n              $.merge(result, that._columns[key].cards());\n            }\n\n            return result;\n          },\n          itemsByStatus: function (status) {\n            var that = this,\n                result = that._getColumn(status).cards();\n\n            return result;\n          },\n          itemsByColumn: function (columnElm) {\n            var that = this,\n                column = that._getColumnByElement(columnElm);\n\n            if (column) {\n              return column.cards();\n            }\n          },\n          load: function () {\n            var that = this,\n                fetchPromises = [];\n\n            that._progress(true);\n\n            fetchPromises.push(that.columnsDataSource.fetch());\n\n            for (var key in that.resources) {\n              fetchPromises.push(that.resources[key].dataSource.fetch());\n            }\n\n            $.when.apply(null, fetchPromises).then(that.dataSource.read.bind(that.dataSource));\n          },\n          dataItem: function (cardElm) {\n            var that = this,\n                dataSource = that.dataSource,\n                uid;\n            cardElm = $(cardElm);\n            uid = cardElm.attr(kendo.attr(\"uid\"));\n            return dataSource.getByUid(uid);\n          },\n          columnDataItem: function (columnElm) {\n            var that = this,\n                columnsDataSource = that.columnsDataSource,\n                uid;\n            columnElm = $(columnElm);\n            uid = columnElm.attr(kendo.attr(\"uid\"));\n            return columnsDataSource.getByUid(uid);\n          },\n          columns: function () {\n            var that = this,\n                result = $([]);\n\n            for (var key in that._columns) {\n              $.merge(result, that._columns[key].element);\n            }\n\n            return result;\n          },\n          columnByStatus: function (status) {\n            return this._getColumn(status).element;\n          },\n          select: function (card, toggle) {\n            var that = this;\n\n            if (!card) {\n              return that.element.find(DOT + TaskBoard.styles.card + DOT + TaskBoard.styles.selected).eq(0);\n            }\n\n            card = $(card);\n            toggle = toggle !== false;\n\n            if (toggle) {\n              that.element.find(DOT + TaskBoard.styles.card + DOT + TaskBoard.styles.selected).removeClass(TaskBoard.styles.selected);\n            }\n\n            card.toggleClass(TaskBoard.styles.selected, toggle);\n          },\n          previewCard: function (cardElement) {\n            var that = this,\n                options = that.options,\n                args = that._extendExecArgs({\n              target: cardElement\n            });\n\n            if (options.previewPane) {\n              that._openPane(extend({\n                pane: \"Preview\"\n              }, args));\n            }\n          },\n          editCard: function (cardElement) {\n            var that = this,\n                options = that.options,\n                args;\n            cardElement = $(cardElement);\n            args = that._extendExecArgs({\n              target: cardElement\n            });\n\n            if (options.editable) {\n              that._openPane(extend({\n                pane: \"Edit\"\n              }, args));\n            }\n          },\n          saveCard: function () {\n            var that = this;\n            that.dataSource.sync();\n          },\n          deleteCard: function (cardElement) {\n            var that = this,\n                card = that.dataItem(cardElement);\n            that.dataSource.remove(card);\n            that.dataSource.sync();\n          },\n          addCard: function (dataItem) {\n            var that = this,\n                options = that.options,\n                args = {\n              card: dataItem\n            };\n\n            if (options.editable) {\n              that._openPane(extend({\n                pane: \"Create\"\n              }, args));\n            }\n          },\n          addColumn: function (index, data) {\n            var that = this,\n                columnSettings = extend(true, {}, that.options.columnSettings, {\n              messages: that.options.messages,\n              states: that._buildStates(),\n              sortableIdentifier: that._sortableIdentifier\n            }),\n                newColumn,\n                model,\n                column;\n\n            if (isNaN(index) && !data) {\n              data = index;\n              index = null;\n            }\n\n            model = that.columnsDataSource._createNewModel(data);\n            index = isNaN(index) || index === null ? that.columnsDataSource.data().length : index;\n            column = that.columns().eq(index);\n            that.columnsDataSource.insert(index, model);\n            newColumn = new ui.taskboard.NewColumn(columnSettings, model);\n\n            if (isNaN(index) || !column.length) {\n              that.columnsContainer.append(newColumn.element);\n            } else {\n              column.before(newColumn.element);\n            }\n\n            newColumn.bind(ACTION, that.executeCommand.bind(that));\n          },\n          editColumn: function (columnElement) {\n            var that = this;\n            columnElement = $(columnElement);\n\n            that._getColumnByElement(columnElement).edit();\n          },\n          saveColumn: function () {\n            var that = this;\n            that.columnsDataSource.sync();\n          },\n          deleteColumn: function (columnElement) {\n            var that = this,\n                column = that.columnDataItem(columnElement);\n            that.columnsDataSource.remove(column);\n            that.columnsDataSource.sync();\n          },\n          registerShortcut: function (selector, shortcut, options) {\n            var that = this;\n            that.keyboardManager.registerShortcut(selector, shortcut, options);\n          },\n          enable: function (cardElement, toggle) {\n            cardElement = $(cardElement);\n            cardElement.toggleClass(TaskBoard.styles.disabled, toggle === false);\n            cardElement.attr(\"aria-disabled\", toggle === false);\n          },\n          enableByColumn: function (columnElement, toggle) {\n            var that = this;\n            columnElement = $(columnElement);\n            that.itemsByColumn(columnElement).each(function (index, card) {\n              that.enable(card, toggle);\n            });\n          },\n          readOnly: function (cardElement, toggle) {\n            cardElement = $(cardElement);\n            toggle = toggle !== false;\n            cardElement.find(\"[\" + kendo.attr(\"command\") + \"]\").toggleClass(TaskBoard.styles.disabled, toggle);\n            cardElement.find(\"a,button\").toggleClass(TaskBoard.styles.disabled, toggle);\n            cardElement.toggleClass(TaskBoard.styles.ignoreDrag, toggle);\n            cardElement.attr(\"aria-readonly\", toggle);\n          },\n          readOnlyByColumn: function (columnElement, toggle) {\n            var that = this;\n            columnElement = $(columnElement);\n            that.itemsByColumn(columnElement).each(function (index, card) {\n              that.readOnly(card, toggle);\n            });\n          },\n          setDataSource: function (dataSource) {\n            var that = this;\n            that.options.dataSource = dataSource;\n\n            that._dataSource();\n\n            if (that.options.autoBind) {\n              that.dataSource.read();\n            }\n          },\n          setColumnsDataSource: function (dataSource) {\n            var that = this;\n            that.options.columns = dataSource;\n\n            that._columnsDataSource();\n\n            if (that.options.autoBind) {\n              that.columnsDataSource.fetch(function () {\n                that._renderCards(that.dataSource.view());\n              });\n            }\n          },\n          _getColumn: function (status) {\n            return this._columns[status];\n          },\n          _getColumnByElement: function (columnElement) {\n            var that = this;\n            columnElement = $(columnElement);\n\n            for (var key in that._columns) {\n              if (that._columns[key].element[0] === columnElement[0]) {\n                return that._columns[key];\n              }\n            }\n          },\n          _openPane: function (options) {\n            var that = this,\n                pane = new ui.taskboard.panes[options.pane](that, extend({}, that.options, {\n              states: that._buildStates()\n            }), options.card, that.resources, options.column),\n                focusableElement,\n                keyboardManager;\n\n            if (that.pane) {\n              that._closePane();\n            }\n\n            that.pane = pane;\n            that.content.after(that.pane.element);\n            that.content.css(\"margin-right\", that.pane.element.outerWidth() - parseInt(that.content.css(\"paddingRight\"), 10));\n            that.pane.bind(ACTION, that.executeCommand.bind(that));\n            that.pane.keyboardManager = keyboardManager = new ui.taskboard.KeyboardManager(that.pane.element);\n            keyboardManager.bind(ACTION, that.executeCommand.bind(that));\n            keyboardManager.registerShortcut(\"*\", {\n              keyCode: kendo.keys.ESC\n            }, {\n              command: \"ClosePaneCommand\"\n            });\n            keyboardManager.registerShortcut(\"*\", {\n              keyCode: kendo.keys.ENTER\n            }, {\n              command: \"SaveChangesCommand\",\n              options: {\n                card: that.pane._dataItem\n              }\n            });\n            focusableElement = that.pane.element.find(\"input\");\n\n            if (!focusableElement.length) {\n              focusableElement = that.pane.element.find(\"button\");\n            }\n\n            setTimeout(function () {\n              focusableElement.eq(0).trigger(\"focus\");\n            }, 0);\n          },\n          _closePane: function () {\n            var that = this;\n\n            if (that.pane) {\n              that.pane.keyboardManager.destroy();\n              that.pane.unbind(ACTION);\n              that.pane.destroy();\n              delete that.pane;\n              that.content.css(\"margin-right\", \"\");\n            }\n          },\n          _wrapper: function () {\n            var that = this,\n                options = that.options,\n                styles = TaskBoard.styles,\n                headerElm = \"<div class='\" + styles.header + \"'></div>\",\n                contentElm = \"<div class='\" + styles.content + \"'></div>\",\n                colsContainer = \"<div class='\" + styles.columnsContainer + \"'></div>\";\n            that.element.addClass(styles.wrapper).width(options.width).height(options.height).attr(\"role\", \"application\");\n            that.header = $(headerElm).appendTo(that.element);\n            that.content = $(contentElm).appendTo(that.element);\n            that.columnsContainer = $(colsContainer).appendTo(that.content);\n          },\n          _initToolbar: function () {\n            var that = this,\n                styles = TaskBoard.styles,\n                options = that.options,\n                toolbarElm = $(\"<div class='\" + styles.toolbar + \"'></div>\"),\n                toolbarOptions = isArray(options.toolbar) ? {\n              items: options.toolbar\n            } : options.toolbar;\n\n            if (options.toolbar === false) {\n              return;\n            }\n\n            toolbarOptions = extend({}, toolbarOptions, {\n              taskboard: this,\n              messages: options.messages,\n              action: that.executeCommand.bind(that),\n              states: that._buildStates()\n            });\n            that.header.append(toolbarElm);\n            that.toolbar = new ui.taskboard.ToolBar(toolbarElm, toolbarOptions);\n          },\n          _buildStates: function () {\n            var that = this;\n            return {\n              isEditable: that._isEditable(),\n              isReorderable: that._isReorderable(),\n              isSelectable: that._isSelectable(),\n              isReadOnly: !that._isReorderable() && !that._isEditable(),\n              isDisabled: !that._isReorderable() && !that._isEditable() && !that._isSelectable(),\n              isSearchable: that._isSearchable(),\n              notLocalColumns: !(that.columnsDataSource.transport instanceof kendo.data.LocalTransport),\n              isRtl: kendo.support.isRtl(that.wrapper)\n            };\n          },\n          _isSearchable: function () {\n            return !!this.options.search;\n          },\n          _isEditable: function () {\n            return !!this.options.editable;\n          },\n          _isReorderable: function () {\n            return !!this.options.reorderable;\n          },\n          _isSelectable: function () {\n            return !!this.options.selectable;\n          },\n          executeCommand: function (args) {\n            var that = this,\n                commandName = args.command,\n                commandOptions = extend({\n              taskboard: this\n            }, isPlainObject(args.options) ? that._extendExecArgs(args.options) : {\n              value: args.options\n            }),\n                command = ui.taskboard.commands[commandName] && new ui.taskboard.commands[commandName](commandOptions);\n\n            if (!that.trigger(EXECUTE, args)) {\n              if (command) {\n                command.exec();\n              } else {\n                window.console.warn(kendo.format(\"Trying to use {0} command, but such is not available in the kendo.ui.taskboard.commands namespace!\", commandName));\n              }\n            }\n          },\n          _extendExecArgs: function (args) {\n            var that = this,\n                target = args.draggableEvent ? args.item : args.target,\n                columnElm,\n                cardElm,\n                columnDataItem,\n                cardDataItem;\n\n            if (args.card) {\n              target = that.items().filter(function (idx, elm) {\n                return $(elm).attr(kendo.attr(\"uid\")) === args.card.get(\"uid\");\n              });\n            }\n\n            if (!target || !(target && target.length)) {\n              return args;\n            }\n\n            columnElm = args.columnElement || (target.is(DOT + TaskBoard.styles.column) ? target : target.parents(DOT + TaskBoard.styles.column));\n            columnDataItem = that.columnsDataSource.getByUid(columnElm.data(kendo.ns + \"uid\"));\n            cardElm = target.is(DOT + TaskBoard.styles.card) ? target : target.closest(DOT + TaskBoard.styles.card);\n            cardDataItem = that.dataSource.getByUid(cardElm.data(kendo.ns + \"uid\"));\n            return extend(args, {\n              card: cardDataItem,\n              cardElement: cardElm.length ? cardElm : undefined,\n              column: columnDataItem,\n              columnElement: columnElm.length ? columnElm : undefined\n            });\n          },\n          _select: function (card, toggle) {\n            var that = this;\n\n            if (toggle === null) {\n              toggle = true;\n            }\n\n            if (!that.trigger(SELECT, {\n              card: card\n            })) {\n              that.select(card, toggle);\n              that.previewCard(card);\n            }\n          },\n          _columnsDataSource: function () {\n            var that = this,\n                options = that.options,\n                columnSettings = options.columnSettings,\n                columnsDataSource = options.columns;\n            columnsDataSource = isArray(columnsDataSource) ? {\n              data: columnsDataSource\n            } : columnsDataSource;\n\n            if (columnSettings.dataOrderField && !columnsDataSource.sort) {\n              columnsDataSource.sort = {\n                field: columnSettings.dataOrderField,\n                dir: \"asc\"\n              };\n            }\n\n            if (!columnsDataSource.schema) {\n              var fields = {};\n              fields[columnSettings.dataStatusField] = {\n                type: \"string\",\n                defaultValue: function () {\n                  return kendo.guid().split(\"-\")[0];\n                }\n              };\n              fields[columnSettings.dataTextField] = {\n                type: \"string\"\n              };\n\n              if (columnSettings.dataOrderField) {\n                fields[columnSettings.dataOrderField] = {\n                  type: \"number\"\n                };\n              }\n\n              columnsDataSource.schema = {\n                model: {\n                  fields: fields\n                }\n              };\n            }\n\n            if (that.columnsDataSource && that._columnsChangeHandler) {\n              that.columnsDataSource.unbind(CHANGE, that._columnsChangeHandler);\n              that.columnsDataSource.unbind(CHANGE, that._columnsErrorHandler);\n            } else {\n              that._columnsChangeHandler = that._columnsDataSourceChange.bind(that);\n              that._columnsErrorHandler = that._error.bind(that);\n            }\n\n            that.columnsDataSource = DataSource.create(columnsDataSource).bind(CHANGE, that._columnsChangeHandler).bind(ERROR, that._columnsErrorHandler);\n          },\n          _columnsDataSourceChange: function (ev) {\n            var that = this,\n                view = that.columnsDataSource.view(),\n                columnSettings = extend(true, {}, that.options.columnSettings, {\n              messages: that.options.messages,\n              states: that._buildStates(),\n              sortableIdentifier: that._sortableIdentifier\n            }),\n                statusField = columnSettings.dataStatusField;\n\n            if (ev.action && ev.action !== \"sync\") {\n              return;\n            }\n\n            if (that.trigger(COLUMNSDATABINDING, ev)) {\n              return;\n            }\n\n            that._progress(true);\n\n            that._columns = {};\n            that.columnsContainer.html(\"\");\n\n            for (var i = 0; i < view.length; i++) {\n              var data = view[i];\n              var status = data[statusField] || GENERIC;\n              var column;\n              column = that._columns[status] = new ui.taskboard.Column(columnSettings, data);\n              that.columnsContainer.append(column.element);\n              column.bind(ACTION, that.executeCommand.bind(that));\n              column.bind(MOVE, that._move.bind(that));\n              column.bind(MOVE_END, that._moveEnd.bind(that));\n              column.bind(MOVE_START, that._moveStart.bind(that));\n              column.bind(CHANGE, that._changeOrder.bind(that));\n\n              that._tabindex(column.element);\n            }\n\n            if (ev.action === \"sync\" || ev.action === undefined) {\n              that._renderCards(that.dataSource.view());\n            }\n\n            that._progress(false);\n\n            that.trigger(COLUMNSDATABOUND, ev);\n          },\n          _move: function (ev) {\n            this.trigger(MOVE, this._extendExecArgs(ev));\n          },\n          _moveEnd: function (ev) {\n            this.trigger(MOVE_END, this._extendExecArgs(ev));\n          },\n          _moveStart: function (ev) {\n            this.trigger(MOVE_START, this._extendExecArgs(ev));\n          },\n          _changeOrder: function (ev) {\n            this.trigger(CHANGE, this._extendExecArgs(ev));\n          },\n          _dataSource: function () {\n            var that = this,\n                options = that.options,\n                dataSource = options.dataSource;\n            dataSource = isArray(dataSource) ? {\n              data: dataSource\n            } : dataSource;\n\n            if (options.dataOrderField && !dataSource.sort) {\n              dataSource.sort = {\n                field: options.dataOrderField,\n                dir: \"asc\"\n              };\n            }\n\n            if (!dataSource.schema) {\n              var fields = {};\n              fields[options.dataStatusField] = {\n                type: \"string\"\n              };\n              fields[options.dataTitleField] = {\n                type: \"string\"\n              };\n              fields[options.dataDescriptionField] = {\n                type: \"string\"\n              };\n              fields[options.dataCategoryField] = {\n                type: \"string\"\n              };\n\n              if (options.dataOrderField) {\n                fields[options.dataOrderField] = {\n                  type: \"number\"\n                };\n              }\n\n              dataSource.schema = {\n                model: {\n                  fields: fields\n                }\n              };\n            }\n\n            if (that.dataSource && that._changeHandler) {\n              that.dataSource.unbind(CHANGE, that._changeHandler);\n              that.dataSource.unbind(ERROR, that._errorHandler);\n            } else {\n              that._changeHandler = that._change.bind(that);\n              that._errorHandler = that._error.bind(that);\n            }\n\n            that.dataSource = DataSource.create(dataSource).bind(CHANGE, that._changeHandler);\n          },\n          _change: function (ev) {\n            var that = this;\n\n            if (ev.action && ev.action !== \"sync\") {\n              return;\n            }\n\n            if (that.trigger(DATABINDING, ev)) {\n              return;\n            }\n\n            that._progress(true);\n\n            that._clearColumns();\n\n            that._renderCards(that.dataSource.view());\n\n            that._closePane();\n\n            that.trigger(DATABOUND, ev);\n\n            that._progress(false);\n          },\n          _error: function () {\n            this._progress(false);\n          },\n          _renderCards: function (data) {\n            var that = this;\n\n            for (var i = 0; i < data.length; i++) {\n              that._renderCard(data[i]);\n            }\n          },\n          _renderCard: function (card) {\n            var that = this,\n                options = extend({}, that.options, {\n              states: that._buildStates()\n            }),\n                statusField = options.dataStatusField,\n                status = card[statusField] || GENERIC;\n\n            if (status && that._columns[status]) {\n              card = new ui.taskboard.Card(options, card, that.resources);\n\n              that._columns[status].addCard(card.element);\n\n              that._tabindex(card.element);\n            }\n          },\n          _clearColumns: function () {\n            var that = this;\n\n            for (var key in that._columns) {\n              that._columns[key].empty();\n            }\n          },\n          _initCardMenu: function () {\n            var that = this,\n                options = that.options,\n                cardMenuOptions = isArray(options.cardMenu) ? {\n              items: options.cardMenu\n            } : options.cardMenu;\n            cardMenuOptions = extend({}, {\n              messages: options.messages,\n              target: that.columnsContainer,\n              filter: \".k-taskboard-card-menu-button\",\n              action: that.executeCommand.bind(that),\n              showOn: \"click\",\n              alignToAnchor: true,\n              states: that._buildStates()\n            }, cardMenuOptions);\n\n            if (options.cardMenu === false) {\n              return;\n            }\n\n            that.cardMenu = new ui.taskboard.CardMenu(\"<ul></ul>\", cardMenuOptions);\n          },\n          _initResources: function () {\n            var that = this,\n                resources = that.options.resources;\n\n            for (var i = 0; i < resources.length; i++) {\n              that._addResource(resources[i]);\n            }\n          },\n          _addResource: function (resource) {\n            var that = this;\n\n            if (!that.resources) {\n              that.resources = {};\n            }\n\n            that.resources[resource.field] = {\n              field: resource.field,\n              name: resource.name,\n              title: resource.title || resource.field,\n              dataTextField: resource.dataTextField || \"text\",\n              dataValueField: resource.dataValueField || \"value\",\n              dataColorField: resource.dataColorField || \"color\",\n              valuePrimitive: resource.valuePrimitive === false ? false : true,\n              multiple: resource.multiple || false,\n              dataSource: that._resourceDataSource(resource.dataSource)\n            };\n          },\n          _resourceDataSource: function (resourceDS) {\n            var dataSource = isArray(resourceDS) ? {\n              data: resourceDS\n            } : resourceDS,\n                dataSourceInstance = kendo.data.DataSource.create(dataSource);\n            return dataSourceInstance;\n          },\n          _progress: function (toggle) {\n            var that = this;\n            kendo.ui.progress(that.element, toggle);\n          },\n          _initKeyboard: function () {\n            var that = this;\n            that.keyboardManager = new ui.taskboard.KeyboardManager(that.element);\n            that.keyboardManager.bind(ACTION, that.executeCommand.bind(that));\n\n            that._registerShortcuts();\n          },\n          _registerShortcuts: function () {\n            var that = this,\n                states = that._buildStates();\n\n            if (states.isEditable) {\n              that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column, {\n                keyCode: kendo.keys.DELETE\n              }, {\n                command: \"DeleteColumnCommand\"\n              });\n              that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column, {\n                keyCode: \"e\",\n                ctrlKey: true\n              }, {\n                command: \"EditColumnCommand\",\n                handler: preventDefault\n              });\n              that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column, {\n                keyCode: \"a\",\n                ctrlKey: true\n              }, {\n                command: \"AddCardCommand\",\n                handler: preventDefault\n              });\n              that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column + \" *\", {\n                keyCode: kendo.keys.ESC\n              }, {\n                command: \"CancelEditColumnCommand\"\n              });\n              that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n                keyCode: kendo.keys.DELETE\n              }, {\n                command: \"DeleteCardCommand\"\n              });\n              that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n                keyCode: \"e\",\n                ctrlKey: true\n              }, {\n                command: \"EditCardCommand\",\n                handler: preventDefault\n              });\n            }\n\n            if (states.isSelectable) {\n              that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n                keyCode: kendo.keys.ENTER\n              }, {\n                command: \"SelectCardCommand\",\n                handler: preventDefault\n              });\n            }\n\n            that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n              keyCode: kendo.keys.UP\n            }, {\n              command: \"MoveFocusCommand\",\n              options: {\n                value: \"up\"\n              },\n              handler: preventDefault\n            });\n            that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n              keyCode: kendo.keys.DOWN\n            }, {\n              command: \"MoveFocusCommand\",\n              options: {\n                value: \"down\"\n              },\n              handler: preventDefault\n            });\n            that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n              keyCode: kendo.keys.LEFT\n            }, {\n              command: \"MoveFocusCommand\",\n              options: {\n                value: \"left\"\n              },\n              handler: preventDefault\n            });\n            that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.card, {\n              keyCode: kendo.keys.RIGHT\n            }, {\n              command: \"MoveFocusCommand\",\n              options: {\n                value: \"right\"\n              },\n              handler: preventDefault\n            });\n            that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column, {\n              keyCode: kendo.keys.LEFT\n            }, {\n              command: \"MoveFocusCommand\",\n              options: {\n                value: \"left\"\n              },\n              handler: preventDefault\n            });\n            that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column, {\n              keyCode: kendo.keys.RIGHT\n            }, {\n              command: \"MoveFocusCommand\",\n              options: {\n                value: \"right\"\n              },\n              handler: preventDefault\n            });\n            that.keyboardManager.registerShortcut(DOT + TaskBoard.styles.column, {\n              keyCode: kendo.keys.DOWN\n            }, {\n              command: \"MoveFocusCommand\",\n              options: {\n                value: \"down\"\n              },\n              handler: preventDefault\n            });\n          },\n          destroy: function () {\n            var that = this;\n\n            if (that._columnsChangeHandler) {\n              that.columnsDataSource.unbind(CHANGE, that._columnsChangeHandler);\n              that.columnsDataSource.unbind(CHANGE, that._columnsErrorHandler);\n            }\n\n            if (that._changeHandler) {\n              that.dataSource.unbind(CHANGE, that._changeHandler);\n              that.dataSource.unbind(ERROR, that._errorHandler);\n            }\n\n            for (var key in that._columns) {\n              that._columns[key].destroy();\n            }\n\n            if (that.toolbar) {\n              that.toolbar.destroy();\n            }\n\n            if (that.cardMenu) {\n              that.cardMenu.destroy();\n            }\n\n            if (that.keyboardManager) {\n              that.keyboardManager.destroy();\n            }\n\n            if (that.pane) {\n              that.closePane();\n            }\n\n            Widget.fn.destroy.call(that);\n          }\n        });\n        kendo.ui.plugin(TaskBoard);\n        extend(true, TaskBoard, {\n          styles: TaskBoardStyles\n        });\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1479:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./taskboard/toolbar\");\n    /***/\n  },\n\n  /***/\n  1480:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./taskboard/column\");\n    /***/\n  },\n\n  /***/\n  1481:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./taskboard/card\");\n    /***/\n  },\n\n  /***/\n  1482:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./taskboard/cardmenu\");\n    /***/\n  },\n\n  /***/\n  1483:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./taskboard/commands\");\n    /***/\n  },\n\n  /***/\n  1484:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./taskboard/pane\");\n    /***/\n  },\n\n  /***/\n  1485:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./taskboard/keyboard\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}