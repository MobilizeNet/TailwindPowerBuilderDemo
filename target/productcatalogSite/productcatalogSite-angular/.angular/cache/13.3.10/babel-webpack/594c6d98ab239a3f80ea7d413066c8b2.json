{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1290);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1052:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.popup\");\n    /***/\n  },\n\n  /***/\n  1063:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.data\");\n    /***/\n  },\n\n  /***/\n  1115:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.numerictextbox\");\n    /***/\n  },\n\n  /***/\n  1218:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.window\");\n    /***/\n  },\n\n  /***/\n  1283:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.gantt.data\");\n    /***/\n  },\n\n  /***/\n  1290:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1063), __webpack_require__(1052), __webpack_require__(1218), __webpack_require__(1283), __webpack_require__(1291), __webpack_require__(1292), __webpack_require__(1115)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"gantt.editors\",\n        name: \"GanttEditors\",\n        category: \"web\",\n        description: \"The Gantt component editors.\",\n        depends: [\"data\", \"popup\", \"window\", \"gantt.data\", \"grid\", \"datetimepicker\", \"numerictextbox\"],\n        hidden: true\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            browser = kendo.support.browser,\n            Observable = kendo.Observable,\n            Widget = ui.Widget,\n            outerWidth = kendo._outerWidth,\n            keys = $.extend({\n          F10: 121\n        }, kendo.keys),\n            extend = $.extend,\n            isPlainObject = $.isPlainObject,\n            NS = \".kendoGantt\",\n            PERCENTAGE_FORMAT = \"p0\",\n            CLICK = \"click\",\n            WIDTH = \"width\",\n            STRING = \"string\",\n            DOT = \".\",\n            DIRECTIONS = {\n          \"down\": {\n            origin: \"bottom left\",\n            position: \"top left\"\n          },\n          \"up\": {\n            origin: \"top left\",\n            position: \"bottom left\"\n          }\n        },\n            TASK_DROPDOWN_TEMPLATE = kendo.template('<div class=\"#=styles.popupWrapper#\">' + '<ul class=\"#=styles.popupList#\" role=\"listbox\" aria-label=\"Add dropdown\">' + '#for(var i = 0, l = actions.length; i < l; i++){#' + '<li tabindex=\"0\" class=\"#=styles.item#\" data-action=\"#=actions[i].data#\" role=\"option\">' + '<span class=\"k-link k-menu-link\">' + '<span class=\"k-menu-link-text\">#=actions[i].text#</span>' + '</span>' + '</li>' + '#}#' + '</ul>' + '</div>');\n        var ganttStyles = {\n          buttonDelete: \"k-gantt-delete\",\n          buttonCancel: \"k-gantt-cancel\",\n          buttonSave: \"k-gantt-update\",\n          focused: \"k-focus\",\n          gridContent: \"k-grid-content\",\n          hovered: \"k-state-hover\",\n          item: \"k-item k-menu-item\",\n          popupWrapper: \"k-popup k-menu-popup\",\n          popupList: \"k-menu-group k-menu-group-md k-reset\",\n          popup: {\n            form: \"k-popup-edit-form\",\n            editForm: \"k-gantt-edit-form\",\n            formContainer: \"k-edit-form-container\",\n            resourcesFormContainer: \"k-resources-form-container\",\n            message: \"k-popup-message\",\n            buttonsContainer: \"k-edit-buttons\",\n            button: \"k-button\",\n            buttonDefaults: \"k-button-md k-rounded-md k-button-solid k-button-solid-base\",\n            editField: \"k-edit-field\",\n            editLabel: \"k-edit-label\",\n            resourcesField: \"k-gantt-resources\"\n          },\n          primary: \"k-button-solid-primary\",\n          toolbar: {\n            appendButton: \"k-gantt-create\"\n          }\n        };\n\n        var DATERANGEEDITOR = function (container, options) {\n          var attr = {\n            name: options.field,\n            title: options.title\n          };\n          var validationRules = options.model.fields[options.field].validation;\n\n          if (validationRules && isPlainObject(validationRules) && validationRules.message) {\n            attr[kendo.attr(\"dateCompare-msg\")] = validationRules.message;\n          }\n\n          $('<input type=\"text\" required ' + 'id=\"' + options.field + '\"' + kendo.attr(\"type\") + '=\"date\" ' + kendo.attr(\"role\") + '=\"datetimepicker\" ' + kendo.attr(\"bind\") + '=\"value:' + options.field + '\" ' + kendo.attr(\"validate\") + \"='true' />\").attr(attr).appendTo(container);\n          $('<span ' + kendo.attr(\"for\") + '=\"' + options.field + '\" class=\"k-invalid-msg\"/>').hide().appendTo(container);\n        };\n\n        var RESOURCESEDITOR = function (container, options) {\n          $('<a href=\"#\" class=\"' + options.styles.button + ' ' + options.styles.buttonDefaults + '\"><span class=\"k-button-text\">' + options.messages.assignButton + '</span></a>').on(\"click\", options.click).appendTo(container);\n        };\n\n        var TaskDropDown = Observable.extend({\n          init: function (element, options) {\n            Observable.fn.init.call(this);\n            this.element = element;\n            this.options = extend(true, {}, this.options, options);\n\n            this._popup();\n          },\n          options: {\n            direction: \"down\"\n          },\n          destroy: function () {\n            clearTimeout(this._focusTimeout);\n            this.popup.destroy();\n            this.element.off(NS);\n            this.list.off(NS);\n            this.unbind();\n          },\n          _adjustListWidth: function () {\n            var list = this.list;\n            var width = list[0].style.width;\n            var wrapper = this.element;\n            var listOuterWidth = outerWidth(list);\n            var computedStyle;\n            var computedWidth;\n\n            if (!list.data(WIDTH) && width) {\n              return;\n            }\n\n            computedStyle = window.getComputedStyle ? window.getComputedStyle(wrapper[0], null) : 0;\n            computedWidth = computedStyle ? parseFloat(computedStyle.width) : outerWidth(wrapper);\n\n            if (computedStyle && (browser.mozilla || browser.msie)) {\n              // getComputedStyle returns different box in FF and IE.\n              computedWidth += parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight) + parseFloat(computedStyle.borderLeftWidth) + parseFloat(computedStyle.borderRightWidth);\n            }\n\n            if (list.css(\"box-sizing\") !== \"border-box\") {\n              width = computedWidth - (outerWidth(list) - list.width());\n            } else {\n              width = computedWidth;\n            }\n\n            if (listOuterWidth > width) {\n              width = listOuterWidth;\n            }\n\n            list.css({\n              fontFamily: wrapper.css(\"font-family\"),\n              width: width\n            }).data(WIDTH, width);\n          },\n          _current: function (method) {\n            var current = this.list.find(DOT + ganttStyles.focused);\n            var sibling = current[method]();\n\n            if (sibling.length) {\n              current.removeClass(ganttStyles.focused).removeAttr(\"id\");\n              sibling.addClass(ganttStyles.focused).trigger(\"focus\");\n            }\n          },\n          _popup: function () {\n            var that = this;\n            var itemSelector = \"li\" + DOT + \"k-item\";\n            var actions = this.options.messages.actions;\n            this.list = $(TASK_DROPDOWN_TEMPLATE({\n              styles: ganttStyles,\n              actions: [{\n                data: \"add\",\n                text: actions.addChild\n              }, {\n                data: \"insert-before\",\n                text: actions.insertBefore\n              }, {\n                data: \"insert-after\",\n                text: actions.insertAfter\n              }]\n            }));\n            this.element.append(this.list);\n            this.popup = new kendo.ui.Popup(this.list, extend({\n              anchor: this.element,\n              open: function () {\n                that._adjustListWidth();\n              },\n              animation: this.options.animation\n            }, DIRECTIONS[this.options.direction]));\n            this.element.on(CLICK + NS, function (e) {\n              var target = $(this);\n              var action = target.attr(kendo.attr(\"action\"));\n              e.preventDefault();\n\n              if (action) {\n                that.trigger(\"command\", {\n                  type: action\n                });\n              } else {\n                that.popup.open();\n                that.list.find(\"li:first\").addClass(ganttStyles.focused).trigger(\"focus\");\n              }\n            });\n            this.list.find(itemSelector).hover(function () {\n              $(this).addClass(ganttStyles.hovered);\n            }, function () {\n              $(this).removeClass(ganttStyles.hovered);\n            }).end().on(CLICK + NS, itemSelector, function () {\n              that.trigger(\"command\", {\n                type: $(this).attr(kendo.attr(\"action\"))\n              });\n              that.popup.close();\n            });\n            this.popup.bind(\"close\", function () {\n              that.list.find(itemSelector).removeClass(ganttStyles.focused);\n              that.element.parents('[' + kendo.attr(\"role\") + '=\"gantt\"]').find(DOT + ganttStyles.gridContent + \" > table\").first().trigger(\"focus\");\n            });\n            this.list.find(\"ul\").on(\"keydown\" + NS, function (e) {\n              var key = e.keyCode;\n\n              switch (key) {\n                case keys.UP:\n                  e.preventDefault();\n\n                  that._current(\"prev\");\n\n                  break;\n\n                case keys.DOWN:\n                  e.preventDefault();\n\n                  that._current(\"next\");\n\n                  break;\n\n                case keys.ENTER:\n                  that.list.find(DOT + ganttStyles.focused).click();\n                  break;\n\n                case keys.ESC:\n                  e.preventDefault();\n                  that.popup.close();\n                  break;\n              }\n            });\n          }\n        });\n        var editors = {\n          desktop: {\n            dateRange: DATERANGEEDITOR,\n            resources: RESOURCESEDITOR\n          }\n        };\n        var Editor = kendo.Observable.extend({\n          init: function (element, options) {\n            kendo.Observable.fn.init.call(this);\n            this.element = element;\n            this.options = extend(true, {}, this.options, options);\n            this.createButton = this.options.createButton;\n          },\n          fields: function (editors, model, plannedEditors) {\n            var that = this;\n            var options = this.options;\n            var messages = options.messages.editor;\n            var resources = options.resources;\n            var fields;\n\n            var click = function (e) {\n              e.preventDefault();\n              resources.editor(that.container.find(DOT + ganttStyles.popup.resourcesField), model);\n            };\n\n            if (options.editable.template) {\n              fields = $.map(model.fields, function (value, key) {\n                return {\n                  field: key\n                };\n              });\n            } else {\n              fields = [{\n                field: \"title\",\n                title: messages.title\n              }, {\n                field: \"start\",\n                title: messages.start,\n                editor: editors.dateRange\n              }, {\n                field: \"end\",\n                title: messages.end,\n                editor: editors.dateRange\n              }, {\n                field: \"percentComplete\",\n                title: messages.percentComplete,\n                format: PERCENTAGE_FORMAT\n              }];\n\n              if (plannedEditors) {\n                fields.splice.apply(fields, [1, 0].concat([{\n                  field: \"plannedStart\",\n                  title: messages.plannedStart,\n                  editor: editors.dateRange\n                }, {\n                  field: \"plannedEnd\",\n                  title: messages.plannedEnd,\n                  editor: editors.dateRange\n                }]));\n              }\n\n              if (model.get(resources.field)) {\n                fields.push({\n                  field: resources.field,\n                  title: messages.resources,\n                  messages: messages,\n                  editor: editors.resources,\n                  click: click,\n                  styles: ganttStyles.popup\n                });\n              }\n            }\n\n            return fields;\n          },\n          _buildEditTemplate: function (model, fields, editableFields) {\n            var resources = this.options.resources;\n            var template = this.options.editable.template;\n            var settings = extend({}, kendo.Template, this.options.templateSettings);\n            var paramName = settings.paramName;\n            var popupStyles = ganttStyles.popup;\n            var html = \"\";\n\n            if (template) {\n              if (typeof template === STRING) {\n                template = kendo.unescape(template);\n              }\n\n              html += kendo.template(template, settings)(model);\n            } else {\n              for (var i = 0, length = fields.length; i < length; i++) {\n                var field = fields[i];\n                html += '<div class=\"' + popupStyles.editLabel + '\"><label for=\"' + field.field + '\">' + (field.title || field.field || \"\") + '</label></div>';\n\n                if (field.field === resources.field) {\n                  html += '<div class=\"' + popupStyles.resourcesField + '\" style=\"display:none\"></div>';\n                }\n\n                if (!model.editable || model.editable(field.field)) {\n                  editableFields.push(field);\n                  html += '<div ' + kendo.attr(\"container-for\") + '=\"' + field.field + '\" class=\"' + popupStyles.editField + '\"></div>';\n                } else {\n                  var tmpl = \"#:\";\n\n                  if (field.field) {\n                    field = kendo.expr(field.field, paramName);\n                    tmpl += field + \"==null?'':\" + field;\n                  } else {\n                    tmpl += \"''\";\n                  }\n\n                  tmpl += \"#\";\n                  tmpl = kendo.template(tmpl, settings);\n                  html += '<div class=\"' + popupStyles.editField + '\">' + tmpl(model) + '</div>';\n                }\n              }\n            }\n\n            return html;\n          }\n        });\n        var PopupEditor = Editor.extend({\n          destroy: function () {\n            this.close();\n            this.unbind();\n          },\n          close: function () {\n            var that = this;\n\n            var destroy = function () {\n              if (that.editable) {\n                that.editable.destroy();\n                that.editable = null;\n                that.container = null;\n              }\n\n              if (that.popup) {\n                that.popup.destroy();\n                that.popup = null;\n              }\n            };\n\n            if (this.editable && this.container.is(\":visible\")) {\n              that.trigger(\"close\", {\n                window: that.container\n              });\n              this.container.data(\"kendoWindow\").bind(\"deactivate\", destroy).close();\n            } else {\n              destroy();\n            }\n          },\n          editTask: function (task, plannedEditors) {\n            this.editable = this._createPopupEditor(task, plannedEditors);\n          },\n          showDialog: function (options) {\n            var buttons = options.buttons;\n            var popupStyles = ganttStyles.popup;\n            var html = kendo.format('<div class=\"{0}\"><div class=\"{1}\"><p class=\"{2}\">{3}</p><div class=\"{4}\">', popupStyles.form, popupStyles.formContainer, popupStyles.message, options.text, popupStyles.buttonsContainer);\n\n            for (var i = 0, length = buttons.length; i < length; i++) {\n              html += this.createButton(buttons[i]);\n            }\n\n            html += '</div></div></div>';\n            var wrapper = this.element;\n\n            if (this.popup) {\n              this.popup.destroy();\n            }\n\n            var popup = this.popup = $(html).appendTo(wrapper).eq(0).on(\"click\", DOT + popupStyles.button, function (e) {\n              e.preventDefault();\n              popup.close();\n              var buttonIndex = $(e.currentTarget).index();\n              buttons[buttonIndex].click();\n            }).kendoWindow({\n              modal: true,\n              autoFocus: false,\n              resizable: false,\n              draggable: false,\n              title: options.title,\n              visible: false,\n              deactivate: function () {\n                this.destroy();\n                wrapper.trigger(\"focus\");\n              }\n            }).getKendoWindow();\n            popup.center().open();\n            popup.element.find(\".k-button-solid-primary\").trigger(\"focus\");\n          },\n          _createPopupEditor: function (task, plannedEditors) {\n            var that = this;\n            var options = {};\n            var messages = this.options.messages;\n            var popupStyles = ganttStyles.popup;\n            var html = kendo.format('<div {0}=\"{1}\" class=\"{2} {3}\"><div class=\"{4}\">', kendo.attr(\"uid\"), task.uid, popupStyles.form, popupStyles.editForm, popupStyles.formContainer);\n            var fields = this.fields(editors.desktop, task, plannedEditors);\n            var editableFields = [];\n            html += this._buildEditTemplate(task, fields, editableFields);\n            html += '<div class=\"' + popupStyles.buttonsContainer + '\">';\n            html += this.createButton({\n              name: \"update\",\n              text: messages.save,\n              className: ganttStyles.primary\n            });\n            html += this.createButton({\n              name: \"cancel\",\n              text: messages.cancel\n            });\n\n            if (that.options.editable.destroy !== false) {\n              html += this.createButton({\n                name: \"delete\",\n                text: messages.destroy\n              });\n            }\n\n            html += '</div></div></div>';\n            var container = this.container = $(html).appendTo(this.element).eq(0).kendoWindow(extend({\n              modal: true,\n              resizable: false,\n              draggable: true,\n              title: messages.editor.editorTitle,\n              visible: false,\n              close: function (e) {\n                if (e.userTriggered) {\n                  if (that.trigger(\"cancel\", {\n                    container: container,\n                    model: task\n                  })) {\n                    e.preventDefault();\n                  }\n                }\n              }\n            }, options));\n            var editableWidget = container.kendoEditable({\n              fields: editableFields,\n              model: task,\n              clearContainer: false,\n              validateOnBlur: true,\n              target: that.options.target\n            }).data(\"kendoEditable\");\n            kendo.cycleForm(container);\n\n            if (!this.trigger(\"edit\", {\n              container: container,\n              model: task\n            })) {\n              container.data(\"kendoWindow\").center().open();\n              container.on(CLICK + NS, DOT + ganttStyles.buttonCancel, function (e) {\n                e.preventDefault();\n                e.stopPropagation();\n                that.trigger(\"cancel\", {\n                  container: container,\n                  model: task\n                });\n              });\n              container.on(CLICK + NS, DOT + ganttStyles.buttonSave, function (e) {\n                e.preventDefault();\n                e.stopPropagation();\n                var fields = that.fields(editors.desktop, task, plannedEditors);\n                var updateInfo = {};\n                var field;\n\n                for (var i = 0, length = fields.length; i < length; i++) {\n                  field = fields[i].field;\n                  updateInfo[field] = task.get(field);\n                }\n\n                that.trigger(\"save\", {\n                  container: container,\n                  model: task,\n                  updateInfo: updateInfo\n                });\n              });\n              container.on(CLICK + NS, DOT + ganttStyles.buttonDelete, function (e) {\n                e.preventDefault();\n                e.stopPropagation();\n                that.trigger(\"remove\", {\n                  container: container,\n                  model: task\n                });\n              });\n            } else {\n              that.trigger(\"cancel\", {\n                container: container,\n                model: task\n              });\n            }\n\n            return editableWidget;\n          }\n        });\n        var ResourceEditor = Widget.extend({\n          init: function (element, options) {\n            Widget.fn.init.call(this, element, options);\n            this.wrapper = this.element;\n            this.model = this.options.model;\n            this.resourcesField = this.options.resourcesField;\n            this.createButton = this.options.createButton;\n\n            this._initContainer();\n\n            this._attachHandlers();\n          },\n          events: [\"save\"],\n          close: function () {\n            this.window.bind(\"deactivate\", this.destroy.bind(this)).close();\n          },\n          destroy: function () {\n            this._dettachHandlers();\n\n            this.grid.destroy();\n            this.grid = null;\n            this.window.destroy();\n            this.window = null;\n            Widget.fn.destroy.call(this);\n            kendo.destroy(this.wrapper);\n            this.element = this.wrapper = null;\n          },\n          open: function () {\n            this.window.center().open();\n          },\n          _attachHandlers: function () {\n            var grid = this.grid;\n\n            var closeHandler = this._cancelProxy = this._cancel.bind(this);\n\n            this.container.on(CLICK + NS, DOT + ganttStyles.buttonCancel, this._cancelProxy);\n            this._saveProxy = this._save.bind(this);\n            this.container.on(CLICK + NS, DOT + ganttStyles.buttonSave, this._saveProxy);\n            this.window.bind(\"close\", function (e) {\n              if (e.userTriggered) {\n                closeHandler(e);\n              }\n            });\n            grid.wrapper.on(CLICK + NS, \"input[type='checkbox']\", function () {\n              var element = $(this);\n              var row = $(element).closest(\"tr\");\n              var model = grid.dataSource.getByUid(row.attr(kendo.attr(\"uid\")));\n              var value = $(element).is(\":checked\") ? 1 : \"\";\n              model.set(\"value\", value);\n            });\n          },\n          _cancel: function (e) {\n            e.preventDefault();\n            this.close();\n          },\n          _createButtons: function () {\n            var buttons = this.options.buttons;\n            var html = '<div class=\"' + ganttStyles.popup.buttonsContainer + '\">';\n\n            for (var i = 0, length = buttons.length; i < length; i++) {\n              html += this.createButton(buttons[i]);\n            }\n\n            html += \"</div>\";\n            this.container.append(html);\n          },\n          _dettachHandlers: function () {\n            this._cancelProxy = null;\n            this._saveProxy = null;\n            this.container.off(NS);\n            this.grid.wrapper.off();\n          },\n          _initContainer: function () {\n            var that = this;\n            var popupStyles = ganttStyles.popup;\n            var dom = kendo.format('<div class=\"{0} {1}\"><div class=\"{2} {3}\"></div></div>\"', popupStyles.form, popupStyles.editForm, popupStyles.formContainer, popupStyles.resourcesFormContainer);\n            dom = $(dom);\n            this.container = dom.find(DOT + popupStyles.resourcesFormContainer);\n            this.window = dom.kendoWindow({\n              modal: true,\n              resizable: false,\n              draggable: true,\n              visible: false,\n              title: this.options.messages.resourcesEditorTitle,\n              open: function () {\n                that.grid.resize(true);\n              }\n            }).data(\"kendoWindow\");\n\n            this._resourceGrid();\n\n            this._createButtons();\n          },\n          _resourceGrid: function () {\n            var that = this;\n            var messages = this.options.messages;\n            var element = $('<div id=\"resources-grid\"/>').appendTo(this.container);\n            this.grid = new kendo.ui.Grid(element, {\n              columns: [{\n                field: \"name\",\n                title: messages.resourcesHeader,\n                template: \"<label><input type='checkbox' value='#=name#'\" + \"# if (value > 0 && value !== null) {#\" + \"checked='checked'\" + \"# } #\" + \"/>#=name#</labe>\"\n              }, {\n                field: \"value\",\n                title: messages.unitsHeader,\n                template: function (dataItem) {\n                  var valueFormat = dataItem.format;\n                  var value = dataItem.value !== null ? dataItem.value : \"\";\n                  return valueFormat ? kendo.toString(value, valueFormat) : value;\n                }\n              }],\n              height: 280,\n              sortable: true,\n              editable: true,\n              filterable: true,\n              dataSource: {\n                data: that.options.data,\n                schema: {\n                  model: {\n                    id: \"id\",\n                    fields: {\n                      id: {\n                        from: \"id\"\n                      },\n                      name: {\n                        from: \"name\",\n                        type: \"string\",\n                        editable: false\n                      },\n                      value: {\n                        from: \"value\",\n                        type: \"number\",\n                        validation: this.options.unitsValidation\n                      },\n                      format: {\n                        from: \"format\",\n                        type: \"string\"\n                      }\n                    }\n                  }\n                }\n              },\n              save: function (e) {\n                var value = !!e.values.value;\n                e.container.parent().find(\"input[type='checkbox']\").prop(\"checked\", value);\n              }\n            });\n          },\n          _save: function (e) {\n            e.preventDefault();\n\n            this._updateModel();\n\n            if (!this.wrapper.is(DOT + ganttStyles.popup.resourcesField)) {\n              this.trigger(\"save\", {\n                container: this.wrapper,\n                model: this.model\n              });\n            }\n\n            this.close();\n          },\n          _updateModel: function () {\n            var resources = [];\n            var value;\n            var data = this.grid.dataSource.data();\n\n            for (var i = 0, length = data.length; i < length; i++) {\n              value = data[i].get(\"value\");\n\n              if (value !== null && value > 0) {\n                resources.push(data[i]);\n              }\n            }\n\n            this.model[this.resourcesField] = resources;\n          }\n        });\n        kendo.gantt = {\n          TaskDropDown: TaskDropDown,\n          Editor: Editor,\n          PopupEditor: PopupEditor,\n          ResourceEditor: ResourceEditor\n        };\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1291:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.grid\");\n    /***/\n  },\n\n  /***/\n  1292:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.datetimepicker\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}