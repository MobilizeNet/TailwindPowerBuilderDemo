{"ast":null,"code":"import { Class } from '../../common';\nconst STRING = \"string\";\nconst FUNCTION = \"function\";\n\nlet preventDefault = function () {\n  this._defaultPrevented = true;\n};\n\nlet isDefaultPrevented = function () {\n  return this._defaultPrevented === true;\n};\n\nexport class Observable extends Class {\n  constructor() {\n    super();\n    this._events = {};\n  }\n\n  destroy() {\n    this.unbind();\n  }\n\n  bind(event, handlers, one) {\n    let that = this,\n        idx,\n        eventNames = typeof event === STRING ? [event] : event || [],\n        length,\n        original,\n        handler,\n        handlersIsFunction = typeof handlers === FUNCTION,\n        events;\n\n    if (handlers === undefined) {\n      for (idx in event) {\n        that.bind(idx, event[idx]);\n      }\n\n      return that;\n    }\n    /* eslint-disable no-loop-func */\n\n\n    for (idx = 0, length = eventNames.length; idx < length; idx++) {\n      let eventName = eventNames[idx];\n      handler = handlersIsFunction ? handlers : handlers[eventName];\n\n      if (handler) {\n        if (one) {\n          original = handler;\n\n          handler = function () {\n            that.unbind(eventName, handler);\n            original.apply(that, arguments);\n          };\n\n          handler.original = original;\n        }\n\n        events = that._events[eventName] = that._events[eventName] || [];\n        events.push(handler);\n      }\n    }\n    /* eslint-enable no-loop-func */\n\n\n    return that;\n  }\n\n  one(eventNames, handlers) {\n    return this.bind(eventNames, handlers, true);\n  }\n\n  first(eventName, handlers) {\n    let that = this,\n        idx,\n        eventNames = typeof eventName === STRING ? [eventName] : eventName,\n        length,\n        handler,\n        handlersIsFunction = typeof handlers === FUNCTION,\n        events;\n\n    for (idx = 0, length = eventNames.length; idx < length; idx++) {\n      let eventName = eventNames[idx];\n      handler = handlersIsFunction ? handlers : handlers[eventName];\n\n      if (handler) {\n        events = that._events[eventName] = that._events[eventName] || [];\n        events.unshift(handler);\n      }\n    }\n\n    return that;\n  }\n\n  trigger(eventName, eventArgs) {\n    let that = this,\n        events = that._events[eventName],\n        idx,\n        length;\n\n    if (events) {\n      let e = eventArgs || {};\n      e.sender = that;\n      e._defaultPrevented = false;\n      e.preventDefault = preventDefault;\n      e.isDefaultPrevented = isDefaultPrevented;\n      events = events.slice();\n\n      for (idx = 0, length = events.length; idx < length; idx++) {\n        events[idx].call(that, e);\n      }\n\n      return e._defaultPrevented === true;\n    }\n\n    return false;\n  }\n\n  unbind(eventName, handler) {\n    let that = this,\n        events = that._events[eventName],\n        idx;\n\n    if (eventName === undefined) {\n      that._events = {};\n    } else if (events) {\n      if (handler) {\n        for (idx = events.length - 1; idx >= 0; idx--) {\n          if (events[idx] === handler || events[idx].original === handler) {\n            events.splice(idx, 1);\n          }\n        }\n      } else {\n        that._events[eventName] = [];\n      }\n    }\n\n    return that;\n  }\n\n  _setEvents(options) {\n    const length = (this.events || []).length;\n\n    for (let idx = 0; idx < length; idx++) {\n      let e = this.events[idx];\n\n      if (this.options[e] && options[e]) {\n        this.unbind(e, this.options[e]);\n\n        if (this._events && this._events[e]) {\n          delete this._events[e];\n        }\n      }\n    }\n\n    this.bind(this.events, options);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}