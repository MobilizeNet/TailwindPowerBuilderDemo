{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1049);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  976:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.dropdownlist\");\n    /***/\n  },\n\n  /***/\n  1039:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.toolbar\");\n    /***/\n  },\n\n  /***/\n  1049:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1039), __webpack_require__(976)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            extend = $.extend,\n            ToolBar = kendo.ui.ToolBar,\n            Item = kendo.toolbar.Item,\n            CLICK = \"click\",\n            DROPDOWNCHANGE = \"dropDownChange\",\n            ACTION = \"action\";\n        var ImageEditorToolBar = ToolBar.extend({\n          init: function (element, options) {\n            var that = this;\n\n            that._extendOptions(options);\n\n            ToolBar.fn.init.call(that, element, options);\n\n            that._attachEvents();\n\n            that.toggleTools();\n          },\n          events: ToolBar.fn.events.concat([DROPDOWNCHANGE, ACTION]),\n          defaultTools: {\n            open: {\n              type: \"button\",\n              icon: \"upload\",\n              name: \"open\",\n              command: \"OpenImageEditorCommand\",\n              showText: \"overflow\"\n            },\n            save: {\n              type: \"button\",\n              icon: \"download\",\n              name: \"save\",\n              command: \"SaveImageEditorCommand\",\n              showText: \"overflow\",\n              toggleCondition: \"canExport\"\n            },\n            separator: {\n              type: \"separator\"\n            },\n            undo: {\n              type: \"button\",\n              icon: \"undo\",\n              name: \"undo\",\n              command: \"UndoImageEditorCommand\",\n              showText: \"overflow\",\n              toggleCondition: \"undo\"\n            },\n            redo: {\n              type: \"button\",\n              icon: \"redo\",\n              name: \"redo\",\n              command: \"RedoImageEditorCommand\",\n              showText: \"overflow\",\n              toggleCondition: \"redo\"\n            },\n            separator1: {\n              type: \"separator\"\n            },\n            crop: {\n              type: \"button\",\n              icon: \"crop\",\n              name: \"crop\",\n              command: \"OpenPaneImageEditorCommand\",\n              options: \"crop\",\n              showText: \"overflow\",\n              toggleCondition: \"canExport\"\n            },\n            resize: {\n              type: \"button\",\n              icon: \"image-resize\",\n              name: \"resize\",\n              command: \"OpenPaneImageEditorCommand\",\n              options: \"resize\",\n              showText: \"overflow\",\n              toggleCondition: \"canExport\"\n            },\n            zoomIn: {\n              type: \"button\",\n              icon: \"zoom-in\",\n              name: \"zoomIn\",\n              command: \"ZoomImageEditorCommand\",\n              showText: \"overflow\",\n              options: \"zoomIn\",\n              toggleCondition: \"enable\"\n            },\n            zoomOut: {\n              type: \"button\",\n              icon: \"zoom-out\",\n              name: \"zoomOut\",\n              command: \"ZoomImageEditorCommand\",\n              showText: \"overflow\",\n              options: \"zoomOut\",\n              toggleCondition: \"enable\"\n            },\n            zoomDropdown: {\n              type: \"imageEditorZoomDropDown\",\n              name: \"zoomDropdown\",\n              command: \"ZoomImageEditorCommand\",\n              text: \"Zoom options\",\n              toggleCondition: \"enable\",\n              items: [{\n                name: \"zoomActualSize\",\n                icon: \"zoom-actual-size\",\n                text: \"Show actual size\",\n                options: \"actualSize\"\n              }, {\n                name: \"zoomFitToScreen\",\n                icon: \"zoom-best-fit\",\n                text: \"Fit to screen\",\n                options: \"fitToScreen\"\n              }]\n            }\n          },\n          _attachEvents: function () {\n            var that = this;\n            that.bind(DROPDOWNCHANGE, that._dropDownChange.bind(that));\n            that.bind(CLICK, that._click.bind(that));\n          },\n          _extendOptions: function (options) {\n            var that = this,\n                tools = options.items ? options.items : Object.keys(that.defaultTools);\n            that.options = options;\n            that.options.items = that._extendToolsOptions(tools);\n          },\n          _extendToolsOptions: function (tools) {\n            var that = this,\n                messages = that.options.messages;\n\n            if (!tools.length) {\n              return;\n            }\n\n            return tools.map(function (tool) {\n              var isBuiltInTool = $.isPlainObject(tool) && Object.keys(tool).length === 1 && tool.name,\n                  toolOptions,\n                  text;\n              tool = isBuiltInTool ? tool.name : tool;\n              toolOptions = $.isPlainObject(tool) ? tool : extend({}, that.defaultTools[tool]);\n              text = messages[toolOptions.name] || toolOptions.text;\n              kendo.deepExtend(toolOptions, {\n                id: toolOptions.name + \"-\" + kendo.guid(),\n                name: toolOptions.name,\n                text: text,\n                attributes: {\n                  \"aria-label\": text,\n                  \"title\": text,\n                  \"data-command\": toolOptions.command,\n                  \"data-options\": toolOptions.options,\n                  \"data-toggle\": toolOptions.toggleCondition\n                },\n                overflow: toolOptions.overflow\n              });\n\n              if (toolOptions.type === \"imageEditorZoomDropDown\") {\n                toolOptions.items = that._extendToolsOptions(toolOptions.items);\n              }\n\n              return toolOptions;\n            }, that);\n          },\n          _click: function (ev) {\n            var command = $(ev.target).data(\"command\"),\n                options = $(ev.target).data(\"options\");\n\n            if (!command) {\n              return;\n            }\n\n            this.action({\n              command: command,\n              options: options\n            });\n          },\n          _dropDownChange: function (ev) {\n            if (!ev.command) {\n              return;\n            }\n\n            this.action({\n              command: ev.command,\n              options: ev.options\n            });\n          },\n          action: function (args) {\n            this.trigger(ACTION, args);\n          },\n          toggleTools: function (conditions) {\n            var that = this,\n                tools = that.element.find(\"[data-toggle]\");\n            tools.each(function (index, elm) {\n              var tool = $(elm),\n                  widget = null,\n                  condition = tool.data(\"toggle\"),\n                  toToggle = conditions && conditions[condition];\n\n              if (tool.is(\"[data-role]\")) {\n                widget = kendo.widgetInstance(tool);\n              }\n\n              if (widget && widget.enable) {\n                widget.enable(toToggle || false);\n              } else {\n                that.enable(tool, toToggle);\n              }\n            });\n          },\n          destroy: function () {\n            var that = this;\n\n            if (that.zoomDropdown) {\n              that.zoomDropdown.destroy();\n            }\n\n            ToolBar.fn.destroy.call(this);\n          }\n        });\n        var ImageEditorZoomDropDown = Item.extend({\n          init: function (options, toolbar) {\n            var that = this,\n                element = $(\"<div></div>\"),\n                input = $(\"<input />\").attr(options.attributes),\n                template = \"<span class=\\\"k-icon k-i-#:icon#\\\"></span> #:text#\";\n            that.element = element;\n            that.input = input;\n            that.toolbar = toolbar;\n            that.dropDown = new ui.DropDownList(that.input, {\n              optionLabel: {\n                text: options.text,\n                icon: \"\"\n              },\n              dataTextField: \"text\",\n              dataSource: options.items,\n              template: template,\n              change: that._change.bind(that)\n            });\n            that.element.append(that.dropDown.wrapper);\n            that.dropDown.list.find(\".k-list-optionlabel\").hide();\n            that.toolbar.zoomDropdown = that;\n          },\n          _change: function (ev) {\n            var that = this;\n            that.toolbar.trigger(DROPDOWNCHANGE, {\n              command: ev.sender.element.data(\"command\"),\n              options: ev.sender.dataItem().options\n            });\n          },\n          destroy: function () {\n            this.dropDown.destroy();\n          }\n        });\n        kendo.toolbar.registerComponent(\"imageEditorZoomDropDown\", ImageEditorZoomDropDown);\n        extend(kendo.ui, {\n          imageeditor: {\n            ToolBar: ImageEditorToolBar,\n            ZoomDropDown: ImageEditorZoomDropDown\n          }\n        });\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}