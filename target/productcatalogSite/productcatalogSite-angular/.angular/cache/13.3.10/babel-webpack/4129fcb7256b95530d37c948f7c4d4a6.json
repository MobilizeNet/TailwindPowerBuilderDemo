{"ast":null,"code":"/**-----------------------------------------------------------------------------------------\n* Copyright © 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport * as i0 from '@angular/core';\nimport { Injectable, NgModule, Directive, Input, ViewChild, HostBinding, Optional, Component, ChangeDetectionStrategy, ContentChild, ContentChildren } from '@angular/core';\nimport * as i5 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i4 from '@progress/kendo-angular-common';\nimport { ResizeSensorModule, ResizeSensorComponent } from '@progress/kendo-angular-common';\nexport { ResizeSensorComponent } from '@progress/kendo-angular-common';\nimport * as i3 from '@progress/kendo-angular-l10n';\nimport { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';\nimport { exportImage, exportSVG, drawDOM } from '@progress/kendo-drawing';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport * as i2 from '@progress/kendo-angular-intl';\nimport { ArcGauge, LinearGauge, RadialGauge, CircularGauge } from '@progress/kendo-charts';\nconst _c0 = [\"surface\"];\nconst _c1 = [\"label\"];\n\nfunction ArcGaugeComponent_div_2_ng_template_2_Template(rf, ctx) {}\n\nfunction ArcGaugeComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4, 5);\n    i0.ɵɵtemplate(2, ArcGaugeComponent_div_2_ng_template_2_Template, 0, 0, \"ng-template\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.centerTemplate.templateRef)(\"ngTemplateOutletContext\", ctx_r1.centerTemplateContext);\n  }\n}\n\nfunction CircularGaugeComponent_div_2_ng_template_2_Template(rf, ctx) {}\n\nfunction CircularGaugeComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4, 5);\n    i0.ɵɵtemplate(2, CircularGaugeComponent_div_2_ng_template_2_Template, 0, 0, \"ng-template\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.centerTemplate.templateRef)(\"ngTemplateOutletContext\", ctx_r1.centerTemplateContext);\n  }\n}\n\nfunction isObject(value) {\n  return typeof value === \"object\";\n}\n\nfunction diffOptions(original, current) {\n  if (Object.keys(original).length !== Object.keys(current).length) {\n    return true;\n  }\n\n  for (let field in original) {\n    if (field !== 'value' && original.hasOwnProperty(field)) {\n      const originalValue = original[field];\n      const currentValue = current[field];\n      const diff = isObject(originalValue) && isObject(currentValue) ? diffOptions(originalValue, currentValue) : originalValue !== currentValue;\n\n      if (diff) {\n        return true;\n      }\n    }\n  }\n}\n\nfunction diffPointerOptions(original, current) {\n  if (!original || !current) {\n    return true;\n  }\n\n  original = [].concat(original);\n  current = [].concat(current);\n\n  if (original.length !== current.length) {\n    return true;\n  }\n\n  for (let idx = 0; idx < original.length; idx++) {\n    if (diffOptions(original[idx], current[idx])) {\n      return true;\n    }\n  }\n}\n/**\n * @hidden\n */\n\n\nlet ConfigurationService = /*#__PURE__*/(() => {\n  class ConfigurationService {\n    constructor() {\n      this.options = {};\n    }\n\n    copyChanges(prefix, changes) {\n      for (let propertyName in changes) {\n        if (!changes.hasOwnProperty(propertyName)) {\n          continue;\n        }\n\n        const value = changes[propertyName].currentValue;\n        const optionName = (prefix ? prefix + '.' : '') + propertyName;\n        this.set(optionName, value);\n      }\n    }\n\n    read() {\n      this.hasChanges = false;\n      this.valueChange = false;\n      return this.options;\n    }\n\n    readValues() {\n      this.valueChange = false;\n      const pointers = [].concat(this.options.pointer);\n      return pointers.map(pointer => pointer.value);\n    }\n\n    readValue() {\n      this.valueChange = false;\n      return this.options.value;\n    }\n\n    set(field, value) {\n      const {\n        key,\n        options\n      } = this.optionContext(field);\n\n      if (!this.hasChanges && (key === 'value' || key === 'pointer' && !diffPointerOptions(this.options.pointer, value))) {\n        this.valueChange = true;\n      } else {\n        this.hasChanges = true;\n        this.valueChange = false;\n      }\n\n      options[key] = value;\n    }\n\n    optionContext(field) {\n      const parts = field.split('.');\n      let options = this.options;\n      let key = parts.shift();\n\n      while (parts.length > 0) {\n        options = options[key] = options[key] || {};\n        key = parts.shift();\n      }\n\n      return {\n        key: key,\n        options: options\n      };\n    }\n\n  }\n\n  ConfigurationService.ɵfac = function ConfigurationService_Factory(t) {\n    return new (t || ConfigurationService)();\n  };\n\n  ConfigurationService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ConfigurationService,\n    factory: ConfigurationService.ɵfac\n  });\n  return ConfigurationService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @hidden\n */\n\n\nlet CollectionChangesService = /*#__PURE__*/(() => {\n  class CollectionChangesService {}\n\n  CollectionChangesService.ɵfac = function CollectionChangesService_Factory(t) {\n    return new (t || CollectionChangesService)();\n  };\n\n  CollectionChangesService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: CollectionChangesService,\n    factory: CollectionChangesService.ɵfac\n  });\n  return CollectionChangesService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst template = `\n    <div class=\"k-var--gauge-pointer\"></div>\n    <div class=\"k-var--gauge-track\"></div>\n    <div class=\"k-var--normal-text-color\"></div>\n`;\n/**\n * @hidden\n */\n\nlet ThemeService = /*#__PURE__*/(() => {\n  class ThemeService {\n    read() {\n      if (!this.options) {\n        this.load();\n      }\n\n      return this.options;\n    }\n\n    load() {\n      if (typeof document === 'undefined') {\n        this.options = {};\n        return;\n      }\n\n      const container = document.createElement('div');\n      container.style.display = 'none';\n      container.innerHTML = template;\n      document.body.appendChild(container);\n\n      try {\n        const pointerColor = this.getColor(container, 'gauge-pointer');\n        const rangePlaceholder = this.getColor(container, 'gauge-track');\n        const textColor = this.getColor(container, 'normal-text-color');\n        this.options = {\n          pointer: {\n            color: pointerColor\n          },\n          scale: {\n            labels: {\n              color: textColor\n            },\n            rangePlaceholderColor: rangePlaceholder,\n            minorTicks: {\n              color: textColor\n            },\n            majorTicks: {\n              color: textColor\n            },\n            line: {\n              color: textColor\n            }\n          }\n        };\n      } finally {\n        document.body.removeChild(container);\n      }\n    }\n\n    getColor(container, varName) {\n      return window.getComputedStyle(container.querySelector(`.k-var--${varName}`)).backgroundColor;\n    }\n\n  }\n\n  ThemeService.ɵfac = function ThemeService_Factory(t) {\n    return new (t || ThemeService)();\n  };\n\n  ThemeService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ThemeService,\n    factory: ThemeService.ɵfac\n  });\n  return ThemeService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @hidden\n */\n\n\nlet SharedModule = /*#__PURE__*/(() => {\n  class SharedModule {}\n\n  SharedModule.ɵfac = function SharedModule_Factory(t) {\n    return new (t || SharedModule)();\n  };\n\n  SharedModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: SharedModule\n  });\n  SharedModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [ThemeService],\n    imports: [ResizeSensorModule]\n  });\n  return SharedModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @hidden\n */\n\n\nlet CollectionComponent = /*#__PURE__*/(() => {\n  class CollectionComponent {\n    constructor(key, configurationService, collectionChangesService) {\n      this.key = key;\n      this.configurationService = configurationService;\n      this.collectionChangesService = collectionChangesService;\n    }\n\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n      this.configurationService.set(this.key, []);\n    }\n\n    ngAfterContentInit() {\n      this.subscription = this.children.changes.subscribe(() => this.collectionChangesService.hasChanges = true);\n    }\n\n    ngAfterContentChecked() {\n      if (this.collectionChangesService.hasChanges) {\n        this.configurationService.set(this.key, this.readItems());\n        this.collectionChangesService.hasChanges = false;\n      }\n    }\n\n    readItems() {\n      return this.children.map(child => Object.assign({}, child.configurationService.read()));\n    }\n\n  }\n\n  CollectionComponent.ɵfac = function CollectionComponent_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n\n  CollectionComponent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CollectionComponent\n  });\n  return CollectionComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @hidden\n */\n\n\nlet CollectionItemComponent = /*#__PURE__*/(() => {\n  class CollectionItemComponent {\n    constructor(configurationService, collectionChangesService) {\n      this.configurationService = configurationService;\n      this.collectionChangesService = collectionChangesService;\n    }\n\n    ngOnChanges(changes) {\n      this.configurationService.copyChanges('', changes);\n      this.collectionChangesService.hasChanges = true;\n    }\n\n  }\n\n  CollectionItemComponent.ɵfac = function CollectionItemComponent_Factory(t) {\n    return new (t || CollectionItemComponent)(i0.ɵɵdirectiveInject(ConfigurationService), i0.ɵɵdirectiveInject(CollectionChangesService));\n  };\n\n  CollectionItemComponent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CollectionItemComponent,\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  return CollectionItemComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @hidden\n */\n\n\nconst packageMetadata = {\n  name: '@progress/kendo-angular-gauges',\n  productName: 'Kendo UI for Angular',\n  productCodes: ['KENDOUIANGULAR', 'KENDOUICOMPLETE'],\n  publishDate: 1650441382,\n  version: '',\n  licensingDocsUrl: 'https://www.telerik.com/kendo-angular-ui/my-license/?utm_medium=product&utm_source=kendoangular&utm_campaign=kendo-ui-angular-purchase-license-keys-warning'\n};\n\nconst inDocument = element => {\n  let node = element;\n\n  while (node && node !== document.body) {\n    node = node.parentNode;\n  }\n\n  return Boolean(node);\n};\n/**\n * @hidden\n */\n\n\nlet GaugeComponent = /*#__PURE__*/(() => {\n  class GaugeComponent {\n    constructor(configurationService, themeService, intlService, localizationService, element, renderer, ngZone) {\n      this.configurationService = configurationService;\n      this.themeService = themeService;\n      this.intlService = intlService;\n      this.localizationService = localizationService;\n      this.element = element;\n      this.renderer = renderer;\n      this.ngZone = ngZone;\n      /**\n       * The maximum number of times the Gauge resizes per second.\n       * Defaults to `10`. To disable the automatic resizing, set `resizeRateLimit` to `0`.\n       */\n\n      this.resizeRateLimit = 10;\n      this.className = true;\n      this.theme = null;\n      this.rtl = false;\n      validatePackage(packageMetadata);\n    }\n\n    ngOnInit() {\n      this.setDirection();\n      this.subscriptions = this.intlService.changes.subscribe(this.intlChange.bind(this));\n      this.subscriptions.add(this.localizationService.changes.subscribe(this.rtlChange.bind(this)));\n    }\n\n    ngAfterViewChecked() {\n      if (typeof document === 'undefined') {\n        return;\n      }\n\n      let updateMethod;\n\n      if (!this.instance) {\n        updateMethod = this.init;\n      } else if (this.configurationService.hasChanges) {\n        updateMethod = this.updateOptions;\n      } else if (this.configurationService.valueChange) {\n        updateMethod = this.setValues;\n      }\n\n      if (updateMethod) {\n        clearTimeout(this.redrawTimeout);\n\n        if (!this.instance && !inDocument(this.element.nativeElement)) {\n          // required in case the gauge is initialized by ng-content outside of the DOM\n          this.defer(() => {\n            this.updateCall(updateMethod);\n          });\n        } else {\n          this.updateCall(updateMethod);\n        }\n      }\n    }\n\n    updateCall(updateMethod) {\n      this.updateDirection();\n      updateMethod.call(this);\n      this.updateSize();\n    }\n\n    updateOptions() {\n      this.instance.setOptions(this.configurationService.read());\n    }\n\n    setValues() {\n      this.instance.allValues(this.configurationService.readValues());\n    }\n\n    ngOnChanges(changes) {\n      this.configurationService.copyChanges('', changes);\n    }\n\n    ngOnDestroy() {\n      if (this.instance) {\n        this.instance.destroy();\n      }\n\n      this.subscriptions.unsubscribe();\n      clearTimeout(this.redrawTimeout);\n    }\n    /**\n     * Exports the Gauge as an image. The export operation is asynchronous and returns a promise.\n     *\n     * @param {ImageExportOptions} options - The parameters for the exported image.\n     * @returns {Promise<string>} - A promise that will be resolved with a PNG image that is encoded as a Data URI.\n     */\n\n\n    exportImage(options = {}) {\n      return this.exportVisual().then(visual => {\n        return exportImage(visual, options);\n      });\n    }\n    /**\n     * Exports the Gauge as an SVG document. The export operation is asynchronous and returns a promise.\n     *\n     * @param {SVGExportOptions} options - The parameters for the exported file.\n     * @returns {Promise<string>} - A promise that will be resolved with an SVG document that is encoded as a Data URI.\n     */\n\n\n    exportSVG(options = {}) {\n      return this.exportVisual().then(visual => {\n        return exportSVG(visual, options);\n      });\n    }\n    /**\n     * Exports the Gauge as a Drawing `Scene`.\n     *\n     * @returns {Promise<Group>} - A promise that will be resolved with the export visual.\n     */\n\n\n    exportVisual() {\n      return Promise.resolve(this.instance.exportVisual());\n    }\n    /**\n     * @hidden\n     */\n\n\n    onResize(_event) {\n      if (this.autoResize) {\n        this.resize();\n      }\n    }\n    /**\n     * Detects the size of the container and redraws the Gauge.\n     * Resizing is automatic unless you set the `resizeRateLimit` option to `0`.\n     */\n\n\n    resize() {\n      if (this.instance) {\n        this.instance.resize();\n      }\n    }\n\n    init() {\n      if (!this.surfaceElement) {\n        return;\n      }\n\n      this.createInstance(this.surfaceElement.nativeElement, this.configurationService.read(), this.themeService.read(), {\n        intlService: this.intlService,\n        rtl: this.rtl\n      });\n    }\n\n    get autoResize() {\n      return this.resizeRateLimit > 0;\n    }\n\n    updateSize() {\n      this.resizeSensor.acceptSize();\n    }\n\n    intlChange() {\n      if (this.instance) {\n        this.deferredRedraw();\n      }\n    }\n\n    rtlChange() {\n      if (this.instance && this.rtl !== this.isRTL) {\n        this.deferredRedraw();\n      }\n    }\n\n    deferredRedraw() {\n      this.defer(() => {\n        this.updateDirection();\n        this.instance.noTransitionsRedraw();\n      });\n    }\n\n    defer(callback) {\n      this.ngZone.runOutsideAngular(() => {\n        clearTimeout(this.redrawTimeout);\n        this.redrawTimeout = setTimeout(callback, 0);\n      });\n    }\n\n    updateDirection() {\n      const current = this.isRTL;\n\n      if (this.rtl !== current) {\n        this.setDirection();\n\n        if (this.instance) {\n          this.instance.setDirection(current);\n        }\n      }\n    }\n\n    setDirection() {\n      this.rtl = this.isRTL;\n\n      if (this.element) {\n        this.renderer.setAttribute(this.element.nativeElement, 'dir', this.rtl ? 'rtl' : 'ltr');\n      }\n    }\n\n    get isRTL() {\n      return Boolean(this.localizationService.rtl);\n    }\n\n  }\n\n  GaugeComponent.ɵfac = function GaugeComponent_Factory(t) {\n    return new (t || GaugeComponent)(i0.ɵɵdirectiveInject(ConfigurationService), i0.ɵɵdirectiveInject(ThemeService), i0.ɵɵdirectiveInject(i2.IntlService), i0.ɵɵdirectiveInject(i3.LocalizationService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n\n  GaugeComponent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: GaugeComponent,\n    viewQuery: function GaugeComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n        i0.ɵɵviewQuery(ResizeSensorComponent, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.surfaceElement = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.resizeSensor = _t.first);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function GaugeComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"k-gauge\", ctx.className);\n      }\n    },\n    inputs: {\n      gaugeArea: \"gaugeArea\",\n      renderAs: \"renderAs\",\n      resizeRateLimit: \"resizeRateLimit\",\n      scale: \"scale\",\n      transitions: \"transitions\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  return GaugeComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @hidden\n */\n\n\nlet SettingsComponent = /*#__PURE__*/(() => {\n  class SettingsComponent {\n    constructor(key, configurationService) {\n      this.key = key;\n      this.configurationService = configurationService;\n    }\n\n    ngOnChanges(changes) {\n      this.configurationService.copyChanges(this.key, changes);\n    }\n\n    ngOnDestroy() {\n      this.configurationService.set(this.key, null);\n    }\n\n  }\n\n  SettingsComponent.ɵfac = function SettingsComponent_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n\n  SettingsComponent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: SettingsComponent,\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  return SettingsComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @hidden\n */\n\n\nlet GaugeAreaComponent = /*#__PURE__*/(() => {\n  class GaugeAreaComponent extends SettingsComponent {}\n\n  GaugeAreaComponent.ɵfac = /* @__PURE__ */function () {\n    let ɵGaugeAreaComponent_BaseFactory;\n    return function GaugeAreaComponent_Factory(t) {\n      return (ɵGaugeAreaComponent_BaseFactory || (ɵGaugeAreaComponent_BaseFactory = i0.ɵɵgetInheritedFactory(GaugeAreaComponent)))(t || GaugeAreaComponent);\n    };\n  }();\n\n  GaugeAreaComponent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: GaugeAreaComponent,\n    inputs: {\n      background: \"background\",\n      border: \"border\",\n      height: \"height\",\n      margin: \"margin\",\n      width: \"width\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return GaugeAreaComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @hidden\n */\n\n\nlet LabelsComponent = /*#__PURE__*/(() => {\n  class LabelsComponent extends SettingsComponent {}\n\n  LabelsComponent.ɵfac = /* @__PURE__ */function () {\n    let ɵLabelsComponent_BaseFactory;\n    return function LabelsComponent_Factory(t) {\n      return (ɵLabelsComponent_BaseFactory || (ɵLabelsComponent_BaseFactory = i0.ɵɵgetInheritedFactory(LabelsComponent)))(t || LabelsComponent);\n    };\n  }();\n\n  LabelsComponent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: LabelsComponent,\n    inputs: {\n      background: \"background\",\n      border: \"border\",\n      color: \"color\",\n      font: \"font\",\n      format: \"format\",\n      margin: \"margin\",\n      padding: \"padding\",\n      content: \"content\",\n      visible: \"visible\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return LabelsComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @hidden\n */\n\n\nlet RangeComponent = /*#__PURE__*/(() => {\n  class RangeComponent extends CollectionItemComponent {}\n\n  RangeComponent.ɵfac = /* @__PURE__ */function () {\n    let ɵRangeComponent_BaseFactory;\n    return function RangeComponent_Factory(t) {\n      return (ɵRangeComponent_BaseFactory || (ɵRangeComponent_BaseFactory = i0.ɵɵgetInheritedFactory(RangeComponent)))(t || RangeComponent);\n    };\n  }();\n\n  RangeComponent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: RangeComponent,\n    inputs: {\n      from: \"from\",\n      to: \"to\",\n      opacity: \"opacity\",\n      color: \"color\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return RangeComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @hidden\n */\n\n\nlet ScaleComponent = /*#__PURE__*/(() => {\n  class ScaleComponent extends SettingsComponent {}\n\n  ScaleComponent.ɵfac = /* @__PURE__ */function () {\n    let ɵScaleComponent_BaseFactory;\n    return function ScaleComponent_Factory(t) {\n      return (ɵScaleComponent_BaseFactory || (ɵScaleComponent_BaseFactory = i0.ɵɵgetInheritedFactory(ScaleComponent)))(t || ScaleComponent);\n    };\n  }();\n\n  ScaleComponent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: ScaleComponent,\n    inputs: {\n      labels: \"labels\",\n      majorTicks: \"majorTicks\",\n      minorTicks: \"minorTicks\",\n      min: \"min\",\n      max: \"max\",\n      minorUnit: \"minorUnit\",\n      majorUnit: \"majorUnit\",\n      reverse: \"reverse\",\n      rangeSize: \"rangeSize\",\n      rangePlaceholderColor: \"rangePlaceholderColor\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return ScaleComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * A directive that selects a [template]({{ site.data.urls.angular['templatesyntax'] }})\n * within the `<kendo-arcgauge>` component which will be used for the center template\n * ([more information and example]({% slug centertemplate_arcgauge %})).\n *\n * @example\n * ```ts\n * import { Component } from '@angular/core';\n *\n * _@Component({\n *     selector: 'my-app',\n *     template: `\n *         <kendo-arcgauge [value]=\"value\">\n *             <ng-template kendoArcGaugeCenterTemplate let-value=\"value\">\n *                 {{ value }}%\n *             </ng-template>\n *         </kendo-arcgauge>\n *\n *     `\n * })\n * export class AppComponent {\n *   public value: number = 10;\n * }\n *\n * ```\n */\n\n\nlet ArcCenterTemplateDirective = /*#__PURE__*/(() => {\n  class ArcCenterTemplateDirective {\n    constructor(templateRef) {\n      this.templateRef = templateRef;\n    }\n\n  }\n\n  ArcCenterTemplateDirective.ɵfac = function ArcCenterTemplateDirective_Factory(t) {\n    return new (t || ArcCenterTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef, 8));\n  };\n\n  ArcCenterTemplateDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: ArcCenterTemplateDirective,\n    selectors: [[\"\", \"kendoArcGaugeCenterTemplate\", \"\"]]\n  });\n  return ArcCenterTemplateDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Represents the [Kendo UI ArcGauge component for Angular]({% slug overview_arcgauge_gauges %}).\n *\n * @example\n * ```ts\n * import { Component } from '@angular/core';\n *\n * _@Component({\n *   selector: 'my-app',\n *   template: `\n *      <kendo-arcgauge [value]=\"value\" [scale]=\"{ max: 100 }\">\n *          <ng-template kendoArcGaugeCenterTemplate let-value=\"value\">\n *              {{ value }}%\n *          </ng-template>\n *      </kendo-arcgauge>\n *   `\n * })\n * class AppComponent {\n *   public value: number = 10;\n * }\n *\n * ```\n */\n\n\nlet ArcGaugeComponent = /*#__PURE__*/(() => {\n  class ArcGaugeComponent extends GaugeComponent {\n    constructor(changeDetector, configurationService, themeService, intlService, localizationService, element, renderer, ngZone) {\n      super(configurationService, themeService, intlService, localizationService, element, renderer, ngZone);\n      this.changeDetector = changeDetector;\n      this.className = true;\n      this.centerTemplateContext = {};\n    }\n\n    ngOnInit() {\n      super.ngOnInit();\n\n      if (this.element) {\n        this.renderer.setStyle(this.element.nativeElement, 'position', 'relative');\n      }\n    }\n\n    ngAfterViewChecked() {\n      super.ngAfterViewChecked();\n\n      if (this.labelElement && !this.centerTemplate) {\n        this.changeDetector.detectChanges();\n      } else if (!this.labelElement && this.centerTemplate) {\n        this.updateCenterTemplate();\n      }\n    }\n    /**\n     * Exports the gauge as a Drawing `Scene`.\n     *\n     * @returns {Promise<Group>} - A promise that will be resolved with the export visual.\n     */\n\n\n    exportVisual() {\n      return drawDOM(this.element.nativeElement);\n    }\n    /**\n     * Detects the size of the container and redraws the Gauge.\n     * Resizing is automatic unless you set the `resizeRateLimit` option to `0`.\n     */\n\n\n    resize() {\n      super.resize();\n      this.updateCenterTemplate();\n    }\n\n    createInstance(element, options, theme, context) {\n      this.instance = new ArcGauge(element, options, theme, context);\n      this.updateElements();\n    }\n\n    updateOptions() {\n      super.updateOptions();\n      this.updateElements();\n    }\n\n    setValues() {\n      const value = this.configurationService.readValue();\n      this.instance.value(value);\n      this.updateCenterTemplate();\n    }\n\n    updateElements() {\n      this.resizeSensor.acceptSize();\n      this.updateCenterTemplate();\n    }\n\n    updateCenterTemplate() {\n      if (!this.instance || !this.centerTemplate) {\n        return;\n      }\n\n      this.centerTemplateContext.value = this.instance.value();\n      this.centerTemplateContext.color = this.instance.currentColor();\n      this.changeDetector.detectChanges();\n      this.positionLabel();\n    }\n\n    positionLabel() {\n      if (!this.labelElement) {\n        return;\n      }\n\n      const element = this.labelElement.nativeElement;\n      const width = element.offsetWidth;\n      const height = element.offsetHeight;\n      const position = this.instance.centerLabelPosition(width, height);\n      element.style.top = `${position.top}px`;\n      element.style.left = `${position.left}px`;\n    } //eslint-disable-next-line  no-empty\n\n\n    updateSize() {}\n\n  }\n\n  ArcGaugeComponent.ɵfac = function ArcGaugeComponent_Factory(t) {\n    return new (t || ArcGaugeComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(ConfigurationService), i0.ɵɵdirectiveInject(ThemeService), i0.ɵɵdirectiveInject(i2.IntlService), i0.ɵɵdirectiveInject(i3.LocalizationService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n\n  ArcGaugeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ArcGaugeComponent,\n    selectors: [[\"kendo-arcgauge\"]],\n    contentQueries: function ArcGaugeComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, ArcCenterTemplateDirective, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.centerTemplate = _t.first);\n      }\n    },\n    viewQuery: function ArcGaugeComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.labelElement = _t.first);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function ArcGaugeComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"k-arcgauge\", ctx.className);\n      }\n    },\n    inputs: {\n      value: \"value\",\n      color: \"color\",\n      colors: \"colors\",\n      opacity: \"opacity\",\n      scale: \"scale\"\n    },\n    exportAs: [\"kendoArcGauge\"],\n    features: [i0.ɵɵProvidersFeature([ConfigurationService, LocalizationService, {\n      provide: L10N_PREFIX,\n      useValue: 'kendo.arcgauge'\n    }]), i0.ɵɵInheritDefinitionFeature],\n    decls: 4,\n    vars: 2,\n    consts: [[1, \"k-chart-surface\"], [\"surface\", \"\"], [\"class\", \"k-arcgauge-label\", 4, \"ngIf\"], [3, \"rateLimit\", \"resize\"], [1, \"k-arcgauge-label\"], [\"label\", \"\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function ArcGaugeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0, 1);\n        i0.ɵɵtemplate(2, ArcGaugeComponent_div_2_Template, 3, 2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"kendo-resize-sensor\", 3);\n        i0.ɵɵlistener(\"resize\", function ArcGaugeComponent_Template_kendo_resize_sensor_resize_3_listener($event) {\n          return ctx.onResize($event);\n        });\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.centerTemplate);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"rateLimit\", ctx.resizeRateLimit);\n      }\n    },\n    directives: [i4.ResizeSensorComponent, i5.NgIf, i5.NgTemplateOutlet],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return ArcGaugeComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * The configuration options of the ArcGauge area.\n * Represents the entire visible area of the ArcGauge.\n */\n\n\nlet ArcGaugeAreaComponent = /*#__PURE__*/(() => {\n  class ArcGaugeAreaComponent extends GaugeAreaComponent {\n    constructor(configurationService) {\n      super('gaugeArea', configurationService);\n      this.configurationService = configurationService;\n    }\n\n  }\n\n  ArcGaugeAreaComponent.ɵfac = function ArcGaugeAreaComponent_Factory(t) {\n    return new (t || ArcGaugeAreaComponent)(i0.ɵɵdirectiveInject(ConfigurationService));\n  };\n\n  ArcGaugeAreaComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ArcGaugeAreaComponent,\n    selectors: [[\"kendo-arcgauge-area\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function ArcGaugeAreaComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return ArcGaugeAreaComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * The configuration options for the scale of the ArcGauge\n * ([see example]({% slug scaleoptions_arcgauge %})).\n */\n\n\nlet ArcScaleComponent = /*#__PURE__*/(() => {\n  class ArcScaleComponent extends ScaleComponent {\n    constructor(configurationService) {\n      super('scale', configurationService);\n      this.configurationService = configurationService;\n    }\n\n  }\n\n  ArcScaleComponent.ɵfac = function ArcScaleComponent_Factory(t) {\n    return new (t || ArcScaleComponent)(i0.ɵɵdirectiveInject(ConfigurationService));\n  };\n\n  ArcScaleComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ArcScaleComponent,\n    selectors: [[\"kendo-arcgauge-scale\"]],\n    inputs: {\n      labels: \"labels\",\n      rangeDistance: \"rangeDistance\",\n      rangeLineCap: \"rangeLineCap\",\n      startAngle: \"startAngle\",\n      endAngle: \"endAngle\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function ArcScaleComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return ArcScaleComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * The configuration options for the scale labels of the RadialGauge.\n */\n\n\nlet RadialLabelsComponent = /*#__PURE__*/(() => {\n  class RadialLabelsComponent extends LabelsComponent {\n    constructor(configurationService) {\n      super('scale.labels', configurationService);\n      this.configurationService = configurationService;\n    }\n\n  }\n\n  RadialLabelsComponent.ɵfac = function RadialLabelsComponent_Factory(t) {\n    return new (t || RadialLabelsComponent)(i0.ɵɵdirectiveInject(ConfigurationService));\n  };\n\n  RadialLabelsComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: RadialLabelsComponent,\n    selectors: [[\"kendo-radialgauge-scale-labels\"]],\n    inputs: {\n      position: \"position\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function RadialLabelsComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return RadialLabelsComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * The configuration options for the scale labels of the ArcGauge.\n */\n\n\nlet ArcLabelsComponent = /*#__PURE__*/(() => {\n  class ArcLabelsComponent extends RadialLabelsComponent {\n    constructor(configurationService) {\n      super(configurationService);\n      this.configurationService = configurationService;\n      configurationService.set(`${this.key}.visible`, true);\n    }\n\n  }\n\n  ArcLabelsComponent.ɵfac = function ArcLabelsComponent_Factory(t) {\n    return new (t || ArcLabelsComponent)(i0.ɵɵdirectiveInject(ConfigurationService));\n  };\n\n  ArcLabelsComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ArcLabelsComponent,\n    selectors: [[\"kendo-arcgauge-scale-labels\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function ArcLabelsComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return ArcLabelsComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * The configuration options for an ArcGauge color item.\n */\n\n\nlet ColorComponent = /*#__PURE__*/(() => {\n  class ColorComponent extends CollectionItemComponent {\n    constructor(configurationService, collectionChangesService) {\n      super(configurationService, collectionChangesService);\n    }\n\n  }\n\n  ColorComponent.ɵfac = function ColorComponent_Factory(t) {\n    return new (t || ColorComponent)(i0.ɵɵdirectiveInject(ConfigurationService), i0.ɵɵdirectiveInject(CollectionChangesService));\n  };\n\n  ColorComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ColorComponent,\n    selectors: [[\"kendo-arcgauge-color\"]],\n    inputs: {\n      color: \"color\",\n      opacity: \"opacity\",\n      from: \"from\",\n      to: \"to\"\n    },\n    features: [i0.ɵɵProvidersFeature([ConfigurationService]), i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function ColorComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return ColorComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * A collection of one or more ArcGauge colors\n * ([more information and example]({% slug colorranges_arcgauge %})).\n *\n * @example\n * ```ts\n * import { Component } from '@angular/core';\n *\n * _@Component({\n *     selector: 'my-app',\n *     template: `\n *         <kendo-arcgauge [value]=\"value\">\n *              <kendo-arcgauge-colors>\n *                  <kendo-arcgauge-color *ngFor=\"let item of colors\"\n *                      [from]=\"item.from\" [to]=\"item.to\" [color]=\"item.color\">\n *                  </kendo-arcgauge-color>\n *              </kendo-arcgauge-colors>\n *         </kendo-arcgauge>\n *     `\n * })\n * export class AppComponent {\n *     public value: number = 10;\n *\n *     public colors: any[] = [{\n *         to: 25,\n *         color: '#0058e9'\n *     }, {\n *         from: 25,\n *         to: 50,\n *         color: '#37b400'\n *     }, {\n *         from: 50,\n *         to: 75,\n *         color: '#ffc000'\n *     }, {\n *         from: 75,\n *         color: '#f31700'\n *     }];\n * }\n *\n * ```\n */\n\n\nlet ColorsComponent = /*#__PURE__*/(() => {\n  class ColorsComponent extends CollectionComponent {\n    constructor(configurationService, collectionChangesService) {\n      super('colors', configurationService, collectionChangesService);\n    }\n\n  }\n\n  ColorsComponent.ɵfac = function ColorsComponent_Factory(t) {\n    return new (t || ColorsComponent)(i0.ɵɵdirectiveInject(ConfigurationService), i0.ɵɵdirectiveInject(CollectionChangesService));\n  };\n\n  ColorsComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ColorsComponent,\n    selectors: [[\"kendo-arcgauge-colors\"]],\n    contentQueries: function ColorsComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, ColorComponent, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.children = _t);\n      }\n    },\n    features: [i0.ɵɵProvidersFeature([CollectionChangesService]), i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function ColorsComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return ColorsComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst DIRECTIVES$3 = [ArcGaugeComponent, ArcCenterTemplateDirective, ArcGaugeAreaComponent, ArcScaleComponent, ArcLabelsComponent, ColorsComponent, ColorComponent];\n/**\n * A [module]({{ site.data.urls.angular['ngmodules'] }}) that includes the ArcGauge component and its directives.\n * Imports the `ArcGaugeModule` into your application\n * [root module]({{ site.data.urls.angular['ngmodules'] }}#angular-modularity) or any other sub-module\n * that will use the ArcGauge component.\n *\n * @example\n * ```ts-no-run\n * import { NgModule } from '@angular/core';\n * import { BrowserModule } from '@angular/platform-browser';\n * import { ArcGaugeModule } from '@progress/kendo-angular-gauges';\n * import { AppComponent } from './app.component';\n *\n * _@NgModule({\n *     bootstrap:    [AppComponent],\n *     declarations: [AppComponent],\n *     imports:      [BrowserModule, ArcGaugeModule]\n * })\n * export class AppModule {\n * }\n * ```\n */\n\nlet ArcGaugeModule = /*#__PURE__*/(() => {\n  class ArcGaugeModule {}\n\n  ArcGaugeModule.ɵfac = function ArcGaugeModule_Factory(t) {\n    return new (t || ArcGaugeModule)();\n  };\n\n  ArcGaugeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ArcGaugeModule\n  });\n  ArcGaugeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[SharedModule, CommonModule]]\n  });\n  return ArcGaugeModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Represents the [Kendo UI LinearGauge component for Angular]({% slug overview_lineargauge_gauges %}).\n *\n * @example\n * ```ts\n * import { Component } from '@angular/core';\n *\n * _@Component({\n *   selector: 'my-app',\n *   template: `\n *      <kendo-lineargauge [pointer]=\"{ value: value }\">\n *      </kendo-lineargauge>\n *   `\n * })\n * class AppComponent {\n *   public value: number = 10;\n * }\n *\n * ```\n */\n\n\nlet LinearGaugeComponent = /*#__PURE__*/(() => {\n  class LinearGaugeComponent extends GaugeComponent {\n    constructor(configurationService, themeService, intlService, localizationService, element, renderer, ngZone) {\n      super(configurationService, themeService, intlService, localizationService, element, renderer, ngZone);\n    }\n\n    createInstance(element, options, theme, context) {\n      this.instance = new LinearGauge(element, options, theme, context);\n    }\n\n  }\n\n  LinearGaugeComponent.ɵfac = function LinearGaugeComponent_Factory(t) {\n    return new (t || LinearGaugeComponent)(i0.ɵɵdirectiveInject(ConfigurationService), i0.ɵɵdirectiveInject(ThemeService), i0.ɵɵdirectiveInject(i2.IntlService), i0.ɵɵdirectiveInject(i3.LocalizationService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n\n  LinearGaugeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: LinearGaugeComponent,\n    selectors: [[\"kendo-lineargauge\"]],\n    inputs: {\n      pointer: \"pointer\",\n      scale: \"scale\"\n    },\n    exportAs: [\"kendoLinearGauge\"],\n    features: [i0.ɵɵProvidersFeature([ConfigurationService, LocalizationService, {\n      provide: L10N_PREFIX,\n      useValue: 'kendo.lineargauge'\n    }]), i0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 1,\n    consts: [[1, \"k-chart-surface\"], [\"surface\", \"\"], [3, \"rateLimit\", \"resize\"]],\n    template: function LinearGaugeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0, 1);\n        i0.ɵɵelementStart(2, \"kendo-resize-sensor\", 2);\n        i0.ɵɵlistener(\"resize\", function LinearGaugeComponent_Template_kendo_resize_sensor_resize_2_listener($event) {\n          return ctx.onResize($event);\n        });\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"rateLimit\", ctx.resizeRateLimit);\n      }\n    },\n    directives: [i4.ResizeSensorComponent],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return LinearGaugeComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * The configuration options for the LinearGauge area.\n * Represents the entire visible area of the LinearGauge.\n */\n\n\nlet LinearGaugeAreaComponent = /*#__PURE__*/(() => {\n  class LinearGaugeAreaComponent extends GaugeAreaComponent {\n    constructor(configurationService) {\n      super('gaugeArea', configurationService);\n      this.configurationService = configurationService;\n    }\n\n  }\n\n  LinearGaugeAreaComponent.ɵfac = function LinearGaugeAreaComponent_Factory(t) {\n    return new (t || LinearGaugeAreaComponent)(i0.ɵɵdirectiveInject(ConfigurationService));\n  };\n\n  LinearGaugeAreaComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: LinearGaugeAreaComponent,\n    selectors: [[\"kendo-lineargauge-area\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function LinearGaugeAreaComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return LinearGaugeAreaComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * The configuration options for the scale of the LinearGauge\n * ([see example]({% slug scaleoptions_lineargauge %})).\n */\n\n\nlet LinearScaleComponent = /*#__PURE__*/(() => {\n  class LinearScaleComponent extends ScaleComponent {\n    constructor(configurationService) {\n      super('scale', configurationService);\n      this.configurationService = configurationService;\n    }\n\n  }\n\n  LinearScaleComponent.ɵfac = function LinearScaleComponent_Factory(t) {\n    return new (t || LinearScaleComponent)(i0.ɵɵdirectiveInject(ConfigurationService));\n  };\n\n  LinearScaleComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: LinearScaleComponent,\n    selectors: [[\"kendo-lineargauge-scale\"]],\n    inputs: {\n      line: \"line\",\n      ranges: \"ranges\",\n      mirror: \"mirror\",\n      vertical: \"vertical\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function LinearScaleComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return LinearScaleComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * The configuration options for the scale labels of the LinearGauge.\n */\n\n\nlet LinearLabelsComponent = /*#__PURE__*/(() => {\n  class LinearLabelsComponent extends LabelsComponent {\n    constructor(configurationService) {\n      super('scale.labels', configurationService);\n      this.configurationService = configurationService;\n    }\n\n  }\n\n  LinearLabelsComponent.ɵfac = function LinearLabelsComponent_Factory(t) {\n    return new (t || LinearLabelsComponent)(i0.ɵɵdirectiveInject(ConfigurationService));\n  };\n\n  LinearLabelsComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: LinearLabelsComponent,\n    selectors: [[\"kendo-lineargauge-scale-labels\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function LinearLabelsComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return LinearLabelsComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * The configuration options for a pointer item of a LinearGauge.\n */\n\n\nlet LinearPointerComponent = /*#__PURE__*/(() => {\n  class LinearPointerComponent extends CollectionItemComponent {\n    constructor(configurationService, collectionChangesService) {\n      super(configurationService, collectionChangesService);\n    }\n\n  }\n\n  LinearPointerComponent.ɵfac = function LinearPointerComponent_Factory(t) {\n    return new (t || LinearPointerComponent)(i0.ɵɵdirectiveInject(ConfigurationService), i0.ɵɵdirectiveInject(CollectionChangesService));\n  };\n\n  LinearPointerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: LinearPointerComponent,\n    selectors: [[\"kendo-lineargauge-pointer\"]],\n    inputs: {\n      border: \"border\",\n      color: \"color\",\n      margin: \"margin\",\n      opacity: \"opacity\",\n      shape: \"shape\",\n      size: \"size\",\n      value: \"value\"\n    },\n    features: [i0.ɵɵProvidersFeature([ConfigurationService]), i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function LinearPointerComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return LinearPointerComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * A collection of one or more LinearGauge pointers\n * ([more information]({% slug multiplepointers_lineargauge %})).\n *\n * @example\n * ```ts\n * import { Component } from '@angular/core';\n *\n * _@Component({\n *     selector: 'my-app',\n *     template: `\n *         <kendo-lineargauge>\n *             <kendo-lineargauge-pointers>\n *                 <kendo-lineargauge-pointer *ngFor=\"let pointer of pointers\"\n *                     [value]=\"pointer.value\" [color]=\"pointer.color\" shape=\"barIndicator\">\n *                 </kendo-lineargauge-pointer>\n *             </kendo-lineargauge-pointers>\n *         </kendo-lineargauge>\n *     `\n * })\n * export class AppComponent {\n *     public pointers: any[] = [{\n *         value: 10,\n *         color: '#ff4500'\n *     }, {\n *         value: 12,\n *         color: '#28b4c8'\n *     }, {\n *         value: 20,\n *         color: '#8b0000'\n *     }];\n * }\n *\n * ```\n */\n\n\nlet LinearPointersComponent = /*#__PURE__*/(() => {\n  class LinearPointersComponent extends CollectionComponent {\n    constructor(configurationService, collectionChangesService) {\n      super('pointer', configurationService, collectionChangesService);\n    }\n\n  }\n\n  LinearPointersComponent.ɵfac = function LinearPointersComponent_Factory(t) {\n    return new (t || LinearPointersComponent)(i0.ɵɵdirectiveInject(ConfigurationService), i0.ɵɵdirectiveInject(CollectionChangesService));\n  };\n\n  LinearPointersComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: LinearPointersComponent,\n    selectors: [[\"kendo-lineargauge-pointers\"]],\n    contentQueries: function LinearPointersComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, LinearPointerComponent, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.children = _t);\n      }\n    },\n    features: [i0.ɵɵProvidersFeature([CollectionChangesService]), i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function LinearPointersComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return LinearPointersComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * The configuration options for a scale range item of a LinearGauge.\n */\n\n\nlet LinearRangeComponent = /*#__PURE__*/(() => {\n  class LinearRangeComponent extends RangeComponent {\n    constructor(configurationService, collectionChangesService) {\n      super(configurationService, collectionChangesService);\n    }\n\n  }\n\n  LinearRangeComponent.ɵfac = function LinearRangeComponent_Factory(t) {\n    return new (t || LinearRangeComponent)(i0.ɵɵdirectiveInject(ConfigurationService), i0.ɵɵdirectiveInject(CollectionChangesService));\n  };\n\n  LinearRangeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: LinearRangeComponent,\n    selectors: [[\"kendo-lineargauge-scale-range\"]],\n    features: [i0.ɵɵProvidersFeature([ConfigurationService]), i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function LinearRangeComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return LinearRangeComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * A collection of one or more LinearGauge scale ranges\n * ([more information and example]({% slug scaleranghes_lineargauge %})).\n *\n * @example\n * ```ts\n * import { Component } from '@angular/core';\n *\n * _@Component({\n *     selector: 'my-app',\n *     template: `\n *         <kendo-lineargauge>\n *             <kendo-lineargauge-scale>\n *                 <kendo-lineargauge-scale-ranges>\n *                     <kendo-lineargauge-scale-range *ngFor=\"let range of ranges\"\n *                         [from]=\"range.from\" [to]=\"range.to\" [color]=\"range.color\">\n *                     </kendo-lineargauge-scale-range>\n *                 </kendo-lineargauge-scale-ranges>\n *             </kendo-lineargauge-scale>\n *         </kendo-lineargauge>\n *     `\n * })\n * export class AppComponent {\n *     public ranges: any[] = [{\n *         from: 0,\n *         to: 15,\n *         color: '#ffd246'\n *     }, {\n *         from: 15,\n *         to: 30,\n *         color: '#28b4c8'\n *     }, {\n *         from: 30,\n *         to: 50,\n *         color: '#78d237'\n *     }];\n * }\n *\n * ```\n */\n\n\nlet LinearRangesComponent = /*#__PURE__*/(() => {\n  class LinearRangesComponent extends CollectionComponent {\n    constructor(configurationService, collectionChangesService) {\n      super('scale.ranges', configurationService, collectionChangesService);\n    }\n\n  }\n\n  LinearRangesComponent.ɵfac = function LinearRangesComponent_Factory(t) {\n    return new (t || LinearRangesComponent)(i0.ɵɵdirectiveInject(ConfigurationService), i0.ɵɵdirectiveInject(CollectionChangesService));\n  };\n\n  LinearRangesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: LinearRangesComponent,\n    selectors: [[\"kendo-lineargauge-scale-ranges\"]],\n    contentQueries: function LinearRangesComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, LinearRangeComponent, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.children = _t);\n      }\n    },\n    features: [i0.ɵɵProvidersFeature([CollectionChangesService]), i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function LinearRangesComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return LinearRangesComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst DIRECTIVES$2 = [LinearGaugeComponent, LinearGaugeAreaComponent, LinearScaleComponent, LinearLabelsComponent, LinearPointersComponent, LinearPointerComponent, LinearRangeComponent, LinearRangesComponent];\n/**\n * A [module]({{ site.data.urls.angular['ngmodules'] }}) that includes the LinearGauge component and its directives.\n * Imports the `LinearGaugeModule` into your application\n * [root module]({{ site.data.urls.angular['ngmodules'] }}#angular-modularity) or any other sub-module\n * that will use the LinearGauge component.\n *\n * @example\n * ```ts-no-run\n * import { NgModule } from '@angular/core';\n * import { BrowserModule } from '@angular/platform-browser';\n * import { LinearGaugeModule } from '@progress/kendo-angular-gauges';\n * import { AppComponent } from './app.component';\n *\n * _@NgModule({\n *     bootstrap:    [AppComponent],\n *     declarations: [AppComponent],\n *     imports:      [BrowserModule, LinearGaugeModule]\n * })\n * export class AppModule {\n * }\n * ```\n */\n\nlet LinearGaugeModule = /*#__PURE__*/(() => {\n  class LinearGaugeModule {}\n\n  LinearGaugeModule.ɵfac = function LinearGaugeModule_Factory(t) {\n    return new (t || LinearGaugeModule)();\n  };\n\n  LinearGaugeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: LinearGaugeModule\n  });\n  LinearGaugeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[SharedModule]]\n  });\n  return LinearGaugeModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Represents the [Kendo UI RadialGauge component for Angular]({% slug overview_radialgauge_gauges %}).\n *\n * @example\n * ```ts\n * import { Component } from '@angular/core';\n *\n * _@Component({\n *   selector: 'my-app',\n *   template: `\n *      <kendo-radialgauge [pointer]=\"{ value: value }\">\n *      </kendo-radialgauge>\n *   `\n * })\n * class AppComponent {\n *   public value: number = 10;\n * }\n *\n * ```\n */\n\n\nlet RadialGaugeComponent = /*#__PURE__*/(() => {\n  class RadialGaugeComponent extends GaugeComponent {\n    constructor(configurationService, themeService, intlService, localizationService, element, renderer, ngZone) {\n      super(configurationService, themeService, intlService, localizationService, element, renderer, ngZone);\n    }\n\n    createInstance(element, options, theme, context) {\n      this.instance = new RadialGauge(element, options, theme, context);\n    }\n\n  }\n\n  RadialGaugeComponent.ɵfac = function RadialGaugeComponent_Factory(t) {\n    return new (t || RadialGaugeComponent)(i0.ɵɵdirectiveInject(ConfigurationService), i0.ɵɵdirectiveInject(ThemeService), i0.ɵɵdirectiveInject(i2.IntlService), i0.ɵɵdirectiveInject(i3.LocalizationService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n\n  RadialGaugeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: RadialGaugeComponent,\n    selectors: [[\"kendo-radialgauge\"]],\n    inputs: {\n      pointer: \"pointer\",\n      scale: \"scale\"\n    },\n    exportAs: [\"kendoRadialGauge\"],\n    features: [i0.ɵɵProvidersFeature([ConfigurationService, LocalizationService, {\n      provide: L10N_PREFIX,\n      useValue: 'kendo.radialgauge'\n    }]), i0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 1,\n    consts: [[1, \"k-chart-surface\"], [\"surface\", \"\"], [3, \"rateLimit\", \"resize\"]],\n    template: function RadialGaugeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0, 1);\n        i0.ɵɵelementStart(2, \"kendo-resize-sensor\", 2);\n        i0.ɵɵlistener(\"resize\", function RadialGaugeComponent_Template_kendo_resize_sensor_resize_2_listener($event) {\n          return ctx.onResize($event);\n        });\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"rateLimit\", ctx.resizeRateLimit);\n      }\n    },\n    directives: [i4.ResizeSensorComponent],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return RadialGaugeComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * The configuration options for the RadialGauge area.\n * Represents the entire visible area of the RadialGauge.\n */\n\n\nlet RadialGaugeAreaComponent = /*#__PURE__*/(() => {\n  class RadialGaugeAreaComponent extends GaugeAreaComponent {\n    constructor(configurationService) {\n      super('gaugeArea', configurationService);\n      this.configurationService = configurationService;\n    }\n\n  }\n\n  RadialGaugeAreaComponent.ɵfac = function RadialGaugeAreaComponent_Factory(t) {\n    return new (t || RadialGaugeAreaComponent)(i0.ɵɵdirectiveInject(ConfigurationService));\n  };\n\n  RadialGaugeAreaComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: RadialGaugeAreaComponent,\n    selectors: [[\"kendo-radialgauge-area\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function RadialGaugeAreaComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return RadialGaugeAreaComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * The configuration options for the scale of the RadialGauge\n * ([more information and example]({% slug scaleoptions_radialgauge %})).\n */\n\n\nlet RadialScaleComponent = /*#__PURE__*/(() => {\n  class RadialScaleComponent extends ScaleComponent {\n    constructor(configurationService) {\n      super('scale', configurationService);\n      this.configurationService = configurationService;\n    }\n\n  }\n\n  RadialScaleComponent.ɵfac = function RadialScaleComponent_Factory(t) {\n    return new (t || RadialScaleComponent)(i0.ɵɵdirectiveInject(ConfigurationService));\n  };\n\n  RadialScaleComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: RadialScaleComponent,\n    selectors: [[\"kendo-radialgauge-scale\"]],\n    inputs: {\n      labels: \"labels\",\n      rangeDistance: \"rangeDistance\",\n      ranges: \"ranges\",\n      startAngle: \"startAngle\",\n      endAngle: \"endAngle\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function RadialScaleComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return RadialScaleComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * The configuration options for a pointer item of a RadialGauge.\n */\n\n\nlet RadialPointerComponent = /*#__PURE__*/(() => {\n  class RadialPointerComponent extends CollectionItemComponent {\n    constructor(configurationService, collectionChangesService) {\n      super(configurationService, collectionChangesService);\n    }\n\n  }\n\n  RadialPointerComponent.ɵfac = function RadialPointerComponent_Factory(t) {\n    return new (t || RadialPointerComponent)(i0.ɵɵdirectiveInject(ConfigurationService), i0.ɵɵdirectiveInject(CollectionChangesService));\n  };\n\n  RadialPointerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: RadialPointerComponent,\n    selectors: [[\"kendo-radialgauge-pointer\"]],\n    inputs: {\n      cap: \"cap\",\n      color: \"color\",\n      length: \"length\",\n      value: \"value\"\n    },\n    features: [i0.ɵɵProvidersFeature([ConfigurationService]), i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function RadialPointerComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return RadialPointerComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * A collection of one or more RadialGauge pointers\n * ([more information and example]({% slug multiplepointers_radialgauge %})).\n *\n * @example\n * ```ts\n * import { Component } from '@angular/core';\n *\n * _@Component({\n *     selector: 'my-app',\n *     template: `\n *         <kendo-radialgauge>\n *             <kendo-radialgauge-pointers>\n *                 <kendo-radialgauge-pointer *ngFor=\"let pointer of pointers\"\n *                     [value]=\"pointer.value\" [color]=\"pointer.color\">\n *                 </kendo-radialgauge-pointer>\n *             </kendo-radialgauge-pointers>\n *         </kendo-radialgauge>\n *     `\n * })\n * export class AppComponent {\n *     public pointers: any[] = [{\n *         value: 10,\n *         color: '#ffd246'\n *     }, {\n *         value: 20,\n *         color: '#28b4c8'\n *     }, {\n *         value: 30,\n *         color: '#78d237'\n *     }];\n * }\n *\n * ```\n */\n\n\nlet RadialPointersComponent = /*#__PURE__*/(() => {\n  class RadialPointersComponent extends CollectionComponent {\n    constructor(configurationService, collectionChangesService) {\n      super('pointer', configurationService, collectionChangesService);\n    }\n\n  }\n\n  RadialPointersComponent.ɵfac = function RadialPointersComponent_Factory(t) {\n    return new (t || RadialPointersComponent)(i0.ɵɵdirectiveInject(ConfigurationService), i0.ɵɵdirectiveInject(CollectionChangesService));\n  };\n\n  RadialPointersComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: RadialPointersComponent,\n    selectors: [[\"kendo-radialgauge-pointers\"]],\n    contentQueries: function RadialPointersComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, RadialPointerComponent, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.children = _t);\n      }\n    },\n    features: [i0.ɵɵProvidersFeature([CollectionChangesService]), i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function RadialPointersComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return RadialPointersComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * The configuration options for a scale range item of a RadialGauge.\n */\n\n\nlet RadialRangeComponent = /*#__PURE__*/(() => {\n  class RadialRangeComponent extends RangeComponent {\n    constructor(configurationService, collectionChangesService) {\n      super(configurationService, collectionChangesService);\n    }\n\n  }\n\n  RadialRangeComponent.ɵfac = function RadialRangeComponent_Factory(t) {\n    return new (t || RadialRangeComponent)(i0.ɵɵdirectiveInject(ConfigurationService), i0.ɵɵdirectiveInject(CollectionChangesService));\n  };\n\n  RadialRangeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: RadialRangeComponent,\n    selectors: [[\"kendo-radialgauge-scale-range\"]],\n    features: [i0.ɵɵProvidersFeature([ConfigurationService]), i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function RadialRangeComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return RadialRangeComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * A collection of one or more RadialGauge scale ranges\n * ([more information and example]({% slug scaleranghes_radialgauge %})).\n *\n * @example\n * ```ts\n * import { Component } from '@angular/core';\n *\n * _@Component({\n *     selector: 'my-app',\n *     template: `\n *         <kendo-radialgauge>\n *             <kendo-radialgauge-scale>\n *                 <kendo-radialgauge-scale-ranges>\n *                     <kendo-radialgauge-scale-range *ngFor=\"let range of ranges\"\n *                         [from]=\"range.from\" [to]=\"range.to\" [color]=\"range.color\">\n *                     </kendo-radialgauge-scale-range>\n *                 </kendo-radialgauge-scale-ranges>\n *             </kendo-radialgauge-scale>\n *         </kendo-radialgauge>\n *     `\n * })\n * export class AppComponent {\n *     public ranges: any[] = [{\n *         from: 0,\n *         to: 15,\n *         color: '#ffd246'\n *     }, {\n *         from: 15,\n *         to: 30,\n *         color: '#28b4c8'\n *     }, {\n *         from: 30,\n *         to: 50,\n *         color: '#78d237'\n *     }];\n * }\n *\n * ```\n */\n\n\nlet RadialRangesComponent = /*#__PURE__*/(() => {\n  class RadialRangesComponent extends CollectionComponent {\n    constructor(configurationService, collectionChangesService) {\n      super('scale.ranges', configurationService, collectionChangesService);\n    }\n\n  }\n\n  RadialRangesComponent.ɵfac = function RadialRangesComponent_Factory(t) {\n    return new (t || RadialRangesComponent)(i0.ɵɵdirectiveInject(ConfigurationService), i0.ɵɵdirectiveInject(CollectionChangesService));\n  };\n\n  RadialRangesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: RadialRangesComponent,\n    selectors: [[\"kendo-radialgauge-scale-ranges\"]],\n    contentQueries: function RadialRangesComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, RadialRangeComponent, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.children = _t);\n      }\n    },\n    features: [i0.ɵɵProvidersFeature([CollectionChangesService]), i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function RadialRangesComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return RadialRangesComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst DIRECTIVES$1 = [RadialGaugeComponent, RadialGaugeAreaComponent, RadialScaleComponent, RadialLabelsComponent, RadialPointersComponent, RadialPointerComponent, RadialRangeComponent, RadialRangesComponent];\n/**\n * A [module]({{ site.data.urls.angular['ngmodules'] }}) that includes the RadialGauge component and its directives.\n * Imports the `RadialGaugeModule` into your application\n * [root module]({{ site.data.urls.angular['ngmodules'] }}#angular-modularity) or any other sub-module\n * that will use the RadialGauge component.\n *\n * @example\n * ```ts-no-run\n * import { NgModule } from '@angular/core';\n * import { BrowserModule } from '@angular/platform-browser';\n * import { RadialGaugeModule } from '@progress/kendo-angular-gauges';\n * import { AppComponent } from './app.component';\n *\n * _@NgModule({\n *     bootstrap:    [AppComponent],\n *     declarations: [AppComponent],\n *     imports:      [BrowserModule, RadialGaugeModule]\n * })\n * export class AppModule {\n * }\n * ```\n */\n\nlet RadialGaugeModule = /*#__PURE__*/(() => {\n  class RadialGaugeModule {}\n\n  RadialGaugeModule.ɵfac = function RadialGaugeModule_Factory(t) {\n    return new (t || RadialGaugeModule)();\n  };\n\n  RadialGaugeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: RadialGaugeModule\n  });\n  RadialGaugeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[SharedModule]]\n  });\n  return RadialGaugeModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * A directive that selects a [template]({{ site.data.urls.angular['templatesyntax'] }})\n * within the `<kendo-circulargauge>` component which will be used for the center template\n * ([more information and example]({% slug centertemplate_circulargauge %})).\n *\n * @example\n * ```ts\n * import { Component } from '@angular/core';\n *\n * _@Component({\n *     selector: 'my-app',\n *     template: `\n *         <kendo-circulargauge [value]=\"value\">\n *             <ng-template kendoCircularGaugeCenterTemplate let-value=\"value\">\n *                 {{ value }}%\n *             </ng-template>\n *         </kendo-circulargauge>\n *\n *     `\n * })\n * export class AppComponent {\n *   public value: number = 10;\n * }\n *\n * ```\n */\n\n\nlet CircularGaugeCenterTemplateDirective = /*#__PURE__*/(() => {\n  class CircularGaugeCenterTemplateDirective {\n    constructor(templateRef) {\n      this.templateRef = templateRef;\n    }\n\n  }\n\n  CircularGaugeCenterTemplateDirective.ɵfac = function CircularGaugeCenterTemplateDirective_Factory(t) {\n    return new (t || CircularGaugeCenterTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef, 8));\n  };\n\n  CircularGaugeCenterTemplateDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CircularGaugeCenterTemplateDirective,\n    selectors: [[\"\", \"kendoCircularGaugeCenterTemplate\", \"\"]]\n  });\n  return CircularGaugeCenterTemplateDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Represents the [Kendo UI CircularGauge component for Angular]({% slug overview_circulargauge_gauges %}).\n *\n * @example\n * ```ts\n * import { Component } from '@angular/core';\n *\n * _@Component({\n *   selector: 'my-app',\n *   template: `\n *      <kendo-circulargauge [value]=\"value\" [scale]=\"{ max: 100 }\">\n *          <ng-template kendoCircularGaugeCenterTemplate let-value=\"value\">\n *              {{ value }}%\n *          </ng-template>\n *      </kendo-circulargauge>\n *   `\n * })\n * class AppComponent {\n *   public value: number = 10;\n * }\n *\n * ```\n */\n\n\nlet CircularGaugeComponent = /*#__PURE__*/(() => {\n  class CircularGaugeComponent extends ArcGaugeComponent {\n    createInstance(element, options, theme, context) {\n      this.instance = new CircularGauge(element, options, theme, context);\n      this.updateElements();\n    }\n\n  }\n\n  CircularGaugeComponent.ɵfac = /* @__PURE__ */function () {\n    let ɵCircularGaugeComponent_BaseFactory;\n    return function CircularGaugeComponent_Factory(t) {\n      return (ɵCircularGaugeComponent_BaseFactory || (ɵCircularGaugeComponent_BaseFactory = i0.ɵɵgetInheritedFactory(CircularGaugeComponent)))(t || CircularGaugeComponent);\n    };\n  }();\n\n  CircularGaugeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CircularGaugeComponent,\n    selectors: [[\"kendo-circulargauge\"]],\n    contentQueries: function CircularGaugeComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, CircularGaugeCenterTemplateDirective, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.centerTemplate = _t.first);\n      }\n    },\n    inputs: {\n      scale: \"scale\"\n    },\n    exportAs: [\"kendoCircularGauge\"],\n    features: [i0.ɵɵProvidersFeature([ConfigurationService, LocalizationService, {\n      provide: L10N_PREFIX,\n      useValue: 'kendo.circulargauge'\n    }]), i0.ɵɵInheritDefinitionFeature],\n    decls: 4,\n    vars: 2,\n    consts: [[1, \"k-chart-surface\"], [\"surface\", \"\"], [\"class\", \"k-arcgauge-label\", 4, \"ngIf\"], [3, \"rateLimit\", \"resize\"], [1, \"k-arcgauge-label\"], [\"label\", \"\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function CircularGaugeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0, 1);\n        i0.ɵɵtemplate(2, CircularGaugeComponent_div_2_Template, 3, 2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"kendo-resize-sensor\", 3);\n        i0.ɵɵlistener(\"resize\", function CircularGaugeComponent_Template_kendo_resize_sensor_resize_3_listener($event) {\n          return ctx.onResize($event);\n        });\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.centerTemplate);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"rateLimit\", ctx.resizeRateLimit);\n      }\n    },\n    directives: [i4.ResizeSensorComponent, i5.NgIf, i5.NgTemplateOutlet],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return CircularGaugeComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * The configuration options of the Circular Gauge area.\n * Represents the entire visible area of the Circular Gauge.\n */\n\n\nlet CircularGaugeAreaComponent = /*#__PURE__*/(() => {\n  class CircularGaugeAreaComponent extends ArcGaugeAreaComponent {}\n\n  CircularGaugeAreaComponent.ɵfac = /* @__PURE__ */function () {\n    let ɵCircularGaugeAreaComponent_BaseFactory;\n    return function CircularGaugeAreaComponent_Factory(t) {\n      return (ɵCircularGaugeAreaComponent_BaseFactory || (ɵCircularGaugeAreaComponent_BaseFactory = i0.ɵɵgetInheritedFactory(CircularGaugeAreaComponent)))(t || CircularGaugeAreaComponent);\n    };\n  }();\n\n  CircularGaugeAreaComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CircularGaugeAreaComponent,\n    selectors: [[\"kendo-circulargauge-area\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function CircularGaugeAreaComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return CircularGaugeAreaComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * The configuration options for the scale of the Circular Gauge\n * ([see example]({% slug scaleoptions_circulargauge %})).\n */\n\n\nlet CircularGaugeScaleComponent = /*#__PURE__*/(() => {\n  class CircularGaugeScaleComponent extends ArcScaleComponent {}\n\n  CircularGaugeScaleComponent.ɵfac = /* @__PURE__ */function () {\n    let ɵCircularGaugeScaleComponent_BaseFactory;\n    return function CircularGaugeScaleComponent_Factory(t) {\n      return (ɵCircularGaugeScaleComponent_BaseFactory || (ɵCircularGaugeScaleComponent_BaseFactory = i0.ɵɵgetInheritedFactory(CircularGaugeScaleComponent)))(t || CircularGaugeScaleComponent);\n    };\n  }();\n\n  CircularGaugeScaleComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CircularGaugeScaleComponent,\n    selectors: [[\"kendo-circulargauge-scale\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function CircularGaugeScaleComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return CircularGaugeScaleComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * The configuration options for the scale labels of the Circular Gauge.\n */\n\n\nlet CircularGaugeLabelsComponent = /*#__PURE__*/(() => {\n  class CircularGaugeLabelsComponent extends ArcLabelsComponent {}\n\n  CircularGaugeLabelsComponent.ɵfac = /* @__PURE__ */function () {\n    let ɵCircularGaugeLabelsComponent_BaseFactory;\n    return function CircularGaugeLabelsComponent_Factory(t) {\n      return (ɵCircularGaugeLabelsComponent_BaseFactory || (ɵCircularGaugeLabelsComponent_BaseFactory = i0.ɵɵgetInheritedFactory(CircularGaugeLabelsComponent)))(t || CircularGaugeLabelsComponent);\n    };\n  }();\n\n  CircularGaugeLabelsComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CircularGaugeLabelsComponent,\n    selectors: [[\"kendo-circulargauge-scale-labels\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function CircularGaugeLabelsComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return CircularGaugeLabelsComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst DIRECTIVES = [CircularGaugeComponent, CircularGaugeCenterTemplateDirective, CircularGaugeAreaComponent, CircularGaugeScaleComponent, CircularGaugeLabelsComponent];\n/**\n * A [module]({{ site.data.urls.angular['ngmodules'] }}) that includes the CircularGauge component and its directives.\n * Imports the `CircularGaugeModule` into your application\n * [root module]({{ site.data.urls.angular['ngmodules'] }}#angular-modularity) or any other sub-module\n * that will use the CircularGauge component.\n *\n * @example\n * ```ts-no-run\n * import { NgModule } from '@angular/core';\n * import { BrowserModule } from '@angular/platform-browser';\n * import { CircularGaugeModule } from '@progress/kendo-angular-gauges';\n * import { AppComponent } from './app.component';\n *\n * _@NgModule({\n *     bootstrap:    [AppComponent],\n *     declarations: [AppComponent],\n *     imports:      [BrowserModule, CircularGaugeModule]\n * })\n * export class AppModule {\n * }\n * ```\n */\n\nlet CircularGaugeModule = /*#__PURE__*/(() => {\n  class CircularGaugeModule {}\n\n  CircularGaugeModule.ɵfac = function CircularGaugeModule_Factory(t) {\n    return new (t || CircularGaugeModule)();\n  };\n\n  CircularGaugeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: CircularGaugeModule\n  });\n  CircularGaugeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[SharedModule, CommonModule]]\n  });\n  return CircularGaugeModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * A [module]({{ site.data.urls.angular['ngmodules'] }}) that includes all Gauge components and directives.\n *\n * Imports the `GaugesModule` into your application\n * [root module]({{ site.data.urls.angular['ngmodules'] }}#angular-modularity) or any other sub-module\n * that will use the Gauge components.\n *\n * @example\n * ```ts-no-run\n * import { NgModule } from '@angular/core';\n * import { BrowserModule } from '@angular/platform-browser';\n * import { GaugesModule } from '@progress/kendo-angular-charts';\n * import { AppComponent } from './app.component';\n *\n * _@NgModule({\n *     bootstrap:    [AppComponent],\n *     declarations: [AppComponent],\n *     imports:      [BrowserModule, GaugesModule]\n * })\n * export class AppModule {\n * }\n * ```\n */\n\n\nlet GaugesModule = /*#__PURE__*/(() => {\n  class GaugesModule {}\n\n  GaugesModule.ɵfac = function GaugesModule_Factory(t) {\n    return new (t || GaugesModule)();\n  };\n\n  GaugesModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: GaugesModule\n  });\n  GaugesModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [ArcGaugeModule, CircularGaugeModule, LinearGaugeModule, RadialGaugeModule]\n  });\n  return GaugesModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ArcCenterTemplateDirective, ArcGaugeAreaComponent, ArcGaugeComponent, ArcGaugeModule, ArcLabelsComponent, ArcScaleComponent, CircularGaugeAreaComponent, CircularGaugeCenterTemplateDirective, CircularGaugeComponent, CircularGaugeLabelsComponent, CircularGaugeModule, CircularGaugeScaleComponent, CollectionChangesService, CollectionComponent, CollectionItemComponent, ColorComponent, ColorsComponent, ConfigurationService, GaugeAreaComponent, GaugeComponent, GaugesModule, LabelsComponent, LinearGaugeAreaComponent, LinearGaugeComponent, LinearGaugeModule, LinearLabelsComponent, LinearPointerComponent, LinearPointersComponent, LinearRangeComponent, LinearRangesComponent, LinearScaleComponent, RadialGaugeAreaComponent, RadialGaugeComponent, RadialGaugeModule, RadialLabelsComponent, RadialPointerComponent, RadialPointersComponent, RadialRangeComponent, RadialRangesComponent, RadialScaleComponent, RangeComponent, ScaleComponent, SettingsComponent, ThemeService };","map":null,"metadata":{},"sourceType":"module"}