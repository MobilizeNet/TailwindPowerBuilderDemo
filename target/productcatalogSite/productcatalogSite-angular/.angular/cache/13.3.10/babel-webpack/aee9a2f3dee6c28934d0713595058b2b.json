{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1356);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1063:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.data\");\n    /***/\n  },\n\n  /***/\n  1112:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.userevents\");\n    /***/\n  },\n\n  /***/\n  1342:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.mobile.button\");\n    /***/\n  },\n\n  /***/\n  1356:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1063), __webpack_require__(1112), __webpack_require__(1342)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"mobile.listview\",\n        name: \"ListView\",\n        category: \"mobile\",\n        description: \"The Kendo Mobile ListView widget is used to display flat or grouped list of items.\",\n        depends: [\"data\", \"userevents\", \"mobile.button\"]\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            Node = window.Node,\n            mobile = kendo.mobile,\n            ui = mobile.ui,\n            outerHeight = kendo._outerHeight,\n            DataSource = kendo.data.DataSource,\n            Widget = ui.DataBoundWidget,\n            ITEM_SELECTOR = \".km-list > li, > li:not(.km-group-container)\",\n            HIGHLIGHT_SELECTOR = \".km-listview-link, .km-listview-label\",\n            ICON_SELECTOR = \"[\" + kendo.attr(\"icon\") + \"]\",\n            attrValue = kendo.attrValue,\n            GROUP_CLASS = \"km-group-title\",\n            ACTIVE_CLASS = \"km-state-active\",\n            GROUP_WRAPPER = '<div class=\"' + GROUP_CLASS + '\"><div class=\"km-text\"></div></div>',\n            GROUP_TEMPLATE = kendo.template('<li><div class=\"' + GROUP_CLASS + '\"><div class=\"km-text\">#= this.headerTemplate(data) #</div></div><ul>#= kendo.render(this.template, data.items)#</ul></li>'),\n            WRAPPER = '<div class=\"km-listview-wrapper\"></div>',\n            SEARCH_TEMPLATE = kendo.template('<form class=\"km-filter-form\"><div class=\"km-filter-wrap\"><input type=\"search\" placeholder=\"#=placeholder#\"/><a href=\"\\\\#\" class=\"km-filter-reset\" title=\"Clear\"><span class=\"km-icon km-clear\"></span><span class=\"km-text\">Clear</span></a></div></form>'),\n            NS = \".kendoMobileListView\",\n            STYLED = \"styled\",\n            DATABOUND = \"dataBound\",\n            DATABINDING = \"dataBinding\",\n            ITEM_CHANGE = \"itemChange\",\n            CLICK = \"click\",\n            CHANGE = \"change\",\n            PROGRESS = \"progress\",\n            FUNCTION = \"function\",\n            whitespaceRegExp = /^\\s+$/,\n            buttonRegExp = /button/;\n\n        function whitespace() {\n          return this.nodeType === Node.TEXT_NODE && this.nodeValue.match(whitespaceRegExp);\n        }\n\n        function addIcon(item, icon) {\n          if (icon && !item[0].querySelector(\".km-icon\")) {\n            item.prepend('<span class=\"km-icon km-' + icon + '\"/>');\n          }\n        }\n\n        function enhanceItem(item) {\n          addIcon(item, attrValue(item, \"icon\"));\n          addIcon(item, attrValue(item.children(ICON_SELECTOR), \"icon\"));\n        }\n\n        function enhanceLinkItem(item) {\n          var parent = item.parent(),\n              itemAndDetailButtons = item.add(parent.children(kendo.roleSelector(\"detailbutton\"))),\n              otherNodes = parent.contents().not(itemAndDetailButtons).not(whitespace);\n\n          if (otherNodes.length) {\n            return;\n          }\n\n          item.addClass(\"km-listview-link\").attr(kendo.attr(\"role\"), \"listview-link\");\n          addIcon(item, attrValue(parent, \"icon\"));\n          addIcon(item, attrValue(item, \"icon\"));\n        }\n\n        function enhanceCheckBoxItem(label) {\n          if (!label[0].querySelector(\"input[type=checkbox],input[type=radio]\")) {\n            return;\n          }\n\n          var item = label.parent();\n\n          if (item.contents().not(label).not(function () {\n            return this.nodeType == 3;\n          })[0]) {\n            return;\n          }\n\n          label.addClass(\"km-listview-label\");\n          label.children(\"[type=checkbox],[type=radio]\").addClass(\"km-widget km-icon km-check\");\n        }\n\n        function putAt(element, top) {\n          $(element).css('transform', 'translate3d(0px, ' + top + 'px, 0px)');\n        }\n\n        var HeaderFixer = kendo.Class.extend({\n          init: function (listView) {\n            var scroller = listView.scroller();\n\n            if (!scroller) {\n              return;\n            }\n\n            this.options = listView.options;\n            this.element = listView.element;\n            this.scroller = listView.scroller();\n\n            this._shouldFixHeaders();\n\n            var headerFixer = this;\n\n            var cacheHeaders = function () {\n              headerFixer._cacheHeaders();\n            };\n\n            listView.bind(\"resize\", cacheHeaders);\n            listView.bind(STYLED, cacheHeaders);\n            listView.bind(DATABOUND, cacheHeaders);\n\n            this._scrollHandler = function (e) {\n              headerFixer._fixHeader(e);\n            };\n\n            scroller.bind(\"scroll\", this._scrollHandler);\n          },\n          destroy: function () {\n            var that = this;\n\n            if (that.scroller) {\n              that.scroller.unbind(\"scroll\", that._scrollHandler);\n            }\n          },\n          _fixHeader: function (e) {\n            if (!this.fixedHeaders) {\n              return;\n            }\n\n            var i = 0,\n                scroller = this.scroller,\n                headers = this.headers,\n                scrollTop = e.scrollTop,\n                headerPair,\n                offset,\n                header;\n\n            do {\n              headerPair = headers[i++];\n\n              if (!headerPair) {\n                header = $(\"<div />\");\n                break;\n              }\n\n              offset = headerPair.offset;\n              header = headerPair.header;\n            } while (offset + 1 > scrollTop);\n\n            if (this.currentHeader != i) {\n              scroller.fixedContainer.html(header.clone());\n              this.currentHeader = i;\n            }\n          },\n          _shouldFixHeaders: function () {\n            this.fixedHeaders = this.options.type === \"group\" && this.options.fixedHeaders;\n          },\n          _cacheHeaders: function () {\n            this._shouldFixHeaders();\n\n            if (!this.fixedHeaders) {\n              return;\n            }\n\n            var headers = [],\n                offset = this.scroller.scrollTop;\n            this.element.find(\".\" + GROUP_CLASS).each(function (_, header) {\n              header = $(header);\n              headers.unshift({\n                offset: header.position().top + offset,\n                header: header\n              });\n            });\n            this.headers = headers;\n\n            this._fixHeader({\n              scrollTop: offset\n            });\n          }\n        });\n\n        var DEFAULT_PULL_PARAMETERS = function () {\n          return {\n            page: 1\n          };\n        };\n\n        var RefreshHandler = kendo.Class.extend({\n          init: function (listView) {\n            var handler = this,\n                options = listView.options,\n                scroller = listView.scroller(),\n                pullParameters = options.pullParameters || DEFAULT_PULL_PARAMETERS;\n            this.listView = listView;\n            this.scroller = scroller;\n            listView.bind(\"_dataSource\", function (e) {\n              handler.setDataSource(e.dataSource);\n            });\n            scroller.setOptions({\n              pullToRefresh: true,\n              pull: function () {\n                if (!handler._pulled) {\n                  handler._pulled = true;\n                  handler.dataSource.read(pullParameters.call(listView, handler._first));\n                }\n              },\n              messages: {\n                pullTemplate: options.messages.pullTemplate,\n                releaseTemplate: options.messages.releaseTemplate,\n                refreshTemplate: options.messages.refreshTemplate\n              }\n            });\n          },\n          setDataSource: function (dataSource) {\n            var handler = this;\n            this._first = dataSource.view()[0];\n            this.dataSource = dataSource;\n            dataSource.bind(\"change\", function () {\n              handler._change();\n            });\n            dataSource.bind(\"error\", function () {\n              handler._change();\n            });\n          },\n          _change: function () {\n            var scroller = this.scroller,\n                dataSource = this.dataSource;\n\n            if (this._pulled) {\n              scroller.pullHandled();\n            }\n\n            if (this._pulled || !this._first) {\n              var view = dataSource.view();\n\n              if (view[0]) {\n                this._first = view[0];\n              }\n            }\n\n            this._pulled = false;\n          }\n        });\n        var VirtualList = kendo.Observable.extend({\n          init: function (options) {\n            var list = this;\n            kendo.Observable.fn.init.call(list);\n            list.buffer = options.buffer;\n            list.height = options.height;\n            list.item = options.item;\n            list.items = [];\n            list.footer = options.footer;\n            list.buffer.bind(\"reset\", function () {\n              list.refresh();\n            });\n          },\n          refresh: function () {\n            var buffer = this.buffer,\n                items = this.items,\n                endReached = false;\n\n            while (items.length) {\n              items.pop().destroy();\n            }\n\n            this.offset = buffer.offset;\n            var itemConstructor = this.item,\n                prevItem,\n                item;\n\n            for (var idx = 0; idx < buffer.viewSize; idx++) {\n              if (idx === buffer.total()) {\n                endReached = true;\n                break;\n              }\n\n              item = itemConstructor(this.content(this.offset + items.length));\n              item.below(prevItem);\n              prevItem = item;\n              items.push(item);\n            }\n\n            this.itemCount = items.length;\n            this.trigger(\"reset\");\n\n            this._resize();\n\n            if (endReached) {\n              this.trigger(\"endReached\");\n            }\n          },\n          totalHeight: function () {\n            if (!this.items[0]) {\n              return 0;\n            }\n\n            var list = this,\n                items = list.items,\n                top = items[0].top,\n                bottom = items[items.length - 1].bottom,\n                averageItemHeight = (bottom - top) / list.itemCount,\n                remainingItemsCount = list.buffer.length - list.offset - list.itemCount;\n            return (this.footer ? this.footer.height : 0) + bottom + remainingItemsCount * averageItemHeight;\n          },\n          batchUpdate: function (top) {\n            var height = this.height(),\n                items = this.items,\n                item,\n                initialOffset = this.offset;\n\n            if (!items[0]) {\n              return;\n            }\n\n            if (this.lastDirection) {\n              // scrolling up\n              while (items[items.length - 1].bottom > top + height * 2) {\n                if (this.offset === 0) {\n                  break;\n                }\n\n                this.offset--;\n                item = items.pop();\n                item.update(this.content(this.offset));\n                item.above(items[0]);\n                items.unshift(item);\n              }\n            } else {\n              // scrolling down\n              while (items[0].top < top - height) {\n                var nextIndex = this.offset + this.itemCount; // here, it should be offset + 1 + itemCount - 1.\n\n                if (nextIndex === this.buffer.total()) {\n                  this.trigger(\"endReached\");\n                  break;\n                }\n\n                if (nextIndex === this.buffer.length) {\n                  break;\n                }\n\n                item = items.shift();\n                item.update(this.content(this.offset + this.itemCount));\n                item.below(items[items.length - 1]);\n                items.push(item);\n                this.offset++;\n              }\n            }\n\n            if (initialOffset !== this.offset) {\n              this._resize();\n            }\n          },\n          update: function (top) {\n            var list = this,\n                items = this.items,\n                item,\n                firstItem,\n                lastItem,\n                height = this.height(),\n                itemCount = this.itemCount,\n                padding = height / 2,\n                up = (this.lastTop || 0) > top,\n                topBorder = top - padding,\n                bottomBorder = top + height + padding;\n\n            if (!items[0]) {\n              return;\n            }\n\n            this.lastTop = top;\n            this.lastDirection = up;\n\n            if (up) {\n              // scrolling up\n              if (items[0].top > topBorder && // needs reorder\n              items[items.length - 1].bottom > bottomBorder + padding && // enough padding below\n              this.offset > 0 // we are not at the top\n              ) {\n                this.offset--;\n                item = items.pop();\n                firstItem = items[0];\n                item.update(this.content(this.offset));\n                items.unshift(item);\n                item.above(firstItem);\n\n                list._resize();\n              }\n            } else {\n              // scrolling down\n              if (items[items.length - 1].bottom < bottomBorder && // needs reorder\n              items[0].top < topBorder - padding // enough padding above\n              ) {\n                var nextIndex = this.offset + itemCount; // here, it should be offset + 1 + itemCount - 1.\n\n                if (nextIndex === this.buffer.total()) {\n                  this.trigger(\"endReached\");\n                } else if (nextIndex !== this.buffer.length) {\n                  item = items.shift();\n                  lastItem = items[items.length - 1];\n                  items.push(item);\n                  item.update(this.content(this.offset + this.itemCount));\n                  list.offset++;\n                  item.below(lastItem);\n\n                  list._resize();\n                }\n              }\n            }\n          },\n          content: function (index) {\n            return this.buffer.at(index);\n          },\n          destroy: function () {\n            this.unbind();\n          },\n          _resize: function () {\n            var items = this.items,\n                top = 0,\n                bottom = 0,\n                firstItem = items[0],\n                lastItem = items[items.length - 1];\n\n            if (firstItem) {\n              top = firstItem.top;\n              bottom = lastItem.bottom;\n            }\n\n            this.trigger(\"resize\", {\n              top: top,\n              bottom: bottom\n            });\n\n            if (this.footer) {\n              this.footer.below(lastItem);\n            }\n          }\n        }); // export for testing purposes\n\n        kendo.mobile.ui.VirtualList = VirtualList;\n        var VirtualListViewItem = kendo.Class.extend({\n          init: function (listView, dataItem) {\n            var element = listView.append([dataItem], true)[0],\n                height = element.offsetHeight;\n            $.extend(this, {\n              top: 0,\n              element: element,\n              listView: listView,\n              height: height,\n              bottom: height\n            });\n          },\n          update: function (dataItem) {\n            this.element = this.listView.setDataItem(this.element, dataItem);\n          },\n          above: function (item) {\n            if (item) {\n              this.height = this.element.offsetHeight;\n              this.top = item.top - this.height;\n              this.bottom = item.top;\n              putAt(this.element, this.top);\n            }\n          },\n          below: function (item) {\n            if (item) {\n              this.height = this.element.offsetHeight;\n              this.top = item.bottom;\n              this.bottom = this.top + this.height;\n              putAt(this.element, this.top);\n            }\n          },\n          destroy: function () {\n            kendo.destroy(this.element);\n            $(this.element).remove();\n          }\n        });\n        var LOAD_ICON = '<div><span class=\"km-icon\"></span><span class=\"km-loading-left\"></span><span class=\"km-loading-right\"></span></div>';\n        var VirtualListViewLoadingIndicator = kendo.Class.extend({\n          init: function (listView) {\n            this.element = $('<li class=\"km-load-more km-scroller-refresh\" style=\"display: none\"></li>').appendTo(listView.element);\n            this._loadIcon = $(LOAD_ICON).appendTo(this.element);\n          },\n          enable: function () {\n            this.element.show();\n            this.height = outerHeight(this.element, true);\n          },\n          disable: function () {\n            this.element.hide();\n            this.height = 0;\n          },\n          below: function (item) {\n            if (item) {\n              this.top = item.bottom;\n              this.bottom = this.height + this.top;\n              putAt(this.element, this.top);\n            }\n          }\n        });\n        var VirtualListViewPressToLoadMore = VirtualListViewLoadingIndicator.extend({\n          init: function (listView, buffer) {\n            this._loadIcon = $(LOAD_ICON).hide();\n            this._loadButton = $('<a class=\"km-load\">' + listView.options.messages.loadMoreText + '</a>').hide();\n            this.element = $('<li class=\"km-load-more\" style=\"display: none\"></li>').append(this._loadIcon).append(this._loadButton).appendTo(listView.element);\n            var loadMore = this;\n\n            this._loadButton.kendoMobileButton().data(\"kendoMobileButton\").bind(\"click\", function () {\n              loadMore._hideShowButton();\n\n              buffer.next();\n            });\n\n            buffer.bind(\"resize\", function () {\n              loadMore._showLoadButton();\n            });\n            this.height = outerHeight(this.element, true);\n            this.disable();\n          },\n          _hideShowButton: function () {\n            this._loadButton.hide();\n\n            this.element.addClass(\"km-scroller-refresh\");\n\n            this._loadIcon.css('display', 'block');\n          },\n          _showLoadButton: function () {\n            this._loadButton.show();\n\n            this.element.removeClass(\"km-scroller-refresh\");\n\n            this._loadIcon.hide();\n          }\n        });\n        var VirtualListViewItemBinder = kendo.Class.extend({\n          init: function (listView) {\n            var binder = this;\n            this.chromeHeight = outerHeight(listView.wrapper.children().not(listView.element));\n            this.listView = listView;\n            this.scroller = listView.scroller();\n            this.options = listView.options;\n            listView.bind(\"_dataSource\", function (e) {\n              binder.setDataSource(e.dataSource, e.empty);\n            });\n            listView.bind(\"resize\", function () {\n              if (!binder.list.items.length) {\n                return;\n              }\n\n              binder.scroller.reset();\n              binder.buffer.range(0);\n              binder.list.refresh();\n            });\n            this.scroller.makeVirtual();\n\n            this._scroll = function (e) {\n              binder.list.update(e.scrollTop);\n            };\n\n            this.scroller.bind('scroll', this._scroll);\n\n            this._scrollEnd = function (e) {\n              binder.list.batchUpdate(e.scrollTop);\n            };\n\n            this.scroller.bind('scrollEnd', this._scrollEnd);\n          },\n          destroy: function () {\n            this.list.unbind();\n            this.buffer.unbind();\n            this.scroller.unbind('scroll', this._scroll);\n            this.scroller.unbind('scrollEnd', this._scrollEnd);\n          },\n          setDataSource: function (dataSource, empty) {\n            var binder = this,\n                options = this.options,\n                listView = this.listView,\n                scroller = listView.scroller(),\n                pressToLoadMore = options.loadMore,\n                pageSize,\n                buffer,\n                footer;\n            this.dataSource = dataSource;\n            pageSize = dataSource.pageSize() || options.virtualViewSize;\n\n            if (!pageSize && !empty) {\n              throw new Error(\"the DataSource does not have page size configured. Page Size setting is mandatory for the mobile listview virtual scrolling to work as expected.\");\n            }\n\n            if (this.buffer) {\n              this.buffer.destroy();\n            }\n\n            buffer = new kendo.data.Buffer(dataSource, Math.floor(pageSize / 2), pressToLoadMore);\n\n            if (pressToLoadMore) {\n              footer = new VirtualListViewPressToLoadMore(listView, buffer);\n            } else {\n              footer = new VirtualListViewLoadingIndicator(listView);\n            }\n\n            if (this.list) {\n              this.list.destroy();\n            }\n\n            var list = new VirtualList({\n              buffer: buffer,\n              footer: footer,\n              item: function (dataItem) {\n                return new VirtualListViewItem(listView, dataItem);\n              },\n              height: function () {\n                return scroller.height();\n              }\n            });\n            list.bind(\"resize\", function () {\n              binder.updateScrollerSize();\n              listView.updateSize();\n            });\n            list.bind(\"reset\", function () {\n              binder.footer.enable();\n            });\n            list.bind(\"endReached\", function () {\n              footer.disable();\n              binder.updateScrollerSize();\n            });\n            buffer.bind(\"expand\", function () {\n              list.lastDirection = false; // expand down\n\n              list.batchUpdate(scroller.scrollTop);\n            });\n            $.extend(this, {\n              buffer: buffer,\n              scroller: scroller,\n              list: list,\n              footer: footer\n            });\n          },\n          updateScrollerSize: function () {\n            this.scroller.virtualSize(0, this.list.totalHeight() + this.chromeHeight);\n          },\n          refresh: function () {\n            this.list.refresh();\n          },\n          reset: function () {\n            this.buffer.range(0);\n            this.list.refresh();\n          }\n        });\n        var ListViewItemBinder = kendo.Class.extend({\n          init: function (listView) {\n            var binder = this;\n            this.listView = listView;\n            this.options = listView.options;\n            var itemBinder = this;\n\n            this._refreshHandler = function (e) {\n              itemBinder.refresh(e);\n            };\n\n            this._progressHandler = function () {\n              listView.showLoading();\n            };\n\n            listView.bind(\"_dataSource\", function (e) {\n              binder.setDataSource(e.dataSource);\n            });\n          },\n          destroy: function () {\n            this._unbindDataSource();\n          },\n          reset: function () {},\n          refresh: function (e) {\n            var action = e && e.action,\n                dataItems = e && e.items,\n                listView = this.listView,\n                dataSource = this.dataSource,\n                prependOnRefresh = this.options.appendOnRefresh,\n                view = dataSource.view(),\n                groups = dataSource.group(),\n                groupedMode = groups && groups[0],\n                item;\n\n            if (action === \"itemchange\") {\n              if (!listView._hasBindingTarget()) {\n                item = listView.findByDataItem(dataItems)[0];\n\n                if (item) {\n                  listView.setDataItem(item, dataItems[0]);\n                }\n              }\n\n              return;\n            }\n\n            var removedItems, addedItems, addedDataItems;\n            var adding = action === \"add\" && !groupedMode || prependOnRefresh && !listView._filter;\n            var removing = action === \"remove\" && !groupedMode;\n\n            if (adding) {\n              // no need to unbind anything\n              removedItems = [];\n            } else if (removing) {\n              // unbind the items about to be removed;\n              removedItems = listView.findByDataItem(dataItems);\n            }\n\n            if (listView.trigger(DATABINDING, {\n              action: action || \"rebind\",\n              items: dataItems,\n              removedItems: removedItems,\n              index: e && e.index\n            })) {\n              if (this._shouldShowLoading()) {\n                listView.hideLoading();\n              }\n\n              return;\n            }\n\n            if (action === \"add\" && !groupedMode) {\n              var index = view.indexOf(dataItems[0]);\n\n              if (index > -1) {\n                addedItems = listView.insertAt(dataItems, index);\n                addedDataItems = dataItems;\n              }\n            } else if (action === \"remove\" && !groupedMode) {\n              addedItems = [];\n              listView.remove(dataItems);\n            } else if (groupedMode) {\n              listView.replaceGrouped(view);\n            } else if (prependOnRefresh && !listView._filter) {\n              addedItems = listView.prepend(view);\n              addedDataItems = view;\n            } else {\n              listView.replace(view);\n            }\n\n            if (this._shouldShowLoading()) {\n              listView.hideLoading();\n            }\n\n            listView.trigger(DATABOUND, {\n              ns: ui,\n              addedItems: addedItems,\n              addedDataItems: addedDataItems\n            });\n          },\n          setDataSource: function (dataSource) {\n            if (this.dataSource) {\n              this._unbindDataSource();\n            }\n\n            this.dataSource = dataSource;\n            dataSource.bind(CHANGE, this._refreshHandler);\n\n            if (this._shouldShowLoading()) {\n              this.dataSource.bind(PROGRESS, this._progressHandler);\n            }\n          },\n          _unbindDataSource: function () {\n            this.dataSource.unbind(CHANGE, this._refreshHandler).unbind(PROGRESS, this._progressHandler);\n          },\n          _shouldShowLoading: function () {\n            var options = this.options;\n            return !options.pullToRefresh && !options.loadMore && !options.endlessScroll;\n          }\n        });\n        var ListViewFilter = kendo.Class.extend({\n          init: function (listView) {\n            var filter = this,\n                filterable = listView.options.filterable,\n                events = \"change paste\",\n                that = this;\n            this.listView = listView;\n            this.options = filterable;\n            listView.element.before(SEARCH_TEMPLATE({\n              placeholder: filterable.placeholder || \"Search...\"\n            }));\n\n            if (filterable.autoFilter !== false) {\n              events += \" keyup\";\n            }\n\n            this.element = listView.wrapper.find(\".km-search-form\");\n            this.searchInput = listView.wrapper.find(\"input[type=search]\").closest(\"form\").on(\"submit\" + NS, function (e) {\n              e.preventDefault();\n            }).end().on(\"focus\" + NS, function () {\n              filter._oldFilter = filter.searchInput.val();\n            }).on(events.split(\" \").join(NS + \" \") + NS, this._filterChange.bind(this));\n            this.clearButton = listView.wrapper.find(\".km-filter-reset\").on(CLICK, this._clearFilter.bind(this)).hide();\n            this._dataSourceChange = this._refreshInput.bind(this);\n            listView.bind(\"_dataSource\", function (e) {\n              e.dataSource.bind(\"change\", that._dataSourceChange);\n            });\n          },\n          _refreshInput: function () {\n            var appliedFilters = this.listView.dataSource.filter();\n            var searchInput = this.listView._filter.searchInput;\n\n            if (!appliedFilters || appliedFilters.filters[0].field !== this.listView.options.filterable.field) {\n              searchInput.val(\"\");\n            } else {\n              searchInput.val(appliedFilters.filters[0].value);\n            }\n          },\n          _search: function (expr) {\n            this._filter = true;\n            this.clearButton[expr ? \"show\" : \"hide\"]();\n            this.listView.dataSource.filter(expr);\n          },\n          _filterChange: function (e) {\n            var filter = this;\n\n            if (e.type == \"paste\" && this.options.autoFilter !== false) {\n              setTimeout(function () {\n                filter._applyFilter();\n              }, 1);\n            } else {\n              this._applyFilter();\n            }\n          },\n          _applyFilter: function () {\n            var options = this.options,\n                value = this.searchInput.val(),\n                expr = value.length ? {\n              field: options.field,\n              operator: options.operator || \"startswith\",\n              ignoreCase: options.ignoreCase,\n              value: value\n            } : null;\n\n            if (value === this._oldFilter) {\n              return;\n            }\n\n            this._oldFilter = value;\n\n            this._search(expr);\n          },\n          _clearFilter: function (e) {\n            this.searchInput.val(\"\");\n\n            this._search(null);\n\n            e.preventDefault();\n          }\n        });\n        var ListView = Widget.extend({\n          init: function (element, options) {\n            var listView = this;\n            Widget.fn.init.call(this, element, options);\n            element = this.element;\n            options = this.options; // support for legacy typo in configuration options: scrollTreshold -> scrollThreshold.\n\n            if (options.scrollTreshold) {\n              options.scrollThreshold = options.scrollTreshold;\n            }\n\n            element.on(\"down\", HIGHLIGHT_SELECTOR, \"_highlight\").on(\"move up cancel\", HIGHLIGHT_SELECTOR, \"_dim\");\n            this._userEvents = new kendo.UserEvents(element, {\n              fastTap: true,\n              filter: ITEM_SELECTOR,\n              allowSelection: true,\n              tap: function (e) {\n                listView._click(e);\n              }\n            }); // HACK!!! to negate the ms touch action from the user events.\n\n            element.css(\"-ms-touch-action\", \"auto\");\n            element.wrap(WRAPPER);\n            this.wrapper = this.element.parent();\n            this._headerFixer = new HeaderFixer(this);\n            this._itemsCache = {};\n\n            this._templates();\n\n            this.virtual = options.endlessScroll || options.loadMore;\n\n            this._style();\n\n            if (this.options.$angular && (this.virtual || this.options.pullToRefresh)) {\n              setTimeout(this._start.bind(this));\n            } else {\n              this._start();\n            }\n          },\n          _start: function () {\n            var options = this.options;\n\n            if (this.options.filterable) {\n              this._filter = new ListViewFilter(this);\n            }\n\n            if (this.virtual) {\n              this._itemBinder = new VirtualListViewItemBinder(this);\n            } else {\n              this._itemBinder = new ListViewItemBinder(this);\n            }\n\n            if (this.options.pullToRefresh) {\n              this._pullToRefreshHandler = new RefreshHandler(this);\n            }\n\n            this.setDataSource(options.dataSource);\n\n            this._enhanceItems(this.items());\n\n            kendo.notify(this, ui);\n          },\n          events: [CLICK, DATABINDING, DATABOUND, ITEM_CHANGE],\n          options: {\n            name: \"ListView\",\n            style: \"\",\n            type: \"flat\",\n            autoBind: true,\n            fixedHeaders: false,\n            template: \"#:data#\",\n            headerTemplate: '<span class=\"km-text\">#:value#</span>',\n            appendOnRefresh: false,\n            loadMore: false,\n            endlessScroll: false,\n            scrollThreshold: 30,\n            pullToRefresh: false,\n            messages: {\n              loadMoreText: \"Press to load more\",\n              pullTemplate: \"Pull to refresh\",\n              releaseTemplate: \"Release to refresh\",\n              refreshTemplate: \"Refreshing\"\n            },\n            pullOffset: 140,\n            filterable: false,\n            virtualViewSize: null\n          },\n          refresh: function () {\n            this._itemBinder.refresh();\n          },\n          reset: function () {\n            this._itemBinder.reset();\n          },\n          setDataSource: function (dataSource) {\n            // the listView should have a ready datasource for MVVM to function properly. But an empty datasource should not empty the element\n            var emptyDataSource = !dataSource;\n            this.dataSource = DataSource.create(dataSource);\n            this.trigger(\"_dataSource\", {\n              dataSource: this.dataSource,\n              empty: emptyDataSource\n            });\n\n            if (this.options.autoBind && !emptyDataSource) {\n              this.items().remove();\n              this.dataSource.fetch();\n            }\n          },\n          destroy: function () {\n            Widget.fn.destroy.call(this);\n            kendo.destroy(this.element);\n\n            this._userEvents.destroy();\n\n            if (this._itemBinder) {\n              this._itemBinder.destroy();\n            }\n\n            if (this._headerFixer) {\n              this._headerFixer.destroy();\n            }\n\n            this.element.unwrap();\n            delete this.element;\n            delete this.wrapper;\n            delete this._userEvents;\n          },\n          items: function () {\n            if (this.options.type === \"group\") {\n              return this.element.find(\".km-list\").children();\n            } else {\n              return this.element.children().not('.km-load-more');\n            }\n          },\n          scroller: function () {\n            if (!this._scrollerInstance) {\n              this._scrollerInstance = this.element.closest(\".km-scroll-wrapper\").data(\"kendoMobileScroller\");\n            }\n\n            return this._scrollerInstance;\n          },\n          showLoading: function () {\n            var view = this.view();\n\n            if (view && view.loader) {\n              view.loader.show();\n            }\n          },\n          hideLoading: function () {\n            var view = this.view();\n\n            if (view && view.loader) {\n              view.loader.hide();\n            }\n          },\n          insertAt: function (dataItems, index, triggerChange) {\n            var listView = this;\n            return listView._renderItems(dataItems, function (items) {\n              if (index === 0) {\n                listView.element.prepend(items);\n              } else if (index === -1) {\n                listView.element.append(items);\n              } else {\n                listView.items().eq(index - 1).after(items);\n              }\n\n              if (triggerChange) {\n                for (var i = 0; i < items.length; i++) {\n                  listView.trigger(ITEM_CHANGE, {\n                    item: items.eq(i),\n                    data: dataItems[i],\n                    ns: ui\n                  });\n                }\n              }\n            });\n          },\n          append: function (dataItems, triggerChange) {\n            return this.insertAt(dataItems, -1, triggerChange);\n          },\n          prepend: function (dataItems, triggerChange) {\n            return this.insertAt(dataItems, 0, triggerChange);\n          },\n          replace: function (dataItems) {\n            this.options.type = \"flat\";\n\n            this._angularItems(\"cleanup\");\n\n            kendo.destroy(this.element.children());\n            this.element.empty();\n\n            this._userEvents.cancel();\n\n            this._style();\n\n            return this.insertAt(dataItems, 0);\n          },\n          replaceGrouped: function (groups) {\n            this.options.type = \"group\";\n\n            this._angularItems(\"cleanup\");\n\n            this.element.empty();\n            var items = $(kendo.render(this.groupTemplate, groups));\n\n            this._enhanceItems(items.children(\"ul\").children(\"li\"));\n\n            this.element.append(items);\n            mobile.init(items);\n\n            this._style();\n\n            this._angularItems(\"compile\");\n          },\n          remove: function (dataItems) {\n            var items = this.findByDataItem(dataItems);\n            this.angular(\"cleanup\", function () {\n              return {\n                elements: items\n              };\n            });\n            kendo.destroy(items);\n            items.remove();\n          },\n          findByDataItem: function (dataItems) {\n            var selectors = [];\n\n            for (var idx = 0, length = dataItems.length; idx < length; idx++) {\n              selectors[idx] = \"[data-\" + kendo.ns + \"uid=\" + dataItems[idx].uid + \"]\";\n            }\n\n            return this.element.find(selectors.join(\",\"));\n          },\n          // item is a DOM element, not jQuery object.\n          setDataItem: function (item, dataItem) {\n            var listView = this,\n                replaceItem = function (items) {\n              var newItem = $(items[0]);\n              kendo.destroy(item);\n              listView.angular(\"cleanup\", function () {\n                return {\n                  elements: [$(item)]\n                };\n              });\n              $(item).replaceWith(newItem);\n              listView.trigger(ITEM_CHANGE, {\n                item: newItem,\n                data: dataItem,\n                ns: ui\n              });\n            };\n\n            return this._renderItems([dataItem], replaceItem)[0];\n          },\n          updateSize: function () {\n            this._size = this.getSize();\n          },\n          _renderItems: function (dataItems, callback) {\n            var items = $(kendo.render(this.template, dataItems));\n            callback(items);\n            this.angular(\"compile\", function () {\n              return {\n                elements: items,\n                data: dataItems.map(function (data) {\n                  return {\n                    dataItem: data\n                  };\n                })\n              };\n            });\n            mobile.init(items);\n\n            this._enhanceItems(items);\n\n            return items;\n          },\n          _dim: function (e) {\n            this._toggle(e, false);\n          },\n          _highlight: function (e) {\n            this._toggle(e, true);\n          },\n          _toggle: function (e, highlight) {\n            if (e.which > 1) {\n              return;\n            }\n\n            var clicked = $(e.currentTarget),\n                item = clicked.parent(),\n                role = attrValue(clicked, \"role\") || \"\",\n                plainItem = !role.match(buttonRegExp),\n                prevented = e.isDefaultPrevented();\n\n            if (plainItem) {\n              item.toggleClass(ACTIVE_CLASS, highlight && !prevented);\n            }\n          },\n          _templates: function () {\n            var template = this.options.template,\n                headerTemplate = this.options.headerTemplate,\n                dataIDAttribute = ' data-uid=\"#=arguments[0].uid || \"\"#\"',\n                templateProxy = {},\n                groupTemplateProxy = {};\n\n            if (typeof template === FUNCTION) {\n              templateProxy.template = template;\n              template = \"#=this.template(data)#\";\n            }\n\n            this.template = kendo.template(\"<li\" + dataIDAttribute + \">\" + template + \"</li>\").bind(templateProxy);\n            groupTemplateProxy.template = this.template;\n\n            if (typeof headerTemplate === FUNCTION) {\n              groupTemplateProxy._headerTemplate = headerTemplate;\n              headerTemplate = \"#=this._headerTemplate(data)#\";\n            }\n\n            groupTemplateProxy.headerTemplate = kendo.template(headerTemplate);\n            this.groupTemplate = GROUP_TEMPLATE.bind(groupTemplateProxy);\n          },\n          _click: function (e) {\n            if (e.event.which > 1 || e.event.isDefaultPrevented()) {\n              return;\n            }\n\n            var dataItem,\n                item = e.target,\n                target = $(e.event.target),\n                buttonElement = target.closest(kendo.roleSelector(\"button\", \"detailbutton\", \"backbutton\")),\n                button = kendo.widgetInstance(buttonElement, ui),\n                id = item.attr(kendo.attr(\"uid\"));\n\n            if (id) {\n              dataItem = this.dataSource.getByUid(id);\n            }\n\n            if (this.trigger(CLICK, {\n              target: target,\n              item: item,\n              dataItem: dataItem,\n              button: button\n            })) {\n              e.preventDefault();\n            }\n          },\n          _styleGroups: function () {\n            var rootItems = this.element.children();\n            rootItems.children(\"ul\").addClass(\"km-list\");\n            rootItems.each(function () {\n              var li = $(this),\n                  groupHeader = li.contents().first();\n              li.addClass(\"km-group-container\");\n\n              if (!groupHeader.is(\"ul\") && !groupHeader.is(\"div.\" + GROUP_CLASS)) {\n                groupHeader.wrap(GROUP_WRAPPER);\n              }\n            });\n          },\n          _style: function () {\n            var options = this.options,\n                grouped = options.type === \"group\",\n                element = this.element,\n                inset = options.style === \"inset\";\n            element.addClass(\"km-listview\").toggleClass(\"km-list\", !grouped).toggleClass(\"km-virtual-list\", this.virtual).toggleClass(\"km-listinset\", !grouped && inset).toggleClass(\"km-listgroup\", grouped && !inset).toggleClass(\"km-listgroupinset\", grouped && inset);\n\n            if (!element.parents(\".km-listview\")[0]) {\n              element.closest(\".km-content\").toggleClass(\"km-insetcontent\", inset); // iOS has white background when the list is not inset.\n            }\n\n            if (grouped) {\n              this._styleGroups();\n            }\n\n            this.trigger(STYLED);\n          },\n          _enhanceItems: function (items) {\n            items.each(function () {\n              var item = $(this),\n                  child,\n                  enhanced = false;\n              item.children().each(function () {\n                child = $(this);\n\n                if (child.is(\"a\")) {\n                  enhanceLinkItem(child);\n                  enhanced = true;\n                } else if (child.is(\"label\")) {\n                  enhanceCheckBoxItem(child);\n                  enhanced = true;\n                }\n              });\n\n              if (!enhanced) {\n                enhanceItem(item);\n              }\n            });\n          }\n        });\n        ui.plugin(ListView);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}