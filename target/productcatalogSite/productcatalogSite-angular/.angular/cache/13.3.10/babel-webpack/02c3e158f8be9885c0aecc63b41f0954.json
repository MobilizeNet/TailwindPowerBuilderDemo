{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1288);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1063:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.data\");\n    /***/\n  },\n\n  /***/\n  1288:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1063), __webpack_require__(1289)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"gantt.data\",\n        name: \"GanttData\",\n        category: \"web\",\n        description: \"The Gantt Data.\",\n        depends: [\"data\", \"treelist\"],\n        hidden: true\n      };\n\n      (function ($, undefined) {\n        var isArray = Array.isArray,\n            extend = $.extend,\n            map = $.map,\n            kendoData = kendo.data,\n            Query = kendoData.Query,\n            DataSource = kendoData.DataSource,\n            TreeListDataSource = kendoData.TreeListDataSource,\n            TreeListModel = kendoData.TreeListModel,\n            PARENTIDFIELD = \"parentId\";\n\n        var createDataSource = function (type, name) {\n          return function (options) {\n            options = isArray(options) ? {\n              data: options\n            } : options;\n            var dataSource = options || {};\n            var data = dataSource.data;\n            dataSource.data = data;\n\n            if (!(dataSource instanceof type) && dataSource instanceof DataSource) {\n              throw new Error(\"Incorrect DataSource type. Only \" + name + \" instances are supported\");\n            }\n\n            return dataSource instanceof type ? dataSource : new type(dataSource);\n          };\n        };\n\n        var dateCompareValidator = function (input) {\n          if (input.filter(\"[name=end], [name=start], [name=plannedEnd], [name=plannedStart]\").length) {\n            var field = input.attr(\"name\"),\n                picker = kendo.widgetInstance(input, kendo.ui),\n                dates = {},\n                container = input,\n                editable,\n                model;\n\n            while (container !== window && !editable) {\n              container = container.parent();\n              editable = container.data(\"kendoEditable\");\n            }\n\n            model = editable ? editable.options.model : null;\n\n            if (!model) {\n              return true;\n            }\n\n            if (field.indexOf(\"planned\") >= 0) {\n              dates.plannedStart = model.plannedStart;\n              dates.plannedEnd = model.plannedEnd;\n            } else {\n              dates.start = model.start;\n              dates.end = model.end;\n            }\n\n            dates[field] = picker ? picker.value() : kendo.parseDate(input.val());\n\n            if (field.indexOf(\"planned\") >= 0) {\n              return dates.plannedStart <= dates.plannedEnd;\n            } else {\n              return dates.start <= dates.end;\n            }\n          }\n\n          return true;\n        };\n\n        var GanttDependency = kendo.data.Model.define({\n          id: \"id\",\n          fields: {\n            id: {\n              type: \"number\",\n              editable: false\n            },\n            predecessorId: {\n              type: \"number\"\n            },\n            successorId: {\n              type: \"number\"\n            },\n            type: {\n              type: \"number\"\n            }\n          }\n        });\n        var GanttDependencyDataSource = DataSource.extend({\n          init: function (options) {\n            DataSource.fn.init.call(this, extend(true, {}, {\n              schema: {\n                modelBase: GanttDependency,\n                model: GanttDependency\n              }\n            }, options));\n          },\n          dependencies: function (id) {\n            var predecessors = this.predecessors(id),\n                successors = this.successors(id);\n            predecessors.push.apply(predecessors, successors);\n            return predecessors;\n          },\n          predecessors: function (id) {\n            return this._dependencies(\"successorId\", id);\n          },\n          successors: function (id) {\n            return this._dependencies(\"predecessorId\", id);\n          },\n          _dependencies: function (field, id) {\n            var data = this.view();\n            var filter = {\n              field: field,\n              operator: \"eq\",\n              value: id\n            };\n            data = new Query(data).filter(filter).toArray();\n            return data;\n          }\n        });\n        GanttDependencyDataSource.create = createDataSource(GanttDependencyDataSource, \"GanttDependencyDataSource\");\n        var GanttTask = TreeListModel.define({\n          fields: {\n            id: {\n              type: \"number\",\n              editable: false\n            },\n            parentId: {\n              type: \"number\",\n              defaultValue: null,\n              validation: {\n                required: true\n              },\n              nullable: true\n            },\n            orderId: {\n              type: \"number\",\n              validation: {\n                required: true\n              }\n            },\n            title: {\n              type: \"string\",\n              defaultValue: \"New task\"\n            },\n            start: {\n              type: \"date\",\n              validation: {\n                required: true\n              }\n            },\n            end: {\n              type: \"date\",\n              validation: {\n                required: true,\n                dateCompare: dateCompareValidator,\n                message: \"End date should be after or equal to the start date\"\n              }\n            },\n            percentComplete: {\n              type: \"number\",\n              validation: {\n                required: true,\n                min: 0,\n                max: 1,\n                step: 0.01\n              }\n            },\n            summary: {\n              type: \"boolean\"\n            },\n            expanded: {\n              type: \"boolean\",\n              defaultValue: true\n            },\n            plannedStart: {\n              type: \"date\",\n              defaultValue: null,\n              nullable: true\n            },\n            plannedEnd: {\n              type: \"date\",\n              defaultValue: null,\n              nullable: true,\n              validation: {\n                dateCompare: dateCompareValidator,\n                message: \"Planned end date should be after or equal to the planned start date\"\n              }\n            }\n          },\n          duration: function () {\n            var end = this.end,\n                start = this.start;\n            return end - start;\n          },\n          plannedDuration: function () {\n            var end = this.plannedEnd,\n                start = this.plannedStart;\n\n            if (end && start) {\n              return end - start;\n            }\n\n            return 0;\n          },\n          isMilestone: function () {\n            return this.duration() === 0;\n          },\n          _offset: function (value) {\n            var field = [\"start\", \"end\"],\n                newValue;\n\n            for (var i = 0; i < field.length; i++) {\n              newValue = new Date(this.get(field[i]).getTime() + value);\n              this.set(field[i], newValue);\n            }\n          },\n          _offsetPlanned: function (value) {\n            var field = [\"plannedStart\", \"plannedEnd\"],\n                newValue;\n\n            for (var i = 0; i < field.length; i++) {\n              newValue = new Date(this.get(field[i]).getTime() + value);\n              this.set(field[i], newValue);\n            }\n          }\n        });\n\n        GanttTask.define = function (base, options) {\n          if (options === undefined) {\n            options = base;\n            base = GanttTask;\n          }\n\n          var parentId = options.parentId || PARENTIDFIELD;\n          options.parentIdField = parentId;\n          var model = TreeListModel.define(base, options);\n\n          if (parentId) {\n            model.parentIdField = parentId;\n          }\n\n          return model;\n        };\n\n        var GanttDataSource = TreeListDataSource.extend({\n          init: function (options) {\n            TreeListDataSource.fn.init.call(this, extend(true, {}, {\n              schema: {\n                modelBase: GanttTask,\n                model: GanttTask\n              },\n              sort: {\n                field: \"orderId\",\n                dir: \"asc\"\n              }\n            }, options));\n          },\n          add: function (task) {\n            if (!task) {\n              return;\n            }\n\n            task = this._toGanttTask(task);\n            return this.insert(this.taskSiblings(task).length, task);\n          },\n          insert: function (index, task) {\n            if (!task) {\n              return;\n            }\n\n            task = this._toGanttTask(task);\n            task.set(\"orderId\", index);\n            task = DataSource.fn.insert.call(this, index, task);\n\n            this._reorderSiblings(task, this.taskSiblings(task).length - 1);\n\n            this._resolveSummaryFields(this.taskParent(task));\n\n            return task;\n          },\n          remove: function (task) {\n            var parentId = task.get(\"parentId\"),\n                children = this.taskAllChildren(task);\n\n            this._removeItems(children);\n\n            task = TreeListDataSource.fn.remove.call(this, task);\n\n            this._childRemoved(parentId, task.get(\"orderId\"));\n\n            return task;\n          },\n          taskAllChildren: function (task) {\n            var data = [],\n                that = this;\n\n            var callback = function (task) {\n              var tasks = that.taskChildren(task);\n              data.push.apply(data, tasks);\n              map(tasks, callback);\n            };\n\n            if (!!task) {\n              callback(task);\n            } else {\n              data = this.view();\n            }\n\n            return data;\n          },\n          taskChildren: function (task, fromView) {\n            var filter = {\n              field: \"parentId\",\n              operator: \"eq\",\n              value: null\n            };\n            var order = this._sort && this._sort.length ? this._sort : {\n              field: \"orderId\",\n              dir: \"asc\"\n            };\n            var taskId, data;\n\n            if (fromView) {\n              data = this.view();\n            } else {\n              data = this.data();\n            }\n\n            if (!!task) {\n              taskId = task.get(\"id\");\n\n              if (taskId === undefined || taskId === null || taskId === \"\") {\n                return [];\n              }\n\n              filter.value = taskId;\n            }\n\n            data = new Query(data).filter(filter).sort(order).toArray();\n            return data;\n          },\n          taskLevel: function (task) {\n            var level = 0,\n                parent = this.taskParent(task);\n\n            while (parent !== null) {\n              level += 1;\n              parent = this.taskParent(parent);\n            }\n\n            return level;\n          },\n          taskParent: function (task) {\n            if (!task || task.get(\"parentId\") === null) {\n              return null;\n            }\n\n            return this.get(task.parentId);\n          },\n          taskSiblings: function (task) {\n            if (!task) {\n              return null;\n            }\n\n            var parent = this.taskParent(task);\n            return this.taskChildren(parent);\n          },\n          taskTree: function (task) {\n            var data = [],\n                current,\n                tasks = this.taskChildren(task, true);\n\n            for (var i = 0, l = tasks.length; i < l; i++) {\n              current = tasks[i];\n              data.push(current);\n\n              if (current.get(\"expanded\")) {\n                var children = this.taskTree(current);\n                data.push.apply(data, children);\n              }\n            }\n\n            return data;\n          },\n          update: function (task, taskInfo) {\n            var that = this,\n                oldValue;\n\n            var offsetChildren = function (parentTask, offset) {\n              var children = that.taskAllChildren(parentTask);\n\n              for (var i = 0, l = children.length; i < l; i++) {\n                children[i]._offset(offset);\n              }\n            };\n\n            var offsetChildrenPlanned = function (parentTask, offset) {\n              var children = that.taskAllChildren(parentTask);\n\n              for (var i = 0, l = children.length; i < l; i++) {\n                children[i]._offsetPlanned(offset);\n              }\n            };\n\n            var modelChangeHandler = function (e) {\n              var field = e.field,\n                  model = e.sender;\n\n              switch (field) {\n                case \"start\":\n                  that._resolveSummaryStart(that.taskParent(model));\n\n                  offsetChildren(model, model.get(field).getTime() - oldValue.getTime());\n                  break;\n\n                case \"end\":\n                  that._resolveSummaryEnd(that.taskParent(model));\n\n                  break;\n\n                case \"plannedStart\":\n                  that._resolveSummaryPlannedStart(that.taskParent(model));\n\n                  if (model.get(field) && oldValue) {\n                    offsetChildrenPlanned(model, model.get(field).getTime() - oldValue.getTime());\n                  }\n\n                  break;\n\n                case \"plannedEnd\":\n                  that._resolveSummaryPlannedEnd(that.taskParent(model));\n\n                  break;\n\n                case \"percentComplete\":\n                  that._resolveSummaryPercentComplete(that.taskParent(model));\n\n                  break;\n\n                case \"orderId\":\n                  that._reorderSiblings(model, oldValue);\n\n                  break;\n              }\n            };\n\n            if (taskInfo.parentId !== undefined) {\n              oldValue = task.get(\"parentId\");\n\n              if (oldValue !== taskInfo.parentId) {\n                task.set(\"parentId\", taskInfo.parentId);\n\n                that._childRemoved(oldValue, task.get(\"orderId\"));\n\n                task.set(\"orderId\", that.taskSiblings(task).length - 1);\n\n                that._resolveSummaryFields(that.taskParent(task));\n              }\n\n              delete taskInfo.parentId;\n            }\n\n            task.bind(\"change\", modelChangeHandler);\n            task.bind(\"equalSet\", modelChangeHandler);\n\n            for (var field in taskInfo) {\n              oldValue = task.get(field);\n\n              if (field === \"plannedStart\" || field === \"plannedEnd\") {\n                // Update plannedStart and plannedEnd only when oldValue is not undefined or new value is not null\n                // That limitation is needed to avoid redundant update requests when custom edit template is used\n                // and the plannedStart and plannedEnd fields are not updated upon edit\n                if (oldValue !== undefined || taskInfo[field] !== null) {\n                  task.set(field, taskInfo[field]);\n                }\n              } else if (field === \"start\" || field === \"end\") {\n                task.set(field, taskInfo[field]);\n              } else if (task.get(field) !== taskInfo[field]) {\n                task.set(field, taskInfo[field]);\n              }\n            }\n\n            task.unbind(\"change\", modelChangeHandler);\n            task.unbind(\"equalSet\", modelChangeHandler);\n          },\n          _childRemoved: function (parentId, index) {\n            var parent = parentId === null ? null : this.get(parentId),\n                children = this.taskChildren(parent);\n\n            for (var i = index, l = children.length; i < l; i++) {\n              children[i].set(\"orderId\", i);\n            }\n\n            this._resolveSummaryFields(parent);\n          },\n          _resolveSummaryFields: function (summary) {\n            if (!summary) {\n              return;\n            }\n\n            this._updateSummary(summary);\n\n            if (!this.taskChildren(summary).length) {\n              return;\n            }\n\n            this._resolveSummaryStart(summary);\n\n            this._resolveSummaryEnd(summary);\n\n            this._resolveSummaryPlannedStart(summary);\n\n            this._resolveSummaryPlannedEnd(summary);\n\n            this._resolveSummaryPercentComplete(summary);\n          },\n          _resolveSummaryStart: function (summary) {\n            var that = this;\n\n            var getSummaryStart = function (parentTask) {\n              var children = that.taskChildren(parentTask);\n              var min = children[0].start.getTime();\n              var currentMin;\n\n              for (var i = 1, l = children.length; i < l; i++) {\n                currentMin = children[i].start.getTime();\n\n                if (currentMin < min) {\n                  min = currentMin;\n                }\n              }\n\n              return new Date(min);\n            };\n\n            this._updateSummaryRecursive(summary, \"start\", getSummaryStart);\n          },\n          _resolveSummaryEnd: function (summary) {\n            var that = this;\n\n            var getSummaryEnd = function (parentTask) {\n              var children = that.taskChildren(parentTask);\n              var max = children[0].end.getTime();\n              var currentMax;\n\n              for (var i = 1, l = children.length; i < l; i++) {\n                currentMax = children[i].end.getTime();\n\n                if (currentMax > max) {\n                  max = currentMax;\n                }\n              }\n\n              return new Date(max);\n            };\n\n            this._updateSummaryRecursive(summary, \"end\", getSummaryEnd);\n          },\n          _resolveSummaryPlannedStart: function (summary) {\n            var that = this;\n\n            var getSummaryPlannedStart = function (parentTask) {\n              var children = that.taskChildren(parentTask),\n                  min = null,\n                  currentMin;\n\n              for (var i = 0, l = children.length; i < l; i++) {\n                if (children[i].plannedStart) {\n                  currentMin = children[i].plannedStart.getTime();\n\n                  if (!min || currentMin < min) {\n                    min = currentMin;\n                  }\n                }\n              }\n\n              if (!min) {\n                return null;\n              }\n\n              return new Date(min);\n            };\n\n            this._updateSummaryRecursive(summary, \"plannedStart\", getSummaryPlannedStart);\n          },\n          _resolveSummaryPlannedEnd: function (summary) {\n            var that = this;\n\n            var getSummaryPlannedEnd = function (parentTask) {\n              var children = that.taskChildren(parentTask),\n                  max = null,\n                  currentMax;\n\n              for (var i = 0, l = children.length; i < l; i++) {\n                if (children[i].plannedEnd) {\n                  currentMax = children[i].plannedEnd.getTime();\n\n                  if (!max || currentMax > max) {\n                    max = currentMax;\n                  }\n                }\n              }\n\n              if (!max) {\n                return null;\n              }\n\n              return new Date(max);\n            };\n\n            this._updateSummaryRecursive(summary, \"plannedEnd\", getSummaryPlannedEnd);\n          },\n          _resolveSummaryPercentComplete: function (summary) {\n            var that = this;\n\n            var getSummaryPercentComplete = function (parentTask) {\n              var children = that.taskChildren(parentTask);\n              var percentComplete = new Query(children).aggregate([{\n                field: \"percentComplete\",\n                aggregate: \"average\"\n              }]);\n              return percentComplete.percentComplete.average;\n            };\n\n            this._updateSummaryRecursive(summary, \"percentComplete\", getSummaryPercentComplete);\n          },\n          _reorderSiblings: function (task, oldOrderId) {\n            var orderId = task.get(\"orderId\"),\n                direction = orderId > oldOrderId,\n                startIndex = direction ? oldOrderId : orderId,\n                endIndex = direction ? orderId : oldOrderId,\n                newIndex = direction ? startIndex : startIndex + 1,\n                siblings = this.taskSiblings(task);\n\n            if (!siblings.length) {\n              return;\n            }\n\n            endIndex = Math.min(endIndex, siblings.length - 1);\n\n            for (var i = startIndex; i <= endIndex; i++) {\n              if (siblings[i] === task) {\n                continue;\n              }\n\n              siblings[i].set(\"orderId\", newIndex);\n              newIndex += 1;\n            }\n          },\n          _toGanttTask: function (task) {\n            if (!(task instanceof GanttTask)) {\n              var taskInfo = task;\n              task = DataSource.fn._createNewModel.call(this);\n              task.accept(taskInfo);\n            }\n\n            return task;\n          },\n          _updateSummary: function (task) {\n            if (task !== null) {\n              var childCount = this.taskChildren(task).length;\n              task.set(\"summary\", childCount > 0);\n            }\n          },\n          _updateSummaryRecursive: function (summary, field, callback) {\n            if (!summary) {\n              return;\n            }\n\n            var value = callback(summary);\n            summary.set(field, value);\n            var parent = this.taskParent(summary);\n\n            if (parent) {\n              this._updateSummaryRecursive(parent, field, callback);\n            }\n          }\n        });\n        GanttDataSource.create = createDataSource(GanttDataSource, \"GanttDataSource\");\n        extend(true, kendo.data, {\n          GanttDataSource: GanttDataSource,\n          GanttTask: GanttTask,\n          GanttDependencyDataSource: GanttDependencyDataSource,\n          GanttDependency: GanttDependency\n        });\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1289:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.treelist\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}