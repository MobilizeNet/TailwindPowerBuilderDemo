{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1476);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1051:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.core\");\n    /***/\n  },\n\n  /***/\n  1476:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1051)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"switch\",\n        name: \"Switch\",\n        category: \"web\",\n        description: \"The Switch widget is used to display two exclusive choices.\",\n        depends: [\"core\"]\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            NS = \".kendoSwitch\",\n            Widget = ui.Widget,\n            support = kendo.support,\n            CHANGE = \"change\",\n            switchStyles = {\n          widget: \"k-switch\",\n          track: \"k-switch-track\",\n          thumbWrapper: \"k-switch-thumb-wrap\",\n          thumb: \"k-switch-thumb\",\n          checked: \"k-switch-on\",\n          checkedLabel: \"k-switch-label-on\",\n          unchecked: \"k-switch-off\",\n          uncheckedLabel: \"k-switch-label-off\",\n          disabled: \"k-disabled\",\n          readonly: \"k-readonly\",\n          active: \"k-active\"\n        },\n            DISABLED = \"disabled\",\n            ARIA_DISABLED = \"aria-disabled\",\n            READONLY = \"readonly\",\n            ARIA_READONLY = \"aria-readonly\",\n            ARIA_CHECKED = \"aria-checked\",\n            ARIA_HIDDEN = \"aria-hidden\",\n            CHECKED = \"checked\",\n            CLICK = support.click + NS,\n            TOUCHEND = support.pointers ? \"pointerup\" : \"touchend\",\n            KEYDOWN = \"keydown\" + NS,\n            LABELIDPART = \"_label\",\n            DOT = \".\";\n        var SWITCH_TEMPLATE = kendo.template('<span class=\"#=styles.widget#\" role=\"switch\"></span>');\n        var SWITCH_TRACK_TEMPLATE = kendo.template(\"<span class='#=styles.track#'>\" + \"<span class='#=styles.checkedLabel#'>#=checked#</span>\" + \"<span class='#=styles.uncheckedLabel#'>#=unchecked#</span>\" + \"</span>\");\n        var SWITCH_THUMB_TEMPLATE = kendo.template(\"<span class='#=styles.thumbWrapper#'>\" + \"<span class='#=styles.thumb#'></span>\" + \"</span>\");\n        var Switch = Widget.extend({\n          init: function (element, options) {\n            var that = this;\n            Widget.fn.init.call(that, element, options);\n\n            that._wrapper();\n\n            that._initSettings();\n\n            that._aria();\n\n            that._attachEvents();\n\n            kendo.notify(that, kendo.ui);\n          },\n          _wrapper: function () {\n            var that = this,\n                options = that.options,\n                element = that.element[0],\n                wrapper = $(SWITCH_TEMPLATE({\n              styles: switchStyles\n            }));\n            element.type = \"checkbox\";\n            that.wrapper = that.element.wrap(wrapper).parent();\n            that.wrapper[0].style.cssText = that.element[0].style.cssText;\n            that.element.hide();\n            that.wrapper.append($(SWITCH_TRACK_TEMPLATE({\n              styles: switchStyles,\n              checked: options.messages.checked,\n              unchecked: options.messages.unchecked\n            }))).append($(SWITCH_THUMB_TEMPLATE({\n              styles: switchStyles\n            }))).addClass(element.className).removeClass('input-validation-error');\n            that.options.rounded = that.options.trackRounded;\n\n            that._applyCssClasses();\n\n            that._applyRoundedClasses();\n          },\n          _applyRoundedClasses: function (action) {\n            var that = this,\n                options = that.options,\n                trackRounded = kendo.cssProperties.getValidClass({\n              widget: options.name,\n              propName: \"rounded\",\n              value: options.trackRounded\n            }),\n                thumbRounded = kendo.cssProperties.getValidClass({\n              widget: options.name,\n              propName: \"rounded\",\n              value: options.thumbRounded\n            });\n            action = action || \"addClass\";\n            that.wrapper.find(DOT + switchStyles.track)[action](trackRounded);\n            that.wrapper.find(DOT + switchStyles.thumb)[action](thumbRounded);\n          },\n          _attachEvents: function () {\n            var that = this;\n            that.wrapper.on(CLICK, that._click.bind(that)).on(TOUCHEND, that._touchEnd.bind(that)).on(KEYDOWN, that._keydown.bind(that));\n          },\n          setOptions: function (options) {\n            var that = this,\n                messages = options.messages,\n                checkedLabel,\n                uncheckedLabel;\n\n            that._clearCssClasses(options);\n\n            that._applyRoundedClasses(\"removeClass\");\n\n            that.options = $.extend(that.options, options);\n\n            if (messages && messages.checked !== undefined) {\n              checkedLabel = that.wrapper.find(DOT + switchStyles.checkedLabel);\n              checkedLabel.text(messages.checked);\n            }\n\n            if (messages && messages.unchecked !== undefined) {\n              uncheckedLabel = that.wrapper.find(DOT + switchStyles.uncheckedLabel);\n              uncheckedLabel.text(messages.unchecked);\n            }\n\n            if (options.width) {\n              that.wrapper.css({\n                width: options.width\n              });\n            }\n\n            if (options.enabled !== undefined) {\n              that.enable(options.enabled);\n            }\n\n            if (options.readonly !== undefined) {\n              that.readonly(options.readonly);\n            }\n\n            that.check(options.checked);\n            that.options.rounded = that.options.trackRounded;\n\n            that._applyCssClasses();\n\n            that._applyRoundedClasses();\n          },\n          _initSettings: function () {\n            var that = this,\n                element = that.element[0],\n                options = that.options;\n\n            if (options.enabled) {\n              that._tabindex();\n            }\n\n            if (options.width) {\n              that.wrapper.css({\n                width: options.width\n              });\n            }\n\n            if (options.checked === null) {\n              options.checked = element.checked;\n            }\n\n            that.check(options.checked);\n            options.enabled = options.enabled && !that.element.attr(DISABLED);\n            that.enable(options.enabled);\n            options.readonly = options.readonly || !!that.element.attr(READONLY);\n            that.readonly(options.readonly);\n          },\n          _aria: function () {\n            var that = this,\n                element = that.element,\n                wrapper = that.wrapper,\n                id = element.attr(\"id\"),\n                labelFor = $(\"label[for=\\\"\" + id + \"\\\"]\"),\n                ariaLabel = element.attr(\"aria-label\"),\n                ariaLabelledBy = element.attr(\"aria-labelledby\");\n\n            if (ariaLabel) {\n              wrapper.attr(\"aria-label\", ariaLabel);\n            } else if (ariaLabelledBy) {\n              wrapper.attr(\"aria-labelledby\", ariaLabelledBy);\n            } else if (labelFor.length) {\n              var labelId = labelFor.attr(\"id\");\n\n              if (!labelId) {\n                labelId = (id || kendo.guid()) + LABELIDPART;\n                labelFor.attr(\"id\", labelId);\n              }\n\n              wrapper.attr(\"aria-labelledby\", labelId);\n            }\n          },\n          events: [CHANGE],\n          options: {\n            name: \"Switch\",\n            messages: {\n              checked: \"On\",\n              unchecked: \"Off\"\n            },\n            width: null,\n            checked: null,\n            enabled: true,\n            readonly: false,\n            size: \"medium\",\n            rounded: \"full\",\n            trackRounded: \"full\",\n            thumbRounded: \"full\"\n          },\n          check: function (checked) {\n            var that = this,\n                element = that.element[0];\n\n            if (checked === undefined) {\n              return element.checked;\n            }\n\n            if (element.checked !== checked) {\n              that.options.checked = element.checked = checked;\n            }\n\n            that.wrapper.attr(ARIA_CHECKED, checked).toggleClass(switchStyles.checked, checked).toggleClass(switchStyles.unchecked, !checked).find(\"[aria-hidden='true']\").removeAttr(ARIA_HIDDEN);\n\n            if (checked) {\n              that.element.attr(CHECKED, CHECKED);\n              that.wrapper.find(DOT + switchStyles.uncheckedLabel).attr(ARIA_HIDDEN, true);\n            } else {\n              that.element.prop(CHECKED, false);\n              that.wrapper.find(DOT + switchStyles.checkedLabel).attr(ARIA_HIDDEN, true);\n            }\n          },\n          // alias for check, NG support\n          value: function (value) {\n            if (typeof value === \"string\") {\n              value = value === \"true\";\n            } else if (value === null) {\n              value = false;\n            }\n\n            return this.check.apply(this, [value]);\n          },\n          destroy: function () {\n            Widget.fn.destroy.call(this);\n            this.wrapper.off(NS);\n          },\n          toggle: function () {\n            var that = this;\n            that.check(!that.element[0].checked);\n          },\n          enable: function (enable) {\n            var element = this.element,\n                wrapper = this.wrapper;\n\n            if (typeof enable == \"undefined\") {\n              enable = true;\n            }\n\n            this.options.enabled = enable;\n\n            if (enable) {\n              element.prop(DISABLED, false);\n              wrapper.removeAttr(ARIA_DISABLED);\n            } else {\n              element.attr(DISABLED, DISABLED);\n              wrapper.attr(ARIA_DISABLED, true);\n            }\n\n            wrapper.toggleClass(switchStyles.disabled, !enable);\n          },\n          readonly: function (readonly) {\n            var that = this,\n                element = that.element,\n                wrapper = that.wrapper;\n\n            if (typeof readonly == \"undefined\") {\n              readonly = true;\n            }\n\n            that.options.readonly = readonly;\n\n            if (readonly) {\n              element.attr(READONLY, true);\n              wrapper.attr(ARIA_READONLY, true);\n            } else {\n              element.prop(READONLY, false);\n              wrapper.removeAttr(ARIA_READONLY);\n            }\n\n            wrapper.toggleClass(switchStyles.readonly, readonly);\n          },\n          _check: function () {\n            var that = this,\n                checked = that.element[0].checked = !that.element[0].checked;\n            that.wrapper.trigger(\"focus\");\n\n            if (!that.options.enabled || that.options.readonly || that.trigger(CHANGE, {\n              checked: checked\n            })) {\n              that.element[0].checked = !checked;\n              return;\n            }\n\n            that.check(checked);\n          },\n          _keydown: function (e) {\n            if (e.keyCode === kendo.keys.SPACEBAR) {\n              this._check();\n\n              e.preventDefault();\n            }\n          },\n          _isTouch: function (event) {\n            return /touch/.test(event.type) || event.originalEvent && /touch/.test(event.originalEvent.pointerType);\n          },\n          _click: function (e) {\n            if (!this._isTouch(e) && e.which === 1) {\n              this._check();\n            }\n          },\n          _touchEnd: function (e) {\n            if (this._isTouch(e)) {\n              this._check();\n\n              e.preventDefault();\n            }\n          }\n        });\n        kendo.cssProperties.registerPrefix(\"Switch\", \"k-switch-\");\n        kendo.cssProperties.registerValues(\"Switch\", [{\n          prop: \"rounded\",\n          values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n        }]);\n        ui.plugin(Switch);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}