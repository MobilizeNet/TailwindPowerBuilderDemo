{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1699);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  20:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.core\");\n    /***/\n  },\n\n  /***/\n  962:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.popup\");\n    /***/\n  },\n\n  /***/\n  965:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.treeview\");\n    /***/\n  },\n\n  /***/\n  1666:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.numerictextbox\");\n    /***/\n  },\n\n  /***/\n  1699:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(20), __webpack_require__(962), __webpack_require__(965), __webpack_require__(1666), __webpack_require__(1700), __webpack_require__(1701)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function (kendo) {\n        var $ = kendo.jQuery;\n        var Widget = kendo.ui.Widget;\n        var classNames = {\n          details: \"k-details\",\n          button: \"k-button\",\n          detailsSummary: \"k-details-summary\",\n          detailsContent: \"k-details-content\",\n          icon: \"k-icon\",\n          iconCollapse: \"k-i-arrow-45-down-right\",\n          iconExpand: \"k-i-arrow-60-right\",\n          iconSearch: \"k-i-zoom\",\n          textbox: \"k-textbox\",\n          wrapper: \"k-spreadsheet-filter-menu\",\n          filterByCondition: \"k-spreadsheet-condition-filter\",\n          filterByValue: \"k-spreadsheet-value-filter\",\n          valuesTreeViewWrapper: \"k-spreadsheet-value-treeview-wrapper\",\n          actionButtons: \"k-action-buttons\"\n        };\n        kendo.spreadsheet.messages.filterMenu = {\n          all: \"All\",\n          sortAscending: \"Sort range A to Z\",\n          sortDescending: \"Sort range Z to A\",\n          filterByValue: \"Filter by value\",\n          filterByCondition: \"Filter by condition\",\n          apply: \"Apply\",\n          search: \"Search\",\n          addToCurrent: \"Add to current selection\",\n          clear: \"Clear\",\n          blanks: \"(Blanks)\",\n          operatorNone: \"None\",\n          and: \"AND\",\n          or: \"OR\",\n          operators: {\n            string: {\n              contains: \"Text contains\",\n              doesnotcontain: \"Text does not contain\",\n              startswith: \"Text starts with\",\n              endswith: \"Text ends with\",\n              matches: \"Text matches\",\n              doesnotmatch: \"Text does not match\"\n            },\n            date: {\n              eq: \"Date is\",\n              neq: \"Date is not\",\n              lt: \"Date is before\",\n              gt: \"Date is after\"\n            },\n            number: {\n              eq: \"Is equal to\",\n              neq: \"Is not equal to\",\n              gte: \"Is greater than or equal to\",\n              gt: \"Is greater than\",\n              lte: \"Is less than or equal to\",\n              lt: \"Is less than\"\n            }\n          }\n        };\n        var Details = Widget.extend({\n          init: function (element, options) {\n            Widget.fn.init.call(this, element, options);\n            this.element.addClass(FilterMenu.classNames.details);\n            this._summary = this.element.find(\".\" + FilterMenu.classNames.detailsSummary).on(\"click\", this._toggle.bind(this));\n            var iconClass = options.expanded ? FilterMenu.classNames.iconCollapse : FilterMenu.classNames.iconExpand;\n            this._icon = $(\"<span />\", {\n              \"class\": FilterMenu.classNames.icon + \" \" + iconClass\n            }).prependTo(this._summary);\n            this._container = kendo.wrap(this._summary.next(), true);\n\n            if (!options.expanded) {\n              this._container.hide();\n            }\n          },\n          options: {\n            name: \"Details\"\n          },\n          events: [\"toggle\"],\n          visible: function () {\n            return this.options.expanded;\n          },\n          toggle: function (show) {\n            var animation = kendo.fx(this._container).expand(\"vertical\");\n            animation.stop()[show ? \"reverse\" : \"play\"]();\n\n            this._icon.toggleClass(FilterMenu.classNames.iconExpand, show).toggleClass(FilterMenu.classNames.iconCollapse, !show);\n\n            this.options.expanded = !show;\n          },\n          _toggle: function () {\n            var show = this.visible();\n            this.toggle(show);\n            this.trigger(\"toggle\", {\n              show: show\n            });\n          }\n        });\n        kendo.data.binders.spreadsheetFilterValue = kendo.data.Binder.extend({\n          init: function (element, bindings, options) {\n            kendo.data.Binder.fn.init.call(this, element, bindings, options);\n            this._change = this.change.bind(this);\n            $(this.element).on(\"change\", this._change);\n          },\n          refresh: function () {\n            var that = this,\n                value = that.bindings.spreadsheetFilterValue.get(); //get the value from the View-Model\n\n            $(that.element).val(value instanceof Date ? \"\" : value);\n          },\n          change: function () {\n            var value = this.element.value;\n            this.bindings.spreadsheetFilterValue.set(value); //update the View-Model\n          }\n        });\n        kendo.data.binders.widget.spreadsheetFilterValue = kendo.data.Binder.extend({\n          init: function (widget, bindings, options) {\n            kendo.data.Binder.fn.init.call(this, widget.element[0], bindings, options);\n            this.widget = widget;\n            this._change = this.change.bind(this);\n            this.widget.first(\"change\", this._change);\n          },\n          refresh: function () {\n            var binding = this.bindings.spreadsheetFilterValue,\n                value = binding.get(),\n                type = $(this.widget.element).data(\"filterType\");\n\n            if (type === \"date\" && value instanceof Date || type === \"number\" && !isNaN(value)) {\n              this.widget.value(value);\n            } else {\n              this.widget.value(null);\n            }\n          },\n          change: function () {\n            var value = this.widget.value(),\n                binding = this.bindings.spreadsheetFilterValue;\n            binding.set(value);\n          }\n        });\n        var templates = {\n          filterByValue: \"<div class='\" + classNames.detailsSummary + \"'>#= messages.filterByValue #</div>\" + \"<div class='\" + classNames.detailsContent + \"'>\" + \"<div class='k-searchbox k-input k-input-md k-rounded-md k-input-solid'>\" + \"<span class='k-input-icon k-icon k-i-search'></span>\" + \"<input class='k-input-inner' autocomplete='off' placeholder='#= messages.search #' data-#=ns#bind='events: { input: filterValues }' />\" + \"</div>\" + \"<div data-#=ns#bind='visible: hasActiveSearch'><input class='k-checkbox k-checkbox-md k-rounded-md' type='checkbox' data-#=ns#bind='checked: appendToSearch' id='_#=guid#'/><label class='k-checkbox-label' for='_#=guid#'>#= messages.addToCurrent #</label></div>\" + \"<div class='\" + classNames.valuesTreeViewWrapper + \"'>\" + \"<div data-#=ns#role='treeview' \" + \"data-#=ns#checkboxes='{ checkChildren: true }' \" + \"data-#=ns#bind='source: valuesDataSource, events: { check: valuesChange, select: valueSelect }' \" + \"></div>\" + \"</div>\" + \"</div>\",\n          filterByCondition: \"<div class='\" + classNames.detailsSummary + \"'>#= messages.filterByCondition #</div>\" + \"<div class='\" + classNames.detailsContent + \"'>\" + '<div>' + '<select ' + 'aria-label=\"#= messages.filterByCondition #\" ' + 'data-#=ns#role=\"dropdownlist\"' + 'data-#=ns#bind=\"value: operator, source: operators, events: { change: operatorChange } \"' + 'data-#=ns#value-primitive=\"false\"' + 'data-#=ns#option-label=\"#=messages.operatorNone#\"' + 'data-#=ns#height=\"auto\"' + 'data-#=ns#text-field=\"text\"' + 'data-#=ns#value-field=\"unique\">' + '</select>' + '</div>' + '<div data-#=ns#bind=\"visible: isString\">' + '<input aria-label=\"string-value\" data-filter-type=\"string\" data-#=ns#bind=\"spreadsheetFilterValue: customFilter.criteria[0].value\" class=\"k-textbox\" />' + '</div>' + '<div data-#=ns#bind=\"visible: isNumber\">' + '<input aria-label=\"number-value\" data-filter-type=\"number\" data-#=ns#role=\"numerictextbox\" data-#=ns#bind=\"spreadsheetFilterValue: customFilter.criteria[0].value\" />' + '</div>' + '<div data-#=ns#bind=\"visible: isDate\">' + '<input aria-label=\"date-value\" data-filter-type=\"date\" data-#=ns#role=\"datepicker\" data-#=ns#bind=\"spreadsheetFilterValue: customFilter.criteria[0].value\" />' + '</div>' + \"</div>\",\n          menuItem: \"<li data-command='#=command#' data-dir='#=dir#'>\" + \"<span class='k-icon k-i-#=iconClass#'></span>#=text#\" + \"</li>\",\n          actionButtons: \"<button data-#=ns#bind='click: apply' class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary'><span class='k-button-text'>#=messages.apply#</span></button>\" + \"<button data-#=ns#bind='click: clear' class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-base'><span class='k-button-text'>#=messages.clear#</span></button>\"\n        };\n\n        function distinctValues(values) {\n          var hash = {};\n          var result = [];\n\n          for (var i = 0; i < values.length; i++) {\n            if (!hash[values[i].value]) {\n              hash[values[i].value] = values[i];\n              result.push(values[i]);\n            } else if (!hash[values[i].value].checked && values[i].checked) {\n              hash[values[i].value].checked = true;\n            }\n          }\n\n          return result;\n        }\n\n        function filter(dataSource, query) {\n          var hasVisibleChildren = false;\n          var data = dataSource instanceof kendo.data.HierarchicalDataSource && dataSource.data();\n          var valuesFilter = this;\n          var values = this.values;\n\n          for (var i = 0; i < data.length; i++) {\n            var item = data[i];\n            var text = item.text.toString().toLocaleLowerCase(kendo.culture().name);\n            var itemVisible = query === true || query === \"\" || text.indexOf(query) >= 0;\n            var filterSpread = filter.bind(valuesFilter);\n            var anyVisibleChildren = filterSpread(item.children, query); // pass true if parent matches\n\n            hasVisibleChildren = hasVisibleChildren || anyVisibleChildren || itemVisible;\n            item.hidden = !itemVisible && !anyVisibleChildren;\n\n            if (query.length || values && !values.length) {\n              item.checked = !item.hidden;\n            } else if (values && values.indexOf(item.text) != -1) {\n              item.checked = true;\n            }\n          }\n\n          if (data) {\n            // re-apply filter on children\n            dataSource.filter({\n              field: \"hidden\",\n              operator: \"neq\",\n              value: true\n            });\n          }\n\n          return hasVisibleChildren;\n        }\n\n        function uncheckAll(dataSource) {\n          var data = dataSource instanceof kendo.data.HierarchicalDataSource && dataSource.data();\n\n          for (var i = 0; i < data.length; i++) {\n            var item = data[i];\n            item.checked = false;\n\n            if (item.hasChildren) {\n              uncheckAll(item.children);\n            }\n          }\n        }\n\n        var FilterMenuViewModel = kendo.spreadsheet.FilterMenuViewModel = kendo.data.ObservableObject.extend({\n          valuesChange: function (e) {\n            var dataSource = e ? e.sender.dataSource : this.valuesDataSource;\n\n            var checked = function (item) {\n              return item.checked;\n            };\n\n            var value = function (item) {\n              return item.dataType === \"date\" ? kendo.spreadsheet.dateToNumber(item.value) : item.value;\n            };\n\n            var unique = function (value, index, array) {\n              return array.lastIndexOf(value) === index;\n            };\n\n            var data = dataSource.data();\n            var values = data.toJSON()[0].items;\n            var blanks = values.filter(function (item) {\n              return item.dataType === \"blank\";\n            });\n            blanks = blanks.length ? blanks[0].checked : false;\n            values = values.filter(checked).map(value);\n\n            if (this.appendToSearch && this.valueFilter && this.valueFilter.values.length) {\n              values = values.concat(this.valueFilter.values.toJSON()).sort().filter(unique);\n            }\n\n            this.set(\"valueFilter\", {\n              values: values,\n              blanks: blanks\n            });\n          },\n          valueSelect: function (e) {\n            e.preventDefault();\n            var node = e.sender.dataItem(e.node);\n            node.set(\"checked\", !node.checked);\n          },\n          hasActiveSearch: false,\n          appendToSearch: false,\n          filterValues: function (e) {\n            var query = typeof e == \"string\" ? e : $(e.target).val().toLocaleLowerCase(kendo.culture().name);\n            var dataSource = this.valuesDataSource;\n            this.set(\"hasActiveSearch\", !!query);\n            var filterSpread = filter.bind(this.valueFilter);\n            uncheckAll(dataSource);\n            filterSpread(dataSource, query);\n          },\n          reset: function () {\n            this.set(\"customFilter\", {\n              logic: \"and\",\n              criteria: [{\n                operator: null,\n                value: null\n              }]\n            });\n            this.set(\"valueFilter\", {\n              values: []\n            });\n          },\n          operatorChange: function (e) {\n            var dataItem = e.sender.dataItem();\n            this.set(\"operatorType\", dataItem.type); // https://github.com/telerik/kendo-ui-core/issues/3317 - when switching from Value\n            // filter to “filter by condition”, the customFilter property is lost.\n\n            if (!this.get(\"customFilter\")) {\n              this.reset();\n            }\n\n            this.set(\"customFilter.criteria[0].operator\", dataItem.value);\n          },\n          isNone: function () {\n            return this.get(\"operatorType\") === undefined;\n          },\n          isString: function () {\n            return this.get(\"operatorType\") === \"string\";\n          },\n          isNumber: function () {\n            return this.get(\"operatorType\") === \"number\";\n          },\n          isDate: function () {\n            return this.get(\"operatorType\") === \"date\";\n          }\n        });\n\n        function flattenOperators(operators) {\n          var messages = kendo.spreadsheet.messages.filterMenu.operators;\n          var result = [];\n\n          for (var type in operators) {\n            if (!operators.hasOwnProperty(type)) {\n              continue;\n            }\n\n            for (var operator in operators[type]) {\n              if (!operators[type].hasOwnProperty(operator)) {\n                continue;\n              }\n\n              result.push({\n                text: messages[type][operator],\n                value: operator,\n                unique: type + \"_\" + operator,\n                type: type\n              });\n            }\n          }\n\n          return result;\n        }\n\n        var FilterMenuController = kendo.spreadsheet.FilterMenuController = {\n          valuesTree: function (range, column) {\n            return [{\n              text: kendo.spreadsheet.messages.filterMenu.all,\n              expanded: true,\n              checked: false,\n              items: this.values(range.resize({\n                top: 1\n              }), column)\n            }];\n          },\n          values: function (range, column) {\n            var values = [];\n            var messages = kendo.spreadsheet.messages.filterMenu;\n            var columnRange = range.column(column);\n            var sheet = range.sheet();\n            columnRange.forEachCell(function (row, col, cell) {\n              var checked = true;\n\n              if (sheet.isHiddenRow(row)) {\n                checked = false;\n              }\n\n              var value = cell.value;\n              var dataType = cell.dataType;\n              var text = cell.text;\n\n              if (value === undefined) {\n                dataType = \"blank\";\n              } else if (cell.format) {\n                dataType = kendo.spreadsheet.formatting.type(value, cell.format);\n              } else {\n                dataType = typeof value;\n              }\n\n              if (value !== null && cell.format) {\n                text = kendo.spreadsheet.formatting.text(value, cell.format);\n              } else {\n                text = dataType == \"blank\" ? messages.blanks : value;\n              }\n\n              if (dataType === \"percent\" || dataType === \"currency\") {\n                //treat percent as number\n                dataType = \"number\";\n              }\n\n              if (dataType === \"date\") {\n                value = kendo.spreadsheet.numberToDate(value);\n              }\n\n              values.push({\n                dataType: dataType,\n                value: value,\n                text: text,\n                checked: checked\n              });\n            });\n            values = distinctValues(values);\n            values.sort(function (a, b) {\n              if (a.dataType === b.dataType) {\n                return 0;\n              }\n\n              if (a.dataType === \"blank\" || b.dataType === \"blank\") {\n                return a.dataType === \"blank\" ? -1 : 1;\n              }\n\n              if (a.dataType === \"number\" || b.dataType === \"number\") {\n                return a.dataType === \"number\" ? -1 : 1;\n              }\n\n              if (a.dataType === \"date\" || b.dataType === \"date\") {\n                return a.dataType === \"date\" ? -1 : 1;\n              }\n\n              return 0;\n            });\n            return values;\n          },\n          filterType: function (range, column) {\n            // 1. try to infer type from current filter\n            var sheet = range.sheet();\n            var filter = this.filterForColumn(column, sheet);\n            var type;\n            filter = filter && filter.filter.toJSON();\n\n            if (filter && filter.filter == \"custom\") {\n              var value = filter.criteria[0].value;\n\n              if (value instanceof Date) {\n                type = \"date\";\n              } else if (typeof value == \"string\") {\n                type = \"string\";\n              } else if (typeof value == \"number\") {\n                type = \"number\";\n              }\n            }\n\n            if (!type) {\n              // 2. try to infer type from column data\n              var topValue = this.values(range.row(1), column)[0];\n              type = topValue && topValue.dataType;\n\n              if (type == \"blank\") {\n                type = null;\n              }\n            }\n\n            return type;\n          },\n          filterForColumn: function (column, sheet) {\n            var allFilters = sheet.filter();\n            var filters;\n\n            if (allFilters) {\n              filters = allFilters.columns.filter(function (item) {\n                return item.index === column;\n              })[0];\n            }\n\n            return filters;\n          },\n          filter: function (column, sheet) {\n            var columnFilters = this.filterForColumn(column, sheet);\n\n            if (!columnFilters) {\n              return;\n            }\n\n            var options = columnFilters.filter.toJSON();\n            var type = options.filter;\n            delete options.filter;\n            var result = {\n              type: type,\n              options: options\n            };\n            var criteria = options.criteria;\n\n            if (criteria && criteria.length) {\n              result.operator = criteria[0].operator;\n            }\n\n            return result;\n          }\n        };\n        var FilterMenu = Widget.extend({\n          init: function (element, options) {\n            Widget.call(this, element, options);\n            this.element.addClass(FilterMenu.classNames.wrapper);\n            this.viewModel = new FilterMenuViewModel({\n              active: \"value\",\n              operator: null,\n              operators: flattenOperators(this.options.operators),\n              clear: this.clear.bind(this),\n              apply: this.apply.bind(this)\n            });\n\n            this._filterInit();\n\n            this._popup();\n\n            this._sort();\n\n            this._filterByCondition();\n\n            this._filterByValue();\n\n            this._actionButtons();\n          },\n          options: {\n            name: \"FilterMenu\",\n            column: 0,\n            range: null,\n            operators: {\n              string: {\n                contains: \"Text contains\",\n                doesnotcontain: \"Text does not contain\",\n                startswith: \"Text starts with\",\n                endswith: \"Text ends with\",\n                matches: \"Text matches\",\n                doesnotmatch: \"Text does not match\"\n              },\n              date: {\n                eq: \"Date is\",\n                neq: \"Date is not\",\n                lt: \"Date is before\",\n                gt: \"Date is after\"\n              },\n              number: {\n                eq: \"Is equal to\",\n                neq: \"Is not equal to\",\n                gte: \"Is greater than or equal to\",\n                gt: \"Is greater than\",\n                lte: \"Is less than or equal to\",\n                lt: \"Is less than\"\n              }\n            }\n          },\n          events: [\"action\"],\n          destroy: function () {\n            Widget.fn.destroy.call(this);\n            this.menu.destroy();\n            this.valuesTreeView.destroy();\n            this.popup.destroy();\n          },\n          openFor: function (anchor, event) {\n            if ($(anchor).hasClass(\"k-spreadsheet-view-size\")) {\n              // on touch devices this element will sit above to\n              // enable scrolling; it's not useful as an anchor,\n              // use event coords instead.\n              this.popup.open(event.pageX, event.pageY);\n            } else {\n              this.popup.setOptions({\n                anchor: anchor\n              });\n              this.popup.open();\n            }\n          },\n          close: function () {\n            this.popup.close();\n          },\n          clear: function () {\n            this.action({\n              command: \"ClearFilterCommand\",\n              options: {\n                column: this.options.column\n              }\n            });\n            this.viewModel.reset();\n            this.close();\n          },\n          apply: function () {\n            this._active();\n\n            var options = {\n              operatingRange: this.options.range,\n              column: this.options.column\n            };\n            var valueFilter;\n            var customFilter;\n\n            if (this.viewModel.active === \"value\") {\n              this.viewModel.valuesChange({\n                sender: this.valuesTreeView\n              });\n              valueFilter = this.viewModel.valueFilter.toJSON();\n\n              if (valueFilter.blanks || valueFilter.values && valueFilter.values.length) {\n                options.valueFilter = valueFilter;\n              }\n            } else if (this.viewModel.active === \"custom\") {\n              customFilter = this.viewModel.customFilter.toJSON();\n\n              if (customFilter.criteria.length && customFilter.criteria[0].value !== null) {\n                options.customFilter = customFilter;\n              }\n            }\n\n            if (options.valueFilter || options.customFilter) {\n              this.action({\n                command: \"ApplyFilterCommand\",\n                options: options\n              });\n            }\n          },\n          action: function (options) {\n            this.trigger(\"action\", $.extend({}, options));\n          },\n          _filterInit: function () {\n            var column = this.options.column;\n            var range = this.options.range;\n            var sheet = range.sheet();\n            var activeFilter = FilterMenuController.filter(column, sheet);\n\n            if (activeFilter) {\n              var filterType = FilterMenuController.filterType(range, column);\n              this.viewModel.set(\"active\", activeFilter.type);\n              this.viewModel.set(activeFilter.type + \"Filter\", activeFilter.options);\n\n              if (activeFilter.type == \"custom\") {\n                this.viewModel.set(\"operator\", filterType + \"_\" + activeFilter.operator);\n                this.viewModel.set(\"operatorType\", filterType);\n              }\n            } else {\n              this.viewModel.reset();\n            }\n          },\n          _popup: function () {\n            this.popup = this.element.kendoPopup({\n              copyAnchorStyles: false\n            }).data(\"kendoPopup\");\n          },\n          _sort: function () {\n            var template = kendo.template(FilterMenu.templates.menuItem);\n            var messages = kendo.spreadsheet.messages.filterMenu;\n            var items = [{\n              command: \"sort\",\n              dir: \"asc\",\n              text: messages.sortAscending,\n              iconClass: \"sort-asc\"\n            }, {\n              command: \"sort\",\n              dir: \"desc\",\n              text: messages.sortDescending,\n              iconClass: \"sort-desc\"\n            }];\n            var ul = $(\"<ul></ul>\", {\n              \"html\": kendo.render(template, items)\n            }).appendTo(this.element);\n            this.menu = ul.kendoMenu({\n              orientation: \"vertical\",\n              select: function (e) {\n                var dir = $(e.item).data(\"dir\");\n                var range = this.options.range.resize({\n                  top: 1\n                });\n                var options = {\n                  value: dir,\n                  sheet: false,\n                  operatingRange: range,\n                  column: this.options.column\n                };\n                this.action({\n                  command: \"SortCommand\",\n                  options: options\n                });\n              }.bind(this)\n            }).data(\"kendoMenu\");\n          },\n          _appendTemplate: function (template, className, details, expanded) {\n            var compiledTemplate = kendo.template(template);\n            var wrapper = $(\"<div class='\" + className + \"'/>\").html(compiledTemplate({\n              messages: kendo.spreadsheet.messages.filterMenu,\n              guid: kendo.guid(),\n              ns: kendo.ns\n            }));\n            this.element.append(wrapper);\n\n            if (details) {\n              details = new Details(wrapper, {\n                expanded: expanded,\n                toggle: this._detailToggle.bind(this)\n              }); // jshint ignore:line\n            }\n\n            kendo.bind(wrapper, this.viewModel);\n            return wrapper;\n          },\n          _detailToggle: function (e) {\n            this.element.find(\"[\" + kendo.attr(\"role\") + \"=details]\").not(e.sender.element).data(\"kendoDetails\").toggle(!e.show);\n          },\n          _filterByCondition: function () {\n            var isExpanded = this.viewModel.active === \"custom\";\n\n            this._appendTemplate(FilterMenu.templates.filterByCondition, FilterMenu.classNames.filterByCondition, true, isExpanded);\n          },\n          _filterByValue: function () {\n            var isExpanded = this.viewModel.active === \"value\";\n\n            var wrapper = this._appendTemplate(FilterMenu.templates.filterByValue, FilterMenu.classNames.filterByValue, true, isExpanded);\n\n            this.valuesTreeView = wrapper.find(\"[\" + kendo.attr(\"role\") + \"=treeview]\").data(\"kendoTreeView\");\n            var values = FilterMenuController.valuesTree(this.options.range, this.options.column);\n            this.viewModel.set(\"valuesDataSource\", new kendo.data.HierarchicalDataSource({\n              data: values,\n              accentFoldingFiltering: kendo.culture().name\n            }));\n          },\n          _actionButtons: function () {\n            this._appendTemplate(FilterMenu.templates.actionButtons, FilterMenu.classNames.actionButtons, false);\n          },\n          _active: function () {\n            var activeContainer = this.element.find(\"[\" + kendo.attr(\"role\") + \"=details]\").filter(function (index, element) {\n              return $(element).data(\"kendoDetails\").visible();\n            });\n\n            if (activeContainer.hasClass(FilterMenu.classNames.filterByValue)) {\n              this.viewModel.set(\"active\", \"value\");\n            } else if (activeContainer.hasClass(FilterMenu.classNames.filterByCondition)) {\n              this.viewModel.set(\"active\", \"custom\");\n            }\n          }\n        });\n        kendo.spreadsheet.FilterMenu = FilterMenu;\n        $.extend(true, FilterMenu, {\n          classNames: classNames,\n          templates: templates\n        });\n      })(window.kendo);\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1700:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.datepicker\");\n    /***/\n  },\n\n  /***/\n  1701:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.datetimepicker\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}