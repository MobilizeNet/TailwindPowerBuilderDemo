{"ast":null,"code":"import { Class } from '../../common';\nimport { proxy, now } from '../utils';\nconst extend = Object.assign;\n\nfunction animationFrame(callback) {\n  window.requestAnimationFrame(callback);\n}\n\nexport class Animation extends Class {\n  constructor() {\n    super();\n    let that = this;\n    that._tickProxy = proxy(that._tick, that);\n    that._started = false;\n  }\n\n  tick() {}\n\n  done() {}\n\n  onEnd() {}\n\n  onCancel() {}\n\n  start() {\n    if (!this.enabled()) {\n      return;\n    }\n\n    if (!this.done()) {\n      this._started = true;\n      animationFrame(this._tickProxy);\n    } else {\n      this.onEnd();\n    }\n  }\n\n  enabled() {\n    return true;\n  }\n\n  cancel() {\n    this._started = false;\n    this.onCancel();\n  }\n\n  _tick() {\n    let that = this;\n\n    if (!that._started) {\n      return;\n    }\n\n    that.tick();\n\n    if (!that.done()) {\n      animationFrame(that._tickProxy);\n    } else {\n      that._started = false;\n      that.onEnd();\n    }\n  }\n\n}\nexport class Transition extends Animation {\n  constructor(options) {\n    super();\n    extend(this, options);\n  }\n\n  done() {\n    return this.timePassed() >= this.duration;\n  }\n\n  timePassed() {\n    return Math.min(this.duration, now() - this.startDate);\n  }\n\n  moveTo(options) {\n    let that = this,\n        movable = that.movable;\n    that.initial = movable[that.axis];\n    that.delta = options.location - that.initial;\n    that.duration = typeof options.duration === 'number' ? options.duration : 300;\n    that.tick = that._easeProxy(options.ease);\n    that.startDate = now();\n    that.start();\n  }\n\n  _easeProxy(ease) {\n    let that = this;\n    return function () {\n      that.movable.moveAxis(that.axis, ease(that.timePassed(), that.initial, that.delta, that.duration));\n    };\n  }\n\n  static easeOutExpo(t, b, c, d) {\n    return t === d ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;\n  } // static easeOutBack(t, b, c, d) {\n  //     let s = 1.70158;\n  //     return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\n  // }\n\n\n}","map":null,"metadata":{},"sourceType":"module"}