{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1041);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  965:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.treeview\");\n    /***/\n  },\n\n  /***/\n  1041:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1042), __webpack_require__(965)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            Observable = kendo.Observable,\n            extend = $.extend,\n            keys = kendo.keys,\n            NAVIGATE = \"navigate\",\n            SELECT = \"select\",\n            EXPAND = \"expand\",\n            CHANGE = \"change\",\n            OPEN = \"open\",\n            LOAD = \"load\",\n            KEYDOWN = \"keydown\",\n            KEYDOWNACTION = \"keydownAction\",\n            NS = \".kendoFileManagerViewComponent\",\n            fileManagerDraggables = [],\n            fileManagerDragOrigin = null;\n\n        var registerViewComponent = function (componentName, component) {\n          ui.filemanager.ViewComponents[componentName] = component;\n        };\n\n        var getViewComponent = function (componentName) {\n          return ui.filemanager.ViewComponents[componentName] || null;\n        };\n\n        var Component = Observable.extend({\n          init: function (widget, element, options) {\n            var that = this;\n            that.element = element;\n            that.options = options;\n\n            if (widget) {\n              that.widgetComponent = new widget(element, options);\n            } else {\n              throw new Error(\"The widget for the ViewComponent is not available! Please add the corresponding scripts!\");\n            }\n\n            Observable.fn.init.call(that);\n          },\n          _bindEvents: function () {\n            this.widgetComponent.bind(\"dataBinding\", this._binding.bind(this));\n            this.widgetComponent.bind(\"dataBound\", this._bound.bind(this));\n          },\n          _binding: function (ev) {\n            if (this.trigger(\"dataBinding\", ev)) {\n              ev.preventDefault();\n            }\n          },\n          _bound: function () {\n            this.trigger(\"dataBound\");\n          },\n          _setDSOptions: function (options, dataSourceOptions) {\n            if (!options.dataSource && dataSourceOptions) {\n              options.dataSource = dataSourceOptions;\n            }\n          },\n          _initDragAndDrop: function (element, filter) {\n            var that = this;\n            filter = filter || that.options.dropFilter;\n            element = element || that.element;\n            that.draggable = element.kendoDraggable({\n              filter: filter,\n              hint: that._hint.bind(that),\n              cursorOffset: {\n                top: -10,\n                left: -50\n              },\n              holdToDrag: true,\n              ignore: \"input, .k-focusable\",\n              hold: that._hold.bind(that)\n            }).data(\"kendoDraggable\");\n            that.draggable.userEvents.minHold = 150;\n            that.droptarget = element.kendoDropTargetArea({\n              filter: filter,\n              drop: that._onDrop.bind(that),\n              dragenter: function (ev) {\n                ev.dropTarget.addClass(\"k-filemanager-drop-target\");\n              },\n              dragleave: function (ev) {\n                ev.dropTarget.removeClass(\"k-filemanager-drop-target\");\n              }\n            }).data(\"kendoDraggable\");\n          },\n          _hold: function (ev) {\n            var that = this,\n                target = ev.currentTarget;\n\n            if (!target.is(\".k-state-selected\")) {\n              if (that.widgetComponent.selectable) {\n                that.widgetComponent.selectable.clear();\n              }\n\n              that.widgetComponent.select(target);\n            }\n\n            if (that.widgetComponent.selectable) {\n              that.widgetComponent.selectable.userEvents.cancel();\n            }\n          },\n          _hint: function (target) {\n            var that = this,\n                item = that.widgetComponent.dataItem(target),\n                selectedItems = that.widgetComponent.select();\n            fileManagerDragOrigin = that.widgetComponent;\n            fileManagerDraggables = selectedItems;\n\n            if (selectedItems.length > 1) {\n              return kendo.format(\"<div class='k-filemanager-drag-hint'><span class='k-icon k-i-{0}'></span> <span>{1} {2}</span></div>\", \"file\", selectedItems.length, that.options.messages.items);\n            }\n\n            return kendo.format(\"<div class='k-filemanager-drag-hint'><span class='k-icon k-i-{0}'></span> <span>{1}</span></div>\", item.isDirectory ? \"folder\" : \"file\", item.name);\n          },\n          _onDrop: function (ev) {\n            var that = this,\n                target = that.widgetComponent.dataItem(ev.dropTarget),\n                targetId = target.id,\n                itemIds = [];\n\n            if (!target.isDirectory) {\n              return;\n            }\n\n            for (var i = 0; i < fileManagerDraggables.length; i++) {\n              var id = fileManagerDragOrigin.dataItem(fileManagerDraggables[i]).id;\n              itemIds.push(id);\n            }\n\n            this.trigger(\"drop\", {\n              target: targetId,\n              items: itemIds\n            });\n          },\n          getSelected: function () {\n            throw new Error(\"Not Implemented!\");\n          },\n          refresh: function (dataSource) {\n            this.widgetComponent.setDataSource(dataSource);\n          },\n          destroy: function () {\n            kendo.destroy(this.element);\n          }\n        });\n        extend(kendo.ui.filemanager, {\n          ViewComponent: Component,\n          ViewComponents: {},\n          registerViewComponent: registerViewComponent,\n          getViewComponent: getViewComponent\n        });\n        var ListView = Component.extend({\n          init: function (element, options, explicitOptions) {\n            var that = this,\n                dataSourceOptions = explicitOptions.dataSource,\n                messages = explicitOptions.messages; // jshint ignore:line\n\n            options = extend({}, that.defaultOptions, options, {\n              messages: messages\n            });\n\n            that._setDSOptions(options, dataSourceOptions);\n\n            options.kendoKeydown = options.kendoKeydown || that._kendoKeydown.bind(that);\n            Component.fn.init.call(this, ui.ListView, element, options);\n            that.listView = that.widgetComponent;\n\n            that._bindEvents();\n\n            if (explicitOptions.draggable !== false && !dataSourceOptions.isLocalBinding) {\n              that._initDragAndDrop();\n            }\n          },\n          defaultOptions: {\n            layout: \"flex\",\n            flex: {\n              direction: \"row\",\n              wrap: \"wrap\"\n            },\n            selectable: kendo.support.mobileOS ? \"row\" : \"multiple\",\n            template: \"<div class='k-listview-item' title='#:name##:extension#'>\" + \"<div class='k-file-preview'><span class='k-file-icon k-icon k-i-#= !isDirectory ? kendo.getFileGroup(extension, true) : 'folder' #'></span></div>\" + \"<div class='k-file-name file-name'>#:name##:extension#</div>\" + \"</div>\",\n            editTemplate: \"<div class='k-listview-item'>\" + \"<div class='k-file-preview'><span class='k-file-icon k-icon k-i-#= !isDirectory ? kendo.getFileGroup(extension, true) : 'folder' #'></span></div>\" + \"<div class='k-file-name'><span class='k-textbox k-input k-input-md k-rounded-md k-input-solid'><input type='text' class='k-input-inner' data-bind='value:name' name='name' required='required' /><span></div>\" + \"</div>\",\n            dropFilter: \".k-listview-item\",\n            navigatable: true\n          },\n          _bindEvents: function () {\n            var that = this,\n                listView = that.listView;\n            listView.bind(CHANGE, that._select.bind(that));\n            listView.element.on(\"dblclick\" + NS, that._dblClick.bind(that));\n            listView.element.on(\"mousedown\" + NS, \".k-listview-item:not(.k-edit-item)\", that._mousedown.bind(that));\n            listView.element.on(KEYDOWN + NS, \".k-edit-item\", that._keydown.bind(that));\n            listView.element.on(KEYDOWN + NS, that._keydownAction.bind(that));\n            listView.bind(\"edit\", function (ev) {\n              var sender = ev.sender;\n              var input = ev.item.find(\"input\");\n              input.on(\"blur\", function () {\n                var isDirty = sender._modelFromElement(sender.editable.element).dirty;\n\n                sender._closeEditable();\n\n                if (!isDirty) {\n                  that.trigger(\"cancel\");\n                }\n              });\n            });\n            listView.bind(\"cancel\", function () {\n              that.trigger(\"cancel\");\n            });\n\n            Component.fn._bindEvents.call(this);\n          },\n          _select: function () {\n            var that = this,\n                dataItems = that.getSelected();\n            that.trigger(SELECT, {\n              entries: dataItems\n            });\n          },\n          _keydown: function (ev) {\n            var that = this;\n\n            if (ev.keyCode === kendo.keys.ESC) {\n              that.listView._closeEditable();\n\n              that.trigger(\"cancel\");\n            }\n          },\n          _keydownAction: function (ev) {\n            var that = this,\n                target = $(ev.target).find(\".k-state-focused\");\n\n            if (target.length && !target.is(\".k-edit-item\")) {\n              that.trigger(KEYDOWNACTION, {\n                target: target,\n                keyCode: ev.keyCode\n              });\n            }\n          },\n          _mousedown: function (ev) {\n            var that = this,\n                node = $(ev.target).closest(\".k-listview-item\");\n\n            if (ev.which === 3 && !node.is(\".k-state-selected\")) {\n              that.listView.selectable.clear();\n              that.listView.select(node);\n            }\n          },\n          _kendoKeydown: function (ev) {\n            var that = this;\n\n            if (ev.keyCode === keys.ENTER && !ev.preventKendoKeydown) {\n              that._handleEnterKey(ev);\n            }\n          },\n          _handleEnterKey: function (ev) {\n            var that = this,\n                target = $(ev.target),\n                node = that.listView.current();\n\n            if (that.widgetComponent.editable && target.is(\"input\")) {\n              // Force blur to update item and close editable (cross browser)\n              target.trigger(\"blur\");\n            } else if (!that.widgetComponent.editable) {\n              that._triggerOpen(node);\n            }\n\n            ev.preventKendoKeydown = true;\n          },\n          _dblClick: function (ev) {\n            var that = this,\n                node = $(ev.target).closest(\".k-listview-item\");\n\n            that._triggerOpen(node);\n          },\n          _triggerOpen: function (node) {\n            var that = this;\n\n            if (node.is(\".k-edit-item\")) {\n              return;\n            }\n\n            var item = that.listView.dataItem(node);\n\n            if (item) {\n              that.trigger(OPEN, {\n                entry: item\n              });\n            }\n          },\n          addFolder: function () {\n            this.listView.add();\n          },\n          edit: function (target) {\n            var that = this,\n                selected = that.listView.select();\n            that.listView.edit(target || selected);\n          },\n          getSelected: function () {\n            var that = this,\n                items = that.listView.select(),\n                dataItems = [];\n\n            for (var i = 0; i < items.length; i++) {\n              var item = that.listView.dataItem(items[i]);\n\n              if (item) {\n                dataItems.push(item);\n              }\n            }\n\n            return dataItems;\n          },\n          destroy: function () {\n            this.listView.element.off(NS);\n            Component.fn.destroy.call(this);\n          }\n        });\n        ui.filemanager.registerViewComponent(\"list\", ListView);\n        var TreeView = Component.extend({\n          init: function (element, options, explicitOptions) {\n            var that = this,\n                messages = explicitOptions.messages; // jshint ignore:line\n\n            options = extend({}, that.defaultOptions, options, {\n              messages: messages\n            });\n            Component.fn.init.call(this, ui.TreeView, element, options);\n            that.treeView = that.widgetComponent;\n\n            that._bindEvents();\n\n            if (explicitOptions.draggable !== false && !explicitOptions.isLocalBinding) {\n              that._initDragAndDrop();\n            }\n          },\n          defaultOptions: {\n            dataTextField: \"name\",\n            dropFilter: \".k-item\"\n          },\n          _refreshDataSource: function (ev) {\n            var that = this,\n                treeView = that.treeView,\n                action = ev.action,\n                node = ev.node,\n                parentNode = null,\n                treeEl = treeView.element,\n                activeDescendant = treeEl.attr(\"aria-activedescendant\"),\n                items = ev.items.filter(function (item) {\n              return item.isDirectory;\n            }).map(function (item) {\n              return extend({}, item.toJSON(), {\n                id: item.id || kendo.guid(),\n                hasChildren: item.hasChildren,\n                items: []\n              });\n            });\n\n            if (node) {\n              parentNode = treeView.findByUid(treeView.dataSource.get(node.id).uid);\n\n              treeView._progress(parentNode, false);\n            }\n\n            if (!items.length) {\n              return;\n            }\n\n            if (action == \"itemloaded\" || parentNode && action === \"sync\") {\n              parentNode.find(\".k-item\").each(function (index, item) {\n                treeView.remove(item);\n              });\n              treeView.append(items, parentNode);\n\n              if (that._shouldFocus) {\n                treeView.current(parentNode);\n                treeView.focus();\n              }\n            } else if (action == \"remove\") {\n              this._remove(items[0].id);\n            } else if (action == \"itemchange\") {\n              var existingItem = treeView.dataSource.get(items[0].id);\n\n              if (existingItem) {\n                existingItem.set(ev.field, items[0][ev.field]);\n              } else {\n                treeView.append(items[0], parentNode);\n              }\n            } else if (!treeView.dataSource.data().length) {\n              treeView.append(items);\n            } else if (action === \"sync\" || action === undefined && !parentNode) {\n              treeView.items().each(function (index, item) {\n                treeView.remove(item);\n              });\n              treeView.append(items);\n\n              if (that._shouldFocus) {\n                treeView.current(treeView._nextVisible($()));\n                treeView.focus();\n              }\n            }\n\n            if (!!activeDescendant && treeEl.find(\"#\" + activeDescendant).length === 0) {\n              treeEl.removeAttr(\"aria-activedescendant\");\n            }\n          },\n          _remove: function (id) {\n            var that = this,\n                treeView = that.treeView,\n                dataSource = treeView.dataSource,\n                item = dataSource.get(id),\n                node;\n\n            if (item) {\n              node = treeView.findByUid(item.uid);\n              treeView.remove(node);\n            }\n          },\n          _bindEvents: function () {\n            var that = this;\n            that.treeView.bind(SELECT, that._navigate.bind(that));\n            that.treeView.bind(EXPAND, that._expand.bind(that));\n            that.treeView.element.on(KEYDOWN, that._keydownAction.bind(that));\n          },\n          _keydownAction: function (ev) {\n            var that = this,\n                target = $(ev.target).find(\".k-focus\").closest(\".k-item\");\n            that.trigger(KEYDOWNACTION, {\n              target: target,\n              keyCode: ev.keyCode\n            });\n          },\n          _expand: function (ev) {\n            var that = this,\n                treeView = that.treeView,\n                entry = treeView.dataItem(ev.node);\n            ev.preventDefault();\n            that.trigger(LOAD, {\n              entryId: entry.id\n            });\n          },\n          _navigate: function (ev) {\n            var that = this,\n                node = ev.node,\n                entry = that.treeView.dataItem(node),\n                path = entry.id;\n            ev.preventDefault();\n            that.trigger(NAVIGATE, {\n              path: path,\n              entry: entry.toJSON()\n            });\n          },\n          _hold: $.noop,\n          getSelected: function () {\n            var that = this,\n                selectedItem = that.treeView.element.find(\".k-selected\").closest(\".k-item\"),\n                item = that.treeView.dataItem(selectedItem);\n            return item;\n          },\n          refresh: function (id) {\n            var that = this,\n                treeView = that.treeView,\n                entry = treeView.dataSource.get(id),\n                node = entry && treeView.findByUid(entry.uid);\n\n            if (entry && node) {\n              treeView.element.find(\".k-selected\").removeClass(\"k-selected\");\n              node.find(\"> div .k-in\").removeClass(\"k-hover\").addClass(\"k-selected\");\n            }\n          },\n          reload: function () {\n            this.treeView.dataSource.read();\n          }\n        });\n        ui.filemanager.registerViewComponent(\"tree\", TreeView);\n\n        if (kendo.ui.Grid) {\n          var Grid = Component.extend({\n            init: function (element, options, explicitOptions) {\n              var that = this,\n                  dataSourceOptions = explicitOptions.dataSource,\n                  messages = explicitOptions.messages;\n              options = extend({}, that.defaultOptions, options, {\n                messages: messages\n              });\n\n              that._setDSOptions(options, dataSourceOptions);\n\n              that._setupColumns(options, messages);\n\n              options.kendoKeydown = options.kendoKeydown || that._kendoKeydown.bind(that);\n              Component.fn.init.call(this, ui.Grid, element, options);\n              that.grid = that.widgetComponent;\n\n              that._bindEvents();\n\n              if (explicitOptions.draggable !== false && !dataSourceOptions.isLocalBinding) {\n                that._initDragAndDrop();\n              }\n            },\n            defaultOptions: {\n              selectable: kendo.support.mobileOS ? \"row\" : \"multiple\",\n              editable: {\n                mode: \"inline\",\n                confirmation: false\n              },\n              sortable: true,\n              dropFilter: \"tr:not(.k-grid-edit-row)\",\n              navigatable: true\n            },\n            _setupColumns: function (options, messages) {\n              if (!options.columns) {\n                options.columns = [{\n                  field: \"name\",\n                  title: messages.nameField || \"Name\",\n                  template: function (item) {\n                    var icon = !item.isDirectory ? kendo.getFileGroup(item.extension, true) : \"folder\";\n                    var template = \"<div class='file-group-icon'>\" + \"<span class='k-icon k-i-\" + icon + \"'></span>\" + \"</div>\" + \"<div class='file-name'>\" + kendo.htmlEncode(item.name + item.extension) + \"<div>\";\n                    return template;\n                  }\n                }, {\n                  field: \"created\",\n                  title: messages.dateCreatedField,\n                  format: \"{0:G}\"\n                }, {\n                  field: \"size\",\n                  title: messages.sizeField,\n                  template: function (item) {\n                    if (item.size > 0) {\n                      return kendo.getFileSizeMessage(item.size);\n                    } else {\n                      return \"\";\n                    }\n                  }\n                }];\n              }\n            },\n            _bindEvents: function () {\n              var that = this,\n                  grid = that.grid;\n              grid.bind(CHANGE, that._select.bind(that));\n              grid.table.on(\"dblclick\" + NS, that._dblClick.bind(that));\n              grid.table.on(\"mousedown\" + NS, \"tr:not(.k-grid-edit-row)\", that._mousedown.bind(that));\n              grid.table.on(KEYDOWN + NS, \".k-grid-edit-row\", that._keydown.bind(that));\n              grid.table.on(KEYDOWN + NS, that._keydownAction.bind(that));\n              grid.bind(\"edit\", function () {\n                that._toggleFocusable(true);\n              });\n              grid.bind(\"cancel\", function () {\n                that.trigger(\"cancel\");\n              });\n              grid.saveRow = $.noop;\n\n              Component.fn._bindEvents.call(this);\n            },\n            _kendoKeydown: function (ev) {\n              var that = this,\n                  current = that.grid.current(),\n                  node = current ? current.closest(\"tr[data-uid]\") : null;\n\n              if (node && ev.keyCode === keys.ENTER && !ev.preventKendoKeydown) {\n                that._triggerOpen(node);\n\n                ev.preventKendoKeydown = true;\n              }\n\n              if (ev.keyCode === keys.F2) {\n                ev.preventKendoKeydown = true;\n              }\n            },\n            _keydownAction: function (ev) {\n              var that = this,\n                  target = $(ev.target).find(\".k-state-focused\").closest(\"tr\");\n\n              if (target.length && !target.is(\".k-grid-edit-row\")) {\n                that.trigger(KEYDOWNACTION, {\n                  target: target,\n                  keyCode: ev.keyCode\n                });\n              }\n            },\n            _keydown: function (ev) {\n              var that = this,\n                  grid = that.grid;\n\n              if (!$(ev.target).closest(\".k-grid-edit-row\").length) {\n                return;\n              }\n\n              if (ev.keyCode === kendo.keys.ENTER) {\n                setTimeout(function () {\n                  var editorContainer = that.grid._editContainer || $(); // force blur event for inputs\n\n                  editorContainer.find(\"input\").trigger(\"blur\");\n\n                  that._closeEditable();\n                });\n\n                that._tryCancel();\n              }\n\n              if (ev.keyCode === kendo.keys.ESC) {\n                grid.cancelChanges();\n                that.trigger(\"cancel\");\n              }\n            },\n            _mousedown: function (ev) {\n              var that = this,\n                  node = $(ev.target).closest(\"tr[data-uid]\");\n\n              if (ev.which === 1 && that.grid.editable) {\n                setTimeout(function () {\n                  that._closeEditable();\n                });\n\n                that._tryCancel();\n              }\n\n              if (ev.which === 3 && !node.is(\".k-state-selected\")) {\n                that.grid.selectable.clear();\n                that.grid.select(node);\n              }\n            },\n            _tryCancel: function () {\n              var that = this,\n                  grid = that.grid,\n                  container;\n\n              if (grid.editable) {\n                container = grid._editContainer;\n\n                if (!container.find(\"input\").val()) {\n                  grid.cancelChanges();\n                }\n              }\n\n              setTimeout(function () {\n                that._toggleFocusable(false);\n              });\n            },\n            _toggleFocusable: function (state) {\n              var that = this,\n                  grid = that.grid;\n              grid.table.find(\"tr,td\").children().addBack().toggleClass(\"k-focusable\", state);\n            },\n            _closeEditable: function () {\n              var that = this,\n                  container;\n\n              if (that.grid.editable && !that.grid.editable.options.model.dirty) {\n                container = that.grid._editContainer;\n\n                that.grid._destroyEditable();\n\n                that.grid._displayRow(container);\n\n                that.trigger(\"cancel\");\n              }\n            },\n            _select: function () {\n              var that = this,\n                  dataItems = that.getSelected();\n              that.trigger(SELECT, {\n                entries: dataItems\n              });\n            },\n            _dblClick: function (ev) {\n              var that = this,\n                  node = $(ev.target).closest(\"tr[data-uid]\");\n\n              that._triggerOpen(node);\n            },\n            _triggerOpen: function (node) {\n              var that = this;\n\n              if (node.is(\".k-grid-edit-row\")) {\n                return;\n              }\n\n              var item = that.grid.dataItem(node);\n\n              if (item) {\n                that.trigger(OPEN, {\n                  entry: item\n                });\n              }\n            },\n            getSelected: function () {\n              var that = this,\n                  items = that.grid.select(),\n                  dataItems = [];\n\n              for (var i = 0; i < items.length; i++) {\n                dataItems.push(that.grid.dataItem(items[i]));\n              }\n\n              return dataItems;\n            },\n            addFolder: function () {\n              this.grid.addRow();\n            },\n            edit: function (target) {\n              var that = this,\n                  selected = that.grid.select();\n              that.grid.editRow(target || selected);\n            },\n            destroy: function () {\n              this.grid.table.off(NS);\n              this.grid.element.off(NS);\n              Component.fn.destroy.call(this);\n            }\n          });\n          ui.filemanager.registerViewComponent(\"grid\", Grid);\n        }\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1042:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.listview\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}