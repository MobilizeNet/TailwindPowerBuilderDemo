{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1330);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1052:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.popup\");\n    /***/\n  },\n\n  /***/\n  1063:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.data\");\n    /***/\n  },\n\n  /***/\n  1330:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1052), __webpack_require__(1063)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"menu\",\n        name: \"Menu\",\n        category: \"web\",\n        description: \"The Menu widget displays hierarchical data as a multi-level menu.\",\n        depends: [\"popup\", \"data\", \"data.odata\"]\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            activeElement = kendo._activeElement,\n            touch = kendo.support.touch && kendo.support.mobileOS,\n            isArray = Array.isArray,\n            HierarchicalDataSource = kendo.data.HierarchicalDataSource,\n            MOUSEDOWN = \"mousedown\",\n            CLICK = \"click\",\n            DELAY = 30,\n            SCROLLSPEED = 50,\n            extend = $.extend,\n            each = $.each,\n            template = kendo.template,\n            keys = kendo.keys,\n            Widget = ui.Widget,\n            excludedNodesRegExp = /^(ul|a|div)$/i,\n            NS = \".kendoMenu\",\n            IMG = \"img\",\n            OPEN = \"open\",\n            MENU = \"k-menu\",\n            LINK = \"k-link k-menu-link\",\n            LINK_SELECTOR = \".k-link\",\n            ICON_SELECTOR = \".k-menu-expand-arrow-icon\",\n            LAST = \"k-last\",\n            CLOSE = \"close\",\n            TIMER = \"timer\",\n            FIRST = \"k-first\",\n            IMAGE = \"k-image\",\n            SELECT = \"select\",\n            ZINDEX = \"zIndex\",\n            ACTIVATE = \"activate\",\n            DEACTIVATE = \"deactivate\",\n            POINTERDOWN = \"touchstart\" + NS + \" MSPointerDown\" + NS + \" pointerdown\" + NS,\n            pointers = kendo.support.pointers,\n            msPointers = kendo.support.msPointers,\n            allPointers = msPointers || pointers,\n            CHANGE = \"change\",\n            ERROR = \"error\",\n            TOUCHSTART = kendo.support.touch ? \"touchstart\" : \"\",\n            MOUSEENTER = pointers ? \"pointerover\" : msPointers ? \"MSPointerOver\" : \"mouseenter\",\n            MOUSELEAVE = pointers ? \"pointerout\" : msPointers ? \"MSPointerOut\" : \"mouseleave\",\n            MOUSEWHEEL = \"DOMMouseScroll\" + NS + \" mousewheel\" + NS,\n            RESIZE = kendo.support.resize + NS,\n            SCROLLWIDTH = \"scrollWidth\",\n            SCROLLHEIGHT = \"scrollHeight\",\n            OFFSETWIDTH = \"offsetWidth\",\n            OFFSETHEIGHT = \"offsetHeight\",\n            POPUP_ID_ATTR = \"group\",\n            POPUP_OPENER_ATTR = \"groupparent\",\n            DOCUMENT_ELEMENT = $(document.documentElement),\n            KENDOPOPUP = \"kendoPopup\",\n            HOVERSTATE = \"k-hover\",\n            FOCUSEDSTATE = \"k-focus\",\n            DISABLEDSTATE = \"k-disabled\",\n            SELECTEDSTATE = \"k-selected\",\n            menuSelector = \".k-menu\",\n            groupSelector = \".k-menu-group\",\n            animationContainerSelector = \".k-animation-container\",\n            popupSelector = groupSelector + \",\" + animationContainerSelector,\n            allItemsSelector = \":not(.k-list) > .k-item:not([role='treeitem'])\",\n            disabledSelector = \".k-item.k-disabled\",\n            itemSelector = \".k-item\",\n            availableItemsSelector = \".k-item:not(.k-disabled)\",\n            linkSelector = \".k-item:not(.k-disabled) > .k-link\",\n            exclusionSelector = \":not(.k-item.k-separator)\",\n            templateSelector = \"div:not(.k-animation-container,.k-list-container)\",\n            scrollButtonSelector = \".k-menu-scroll-button\",\n            touchPointerTypes = {\n          \"2\": 1,\n          \"touch\": 1\n        },\n            STRING = \"string\",\n            DATABOUND = \"dataBound\",\n            ARIA_EXPANDED = \"aria-expanded\",\n            ROLE = \"role\",\n            bindings = {\n          text: \"dataTextField\",\n          url: \"dataUrlField\",\n          spriteCssClass: \"dataSpriteCssClassField\",\n          imageUrl: \"dataImageUrlField\",\n          imageAttr: \"dataImageAttrField\",\n          content: \"dataContentField\"\n        },\n            rendering = {\n          wrapperCssClass: function (group, item) {\n            var result = \"k-item k-menu-item\",\n                index = item.index;\n\n            if (item.enabled === false) {\n              result += \" k-disabled\";\n            }\n\n            if (group.firstLevel && index === 0) {\n              result += \" k-first\";\n            }\n\n            if (index == group.length - 1) {\n              result += \" k-last\";\n            }\n\n            if (item.cssClass) {\n              result += \" \" + item.cssClass;\n            }\n\n            if (item.attr && item.attr.hasOwnProperty(\"class\")) {\n              result += \" \" + item.attr[\"class\"];\n            }\n\n            if (item.selected) {\n              result += \" \" + SELECTEDSTATE;\n            }\n\n            return result;\n          },\n          itemCssAttributes: function (item) {\n            var result = \"\";\n            var attributes = item.attr || {};\n\n            for (var attr in attributes) {\n              if (attributes.hasOwnProperty(attr) && attr !== \"class\") {\n                result += attr + \"=\\\"\" + attributes[attr] + \"\\\" \";\n              }\n            }\n\n            return result;\n          },\n          imageCssAttributes: function (imgAttributes) {\n            var result = \"\";\n            var attributes = imgAttributes && imgAttributes.toJSON ? imgAttributes.toJSON() : {};\n\n            if (!attributes['class']) {\n              attributes['class'] = IMAGE;\n            } else {\n              attributes['class'] += \" \" + IMAGE;\n            }\n\n            for (var attr in attributes) {\n              if (attributes.hasOwnProperty(attr)) {\n                result += attr + \"=\\\"\" + attributes[attr] + \"\\\" \";\n              }\n            }\n\n            return result;\n          },\n          contentCssAttributes: function (item) {\n            var result = \"\";\n            var attributes = item.contentAttr || {};\n            var defaultClasses = \"k-content k-group k-menu-group k-menu-group-md\";\n\n            if (!attributes['class']) {\n              attributes['class'] = defaultClasses;\n            } else {\n              attributes['class'] += \" \" + defaultClasses;\n            }\n\n            for (var attr in attributes) {\n              if (attributes.hasOwnProperty(attr)) {\n                result += attr + \"=\\\"\" + attributes[attr] + \"\\\" \";\n              }\n            }\n\n            return result;\n          },\n          textClass: function () {\n            return LINK;\n          },\n          arrowClass: function (item, group) {\n            var result = \"k-menu-expand-arrow-icon k-icon\";\n\n            if (group.horizontal) {\n              result += \" k-i-arrow-s\";\n            } else {\n              result += \" k-i-arrow-e\";\n            }\n\n            return result;\n          },\n          groupAttributes: function (group) {\n            return group.expanded !== true ? \" style='display:none'\" : \"\";\n          },\n          groupCssClass: function () {\n            return \"k-group k-menu-group k-menu-group-md\";\n          },\n          content: function (item) {\n            return item.content ? item.content : \"&nbsp;\";\n          }\n        };\n\n        function getEffectDirection(direction, root) {\n          direction = direction.split(\" \")[!root + 0] || direction;\n          return direction.replace(\"top\", \"up\").replace(\"bottom\", \"down\");\n        }\n\n        function parseDirection(direction, root, isRtl) {\n          direction = direction.split(\" \")[!root + 0] || direction;\n          var output = {\n            origin: [\"bottom\", isRtl ? \"right\" : \"left\"],\n            position: [\"top\", isRtl ? \"right\" : \"left\"]\n          },\n              horizontal = /left|right/.test(direction);\n\n          if (horizontal) {\n            output.origin = [\"top\", direction];\n            output.position[1] = kendo.directions[direction].reverse;\n          } else {\n            output.origin[0] = direction;\n            output.position[0] = kendo.directions[direction].reverse;\n          }\n\n          output.origin = output.origin.join(\" \");\n          output.position = output.position.join(\" \");\n          return output;\n        }\n\n        function contains(parent, child) {\n          try {\n            return $.contains(parent, child);\n          } catch (e) {\n            return false;\n          }\n        }\n\n        function updateItemClasses(item) {\n          item = $(item);\n          var omitWrap = item.attr(kendo.attr(\"omit-wrap\"));\n\n          if (omitWrap) {\n            return;\n          }\n\n          item.addClass(\"k-item k-menu-item\").children(IMG).addClass(IMAGE);\n          item.children(\"a\").addClass(LINK).children(IMG).addClass(IMAGE);\n          item.filter(\":not([disabled])\");\n          item.filter(\".k-separator\").removeClass(\"k-menu-item\").addClass(\"k-menu-separator\").empty().append(\"&nbsp;\");\n          item.filter(\"li[disabled]\").addClass(DISABLEDSTATE).prop(\"disabled\", false).attr(\"aria-disabled\", true);\n\n          if (!item.filter(\"[role]\").length) {\n            item.attr(ROLE, \"menuitem\");\n          }\n\n          if (!item.children(LINK_SELECTOR).length) {\n            item.contents() // exclude groups, real links, templates and empty text nodes\n            .filter(function () {\n              return !this.nodeName.match(excludedNodesRegExp) && !(this.nodeType === 3 && !kendo.trim(this.nodeValue));\n            }).wrapAll(\"<span class='\" + LINK + \"'></span>\").filter(function (idx, elm) {\n              return elm.nodeType === 3;\n            }).wrap(\"<span class='k-menu-link-text'></span>\");\n          }\n\n          updateArrow(item);\n          updateFirstLast(item);\n        }\n\n        function updateArrow(item) {\n          item = $(item);\n          item.find(\"> .k-link > .k-menu-expand-arrow > [class*=k-i-arrow]:not(.k-sprite)\").parent().remove();\n          item.filter(\":has(.k-menu-group)\").children(\".k-link:not(:has([class*=k-i-arrow]:not(.k-sprite)))\").each(function () {\n            var item = $(this),\n                arrowCssClass = getArrowCssClass(item);\n            item.append(\"<span class='k-menu-expand-arrow'><span class='k-menu-expand-arrow-icon k-icon \" + arrowCssClass + \"'></span></span>\");\n          });\n        }\n\n        function getArrowCssClass(item) {\n          var arrowCssClass,\n              parent = item.parent().parent(),\n              isRtl = kendo.support.isRtl(parent);\n\n          if (parent.hasClass(MENU + \"-horizontal\")) {\n            arrowCssClass = \"k-i-arrow-s\";\n          } else {\n            if (isRtl) {\n              arrowCssClass = \"k-i-arrow-w\";\n            } else {\n              arrowCssClass = \"k-i-arrow-e\";\n            }\n          }\n\n          return arrowCssClass;\n        }\n\n        function updateFirstLast(item) {\n          item = $(item);\n          item.filter(\".k-first:not(:first-child)\").removeClass(FIRST);\n          item.filter(\".k-last:not(:last-child)\").removeClass(LAST);\n          item.filter(\":first-child\").addClass(FIRST);\n          item.filter(\":last-child\").addClass(LAST);\n        }\n\n        function updateHasAriaPopup(parents) {\n          if (parents && parents.length) {\n            for (var index in parents) {\n              var parentLi = parents.eq(index);\n\n              if (parentLi.find(\"ul\").length) {\n                parentLi.attr(\"aria-haspopup\", true);\n              } else {\n                parentLi.removeAttr(\"aria-haspopup\");\n              }\n            }\n          }\n        }\n\n        function getParentLiItems(group) {\n          if (!group.hasClass(MENU)) {\n            return group.parentsUntil(\".\" + MENU, \"li\");\n          }\n        }\n\n        function storeItemSelectEventHandler(element, options) {\n          var selectHandler = getItemSelectEventHandler(options);\n\n          if (selectHandler) {\n            setItemData(element, selectHandler);\n          }\n\n          if (options.items) {\n            $(element).children(\"ul\").children(\"li\").each(function (i) {\n              storeItemSelectEventHandler(this, options.items[i]);\n            });\n          }\n        }\n\n        function setItemData(element, selectHandler) {\n          $(element).children(\".k-link\").data({\n            selectHandler: selectHandler\n          });\n        }\n\n        function getItemSelectEventHandler(options) {\n          var selectHandler = options.select,\n              isFunction = kendo.isFunction;\n\n          if (selectHandler && isFunction(selectHandler)) {\n            return selectHandler;\n          }\n\n          return null;\n        }\n\n        function popupOpenerSelector(id) {\n          return id ? \"li[data-groupparent='\" + id + \"']\" : \"li[data-groupparent]\";\n        }\n\n        function popupGroupSelector(id) {\n          var selector = id ? \"[data-group='\" + id + \"']\" : \"[data-group]\";\n          return \"ul\" + selector + \",div\" + selector;\n        }\n\n        function getChildPopups(currentPopup, overflowWrapper) {\n          var childPopupOpener = currentPopup.find(popupOpenerSelector());\n          var result = [];\n          childPopupOpener.each(function (i, opener) {\n            opener = $(opener);\n            var popupId = opener.data(POPUP_OPENER_ATTR);\n            var popup = currentPopup;\n\n            while (popupId) {\n              popup = overflowWrapper.find(popupGroupSelector(popupId) + \":visible\");\n\n              if (popup.length) {\n                result.push(popup);\n              }\n\n              opener = popup.find(popupOpenerSelector());\n              popupId = opener.data(POPUP_OPENER_ATTR);\n            }\n          });\n          return result;\n        }\n\n        function popupParentItem(popupElement, overflowWrapper) {\n          var popupId = popupElement.data(POPUP_ID_ATTR);\n          return popupId ? overflowWrapper.find(popupOpenerSelector(popupId)) : $([]);\n        }\n\n        function itemPopup(item, overflowWrapper) {\n          var popupId = item.data(POPUP_OPENER_ATTR);\n          return popupId ? overflowWrapper.children(animationContainerSelector).children(popupGroupSelector(popupId)) : $([]);\n        }\n\n        function overflowMenuParents(current, overflowWrapper) {\n          var parents = [];\n\n          var getParents = function (item) {\n            while (item.parentNode && !overflowWrapper.is(item.parentNode)) {\n              parents.push(item.parentNode);\n              item = item.parentNode;\n            }\n          };\n\n          var elem = current[0] || current;\n          getParents(elem);\n          var last = parents[parents.length - 1];\n\n          while ($(last).is(animationContainerSelector)) {\n            var popupElement = $(last).children(\"ul\");\n            elem = popupParentItem(popupElement, overflowWrapper)[0];\n\n            if (!elem) {\n              break;\n            }\n\n            parents.push(elem);\n            getParents(elem);\n            last = parents[parents.length - 1];\n          }\n\n          return parents;\n        }\n\n        function mousewheelDelta(e) {\n          var delta = 0;\n\n          if (e.wheelDelta) {\n            delta = -e.wheelDelta / 120;\n            delta = delta > 0 ? Math.ceil(delta) : Math.floor(delta);\n          }\n\n          if (e.detail) {\n            delta = Math.round(e.detail / 3);\n          }\n\n          return delta;\n        }\n\n        function parentsScroll(current, scrollDirection) {\n          var scroll = 0;\n          var parent = current.parentNode;\n\n          while (parent && !isNaN(parent[scrollDirection])) {\n            scroll += parent[scrollDirection];\n            parent = parent.parentNode;\n          }\n\n          return scroll;\n        }\n\n        function isPointerTouch(e) {\n          return allPointers && e.originalEvent && e.originalEvent.pointerType in touchPointerTypes;\n        }\n\n        function isTouch(e) {\n          var ev = e.originalEvent;\n          return touch && /touch/i.test(ev.type || \"\");\n        }\n\n        function removeSpacesBetweenItems(ul) {\n          ul.contents().filter(function () {\n            return this.nodeName != \"LI\";\n          }).remove();\n        }\n\n        var Menu = kendo.ui.DataBoundWidget.extend({\n          init: function (element, options) {\n            var that = this;\n            Widget.fn.init.call(that, element, options);\n            element = that.wrapper = that.element;\n            options = that.options;\n\n            that._accessors();\n\n            that._templates();\n\n            that._dataSource();\n\n            that._updateClasses();\n\n            that._animations(options);\n\n            that.nextItemZIndex = 100;\n\n            that._tabindex();\n\n            that._initOverflow(options);\n\n            that._attachMenuEventsHandlers();\n\n            if (options.openOnClick) {\n              that.clicked = false;\n            }\n\n            element.attr(ROLE, \"menubar\");\n\n            if (element[0].id) {\n              that._ariaId = kendo.format(\"{0}_mn_active\", element[0].id);\n            }\n\n            kendo.notify(that);\n          },\n          events: [OPEN, CLOSE, ACTIVATE, DEACTIVATE, SELECT, DATABOUND],\n          options: {\n            name: \"Menu\",\n            animation: {\n              open: {\n                duration: 200\n              },\n              close: {\n                // if close animation effects are defined, they will be used instead of open.reverse\n                duration: 100\n              }\n            },\n            orientation: \"horizontal\",\n            direction: \"default\",\n            openOnClick: false,\n            closeOnClick: true,\n            hoverDelay: 100,\n            scrollable: false,\n            popupCollision: undefined\n          },\n          _initData: function () {\n            var that = this;\n\n            if (that.dataSource) {\n              that.angular(\"cleanup\", function () {\n                return {\n                  elements: that.element.children()\n                };\n              });\n              that.element.empty();\n              that.append(that.dataSource.view(), that.element);\n              that.angular(\"compile\", function () {\n                return {\n                  elements: that.element.children()\n                };\n              });\n            }\n          },\n          _attachMenuEventsHandlers: function () {\n            var that = this;\n            var element = that.element;\n            var options = that.options;\n\n            var overflowWrapper = that._overflowWrapper();\n\n            that._checkActiveProxy = that._checkActiveElement.bind(that);\n            (overflowWrapper || element).on(POINTERDOWN, itemSelector, that._focusHandler.bind(that)).on(CLICK + NS, disabledSelector, false).on(CLICK + NS, itemSelector, that._click.bind(that)).on(POINTERDOWN + \" \" + MOUSEDOWN + NS, \".k-content\", that._preventClose.bind(that)).on(MOUSEENTER + NS, availableItemsSelector, that._mouseenter.bind(that)).on(MOUSELEAVE + NS, availableItemsSelector, that._mouseleave.bind(that)).on(MOUSEDOWN + NS, availableItemsSelector, that._mousedown.bind(that)).on(TOUCHSTART + NS + \" \" + MOUSEENTER + NS + \" \" + MOUSELEAVE + NS + \" \" + MOUSEDOWN + NS + \" \" + CLICK + NS, linkSelector, that._toggleHover.bind(that));\n            element.on(\"keydown\" + NS, that._keydown.bind(that)).on(\"focus\" + NS, that._focus.bind(that)).on(\"focus\" + NS, \".k-content\", that._focus.bind(that)).on(\"blur\" + NS, that._removeHoverItem.bind(that)).on(\"blur\" + NS, \"[tabindex]\", that._checkActiveProxy);\n\n            if (overflowWrapper) {\n              overflowWrapper.on(MOUSELEAVE + NS, popupSelector, that._mouseleavePopup.bind(that)).on(MOUSEENTER + NS, popupSelector, that._mouseenterPopup.bind(that));\n            }\n\n            if (options.openOnClick) {\n              that._documentClickHandler = that._documentClick.bind(that);\n              $(document).on(\"click\", that._documentClickHandler);\n            }\n          },\n          _detachMenuEventsHandlers: function () {\n            var that = this;\n\n            var overflowWrapper = that._overflowWrapper();\n\n            if (overflowWrapper) {\n              overflowWrapper.off(NS);\n            }\n\n            that.element.off(NS);\n\n            if (that._documentClickHandler) {\n              $(document).off(\"click\", that._documentClickHandler);\n            }\n          },\n          _initOverflow: function (options) {\n            var that = this;\n            var isHorizontal = options.orientation == \"horizontal\";\n            var backwardBtn, forwardBtn;\n\n            if (options.scrollable) {\n              that._openedPopups = {};\n              that._scrollWrapper = that.element.wrap(\"<div class='k-menu-scroll-wrapper k-\" + options.orientation + \"'></div>\").parent();\n\n              if (isHorizontal) {\n                removeSpacesBetweenItems(that.element);\n              }\n\n              backwardBtn = $(that.templates.scrollButton({\n                direction: isHorizontal ? \"left\" : \"up\"\n              }));\n              forwardBtn = $(that.templates.scrollButton({\n                direction: isHorizontal ? \"right\" : \"down\"\n              }));\n              backwardBtn.add(forwardBtn).appendTo(that._scrollWrapper);\n\n              that._initScrolling(that.element, backwardBtn, forwardBtn, isHorizontal);\n\n              var initialWidth = that.element.outerWidth();\n              var initialCssWidth = that.element[0].style.width;\n              initialCssWidth = initialCssWidth === \"auto\" ? \"\" : initialCssWidth;\n\n              if (isHorizontal) {\n                $(window).on(RESIZE, function () {\n                  setTimeout(function () {\n                    that._setOverflowWrapperWidth(initialWidth, initialCssWidth);\n\n                    that._toggleScrollButtons(that.element, backwardBtn, forwardBtn, isHorizontal);\n                  }, 300);\n                });\n              }\n\n              that._setOverflowWrapperWidth(initialWidth, initialCssWidth);\n\n              that._toggleScrollButtons(that.element, backwardBtn, forwardBtn, isHorizontal);\n            }\n          },\n          _overflowWrapper: function () {\n            return this._scrollWrapper || this._popupsWrapper;\n          },\n          _setOverflowWrapperWidth: function (initialWidth, initialCssWidth) {\n            var that = this;\n\n            var wrapperCssWidth = that._scrollWrapper.css(\"width\");\n\n            that._scrollWrapper.css({\n              width: \"\"\n            });\n\n            var wrapperWidth = that._scrollWrapper.outerWidth();\n\n            that._scrollWrapper.css({\n              width: wrapperCssWidth\n            });\n\n            var menuWidth = that.element.outerWidth();\n            var borders = that.element[0].offsetWidth - that.element[0].clientWidth;\n\n            if (menuWidth != wrapperWidth && wrapperWidth > 0) {\n              var width = initialCssWidth ? Math.min(initialWidth, wrapperWidth) : wrapperWidth;\n              that.element.width(width - borders);\n\n              that._scrollWrapper.width(width);\n            }\n          },\n          _reinitOverflow: function (options) {\n            var that = this;\n            var overflowChanged = options.scrollable && !that.options.scrollable || !options.scrollable && that.options.scrollable || options.scrollable && that.options.scrollable && options.scrollable.distance != that.options.scrollable.distance || options.orientation != that.options.orientation;\n\n            if (overflowChanged) {\n              that._detachMenuEventsHandlers();\n\n              that._destroyOverflow();\n\n              that._initOverflow(options);\n\n              that._attachMenuEventsHandlers();\n            }\n          },\n          _destroyOverflow: function () {\n            var that = this;\n\n            var overflowWrapper = that._overflowWrapper();\n\n            if (overflowWrapper) {\n              overflowWrapper.off(NS);\n              overflowWrapper.find(scrollButtonSelector).off(NS).remove();\n              overflowWrapper.children(animationContainerSelector).each(function (i, popupWrapper) {\n                var ul = $(popupWrapper).children(groupSelector);\n                ul.off(MOUSEWHEEL);\n                var popupParentLi = popupParentItem(ul, overflowWrapper);\n\n                if (popupParentLi.length) {\n                  popupParentLi.append(popupWrapper);\n                }\n              });\n              overflowWrapper.find(popupOpenerSelector()).removeAttr(\"data-groupparent\");\n              overflowWrapper.find(popupGroupSelector()).removeAttr(\"data-group\");\n              that.element.off(MOUSEWHEEL);\n              $(window).off(RESIZE);\n              overflowWrapper.contents().unwrap();\n              that._scrollWrapper = that._popupsWrapper = that._openedPopups = undefined;\n            }\n          },\n          _initScrolling: function (scrollElement, backwardBtn, forwardBtn, isHorizontal) {\n            var that = this;\n            var scrollable = that.options.scrollable;\n            var distance = that.isNumeric(scrollable.distance) ? scrollable.distance : SCROLLSPEED;\n            var mouseWheelDistance = distance / 2;\n            var backward = \"-=\" + distance;\n            var forward = \"+=\" + distance;\n            var backwardDouble = \"-=\" + distance * 2;\n            var forwardDouble = \"+=\" + distance * 2;\n            var scrolling = false;\n            var touchEvents = false;\n\n            var scroll = function (value) {\n              var scrollValue = isHorizontal ? {\n                \"scrollLeft\": value\n              } : {\n                \"scrollTop\": value\n              };\n              scrollElement.finish().animate(scrollValue, \"fast\", \"linear\", function () {\n                if (scrolling) {\n                  scroll(value);\n                }\n              });\n\n              that._toggleScrollButtons(scrollElement, backwardBtn, forwardBtn, isHorizontal);\n            };\n\n            var mouseenterHandler = function (e) {\n              if (!scrolling && !touchEvents) {\n                scroll(e.data.direction);\n                scrolling = true;\n              }\n            };\n\n            var mousedownHandler = function (e) {\n              var scrollValue = isHorizontal ? {\n                \"scrollLeft\": e.data.direction\n              } : {\n                \"scrollTop\": e.data.direction\n              };\n              touchEvents = isTouch(e) || isPointerTouch(e);\n              scrollElement.stop().animate(scrollValue, \"fast\", \"linear\", function () {\n                if (!touchEvents) {\n                  $(e.currentTarget).trigger(MOUSEENTER);\n                } else {\n                  that._toggleScrollButtons(scrollElement, backwardBtn, forwardBtn, isHorizontal);\n\n                  scrolling = true;\n                }\n              });\n              scrolling = false;\n              e.stopPropagation();\n              e.preventDefault();\n            };\n\n            backwardBtn.on(MOUSEENTER + NS, {\n              direction: backward\n            }, mouseenterHandler).on(kendo.eventMap.down + NS, {\n              direction: backwardDouble\n            }, mousedownHandler);\n            forwardBtn.on(MOUSEENTER + NS, {\n              direction: forward\n            }, mouseenterHandler).on(kendo.eventMap.down + NS, {\n              direction: forwardDouble\n            }, mousedownHandler);\n            backwardBtn.add(forwardBtn).on(MOUSELEAVE + NS, function () {\n              scrollElement.stop();\n              scrolling = false;\n\n              that._toggleScrollButtons(scrollElement, backwardBtn, forwardBtn, isHorizontal);\n            });\n            scrollElement.on(MOUSEWHEEL, function (e) {\n              if (!e.ctrlKey && !e.shiftKey && !e.altKey) {\n                var wheelDelta = mousewheelDelta(e.originalEvent);\n                var scrollSpeed = Math.abs(wheelDelta) * mouseWheelDistance;\n                var value = (wheelDelta > 0 ? \"+=\" : \"-=\") + scrollSpeed;\n                var scrollValue = isHorizontal ? {\n                  \"scrollLeft\": value\n                } : {\n                  \"scrollTop\": value\n                };\n\n                that._closeChildPopups(scrollElement);\n\n                scrollElement.finish().animate(scrollValue, \"fast\", \"linear\", function () {\n                  that._toggleScrollButtons(scrollElement, backwardBtn, forwardBtn, isHorizontal);\n                });\n                e.preventDefault();\n              }\n            });\n          },\n          isNumeric: function (n) {\n            return !isNaN(parseFloat(n)) && isFinite(n);\n          },\n          _toggleScrollButtons: function (scrollElement, backwardBtn, forwardBtn, horizontal) {\n            var currentScroll = horizontal ? kendo.scrollLeft(scrollElement) : scrollElement.scrollTop();\n            var scrollSize = horizontal ? SCROLLWIDTH : SCROLLHEIGHT;\n            var offset = horizontal ? OFFSETWIDTH : OFFSETHEIGHT;\n            backwardBtn.toggle(currentScroll !== 0);\n            forwardBtn.toggle(currentScroll < scrollElement[0][scrollSize] - scrollElement[0][offset] - 1);\n          },\n          setOptions: function (options) {\n            var animation = this.options.animation;\n\n            this._animations(options);\n\n            options.animation = extend(true, animation, options.animation);\n\n            if (\"dataSource\" in options) {\n              this._dataSource(options);\n            }\n\n            this._updateClasses();\n\n            this._reinitOverflow(options);\n\n            Widget.fn.setOptions.call(this, options);\n          },\n          destroy: function () {\n            var that = this;\n            Widget.fn.destroy.call(that);\n\n            that._detachMenuEventsHandlers();\n\n            that._destroyOverflow();\n\n            kendo.destroy(that.element);\n          },\n          enable: function (element, enable) {\n            this._toggleDisabled(element, enable !== false);\n\n            return this;\n          },\n          disable: function (element) {\n            this._toggleDisabled(element, false);\n\n            return this;\n          },\n          attemptGetItem: function (candidate) {\n            candidate = candidate || this.element;\n            var item = this.element.find(candidate);\n\n            var overflowWrapper = this._overflowWrapper();\n\n            if (item.length || candidate === this.element) {\n              return item;\n            } else if (overflowWrapper) {\n              return overflowWrapper.find(candidate);\n            } else {\n              return $();\n            }\n          },\n          append: function (item, referenceItem) {\n            referenceItem = this.attemptGetItem(referenceItem);\n\n            var inserted = this._insert(item, referenceItem, referenceItem.length ? this._childPopupElement(referenceItem) : null);\n\n            each(inserted.items, function (i) {\n              inserted.group.append(this);\n              updateArrow(this);\n              storeItemSelectEventHandler(this, item[i] || item);\n            });\n            updateArrow(referenceItem);\n            updateFirstLast(inserted.group.find(\".k-first, .k-last\").add(inserted.items));\n            updateHasAriaPopup(getParentLiItems(inserted.group));\n            return this;\n          },\n          insertBefore: function (item, referenceItem) {\n            referenceItem = this.attemptGetItem(referenceItem);\n\n            var inserted = this._insert(item, referenceItem, referenceItem.parent());\n\n            each(inserted.items, function (i) {\n              referenceItem.before(this);\n              updateArrow(this);\n              updateFirstLast(this);\n              storeItemSelectEventHandler(this, item[i] || item);\n            });\n            updateFirstLast(referenceItem);\n            return this;\n          },\n          insertAfter: function (item, referenceItem) {\n            referenceItem = this.attemptGetItem(referenceItem);\n\n            var inserted = this._insert(item, referenceItem, referenceItem.parent());\n\n            each(inserted.items, function (i) {\n              referenceItem.after(this);\n              updateArrow(this);\n              updateFirstLast(this);\n              storeItemSelectEventHandler(this, item[i] || item);\n            });\n            updateFirstLast(referenceItem);\n            return this;\n          },\n          _insert: function (item, referenceItem, parent) {\n            var that = this,\n                items,\n                groups;\n\n            if (!referenceItem || !referenceItem.length) {\n              parent = that.element;\n            }\n\n            var plain = $.isPlainObject(item) || item instanceof kendo.data.ObservableObject,\n                groupData = {\n              firstLevel: parent.hasClass(MENU),\n              horizontal: parent.hasClass(MENU + \"-horizontal\"),\n              expanded: true,\n              length: parent.children().length\n            };\n\n            if (referenceItem && !parent.length) {\n              parent = $(that.renderGroup({\n                group: groupData,\n                options: that.options\n              })).appendTo(referenceItem);\n            }\n\n            if (plain || isArray(item) || item instanceof kendo.data.ObservableArray) {\n              // is JSON\n              items = $($.map(plain ? [item] : item, function (value, idx) {\n                if (typeof value === \"string\") {\n                  return $(value).get();\n                } else {\n                  return $(that.renderItem({\n                    group: groupData,\n                    item: extend(value, {\n                      index: idx\n                    })\n                  })).get();\n                }\n              }));\n            } else {\n              if (typeof item == \"string\" && item.charAt(0) != \"<\") {\n                items = that.element.find(item);\n              } else {\n                items = $(item);\n              }\n\n              groups = items.find(\"> ul\").addClass(\"k-menu-group k-menu-group-md\").attr(ROLE, \"menu\");\n              items = items.filter(\"li\");\n              items.add(groups.find(\"> li\")).each(function () {\n                updateItemClasses(this);\n              });\n            }\n\n            return {\n              items: items,\n              group: parent\n            };\n          },\n          remove: function (element) {\n            element = this.attemptGetItem(element);\n            var that = this,\n                parent = element.parentsUntil(that.element, allItemsSelector),\n                group = element.parent(\"ul:not(.k-menu)\");\n            element.remove();\n\n            if (group && !group.children(allItemsSelector).length) {\n              var parentItems = getParentLiItems(group);\n              var container = group.parent(animationContainerSelector);\n\n              if (container.length) {\n                container.remove();\n              } else {\n                group.remove();\n              }\n\n              updateHasAriaPopup(parentItems);\n            }\n\n            if (parent.length) {\n              parent = parent.eq(0);\n              updateArrow(parent);\n              updateFirstLast(parent);\n            }\n\n            return that;\n          },\n          _openAfterLoad: function (element, dataItem) {\n            var that = this;\n\n            if (dataItem.loaded()) {\n              that.open(element);\n              that._loading = false;\n            } else {\n              dataItem.one(CHANGE, function () {\n                element.find(ICON_SELECTOR).removeClass(\"k-i-loading\");\n\n                if (that._loading) {\n                  that.open(element);\n                  that._loading = false;\n                }\n              });\n            }\n          },\n          open: function (element) {\n            var that = this;\n            var options = that.options;\n            var horizontal = options.orientation == \"horizontal\";\n            var direction = options.direction;\n            var isRtl = kendo.support.isRtl(that.wrapper);\n\n            var overflowWrapper = that._overflowWrapper();\n\n            element = (overflowWrapper || that.element).find(element);\n            var dataItem = that.dataSource && that.dataSource.getByUid(element.data(kendo.ns + \"uid\"));\n\n            if (dataItem && dataItem.hasChildren && !dataItem.loaded() && !that._loading) {\n              that._loading = true;\n              element.find(ICON_SELECTOR).addClass(\"k-i-loading\");\n              dataItem.load();\n\n              that._openAfterLoad(element, dataItem);\n\n              return;\n            }\n\n            if (/^(top|bottom|default)$/.test(direction)) {\n              if (isRtl) {\n                direction = horizontal ? (direction + \" left\").replace(\"default\", \"bottom\") : \"left\";\n              } else {\n                direction = horizontal ? (direction + \" right\").replace(\"default\", \"bottom\") : \"right\";\n              }\n            }\n\n            var visiblePopups = \">.k-popup:visible,>.k-animation-container>.k-popup:visible\";\n\n            var closePopup = function () {\n              var popup = $(this).data(KENDOPOPUP);\n\n              if (popup) {\n                // Use the built-in close method to play the hoverDelay from the options\n                that.close($(this).closest(\"li.k-item\"), true);\n              }\n            };\n\n            element.siblings().find(visiblePopups).each(closePopup);\n\n            if (overflowWrapper) {\n              element.find(visiblePopups).each(closePopup);\n            }\n\n            if (that.options.openOnClick) {\n              that.clicked = true;\n            }\n\n            element.each(function () {\n              var li = $(this);\n              clearTimeout(li.data(TIMER));\n              li.data(TIMER, setTimeout(function () {\n                var ul = li.find(\"> .k-menu-group, > .k-animation-container > .k-menu-group\").filter(\":hidden\").first();\n                var popup;\n                var overflowPopup;\n\n                if (!ul[0] && overflowWrapper) {\n                  overflowPopup = that._getPopup(li);\n                  ul = overflowPopup && overflowPopup.element;\n                }\n\n                if (ul.is(\":visible\")) {\n                  return;\n                }\n\n                if (ul[0] && that._triggerEvent({\n                  item: li[0],\n                  type: OPEN\n                }) === false) {\n                  if (!ul.find(\".k-menu-group\")[0] && ul.children(\".k-item\").length > 1) {\n                    var windowHeight = $(window).height(),\n                        setScrolling = function () {\n                      ul.css({\n                        maxHeight: windowHeight - (kendo._outerHeight(ul) - ul.height()) - kendo.getShadows(ul).bottom,\n                        overflow: \"auto\"\n                      });\n                    };\n\n                    setScrolling();\n                  } else {\n                    ul.css({\n                      maxHeight: \"\",\n                      overflow: \"\"\n                    });\n                  }\n\n                  li.data(ZINDEX, li.css(ZINDEX));\n                  var nextZindex = that.nextItemZIndex++;\n                  li.css(ZINDEX, nextZindex);\n\n                  if (that.options.scrollable) {\n                    li.parent().siblings(scrollButtonSelector).css({\n                      zIndex: ++nextZindex\n                    });\n                  }\n\n                  popup = ul.data(KENDOPOPUP);\n                  var root = li.parent().hasClass(MENU),\n                      parentHorizontal = root && horizontal,\n                      directions = parseDirection(direction, root, isRtl),\n                      effects = options.animation.open.effects,\n                      openEffects = effects !== undefined ? effects : \"slideIn:\" + getEffectDirection(direction, root);\n\n                  if (!popup) {\n                    popup = ul.kendoPopup({\n                      activate: function () {\n                        that._triggerEvent({\n                          item: this.wrapper.parent(),\n                          type: ACTIVATE\n                        });\n                      },\n                      deactivate: function (e) {\n                        that._closing = false;\n                        e.sender.element // Restore opacity after fade.\n                        .removeData(\"targetTransform\").css({\n                          opacity: \"\"\n                        });\n\n                        that._triggerEvent({\n                          item: this.wrapper.parent(),\n                          type: DEACTIVATE\n                        });\n                      },\n                      origin: directions.origin,\n                      position: directions.position,\n                      collision: options.popupCollision !== undefined ? options.popupCollision : parentHorizontal ? \"fit\" : \"fit flip\",\n                      anchor: li,\n                      appendTo: overflowWrapper || li,\n                      animation: {\n                        open: extend(true, {\n                          effects: openEffects\n                        }, options.animation.open),\n                        close: options.animation.close\n                      },\n                      open: that._popupOpen.bind(that),\n                      close: function (e) {\n                        that._closing = e.sender.element;\n                        var li = e.sender.wrapper.parent();\n\n                        if (overflowWrapper) {\n                          var popupId = e.sender.element.data(POPUP_ID_ATTR);\n\n                          if (popupId) {\n                            li = (overflowWrapper || that.element).find(popupOpenerSelector(popupId));\n                          }\n\n                          e.sender.wrapper.children(scrollButtonSelector).hide();\n                        }\n\n                        if (!that._triggerEvent({\n                          item: li[0],\n                          type: CLOSE\n                        })) {\n                          li.css(ZINDEX, li.data(ZINDEX));\n                          li.removeData(ZINDEX);\n\n                          if (that.options.scrollable) {\n                            li.parent().siblings(scrollButtonSelector).css({\n                              zIndex: \"\"\n                            });\n                          }\n\n                          if (touch || allPointers || kendo.support.mouseAndTouchPresent) {\n                            li.removeClass(HOVERSTATE);\n\n                            that._removeHoverItem();\n                          }\n                        } else {\n                          e.preventDefault();\n                        }\n                      }\n                    }).data(KENDOPOPUP);\n                    ul.closest(animationContainerSelector).removeAttr(ROLE);\n                  } else {\n                    popup = ul.data(KENDOPOPUP);\n                    popup.options.origin = directions.origin;\n                    popup.options.position = directions.position;\n                    popup.options.animation.open.effects = openEffects;\n                  }\n\n                  ul.removeAttr(\"aria-hidden\");\n                  li.attr(ARIA_EXPANDED, true);\n\n                  that._configurePopupOverflow(popup, li);\n\n                  popup._hovered = true;\n                  popup.open();\n\n                  that._initPopupScrolling(popup);\n                }\n              }, that.options.hoverDelay));\n            });\n            return that;\n          },\n          _configurePopupOverflow: function (popup, popupOpener) {\n            var that = this;\n\n            if (that.options.scrollable) {\n              that._wrapPopupElement(popup);\n\n              if (!popupOpener.attr(\"data-groupparent\")) {\n                var groupId = new Date().getTime();\n                popupOpener.attr(\"data-groupparent\", groupId);\n                popup.element.attr(\"data-group\", groupId);\n              }\n            }\n          },\n          _wrapPopupElement: function (popup) {\n            if (!popup.element.parent().is(animationContainerSelector)) {\n              popup.wrapper = kendo.wrap(popup.element, popup.options.autosize).css({\n                overflow: \"hidden\",\n                display: \"block\",\n                position: \"absolute\"\n              });\n            }\n          },\n          _initPopupScrolling: function (popup, isHorizontal, skipMouseEvents) {\n            var that = this;\n\n            if (that.options.scrollable && popup.element[0].scrollHeight > popup.element[0].offsetHeight) {\n              that._initPopupScrollButtons(popup, isHorizontal, skipMouseEvents);\n            }\n          },\n          _initPopupScrollButtons: function (popup, isHorizontal, skipMouseEvents) {\n            var that = this;\n            var scrollButtons = popup.wrapper.children(scrollButtonSelector);\n            var animation = that.options.animation;\n            var timeout = (animation && animation.open && animation.open.duration || 0) + DELAY;\n            setTimeout(function () {\n              if (!scrollButtons.length) {\n                var backwardBtn = $(that.templates.scrollButton({\n                  direction: isHorizontal ? \"left\" : \"up\"\n                }));\n                var forwardBtn = $(that.templates.scrollButton({\n                  direction: isHorizontal ? \"right\" : \"down\"\n                }));\n                scrollButtons = backwardBtn.add(forwardBtn).appendTo(popup.wrapper);\n\n                that._initScrolling(popup.element, backwardBtn, forwardBtn, isHorizontal);\n\n                if (!skipMouseEvents) {\n                  scrollButtons.on(MOUSEENTER + NS, function () {\n                    var overflowWrapper = that._overflowWrapper();\n\n                    $(getChildPopups(popup.element, overflowWrapper)).each(function (i, p) {\n                      var popupOpener = overflowWrapper.find(popupOpenerSelector(p.data(POPUP_ID_ATTR)));\n                      that.close(popupOpener);\n                    });\n                  }).on(MOUSELEAVE + NS, function () {\n                    setTimeout(function () {\n                      if ($.isEmptyObject(that._openedPopups)) {\n                        that._closeParentPopups(popup.element);\n                      }\n                    }, DELAY);\n                  });\n                }\n              }\n\n              that._toggleScrollButtons(popup.element, scrollButtons.first(), scrollButtons.last(), isHorizontal);\n            }, timeout);\n          },\n          _popupOpen: function (e) {\n            if (!this._keyTriggered) {\n              e.sender.element.children(\".\" + FOCUSEDSTATE).removeClass(FOCUSEDSTATE);\n            }\n\n            if (this.options.scrollable) {\n              this._setPopupHeight(e.sender);\n            }\n          },\n          _setPopupHeight: function (popup, isFixed) {\n            var popupElement = popup.element;\n            var popups = popupElement.add(popupElement.parent(animationContainerSelector));\n            popups.height(popupElement.hasClass(MENU) && this._initialHeight || \"\");\n\n            var location = popup._location(isFixed);\n\n            var windowHeight = $(window).height();\n            var popupOuterHeight = location.height;\n            var popupOffsetTop = isFixed ? 0 : Math.max(location.top, 0);\n            var scrollTop = isFixed ? 0 : parentsScroll(this._overflowWrapper()[0], \"scrollTop\");\n            var bottomScrollbar = window.innerHeight - windowHeight;\n            var maxHeight = windowHeight - kendo.getShadows(popupElement).bottom + bottomScrollbar;\n            var canFit = maxHeight + scrollTop > popupOuterHeight + popupOffsetTop;\n\n            if (!canFit) {\n              var height = Math.min(maxHeight, maxHeight - popupOffsetTop + scrollTop);\n              popups.css({\n                overflow: \"hidden\",\n                height: height + \"px\"\n              });\n            }\n          },\n          close: function (items, dontClearClose) {\n            var that = this;\n\n            var overflowWrapper = that._overflowWrapper();\n\n            var element = overflowWrapper || that.element;\n            items = element.find(items);\n\n            if (!items.length) {\n              items = element.find(\">.k-item\");\n            }\n\n            var hasChildPopupsHovered = function (currentPopup) {\n              var result = false;\n\n              if ($.isEmptyObject(that._openedPopups)) {\n                return result;\n              }\n\n              $(getChildPopups(currentPopup, overflowWrapper)).each(function (i, popup) {\n                result = !!that._openedPopups[popup.data(POPUP_ID_ATTR).toString()];\n                return !result;\n              });\n              return result;\n            };\n\n            var isPopupMouseLeaved = function (opener) {\n              var groupId = opener.data(POPUP_OPENER_ATTR);\n              return !overflowWrapper || !groupId || !that._openedPopups[groupId.toString()];\n            };\n\n            items.each(function () {\n              var li = $(this);\n              li.attr(ARIA_EXPANDED, false);\n\n              if (!dontClearClose && that._isRootItem(li)) {\n                that.clicked = false;\n              }\n\n              clearTimeout(li.data(TIMER));\n              li.data(TIMER, setTimeout(function () {\n                var popup = that._getPopup(li);\n\n                if (popup && (isPopupMouseLeaved(li) || that._forceClose)) {\n                  if (!that._forceClose && hasChildPopupsHovered(popup.element)) {\n                    return;\n                  }\n\n                  popup.close();\n                  popup.element.attr(\"aria-hidden\", true);\n\n                  if (overflowWrapper) {\n                    if (that._forceClose && items.last().is(li[0])) {\n                      delete that._forceClose;\n                    }\n                  }\n                }\n              }, that.options.hoverDelay));\n            });\n            return that;\n          },\n          _getPopup: function (li) {\n            var that = this;\n            var popup = li.find(\".k-menu-group:not(.k-list-container):not(.k-calendar-container):visible\").first().data(KENDOPOPUP);\n\n            var overflowWrapper = that._overflowWrapper();\n\n            if (!popup && overflowWrapper) {\n              var groupId = li.data(POPUP_OPENER_ATTR);\n\n              if (groupId) {\n                var popupElement = overflowWrapper.find(popupGroupSelector(groupId));\n                popup = popupElement.data(KENDOPOPUP);\n              }\n            }\n\n            return popup;\n          },\n          _toggleDisabled: function (items, enable) {\n            this.element.find(items).each(function () {\n              $(this).toggleClass(DISABLEDSTATE, !enable).attr(\"aria-disabled\", !enable);\n            });\n          },\n          _toggleHover: function (e) {\n            var target = $(kendo.eventTarget(e) || e.target).closest(allItemsSelector),\n                isEnter = e.type == MOUSEENTER || MOUSEDOWN.indexOf(e.type) !== -1;\n            target.siblings().removeClass(HOVERSTATE);\n\n            if (!target.parents(\"li.\" + DISABLEDSTATE).length) {\n              target.toggleClass(HOVERSTATE, isEnter || e.type == \"mousedown\" || e.type == \"pointerover\" || e.type == TOUCHSTART);\n            }\n\n            this._removeHoverItem();\n          },\n          _preventClose: function () {\n            if (!this.options.closeOnClick) {\n              this._closurePrevented = true;\n            }\n          },\n          _checkActiveElement: function (e) {\n            var that = this,\n                hoverItem = $(e ? e.currentTarget : this._hoverItem()),\n                target = that._findRootParent(hoverItem)[0];\n\n            if (!this._closurePrevented) {\n              setTimeout(function () {\n                if (!document.hasFocus() || !contains(target, kendo._activeElement()) && e && !contains(target, e.currentTarget)) {\n                  that.close(target);\n                }\n              }, 0);\n            }\n\n            this._closurePrevented = false;\n          },\n          _removeHoverItem: function () {\n            var oldHoverItem = this._hoverItem();\n\n            if (oldHoverItem && oldHoverItem.hasClass(FOCUSEDSTATE)) {\n              oldHoverItem.removeClass(FOCUSEDSTATE);\n              this._oldHoverItem = null;\n            }\n          },\n          _updateClasses: function () {\n            var element = this.element,\n                nonContentGroupsSelector = \".k-menu-init div ul\",\n                items;\n            element.removeClass(\"k-menu-horizontal k-menu-vertical\");\n            element.addClass(\"k-widget k-reset k-menu-init \" + MENU).addClass(MENU + \"-\" + this.options.orientation);\n\n            if (this.options.orientation === \"vertical\") {\n              element.attr(\"aria-orientation\", \"vertical\");\n            } else {\n              element.attr(\"aria-orientation\", \"horizontal\");\n            }\n\n            element.find(\"li > ul\").filter(function () {\n              return !kendo.support.matchesSelector.call(this, nonContentGroupsSelector);\n            }).addClass(\"k-group k-menu-group k-menu-group-md\").attr(ROLE, \"menu\").hide().attr(\"aria-hidden\", element.is(\":visible\")).parent(\"li\").attr(\"aria-haspopup\", \"true\").end().find(\"li > div\").addClass(\"k-content\").attr(\"tabindex\", \"-1\"); // Capture the focus before the Menu\n\n            element.find(\"li[aria-haspopup]\").attr(ARIA_EXPANDED, false);\n            items = element.find(\"> li,.k-menu-group > li\");\n            element.removeClass(\"k-menu-init\");\n            items.each(function () {\n              updateItemClasses(this);\n            });\n          },\n          _mouseenter: function (e) {\n            var that = this;\n            var element = $(e.currentTarget);\n\n            var hasChildren = that._itemHasChildren(element);\n\n            var popupId = element.data(POPUP_OPENER_ATTR) || element.parent().data(POPUP_ID_ATTR);\n            var pointerTouch = isPointerTouch(e);\n            var isParentClosing = false;\n\n            if (popupId) {\n              that._openedPopups[popupId.toString()] = true;\n            }\n\n            if (that._closing) {\n              isParentClosing = !!that._closing.find(element).length;\n            }\n\n            if (isParentClosing || e.delegateTarget != element.parents(menuSelector)[0] && e.delegateTarget != element.parents(\".k-menu-scroll-wrapper,.k-popups-wrapper\")[0]) {\n              return;\n            }\n\n            that._keyTriggered = false;\n\n            if (that.options.openOnClick.rootMenuItems && that._isRootItem(element.closest(allItemsSelector)) || that.options.openOnClick.subMenuItems && !that._isRootItem(element.closest(allItemsSelector))) {\n              return;\n            }\n\n            if ((that.options.openOnClick === false || that.options.openOnClick.rootMenuItems === false && that._isRootItem(element.closest(allItemsSelector)) || that.options.openOnClick.subMenuItems === false && !that._isRootItem(element.closest(allItemsSelector)) || that.clicked) && !touch && !(pointerTouch && that._isRootItem(element.closest(allItemsSelector)))) {\n              if (!contains(e.currentTarget, e.relatedTarget) && hasChildren) {\n                that.open(element);\n              }\n            }\n\n            if (that.options.openOnClick === true && that.clicked || touch) {\n              element.siblings().each(function (_, sibling) {\n                that.close(sibling, true);\n              });\n            }\n          },\n          _mousedown: function (e) {\n            var that = this;\n            var element = $(e.currentTarget); // needs to close subMenuItems\n\n            if (that.options.openOnClick.subMenuItems && !that._isRootItem(element) || touch) {\n              element.siblings().each(function (_, sibling) {\n                that.close(sibling, true);\n              });\n            }\n          },\n          _mouseleave: function (e) {\n            var that = this;\n            var element = $(e.currentTarget);\n            var popupOpener = element.data(POPUP_OPENER_ATTR);\n            var hasChildren = element.children(animationContainerSelector).length || element.children(groupSelector).length || popupOpener;\n            var $window = $(window);\n\n            if (popupOpener) {\n              delete that._openedPopups[popupOpener.toString()];\n            }\n\n            if (element.parentsUntil(animationContainerSelector, \".k-list-container,.k-calendar-container\")[0]) {\n              e.stopImmediatePropagation();\n              return;\n            }\n\n            if ((that.options.openOnClick === false || !that.options.openOnClick.rootMenuItems && that._isRootItem(element) || !that.options.openOnClick.subMenuItems && !that._isRootItem(element)) && !touch && !isPointerTouch(e) && !contains(e.currentTarget, e.relatedTarget || e.target) && hasChildren && !contains(e.currentTarget, kendo._activeElement())) {\n              that.close(element, true);\n              that._loading = false;\n              return;\n            } // Detect if cursor goes outside the viewport of the browser\n\n\n            if (kendo.support.browser.msie && !e.toElement && !e.relatedTarget && !isPointerTouch(e) || e.clientX < 0 || e.clientY < 0 || e.clientY > $window.height() || e.clientX > $window.width()) {\n              that.close(element);\n            }\n          },\n          _mouseenterPopup: function (e) {\n            var that = this;\n            var popupElement = $(e.currentTarget);\n\n            if (popupElement.parent().is(animationContainerSelector)) {\n              return;\n            }\n\n            popupElement = popupElement.children(\"ul\");\n            var popupId = popupElement.data(POPUP_ID_ATTR);\n\n            if (popupId) {\n              that._openedPopups[popupId.toString()] = true;\n            }\n          },\n          _mouseleavePopup: function (e) {\n            var that = this;\n            var popupElement = $(e.currentTarget);\n\n            if (!isPointerTouch(e) && popupElement.is(animationContainerSelector)) {\n              that._closePopups(popupElement.children(\"ul\"));\n            }\n          },\n          _closePopups: function (rootPopup) {\n            var that = this;\n\n            var overflowWrapper = that._overflowWrapper();\n\n            var popupId = rootPopup.data(POPUP_ID_ATTR);\n\n            if (popupId) {\n              delete that._openedPopups[popupId.toString()];\n              var groupParent = overflowWrapper.find(popupOpenerSelector(popupId));\n              setTimeout(function () {\n                if (that.options.openOnClick) {\n                  that._closeChildPopups(rootPopup);\n                } else {\n                  if ($.isEmptyObject(that._openedPopups)) {\n                    var innerPopup = that._innerPopup(rootPopup);\n\n                    that._closeParentPopups(innerPopup);\n                  } else {\n                    that.close(groupParent, true);\n                  }\n                }\n              }, 0);\n            }\n          },\n          _closeChildPopups: function (current) {\n            var that = this;\n\n            var overflowWrapper = that._overflowWrapper();\n\n            $(getChildPopups(current, overflowWrapper)).each(function () {\n              var popupOpener = overflowWrapper.find(popupOpenerSelector(this.data(POPUP_ID_ATTR)));\n              that.close(popupOpener, true);\n            });\n          },\n          _innerPopup: function (current) {\n            var overflowWrapper = this._overflowWrapper();\n\n            var popups = getChildPopups(current, overflowWrapper);\n            return popups[popups.length - 1] || current;\n          },\n          _closeParentPopups: function (current) {\n            var that = this;\n\n            var overflowWrapper = that._overflowWrapper();\n\n            var popupId = current.data(POPUP_ID_ATTR);\n            var popupOpener = overflowWrapper.find(popupOpenerSelector(popupId));\n            popupId = popupOpener.parent().data(POPUP_ID_ATTR);\n            that.close(popupOpener, true);\n\n            while (popupId && !that._openedPopups[popupId]) {\n              if (popupOpener.parent().is(menuSelector)) {\n                break;\n              }\n\n              popupOpener = overflowWrapper.find(popupOpenerSelector(popupId));\n              that.close(popupOpener, true);\n              popupId = popupOpener.parent().data(POPUP_ID_ATTR);\n            }\n          },\n          _click: function (e) {\n            var that = this,\n                openHandle,\n                options = that.options,\n                target = $(kendo.eventTarget(e)),\n                targetElement = target[0],\n                nodeName = target[0] ? target[0].nodeName.toUpperCase() : \"\",\n                formNode = nodeName == \"INPUT\" || nodeName == \"SELECT\" || nodeName == \"BUTTON\" || nodeName == \"LABEL\",\n                link = target.closest(LINK_SELECTOR),\n                element = target.closest(allItemsSelector),\n                itemElement = element[0],\n                href = link.attr(\"href\"),\n                childGroup,\n                childGroupVisible,\n                targetHref = target.attr(\"href\"),\n                sampleHref = $(\"<a href='#' />\").attr(\"href\"),\n                isLink = !!href && href !== sampleHref,\n                isLocalLink = isLink && !!href.match(/^#/),\n                isTargetLink = !!targetHref && targetHref !== sampleHref,\n                overflowWrapper = that._overflowWrapper(),\n                shouldCloseTheRootItem;\n\n            if (targetElement && (!targetElement.parentNode || !itemElement)) {\n              return;\n            }\n\n            if ($(target).hasClass('k-menu-expand-arrow-icon')) {\n              this._lastClickedElement = itemElement;\n            }\n\n            while (targetElement && targetElement.parentNode != itemElement) {\n              targetElement = targetElement.parentNode;\n            }\n\n            if ($(targetElement).is(templateSelector)) {\n              return;\n            }\n\n            if (element.hasClass(DISABLEDSTATE)) {\n              e.preventDefault();\n              return;\n            }\n\n            if (!e.handled && that._triggerSelect(target, itemElement) && !formNode) {\n              // We shouldn't stop propagation and shoudn't prevent form elements.\n              e.preventDefault();\n            }\n\n            e.handled = true;\n            childGroup = element.children(popupSelector);\n\n            if (overflowWrapper) {\n              var childPopupId = element.data(POPUP_OPENER_ATTR);\n\n              if (childPopupId) {\n                childGroup = overflowWrapper.find(popupGroupSelector(childPopupId));\n              }\n            }\n\n            childGroupVisible = childGroup.is(\":visible\");\n            shouldCloseTheRootItem = options.openOnClick && childGroupVisible && that._isRootItem(element);\n\n            if (options.closeOnClick && (!isLink || isLocalLink) && (!childGroup.length || shouldCloseTheRootItem)) {\n              element.removeClass(HOVERSTATE).css(\"height\"); // Force refresh for Chrome\n\n              that._oldHoverItem = that._findRootParent(element);\n\n              var item = that._parentsUntil(link, that.element, allItemsSelector);\n\n              that._forceClose = !!overflowWrapper;\n              that.close(item);\n              that.clicked = false;\n\n              if (\"MSPointerUp\".indexOf(e.type) != -1) {\n                e.preventDefault();\n              }\n\n              return;\n            }\n\n            if (isLink && e.enterKey) {\n              link[0].click();\n            }\n\n            if ((!that._isRootItem(element) || options.openOnClick === false) && !options.openOnClick.subMenuItems && !kendo.support.touch && !(isPointerTouch(e) && that._isRootItem(element.closest(allItemsSelector)))) {\n              return;\n            }\n\n            if (!isLink && !formNode && !isTargetLink) {\n              e.preventDefault();\n            }\n\n            that.clicked = true;\n            openHandle = childGroup.is(\":visible\") ? CLOSE : OPEN;\n\n            if (!options.closeOnClick && openHandle == CLOSE) {\n              return;\n            }\n\n            that[openHandle](element);\n          },\n          _parentsUntil: function (context, top, selector) {\n            var overflowWrapper = this._overflowWrapper();\n\n            if (!overflowWrapper) {\n              return context.parentsUntil(top, selector);\n            } else {\n              var parents = overflowMenuParents(context, overflowWrapper);\n              var result = [];\n              $(parents).each(function () {\n                var parent = $(this);\n\n                if (parent.is(top)) {\n                  return false;\n                }\n\n                if (parent.is(selector)) {\n                  result.push(this);\n                }\n              });\n              return $(result);\n            }\n          },\n          _triggerSelect: function (target, itemElement) {\n            target = target.is(\".k-link\") ? target : target.closest(\".k-link\");\n            var selectHandler = target.data(\"selectHandler\"),\n                itemSelectEventData;\n\n            if (selectHandler) {\n              itemSelectEventData = this._getEventData(target);\n              selectHandler.call(this, itemSelectEventData);\n            }\n\n            var isSelectItemDefaultPrevented = itemSelectEventData && itemSelectEventData.isDefaultPrevented();\n\n            var isSelectDefaultPrevented = this._triggerEvent({\n              item: itemElement,\n              type: SELECT\n            });\n\n            return isSelectItemDefaultPrevented || isSelectDefaultPrevented;\n          },\n          _getEventData: function (target) {\n            var eventData = {\n              sender: this,\n              target: target,\n              _defaultPrevented: false,\n              preventDefault: function () {\n                this._defaultPrevented = true;\n              },\n              isDefaultPrevented: function () {\n                return this._defaultPrevented;\n              }\n            };\n            return eventData;\n          },\n          _documentClick: function (e) {\n            var that = this;\n            var target = $(e.target).hasClass('k-menu-expand-arrow-icon') ? that._lastClickedElement : e.target;\n\n            if (contains((that._overflowWrapper() || that.element)[0], target)) {\n              that._lastClickedElement = undefined;\n              return;\n            }\n\n            that.clicked = false;\n          },\n          _focus: function (e) {\n            var that = this,\n                target = e.target,\n                hoverItem = that._hoverItem(),\n                active = activeElement();\n\n            if (target != that.wrapper[0] && !$(target).is(\":kendoFocusable\")) {\n              e.stopPropagation();\n              $(target).closest(\".k-content\").closest(\".k-menu-group\").closest(\".k-item\").addClass(FOCUSEDSTATE);\n              that.wrapper.trigger(\"focus\");\n              return;\n            }\n\n            if (active === e.currentTarget) {\n              if (hoverItem.length) {\n                that._moveHover([], hoverItem);\n              } else if (!that._oldHoverItem) {\n                that._moveHover([], that.wrapper.children().first());\n              }\n            }\n          },\n          _keydown: function (e) {\n            var that = this,\n                key = e.keyCode,\n                hoverItem = that._oldHoverItem,\n                target,\n                belongsToVertical,\n                hasChildren,\n                isRtl = kendo.support.isRtl(that.wrapper);\n\n            if (e.target != e.currentTarget && key != keys.ESC) {\n              return;\n            }\n\n            if (!hoverItem) {\n              hoverItem = that._oldHoverItem = that._hoverItem();\n            }\n\n            belongsToVertical = that._itemBelongsToVertival(hoverItem);\n            hasChildren = that._itemHasChildren(hoverItem);\n            that._keyTriggered = true;\n\n            if (key == keys.RIGHT) {\n              target = that[isRtl ? \"_itemLeft\" : \"_itemRight\"](hoverItem, belongsToVertical, hasChildren);\n            } else if (key == keys.LEFT) {\n              target = that[isRtl ? \"_itemRight\" : \"_itemLeft\"](hoverItem, belongsToVertical, hasChildren);\n            } else if (key == keys.DOWN) {\n              target = that._itemDown(hoverItem, belongsToVertical, hasChildren);\n            } else if (key == keys.UP) {\n              target = that._itemUp(hoverItem, belongsToVertical, hasChildren);\n            } else if (key == keys.HOME) {\n              that._moveHover(hoverItem, hoverItem.parent().children().first());\n\n              e.preventDefault();\n            } else if (key == keys.END) {\n              that._moveHover(hoverItem, hoverItem.parent().children().last());\n\n              e.preventDefault();\n            } else if (key == keys.ESC) {\n              target = that._itemEsc(hoverItem, belongsToVertical);\n            } else if (key == keys.ENTER || key == keys.SPACEBAR) {\n              target = hoverItem.children(\".k-link\");\n\n              if (target.length > 0) {\n                that._click({\n                  target: target[0],\n                  preventDefault: function () {},\n                  enterKey: true\n                });\n\n                if (hasChildren && !hoverItem.hasClass(DISABLEDSTATE)) {\n                  that.open(hoverItem);\n\n                  that._moveHover(hoverItem, that._childPopupElement(hoverItem).children().first());\n                } else if (hoverItem.is(\"li\") && hoverItem.attr(\"role\") === \"menuitemcheckbox\") {\n                  hoverItem.find(\".k-checkbox\").attr(\"checked\", true);\n                } else {\n                  that._moveHoverToRoot(hoverItem, that._findRootParent(hoverItem));\n                }\n              }\n            } else if (key == keys.TAB) {\n              target = that._findRootParent(hoverItem);\n\n              that._moveHover(hoverItem, target);\n\n              that._checkActiveElement();\n\n              return;\n            }\n\n            if (target && target[0]) {\n              e.preventDefault();\n              e.stopPropagation(); // needed to handle ESC in column menu only when a root item is focused\n            }\n          },\n          _hoverItem: function () {\n            return this.wrapper.find(\".k-item.k-hover,.k-item.k-focus\").filter(\":visible\");\n          },\n          _itemBelongsToVertival: function (item) {\n            var menuIsVertical = this.wrapper.hasClass(\"k-menu-vertical\");\n\n            if (!item.length) {\n              return menuIsVertical;\n            }\n\n            return item.parent().hasClass(\"k-menu-group\") || menuIsVertical;\n          },\n          _itemHasChildren: function (item) {\n            if (!item || !item.length || !item[0].nodeType) {\n              return false;\n            }\n\n            return item.children(\".k-menu-group, div.k-animation-container\").length > 0 || !!item.data(POPUP_OPENER_ATTR) && !!this._overflowWrapper().children(popupGroupSelector(item.data(POPUP_OPENER_ATTR)));\n          },\n          _moveHover: function (item, nextItem) {\n            var that = this,\n                id = that._ariaId;\n\n            if (item.length && nextItem.length) {\n              item.removeClass(FOCUSEDSTATE);\n            }\n\n            if (nextItem.length) {\n              if (nextItem[0].id) {\n                id = nextItem[0].id;\n              }\n\n              nextItem.addClass(FOCUSEDSTATE);\n              that._oldHoverItem = nextItem;\n\n              if (id) {\n                that.element.removeAttr(\"aria-activedescendant\");\n                $(\"#\" + id).removeAttr(\"id\");\n                nextItem.attr(\"id\", id);\n                that.element.attr(\"aria-activedescendant\", id);\n              }\n\n              that._scrollToItem(nextItem);\n            }\n          },\n          _moveHoverToRoot: function (item, nextItem) {\n            this._moveHover(item, nextItem);\n          },\n          _findRootParent: function (item) {\n            if (this._isRootItem(item)) {\n              return item;\n            } else {\n              return this._parentsUntil(item, menuSelector, \"li.k-item\").last();\n            }\n          },\n          _isRootItem: function (item) {\n            return item.parent().hasClass(MENU);\n          },\n          _itemRight: function (item, belongsToVertical, hasChildren) {\n            var that = this,\n                nextItem,\n                parentItem,\n                overflowWrapper;\n\n            if (!belongsToVertical) {\n              nextItem = item.nextAll(itemSelector + exclusionSelector).eq(0);\n\n              if (!nextItem.length) {\n                nextItem = item.prevAll(itemSelector + exclusionSelector).last();\n              }\n\n              that.close(item);\n            } else if (hasChildren && !item.hasClass(DISABLEDSTATE)) {\n              that.open(item);\n              nextItem = that._childPopupElement(item).children().first();\n            } else if (that.options.orientation == \"horizontal\") {\n              parentItem = that._findRootParent(item);\n              overflowWrapper = that._overflowWrapper();\n\n              if (overflowWrapper) {\n                var rootPopup = itemPopup(parentItem, overflowWrapper);\n\n                that._closeChildPopups(rootPopup);\n              }\n\n              that.close(parentItem);\n              nextItem = parentItem.nextAll(itemSelector + exclusionSelector).eq(0);\n            }\n\n            if (nextItem && !nextItem.length) {\n              nextItem = that.wrapper.children(\".k-item\").first();\n            } else if (!nextItem) {\n              nextItem = [];\n            }\n\n            that._moveHover(item, nextItem);\n\n            return nextItem;\n          },\n          _itemLeft: function (item, belongsToVertical) {\n            var that = this,\n                nextItem,\n                overflowWrapper;\n\n            if (!belongsToVertical) {\n              nextItem = item.prevAll(itemSelector + exclusionSelector).eq(0);\n\n              if (!nextItem.length) {\n                nextItem = item.nextAll(itemSelector + exclusionSelector).last();\n              }\n\n              that.close(item);\n            } else {\n              nextItem = item.parent().closest(\".k-item\");\n              overflowWrapper = that._overflowWrapper();\n\n              if (!nextItem.length && overflowWrapper) {\n                nextItem = popupParentItem(item.parent(), overflowWrapper);\n              }\n\n              that.close(nextItem);\n\n              if (that._isRootItem(nextItem) && that.options.orientation == \"horizontal\") {\n                nextItem = nextItem.prevAll(itemSelector + exclusionSelector).eq(0);\n              }\n            }\n\n            if (!nextItem.length) {\n              nextItem = that.wrapper.children(\".k-item\").last();\n            }\n\n            that._moveHover(item, nextItem);\n\n            return nextItem;\n          },\n          _itemDown: function (item, belongsToVertical, hasChildren) {\n            var that = this,\n                nextItem;\n\n            if (!belongsToVertical) {\n              if (!hasChildren || item.hasClass(DISABLEDSTATE)) {\n                return;\n              } else {\n                that.open(item);\n                nextItem = that._childPopupElement(item).children().first();\n              }\n            } else {\n              nextItem = item.nextAll(itemSelector + exclusionSelector).eq(0);\n            }\n\n            if (!nextItem.length && item.length) {\n              nextItem = item.parent().children().first();\n            } else if (!item.length) {\n              nextItem = that.wrapper.children(\".k-item\").first();\n            }\n\n            that._moveHover(item, nextItem);\n\n            return nextItem;\n          },\n          _itemUp: function (item, belongsToVertical) {\n            var that = this,\n                nextItem;\n\n            if (!belongsToVertical) {\n              return;\n            } else {\n              nextItem = item.prevAll(itemSelector + exclusionSelector).eq(0);\n            }\n\n            if (!nextItem.length && item.length) {\n              nextItem = item.parent().children().last();\n            } else if (!item.length) {\n              nextItem = that.wrapper.children(\".k-item\").last();\n            }\n\n            that._moveHover(item, nextItem);\n\n            return nextItem;\n          },\n          _scrollToItem: function (item) {\n            var that = this;\n\n            if (that.options.scrollable && item && item.length) {\n              var ul = item.parent();\n              var isHorizontal = ul.hasClass(MENU) ? that.options.orientation == \"horizontal\" : false;\n              var scrollDir = isHorizontal ? \"scrollLeft\" : \"scrollTop\";\n              var getSize = isHorizontal ? kendo._outerWidth : kendo._outerHeight;\n              var currentScrollOffset = ul[scrollDir]();\n              var itemSize = getSize(item);\n              var itemOffset = item[0][isHorizontal ? \"offsetLeft\" : \"offsetTop\"];\n              var ulSize = getSize(ul);\n              var scrollButtons = ul.siblings(scrollButtonSelector);\n              var scrollButtonSize = scrollButtons.length ? getSize(scrollButtons.first()) : 0;\n              var itemPosition;\n\n              if (currentScrollOffset + ulSize < itemOffset + itemSize + scrollButtonSize) {\n                itemPosition = itemOffset + itemSize - ulSize + scrollButtonSize;\n              } else if (currentScrollOffset > itemOffset - scrollButtonSize) {\n                itemPosition = itemOffset - scrollButtonSize;\n              }\n\n              if (!isNaN(itemPosition)) {\n                var scrolling = {};\n                scrolling[scrollDir] = itemPosition;\n                ul.finish().animate(scrolling, \"fast\", \"linear\", function () {\n                  that._toggleScrollButtons(ul, scrollButtons.first(), scrollButtons.last(), isHorizontal);\n                });\n              }\n            }\n          },\n          _itemEsc: function (item, belongsToVertical) {\n            var that = this,\n                nextItem;\n\n            if (!belongsToVertical) {\n              return item;\n            } else {\n              nextItem = item.parent().closest(\".k-item\");\n              that.close(nextItem);\n\n              that._moveHover(item, nextItem);\n            }\n\n            return nextItem;\n          },\n          _childPopupElement: function (item) {\n            var popupElement = item.find(\".k-menu-group\");\n\n            var wrapper = this._overflowWrapper();\n\n            if (!popupElement.length && wrapper) {\n              popupElement = itemPopup(item, wrapper);\n            }\n\n            return popupElement;\n          },\n          _triggerEvent: function (e) {\n            var that = this;\n            return that.trigger(e.type, {\n              type: e.type,\n              item: e.item\n            });\n          },\n          _focusHandler: function (e) {\n            var that = this,\n                item = $(kendo.eventTarget(e)).closest(allItemsSelector);\n\n            if (item.hasClass(DISABLEDSTATE)) {\n              return;\n            }\n\n            setTimeout(function () {\n              that._moveHover([], item);\n\n              if (item.children(\".k-content\")[0]) {\n                item.parent().closest(\".k-item\").removeClass(FOCUSEDSTATE);\n              }\n            }, 200);\n          },\n          _animations: function (options) {\n            if (options && \"animation\" in options && !options.animation) {\n              options.animation = {\n                open: {\n                  effects: {}\n                },\n                close: {\n                  hide: true,\n                  effects: {}\n                }\n              };\n            }\n          },\n          _dataSource: function (options) {\n            var that = this,\n                dataSource = options ? options.dataSource : that.options.dataSource;\n\n            if (!dataSource) {\n              return;\n            }\n\n            dataSource = isArray(dataSource) ? {\n              data: dataSource\n            } : dataSource;\n\n            that._unbindDataSource();\n\n            if (!dataSource.fields) {\n              dataSource.fields = [{\n                field: \"uid\"\n              }, {\n                field: \"text\"\n              }, {\n                field: \"url\"\n              }, {\n                field: \"cssClass\"\n              }, {\n                field: \"spriteCssClass\"\n              }, {\n                field: \"imageUrl\"\n              }, {\n                field: \"imageAttr\"\n              }, {\n                field: \"attr\"\n              }, {\n                field: \"contentAttr\"\n              }, {\n                field: \"content\"\n              }, {\n                field: \"encoded\"\n              }, {\n                field: \"items\"\n              }, {\n                field: \"select\"\n              }];\n            }\n\n            that.dataSource = HierarchicalDataSource.create(dataSource);\n\n            that._bindDataSource();\n\n            that.dataSource.fetch();\n          },\n          _bindDataSource: function () {\n            this._refreshHandler = this.refresh.bind(this);\n            this._errorHandler = this._error.bind(this);\n            this.dataSource.bind(CHANGE, this._refreshHandler);\n            this.dataSource.bind(ERROR, this._errorHandler);\n          },\n          _unbindDataSource: function () {\n            var dataSource = this.dataSource;\n\n            if (dataSource) {\n              dataSource.unbind(CHANGE, this._refreshHandler);\n              dataSource.unbind(ERROR, this._errorHandler);\n            }\n          },\n          _error: function () {},\n          findByUid: function (uid) {\n            var wrapperElement = this._overflowWrapper() || this.element;\n            return wrapperElement.find(\"[\" + kendo.attr(\"uid\") + \"=\" + uid + \"]\");\n          },\n          refresh: function (ev) {\n            var that = this;\n            var node = ev.node;\n            var action = ev.action;\n            var parentElement = node ? that.findByUid(node.uid) : that.element;\n            var itemsToUpdate = ev.items;\n            var index = ev.index;\n\n            var updateProxy = that._updateItem.bind(that);\n\n            var removeProxy = that._removeItem.bind(that);\n\n            if (action == \"add\") {\n              that._appendItems(itemsToUpdate, index, parentElement);\n            } else if (action == \"remove\") {\n              itemsToUpdate.forEach(removeProxy);\n            } else if (action == \"itemchange\") {\n              itemsToUpdate.forEach(updateProxy);\n            } else if (action === \"itemloaded\") {\n              that.append(ev.items, parentElement);\n            } else {\n              this._initData();\n            }\n\n            this.trigger(DATABOUND, {\n              item: parentElement,\n              dataItem: node\n            });\n          },\n          _appendItems: function (items, index, parent) {\n            var that = this;\n            var referenceItem = parent.find(itemSelector).eq(index);\n\n            if (referenceItem.length) {\n              that.insertBefore(items, referenceItem);\n            } else {\n              that.append(items, parent);\n            }\n          },\n          _removeItem: function (item) {\n            var that = this;\n            var element = that.findByUid(item.uid);\n            that.remove(element);\n          },\n          _updateItem: function (item) {\n            var that = this;\n            var element = that.findByUid(item.uid);\n            var nextElement = element.next();\n            var parentNode = item.parentNode();\n            that.remove(element);\n\n            if (nextElement.length) {\n              that.insertBefore(item, nextElement);\n            } else {\n              that.append(item, parentNode && that.findByUid(parentNode.uid));\n            }\n          },\n          _accessors: function () {\n            var that = this,\n                options = that.options,\n                i,\n                field,\n                textField,\n                element = that.element;\n\n            for (i in bindings) {\n              field = options[bindings[i]];\n              textField = element.attr(kendo.attr(i + \"-field\"));\n\n              if (!field && textField) {\n                field = textField;\n              }\n\n              if (!field) {\n                field = i;\n              }\n\n              if (!isArray(field)) {\n                field = [field];\n              }\n\n              options[bindings[i]] = field;\n            }\n          },\n          _fieldAccessor: function (fieldName) {\n            var fieldBindings = this.options[bindings[fieldName]] || [],\n                count = fieldBindings.length,\n                result = \"(function(item) {\";\n\n            if (count === 0) {\n              result += \"return item['\" + fieldName + \"'];\";\n            } else {\n              result += \"var levels = [\" + $.map(fieldBindings, function (x) {\n                return \"function(d){ return \" + kendo.expr(x) + \"}\";\n              }).join(\",\") + \"];\";\n              result += \"if(item.level){return levels[Math.min(item.level(), \" + count + \"-1)](item);}else\";\n              result += \"{return levels[\" + count + \"-1](item)}\";\n            }\n\n            result += \"})\";\n            return result;\n          },\n          _templates: function () {\n            var that = this,\n                options = that.options,\n                fieldAccessor = that._fieldAccessor.bind(that);\n\n            if (options.template && typeof options.template == STRING) {\n              options.template = template(options.template);\n            } else if (!options.template) {\n              options.template = template(\"<span class='k-menu-link-text'>\" + \"# var text = \" + fieldAccessor(\"text\") + \"(data.item); #\" + \"# if (typeof data.item.encoded != 'undefined' && data.item.encoded === false) {#\" + \"#= text #\" + \"# } else { #\" + \"#: text #\" + \"# } #</span>\");\n            }\n\n            that.templates = {\n              content: template(\"#var contentHtml = \" + fieldAccessor(\"content\") + \"(item);#\" + \"<div #= contentCssAttributes(item.toJSON ? item.toJSON() : item) # tabindex='-1'>#= contentHtml || '' #</div>\"),\n              group: template(\"<ul class='#= groupCssClass(group) #'#= groupAttributes(group) # role='menu' aria-hidden='true'>\" + \"#= renderItems(data) #\" + \"</ul>\"),\n              itemWrapper: template(\"# var url = \" + fieldAccessor(\"url\") + \"(item); #\" + \"# var imageUrl = \" + fieldAccessor(\"imageUrl\") + \"(item); #\" + \"# var imgAttributes = \" + fieldAccessor(\"imageAttr\") + \"(item);#\" + \"# var tag = url ? 'a' : 'span' #\" + \"<#= tag # class='#= textClass(item) #' #if(url){#href='#= url #'#}#>\" + \"# if (imageUrl) { #\" + \"<img #= imageCssAttributes(imgAttributes) #  alt='' src='#= imageUrl #' />\" + \"# } #\" + \"#= sprite(item) #\" + \"#= data.menu.options.template(data) #\" + \"#= arrow(data) #\" + \"</#= tag #>\"),\n              item: template(\"#var contentHtml = \" + fieldAccessor(\"content\") + \"(item);#\" + \"<li class='#= wrapperCssClass(group, item) #' #= itemCssAttributes(item.toJSON ? item.toJSON() : item) # role='menuitem'  #=item.items ? \\\"aria-haspopup='true'\\\": \\\"\\\"#\" + \"#=item.enabled === false ? \\\"aria-disabled='true'\\\" : ''#\" + kendo.attr(\"uid\") + \"='#= item.uid #' \" + \"# if(item.items && item.items.length > 0) { # \" + \"# if(item.expanded) { # \" + \" aria-expanded='true'\" + \"# } else { #\" + \" aria-expanded='false'\" + \"# } #\" + \"# } #\" + \">\" + \"#= itemWrapper(data) #\" + \"#if (item.hasChildren || item.items) { #\" + \"#= subGroup({ items: item.items, menu: menu, group: { expanded: item.expanded } }) #\" + \"# } else if (item.content || item.contentUrl || contentHtml) { #\" + \"#= renderContent(data) #\" + \"# } #\" + \"</li>\"),\n              scrollButton: template(\"<span class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-icon-button k-menu-scroll-button k-scroll-#= direction #' unselectable='on'>\" + \"<span class='k-button-icon k-icon k-i-arrow-60-#= direction #'></span>\" + \"</span>\"),\n              arrow: template(\"<span class='k-menu-expand-arrow'><span class='#= arrowClass(item, group) #'></span></span>\"),\n              sprite: template(\"# var spriteCssClass = \" + fieldAccessor(\"spriteCssClass\") + \"(data); if(spriteCssClass) {#<span class='k-sprite #= spriteCssClass #'></span>#}#\"),\n              empty: template(\"\")\n            };\n          },\n          renderItem: function (options) {\n            var that = this;\n            options = extend({\n              menu: that,\n              group: {}\n            }, options);\n            var empty = that.templates.empty,\n                item = options.item;\n            return that.templates.item(extend(options, {\n              sprite: that.templates.sprite,\n              itemWrapper: that.templates.itemWrapper,\n              renderContent: that.renderContent,\n              arrow: item.items || item.content || item[that.options.dataContentField[0]] ? that.templates.arrow : empty,\n              subGroup: that.renderGroup\n            }, rendering));\n          },\n          renderGroup: function (options) {\n            var that = this;\n            var templates = that.templates || options.menu.templates;\n            return templates.group(extend({\n              renderItems: function (options) {\n                var html = \"\",\n                    i = 0,\n                    items = options.items,\n                    len = items ? items.length : 0,\n                    group = extend({\n                  length: len\n                }, options.group);\n\n                for (; i < len; i++) {\n                  html += options.menu.renderItem(extend(options, {\n                    group: group,\n                    item: extend({\n                      index: i\n                    }, items[i])\n                  }));\n                }\n\n                return html;\n              }\n            }, options, rendering));\n          },\n          renderContent: function (options) {\n            return options.menu.templates.content(extend(options, rendering));\n          }\n        });\n        var ContextMenu = Menu.extend({\n          init: function (element, options) {\n            var that = this;\n            Menu.fn.init.call(that, element, options);\n            that.element.attr(ROLE, \"menu\");\n            that._marker = kendo.guid().substring(0, 8);\n            that.target = $(that.options.target);\n\n            that._popup();\n\n            that._wire();\n          },\n          _initOverflow: function (options) {\n            var that = this;\n\n            if (options.scrollable && !that._overflowWrapper()) {\n              that._openedPopups = {};\n              that._popupsWrapper = (that.element.parent().is(animationContainerSelector) ? that.element.parent() : that.element).wrap(\"<div class='k-popups-wrapper \" + options.orientation + \"'></div>\").parent();\n\n              if (that.options.orientation == \"horizontal\") {\n                removeSpacesBetweenItems(that.element);\n              }\n\n              if (options.appendTo) {\n                options.appendTo = $(options.appendTo);\n                options.appendTo.append(that._popupsWrapper);\n              }\n\n              that._initialHeight = that.element[0].style.height;\n              that._initialWidth = that.element[0].style.width;\n            }\n          },\n          options: {\n            name: \"ContextMenu\",\n            filter: null,\n            showOn: \"contextmenu\",\n            orientation: \"vertical\",\n            alignToAnchor: false,\n            copyAnchorStyles: true,\n            target: \"body\"\n          },\n          events: [OPEN, CLOSE, ACTIVATE, DEACTIVATE, SELECT],\n          setOptions: function (options) {\n            var that = this;\n            Menu.fn.setOptions.call(that, options);\n            that.target.off(that.showOn + NS + that._marker, that._showProxy);\n\n            if (that.userEvents) {\n              that.userEvents.destroy();\n            }\n\n            that.target = $(that.options.target);\n\n            if (options.orientation && that.popup.wrapper[0]) {\n              that.popup.element.unwrap();\n            }\n\n            that._wire();\n\n            Menu.fn.setOptions.call(this, options);\n          },\n          destroy: function () {\n            var that = this;\n            that.target.off(that.options.showOn + NS + that._marker);\n            DOCUMENT_ELEMENT.off(kendo.support.mousedown + NS + that._marker, that._closeProxy);\n\n            if (that.userEvents) {\n              that.userEvents.destroy();\n            }\n\n            Menu.fn.destroy.call(that);\n          },\n          open: function (x, y) {\n            var that = this;\n            x = $(x)[0];\n\n            if (contains(that.element[0], $(x)[0]) || that._itemHasChildren($(x))) {\n              // call parent open for children elements\n              Menu.fn.open.call(that, x);\n            } else {\n              if (that._triggerEvent({\n                item: that.element,\n                type: OPEN\n              }) === false) {\n                if (that.popup.visible() && that.options.filter) {\n                  that.popup.close(true);\n                  that.popup.element.kendoStop(true);\n                }\n\n                if (y !== undefined) {\n                  var overflowWrapper = that._overflowWrapper();\n\n                  if (overflowWrapper) {\n                    var offset = overflowWrapper.offset();\n                    x -= offset.left;\n                    y -= offset.top;\n                  }\n\n                  that.popup.wrapper.hide();\n\n                  that._configurePopupScrolling(x, y);\n\n                  that.popup.open(x, y);\n                } else {\n                  that.popup.options.anchor = (x ? x : that.popup.anchor) || that.target;\n                  that.popup.element.kendoStop(true);\n\n                  that._configurePopupScrolling();\n\n                  that.popup.open();\n                }\n\n                DOCUMENT_ELEMENT.off(that.popup.downEvent, that.popup._mousedownProxy);\n                DOCUMENT_ELEMENT.on(kendo.support.mousedown + NS + that._marker, that._closeProxy);\n                that.element.trigger(\"focus\");\n              }\n            }\n\n            return that;\n          },\n          _configurePopupScrolling: function (x, y) {\n            var that = this;\n            var popup = that.popup;\n            var isHorizontal = that.options.orientation == \"horizontal\";\n\n            if (that.options.scrollable) {\n              that._wrapPopupElement(popup);\n\n              popup.element.parent().css({\n                position: \"\",\n                height: \"\"\n              });\n              popup.element.css({\n                visibility: \"hidden\",\n                display: \"\",\n                position: \"\"\n              });\n\n              if (isHorizontal) {\n                that._setPopupWidth(popup, isNaN(x) ? undefined : {\n                  isFixed: true,\n                  x: x,\n                  y: y\n                });\n              } else {\n                that._setPopupHeight(popup, isNaN(x) ? undefined : {\n                  isFixed: true,\n                  x: x,\n                  y: y\n                });\n              }\n\n              popup.element.css({\n                visibility: \"\",\n                display: \"none\",\n                position: \"absolute\"\n              });\n\n              that._initPopupScrollButtons(popup, isHorizontal, true);\n\n              popup.element.siblings(scrollButtonSelector).hide();\n            }\n          },\n          _setPopupWidth: function (popup, isFixed) {\n            var popupElement = popup.element;\n            var popups = popupElement.add(popupElement.parent(animationContainerSelector));\n            popups.width(this._initialWidth || \"\");\n\n            var location = popup._location(isFixed);\n\n            var windowWidth = $(window).width();\n            var popupOuterWidth = location.width;\n            var popupOffsetLeft = Math.max(location.left, 0);\n            var scrollLeft = isFixed ? 0 : parentsScroll(this._overflowWrapper()[0], \"scrollLeft\");\n            var shadow = kendo.getShadows(popupElement);\n            var maxWidth = windowWidth - shadow.left - shadow.right;\n            var canFit = maxWidth + scrollLeft > popupOuterWidth + popupOffsetLeft;\n\n            if (!canFit) {\n              popups.css({\n                overflow: \"hidden\",\n                width: maxWidth - popupOffsetLeft + scrollLeft + \"px\"\n              });\n            }\n          },\n          close: function () {\n            var that = this;\n\n            if (contains(that.element[0], $(arguments[0])[0]) || that._itemHasChildren(arguments[0])) {\n              Menu.fn.close.call(that, arguments[0]);\n            } else {\n              if (that.popup.visible()) {\n                if (that._triggerEvent({\n                  item: that.element,\n                  type: CLOSE\n                }) === false) {\n                  that._removeHoverItem();\n\n                  that.element.find(\"#\" + that._ariaId).removeAttr(\"id\");\n                  that.popup.close();\n                  DOCUMENT_ELEMENT.off(kendo.support.mousedown + NS + that._marker, that._closeProxy);\n                  that.unbind(SELECT, that._closeTimeoutProxy);\n                  that.popup.options.anchor.focus();\n                }\n              }\n            }\n          },\n          _showHandler: function (e) {\n            var ev = e,\n                offset,\n                that = this,\n                options = that.options,\n                target = kendo.support.mobileOS ? $(ev.target) : $(ev.currentTarget);\n\n            if (e.event) {\n              ev = e.event;\n              ev.pageX = e.x.location;\n              ev.pageY = e.y.location;\n            }\n\n            if (contains(that.element[0], e.relatedTarget || e.target)) {\n              return;\n            }\n\n            that._eventOrigin = ev;\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            that.element.find(\".\" + FOCUSEDSTATE).removeClass(FOCUSEDSTATE);\n\n            if (options.filter && target.is(options.filter) || !options.filter) {\n              if (options.alignToAnchor) {\n                that.popup.options.anchor = ev.currentTarget;\n                that.open(ev.currentTarget);\n              } else {\n                that.popup.options.anchor = ev.currentTarget;\n\n                if (that._targetChild) {\n                  offset = that.target.offset();\n                  that.open(ev.pageX - offset.left, ev.pageY - offset.top);\n                } else {\n                  that.open(ev.pageX, ev.pageY);\n                }\n              }\n            }\n          },\n          _closeHandler: function (e) {\n            var that = this,\n                target = $(e.relatedTarget || e.target),\n                sameTarget = target.closest(that.target.selector)[0] == that.target[0],\n                item = target.closest(itemSelector),\n                children = that._itemHasChildren(item),\n                overflowWrapper = that._overflowWrapper(),\n                containment = contains(that.element[0], target[0]) || overflowWrapper && contains(overflowWrapper[0], target[0]);\n\n            that._eventOrigin = e;\n            var normalClick = e.which !== 3;\n\n            if (that.popup.visible() && (normalClick && sameTarget || !sameTarget) && (that.options.closeOnClick && !children && containment || !containment)) {\n              if (containment) {\n                this.unbind(SELECT, this._closeTimeoutProxy);\n                that.bind(SELECT, that._closeTimeoutProxy);\n              } else {\n                that.close();\n              }\n            }\n          },\n          _wire: function () {\n            var that = this,\n                options = that.options,\n                target = that.target;\n            that._preventProxy = null;\n            that._showProxy = that._showHandler.bind(that);\n            that._closeProxy = that._closeHandler.bind(that);\n            that._closeTimeoutProxy = that.close.bind(that);\n\n            if (target[0]) {\n              if (kendo.support.mobileOS && options.showOn == \"contextmenu\") {\n                that.userEvents = new kendo.UserEvents(target, {\n                  filter: options.filter,\n                  allowSelection: false\n                });\n\n                that._preventProxy = function () {\n                  return false;\n                };\n\n                that.userEvents.bind(\"hold\", that._showProxy);\n              }\n\n              if (options.filter) {\n                target.on(options.showOn + NS + that._marker, options.filter, that._preventProxy || that._showProxy);\n              } else {\n                target.on(options.showOn + NS + that._marker, that._preventProxy || that._showProxy);\n              }\n            }\n          },\n          _triggerEvent: function (e) {\n            var that = this,\n                anchor = $(that.popup.options.anchor)[0],\n                origin = that._eventOrigin;\n            that._eventOrigin = undefined;\n            return that.trigger(e.type, extend({\n              type: e.type,\n              item: e.item || this.element[0],\n              target: anchor\n            }, origin ? {\n              event: origin\n            } : {}));\n          },\n          _popup: function () {\n            var that = this;\n\n            var overflowWrapper = that._overflowWrapper();\n\n            that._triggerProxy = that._triggerEvent.bind(that);\n            that.popup = that.element.addClass(\"k-context-menu\").kendoPopup({\n              autosize: that.options.orientation === \"horizontal\",\n              anchor: that.target || \"body\",\n              copyAnchorStyles: that.options.copyAnchorStyles,\n              collision: that.options.popupCollision || \"fit\",\n              animation: that.options.animation,\n              activate: that._triggerProxy,\n              deactivate: that._triggerProxy,\n              appendTo: overflowWrapper || that.options.appendTo,\n              close: !overflowWrapper ? $.noop : function (e) {\n                $(getChildPopups(e.sender.element, overflowWrapper)).each(function (i, p) {\n                  var popup = p.data(KENDOPOPUP);\n\n                  if (popup) {\n                    popup.close(true);\n                  }\n                });\n              }\n            }).data(KENDOPOPUP);\n            that._targetChild = contains(that.target[0], that.popup.element[0]);\n          },\n          _moveHoverToRoot: function (item, nextItem) {\n            this._moveHover(item, nextItem);\n\n            this.close();\n          },\n          _focus: function (e) {\n            var hoverItem = this._oldHoverItem = this._hoverItem() || [];\n\n            Menu.fn._focus.call(this, e);\n\n            if (activeElement() === e.currentTarget) {\n              this._moveHover(hoverItem, this.wrapper.children().first());\n            }\n          }\n        });\n        ui.plugin(Menu);\n        ui.plugin(ContextMenu);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}