{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1688);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  20:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.core\");\n    /***/\n  },\n\n  /***/\n  1688:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(20)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function (kendo) {\n        'use strict';\n\n        var $ = kendo.jQuery;\n        var alphaNumRegExp = /:alphanum$/;\n        var ACTIONS = {\n          \"up\": \"up\",\n          \"down\": \"down\",\n          \"left\": \"left\",\n          \"right\": \"right\",\n          \"home\": \"first-col\",\n          \"end\": \"last-col\",\n          \"ctrl+left\": \"word-left\",\n          \"ctrl+right\": \"word-right\",\n          \"ctrl+up\": \"word-up\",\n          \"ctrl+down\": \"word-down\",\n          \"ctrl+home\": \"first\",\n          \"ctrl+end\": \"last\",\n          \"pageup\": \"prev-page\",\n          \"pagedown\": \"next-page\"\n        };\n        var ENTRY_ACTIONS = {\n          \"tab\": \"next\",\n          \"shift+tab\": \"previous\",\n          \"enter\": \"lower\",\n          \"shift+enter\": \"upper\",\n          \"delete\": \"clearContents\",\n          \"backspace\": \"clearContents\",\n          \"shift+:alphanum\": \"edit\",\n          \"alt+:alphanum\": \"edit\",\n          \":alphanum\": \"edit\",\n          \"ctrl+:alphanum\": \"ctrl\",\n          \"alt+ctrl+:alphanum\": \"edit\",\n          \":edit\": \"edit\"\n        };\n        var CONTAINER_EVENTS = {\n          \"wheel\": \"onWheel\",\n          \"*+mousedown\": \"onMouseDown\",\n          \"contextmenu\": \"onContextMenu\",\n          \"*+mousedrag\": \"onMouseDrag\",\n          \"*+mouseup\": \"onMouseUp\",\n          \"*+dblclick\": \"onDblClick\",\n          \"mousemove\": \"onMouseMove\"\n        };\n        var CLIPBOARD_EVENTS = {\n          \"pageup\": \"onPageUp\",\n          \"pagedown\": \"onPageDown\",\n          \"mouseup\": \"onMouseUp\",\n          \"*+cut\": \"onCut\",\n          \"*+paste\": \"onPaste\",\n          \"*+copy\": \"onCopy\"\n        };\n        var EDITOR_EVENTS = {\n          \"esc\": \"onEditorEsc\",\n          \"enter\": \"onEditorBlur\",\n          \"alt+enter\": \"insertNewline\",\n          \"shift+enter\": \"onEditorBlur\",\n          \"tab\": \"onEditorBlur\",\n          \"shift+tab\": \"onEditorBlur\",\n          \"shift+ctrl+enter\": \"onEditorArrayFormula\"\n        };\n        var FORMULABAR_EVENTS = $.extend({\n          focus: \"onEditorBarFocus\"\n        }, EDITOR_EVENTS);\n        var FORMULAINPUT_EVENTS = $.extend({\n          focus: \"onEditorCellFocus\"\n        }, EDITOR_EVENTS);\n        var SELECTION_MODES = {\n          cell: \"range\",\n          rowheader: \"row\",\n          columnheader: \"column\",\n          topcorner: \"sheet\",\n          autofill: \"autofill\"\n        };\n\n        function toActionSelector(selectors) {\n          return selectors.map(function (action) {\n            return '[data-action=\"' + action + '\"]';\n          }).join(\",\");\n        }\n\n        var COMPOSITE_UNAVAILABLE_ACTION_SELECTORS = toActionSelector(['cut', 'copy', 'paste', 'insert-left', 'insert-right', 'insert-above', 'insert-below']);\n        var UNHIDE_ACTION_SELECTORS = toActionSelector(['unhide-row', 'unhide-column']);\n        var ACTION_KEYS = [];\n        var SHIFT_ACTION_KEYS = [];\n        var ENTRY_ACTION_KEYS = [];\n\n        for (var key in ACTIONS) {\n          ACTION_KEYS.push(key);\n          SHIFT_ACTION_KEYS.push(\"shift+\" + key);\n        }\n\n        for (key in ENTRY_ACTIONS) {\n          ENTRY_ACTION_KEYS.push(key);\n        }\n\n        CLIPBOARD_EVENTS[ACTION_KEYS] = \"onAction\";\n        CLIPBOARD_EVENTS[SHIFT_ACTION_KEYS] = \"onShiftAction\";\n        CLIPBOARD_EVENTS[ENTRY_ACTION_KEYS] = \"onEntryAction\";\n        FORMULAINPUT_EVENTS[ACTION_KEYS] = \"onEditorAction\";\n        FORMULAINPUT_EVENTS[SHIFT_ACTION_KEYS] = \"onEditorShiftAction\";\n        var Controller = kendo.Class.extend({\n          init: function (view, workbook) {\n            this.view = view;\n            this.workbook(workbook);\n            this.container = $(view.container);\n            this.clipboardElement = $(view.clipboard);\n            this.cellContextMenu = view.cellContextMenu;\n            this.rowHeaderContextMenu = view.rowHeaderContextMenu;\n            this.colHeaderContextMenu = view.colHeaderContextMenu;\n            this.drawingContextMenu = view.drawingContextMenu;\n            this.scroller = view.scroller;\n            this.tabstrip = view.tabstrip;\n            this.sheetsbar = view.sheetsbar;\n            view.nameEditor.bind(\"enter\", this.onNameEditorEnter.bind(this));\n            view.nameEditor.bind(\"cancel\", this.onNameEditorCancel.bind(this));\n            view.nameEditor.bind(\"select\", this.onNameEditorSelect.bind(this));\n            view.nameEditor.bind(\"delete\", this.onNameEditorDelete.bind(this));\n            this.editor = view.editor;\n            this.editor.bind(\"change\", this.onEditorChange.bind(this));\n            this.editor.bind(\"activate\", this.onEditorActivate.bind(this));\n            this.editor.bind(\"deactivate\", this.onEditorDeactivate.bind(this));\n            this.editor.bind(\"update\", this.onEditorUpdate.bind(this));\n            $(view.scroller).on(\"scroll\", this.onScroll.bind(this));\n            this.listener = new kendo.spreadsheet.EventListener(this.container, this, CONTAINER_EVENTS);\n            $(view.scroller).on(\"mousedown\", this.onMouseDown.bind(this));\n\n            this._enableEditorEvents();\n\n            if (this.sheetsbar) {\n              this.sheetsbar.bind(\"select\", this.onSheetBarSelect.bind(this));\n              this.sheetsbar.bind(\"reorder\", this.onSheetBarReorder.bind(this));\n              this.sheetsbar.bind(\"rename\", this.onSheetBarRename.bind(this));\n              this.sheetsbar.bind(\"remove\", this.onSheetBarRemove.bind(this));\n            }\n\n            this.cellContextMenu.bind(\"select\", this.onContextMenuSelect.bind(this));\n            this.rowHeaderContextMenu.bind(\"select\", this.onContextMenuSelect.bind(this));\n            this.colHeaderContextMenu.bind(\"select\", this.onContextMenuSelect.bind(this));\n            this.drawingContextMenu.bind(\"select\", this.onContextMenuSelect.bind(this)); // this is necessary for Windows to catch prevent context menu correctly\n\n            this.cellContextMenu.element.add(this.rowHeaderContextMenu.element).add(this.colHeaderContextMenu.element).add(this.drawingContextMenu.element).on(\"contextmenu\", false);\n\n            if (this.tabstrip) {\n              this.tabstrip.bind(\"action\", this.onCommandRequest.bind(this));\n              this.tabstrip.bind(\"dialog\", this.onDialogRequest.bind(this));\n            }\n          },\n          _enableEditorEvents: function (enable) {\n            if (enable === undefined || enable) {\n              this.keyListener = new kendo.spreadsheet.EventListener(this.clipboardElement, this, CLIPBOARD_EVENTS);\n              this.barKeyListener = new kendo.spreadsheet.EventListener(this.editor.barElement(), this, FORMULABAR_EVENTS);\n              this.inputKeyListener = new kendo.spreadsheet.EventListener(this.editor.cellElement(), this, FORMULAINPUT_EVENTS);\n            } else {\n              this.keyListener.destroy();\n              this.barKeyListener.destroy();\n              this.inputKeyListener.destroy();\n            }\n          },\n          _execute: function (options) {\n            var result = this._workbook.execute(options);\n\n            if (options.command === \"EditCommand\" && !result) {\n              this._workbook.trigger(\"change\", {\n                editorClose: true\n              });\n            }\n\n            if (result) {\n              this._preventNavigation = true;\n\n              if (result.reason === \"error\") {\n                this.editor.deactivate(true); // make sure we don't call any change hooks\n\n                this.view.showError(result, function () {\n                  // we only get here in case of a validation error when the user decided to retry.\n                  this.activateEditor(false); // reset to last input from user\n\n                  this.editor.value(this._lastEditorValue); // however, set _value manually such that it'll detect change properly.  ugly :-\\\n\n                  this.editor._value = this._workbook._inputForRef(this._workbook.activeSheet()._viewActiveCell()); // seems like a nice UX to have the whole input selected\n\n                  this.editor.select();\n                }.bind(this));\n              } else {\n                this.view.openDialog(result.reason);\n              }\n            }\n\n            return result;\n          },\n          _activeTooltip: function () {\n            return this._workbook.activeSheet().activeCell().simplify().toString();\n          },\n          onContextMenuSelect: function (e) {\n            var action = $(e.item).data(\"action\");\n            var command;\n\n            switch (action) {\n              case \"cut\":\n                command = {\n                  command: \"ToolbarCutCommand\",\n                  options: {\n                    workbook: this._workbook\n                  }\n                };\n                break;\n\n              case \"copy\":\n                command = {\n                  command: \"ToolbarCopyCommand\",\n                  options: {\n                    workbook: this._workbook\n                  }\n                };\n                break;\n\n              case \"paste\":\n                command = {\n                  command: \"ToolbarPasteCommand\",\n                  options: {\n                    workbook: this._workbook\n                  }\n                };\n                break;\n\n              case \"delete-drawing\":\n                command = {\n                  command: \"DeleteDrawingCommand\",\n                  options: {\n                    drawing: this.navigator._sheet._activeDrawing\n                  }\n                };\n                break;\n\n              case \"bring-to-front\":\n                command = {\n                  command: \"BringToFrontCommand\",\n                  options: {\n                    drawing: this.navigator._sheet._activeDrawing\n                  }\n                };\n                break;\n\n              case \"send-to-back\":\n                command = {\n                  command: \"SendToBackCommand\",\n                  options: {\n                    drawing: this.navigator._sheet._activeDrawing\n                  }\n                };\n                break;\n\n              case \"unmerge\":\n                command = {\n                  command: \"MergeCellCommand\",\n                  options: {\n                    value: \"unmerge\"\n                  }\n                };\n                break;\n\n              case \"merge\":\n                this.view.openDialog(\"merge\");\n                break;\n\n              case \"hide-row\":\n                command = {\n                  command: \"HideLineCommand\",\n                  options: {\n                    axis: \"row\"\n                  }\n                };\n                break;\n\n              case \"hide-column\":\n                command = {\n                  command: \"HideLineCommand\",\n                  options: {\n                    axis: \"column\"\n                  }\n                };\n                break;\n\n              case \"unhide-row\":\n                command = {\n                  command: \"UnHideLineCommand\",\n                  options: {\n                    axis: \"row\"\n                  }\n                };\n                break;\n\n              case \"unhide-column\":\n                command = {\n                  command: \"UnHideLineCommand\",\n                  options: {\n                    axis: \"column\"\n                  }\n                };\n                break;\n\n              case \"delete-row\":\n                command = {\n                  command: \"DeleteRowCommand\"\n                };\n                break;\n\n              case \"delete-column\":\n                command = {\n                  command: \"DeleteColumnCommand\"\n                };\n                break;\n            }\n\n            if (command) {\n              this._execute(command);\n            }\n          },\n          onSheetBarRemove: function (e) {\n            var sheet = this._workbook.sheetByName(e.name); //TODO: move to model!\n\n\n            if (!sheet) {\n              return;\n            }\n\n            this._workbook.removeSheet(sheet);\n          },\n          destroy: function () {\n            this.listener.destroy();\n\n            this._enableEditorEvents(false);\n\n            this.keyListener.destroy();\n            this.inputKeyListener.destroy();\n          },\n          onSheetBarSelect: function (e) {\n            var sheet;\n            var workbook = this._workbook;\n\n            if (e.isAddButton) {\n              if (this._workbook.trigger(\"insertSheet\")) {\n                return;\n              }\n\n              sheet = workbook.insertSheet();\n            } else {\n              sheet = workbook.sheetByName(e.name);\n            } //TODO: move to model\n\n\n            if (workbook.activeSheet().name() !== sheet.name()) {\n              if (this._workbook.trigger(\"selectSheet\", {\n                sheet: sheet\n              })) {\n                return;\n              }\n\n              if (!this.editor.canInsertRef(false)) {\n                this.editor.deactivate();\n              }\n\n              workbook.activeSheet(sheet);\n            }\n          },\n          onSheetBarReorder: function (e) {\n            var workbook = this._workbook;\n            var sheet = workbook.sheetByIndex(e.oldIndex);\n            var activeSheet = workbook.activeSheet();\n            var activeSheetName = activeSheet.name();\n            workbook.moveSheetToIndex(sheet, e.newIndex);\n\n            if (activeSheetName !== sheet.name()) {\n              if (workbook.trigger(\"selectSheet\", {\n                sheet: sheet\n              })) {\n                workbook.activeSheet(activeSheet);\n                return;\n              }\n\n              if (!this.editor.canInsertRef(false)) {\n                this.editor.deactivate();\n              }\n\n              workbook.activeSheet(sheet);\n            }\n          },\n          onSheetBarRename: function (e) {\n            var sheet = this._workbook.sheetByIndex(e.sheetIndex);\n\n            if (this._workbook.sheetByName(e.name)) {\n              this.view.showError({\n                reason: \"error\",\n                type: \"duplicateSheetName\"\n              });\n              return;\n            }\n\n            this._workbook.renameSheet(sheet, e.name);\n\n            this.clipboardElement.focus();\n          },\n          sheet: function (sheet) {\n            this.navigator = sheet.navigator();\n            this.axisManager = sheet.axisManager();\n          },\n          workbook: function (workbook) {\n            this._workbook = workbook;\n            this.clipboard = workbook.clipboard();\n            workbook.bind(\"commandRequest\", this.onCommandRequest.bind(this));\n          },\n          refresh: function () {\n            var editor = this.editor;\n            var workbook = this._workbook;\n            var sheet = workbook.activeSheet();\n            this._viewPortHeight = this.view.scroller.clientHeight;\n            this.navigator.height(this._viewPortHeight);\n\n            if (!editor.isActive() && !this.isEditorDisabled) {\n              editor.enable(sheet.selection().enable() !== false);\n              this.resetEditorValue();\n            }\n\n            var ref = sheet.selection()._ref.simplify();\n\n            var def = this._workbook.nameForRef(ref, sheet.name());\n\n            this.view.nameEditor.value(def.name);\n          },\n          onScroll: function () {\n            this.view.render({\n              scroll: true\n            });\n          },\n          onWheel: function (event) {\n            var deltaX = event.originalEvent.deltaX;\n            var deltaY = event.originalEvent.deltaY;\n\n            if (event.originalEvent.deltaMode === 1) {\n              deltaX *= 10;\n              deltaY *= 10;\n            }\n\n            this.scrollWith(deltaX, deltaY);\n            event.preventDefault();\n          },\n          onAction: function (event, action) {\n            var sheet = this._workbook.activeSheet();\n\n            sheet._activeDrawing = null;\n            this.navigator.moveActiveCell(ACTIONS[action]);\n            event.preventDefault();\n          },\n          onPageUp: function () {\n            this.scrollDown(-this._viewPortHeight);\n          },\n          onPageDown: function () {\n            this.scrollDown(this._viewPortHeight);\n          },\n          onEntryAction: function (event, action) {\n            var sheet = this._workbook.activeSheet();\n\n            if (event.mod) {\n              var key = String.fromCharCode(event.keyCode);\n              var shouldPrevent = true;\n\n              switch (key) {\n                case \"A\":\n                  sheet._activeDrawing = null;\n                  this.navigator.selectAll();\n                  break;\n\n                case \"Y\":\n                  this._workbook.undoRedoStack.redo();\n\n                  break;\n\n                case \"Z\":\n                  this._workbook.undoRedoStack.undo();\n\n                  break;\n\n                default:\n                  shouldPrevent = false;\n                  break;\n              }\n\n              if (shouldPrevent) {\n                event.preventDefault();\n              }\n            } else {\n              var disabled = sheet.selection().enable() === false;\n              var casual = action !== \":edit\";\n\n              if (action == \"delete\" || action == \"backspace\") {\n                if (sheet._activeDrawing) {\n                  this._execute({\n                    command: \"DeleteDrawingCommand\",\n                    options: {\n                      drawing: sheet._activeDrawing\n                    }\n                  });\n                } else if (!disabled) {\n                  this._execute({\n                    command: \"ClearContentCommand\"\n                  });\n                }\n\n                event.preventDefault();\n              } else if (alphaNumRegExp.test(action) || !casual) {\n                sheet._activeDrawing = null;\n\n                if (disabled) {\n                  event.preventDefault();\n                  return;\n                }\n\n                if (casual) {\n                  this.editor.value(\"\");\n                }\n\n                this.activateEditor(casual);\n              } else {\n                this.navigator.navigateInSelection(ENTRY_ACTIONS[action]);\n                event.preventDefault();\n              }\n            }\n          },\n          onShiftAction: function (event, action) {\n            this.navigator.modifySelection(ACTIONS[action.replace(\"shift+\", \"\")], this.appendSelection);\n            event.preventDefault();\n          },\n          onMouseMove: function (event) {\n            var sheet = this._workbook.activeSheet();\n\n            if (sheet.resizingInProgress() || sheet.selectionInProgress()) {\n              return;\n            }\n\n            var object = this.objectAt(event);\n\n            if (object.type === \"columnresizehandle\" || object.type === \"rowresizehandle\") {\n              sheet.positionResizeHandle(object.ref);\n            } else {\n              sheet.removeResizeHandle();\n            }\n\n            sheet._renderComment(object.type == \"cell\" ? object.ref : null);\n          },\n          onMouseDown: function (event) {\n            var object = this.objectAt(event);\n\n            if (object.pane) {\n              this.originFrame = object.pane;\n            }\n\n            if (this._startResizingDrawing(event, object)) {\n              event.stopPropagation();\n              return;\n            }\n\n            var sheet = this._workbook.activeSheet();\n\n            var win = this.container.closest('[' + kendo.attr(\"role\") + '=\"window\"]');\n\n            if (win.length) {\n              win = kendo.widgetInstance(win);\n\n              if (win && win.options.modal) {\n                event.stopPropagation();\n              }\n            }\n\n            sheet._activeDrawing = null;\n\n            if (object.type === \"drawing\") {\n              sheet._activeDrawing = object.drawing;\n              object.copy = object.drawing.clone();\n              object.startBox = sheet.drawingBoundingBox(object.copy);\n              sheet.startDragging(object);\n              sheet.triggerChange({\n                dragging: true\n              });\n              event.preventDefault();\n              return;\n            }\n\n            if (object.type === \"editor\") {\n              // XXX: canceling the edits, because they might not\n              // validate.  Not sure it's the Right Thing.\n              this.onEditorEsc();\n              this.openCustomEditor();\n              event.preventDefault();\n              return;\n            }\n\n            if (this.editor.canInsertRef(false) && object.ref) {\n              this._workbook.activeSheet()._setFormulaSelections(this.editor.highlightedRefs());\n\n              this.navigator.startSelection(object.ref, this._selectionMode, this.appendSelection, event.shiftKey, this.view);\n              event.preventDefault();\n              return;\n            } else {\n              this._preventNavigation = false;\n              this.editor.deactivate();\n\n              if (this._preventNavigation) {\n                return; // validation error\n              }\n            }\n\n            if (object.type === \"columnresizehandle\" || object.type === \"rowresizehandle\") {\n              sheet.startResizing({\n                x: object.x,\n                y: object.y\n              });\n              event.preventDefault();\n              return;\n            }\n\n            if (object.type === \"filtericon\") {\n              this.openFilterMenu(event);\n              event.preventDefault();\n              return;\n            }\n\n            this._selectionMode = SELECTION_MODES[object.type];\n            this.appendSelection = event.mod;\n            this.navigator.startSelection(object.ref, this._selectionMode, this.appendSelection, event.shiftKey, this.view);\n          },\n          _startResizingDrawing: function (event) {\n            var handle = $(event.target).closest(\".k-spreadsheet-drawing-handle\");\n\n            if (handle.length) {\n              var location = this.translateCoords(event);\n              var direction = handle.data(\"direction\");\n\n              var sheet = this._workbook.activeSheet();\n\n              var drawing = sheet._activeDrawing;\n              sheet.startDragging({\n                pane: this.originFrame,\n                drawing: drawing,\n                copy: drawing.clone(),\n                startBox: sheet.drawingBoundingBox(drawing),\n                resize: direction,\n                //aspect   : drawing.width / drawing.height,\n                startX: location.x,\n                startY: location.y\n              });\n              return true;\n            }\n          },\n          onContextMenu: function (event) {\n            var sheet = this._workbook.activeSheet();\n\n            event.preventDefault();\n\n            if (sheet.resizingInProgress() || sheet.draggingInProgress()) {\n              return;\n            }\n\n            this.cellContextMenu.close();\n            this.colHeaderContextMenu.close();\n            this.rowHeaderContextMenu.close();\n            this.drawingContextMenu.close();\n            var menu;\n            var object = this.objectAt(event);\n\n            if (object.type === \"columnresizehandle\" || object.type === \"rowresizehandle\") {\n              return;\n            }\n\n            if (object.ref) {\n              this.navigator.selectForContextMenu(object.ref, SELECTION_MODES[object.type]);\n            } else if (object.type == \"drawing\") {\n              this.navigator.selectDrawingForContextMenu(object.drawing);\n            }\n\n            var isComposite = this.navigator._sheet.select() instanceof kendo.spreadsheet.UnionRef;\n            var showUnhide = false;\n            var showUnmerge = false;\n\n            if (object.type == \"columnheader\") {\n              menu = this.colHeaderContextMenu;\n              showUnhide = !isComposite && this.axisManager.selectionIncludesHiddenColumns();\n            } else if (object.type == \"rowheader\") {\n              menu = this.rowHeaderContextMenu;\n              showUnhide = !isComposite && this.axisManager.selectionIncludesHiddenRows();\n            } else if (object.type == \"drawing\") {\n              menu = this.drawingContextMenu;\n            } else {\n              menu = this.cellContextMenu;\n              showUnmerge = this.navigator.selectionIncludesMergedCells();\n            }\n\n            menu.element.find(COMPOSITE_UNAVAILABLE_ACTION_SELECTORS).toggle(!isComposite);\n            menu.element.find(UNHIDE_ACTION_SELECTORS).toggle(showUnhide);\n            menu.element.find('[data-action=unmerge]').toggle(showUnmerge); // avoid the immediate close\n\n            setTimeout(function () {\n              menu.open(event.pageX, event.pageY);\n            });\n          },\n          prevent: function (event) {\n            event.preventDefault();\n          },\n          constrainResize: function (type, ref) {\n            var sheet = this._workbook.activeSheet();\n\n            var resizeHandle = sheet.resizeHandlePosition();\n            return !resizeHandle || type === \"outside\" || type === \"topcorner\" || ref.col < resizeHandle.col || ref.row < resizeHandle.row;\n          },\n          _dragDrawing: function (event) {\n            var sheet = this._workbook.activeSheet();\n\n            var drag = sheet.draggingInProgress();\n\n            if (!drag) {\n              return false;\n            }\n\n            var location = this.translateCoords(event);\n            var drawing = drag.drawing;\n            var deltaX = location.x - drag.startX;\n            var deltaY = location.y - drag.startY;\n\n            if (drag.resize == \"SE\") {\n              if (drag.aspect) {\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                  drawing.width = Math.max(drag.copy.width + deltaX, 20);\n                  drawing.height = drawing.width / drag.aspect;\n                } else {\n                  drawing.height = Math.max(drag.copy.height + deltaY, 20);\n                  drawing.width = drawing.height * drag.aspect;\n                }\n              } else {\n                drawing.width = Math.max(drag.copy.width + deltaX, 20);\n                drawing.height = Math.max(drag.copy.height + deltaY, 20);\n              }\n            } else if (drag.resize == \"E\") {\n              drawing.width = Math.max(drag.copy.width + deltaX, 20);\n            } else if (drag.resize == \"S\") {\n              drawing.height = Math.max(drag.copy.height + deltaY, 20);\n            } else if (drag.resize == \"N\") {\n              if (drag.copy.height - deltaY > 20) {\n                drawing.height = drag.copy.height - deltaY;\n                drawing.offsetY = drag.copy.offsetY + deltaY;\n              }\n            } else if (drag.resize == \"W\") {\n              if (drag.copy.width - deltaX > 20) {\n                drawing.width = drag.copy.width - deltaX;\n                drawing.offsetX = drag.copy.offsetX + deltaX;\n              }\n            } else if (drag.resize == \"NE\") {\n              drawing.width = Math.max(drag.copy.width + deltaX, 20);\n\n              if (drag.copy.height - deltaY > 20) {\n                drawing.height = drag.copy.height - deltaY;\n                drawing.offsetY = drag.copy.offsetY + deltaY;\n              }\n            } else if (drag.resize == \"SW\") {\n              drawing.height = Math.max(drag.copy.height + deltaY, 20);\n\n              if (drag.copy.width - deltaX > 20) {\n                drawing.width = drag.copy.width - deltaX;\n                drawing.offsetX = drag.copy.offsetX + deltaX;\n              }\n            } else if (drag.resize == \"NW\") {\n              if (drag.copy.height - deltaY > 20) {\n                drawing.height = drag.copy.height - deltaY;\n                drawing.offsetY = drag.copy.offsetY + deltaY;\n              }\n\n              if (drag.copy.width - deltaX > 20) {\n                drawing.width = drag.copy.width - deltaX;\n                drawing.offsetX = drag.copy.offsetX + deltaX;\n              }\n            } // just moving (no resize)\n            else {\n              drawing.offsetX = drag.copy.offsetX + deltaX;\n              drawing.offsetY = drag.copy.offsetY + deltaY;\n            }\n\n            sheet.triggerChange({\n              dragging: true\n            });\n            return true;\n          },\n          onMouseDrag: function (event) {\n            if (this._selectionMode === \"sheet\") {\n              return;\n            }\n\n            var location = {\n              clientX: event.clientX,\n              clientY: event.clientY\n            };\n\n            var sheet = this._workbook.activeSheet();\n\n            if (this._dragDrawing(event)) {\n              return;\n            }\n\n            var object = this.objectAt(location);\n\n            if (sheet.resizingInProgress()) {\n              if (!this.constrainResize(object.type, object.ref)) {\n                sheet.resizeHintPosition({\n                  x: object.x,\n                  y: object.y\n                });\n              }\n\n              return;\n            }\n\n            if (object.type === \"outside\") {\n              this.startAutoScroll(object);\n              return;\n            }\n\n            if (this.originFrame === object.pane) {\n              this.selectToLocation(location);\n            } else {\n              // cross frame selection\n              var frame = this.originFrame._grid;\n\n              if (object.x > frame.right) {\n                kendo.scrollLeft(this);\n              }\n\n              if (object.y > frame.bottom) {\n                this.scrollTop();\n              }\n\n              if (object.y < frame.top || object.x < frame.left) {\n                this.startAutoScroll(object, location);\n              } else {\n                this.selectToLocation(location);\n              }\n            }\n\n            event.preventDefault();\n          },\n          onMouseUp: function (event) {\n            var sheet = this._workbook.activeSheet();\n\n            sheet.completeResizing();\n            sheet.completeDragging();\n            this.navigator.completeSelection();\n            this.stopAutoScroll();\n            var editor = this.editor.activeEditor();\n\n            if (!editor) {\n              return;\n            }\n\n            var el = event.target;\n\n            while (el) {\n              if (el === editor.element[0]) {\n                return;\n              }\n\n              el = el.parentNode;\n            }\n\n            var object = this.objectAt(event);\n\n            if (object && object.ref && editor.canInsertRef(false)) {\n              editor.refAtPoint(sheet);\n\n              sheet._setFormulaSelections(editor.highlightedRefs());\n            }\n          },\n          onDblClick: function (event) {\n            var object = this.objectAt(event);\n            var disabled = this._workbook.activeSheet().selection().enable() === false;\n\n            if (object.type !== \"cell\" || disabled) {\n              return;\n            }\n\n            var sel = this._workbook.activeSheet().selection();\n\n            this.activateEditor(!sel.value() && !sel.formula());\n            this.onEditorUpdate();\n          },\n          onCut: function (e) {\n            var self = this;\n            setTimeout(function () {\n              self.clipboard.menuInvoked = e === undefined;\n\n              self._execute({\n                command: \"CutCommand\",\n                options: {\n                  workbook: self.view._workbook,\n                  event: e.originalEvent || e\n                }\n              });\n            });\n          },\n          clipBoardValue: function () {\n            return this.clipboardElement.html();\n          },\n          _pasteImage: function (blob) {\n            var self = this;\n            var img = new window.Image();\n            img.src = window.URL.createObjectURL(blob);\n\n            img.onload = function () {\n              self._execute({\n                command: \"InsertImageCommand\",\n                options: {\n                  blob: blob,\n                  width: img.width,\n                  height: img.height\n                }\n              });\n            };\n\n            setTimeout(function () {\n              window.URL.revokeObjectURL(img.src);\n            }, 10);\n          },\n          onPaste: function (e) {\n            var self = this;\n            var html = \"\";\n            var plain = \"\";\n            self.clipboard.menuInvoked = e === undefined;\n\n            if (e) {\n              var clipboardData = e.originalEvent.clipboardData;\n\n              if (clipboardData && clipboardData.getData) {\n                e.preventDefault();\n                var hasHTML = false;\n                var hasPlainText = false; // Firefox uses DOMStringList, needs special handling\n\n                if (window.DOMStringList && clipboardData.types instanceof window.DOMStringList) {\n                  hasHTML = clipboardData.types.contains(\"text/html\");\n                  hasPlainText = clipboardData.types.contains(\"text/plain\");\n                } else if (Array.isArray(clipboardData.types)) {\n                  hasHTML = clipboardData.types.indexOf(\"text/html\") >= 0;\n                  hasPlainText = clipboardData.types.indexOf(\"text/plain\") >= 0;\n                } else {\n                  hasHTML = /text\\/html/.test(clipboardData.types);\n                  hasPlainText = /text\\/plain/.test(clipboardData.types);\n                }\n\n                if (hasHTML) {\n                  html = clipboardData.getData('text/html').trim();\n                }\n\n                if (hasPlainText) {\n                  plain = clipboardData.getData('text/plain').trim();\n                }\n\n                if (!html && !plain && clipboardData.items && clipboardData.items.length) {\n                  for (var i = 0; i < clipboardData.items.length; ++i) {\n                    var item = clipboardData.items[i];\n\n                    if (item.kind == \"file\" && /^image\\/(?:png|jpe?g|gif)$/i.test(item.type)) {\n                      return self._pasteImage(item.getAsFile());\n                    }\n                  }\n                }\n              } else {\n                if (window.clipboardData.files && window.clipboardData.files.length) {\n                  var file = window.clipboardData.files[0];\n\n                  if (/^image\\/(?:png|jpe?g|gif)$/i.test(file.type)) {\n                    return self._pasteImage(file);\n                  }\n                }\n\n                plain = window.clipboardData.getData(\"Text\");\n\n                if (plain) {\n                  plain = plain.trim();\n                } // There's no way to get the HTML clipboard contents in IE other than letting\n                // the browser handle the event (it pastes into our clipboardElement), and then\n                // we can read the HTML from there.  Need to allow a small timeout for this.\n\n\n                self.clipboardElement.empty();\n                setTimeout(function () {\n                  html = self.clipboardElement.html();\n\n                  if (html || plain) {\n                    self.clipboard.external({\n                      html: html,\n                      plain: plain\n                    });\n\n                    self._execute({\n                      command: \"PasteCommand\",\n                      options: {\n                        workbook: self.view._workbook,\n                        event: e.originalEvent || e\n                      }\n                    });\n                  }\n                });\n                return;\n              }\n            } else {\n              if (kendo.support.browser.msie) {\n                self.clipboardElement.trigger(\"focus\").select();\n                document.execCommand('paste');\n                return;\n              } else {\n                self.clipboard.menuInvoked = true;\n              }\n            }\n\n            if (!html && !plain) {\n              return;\n            }\n\n            self.clipboard.external({\n              html: html,\n              plain: plain\n            });\n\n            self._execute({\n              command: \"PasteCommand\",\n              options: {\n                workbook: self.view._workbook,\n                event: e.originalEvent || e\n              }\n            });\n          },\n          onCopy: function (e) {\n            this.clipboard.menuInvoked = e === undefined;\n\n            this._execute({\n              command: \"CopyCommand\",\n              options: {\n                workbook: this.view._workbook,\n                event: e.originalEvent || e\n              }\n            });\n          },\n          ////////////////////////////////////////////////////////////////////\n          scrollTop: function () {\n            this.scroller.scrollTop = 0;\n          },\n          scrollLeft: function () {\n            this.scroller.scrollLeft = 0;\n          },\n          scrollDown: function (value) {\n            this.scroller.scrollTop += value;\n          },\n          scrollRight: function (value) {\n            this.scroller.scrollLeft += value;\n          },\n          scrollWith: function (right, down) {\n            this.scroller.scrollTop += down;\n            this.scroller.scrollLeft += right;\n          },\n          translateCoords: function (location) {\n            var box = this.container[0].getBoundingClientRect();\n            return {\n              x: location.clientX - box.left,\n              y: location.clientY - box.top\n            };\n          },\n          objectAt: function (location, noDrawing) {\n            if (!location) {\n              return;\n            }\n\n            location = this.translateCoords(location);\n            return this.view.objectAt(location.x, location.y, noDrawing);\n          },\n          selectToLocation: function (cellLocation) {\n            var object = this.objectAt(cellLocation, true);\n\n            if (object.pane && object.ref) {\n              // cell, rowheader or columnheader\n              this.extendSelection(object);\n              this.lastKnownCellLocation = cellLocation;\n              this.originFrame = object.pane;\n            }\n\n            this.stopAutoScroll();\n          },\n          extendSelection: function (object) {\n            this.navigator.extendSelection(object.ref, this._selectionMode);\n          },\n          autoScroll: function () {\n            var x = this._autoScrollTarget.x;\n            var y = this._autoScrollTarget.y;\n            var boundaries = this.originFrame._grid;\n            var scroller = this.view.scroller;\n            var scrollStep = 8;\n            var scrollLeft = scroller.scrollLeft;\n            var scrollTop = scroller.scrollTop;\n\n            if (x < boundaries.left) {\n              this.scrollRight(-scrollStep);\n            }\n\n            if (x > boundaries.right) {\n              this.scrollRight(scrollStep);\n            }\n\n            if (y < boundaries.top) {\n              this.scrollDown(-scrollStep);\n            }\n\n            if (y > boundaries.bottom) {\n              this.scrollDown(scrollStep);\n            }\n\n            if (scrollTop === scroller.scrollTop && scrollLeft === scroller.scrollLeft) {\n              this.selectToLocation(this.finalLocation);\n            } else {\n              this.extendSelection(this.objectAt(this.lastKnownCellLocation));\n            }\n          },\n          startAutoScroll: function (viewObject, location) {\n            if (!this._scrollInterval) {\n              this._scrollInterval = setInterval(this.autoScroll.bind(this), 50);\n            }\n\n            this.finalLocation = location || this.lastKnownCellLocation;\n            this._autoScrollTarget = viewObject;\n          },\n          stopAutoScroll: function () {\n            clearInterval(this._scrollInterval);\n            this._scrollInterval = null;\n          },\n          openCustomEditor: function () {\n            this.view.openCustomEditor();\n          },\n          openFilterMenu: function (event) {\n            var object = this.objectAt(event);\n\n            var sheet = this._workbook.activeSheet();\n\n            var column = sheet.filterColumn(object.ref);\n            var filterMenu = this.view.createFilterMenu(column);\n            filterMenu.bind(\"action\", this.onCommandRequest.bind(this));\n            filterMenu.bind(\"action\", filterMenu.close.bind(filterMenu));\n            filterMenu.openFor(event.target, event);\n          },\n          ////////////////////////////////////////////////////////////////////\n          _saveEditorValue: function (arrayFormula) {\n            var sheet = this.editor._range.sheet();\n\n            var value = this.editor.value();\n\n            if (this._workbook.activeSheet() !== sheet) {\n              // remove highlighted refs (XXX: which are mostly wrong, BTW)\n              this._workbook.activeSheet()._setFormulaSelections(); // go back to the original sheet\n\n\n              this._workbook.activeSheet(sheet);\n            }\n\n            sheet.isInEditMode(false);\n            this._lastEditorValue = value;\n\n            this._execute({\n              command: \"EditCommand\",\n              options: {\n                value: value,\n                arrayFormula: arrayFormula\n              }\n            });\n          },\n          onEditorChange: function () {\n            this._saveEditorValue(false);\n          },\n          onEditorArrayFormula: function () {\n            this._saveEditorValue(true);\n\n            this.editor.deactivate(true);\n          },\n          onEditorActivate: function () {\n            var workbook = this._workbook;\n            var sheet = workbook.activeSheet();\n\n            sheet._setFormulaSelections(this.editor.highlightedRefs());\n\n            sheet.isInEditMode(true);\n          },\n          onEditorDeactivate: function () {\n            var sheet = this._workbook.activeSheet();\n\n            sheet.isInEditMode(false);\n\n            sheet._setFormulaSelections([]);\n          },\n          onEditorUpdate: function () {\n            this._workbook.activeSheet()._setFormulaSelections(this.editor.highlightedRefs());\n          },\n          onEditorBarFocus: function () {\n            var disabled = this._workbook.activeSheet().selection().enable() === false;\n\n            if (disabled) {\n              return;\n            }\n\n            this.editor.activate({\n              range: this._workbook.activeSheet().selection(),\n              rect: this.view.activeCellRectangle(),\n              tooltip: this._activeTooltip()\n            });\n          },\n          onEditorCellFocus: function () {\n            this.editor.scale();\n          },\n          onEditorEsc: function () {\n            this.resetEditorValue();\n            this.editor.deactivate();\n            this.clipboardElement.trigger(\"focus\");\n          },\n          insertNewline: function (e) {\n            e.preventDefault();\n            this.editor.insertNewline();\n          },\n          onEditorBlur: function (_, action) {\n            if (this.editor.isFiltered()) {\n              return;\n            }\n\n            this._preventNavigation = false;\n            this.editor.deactivate();\n\n            if (!this._preventNavigation) {\n              this.clipboardElement.trigger(\"focus\");\n              this.navigator.navigateInSelection(ENTRY_ACTIONS[action]);\n            }\n          },\n          onEditorAction: function (event, action) {\n            var editor = this.editor;\n\n            var sheet = this._workbook.activeSheet();\n\n            if (this._casualEditing && /^(?:up|right|down|left)$/.test(action)) {\n              this.deactivateEditor();\n              this.navigator.moveActiveCell(ACTIONS[action]);\n              event.preventDefault();\n            } else if (editor.canInsertRef(true)) {\n              this.navigator.moveActiveCell(ACTIONS[action]);\n              editor.activeEditor().refAtPoint(sheet);\n\n              sheet._setFormulaSelections(editor.highlightedRefs());\n\n              event.preventDefault();\n            }\n          },\n          onEditorShiftAction: function (event, action) {\n            var editor = this.editor;\n\n            var sheet = this._workbook.activeSheet();\n\n            if (editor.canInsertRef(true)) {\n              this.navigator.modifySelection(ACTIONS[action.replace(\"shift+\", \"\")], this.appendSelection);\n              editor.activeEditor().refAtPoint(sheet);\n\n              sheet._setFormulaSelections(editor.highlightedRefs());\n\n              event.preventDefault();\n            }\n          },\n          ////////////////////////////////////////////////////////////////////\n          resetEditorValue: function () {\n            var sheet = this._workbook.activeSheet();\n\n            var ref = sheet.activeCell();\n\n            var input = this._workbook._inputForRef(ref);\n\n            var x = sheet.range(ref).intersectingArrayFormula();\n\n            if (x) {\n              input = \"=\" + x.formula;\n            }\n\n            this.editor.value(input, !!x);\n          },\n          activateEditor: function (casual) {\n            // This flag will be false when F2 has been pressed, and\n            // true when editing is \"casual\", i.e., user just started\n            // typing.  In this case we want arrow keys to do cell\n            // navigation rather than move the cursor.\n            // https://github.com/telerik/kendo-ui-core/issues/3644\n            this._casualEditing = casual;\n            this.editor.activate({\n              range: this._workbook.activeSheet().selection(),\n              rect: this.view.activeCellRectangle(),\n              tooltip: this._activeTooltip()\n            }).focus();\n          },\n          deactivateEditor: function () {\n            this.view.editor.deactivate();\n          },\n          onCommandRequest: function (e) {\n            if (e.command) {\n              this._execute(e);\n            } else {\n              this._workbook.undoRedoStack[e.action]();\n            }\n          },\n          onDialogRequest: function (e) {\n            var additionalOptions = {\n              pdfExport: this._workbook.options.pdf,\n              excelExport: this._workbook.options.excel\n            };\n\n            if (e.options) {\n              $.extend(true, e.options, additionalOptions);\n            } else {\n              e.options = additionalOptions;\n            }\n\n            this.view.openDialog(e.name, e.options);\n          },\n          onNameEditorEnter: function () {\n            var ref;\n            var workbook = this._workbook;\n            var sheet = workbook.activeSheet();\n            var name = this.view.nameEditor.value(); // 1. does it look like a reference, or already defined\n            // name?  If so, just select it (don't define/modify any\n            // names)\n\n            ref = kendo.spreadsheet.calc.parseReference(name, true) || workbook.nameValue(name);\n\n            if (ref instanceof kendo.spreadsheet.Ref) {\n              if (ref.sheet && ref.sheet.toLowerCase() != sheet.name().toLowerCase()) {\n                // reference points to another sheet, select it if found\n                var tmp = workbook.sheetByName(ref.sheet);\n\n                if (tmp) {\n                  workbook.activeSheet(tmp);\n                  sheet = tmp;\n                }\n              }\n\n              sheet.range(ref).select();\n              return;\n            }\n\n            ref = sheet.selection()._ref.clone().simplify().setSheet(sheet.name(), true); // XXX: should we check if a name is already defined for this range, and update it instead?\n            // Excel just adds a new one, and provides a more complete Name Manager dialog.\n            //var def = workbook.nameForRef(ref, sheet.name());\n            // just define new name\n\n            this._execute({\n              command: \"DefineNameCommand\",\n              options: {\n                name: name,\n                value: ref\n              }\n            });\n\n            this.clipboardElement.trigger(\"focus\");\n          },\n          onNameEditorCancel: function () {\n            this.clipboardElement.trigger(\"focus\");\n          },\n          onNameEditorSelect: function (ev) {\n            var name = ev.name;\n            var workbook = this._workbook;\n            var sheet = workbook.activeSheet();\n            var ref = workbook.nameValue(name);\n\n            if (ref instanceof kendo.spreadsheet.Ref) {\n              if (ref.sheet && ref.sheet.toLowerCase() != sheet.name().toLowerCase()) {\n                // reference points to another sheet, select it if found\n                var tmp = workbook.sheetByName(ref.sheet);\n\n                if (tmp) {\n                  workbook.activeSheet(tmp);\n                  sheet = tmp;\n                }\n              }\n\n              sheet.range(ref).select();\n              return;\n            }\n\n            this.clipboardElement.trigger(\"focus\");\n          },\n          onNameEditorDelete: function (ev) {\n            this._execute({\n              command: \"DeleteNameCommand\",\n              options: {\n                name: ev.name\n              }\n            });\n\n            this.clipboardElement.trigger(\"focus\");\n          }\n        });\n        kendo.spreadsheet.Controller = Controller;\n      })(window.kendo);\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}