{"ast":null,"code":"import { Class, valueOrDefault } from '../common';\nimport { Location } from './location';\nlet math = Math,\n    max = math.max,\n    min = math.min;\nexport class Extent extends Class {\n  constructor(initialNw, initialSe) {\n    super();\n    let nw = Location.create(initialNw);\n    let se = Location.create(initialSe);\n\n    if (nw.lng + 180 > se.lng + 180 && nw.lat + 90 < se.lat + 90) {\n      this.se = nw;\n      this.nw = se;\n    } else {\n      this.se = se;\n      this.nw = nw;\n    }\n  }\n\n  contains(loc) {\n    let nw = this.nw,\n        se = this.se,\n        lng = valueOrDefault(loc.lng, loc[1]),\n        lat = valueOrDefault(loc.lat, loc[0]);\n    return loc && lng + 180 >= nw.lng + 180 && lng + 180 <= se.lng + 180 && lat + 90 >= se.lat + 90 && lat + 90 <= nw.lat + 90;\n  }\n\n  center() {\n    let nw = this.nw;\n    let se = this.se;\n    let lng = nw.lng + (se.lng - nw.lng) / 2;\n    let lat = nw.lat + (se.lat - nw.lat) / 2;\n    return new Location(lat, lng);\n  }\n\n  containsAny(locs) {\n    let result = false;\n\n    for (let i = 0; i < locs.length; i++) {\n      result = result || this.contains(locs[i]);\n    }\n\n    return result;\n  }\n\n  include(loc) {\n    let nw = this.nw,\n        se = this.se,\n        lng = valueOrDefault(loc.lng, loc[1]),\n        lat = valueOrDefault(loc.lat, loc[0]);\n    nw.lng = min(nw.lng, lng);\n    nw.lat = max(nw.lat, lat);\n    se.lng = max(se.lng, lng);\n    se.lat = min(se.lat, lat);\n  }\n\n  includeAll(locs) {\n    for (let i = 0; i < locs.length; i++) {\n      this.include(locs[i]);\n    }\n  }\n\n  edges() {\n    let nw = this.nw,\n        se = this.se;\n    return {\n      nw: this.nw,\n      ne: new Location(nw.lat, se.lng),\n      se: this.se,\n      sw: new Location(se.lat, nw.lng)\n    };\n  }\n\n  toArray() {\n    let nw = this.nw,\n        se = this.se;\n    return [nw, new Location(nw.lat, se.lng), se, new Location(se.lat, nw.lng)];\n  }\n\n  overlaps(extent) {\n    return this.containsAny(extent.toArray()) || extent.containsAny(this.toArray());\n  }\n\n  static create(a, b) {\n    if (a instanceof Extent) {\n      return a;\n    } else if (a && b) {\n      return new Extent(a, b);\n    } else if (a && a.length === 4 && !b) {\n      return new Extent([a[0], a[1]], [a[2], a[3]]);\n    }\n  }\n\n  static get World() {\n    return new Extent([90, -180], [-90, 180]);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}