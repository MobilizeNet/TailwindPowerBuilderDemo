{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1703);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  20:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.core\");\n    /***/\n  },\n\n  /***/\n  1703:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(20)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      /* jshint eqnull:true */\n      var spreadsheet = kendo.spreadsheet;\n      var CellRef = spreadsheet.CellRef;\n      var RangeRef = spreadsheet.RangeRef;\n      var UnionRef = spreadsheet.UnionRef;\n      var NameRef = spreadsheet.NameRef;\n      var Ref = spreadsheet.Ref;\n      var FormulaContext = kendo.Class.extend({\n        init: function (workbook) {\n          this.workbook = workbook;\n        },\n        getRefCells: function (ref, hiddenInfo, fsheet, frow, fcol, wantNulls) {\n          var sheet, formula, value, i;\n\n          if (ref instanceof CellRef) {\n            sheet = this.workbook.sheetByName(ref.sheet);\n\n            if (!sheet || !ref.valid()) {\n              return [{\n                value: new kendo.spreadsheet.calc.runtime.CalcError(\"REF\")\n              }];\n            }\n\n            formula = sheet.formula(ref);\n            value = sheet.range(ref.row, ref.col).value();\n\n            if (wantNulls || formula != null || value != null) {\n              return [{\n                formula: formula,\n                value: value,\n                row: ref.row,\n                col: ref.col,\n                sheet: ref.sheet,\n                hidden: hiddenInfo ? sheet.columnWidth(ref.col) === 0 || sheet.rowHeight(ref.row) === 0 : false\n              }];\n            } else {\n              return [];\n            }\n          }\n\n          if (ref instanceof RangeRef) {\n            i = this.workbook.sheetIndex(ref.sheet);\n            var states = [],\n                n = i;\n\n            if (ref.endSheet) {\n              // \"3D\" reference.\n              n = this.workbook.sheetIndex(ref.endSheet);\n\n              if (i > n) {\n                var tmp = i;\n                i = n;\n                n = tmp;\n              }\n            }\n\n            if (i < 0 || n < 0 || !ref.valid()) {\n              return [{\n                value: new kendo.spreadsheet.calc.runtime.CalcError(\"REF\")\n              }];\n            } // XXX: This is nicer, but significantly slower.\n            // Should investigate why, or add some options to make\n            // it faster (i.e. probably because it adds all cell\n            // properties, while we only need value and formula).\n            //\n            //     var add = function(row, col, data){\n            //         data.row = row;\n            //         data.col = col;\n            //         data.sheet = sheet.name();\n            //         states.push(data);\n            //     };\n            //     while (i <= n) {\n            //         sheet = this.workbook.sheetByIndex(i++);\n            //         sheet.forEach(ref, add);\n            //     }\n            //\n            // For now keep doing it \"manually\".\n\n\n            while (i <= n) {\n              sheet = this.workbook.sheetByIndex(i++);\n\n              var tl = sheet._grid.normalize(ref.topLeft);\n\n              var br = sheet._grid.normalize(ref.bottomRight);\n\n              var startCellIndex = sheet._grid.cellRefIndex(tl);\n\n              var endCellIndex = sheet._grid.cellRefIndex(br);\n\n              var values = sheet._properties.iterator(\"value\", startCellIndex, endCellIndex);\n\n              for (var col = tl.col; col <= br.col; ++col) {\n                for (var row = tl.row; row <= br.row; ++row) {\n                  var index = sheet._grid.index(row, col);\n\n                  formula = sheet._properties.get(\"formula\", index);\n                  value = values.at(index);\n\n                  if (wantNulls || formula != null || value != null) {\n                    states.push({\n                      formula: formula,\n                      value: value,\n                      row: row,\n                      col: col,\n                      sheet: sheet.name(),\n                      hidden: hiddenInfo ? sheet.columnWidth(col) === 0 || sheet.rowHeight(row) === 0 : false\n                    });\n                  }\n                }\n              }\n            }\n\n            return states;\n          }\n\n          if (ref instanceof UnionRef) {\n            var a = [];\n\n            for (i = 0; i < ref.refs.length; ++i) {\n              a = a.concat(this.getRefCells(ref.refs[i], hiddenInfo, fsheet, frow, fcol));\n            }\n\n            return a;\n          }\n\n          if (ref instanceof NameRef) {\n            var val = this.nameValue(ref, fsheet, frow, fcol); // XXX: revise this\n\n            if (val instanceof Ref) {\n              return this.getRefCells(val, hiddenInfo, fsheet, frow, fcol);\n            }\n\n            return [{\n              value: val == null ? new kendo.spreadsheet.calc.runtime.CalcError(\"NAME\") : val\n            }];\n          }\n\n          return [];\n        },\n        isMerged: function (ref) {\n          var sheet = this.workbook.sheetByName(ref.sheet);\n          return sheet.isMerged(ref);\n        },\n        nameValue: function (ref, fsheet, frow, fcol) {\n          var val;\n\n          if (ref.hasSheet()) {\n            // qualified name\n            val = this.workbook.nameValue(ref.print());\n          } else {\n            // try local name\n            ref = ref.clone().setSheet(fsheet, true);\n            val = this.workbook.nameValue(ref.print());\n\n            if (val == null) {\n              // try global name\n              val = this.workbook.nameValue(ref.name);\n            }\n          }\n\n          if (val instanceof Ref) {\n            val = val.absolute(frow, fcol);\n          }\n\n          return val;\n        },\n        getData: function (ref, fsheet, frow, fcol, wantNulls) {\n          var single = ref instanceof CellRef;\n\n          if (ref instanceof NameRef) {\n            single = this.workbook.nameValue(ref.name) instanceof CellRef;\n          }\n\n          var data = this.getRefCells(ref, false, fsheet, frow, fcol, wantNulls).map(function (cell) {\n            var val = cell.value;\n\n            if (val instanceof kendo.spreadsheet.calc.runtime.Formula) {\n              val = val.value;\n            }\n\n            return val;\n          });\n          return single ? data[0] : data;\n        },\n        onFormula: function (f) {\n          var sheet = this.workbook.sheetByName(f.sheet);\n          var row = f.row,\n              col = f.col,\n              value = f.value;\n          var currentFormula = sheet.formula({\n            row: row,\n            col: col\n          });\n\n          if (currentFormula !== f) {\n            // could have been deleted or modified in the mean time,\n            // if the formula was asynchronous.  ignore this result.\n            return false;\n          }\n\n          var arrayRange = f.arrayFormulaRange;\n\n          if (arrayRange) {\n            // `value` will always be a Matrix in this case;\n            // enforced in runtime.js (Context::_resolve).  We\n            // must fill only cells in arrayRange.\n            var tlRow, tlCol;\n            var width = value.width;\n            var height = value.height;\n            sheet.forEach(arrayRange, function (row, col) {\n              if (tlRow === undefined) {\n                tlRow = row;\n                tlCol = col;\n              }\n\n              var vrow = row - tlRow;\n              var vcol = col - tlCol;\n              var val;\n\n              if (vrow < height && vcol < width) {\n                val = value.get(vrow, vcol);\n              } else {\n                val = new kendo.spreadsheet.calc.runtime.CalcError(\"N/A\");\n              }\n\n              sheet._value(row, col, val);\n            });\n          } else {\n            // formulas may return references.  if a range or union,\n            // we'll just save the first cell.\n            if (value instanceof Ref) {\n              value = this.getData(value, f.sheet, row, col);\n\n              if (Array.isArray(value)) {\n                value = value[0];\n              }\n\n              if (value === undefined) {\n                value = null; // clear contents\n              }\n            } // when not saved as an array formula, a formula\n            // returning a Matrix will just save the first value.\n\n\n            if (value instanceof kendo.spreadsheet.calc.runtime.Matrix) {\n              value = value.get(0, 0);\n            }\n\n            sheet._value(row, col, value);\n          }\n\n          clearTimeout(sheet._formulaContextRefresh);\n          sheet._formulaContextRefresh = setTimeout(function () {\n            sheet.batch(function () {}, {\n              layout: true\n            });\n          }, 50);\n          return true;\n        }\n      });\n      var ValidationFormulaContext = FormulaContext.extend({\n        onFormula: function () {\n          return true;\n        }\n      });\n      spreadsheet.FormulaContext = FormulaContext;\n      spreadsheet.ValidationFormulaContext = ValidationFormulaContext;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}