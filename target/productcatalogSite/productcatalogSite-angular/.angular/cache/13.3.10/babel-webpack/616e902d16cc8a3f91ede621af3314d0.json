{"ast":null,"code":"import { drawing, Color } from '@progress/kendo-drawing';\nimport { interpolateValue, setDefaultOptions, round, limitValue } from '../../common';\nimport { ANGULAR_SPEED, LINEAR, RADIAL_RANGE_POINTER } from '../constants';\nconst MAX_DURATION = 800;\n\nclass RangePointerAnimation extends drawing.Animation {\n  constructor(element, options) {\n    super(element, options);\n    const animationOptions = this.options;\n    const duration = Math.abs(animationOptions.newAngle - animationOptions.oldAngle) / animationOptions.duration * 1000;\n    animationOptions.duration = limitValue(duration, ANGULAR_SPEED, MAX_DURATION);\n    const startColor = element.elements.options.get(\"stroke.color\");\n    const color = element.currentColor();\n\n    if (startColor !== color) {\n      this.startColor = new Color(startColor);\n      this.color = new Color(color);\n    }\n  }\n\n  step(pos) {\n    const {\n      options,\n      startColor,\n      color\n    } = this;\n    const angle = interpolateValue(options.oldAngle, options.newAngle, pos);\n    this.element.angle(angle);\n\n    if (color) {\n      const r = round(interpolateValue(startColor.r, color.r, pos));\n      const g = round(interpolateValue(startColor.g, color.g, pos));\n      const b = round(interpolateValue(startColor.b, color.b, pos));\n      this.element.stroke(new Color(r, g, b).toHex());\n    }\n  }\n\n}\n\nsetDefaultOptions(RangePointerAnimation, {\n  easing: LINEAR,\n  duration: ANGULAR_SPEED\n});\ndrawing.AnimationFactory.current.register(RADIAL_RANGE_POINTER, RangePointerAnimation);\nexport default RangePointerAnimation;","map":null,"metadata":{},"sourceType":"module"}