{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1192);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1052:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.popup\");\n    /***/\n  },\n\n  /***/\n  1089:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.html.button\");\n    /***/\n  },\n\n  /***/\n  1192:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1193), __webpack_require__(1052), __webpack_require__(1194), __webpack_require__(1089)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"datepicker\",\n        name: \"DatePicker\",\n        category: \"web\",\n        description: \"The DatePicker widget allows the user to select a date from a calendar or by direct input.\",\n        depends: [\"calendar\", \"popup\", \"html.button\"]\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            html = kendo.html,\n            Widget = ui.Widget,\n            parse = kendo.parseDate,\n            keys = kendo.keys,\n            support = kendo.support,\n            template = kendo.template,\n            activeElement = kendo._activeElement,\n            DIV = \"<div />\",\n            SPAN = \"<span />\",\n            ns = \".kendoDatePicker\",\n            CLICK = \"click\" + ns,\n            UP = support.mouseAndTouchPresent ? kendo.applyEventMap(\"up\", ns.slice(1)) : CLICK,\n            OPEN = \"open\",\n            CLOSE = \"close\",\n            CHANGE = \"change\",\n            DISABLED = \"disabled\",\n            READONLY = \"readonly\",\n            FOCUSED = \"k-focus\",\n            SELECTED = \"k-state-selected\",\n            STATEDISABLED = \"k-disabled\",\n            HOVER = \"k-hover\",\n            HOVEREVENTS = \"mouseenter\" + ns + \" mouseleave\" + ns,\n            MOUSEDOWN = \"mousedown\" + ns,\n            NAVIGATE = \"navigate\",\n            ID = \"id\",\n            MIN = \"min\",\n            MAX = \"max\",\n            MONTH = \"month\",\n            ARIA_DISABLED = \"aria-disabled\",\n            ARIA_READONLY = \"aria-readonly\",\n            ARIA_EXPANDED = \"aria-expanded\",\n            ARIA_HIDDEN = \"aria-hidden\",\n            ARIA_ACTIVEDESCENDANT = \"aria-activedescendant\",\n            calendar = kendo.calendar,\n            isInRange = calendar.isInRange,\n            restrictValue = calendar.restrictValue,\n            isEqualDatePart = calendar.isEqualDatePart,\n            extend = $.extend,\n            DATE = Date;\n\n        function normalize(options) {\n          var parseFormats = options.parseFormats,\n              format = options.format;\n          calendar.normalize(options);\n          parseFormats = Array.isArray(parseFormats) ? parseFormats : [parseFormats];\n\n          if (!parseFormats.length) {\n            parseFormats.push(\"yyyy-MM-dd\");\n          }\n\n          if ($.inArray(format, parseFormats) === -1) {\n            parseFormats.splice(0, 0, options.format);\n          }\n\n          options.parseFormats = parseFormats;\n        }\n\n        function preventDefault(e) {\n          e.preventDefault();\n        }\n\n        var DateView = function (options) {\n          var that = this,\n              id,\n              body = document.body,\n              div = $(DIV).attr(ARIA_HIDDEN, \"true\").addClass(\"k-calendar-container\");\n          that.options = options = options || {};\n          id = options.id;\n\n          if (!options.omitPopup) {\n            div.appendTo(body);\n            that.popup = new ui.Popup(div, extend(options.popup, options, {\n              name: \"Popup\",\n              isRtl: kendo.support.isRtl(options.anchor)\n            }));\n          } else {\n            div = options.dateDiv;\n          }\n\n          if (id) {\n            id += \"_dateview\";\n            div.attr(ID, id);\n            that._dateViewID = id;\n          }\n\n          that.div = div;\n          that.value(options.value);\n        };\n\n        DateView.prototype = {\n          _calendar: function () {\n            var that = this;\n            var calendar = that.calendar;\n            var options = that.options;\n            var div;\n\n            if (!calendar) {\n              div = $(DIV).attr(ID, kendo.guid()).appendTo(options.omitPopup ? options.dateDiv : that.popup.element).on(MOUSEDOWN, preventDefault).on(CLICK, \"td:has(.k-link)\", that._click.bind(that));\n              that.calendar = calendar = new ui.Calendar(div, {\n                componentType: options.componentType,\n                size: options.size,\n                messages: options.messages\n              });\n\n              that._setOptions(options);\n\n              div.addClass(kendo.getValidCssClass(\"k-calendar-\", \"size\", options.size));\n              calendar.navigate(that._value || that._current, options.start);\n              that.value(that._value);\n            }\n          },\n          _setOptions: function (options) {\n            this.calendar.setOptions({\n              focusOnNav: false,\n              change: options.change,\n              culture: options.culture,\n              dates: options.dates,\n              depth: options.depth,\n              footer: options.footer,\n              format: options.format,\n              max: options.max,\n              min: options.min,\n              month: options.month,\n              weekNumber: options.weekNumber,\n              start: options.start,\n              messages: options.messages,\n              disableDates: options.disableDates\n            });\n          },\n          setOptions: function (options) {\n            var old = this.options;\n            var disableDates = options.disableDates;\n\n            if (disableDates) {\n              options.disableDates = calendar.disabled(disableDates);\n            }\n\n            this.options = extend(old, options, {\n              change: old.change,\n              close: old.close,\n              open: old.open\n            });\n\n            if (this.calendar) {\n              this._setOptions(this.options);\n            }\n          },\n          destroy: function () {\n            if (this.popup) {\n              this.popup.destroy();\n            }\n          },\n          open: function () {\n            var that = this;\n            var popupHovered;\n\n            that._calendar(); // In some cases when the popup is opened resize is triggered which will cause it to close\n            // Setting the below flag will prevent this from happening\n            // Reference: https://github.com/telerik/kendo/pull/7553\n\n\n            popupHovered = that.popup._hovered;\n            that.popup._hovered = true;\n            that.popup.open();\n            setTimeout(function () {\n              that.popup._hovered = popupHovered;\n            }, 1);\n          },\n          close: function () {\n            if (this.popup) {\n              this.popup.close();\n            }\n          },\n          min: function (value) {\n            this._option(MIN, value);\n          },\n          max: function (value) {\n            this._option(MAX, value);\n          },\n          toggle: function () {\n            var that = this;\n            that[that.popup.visible() ? CLOSE : OPEN]();\n          },\n          move: function (e) {\n            var that = this,\n                key = e.keyCode,\n                calendar = that.calendar,\n                selectIsClicked = e.ctrlKey && key == keys.DOWN || key == keys.ENTER,\n                handled = false;\n\n            if (e.altKey) {\n              if (key == keys.DOWN) {\n                that.open();\n                e.preventDefault();\n                handled = true;\n              } else if (key == keys.UP) {\n                that.close();\n                e.preventDefault();\n                handled = true;\n              }\n            } else if (that.popup && that.popup.visible()) {\n              if (key == keys.ESC || selectIsClicked && calendar._cell.hasClass(SELECTED)) {\n                that.close();\n                e.preventDefault();\n                return true;\n              } //spacebar selects a date in the calendar\n\n\n              if (key != keys.SPACEBAR) {\n                that._current = calendar._move(e);\n              }\n\n              handled = true;\n            }\n\n            return handled;\n          },\n          current: function (date) {\n            this._current = date;\n\n            if (this.calendar) {\n              this.calendar._focus(date);\n            }\n          },\n          value: function (value) {\n            var that = this,\n                calendar = that.calendar,\n                options = that.options,\n                disabledDate = options.disableDates;\n\n            if (disabledDate && disabledDate(value)) {\n              value = null;\n            }\n\n            that._value = value;\n            that._current = new DATE(+restrictValue(value, options.min, options.max));\n\n            if (calendar) {\n              calendar.value(value);\n            }\n          },\n          _click: function (e) {\n            if (e.currentTarget.className.indexOf(SELECTED) !== -1) {\n              this.calendar.trigger(\"change\");\n              this.close();\n            }\n          },\n          _option: function (option, value) {\n            var that = this;\n            var calendar = that.calendar;\n            that.options[option] = value;\n\n            if (calendar) {\n              calendar[option](value);\n            }\n          }\n        };\n        DateView.normalize = normalize;\n        kendo.DateView = DateView;\n        var DatePicker = Widget.extend({\n          init: function (element, options) {\n            var that = this,\n                initialValue,\n                disabled,\n                div;\n            Widget.fn.init.call(that, element, options);\n            element = that.element;\n            options = that.options;\n            options.disableDates = kendo.calendar.disabled(options.disableDates);\n            options.min = parse(element.attr(\"min\")) || parse(options.min);\n            options.max = parse(element.attr(\"max\")) || parse(options.max);\n            normalize(options);\n            that._initialOptions = extend({}, options);\n\n            that._wrapper();\n\n            that.dateView = new DateView(extend({}, options, {\n              id: element.attr(ID),\n              anchor: that.wrapper,\n              change: function () {\n                // calendar is the current scope\n                that._change(this.value());\n\n                that.close();\n              },\n              close: function (e) {\n                if (that.trigger(CLOSE)) {\n                  e.preventDefault();\n                } else {\n                  element.attr(ARIA_EXPANDED, false);\n                  div.attr(ARIA_HIDDEN, true);\n                  setTimeout(function () {\n                    element.removeAttr(\"aria-activedescendant\");\n                  });\n                }\n              },\n              open: function (e) {\n                var options = that.options,\n                    date;\n\n                if (that.trigger(OPEN)) {\n                  e.preventDefault();\n                } else {\n                  if (that.element.val() !== that._oldText) {\n                    date = parse(element.val(), options.parseFormats, options.culture);\n                    that.dateView[date ? \"current\" : \"value\"](date);\n                  }\n\n                  element.attr(ARIA_EXPANDED, true);\n                  div.attr(ARIA_HIDDEN, false);\n\n                  that._updateARIA(date);\n                }\n              }\n            }));\n            div = that.dateView.div;\n\n            that._icon();\n\n            try {\n              element[0].setAttribute(\"type\", \"text\");\n            } catch (e) {\n              element[0].type = \"text\";\n            }\n\n            element.addClass(\"k-input-inner\").attr({\n              role: \"combobox\",\n              \"aria-expanded\": false,\n              \"aria-haspopup\": \"grid\",\n              \"aria-owns\": that.dateView._dateViewID,\n              \"autocomplete\": \"off\"\n            });\n\n            that._reset();\n\n            that._template();\n\n            disabled = element.is(\"[disabled]\") || $(that.element).parents(\"fieldset\").is(':disabled');\n\n            if (disabled) {\n              that.enable(false);\n            } else {\n              that.readonly(element.is(\"[readonly]\"));\n            }\n\n            initialValue = parse(options.value || that.element.val(), options.parseFormats, options.culture);\n\n            that._createDateInput(options);\n\n            that._old = that._update(initialValue || that.element.val());\n            that._oldText = element.val();\n\n            that._applyCssClasses();\n\n            kendo.notify(that);\n          },\n          events: [OPEN, CLOSE, CHANGE],\n          options: {\n            name: \"DatePicker\",\n            value: null,\n            footer: \"\",\n            format: \"\",\n            culture: \"\",\n            parseFormats: [],\n            min: new Date(1900, 0, 1),\n            max: new Date(2099, 11, 31),\n            start: MONTH,\n            depth: MONTH,\n            animation: {},\n            month: {},\n            dates: [],\n            disableDates: null,\n            ARIATemplate: 'Current focused #=data.valueType# is #=data.text#',\n            dateInput: false,\n            weekNumber: false,\n            messages: {\n              weekColumnHeader: \"\"\n            },\n            componentType: \"classic\",\n            size: \"medium\",\n            fillMode: \"solid\",\n            rounded: \"medium\"\n          },\n          setOptions: function (options) {\n            var that = this;\n            var value = that._value;\n            Widget.fn.setOptions.call(that, options);\n            options = that.options;\n            options.min = parse(options.min);\n            options.max = parse(options.max);\n            normalize(options);\n\n            that._dateIcon.off(ns);\n\n            that._dateIcon.remove();\n\n            that.dateView.setOptions(options);\n\n            that._icon();\n\n            that._editable(options);\n\n            that._createDateInput(options);\n\n            if (!that._dateInput) {\n              that.element.val(kendo.toString(value, options.format, options.culture));\n            }\n\n            if (value) {\n              that._updateARIA(value);\n            }\n          },\n          _editable: function (options) {\n            var that = this,\n                icon = that._dateIcon.off(ns),\n                element = that.element.off(ns),\n                wrapper = that.wrapper.off(ns),\n                readonly = options.readonly,\n                disable = options.disable;\n\n            if (!readonly && !disable) {\n              wrapper.removeClass(STATEDISABLED).on(HOVEREVENTS, that._toggleHover);\n\n              if (element && element.length) {\n                element[0].removeAttribute(DISABLED);\n                element[0].removeAttribute(READONLY);\n              }\n\n              element.attr(ARIA_DISABLED, false).attr(ARIA_READONLY, false).on(\"keydown\" + ns, that._keydown.bind(that)).on(\"focusout\" + ns, that._blur.bind(that)).on(\"focus\" + ns, function () {\n                that.wrapper.addClass(FOCUSED);\n              });\n              icon.on(UP, that._click.bind(that)).on(MOUSEDOWN, preventDefault);\n            } else {\n              wrapper.addClass(disable ? STATEDISABLED : \"\").removeClass(disable ? \"\" : STATEDISABLED);\n              element.attr(DISABLED, disable).attr(READONLY, readonly).attr(ARIA_DISABLED, disable).attr(ARIA_READONLY, readonly);\n            }\n          },\n          readonly: function (readonly) {\n            this._editable({\n              readonly: readonly === undefined ? true : readonly,\n              disable: false\n            });\n\n            if (this._dateInput) {\n              this._dateInput._editable({\n                readonly: readonly === undefined ? true : readonly,\n                disable: false\n              });\n            }\n          },\n          enable: function (enable) {\n            this._editable({\n              readonly: false,\n              disable: !(enable = enable === undefined ? true : enable)\n            });\n\n            if (this._dateInput) {\n              this._dateInput._editable({\n                readonly: false,\n                disable: !(enable = enable === undefined ? true : enable)\n              });\n            }\n          },\n          destroy: function () {\n            var that = this;\n            Widget.fn.destroy.call(that);\n            that.dateView.destroy();\n            that.element.off(ns);\n\n            that._dateIcon.off(ns);\n\n            if (that._form) {\n              that._form.off(\"reset\", that._resetHandler);\n            }\n          },\n          open: function () {\n            this.dateView.open();\n\n            this._navigateCalendar();\n          },\n          close: function () {\n            this.dateView.close();\n          },\n          min: function (value) {\n            return this._option(MIN, value);\n          },\n          max: function (value) {\n            return this._option(MAX, value);\n          },\n          value: function (value) {\n            var that = this;\n\n            if (value === undefined) {\n              return that._value;\n            }\n\n            that._old = that._update(value);\n\n            if (that._old === null) {\n              if (that._dateInput) {\n                that._dateInput.value(that._old);\n              } else {\n                that.element.val(\"\");\n              }\n            }\n\n            that._oldText = that.element.val();\n          },\n          _toggleHover: function (e) {\n            $(e.currentTarget).toggleClass(HOVER, e.type === \"mouseenter\");\n          },\n          _blur: function () {\n            var that = this,\n                value = that.element.val();\n            that.close();\n\n            if (value !== that._oldText) {\n              that._change(value);\n\n              if (!value) {\n                that.dateView.current(kendo.calendar.getToday());\n              }\n            }\n\n            that.wrapper.removeClass(FOCUSED);\n          },\n          _click: function (e) {\n            var that = this;\n            that.dateView.toggle();\n\n            that._navigateCalendar();\n\n            that._focusElement(e.type);\n          },\n          _focusElement: function (eventType) {\n            var element = this.element;\n\n            if ((!support.touch || support.mouseAndTouchPresent && !(eventType || \"\").match(/touch/i)) && element[0] !== activeElement()) {\n              element.trigger(\"focus\");\n            }\n          },\n          _change: function (value) {\n            var that = this,\n                oldValue = that.element.val(),\n                dateChanged;\n            value = that._update(value);\n            dateChanged = !kendo.calendar.isEqualDate(that._old, value);\n            var valueUpdated = dateChanged && !that._typing;\n            var textFormatted = oldValue !== that.element.val();\n\n            if (valueUpdated || textFormatted) {\n              that.element.trigger(CHANGE);\n            }\n\n            if (dateChanged) {\n              that._old = value;\n              that._oldText = that.element.val();\n              that.trigger(CHANGE);\n            }\n\n            that._typing = false;\n          },\n          _keydown: function (e) {\n            var that = this,\n                dateView = that.dateView,\n                value = that.element.val(),\n                handled = false;\n\n            if (!dateView.popup.visible() && e.keyCode == keys.ENTER && value !== that._oldText) {\n              that._change(value);\n            } else {\n              handled = dateView.move(e);\n\n              that._updateARIA(dateView._current);\n\n              if (!handled) {\n                that._typing = true;\n              } else if (that._dateInput && e.stopImmediatePropagation) {\n                e.stopImmediatePropagation();\n              }\n            }\n          },\n          _icon: function () {\n            var that = this,\n                element = that.element,\n                options = that.options,\n                icon;\n            icon = element.next(\"button.k-input-button\");\n\n            if (!icon[0]) {\n              icon = $(html.renderButton('<button aria-label=\"select\" tabindex=\"-1\" class=\"k-input-button k-button k-icon-button\"></button>', {\n                icon: \"calendar\",\n                size: options.size,\n                fillMode: options.fillMode,\n                shape: null,\n                rounded: null\n              })).insertAfter(element);\n            }\n\n            that._dateIcon = icon.attr({\n              \"role\": \"button\",\n              \"aria-controls\": that.dateView._dateViewID\n            });\n          },\n          _navigateCalendar: function () {\n            var that = this;\n\n            if (!!that.dateView.calendar) {\n              that.dateView.calendar.unbind(NAVIGATE).bind(NAVIGATE, function () {\n                setTimeout(function () {\n                  that.element.attr(ARIA_ACTIVEDESCENDANT, that.dateView.calendar._table.attr(ARIA_ACTIVEDESCENDANT));\n                });\n              });\n            }\n          },\n          _option: function (option, value) {\n            var that = this,\n                options = that.options;\n\n            if (value === undefined) {\n              return options[option];\n            }\n\n            value = parse(value, options.parseFormats, options.culture);\n\n            if (!value) {\n              return;\n            }\n\n            options[option] = new DATE(+value);\n            that.dateView[option](value);\n          },\n          _update: function (value) {\n            var that = this,\n                options = that.options,\n                min = options.min,\n                max = options.max,\n                current = that._value,\n                date = parse(value, options.parseFormats, options.culture),\n                isSameType = date === null && current === null || date instanceof Date && current instanceof Date,\n                formattedValue;\n\n            if (options.disableDates(date)) {\n              date = null;\n\n              if (!that._old && !that.element.val()) {\n                value = null;\n              }\n            }\n\n            if (+date === +current && isSameType) {\n              formattedValue = kendo.toString(date, options.format, options.culture);\n\n              if (formattedValue !== value && !(that._dateInput && !date)) {\n                that.element.val(date === null ? value : formattedValue);\n              }\n\n              return date;\n            }\n\n            if (date !== null && isEqualDatePart(date, min)) {\n              date = restrictValue(date, min, max);\n            } else if (!isInRange(date, min, max)) {\n              date = null;\n            }\n\n            that._value = date;\n            that.dateView.value(date);\n\n            if (that._dateInput && date) {\n              that._dateInput.value(date || value);\n            } else {\n              that.element.val(kendo.toString(date || value, options.format, options.culture));\n            }\n\n            that._updateARIA(date);\n\n            return date;\n          },\n          _wrapper: function () {\n            var that = this,\n                element = that.element,\n                wrapper;\n            wrapper = element.parents(\".k-datepicker\");\n\n            if (!wrapper[0]) {\n              wrapper = element.wrap(SPAN).parent();\n            }\n\n            wrapper[0].style.cssText = element[0].style.cssText;\n            element.css({\n              height: element[0].style.height\n            });\n            that.wrapper = wrapper.addClass(\"k-datepicker k-input\").addClass(element[0].className).removeClass('input-validation-error');\n          },\n          _reset: function () {\n            var that = this,\n                element = that.element,\n                formId = element.attr(\"form\"),\n                options = that.options,\n                disabledDate = options.disableDates,\n                parseFormats = options.parseFormats.length ? options.parseFormats : null,\n                optionsValue = that._initialOptions.value,\n                form = formId ? $(\"#\" + formId) : element.closest(\"form\"),\n                initialValue = element[0].defaultValue;\n\n            if (optionsValue && disabledDate && disabledDate(optionsValue)) {\n              optionsValue = null;\n            }\n\n            if ((!initialValue || !kendo.parseDate(initialValue, parseFormats, options.culture)) && optionsValue) {\n              element.attr(\"value\", kendo.toString(optionsValue, options.format, options.culture));\n            }\n\n            if (form[0]) {\n              that._resetHandler = function () {\n                that.value(optionsValue || element[0].defaultValue);\n                that.max(that._initialOptions.max);\n                that.min(that._initialOptions.min);\n              };\n\n              that._form = form.on(\"reset\", that._resetHandler);\n            }\n          },\n          _template: function () {\n            this._ariaTemplate = template(this.options.ARIATemplate).bind(this);\n          },\n          _createDateInput: function (options) {\n            if (this._dateInput) {\n              this._dateInput.destroy();\n\n              this._dateInput = null;\n            }\n\n            if (options.dateInput) {\n              this._dateInput = new ui.DateInput(this.element, {\n                culture: options.culture,\n                format: options.format,\n                size: options.size,\n                fillMode: options.fillMode,\n                rounded: options.rounded,\n                min: options.min,\n                max: options.max\n              });\n            }\n          },\n          _updateARIA: function (date) {\n            var that = this;\n            var calendar = that.dateView.calendar;\n\n            if (that.element && that.element.length) {\n              that.element[0].removeAttribute(ARIA_ACTIVEDESCENDANT);\n            }\n\n            if (calendar) {\n              that.element.attr(ARIA_ACTIVEDESCENDANT, calendar._updateAria(that._ariaTemplate, date));\n            }\n          }\n        });\n        kendo.cssProperties.registerPrefix(\"DatePicker\", \"k-input-\");\n        kendo.cssProperties.registerValues(\"DatePicker\", [{\n          prop: \"rounded\",\n          values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n        }]);\n        ui.plugin(DatePicker);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1193:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.calendar\");\n    /***/\n  },\n\n  /***/\n  1194:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.dateinput\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}