{"ast":null,"code":"import { __decorate, __metadata } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { Directive, Input, EventEmitter, ChangeDetectorRef, Component, Output, ViewChild, KeyValueDiffers, Injectable, NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport * as i1 from '@mobilize/angularclient';\nimport { WMConstants, WebMapService, AngularCommand, WebMapModule, SendMessage } from '@mobilize/angularclient';\nimport { WMLogger } from '@mobilize/logging';\nimport { ExceptionHandlerClass, ErrorCodes, Constants, registerModel } from '@mobilize/webmap-core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i2$1 from 'ngx-toastr';\nimport { ToastContainerDirective, ToastrService } from 'ngx-toastr';\nimport { Subject } from 'rxjs';\nimport { By, BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport 'reflect-metadata';\n/***********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\nfunction FormsContainerComponent_ng_template_0_Template(rf, ctx) {}\n\nfunction LoadingComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(1, \"svg\", 5);\n    i0.ɵɵelement(2, \"circle\", 6);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"hidden\", ctx_r1.hide);\n  }\n}\n\nfunction LoadingComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7)(1, \"div\", 8);\n    i0.ɵɵelement(2, \"div\")(3, \"div\")(4, \"div\")(5, \"div\")(6, \"div\")(7, \"div\")(8, \"div\")(9, \"div\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"hidden\", ctx_r2.hide);\n  }\n}\n\nlet ContainerDirective = /*#__PURE__*/(() => {\n  class ContainerDirective {\n    /* c8 ignore start */\n    constructor(viewContainerRef) {\n      this.viewContainerRef = viewContainerRef;\n    }\n\n  }\n\n  ContainerDirective.ɵfac = function ContainerDirective_Factory(t) {\n    return new (t || ContainerDirective)(i0.ɵɵdirectiveInject(i0.ViewContainerRef));\n  };\n\n  ContainerDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: ContainerDirective,\n    selectors: [[\"\", \"wm-content\", \"\"]],\n    inputs: {\n      hostComponent: \"hostComponent\"\n    }\n  });\n  return ContainerDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/***********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n\nlet TypeResolver = /*#__PURE__*/(() => {\n  class TypeResolver {\n    static registrateType(key, type) {\n      TypeResolver.typesDictionary[key] = type;\n    }\n\n    static getType(key) {\n      return TypeResolver.typesDictionary[key];\n    }\n\n  }\n\n  TypeResolver.typesDictionary = {};\n  /***********************************************************************\r\n   * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n   *\r\n   * This file is part of the Mobilize Frameworks, which is\r\n   * proprietary and confidential.\r\n   *\r\n   * NOTICE:  All information contained herein is, and remains\r\n   * the property of Mobilize.Net Corporation.\r\n   * The intellectual and technical concepts contained herein are\r\n   * proprietary to Mobilize.Net Corporation and may be covered\r\n   * by U.S. Patents, and are protected by trade secret or copyright law.\r\n   * Dissemination of this information or reproduction of this material\r\n   * is strictly forbidden unless prior written permission is obtained\r\n   * from Mobilize.Net Corporation.\r\n   *\r\n   * This file is subject to the terms and conditions defined in\r\n   * file 'LICENSE.txt', which is part of this source code package.\r\n   ***********************************************************************/\n\n  return TypeResolver;\n})();\n\nclass EventData {\n  /**\r\n   * Creates a new EventData object that keeps\r\n   * information about the executed event and\r\n   * the sender component\r\n   * @param event The original javascript event object\r\n   * @param Id The sender component id\r\n   * @param mapperId The sender component mapperId\r\n   */\n  constructor(event, Id, mapperId) {\n    this.event = event;\n    this.Id = Id;\n    this.mapperId = mapperId;\n  }\n\n}\n\nlet FormsContainerComponent = /*#__PURE__*/(() => {\n  let FormsContainerComponent = class FormsContainerComponent {\n    constructor(changeDetector, webmapService) {\n      this.changeDetector = changeDetector;\n      this.webmapService = webmapService;\n      this.Loaded = new EventEmitter();\n      this.openedComponents = {};\n      this.events = [];\n    }\n    /* c8 ignore start */\n\n\n    ngOnInit() {\n      this.events.push(this.webmapService.core.getEvent().subscribe('navigateToView', url => {\n        this.navigateToForm(url);\n      }));\n      this.events.push(this.webmapService.core.getEvent().subscribe('disposeView', url => {\n        this.disposeComponent(url);\n      }));\n      this.events.push(this.webmapService.core.getEvent().subscribe('detectChanges', url => {\n        this.detectChanges();\n      }));\n      this.events.push(this.webmapService.core.getEvent().subscribe('bringToFront', url => {\n        this.bringToFront(url);\n      }));\n      this.events.push(this.webmapService.core.getEvent().subscribe('setTopView', url => {\n        this.setTopView(url);\n      }));\n      this.events.push(this.webmapService.core.getEvent().subscribe('navigateSystemDialog', data => {\n        this.navigateToSystemDialog(data);\n      }));\n      this.events.push(this.webmapService.core.getEvent().subscribe('MessageBox', data => {\n        this.showMessageBox(data);\n      }));\n      this.events.push(this.webmapService.core.getEvent().subscribe('FileExplorer', data => {\n        this.showFileExplorer(data);\n      }));\n    }\n    /* c8 ignore stop */\n\n\n    ngAfterViewInit() {\n      // Emit the loaded event to notify when FormsContainer component is fully loaded\n      this.Loaded.emit(new EventData({}, this.parentId));\n    }\n    /**\r\n     * Get the id of an input model\r\n     * @param model the current model object\r\n     */\n\n\n    getId(model) {\n      return this.webmapService.config.webMapVersion === WMConstants.version4 ? model.UniqueID : model.id;\n    }\n    /**\r\n     * Load a new component inside the formsContainerComponent\r\n     * @param url the url object of the component.\r\n     */\n\n    /* c8 ignore start */\n\n\n    navigateToForm(id) {\n      this.webmapService.getModel(id).then(model => {\n        if (!this.shouldOpen(model)) {\n          return;\n        }\n\n        const type = model.mapperId !== undefined ? model.mapperId : model.Name;\n        const componentType = TypeResolver.getType(type);\n\n        if (!componentType) {\n          WMLogger.instance().error(`There is not a type registered with the name ${type} in the TypeResolver.\n          Please check that the name is well written or the dataTransfer is the same in the backend`);\n          return;\n        }\n\n        if (this.webmapService.config.wmSourceVersion === WMConstants.sourceVersionWin && model.ParentInternal) {\n          return;\n        }\n\n        this.loadComponent(componentType, model);\n        this.detectChanges();\n\n        if (model.closeByTime) {\n          setTimeout(() => {\n            this.disposeComponent(id);\n            this.webmapService.core.viewManager.models.deleteCascade(id);\n          }, model.closeByTime);\n        }\n      });\n    }\n    /* c8 ignore stop */\n\n    /**\r\n     * Validates if the window should be open in the respective parent window.\r\n     * @param mod The window model.\r\n     */\n\n\n    shouldOpen(mod) {\n      if (mod) {\n        const parent = this.parent(mod);\n        return parent && this.getId(parent) === this.parentId || !parent && this.parentId === undefined;\n      }\n\n      return false;\n    }\n    /**\r\n     * Parents forms container component, determines if is Winforms or PB\r\n     * @param mod Model\r\n     * @returns parent determines if is Winforms(Parent) or PB(ParentWindow)\r\n     */\n\n\n    parent(mod) {\n      if (this.webmapService.config) {\n        switch (this.webmapService.config.wmSourceVersion) {\n          case WMConstants.sourceVersionPB:\n            return mod.ParentWindow;\n\n          case WMConstants.sourceVersionWebForms:\n            return mod.Master;\n\n          default:\n            return mod.MdiParentInternal || mod.ParentInternal;\n        }\n      }\n\n      return mod.MdiParentInternal || mod.ParentInternal;\n    }\n    /**\r\n     * Load the messageBox component inside the formsContainerComponent\r\n     * @param params params to show message box.\r\n     */\n\n    /* c8 ignore next 3 */\n\n\n    showMessageBox(params) {\n      this.showDialog(params, 'msgBx');\n    }\n    /**\r\n     * Load the messageBox component inside the formsContainerComponent\r\n     * @param params params to show file explorer.\r\n     */\n\n    /* c8 ignore next 3 */\n\n\n    showFileExplorer(params) {\n      this.showDialog(params, 'FlEpr');\n    }\n    /**\r\n     * Opens a dialog according with type specified.\r\n     * @param params params to open dialog.\r\n     * @param type type of dialog to be open.\r\n     */\n\n    /* c8 ignore next 6 */\n\n\n    showDialog(params, type) {\n      const componentType = TypeResolver.getType(type);\n\n      if (componentType && !this.parentId) {\n        this.loadComponent(componentType, params);\n      }\n    }\n    /**\r\n     * Handler for the navigateSystemDialog event\r\n     * display the selected system dialog.\r\n     * @param data The current system dialog information.\r\n     */\n\n    /* c8 ignore next 7 */\n\n\n    navigateToSystemDialog(data) {\n      const componentToLoad = TypeResolver.getType(data.dialog);\n\n      if (componentToLoad && !this.parentId) {\n        const componentRef = this.loadComponent(componentToLoad, data.dialog);\n        componentRef.instance.model = data.model.arguments;\n      }\n    }\n    /**\r\n     * Creates a new component instance inside the formscontainer component\r\n     * @param componentToLoad The new component to load\r\n     * @param name The name of the component.\r\n     */\n\n    /* c8 ignore start */\n\n\n    loadComponent(componentToLoad, model) {\n      const componentRef = this.componentContainer.viewContainerRef.createComponent(componentToLoad);\n      componentRef.instance.model = model;\n\n      if (componentRef.instance.afterLoadComponent) {\n        componentRef.instance.afterLoadComponent();\n      }\n\n      const id = this.getId(model);\n      this.openedComponents[id] = componentRef;\n\n      if (this.webmapService?.core?.removePendingView) {\n        this.webmapService.core.removePendingView(id);\n      }\n\n      return componentRef;\n    }\n    /* c8 ignore stop */\n\n    /**\r\n     *  Removes a component inside the formsContainerComponent\r\n     * @param url the url object of the component.\r\n     */\n\n    /* c8 ignore start */\n\n\n    disposeComponent(id) {\n      if (id && this.openedComponents[id] && this.openedComponents[id].hostView) {\n        const viewContainerRef = this.componentContainer.viewContainerRef;\n        const vcrIndex = viewContainerRef.indexOf(this.openedComponents[id].hostView);\n\n        try {\n          viewContainerRef.remove(vcrIndex);\n        } catch (e) {\n          // Avoid triggering synchronization error while deleting the component.\n          WMLogger.instance().debug(e);\n        }\n\n        delete this.openedComponents[id];\n      } else {\n        WMLogger.instance().debug(`The view ${id} to be removed was not found:\n        ${this.openedComponents[id] ? 'HostView property undefined.' : ' The view is not present in the openedComponents collection.'}`);\n      }\n    }\n    /* c8 ignore stop */\n\n    /**\r\n     * Modifies the SetTopView value to set the\r\n     * corresponding for as the top element\r\n     * @param id  The current view id\r\n     */\n\n\n    setTopView(id) {\n      /* c8 ignore else */\n      if (id && this.openedComponents[id]) {\n        this.openedComponents[id].instance.model.SetTopView = true;\n      }\n    }\n    /**\r\n     * Performs a change detection manually in\r\n     * the components tree.\r\n     */\n\n\n    detectChanges() {\n      /* c8 ignore else */\n      if (!this.changeDetector.destroyed) {\n        this.changeDetector.detectChanges();\n      }\n    }\n    /**\r\n     *  Brings te current form focused unless there\r\n     *  is a dialog displayed.\r\n     * @param url the url object of the component.\r\n     */\n\n    /* c8 ignore next 5 */\n\n\n    bringToFront(url) {\n      if (url.length === 2 && url[1]) {\n        this.openedComponents[url[1]].bringToFront();\n      }\n    }\n    /**\r\n     * Executes on component destroy to unsubscribe the events\r\n     */\n\n\n    ngOnDestroy() {\n      this.events.forEach(evnt => {\n        this.webmapService.core.getEvent().unSubscribe(evnt);\n      });\n    }\n\n  };\n\n  FormsContainerComponent.ɵfac = function FormsContainerComponent_Factory(t) {\n    return new (t || FormsContainerComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.WebMapService));\n  };\n\n  FormsContainerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: FormsContainerComponent,\n    selectors: [[\"wm-formscontainer\"]],\n    viewQuery: function FormsContainerComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(ContainerDirective, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.componentContainer = _t.first);\n      }\n    },\n    inputs: {\n      parentId: \"parentId\"\n    },\n    outputs: {\n      Loaded: \"Loaded\"\n    },\n    decls: 1,\n    vars: 0,\n    consts: [[\"wm-content\", \"\"]],\n    template: function FormsContainerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, FormsContainerComponent_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n      }\n    },\n    directives: [ContainerDirective],\n    styles: [\"\"]\n  });\n  FormsContainerComponent = __decorate([ExceptionHandlerClass(ErrorCodes.BaseComponents), __metadata(\"design:paramtypes\", [ChangeDetectorRef, WebMapService])], FormsContainerComponent);\n  return FormsContainerComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet LoadingComponent = /*#__PURE__*/(() => {\n  let LoadingComponent = class LoadingComponent {\n    /* c8 ignore start */\n    constructor(service) {\n      this.service = service;\n      /* c8 ignore stop */\n\n      /**\r\n       * Miliseconds to wait before showing the loading modal\r\n       */\n\n      this.timing = 800;\n      this.hide = false;\n      this.isIEOrEdge = /msie\\s|trident\\/|edge\\//i.test(window.navigator.userAgent);\n      this.manualTrigger = false;\n      /**\r\n       * Pending response requests of loading component\r\n       * An object that holds a pointer of every setTimeout\r\n       * function that should be activated by any performed request that\r\n       * want to start the busy-loader component\r\n       */\n\n      this.pendingResponseRequests = {};\n      /**\r\n       * Still waiting requests of loading component\r\n       * Holds the request wich the triggerd have been fired but the\r\n       * loading component was already active should be verified every time\r\n       * a request receive a response and want to hide the loading component.\r\n       * Also if a request receives its response and it wasn't processed should be removed from\r\n       * this object.\r\n       */\n\n      this.stillWaitingRequests = {};\n      this.hide = false;\n      this.serverInstance = this.service.core.inject.resolve(Constants.Server);\n      this.service.core.getEvent().subscribe('TriggerLoading', show => {\n        this.manualTrigger = show;\n        this.hide = !show;\n      });\n      this.service.core.getEvent().subscribe('DisplayLoading', args => {\n        if (!this.manualTrigger) {\n          this.handleDisplayLoadingEvent(args);\n        }\n      });\n    }\n    /**\r\n     * Handles display loading event\r\n     * Should generate a trigger function for every request in order\r\n     * to wait an amount of time before showing the component. If the response\r\n     * is received before the trigger was fired then the component should be displayed.\r\n     * @param arg {show, id} an object containg the request id and a boolean value indicating if the loading should be\r\n     * displayed\r\n     */\n\n\n    handleDisplayLoadingEvent(arg) {\n      if (arg.show) {\n        this.createTimerFunctionForRequest(arg.id);\n      } else {\n        this.closeLoadingComponent(arg.id);\n      }\n    }\n    /**\r\n     * Closes loading component\r\n     * @param id the id of the request that wants to hide the loading component\r\n     */\n\n\n    closeLoadingComponent(id) {\n      if (this.stillWaitingRequests[id]) {\n        delete this.stillWaitingRequests[id];\n      } else {\n        this.deleteFromPendingResponseStructure(id);\n      }\n\n      this.verifyIfContinueLoading();\n    }\n    /**\r\n     * Deletes from pending response structure\r\n     * Removes a previous entry to the structure of pendingResponsesRequest\r\n     * @param id The request id\r\n     */\n\n\n    deleteFromPendingResponseStructure(id) {\n      if (this.pendingResponseRequests[id]) {\n        clearTimeout(this.pendingResponseRequests[id].shift());\n\n        if (this.pendingResponseRequests[id].length === 0) {\n          delete this.pendingResponseRequests[id];\n        }\n      }\n    }\n    /**\r\n     * Verifys if continue loading\r\n     * Review the list of request that were triggered while the loading was on\r\n     * if exists any the loading should be keep displayed on the screen\r\n     */\n\n\n    verifyIfContinueLoading() {\n      if (Object.keys(this.stillWaitingRequests).length === 0) {\n        this.hide = true;\n      }\n    }\n    /**\r\n     * Creates timer function for request\r\n     * @param id the id of the request that generates the\r\n     * trigger function for the loading component\r\n     */\n\n\n    createTimerFunctionForRequest(id) {\n      if (this.pendingResponseRequests[id]) {\n        this.pendingResponseRequests[id].push(this.createTimerForFunction(id));\n      } else {\n        this.pendingResponseRequests[id] = [this.createTimerForFunction(id)];\n      }\n    }\n    /**\r\n     * Creates timer for function\r\n     * @param id the id of the request\r\n     * @returns timer for function\r\n     */\n\n\n    createTimerForFunction(id) {\n      return setTimeout(() => {\n        return this.displayComponent(id, true);\n      }, this.timing);\n    }\n    /**\r\n     * Hides or Shows the loading component\r\n     * @param show the value that indicates visible status\r\n     */\n\n\n    displayComponent(id, show) {\n      if (!this.hide) {\n        // the component is already displayed\n        // then we need to store this as a stillWaitingRequest\n        // and remove it from the pending response object\n        this.stillWaitingRequests[id] = true;\n        this.deleteFromPendingResponseStructure(id);\n      } else {\n        this.hide = !show;\n      }\n    }\n\n  };\n\n  LoadingComponent.ɵfac = function LoadingComponent_Factory(t) {\n    return new (t || LoadingComponent)(i0.ɵɵdirectiveInject(i1.WebMapService));\n  };\n\n  LoadingComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: LoadingComponent,\n    selectors: [[\"wm-loading\"]],\n    inputs: {\n      timing: \"timing\",\n      hide: \"hide\"\n    },\n    decls: 4,\n    vars: 3,\n    consts: [[\"id\", \"blockUI\", 1, \"modal-overlay\", 3, \"hidden\"], [\"blockUI\", \"\"], [\"id\", \"loading\", 3, \"hidden\", 4, \"ngIf\"], [\"class\", \"iespinner\", 3, \"hidden\", 4, \"ngIf\"], [\"id\", \"loading\", 3, \"hidden\"], [\"width\", \"65px\", \"height\", \"65px\", \"viewBox\", \"0 0 66 66\", \"xmlns\", \"http://www.w3.org/2000/svg\", 1, \"spinner\"], [\"fill\", \"none\", \"stroke-width\", \"6\", \"stroke-linecap\", \"round\", \"cx\", \"33\", \"cy\", \"33\", \"r\", \"30\", 1, \"path\"], [1, \"iespinner\", 3, \"hidden\"], [1, \"lds-roller\"]],\n    template: function LoadingComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0, 1);\n        i0.ɵɵtemplate(2, LoadingComponent_div_2_Template, 3, 1, \"div\", 2);\n        i0.ɵɵtemplate(3, LoadingComponent_div_3_Template, 10, 1, \"div\", 3);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"hidden\", ctx.hide);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isIEOrEdge);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isIEOrEdge);\n      }\n    },\n    directives: [i2.NgIf],\n    styles: [\".modal-overlay[_ngcontent-%COMP%]{width:100%;height:100%;position:absolute;overflow:hidden;top:0;left:0;background:rgba(0,0,0,.5)!important;z-index:100000000}.spinner[_ngcontent-%COMP%]{position:absolute;top:50%;left:50%;z-index:100000001;animation:rotator 1.4s linear infinite}@keyframes rotator{0%{transform:rotate(0)}to{transform:rotate(270deg)}}.path[_ngcontent-%COMP%]{stroke-dasharray:187;stroke-dashoffset:0;transform-origin:center;animation:dash 1.4s ease-in-out infinite,colors 5.6s ease-in-out infinite}.loading[_ngcontent-%COMP%]{position:absolute;top:64%;left:45%;font-family:\\\"Impact, fantasy\\\";font-size:2em;animation:textcolors 5.6s ease-in-out infinite}@keyframes textcolors{0%{color:#4285f4}25%{color:#de3e35}50%{color:#f7c223}75%{color:#1b9a59}to{color:#4285f4}}@keyframes colors{0%{stroke:#4285f4}25%{stroke:#de3e35}50%{stroke:#f7c223}75%{stroke:#1b9a59}to{stroke:#4285f4}}@keyframes dash{0%{stroke-dashoffset:187}50%{stroke-dashoffset:46.75;transform:rotate(135deg)}to{stroke-dashoffset:187;transform:rotate(450deg)}}.lds-roller[_ngcontent-%COMP%]{display:inline-block;position:absolute;width:64px;height:64px;top:50%;left:50%;z-index:100000001}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]{animation:lds-roller 1.2s cubic-bezier(.5,0,.5,1) infinite;transform-origin:32px 32px}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:after{content:\\\" \\\";display:block;position:absolute;width:6px;height:6px;border-radius:50%;background:#fff;margin:-3px 0 0 -3px}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(1){animation-delay:-36ms}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(1):after{top:50px;left:50px}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(2){animation-delay:-72ms}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(2):after{top:54px;left:45px}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(3){animation-delay:-.108s}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(3):after{top:57px;left:39px}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(4){animation-delay:-.144s}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(4):after{top:58px;left:32px}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(5){animation-delay:-.18s}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(5):after{top:57px;left:25px}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(6){animation-delay:-.216s}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(6):after{top:54px;left:19px}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(7){animation-delay:-.252s}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(7):after{top:50px;left:14px}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(8){animation-delay:-.288s}.lds-roller[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:nth-child(8):after{top:45px;left:10px}@keyframes lds-roller{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\"]\n  });\n  LoadingComponent = __decorate([ExceptionHandlerClass(ErrorCodes.BaseComponents), __metadata(\"design:paramtypes\", [WebMapService])], LoadingComponent);\n  return LoadingComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ContainerComponent = /*#__PURE__*/(() => {\n  let ContainerComponent = class ContainerComponent {\n    /* c8 ignore start */\n    constructor(differs, webmapService) {\n      this.differs = differs;\n      this.webmapService = webmapService;\n      /* c8 ignore stop */\n\n      this.RemoveControl = new EventEmitter();\n      /**\r\n       * Keeps a reference to the dynamically\r\n       * opened components.\r\n       */\n\n      this.openedComponents = {};\n    }\n\n    get controls() {\n      return this.controlsCollection;\n    }\n\n    set controls(value) {\n      this.controlsCollection = value;\n      /* c8 ignore else */\n\n      if (!this.differences && this.differs && value) {\n        this.differences = this.differs.find(this.controlsCollection).create();\n      }\n    }\n    /**\r\n     * This is part of Angular lifecycle hook.\r\n     * Review the changes in the control's collection and perform the\r\n     * instantiation of the new control's\r\n     */\n\n\n    ngDoCheck() {\n      /* c8 ignore else */\n      if (this.differences) {\n        const changes = this.differences.diff(this.controlsCollection);\n        /* c8 ignore else */\n\n        if (changes) {\n          this.applyChanges(changes);\n        }\n      }\n    }\n    /**\r\n       * This method apply changes when any of the following actions in the model is triggered:\r\n         forEachRemovedItem: Something has been removed.\r\n         forEachAddedItem: Something has been added.\r\n         forEachChangedItem: Something has been changed.\r\n       * @param changes Value with any change in the model\r\n       */\n\n\n    applyChanges(changes) {\n      changes.forEachRemovedItem(record => this.updateContainer(record.key, record.currentValue));\n      changes.forEachAddedItem(record => this.updateContainer(record.key, record.currentValue));\n      changes.forEachChangedItem(record => this.updateContainer(record.key, record.currentValue));\n    }\n    /**\r\n     * Creates a new component instance inside the formscontainer component\r\n     * @param componentToLoad The new component to load\r\n     * @param id The component uniqueId.\r\n     */\n\n\n    loadComponent(id, componentToLoad, model) {\n      const componentRef = this.componentContainer.viewContainerRef.createComponent(componentToLoad);\n      componentRef.instance.model = model;\n      this.openedComponents[id] = componentRef;\n      this.assignIdToWebmapSelector(componentRef, model);\n      componentRef.instance.ref.detectChanges();\n      componentRef.changeDetectorRef.detectChanges();\n    }\n    /**\r\n     * Assign id property to the selectors of dynamic components\r\n     * @param componentRef Component instance\r\n     * @param model component model structure.\r\n     */\n\n\n    assignIdToWebmapSelector(componentRef, model) {\n      if (componentRef.instance.el && componentRef.instance.el.nativeElement && model.Name) {\n        componentRef.instance.el.nativeElement.id = model.Name;\n        componentRef.instance.class = model.Name;\n      }\n    }\n    /**\r\n     * Adds a new component to the container Control\r\n     * @param id The control's unique identifier\r\n     */\n\n\n    addControl(id) {\n      this.webmapService.getModel(id).then(model => {\n        const webMapVersion = this.webmapService.config.webMapVersion;\n        let componentType;\n\n        if (model) {\n          componentType = webMapVersion === WMConstants.version4 ? TypeResolver.getType(model.Name) : TypeResolver.getType(model.mapperId);\n        }\n        /* c8 ignore start*/\n        else {\n          WMLogger.instance().error(`Error in container. Component with id ${id} was missing`);\n        }\n        /* c8 ignore stop */\n\n        /* c8 ignore next 3 */\n\n\n        if (componentType) {\n          this.loadComponent(id, componentType, model);\n        }\n      });\n    }\n    /**\r\n     * Adds a new control to the specified container\r\n     * @param key the control's unique id\r\n     * @param value the control's component class\r\n     */\n\n\n    updateContainer(key, value) {\n      if (value && !this.openedComponents[key]) {\n        this.addControl(key);\n      } else if (value === false) {\n        this.removeControl(key);\n      }\n    }\n    /**\r\n     * Removes the dynamically opened control\r\n     * @param id The control's id unique identifier.\r\n     */\n\n\n    removeControl(id) {\n      if (this.openedComponents[id]) {\n        this.openedComponents[id].destroy();\n        delete this.openedComponents[id];\n      } else {\n        // Remove static control\n        this.webmapService.getModel(id).then(model => {\n          /* c8 ignore else */\n          if (model) {\n            const eventData = new EventData({\n              name: model.Name\n            }, id);\n            this.RemoveControl.emit(eventData);\n          }\n        });\n      }\n    }\n\n  };\n\n  ContainerComponent.ɵfac = function ContainerComponent_Factory(t) {\n    return new (t || ContainerComponent)(i0.ɵɵdirectiveInject(i0.KeyValueDiffers), i0.ɵɵdirectiveInject(i1.WebMapService));\n  };\n\n  ContainerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ContainerComponent,\n    selectors: [[\"wm-container\"]],\n    viewQuery: function ContainerComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(ContainerDirective, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.componentContainer = _t.first);\n      }\n    },\n    inputs: {\n      controls: \"controls\"\n    },\n    outputs: {\n      RemoveControl: \"RemoveControl\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[\"wm-content\", \"\", 3, \"hostComponent\"]],\n    template: function ContainerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementContainer(0, 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"hostComponent\", ctx);\n      }\n    },\n    directives: [ContainerDirective],\n    styles: [\"\"]\n  });\n  ContainerComponent = __decorate([ExceptionHandlerClass(ErrorCodes.BaseComponents), __metadata(\"design:paramtypes\", [KeyValueDiffers, WebMapService])], ContainerComponent);\n  return ContainerComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/***********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n/**\r\n * Registrates the dataTransfer identity of the control.\r\n * @param ids Corresponds to the Control's type identifiers\r\n */\n\n\nfunction dataTransfer(ids) {\n  return function (target) {\n    ids.forEach(key => {\n      TypeResolver.registrateType(key, target);\n    });\n    return target;\n  };\n}\n\nlet AlertComponent = /*#__PURE__*/(() => {\n  let AlertComponent = class AlertComponent {\n    constructor(webmapService, cdRef, toastr) {\n      this.webmapService = webmapService;\n      this.cdRef = cdRef;\n      this.toastr = toastr;\n      this.events = [];\n      this.events.push(this.webmapService.core.getEvent().subscribe('alert', alert => {\n        /* c8 ignore next */\n        this.showAlert(alert.model);\n      }));\n    }\n\n    ngOnInit() {\n      this.toastr.overlayContainer = this.toastContainer;\n    }\n    /**\r\n     * Executes on component destroy to unsubscribe the events\r\n     */\n\n\n    ngOnDestroy() {\n      this.events.forEach(evnt => {\n        this.webmapService.core.getEvent().unSubscribe(evnt);\n      });\n    }\n    /**\r\n     * Shows alert component for [timeout] seconds\r\n     * @param model the alert model\r\n     */\n\n\n    showAlert(model) {\n      switch (model.type) {\n        case 'success':\n          this.toastr.success(model.message, model.caption, {\n            progressBar: true,\n            progressAnimation: 'decreasing',\n            timeOut: 10000\n          });\n          break;\n\n        case 'error':\n          this.toastr.error(model.message, model.caption, {\n            progressBar: true,\n            progressAnimation: 'decreasing',\n            timeOut: 10000\n          });\n          break;\n\n        default:\n          this.toastr.info(model.message, model.caption, {\n            progressBar: true,\n            progressAnimation: 'decreasing',\n            timeOut: 10000\n          });\n      }\n    }\n\n  };\n\n  AlertComponent.ɵfac = function AlertComponent_Factory(t) {\n    return new (t || AlertComponent)(i0.ɵɵdirectiveInject(i1.WebMapService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2$1.ToastrService));\n  };\n\n  AlertComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: AlertComponent,\n    selectors: [[\"wm-alert\"]],\n    viewQuery: function AlertComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(ToastContainerDirective, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.toastContainer = _t.first);\n      }\n    },\n    decls: 1,\n    vars: 0,\n    consts: [[\"id\", \"alert\", \"toastContainer\", \"\"]],\n    template: function AlertComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0);\n      }\n    },\n    styles: [\".notif[_ngcontent-%COMP%]{width:420px;height:150px;margin:40px auto;color:#fff;border-radius:4px;-ms-box-shadow:0 8px 12px #000000;-ms-box-shadow:0 8px 12px rgba(0,0,0,.3);box-shadow:0 8px 12px #000;box-shadow:0 8px 12px #0000004d;overflow:hidden;font-family:Signika Negative,Roboto,sans-serif;font-size:14px;position:absolute;bottom:0;right:35px;z-index:2147483647}.notif[_ngcontent-%COMP%]   .success[_ngcontent-%COMP%]{background:#39cccc}.notif.error[_ngcontent-%COMP%]{background:#d35757}.notif[_ngcontent-%COMP%]   .icon[_ngcontent-%COMP%]{padding:20px;font-size:56px}.notif[_ngcontent-%COMP%]   .content[_ngcontent-%COMP%], .notif[_ngcontent-%COMP%]   .actions[_ngcontent-%COMP%]{height:100%;float:left}.notif[_ngcontent-%COMP%]   .content[_ngcontent-%COMP%]{width:85%;display:flex;flex-direction:row;align-items:center}.notif[_ngcontent-%COMP%]   .caption[_ngcontent-%COMP%]{margin-bottom:.2em;font-size:2em;color:#f5f5f5}.notif[_ngcontent-%COMP%]   .message[_ngcontent-%COMP%]{color:#f5f5f5}.notif[_ngcontent-%COMP%]   .actions[_ngcontent-%COMP%]{width:15%;display:flex;flex-direction:column;background:#000000;background:rgba(0,0,0,.4)}.notif[_ngcontent-%COMP%]   .actions[_ngcontent-%COMP%] > *[_ngcontent-%COMP%]{flex-grow:1}.notif[_ngcontent-%COMP%]   .action[_ngcontent-%COMP%]{position:relative;text-align:center;text-decoration:none}.notif[_ngcontent-%COMP%]   .action[_ngcontent-%COMP%]:hover{background:#000000;background:rgba(0,0,0,.4)}.notif[_ngcontent-%COMP%]   .action[_ngcontent-%COMP%]:after{content:attr(data-tooltip);display:none;position:absolute;right:110%;top:50%;margin-top:-1em;padding:.5em 1em;text-align:center;white-space:nowrap;background:#141414;border-radius:4px}.notif[_ngcontent-%COMP%]   .action[_ngcontent-%COMP%]:hover:after{display:block}.notif[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{color:inherit}\"]\n  });\n  AlertComponent = __decorate([dataTransfer(['alert']), __metadata(\"design:paramtypes\", [WebMapService, ChangeDetectorRef, ToastrService])], AlertComponent);\n  return AlertComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/***********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n/* tslint:disable: no-invalid-this */\n\n/**\r\n * Executes an event if the event is binded (in the server) in the current instance of the component.\r\n * For example:\r\n *\r\n * ```\r\n * // The extractor function is optional\r\n * @serverEvent('ServerClick', argsExtractor, targetExtractor)\r\n * click(event: any): void {\r\n * ...\r\n * }\r\n *\r\n * argsExtractor(event, component): any[] {\r\n *     // Do somehing with the event or the component\r\n *     return [{ someKey: extractedValue }];\r\n * }\r\n *\r\n * targetExtractor(event, component): object {\r\n *     // Find the custom event target\r\n *     return myEventTarget;\r\n * }\r\n * ```\r\n * @param eventName The name of the event in the server.\r\n * @param argsExtractor Optional function that receives the DOM event and the component instance, and returns an array\r\n * with the arguments to send to the server.\r\n * @param targetExtractor Optional function that receives the DOM event and the component instance, and returns the\r\n * selected event target.\r\n */\n\n\nfunction serverEvent(eventName, argsExtractor, targetExtractor, callback, highPriority) {\n  return function (target, propertyKey, descriptor) {\n    const original = descriptor.value;\n\n    descriptor.value = function (...args) {\n      const excludedEvent = isExcludeEvents(eventName); // Trigger original method execution\n      // if original method return true, the dynamic event triggering logic is canceled\n\n      const cancelExecution = original.apply(this, args);\n      let validationSuccess = true; //Validations performed in webforms\n\n      if (this['baseValidatorService'] && this.webFormsIntercepted) {\n        this.webFormsIntercepted = false;\n        validationSuccess = this['baseValidatorService'].checkValidators(this['validationGroup']);\n      }\n\n      if (excludedEvent || cancelExecution || !validationSuccess || serverEventsEnabled()) {\n        return true;\n      } // Verify event is binded in the server\n\n\n      const component = this; // Verify server dynamic events are active\n      // Verify that the execution was not cancelled by the original function\n      // Verify that the component has the event binded\n\n      if (IsDynamicBindEvent(component, eventName)) {\n        // Detect UI Changes after user Event\n        component.detectChanges(); // Trigger event execution in the server\n\n        const domEvent = args[0];\n        const {\n          receiver,\n          serverArgs\n        } = setEventParameters(argsExtractor, domEvent, component, targetExtractor);\n        const command = new AngularCommand(receiver, propertyKey, '', eventName, receiver.id, serverArgs, highPriority);\n        SendCommand(command, component, domEvent, callback);\n      }\n\n      return false;\n    };\n  };\n}\n\nfunction setEventParameters(argsExtractor, domEvent, component, targetExtractor) {\n  const serverArgs = argsExtractor ? argsExtractor(domEvent, component) : null;\n  const receiver = targetExtractor ? targetExtractor(domEvent, component) : component;\n  return {\n    receiver,\n    serverArgs\n  };\n}\n\nfunction IsDynamicBindEvent(component, eventName) {\n  return ApplicationIsUsingDynamicServerEvents() && ComponentHasBindedEvent(component, eventName);\n}\n\nfunction SendCommand(command, component, domEvent, callback) {\n  if (callback) {\n    WebMapService.currentService.sendCommand(command, Response => {\n      /* c8 ignore next */\n      callback(component, domEvent);\n    });\n  } else {\n    WebMapService.currentService.sendCommand(command);\n  }\n}\n/**\r\n * Servers events enabled\r\n * Validates if the send to server feature is enabled\r\n * according to the flag in the angular client service\r\n * @returns true if events enabled\r\n */\n\n\nfunction serverEventsEnabled() {\n  return WebMapService.currentService && !WebMapService.currentService.enabledServerEvents;\n}\n\nfunction ApplicationIsUsingDynamicServerEvents() {\n  return WebMapService.currentService && WebMapService.currentService.config && WebMapService.currentService.config.useDynamicServerEvents;\n}\n\nfunction ComponentHasBindedEvent(component, eventName) {\n  return component && component.isBindedEvent(eventName);\n}\n/* c8 ignore start */\n\n\nfunction excludeEvents() {\n  return ['dwnitemchange', 'dwnrowchanging', 'dwnrowchange', 'dwnitemchangefocus'];\n}\n/* c8 ignore stop */\n\n\nfunction isExcludeEvents(eventName) {\n  return WebMapService.currentService && WebMapService.currentService.config.useBundleEvent && excludeEvents().indexOf(eventName) !== -1;\n}\n/***********************************************************************\r\n\r\nCopyright (C) Mobilize.Net  info@mobilize.net - All Rights Reserved\r\nThis file is part of the Mobilize Frameworks, which is\r\nproprietary and confidential.\r\nNOTICE: All information contained herein is, and remains\r\nthe property of Mobilize.Net  Corporation.\r\nThe intellectual and technical concepts contained herein are\r\nproprietary to Mobilize.Net  Corporation and may be covered\r\nby U.S. Patents, and are protected by trade secret or copyright law.\r\nDissemination of this information or reproduction of this material\r\nis strictly forbidden unless prior written permission is obtained\r\nfrom Mobilize.Net  Corporation.\r\nThis file is subject to the terms and conditions defined in\r\nfile 'LICENSE.txt', which is part of this source code package.\r\n***********************************************************************/\n\n\nfunction UpdateState() {\n  return function (target, key, descriptor) {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = function (...args) {\n      const result = originalMethod.apply(this, args);\n      WebMapService.currentService.core.publishEvent('detectChanges', {\n        BE2FEUpdate: true\n      });\n      return result;\n    };\n\n    return descriptor;\n  };\n}\n/***********************************************************************\r\n\r\nCopyright (C) Mobilize.Net  info@mobilize.net - All Rights Reserved\r\nThis file is part of the Mobilize Frameworks, which is\r\nproprietary and confidential.\r\nNOTICE: All information contained herein is, and remains\r\nthe property of Mobilize.Net  Corporation.\r\nThe intellectual and technical concepts contained herein are\r\nproprietary to Mobilize.Net  Corporation and may be covered\r\nby U.S. Patents, and are protected by trade secret or copyright law.\r\nDissemination of this information or reproduction of this material\r\nis strictly forbidden unless prior written permission is obtained\r\nfrom Mobilize.Net  Corporation.\r\nThis file is subject to the terms and conditions defined in\r\nfile 'LICENSE.txt', which is part of this source code package.\r\n***********************************************************************/\n\n\nfunction CustomEvent() {\n  return function (target, key, descriptor) {\n    descriptor.value = function (...args) {\n      // Pending customEvents spyke definition\n      return null;\n    };\n\n    return descriptor;\n  };\n}\n/* eslint-disable prettier/prettier */\n\n/***********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n/**\r\n * Checks if the index is a number, if it's a number, if it's in range or\r\n * if it's different of NaN\r\n * @param {any} index - The index of the element to be removed.\r\n * @returns The return value is a boolean.\r\n */\n\n\nfunction ValidateIndex(action) {\n  return function (target, key, descriptor) {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = function (...args) {\n      if (!isIndexValid(args[0])) {\n        throw new Error('Invalid index');\n      }\n\n      if (methodsNames.includes(key) && args[0] > this._internalArray.length) {\n        throw new Error('Invalid index');\n      } else if (!methodsNames.includes(key) && args[0] >= this._internalArray.length) {\n        throw new Error('Invalid index');\n      }\n\n      const result = originalMethod.apply(this, args);\n      return result;\n    };\n\n    return descriptor;\n  };\n} // Method's names that allow to use the array's length as index\n\n\nconst methodsNames = ['insert', 'insertRange'];\n/**\r\n * If the index is not a number, or if it is a number but less than zero, then\r\n * return false, otherwise return true.\r\n * @param index - The index of the item to be removed.\r\n * @returns A boolean value.\r\n */\n\nfunction isIndexValid(index) {\n  return !isNaN(index) && typeof index === 'number' && index >= 0;\n}\n/***********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n\nlet BringTopService = /*#__PURE__*/(() => {\n  class BringTopService {\n    constructor(rendererFactory) {\n      this.notifyWindowAction = new Subject();\n      this.render = rendererFactory.createRenderer(null, null);\n    }\n    /**\r\n     * Gets event emitted notification\r\n     */\n\n\n    get notificationWindowAction() {\n      return this.notifyWindowAction.asObservable();\n    }\n    /**\r\n     * Notifies window bring to front\r\n     * @param event event data\r\n     */\n\n\n    notifyWindowBringToFront(event) {\n      this.notifyWindowAction.next(event);\n    }\n    /**\r\n     * Bring element top\r\n     * @param element the current html element\r\n     */\n\n\n    bringElementTop(element) {\n      this.render.addClass(element.nativeElement, BringTopService.TOP_ELEMENT_CLASS);\n      this.render.setStyle(element.nativeElement, 'z-index', BringTopService.TOP_ELEMENT_ZINDEX);\n      this.render.setStyle(element.nativeElement, 'position', 'absolute');\n      this.lastTopElement = element;\n    }\n    /**\r\n     * Restores top element\r\n     * @param element the element to restore\r\n     */\n\n\n    restoreTopElement(element) {\n      this.render.removeClass(element.nativeElement, BringTopService.TOP_ELEMENT_CLASS);\n      this.render.setStyle(element.nativeElement, 'z-index', 'auto');\n    }\n\n  }\n\n  /**\r\n   * Set the element as Top in current view\r\n   */\n\n  /**\r\n   * Top element class of bring top service\r\n   */\n  BringTopService.TOP_ELEMENT_ZINDEX = 100;\n  BringTopService.TOP_ELEMENT_CLASS = 'WM-TOP';\n\n  BringTopService.ɵfac = function BringTopService_Factory(t) {\n    return new (t || BringTopService)(i0.ɵɵinject(i0.RendererFactory2));\n  };\n\n  BringTopService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: BringTopService,\n    factory: BringTopService.ɵfac\n  });\n  return BringTopService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/***********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n/***********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n\nclass FilterObject {\n  /**\r\n   * returns a new object with the properties != null from the parameter.\r\n   * @param obj object used to get the assigned properties\r\n   */\n  static cleanCopy(obj) {\n    const copy = {};\n\n    for (const propName in obj) {\n      if (obj.hasOwnProperty(propName) && obj[propName]) {\n        copy[propName] = obj[propName];\n      }\n    }\n\n    return copy;\n  }\n\n}\n\nclass MockService {\n  constructor(service, items, resultPostCall, customFunction) {\n    this.config = {\n      useDynamicServerEvents: true,\n      usePercentage: false,\n      webMapVersion: 'v5'\n    };\n    this.forms = {\n      formdialog: '86c8eebf-6e27-4ddb-8eca-6e68c096ca70'\n    };\n    this.result = '';\n    this.enabledServerEvents = true;\n    this.core = {\n      getEvent() {\n        return {\n          publish: (event, data) => {},\n          subscribe: (event, lambda) => 'token',\n          unSubscribe: token => false\n        };\n      }\n\n    };\n    this.currentService = this;\n    /* c8 ignore next */\n\n    this.serviceModel = service;\n    this.itemstoFetch = items;\n    this.postResult = resultPostCall;\n    this.customFunction = customFunction;\n  }\n  /* c8 ignore start */\n\n\n  sendCommand(command, callback) {\n    this.result = 'Done';\n  }\n  /* c8 ignore stop */\n\n  /* c8 ignore start */\n\n\n  fetch(url, id) {\n    return {\n      subscribe: callback => {\n        callback(this.customFunction ? this.customFunction(url) : this.itemstoFetch);\n      }\n    };\n  }\n  /* c8 ignore stop */\n\n  /* c8 ignore start */\n\n\n  post(url, data) {\n    return {\n      subscribe: callback => {\n        callback(this.postResult);\n      }\n    };\n  }\n  /* c8 ignore stop */\n\n  /* c8 ignore next 5 */\n\n\n  getModel(Id) {\n    return new Promise(resolve => {\n      return resolve(this.serviceModel);\n    });\n  }\n  /* c8 ignore next 3 */\n\n\n  invoke(arg) {\n    this.result = 'Done';\n  }\n  /* c8 ignore next */\n\n\n  notifyChange(mode, property) {}\n\n}\n/***********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n// @dynamic\n\n\nclass RemoveAmpersand {\n  /**\r\n   * Removes ampersand in value pass as parameter\r\n   * @param value Text to remove ampersand\r\n   * @param [underline] Determines if character aside ampersand\r\n   * should be underline\r\n   * @returns Text with ampersand removed.\r\n   */\n  static remove(value, underline) {\n    const replace = underline ? '<u>$1</u>' : '$1';\n    return value ? value.replace(/&(.|$)/g, replace) : value;\n  }\n\n}\n\nclass TestUtils {\n  /**\r\n   * Tests that the event emitter gets called when the source event of the given name is triggered,\r\n   * @param fixture The fixture of the component,\r\n   * @param emitter The event emitter of the component.\r\n   * @param name The name of the source event of the original component.\r\n   * @param selector The css selector to identify the component inside the fixture.\r\n   * @param event The event object of the original component.\r\n   */\n  static testEventWasCalled(fixture, emitter, name, selector, event) {\n    /* c8 ignore next 4 */\n    jest.spyOn(emitter, 'emit').mockImplementation(() => {});\n    TestUtils.triggerHtmlEvent(fixture, name, selector, event);\n    fixture.detectChanges();\n    expect(emitter.emit).toHaveBeenCalled();\n  }\n  /**\r\n   * Triggers the specified HTML event in the component specified by the selector\r\n   * @param fixture The fixture of the component,\r\n   * @param name The name of the source event of the original component.\r\n   * @param selector The css selector to identify the component inside the fixture.\r\n   * @param event The event object of the original component.\r\n   */\n\n  /* c8 ignore start */\n\n\n  static triggerHtmlEvent(fixture, name, selector, event) {\n    const eventValue = event || {\n      event: name\n    };\n    const component = fixture.debugElement.query(By.css(selector));\n    component.triggerEventHandler(name, eventValue);\n  }\n  /* c8 ignore stop */\n\n  /**\r\n   * Returns a new mock instance of the WebMapService.\r\n   * @param serviceModel The mock service that contains the available models.\r\n   * @param itemsToFetch The items that should be returned when calling fetch().\r\n   * @param postResult The expected result when calling post().\r\n   */\n\n  /* c8 ignore start */\n\n\n  static getWebMapServiceStub(serviceModel, itemsToFetch, postResult, customServiceFunction) {\n    return new MockService(serviceModel, itemsToFetch, postResult, customServiceFunction);\n  }\n\n}\n/***********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n\nclass ValidateObject {\n  static isEmptyObject(obj) {\n    for (const property in obj) {\n      /* c8 ignore else */\n      if (obj.hasOwnProperty(property)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n}\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n/**\r\n * Enum to describe the target position of the version info\r\n */\n\n\nvar VersionInfoPosition = /*#__PURE__*/(() => {\n  (function (VersionInfoPosition) {\n    VersionInfoPosition[VersionInfoPosition[\"topLeft\"] = 0] = \"topLeft\";\n    VersionInfoPosition[VersionInfoPosition[\"topRight\"] = 1] = \"topRight\";\n    VersionInfoPosition[VersionInfoPosition[\"bottomLeft\"] = 2] = \"bottomLeft\";\n    VersionInfoPosition[VersionInfoPosition[\"bottomRight\"] = 3] = \"bottomRight\";\n  })(VersionInfoPosition || (VersionInfoPosition = {}));\n\n  return VersionInfoPosition;\n})();\n\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n/**\r\n * Helper to allow applications to report information about its current version.\r\n *\r\n * This class will provide functions to register version info (Dictionary<key, value>) and then it will\r\n * provide the user with the means to display that information, usually with a combination of keys to be\r\n * pressed\r\n *\r\n */\nconst defaultcssSelector = 'versionInfoContainer';\n\nclass AppVersionInfoHelper {\n  /**\r\n   * For cases using iframes usually multiple instances of this class get created (once per window), this\r\n   * property will allow to access a single instance stored in window.top\r\n   *\r\n   * @readonly\r\n   * @private\r\n   * @static\r\n   * @type {AppVersionInfoHelper}\r\n   * @memberof AppVersionInfoHelper\r\n   */\n  static get singleton() {\n    let res = window.top['appVersionInfoHelper'];\n\n    if (res == null) {\n      window.top['appVersionInfoHelper'] = this;\n      res = this;\n    }\n\n    return res;\n  }\n  /**\r\n   * Gets the info DOM object to present the version info to the user\r\n   *\r\n   * @private\r\n   * @static\r\n   * @type {*}\r\n   * @memberof AppVersionInfoHelper\r\n   */\n\n\n  static get infoDOM() {\n    return AppVersionInfoHelper.singleton._infoDOM;\n  }\n  /**\r\n   * Sets the info DOM object to present the version info to the user\r\n   *\r\n   * @private\r\n   * @static\r\n   * @memberof AppVersionInfoHelper\r\n   */\n\n\n  static set infoDOM(value) {\n    if (AppVersionInfoHelper.singleton._infoDOM != null) {\n      try {\n        window.top.document.body.removeChild(AppVersionInfoHelper.singleton._infoDOM);\n      } catch {}\n    }\n\n    AppVersionInfoHelper.singleton._infoDOM = value ?? null;\n    AppVersionInfoHelper.infoVisible = false;\n  }\n  /**\r\n   * Gets the CSSDOM to be used by the version info.\r\n   * CSS rules are used so the user can override them in any application\r\n   *\r\n   * @readonly\r\n   * @private\r\n   * @static\r\n   * @type {*}\r\n   * @memberof AppVersionInfoHelper\r\n   */\n\n\n  static get infoCSSDOM() {\n    return AppVersionInfoHelper.singleton._infoCSSDOM;\n  }\n  /**\r\n   * Gets the CSSDOM to be used by the version info.\r\n   * CSS rules are used so the user can override them in any application\r\n   *\r\n   * @private\r\n   * @static\r\n   * @memberof AppVersionInfoHelper\r\n   */\n\n\n  static set infoCSSDOM(value) {\n    if (AppVersionInfoHelper.singleton._infoCSSDOM != null) {\n      try {\n        window.top.document.head.removeChild(AppVersionInfoHelper.singleton._infoCSSDOM);\n      } catch {}\n    }\n\n    AppVersionInfoHelper.singleton._infoCSSDOM = value ?? null;\n  }\n  /**\r\n   * Gets the list of target listeners for the events to show the version info\r\n   *\r\n   * @private\r\n   * @static\r\n   * @type {HTMLElement[]}\r\n   * @memberof AppVersionInfoHelper\r\n   */\n\n\n  static get targetListener() {\n    return AppVersionInfoHelper.singleton._targetListener;\n  }\n  /**\r\n   * Sets the list of target listeners for the events to show the version info\r\n   *\r\n   * @private\r\n   * @static\r\n   * @memberof AppVersionInfoHelper\r\n   */\n\n\n  static set targetListener(value) {\n    if (AppVersionInfoHelper.singleton._targetListener != null) {\n      AppVersionInfoHelper.unregisterEventListeners();\n    }\n\n    AppVersionInfoHelper.singleton._targetListener = value ?? null;\n  }\n  /**\r\n   * Gets the version info configured to be presented.\r\n   *\r\n   * @private\r\n   * @static\r\n   * @type {{[key: string]: string}}\r\n   * @memberof AppVersionInfoHelper\r\n   */\n\n\n  static get versionInfo() {\n    return AppVersionInfoHelper.singleton._versionInfo;\n  }\n  /**\r\n   * Sets the version info configured to be presented.\r\n   *\r\n   * @private\r\n   * @static\r\n   * @memberof AppVersionInfoHelper\r\n   */\n\n\n  static set versionInfo(value) {\n    AppVersionInfoHelper.singleton._versionInfo = value;\n  }\n  /**\r\n   * Gets the position to show the version info.\r\n   *\r\n   * @private\r\n   * @static\r\n   * @type {VersionInfoPosition}\r\n   * @memberof AppVersionInfoHelper\r\n   */\n\n\n  static get position() {\n    return AppVersionInfoHelper.singleton._position;\n  }\n  /**\r\n   * Sets the position to show the version info.\r\n   *\r\n   * @private\r\n   * @static\r\n   * @memberof AppVersionInfoHelper\r\n   */\n\n\n  static set position(value) {\n    AppVersionInfoHelper.singleton._position = value ?? VersionInfoPosition.topRight;\n  }\n  /**\r\n   * Gets the key sequence to use to check if the user wants to show the version info\r\n   *\r\n   * @private\r\n   * @static\r\n   * @type {IKeySequence}\r\n   * @memberof AppVersionInfoHelper\r\n   */\n\n\n  static get keySequence() {\n    return AppVersionInfoHelper.singleton._keySequence;\n  }\n  /**\r\n   *  Sets the key sequence to use to check if the user wants to show the version info\r\n   *\r\n   * @private\r\n   * @static\r\n   * @memberof AppVersionInfoHelper\r\n   */\n\n\n  static set keySequence(value) {\n    AppVersionInfoHelper.singleton._keySequence = value;\n  }\n  /**\r\n   * Gets the flag indicating if the version info is being displayed\r\n   *\r\n   * @private\r\n   * @static\r\n   * @type {boolean}\r\n   * @memberof AppVersionInfoHelper\r\n   */\n\n\n  static get infoVisible() {\n    return AppVersionInfoHelper.singleton._infoVisible;\n  }\n  /**\r\n   * Sets the flag indicating if the version info is being displayed\r\n   *\r\n   * @private\r\n   * @static\r\n   * @memberof AppVersionInfoHelper\r\n   */\n\n\n  static set infoVisible(value) {\n    AppVersionInfoHelper.singleton._infoVisible = value ?? false;\n  }\n  /**\r\n   * Gets the cssSelector to use for the container of the version info window. Default = versionInfoContainer\r\n   *\r\n   * @private\r\n   * @static\r\n   * @type {string}\r\n   * @memberof AppVersionInfoHelper\r\n   */\n\n\n  static get cssSelector() {\n    return AppVersionInfoHelper.singleton._cssSelector;\n  }\n  /**\r\n   * Sets the cssSelector to use for the container of the version info window. Default = versionInfoContainer\r\n   *\r\n   * @private\r\n   * @static\r\n   * @memberof AppVersionInfoHelper\r\n   */\n\n\n  static set cssSelector(value) {\n    AppVersionInfoHelper.singleton._cssSelector = value ?? defaultcssSelector;\n  }\n  /**\r\n   * Register version info to show/hide to the user when pressing a certain key sequence. Options can be provided to customize or adapt\r\n   * to the application, for instance options could be:\r\n   *  {\r\n   *      targetListener: DOM Tag object that can listen for keydown event and trigger the visualization of the version info.\r\n   *      position: corner where the information will be shown, possible values are <topLeft, topRight, bottomLeft, bottomRight>\r\n   *      keySequence: {\r\n   *          control: true|false. Ctrl should be pressed\r\n   *          shift: true|false. Shift should be pressed\r\n   *          alt: true|false. Alt should be pressed\r\n   *          key: letter that should be pressed\r\n   *      }\r\n   *      cssSelector: .class to be used in the info window, by default is .versionInfoContainer\r\n   *  }\r\n   *\r\n   * This function should be called only once in the application and hopefully on the entry point screen.\r\n   *\r\n   * @static\r\n   * @param {{[key: string]: string}} info version info to present\r\n   * @param {HTMLElement} [targetListener=null] HTML Dom object where the helper will be listening the events to show the version info.\r\n   * If none is provided by default will be window.top.document.body or window.top.document.documentElement.\r\n   * @param {VersionInfoPosition} [position=VersionInfoPosition.topRight] position to show the version information, by default topRight.\r\n   * @param {IKeySequence} [keySequence=null] sequence to listen or by default = alt+shift+w\r\n   * @memberof AppVersionInfoHelper\r\n   */\n\n\n  static RegisterVersionInfo(info, options = null) {\n    AppVersionInfoHelper.Clear();\n    AppVersionInfoHelper.versionInfo = info ?? null;\n    AppVersionInfoHelper.position = options?.position ?? VersionInfoPosition.topRight;\n    AppVersionInfoHelper.keySequence = options?.keySequence ?? {\n      alt: true,\n      shift: true,\n      key: 'w'\n    };\n    AppVersionInfoHelper.targetListener = options?.targetListener ?? window.top?.document?.body ?? window.top.document?.documentElement ?? null;\n    AppVersionInfoHelper.cssSelector = options?.cssSelector ?? defaultcssSelector;\n    AppVersionInfoHelper.updateInfoDOM();\n\n    if (AppVersionInfoHelper.infoDOM != null) {\n      AppVersionInfoHelper.registerEventListeners();\n    }\n  }\n  /**\r\n   * Clears all previous information, listeners, etc.\r\n   *\r\n   * @static\r\n   * @memberof AppVersionInfoHelper\r\n   */\n\n\n  static Clear() {\n    AppVersionInfoHelper.infoDOM = null;\n    AppVersionInfoHelper.infoCSSDOM = null;\n    AppVersionInfoHelper.targetListener = null;\n    AppVersionInfoHelper.versionInfo = null;\n    AppVersionInfoHelper.position = VersionInfoPosition.topRight;\n    AppVersionInfoHelper.keySequence = null;\n    AppVersionInfoHelper.infoVisible = false;\n    AppVersionInfoHelper.cssSelector = defaultcssSelector;\n  }\n  /**\r\n   * Register the event listeners for all target listeners\r\n   *\r\n   * @private\r\n   * @static\r\n   * @memberof AppVersionInfoHelper\r\n   */\n\n\n  static registerEventListeners() {\n    AppVersionInfoHelper.targetListener?.addEventListener?.('keydown', AppVersionInfoHelper.keyDownHandler);\n  }\n  /**\r\n   * Unregister the event listeners of all target listeners\r\n   *\r\n   * @private\r\n   * @static\r\n   * @memberof AppVersionInfoHelper\r\n   */\n\n\n  static unregisterEventListeners() {\n    AppVersionInfoHelper.targetListener?.removeEventListener?.('keydown', AppVersionInfoHelper.keyDownHandler);\n  }\n  /**\r\n   * Global listener for keydown event, to handle when the user request to show the version info\r\n   *\r\n   * @private\r\n   * @static\r\n   * @param {KeyboardEvent} event\r\n   * @memberof AppVersionInfoHelper\r\n   */\n\n\n  static keyDownHandler(event) {\n    if ((!AppVersionInfoHelper.keySequence.control || AppVersionInfoHelper.keySequence.control == event.ctrlKey) && (!AppVersionInfoHelper.keySequence.shift || AppVersionInfoHelper.keySequence.shift == event.shiftKey) && (!AppVersionInfoHelper.keySequence.alt || AppVersionInfoHelper.keySequence.alt == event.altKey) && `${AppVersionInfoHelper.keySequence.key}`.toLowerCase() == `${event.key}`.toLowerCase()) {\n      if (!AppVersionInfoHelper.infoVisible) {\n        AppVersionInfoHelper.checkCSSDOM();\n        window.top.document.body.appendChild(AppVersionInfoHelper.infoDOM);\n      } else {\n        window.top.document.body.removeChild(AppVersionInfoHelper.infoDOM);\n      }\n\n      AppVersionInfoHelper.infoVisible = !AppVersionInfoHelper.infoVisible;\n    }\n  }\n  /**\r\n   * Ensures the default CSS rules for the version info will be added to the document. By default .css rules are used\r\n   * so the user can override them if required\r\n   *\r\n   * @private\r\n   * @static\r\n   * @memberof AppVersionInfoHelper\r\n   */\n\n\n  static checkCSSDOM() {\n    if (AppVersionInfoHelper.infoCSSDOM == null) {\n      AppVersionInfoHelper.infoCSSDOM = AppVersionInfoHelper.generateDefaultCSSDOM();\n    }\n  }\n  /**\r\n   * Generates a default css DOM object to be used for the version info.\r\n   *\r\n   * @private\r\n   * @static\r\n   * @return {*}  {HTMLStyleElement}\r\n   * @memberof AppVersionInfoHelper\r\n   */\n\n\n  static generateDefaultCSSDOM() {\n    const styles = [`.${AppVersionInfoHelper.cssSelector} {\n                position: fixed;\n                display: inline-grid;\n                grid-template-columns: auto auto;\n                column-gap: 4px;\n                row-gap: 1px;\n                z-index: 10000000;\n                background-color: #ade6b3;\n                padding: 5px;\n                margin: 1px;\n                border-radius: 4px;\n                box-shadow: 0 2px 2px 0 rgba(0,0,0,0.14),0 3px 1px -2px rgba(0,0,0,0.12),0 1px 5px 0 rgba(0,0,0,0.2);\n                font-family: Verdana, Geneva, Tahoma, sans-serif;\n                font-size: 11px;            \n            }`, `.${AppVersionInfoHelper.cssSelector} > .keyCell {\n                font-weight: bold;\n            }`, `.${AppVersionInfoHelper.cssSelector}.topLeft {\n                top: 0px;\n                left: 0px;\n            }`, `.${AppVersionInfoHelper.cssSelector}.topRight {\n                top: 0px;\n                right: 0px;\n            }`, `.${AppVersionInfoHelper.cssSelector}.bottomLeft {\n                bottom: 0px;\n                left: 0px;\n            }`, `.${AppVersionInfoHelper.cssSelector}.bottomRight {\n                bottom: 0px;\n                right: 0px;\n            }`];\n    const styleEl = window.top.document.createElement('style'); //Required so .sheet gets populated\n\n    if (window.top.document.head.childElementCount > 0) {\n      window.top.document.head.insertBefore(styleEl, window.top.document.head.children[0]);\n    } else {\n      window.top.document.head.appendChild(styleEl);\n    }\n\n    const styleSheet = styleEl.sheet;\n    styles.forEach(rule => {\n      styleSheet.insertRule(rule, styleSheet.cssRules.length);\n    });\n    return styleEl;\n  }\n  /**\r\n   * Using the information of versionInfo, it generates the DOM object that is going to be displayed, DOM will\r\n   * be stored in infoDOM.\r\n   *\r\n   * The structure will be:\r\n   * <div class='versionInfoContainer <topLeft|topRight|bottomLeft|bottomRight>'>\r\n   *  <div class='keyCell'>Component Name</div>\r\n   *  <div>Version</div>\r\n   * <div>\r\n   * @private\r\n   * @static\r\n   * @memberof AppVersionInfoHelper\r\n   */\n\n\n  static updateInfoDOM() {\n    AppVersionInfoHelper.infoDOM = null;\n    const keys = AppVersionInfoHelper.versionInfo != null ? Object.keys(AppVersionInfoHelper.versionInfo) : [];\n\n    if (keys?.length > 0) {\n      const infoDiv = window.top.document.createElement('div');\n      infoDiv.className = AppVersionInfoHelper.cssSelector;\n\n      switch (AppVersionInfoHelper.position) {\n        case VersionInfoPosition.topLeft:\n          infoDiv.className += ' topLeft';\n          break;\n\n        case VersionInfoPosition.bottomLeft:\n          infoDiv.className += ' bottomLeft';\n          break;\n\n        case VersionInfoPosition.bottomRight:\n          infoDiv.className += ' bottomRight';\n          break;\n\n        default:\n          infoDiv.className += ' topRight';\n      }\n\n      keys.forEach(key => {\n        const itemKey = window.top.document.createElement('div');\n        itemKey.innerText = `${key}:`;\n        itemKey.className = 'keyCell';\n        infoDiv.appendChild(itemKey);\n        const itemValue = window.top.document.createElement('div');\n        itemValue.innerText = AppVersionInfoHelper.versionInfo[key];\n        infoDiv.appendChild(itemValue);\n      });\n      AppVersionInfoHelper.infoDOM = infoDiv;\n    }\n  }\n\n}\n\nAppVersionInfoHelper._infoDOM = null;\nAppVersionInfoHelper._infoCSSDOM = null;\nAppVersionInfoHelper._targetListener = null;\nAppVersionInfoHelper._versionInfo = null;\nAppVersionInfoHelper._position = VersionInfoPosition.topRight;\nAppVersionInfoHelper._keySequence = null;\nAppVersionInfoHelper._cssSelector = defaultcssSelector;\nAppVersionInfoHelper._infoVisible = false;\n/***********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\nlet BaseComponentsModule = /*#__PURE__*/(() => {\n  class BaseComponentsModule {}\n\n  BaseComponentsModule.ɵfac = function BaseComponentsModule_Factory(t) {\n    return new (t || BaseComponentsModule)();\n  };\n\n  BaseComponentsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: BaseComponentsModule,\n    bootstrap: [FormsContainerComponent, LoadingComponent, ContainerComponent, AlertComponent]\n  });\n  BaseComponentsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, HttpClientModule, FormsModule, BrowserModule, WebMapModule, BrowserAnimationsModule // required animations module\n    ]]\n  });\n  return BaseComponentsModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/***********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n/**\r\n * Convert an iterable to an array.\r\n * @param iterable - An iterable object to convert to an array.\r\n * @returns An array of the iterable's values.\r\n */\n\n\nfunction iuToArray(iterable) {\n  return [...iterable];\n}\n/**\r\n *   Metadata key for storing supported interfaces\r\n */\n\n\nconst supportedInterfacesCompatibilityMetadataKey = Symbol('wm_compatibility_supported_interfaces');\nvar List_1;\n/**\r\n * List Class\r\n *\r\n * @export\r\n * @class List\r\n * @implements {IList}\r\n */\n\nlet List = List_1 = class List {\n  constructor(arg) {\n    this._internalArray = [];\n    const newLocal = typeof arg; // capacity argument still not supported\n\n    if (newLocal != 'undefined' && newLocal != 'number') {\n      const initialValues = arg;\n      this.internalArray = [...initialValues];\n    }\n\n    List_1.initializeSupportedInterfaces();\n  }\n\n  static initializeSupportedInterfaces() {\n    if (!List_1.interfacesInitialized) {\n      const setMetadataInfo = Reflect.metadata(supportedInterfacesCompatibilityMetadataKey, ['System.Collections.Generic.ICollection`1', 'System.Collections.Generic.IList`1', 'System.Collections.Generic.IList', 'System.Collections.IList']);\n      setMetadataInfo(List_1);\n      List_1.interfacesInitialized = true;\n    }\n  }\n  /**\r\n   * Gets the internal array.\r\n   *\r\n   * @type {T[]}\r\n   * @memberof List\r\n   */\n\n\n  get internalArray() {\n    // eslint-disable-next-line no-underscore-dangle\n    return this._internalArray;\n  }\n  /**\r\n   * Sets the internal array.\r\n   *\r\n   * @type {T[]}\r\n   * @memberof List\r\n   */\n\n\n  set internalArray(value) {\n    // eslint-disable-next-line no-underscore-dangle\n    this._internalArray = value;\n  }\n  /**\r\n   * Gets  element by index.\r\n   *\r\n   * @type {T[]}\r\n   * @memberof List\r\n   */\n\n  /* c8 ignore next 4 */\n\n\n  getItem(index) {\n    if (this.ContainsObservables) {\n      const idModel = this.internalArray[index];\n      return WebMapService.currentService.core.getModel(idModel);\n    }\n\n    return this.internalArray[index];\n  }\n  /**\r\n   * Sets  element by index.\r\n   *\r\n   * @type {T[]}\r\n   * @memberof List\r\n   */\n\n  /* c8 ignore next 5 */\n\n\n  setItem(index, value) {\n    this.internalArray[index] = value;\n  }\n  /**\r\n   * Index of value in list\r\n   *\r\n   * @param {T} value\r\n   * @returns\r\n   * @memberof List\r\n   * @wMethod IndexOf\r\n   */\n\n\n  indexOf(value) {\n    return this.internalArray.indexOf(value);\n  }\n  /**\r\n   * Inserts element in index\r\n   *\r\n   * @param {number} index\r\n   * @param {T} value\r\n   * @memberof List\r\n   * @wMethod Insert\r\n   */\n\n\n  insert(index, value) {\n    this.internalArray.splice(index, 0, value);\n  }\n  /**\r\n   * Removes element at index\r\n   *\r\n   * @param {number} index\r\n   * @memberof List\r\n   * @wMethod RemoveAt\r\n   */\n\n\n  removeAt(index) {\n    this.internalArray.splice(index, 1);\n  }\n  /**\r\n   * Gets the count of elements in list\r\n   *\r\n   * @readonly\r\n   * @type {number}\r\n   * @memberof List\r\n   * @wProperty Count\r\n   */\n\n\n  get count() {\n    return this.internalArray.length;\n  }\n  /**\r\n   * Adds an element to the list\r\n   *\r\n   * @param {T} value\r\n   * @memberof List\r\n   * @wMethod Add\r\n   */\n\n\n  add(value) {\n    this.internalArray.push(value);\n  }\n  /**\r\n   * Clears the list\r\n   *\r\n   * @memberof List\r\n   * @wMethod Clear\r\n   */\n\n\n  clear() {\n    this.internalArray.splice(0, this.internalArray.length);\n  }\n  /**\r\n   * Check if a value is contained in the list\r\n   *\r\n   * @param {T} value\r\n   * @returns {boolean}\r\n   * @memberof List\r\n   * @wMethod Contains\r\n   */\n\n\n  contains(value) {\n    return this.internalArray.indexOf(value) !== -1;\n  }\n  /**\r\n   * Removes a value from the list\r\n   *\r\n   * @param {T} value\r\n   * @returns {boolean}\r\n   * @memberof List\r\n   * @wMethod Remove\r\n   */\n\n\n  remove(value) {\n    const copyValue = this.ContainsObservables ? value['id'] : value;\n    const idx = this.internalArray.indexOf(copyValue);\n\n    if (idx !== -1) {\n      this.internalArray.splice(idx, 1);\n      return this.removeHandler(copyValue);\n    }\n\n    return false;\n  }\n  /**\r\n   * This is an extension of remove method\r\n   * In order to send Message with correct parameter.\r\n   *\r\n   * @param {*} idx\r\n   * @return {*}  {boolean}\r\n   * @memberof List\r\n   */\n\n\n  removeHandler(value) {\n    return value !== undefined;\n  }\n  /**\r\n   * Performs an action on each element of the list\r\n   *\r\n   * @param {(e: T) => void} action\r\n   * @memberof List\r\n   * @wMethod ForEach\r\n   */\n\n\n  forEach(action) {\n    for (const obj of this.internalArray) {\n      action(obj);\n    }\n  }\n  /**\r\n   * Adds elements of an iterable to the list\r\n   *\r\n   * @param {Iterable<T>} range\r\n   * @memberof List\r\n   * @wMethod AddRange\r\n   */\n\n\n  addRange(range) {\n    for (const obj of range) {\n      this._internalArray.push(obj);\n    }\n  }\n  /**\r\n   * Inserts elements of an iterable to the list in a position\r\n   *\r\n   * @param {number} position\r\n   * @param {Iterable<T>} range\r\n   * @memberof List\r\n   * @wMethod InsertRange\r\n   */\n\n\n  insertRange(index, range) {\n    this.internalArray.splice(index, 0, ...range);\n  }\n\n  sort(p) {\n    if (typeof p === 'object') {\n      this.internalArray.sort(p.Compare);\n    } else if (typeof p === 'function') {\n      this.internalArray.sort(p);\n    } else {\n      if (this.internalArray.length > 0 && typeof this.internalArray[0] === 'object') {\n        this.internalArray.sort((a, b) => {\n          if (a?.CompareTo && b?.CompareTo) {\n            return a.CompareTo(b);\n          } else {\n            return 0;\n          }\n        });\n      } else {\n        this.internalArray.sort();\n      }\n    }\n  }\n  /**\r\n   * Copy the list to a target array\r\n   *\r\n   * @param {T[]} target\r\n   * @param {number} index\r\n   * @memberof List\r\n   * @wMethod CopyTo\r\n   */\n\n\n  copyTo(target, index) {\n    for (let i = index; i < target.length; i++) {\n      target[i] = this.internalArray[i];\n    }\n  }\n  /**\r\n   * Removes all elements from the collection by a predicate\r\n   *\r\n   * @param {(e: T) => boolean} predicate\r\n   * @returns\r\n   * @memberof List\r\n   * @wMethod RemoveAll\r\n   */\n\n\n  removeAll(predicate) {\n    let removed = 0;\n\n    for (let i = this.internalArray.length - 1; i >= 0; i--) {\n      if (predicate(this.internalArray[i])) {\n        this.internalArray.splice(i, 1);\n        removed++;\n      }\n    }\n\n    return removed;\n  }\n  /**\r\n   * Converts the list to an array\r\n   *\r\n   * @returns\r\n   * @memberof List\r\n   * @wMethod ToArray\r\n   */\n\n\n  toArray() {\n    return [...this.internalArray];\n  }\n\n  [Symbol.iterator]() {\n    return this.internalArray[Symbol.iterator]();\n  }\n\n};\nList.interfacesInitialized = false;\n\n__decorate([ValidateIndex(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number]), __metadata(\"design:returntype\", Object)], List.prototype, \"getItem\", null);\n\n__decorate([SendMessage('this[]'), ValidateIndex(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number, Object]), __metadata(\"design:returntype\", void 0)], List.prototype, \"setItem\", null);\n\n__decorate([SendMessage(), ValidateIndex(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number, Object]), __metadata(\"design:returntype\", void 0)], List.prototype, \"insert\", null);\n\n__decorate([SendMessage(), ValidateIndex(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number]), __metadata(\"design:returntype\", void 0)], List.prototype, \"removeAt\", null);\n\n__decorate([SendMessage(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], List.prototype, \"add\", null);\n\n__decorate([SendMessage(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], List.prototype, \"clear\", null);\n\n__decorate([SendMessage('remove'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", Boolean)], List.prototype, \"removeHandler\", null);\n\n__decorate([SendMessage(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], List.prototype, \"addRange\", null);\n\n__decorate([SendMessage(), ValidateIndex(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number, Object]), __metadata(\"design:returntype\", void 0)], List.prototype, \"insertRange\", null);\n\n__decorate([SendMessage(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Function]), __metadata(\"design:returntype\", void 0)], List.prototype, \"removeAll\", null);\n\nList = List_1 = __decorate([registerModel('lstwrppr'), __metadata(\"design:paramtypes\", [Object])], List);\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n/**\r\n * Base class for dictionary types.\r\n *\r\n * @export\r\n * @abstract\r\n * @class Dictionary\r\n * @implements {ISimpleDictionary<K, V>}\r\n * @template K\r\n * @template V\r\n * @wType System.Collections.Generic.Dictionary`2\r\n * @wNetSupport\r\n */\n\nclass Dictionary {}\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n/**\r\n * Stores a Key-Value pair in an array-like object.\r\n *\r\n * @export\r\n * @class KeyValue\r\n * @extends {Array}\r\n * @template K\r\n * @template V\r\n * @wType System.Collections.Generic.KeyValuePair`2\r\n * @wIgnoreDeclaration\r\n * @wNetSupport\r\n */\n\n\nclass KeyValue extends Array {\n  /**\r\n   * Creates an instance of `KeyValue`.\r\n   *\r\n   * @param {K} [key]\r\n   * @param {V} [value]\r\n   * @memberof KeyValue\r\n   */\n  constructor(key, value) {\n    super();\n    this[0] = key;\n    this[1] = value;\n  }\n  /**\r\n   * Gets the key of this `KeyValue` pair.\r\n   *\r\n   * @readonly\r\n   * @type {K}\r\n   * @memberof KeyValue\r\n   * @wIgnore\r\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n\n\n  get Key() {\n    return this[0];\n  }\n  /**\r\n   * Gets the value of this `KeyValue` pair.\r\n   *\r\n   * @readonly\r\n   * @type {V}\r\n   * @memberof KeyValue\r\n   * @wIgnore\r\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n\n\n  get Value() {\n    return this[1];\n  }\n  /**\r\n   * Returns a new instance of `KeyValue`, ready to be used as a regular array.\r\n   *\r\n   * @static\r\n   * @template TKey\r\n   * @template TValue\r\n   * @param {TKey} [key]\r\n   * @param {TValue} [value]\r\n   * @return {*}  {[TKey, TValue]}\r\n   * @memberof KeyValue\r\n   */\n\n\n  static pair(key, value) {\n    return new KeyValue(key, value);\n  }\n\n}\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nvar SimpleDictionary_1;\nlet SimpleDictionary = SimpleDictionary_1 = class SimpleDictionary extends Dictionary {\n  constructor() {\n    super();\n    this.internalMap = new Map();\n  }\n  /**\r\n   * Get item by key.\r\n   * @param {K} key\r\n   * @memberof SimpleDictionary\r\n   * @wMethod getItem\r\n   */\n\n\n  getItem(key) {\n    if (this.internalMap.has(key)) {\n      return this.internalMap.get(key);\n    } else {\n      return null;\n    }\n  }\n  /**\r\n   * Set item by key.\r\n   * @param {V} value\r\n   * @param {K} value\r\n   * @memberof SimpleDictionary\r\n   * @wMethod setItem\r\n   */\n\n  /* c8 ignore next 4 */\n\n\n  setItem(key, value) {\n    this.internalMap.set(key, value);\n  }\n  /**\r\n   * Get keys\r\n   * @memberof SimpleDictionary\r\n   * @wMethod keys\r\n   */\n\n\n  get keys() {\n    return new List(this.internalMap.keys()).internalArray;\n  }\n  /**\r\n   * Get values.\r\n   * @memberof SimpleDictionary\r\n   * @wMethod values\r\n   */\n\n\n  get values() {\n    return new List(this.internalMap.values()).internalArray;\n  }\n  /**\r\n   * Add value and key.\r\n   * @param {V} value\r\n   * @param {K} key\r\n   * @memberof SimpleDictionary\r\n   * @wMethod add\r\n   */\n\n\n  add(key, value) {\n    this.internalMap.set(key, value);\n  }\n  /**\r\n   * Returns true or false if the key exists.\r\n   * @param {K} key\r\n   * @memberof SimpleDictionary\r\n   * @wMethod hasKey\r\n   */\n\n\n  hasKey(key) {\n    return this.internalMap.has(key);\n  }\n  /**\r\n   * Removes a entry to the dictionary\r\n   *\r\n   * @param {K} key\r\n   * @memberof SimpleDictionary\r\n   * @wMethod Remove\r\n   */\n\n\n  remove(key) {\n    this.internalMap.delete(key);\n  }\n  /**\r\n   * Tries to get a value by key in the dictionary\r\n   *\r\n   * @param {K} key\r\n   * @param {V} value\r\n   * @memberof SimpleDictionary\r\n   * @wMethod TryGetValue\r\n   * @wIgnore\r\n   */\n\n\n  tryGetValue(key, value) {\n    if (this.internalMap.has(key)) {\n      value(this.internalMap.get(key));\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /**\r\n   * Gets the count of elements in the dictionary\r\n   *\r\n   * @abstract\r\n   * @type {number}\r\n   * @memberof SimpleDictionary\r\n   * @wProperty Count\r\n   */\n\n\n  get count() {\n    return this.internalMap.size;\n  }\n  /**\r\n   * Add a value to the dictionary\r\n   *\r\n   * @abstract\r\n   * @param {[K, V]} value\r\n   * @memberof SimpleDictionary\r\n   * @wMethod Add\r\n   */\n\n\n  addEntry(value) {\n    this.internalMap.set(value[0], value[1]);\n  }\n  /**\r\n   * Clear the dictionary\r\n   *\r\n   * @abstract\r\n   * @memberof SimpleDictionary\r\n   * @wMethod Clear\r\n   */\n\n\n  clear() {\n    this.internalMap.clear();\n  }\n  /**\r\n   * Return true or false if the value exists in the dictionary\r\n   * @param {[K, V]} value\r\n   * @memberof SimpleDictionary\r\n   * @wMethod Contains\r\n   */\n\n  /* c8 ignore next 3 */\n\n\n  contains(value) {\n    // TODO implementation pending\n    return false;\n  }\n  /**\r\n   * Return true or false if the key exists in the dictionary\r\n   * @param {K} key\r\n   * @memberof SimpleDictionary\r\n   * @wMethod ContainsKey\r\n   */\n\n\n  containsKey(key) {\n    return this.internalMap.has(key);\n  }\n  /**\r\n   * Return true or false if the value exists in the dictionary\r\n   * @param {V} value\r\n   * @memberof SimpleDictionary\r\n   * @wMethod ContainsValue\r\n   */\n\n\n  containsValue(value) {\n    const res = this.values?.find(v => value === v);\n    return res ? true : false;\n  }\n  /**\r\n   * Copy the dictionary to a target array\r\n   *\r\n   * @param {[K, V][]} target\r\n   * @param {number} index\r\n   * @memberof SimpleDictionary\r\n   * @wMethod CopyTo\r\n   */\n\n\n  copyTo(target, index) {}\n\n  [Symbol.iterator]() {\n    return this.internalArray[Symbol.iterator]();\n  }\n  /**\r\n   * Gets the internal array.\r\n   *\r\n   * @type {[K, V][]}\r\n   * @memberof SimpleDictionary\r\n   */\n\n\n  get internalArray() {\n    return [...this.internalMap].map(x => KeyValue.pair(x[0], x[1]));\n  }\n  /**\r\n   * Creates a new SimpleDictionary object with the elements that matched the given predicate\r\n   * @param predicate a function that filters this SimpleDictionary elements.\r\n   * @returns a new SimpleDictionary with filtered in elements.\r\n   */\n\n\n  filter(predicate) {\n    const result = new SimpleDictionary_1();\n    this.internalArray.forEach(element => {\n      if (predicate(element)) {\n        result.addEntry(element);\n      }\n    });\n    return result;\n  }\n\n};\n\n__decorate([SendMessage(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object, Object]), __metadata(\"design:returntype\", void 0)], SimpleDictionary.prototype, \"setItem\", null);\n\n__decorate([SendMessage(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object, Object]), __metadata(\"design:returntype\", void 0)], SimpleDictionary.prototype, \"add\", null);\n\n__decorate([SendMessage(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], SimpleDictionary.prototype, \"remove\", null);\n\n__decorate([SendMessage(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Array]), __metadata(\"design:returntype\", void 0)], SimpleDictionary.prototype, \"addEntry\", null);\n\n__decorate([SendMessage(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], SimpleDictionary.prototype, \"clear\", null);\n\nSimpleDictionary = SimpleDictionary_1 = __decorate([registerModel('dctwrppr'), __metadata(\"design:paramtypes\", [])], SimpleDictionary);\n\nclass ArrayHelper {\n  /**\r\n   * It takes an array and a predicate function and returns true if the predicate\r\n   * function returns true for any element in the array\r\n   * @param array - SimpleArray<U>\r\n   * @param predicate - (e: any) => boolean\r\n   * @returns A boolean\r\n   */\n  static exists(array, predicate) {\n    for (let i = array.length - 1; i >= 0; i--) {\n      if (predicate(array.getItem(i))) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\r\n   * It copies the first `length` elements from `sourceArray` to `destinationArray`\r\n   * @param sourceArray - The array to copy from\r\n   * @param destinationArray - SimpleArray<U>\r\n   * @param {number} length - number\r\n   * @returns A string.\r\n   */\n\n\n  static copy(sourceArray, destinationArray, length) {\n    if (length > sourceArray.length) {\n      return 'Source array was not long enough';\n    }\n\n    if (length > destinationArray.length) {\n      return 'Destination array was not long enough';\n    }\n\n    for (let index = 0; index < length; index++) {\n      const val = sourceArray.getItem(index);\n      destinationArray.setItem(index, val);\n    }\n  }\n\n}\n/***********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n\nvar SimpleArray_1;\nlet SimpleArray = SimpleArray_1 = class SimpleArray {\n  /* c8 ignore start */\n  constructor(length, arg) {\n    this._internalArray = [];\n    this._length = length;\n\n    if (arg) {\n      this._internalArray = [...arg];\n    } else {\n      for (let index = 0; index < this._length; index++) {\n        this._internalArray.push(null);\n      }\n    }\n\n    SimpleArray_1.initializeSupportedInterfaces();\n  }\n\n  static initializeSupportedInterfaces() {\n    if (!SimpleArray_1.interfacesInitialized) {\n      const setMetadataInfo = Reflect.metadata(supportedInterfacesCompatibilityMetadataKey, ['System.Collections.Generic.ICollection`1', 'System.Collections.Generic.IList`1', 'System.Collections.Generic.IList', 'System.Collections.IList']);\n      setMetadataInfo(SimpleArray_1);\n      SimpleArray_1.interfacesInitialized = true;\n    }\n  }\n  /* c8 ignore stop */\n\n  /* c8 ignore next 3 */\n\n\n  [Symbol.iterator]() {\n    return this._internalArray[Symbol.iterator]();\n  }\n  /**\r\n   * Return the count of elements in array\r\n   * @memberof SimpleArray\r\n   */\n\n\n  get count() {\n    return this._length;\n  }\n  /**\r\n   * Return the length of array\r\n   * @memberof SimpleArray\r\n   */\n\n\n  get length() {\n    return this._length;\n  }\n  /**\r\n   * Copy the list to a target array\r\n   *\r\n   * @param {T[]} target\r\n   * @param {number} index\r\n   * @memberof SimpleArray\r\n   * @wMethod CopyTo\r\n   */\n\n\n  copyTo(target, index) {\n    for (let i = index; i < target.length; i++) {\n      target[i] = this._internalArray[i];\n    }\n  }\n  /**\r\n   * Return item by index\r\n   *\r\n   * @param {number} index\r\n   * @memberof SimpleArray\r\n   * @wMethod GetItem\r\n   */\n\n  /* c8 ignore next 4 */\n\n\n  getItem(index) {\n    if (this.ContainsObservables) {\n      const idModel = this._internalArray[index];\n      return WebMapService.currentService.core.getModel(idModel);\n    }\n\n    return this._internalArray[index];\n  }\n  /**\r\n   * Set item by index\r\n   * @param {T} value\r\n   * @param {number} index\r\n   * @memberof SimpleArray\r\n   * @wMethod SetItem\r\n   */\n\n  /* c8 ignore next 5 */\n\n\n  setItem(index, value) {\n    this._internalArray[index] = value;\n  }\n\n};\nSimpleArray.interfacesInitialized = false;\n\n__decorate([ValidateIndex(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number]), __metadata(\"design:returntype\", Object)], SimpleArray.prototype, \"getItem\", null);\n\n__decorate([SendMessage('this[]'), ValidateIndex(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number, Object]), __metadata(\"design:returntype\", void 0)], SimpleArray.prototype, \"setItem\", null);\n\nSimpleArray = SimpleArray_1 = __decorate([registerModel('arrwrppr'), __metadata(\"design:paramtypes\", [Number, Object])], SimpleArray);\n/**\r\n * ArrayList class\r\n *\r\n * @export\r\n * @class ArrayList\r\n * @implements {IList}\r\n * @implements {Iterable<unknown>}\r\n */\n\nlet ArrayList = /*#__PURE__*/(() => {\n  let ArrayList = class ArrayList {\n    constructor() {\n      /**\r\n       * _internalArray\r\n       *\r\n       * @protected\r\n       * @type {unknown[]}\r\n       * @memberof ArrayList\r\n       */\n      this._internalArray = [];\n    }\n    /**\r\n     * Support iterator for arrayList\r\n    *\r\n    * @return {*}  {Iterator<unknown>}\r\n    * @memberof ArrayList\r\n    */\n\n    /* c8 ignore next 5 */\n\n\n    *[Symbol.iterator]() {\n      for (const key of this.internalArray) {\n        yield key.Value;\n      }\n    }\n    /**\r\n     * Gets the number of elements actually contained in the ArrayList.\r\n     *\r\n     * @readonly\r\n     * @type {number}\r\n     * @memberof ArrayList\r\n     */\n\n\n    get count() {\n      return this.internalArray.length;\n    }\n    /**\r\n     * Removes the element at the specified index of the ArrayList.\r\n     *\r\n     * @param {number} index\r\n     * @memberof ArrayList\r\n     */\n\n\n    removeAt(index) {\n      this.internalArray.splice(index, 1);\n    }\n    /**\r\n     * Remove element from array.\r\n     *\r\n     * @param {*} value\r\n     * @return {*}  {boolean}\r\n     * @memberof ArrayList\r\n     */\n\n\n    remove(value) {\n      let valueToDelete;\n      const idx = this.internalArray.findIndex(element => {\n        if (element.ContainsObservable) {\n          const model = WebMapService.currentService.core.getModel(element.Value);\n\n          if (model.id === value.Value) {\n            valueToDelete = WebMapService.currentService.core.getModel(element.Value);\n            return true;\n          }\n\n          return false;\n        } else {\n          valueToDelete = value;\n          return element.Value === value;\n        }\n      });\n\n      if (idx !== -1) {\n        const removeResult = this.internalArray.splice(idx, 1).length > 0;\n        return this.removeHandler(removeResult ? valueToDelete : undefined);\n      }\n\n      return false;\n    }\n    /**\r\n     * Function in charge of validate value and apply decorator\r\n     *\r\n     * @param {*} value\r\n     * @return {*}  {boolean}\r\n     * @memberof ArrayList\r\n     */\n\n\n    removeHandler(value) {\n      return value !== undefined;\n    }\n    /**\r\n     * Adds an object to the end of the ArrayList.\r\n     *\r\n     * @param {unknown} value\r\n     * @memberof ArrayList\r\n     */\n\n\n    add(value) {\n      this.internalArray.push({\n        ContainsObservable: false,\n        Value: value\n      });\n    }\n    /**\r\n     * Sorts the elements in the entire ArrayList.\r\n     *\r\n     * @memberof ArrayList\r\n     */\n\n\n    sort() {\n      if (this.internalArray.length > 0 && typeof this.internalArray[0].Value === 'object') {\n        this.internalArray.sort((a, b) => {\n          if (a.Value?.CompareTo && b.Value?.CompareTo) {\n            return a.Value.CompareTo(b.Value);\n          }\n        });\n      } else {\n        this.internalArray.sort((a1, b2) => {\n          const nestedTernaryResult = a1.Value < b2.Value ? -1 : 0;\n          return a1.Value > b2.Value ? 1 : nestedTernaryResult;\n        });\n      }\n    }\n    /**\r\n     * Removes all elements from the ArrayList.\r\n     *\r\n     * @memberof ArrayList\r\n     */\n\n\n    clear() {\n      this.internalArray.splice(0, this.internalArray.length);\n    }\n    /**\r\n     * internalArray\r\n     *\r\n     * @readonly\r\n     * @type {unknown[]}\r\n     * @memberof ArrayList\r\n     */\n\n\n    get internalArray() {\n      // eslint-disable-next-line no-underscore-dangle\n      return this._internalArray;\n    }\n    /**\r\n     * internalArray\r\n    *\r\n    * @memberof ArrayList\r\n    */\n\n    /* c8 ignore next 3 */\n\n\n    set internalArray(value) {\n      this._internalArray = value;\n    }\n    /**\r\n    * Gets  element by index.\r\n    *\r\n    * @type {T[]}\r\n    * @memberof List\r\n    */\n\n    /* c8 ignore next 4 */\n\n\n    getItem(index) {\n      const itemObject = this.internalArray[index];\n\n      if (itemObject && itemObject.ContainsObservable) {\n        const idModel = this.internalArray[index];\n        return WebMapService.currentService.core.getModel(idModel.Value);\n      }\n\n      return this.internalArray[index].Value;\n    }\n\n  };\n\n  __decorate([SendMessage(), ValidateIndex(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number]), __metadata(\"design:returntype\", void 0)], ArrayList.prototype, \"removeAt\", null);\n\n  __decorate([SendMessage('remove'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", Boolean)], ArrayList.prototype, \"removeHandler\", null);\n\n  __decorate([SendMessage(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], ArrayList.prototype, \"add\", null);\n\n  __decorate([SendMessage(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], ArrayList.prototype, \"clear\", null);\n\n  __decorate([ValidateIndex(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number]), __metadata(\"design:returntype\", Object)], ArrayList.prototype, \"getItem\", null);\n\n  ArrayList = __decorate([registerModel('arrlstwrppr')], ArrayList);\n  /*****************************************************************************\r\n   * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n   *\r\n   * This file is part of the Mobilize Frameworks, which is\r\n   * proprietary and confidential.\r\n   *\r\n   * NOTICE:  All information contained herein is, and remains\r\n   * the property of Mobilize.Net Corporation.\r\n   * The intellectual and technical concepts contained herein are\r\n   * proprietary to Mobilize.Net Corporation and may be covered\r\n   * by U.S. Patents, and are protected by trade secret or copyright law.\r\n   * Dissemination of this information or reproduction of this material\r\n   * is strictly forbidden unless prior written permission is obtained\r\n   * from Mobilize.Net Corporation.\r\n   ******************************************************************************/\n\n  /**\r\n   * Subscription Event helper for custom Events\r\n   *\r\n   * @export\r\n   * @class SubscriptionEvent\r\n   * @template T\r\n   */\n\n  return ArrayList;\n})();\n\nclass SubscriptionEvent {\n  constructor() {\n    /**\r\n     * T Function to be customized and context to be called.\r\n     *\r\n     * @type {[T, any][]}\r\n     * @memberof SubscriptionEvent\r\n     */\n    this.handlers = [];\n  }\n  /**\r\n   * Dispatch and fire event\r\n   *\r\n   * @param {...any[]} args\r\n   * @return {*}  {T}\r\n   * @memberof SubscriptionEvent\r\n   */\n\n\n  dispatch(...args) {\n    return this.fire(args);\n  }\n  /**\r\n   * Fires the event and executes each handler\r\n   *\r\n   * @param {any[]} args\r\n   * @memberof SubscriptionEvent\r\n   */\n\n\n  fire(args) {\n    //Map will create a copy to be immune of changes in this.handlers like calls to removeHandler, if no copy of the collection is created\n    //changes in this.handlers tend to skip items in the loop\n    for (const handler of this.handlers.map(x => {\n      return x;\n    })) {\n      //The handler to be invoked might be removed by code, so we have to double check\n      const idx = this.handlers.findIndex(h => h == handler);\n\n      if (idx >= 0 && handler[0] instanceof Function) {\n        handler[0].apply(handler[1] ?? window, args);\n      }\n    }\n  }\n  /**\r\n   * Add handler to the event\r\n   *\r\n   * @param {T} handler\r\n   * @param {*} [self=null]\r\n   * @returns {T}\r\n   * @memberof SubscriptionEvent\r\n   */\n\n\n  addHandler(handler, self = null) {\n    this.handlers.push([handler, self]);\n    return handler;\n  }\n  /**\r\n   * Removes handler from the event\r\n   *\r\n   * @param {T} handler\r\n   * @param {*} [self=null]\r\n   * @memberof SubscriptionEvent\r\n   */\n\n\n  removeHandler(handler, self = null) {\n    if (handler) {\n      let idx = this.handlers.findIndex(h => {\n        debugger;\n        return h[0] == handler && h[1] == self;\n      }); // Final search for lambda expression using toString()\n\n      idx = idx > 0 ? idx : this.handlers.findIndex(h => h[0].toString() == handler.toString() && h[1] == self);\n\n      if (idx >= 0) {\n        this.handlers.splice(idx, 1);\n      }\n    }\n  }\n\n}\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { AlertComponent, AppVersionInfoHelper, ArrayHelper, ArrayList, BaseComponentsModule, BringTopService, ContainerComponent, ContainerDirective, CustomEvent, EventData, FilterObject, FormsContainerComponent, List, LoadingComponent, MockService, RemoveAmpersand, SimpleArray, SimpleDictionary, SubscriptionEvent, TestUtils, TypeResolver, UpdateState, ValidateIndex, ValidateObject, dataTransfer, serverEvent }; //# sourceMappingURL=mobilize-base-components.mjs.map","map":null,"metadata":{},"sourceType":"module"}