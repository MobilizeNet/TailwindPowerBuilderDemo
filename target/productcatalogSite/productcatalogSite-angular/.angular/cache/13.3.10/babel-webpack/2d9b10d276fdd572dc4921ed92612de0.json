{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1028);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  973:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./range\");\n    /***/\n  },\n\n  /***/\n  1028:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(973)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function ($, undefined) {\n        var kendo = window.kendo;\n        var ui = kendo.ui;\n        var editorNS = ui.editor;\n        var Widget = ui.Widget;\n        var extend = $.extend;\n        var keys = kendo.keys;\n        var NS = \".kendoEditor\";\n        var EditorUtils = editorNS.EditorUtils;\n        var ToolTemplate = editorNS.ToolTemplate;\n        var Tool = editorNS.Tool;\n        var outerWidth = kendo._outerWidth;\n        var outerHeight = kendo._outerHeight;\n        var OVERFLOWANCHOR = \"overflowAnchor\";\n        var focusable = \".k-tool-group:visible .k-tool:not(.k-disabled):not([disabled]),\" + \".k-tool.k-overflow-anchor:visible,\" + \".k-tool-group:visible .k-colorpicker:not(input),\" + \".k-tool-group:visible .k-selectbox,\" + \".k-tool-group:visible .k-dropdownlist,\" + \".k-tool-group:visible .k-combobox .k-input-inner\";\n        var toolNamesByCssClass = {\n          \"k-i-sup-script\": \"superscript\",\n          \"k-i-sub-script\": \"subscript\",\n          \"k-i-align-left\": \"justifyLeft\",\n          \"k-i-align-center\": \"justifyCenter\",\n          \"k-i-align-right\": \"justifyRight\",\n          \"k-i-align-justify\": \"justifyFull\",\n          \"k-i-list-unordered\": \"insertUnorderedList\",\n          \"k-i-list-ordered\": \"insertOrderedList\",\n          \"k-i-list-roman-upper\": \"insertUpperRomanList\",\n          \"k-i-list-roman-lower\": \"insertLowerRomanList\",\n          \"k-i-import\": \"import\",\n          \"k-i-indent-increase\": \"indent\",\n          \"k-i-indent-decrease\": \"outdent\",\n          \"k-i-link-horizontal\": \"createLink\",\n          \"k-i-unlink-horizontal\": \"unlink\",\n          \"k-i-image\": \"insertImage\",\n          \"k-i-file-add\": \"insertFile\",\n          \"k-i-html\": \"viewHtml\",\n          \"k-i-foreground-color\": \"foreColor\",\n          \"k-i-paint\": \"backColor\",\n          \"k-i-table-insert\": \"createTable\",\n          \"k-i-table-column-insert-left\": \"addColumnLeft\",\n          \"k-i-table-column-insert-right\": \"addColumnRight\",\n          \"k-i-table-row-insert-above\": \"addRowAbove\",\n          \"k-i-table-row-insert-below\": \"addRowBelow\",\n          \"k-i-table-row-delete\": \"deleteRow\",\n          \"k-i-table-column-delete\": \"deleteColumn\",\n          \"k-i-table-properties\": \"tableWizard\",\n          \"k-i-table-wizard\": \"tableWizardInsert\",\n          \"k-i-table-position-left\": \"tableAlignLeft\",\n          \"k-i-table-position-center\": \"tableAlignCenter\",\n          \"k-i-table-position-right\": \"tableAlignRight\",\n          \"k-i-clear-css\": \"cleanFormatting\",\n          \"k-i-cells-merge-horizontally\": \"mergeCellsHorizontally\",\n          \"k-i-cells-merge-vertically\": \"mergeCellsVertically\",\n          \"k-i-cell-split-horizontally\": \"splitCellHorizontally\",\n          \"k-i-cell-split-vertically\": \"splitCellVertically\",\n          \"k-i-copy-format\": \"copyFormat\",\n          \"k-i-apply-format\": \"applyFormat\",\n          \".k-i-undo\": \"undo\",\n          \"k-i-redo\": \"redo\"\n        };\n        var OverflowAnchorTool = Tool.extend({\n          initialize: function (ui, options) {\n            var toolbar = options.editor.toolbar;\n            ui.attr(\"aria-controls\", options.editor.element.attr(\"id\")).on(\"click\", function () {\n              this.overflowPopup.toggle();\n            }.bind(toolbar));\n          },\n          options: {\n            name: OVERFLOWANCHOR\n          },\n          command: $.noop,\n          update: $.noop,\n          destroy: $.noop\n        });\n        EditorUtils.registerTool(OVERFLOWANCHOR, new OverflowAnchorTool({\n          key: \"\",\n          ctrl: true,\n          template: new ToolTemplate({\n            template: EditorUtils.overflowAnchorTemplate\n          })\n        }));\n        var Toolbar = Widget.extend({\n          init: function (element, options) {\n            var that = this;\n            options = extend({}, options, {\n              name: \"EditorToolbar\"\n            });\n            Widget.fn.init.call(that, element, options);\n\n            if (options.popup) {\n              that._initPopup();\n            }\n\n            if (options.resizable && options.resizable.toolbar) {\n              that._resizeHandler = kendo.onResize(function () {\n                that.resize(true);\n              });\n              that.element.addClass(\"k-toolbar-resizable\");\n            }\n          },\n          events: [\"execute\"],\n          groups: {\n            basic: [\"bold\", \"italic\", \"underline\", \"strikethrough\"],\n            undo: [\"undo\", \"redo\"],\n            scripts: [\"subscript\", \"superscript\"],\n            alignment: [\"justifyLeft\", \"justifyCenter\", \"justifyRight\", \"justifyFull\"],\n            links: [\"insertImage\", \"insertFile\", \"createLink\", \"unlink\"],\n            lists: [\"insertUnorderedList\", \"insertOrderedList\", \"insertUpperRomanList\", \"insertLowerRomanList\", \"indent\", \"outdent\"],\n            tablesInsert: [\"createTable\"],\n            tablesAddDelete: [\"addColumnLeft\", \"addColumnRight\", \"addRowAbove\", \"addRowBelow\", \"deleteRow\", \"deleteColumn\"],\n            tablesMerge: [\"mergeCellsHorizontally\", \"mergeCellsVertically\", \"splitCellHorizontally\", \"splitCellVertically\"],\n            tablesPosition: [\"tableAlignLeft\", \"tableAlignCenter\", \"tableAlignRight\"],\n            advanced: [\"viewHtml\", \"cleanFormatting\", \"print\", \"pdf\", \"exportAs\", \"import\"],\n            fonts: [\"fontName\", \"fontSize\"],\n            colors: [\"foreColor\", \"backColor\"],\n            formatPainter: [\"copyFormat\", \"applyFormat\"]\n          },\n          overflowFlaseTools: [\"formatting\", \"fontName\", \"fontSize\", \"foreColor\", \"backColor\", \"insertHtml\"],\n          _initPopup: function () {\n            var that = this;\n            this.window = $(this.element).wrap(\"<div class='editorToolbarWindow' />\").parent().prepend(\"<span class='k-editortoolbar-dragHandle'><span class='k-icon k-i-handler-drag'></span></span>\").kendoWindow({\n              title: false,\n              resizable: false,\n              draggable: {\n                dragHandle: \".k-editortoolbar-dragHandle\"\n              },\n              animation: {\n                open: {\n                  effects: \"fade:in\"\n                },\n                close: {\n                  effects: \"fade:out\"\n                }\n              },\n              minHeight: 42,\n              visible: false,\n              autoFocus: false,\n              actions: [],\n              dragend: function () {\n                this._moved = true;\n              }\n            }).on(\"mousedown\", function (e) {\n              if (!$(e.target).is(\".k-icon\")) {\n                that.preventPopupHide = true;\n              }\n            }).on(\"focusout\", function () {\n              that.options.editor.element.focusout();\n            }).data(\"kendoWindow\");\n          },\n          _toggleOverflowStyles: function (element, show) {\n            element.find(\"> li\").toggleClass(\"k-item\", show).find(\".k-tool:not(.k-disabled), .k-overflow-button\").toggleClass(\"k-overflow-button\", show);\n          },\n          _initOverflowPopup: function (ui) {\n            var that = this;\n            var popupTemplate = \"<ul class='k-editor-overflow-popup k-overflow-container k-list-container'></ul>\";\n            that.overflowPopup = $(popupTemplate).appendTo(\"body\").kendoPopup({\n              anchor: ui,\n              origin: kendo.support.isRtl(that.element) ? \"bottom left\" : \"bottom right\",\n              position: kendo.support.isRtl(that.element) ? \"top left\" : \"top right\",\n              copyAnchorStyles: false,\n              open: function (e) {\n                if (this.element.is(\":empty\")) {\n                  e.preventDefault();\n                }\n\n                that._toggleOverflowStyles(this.element, true);\n\n                ui.attr(\"aria-expanded\", true);\n              },\n              close: function () {\n                ui.attr(\"aria-expanded\", false);\n              },\n              activate: that.focusOverflowPopup.bind(that)\n            }).data(\"kendoPopup\");\n          },\n          items: function () {\n            var isResizable = this.options.resizable && this.options.resizable.toolbar,\n                popup,\n                result;\n            result = this.element.children().find(\"> *, select\");\n\n            if (isResizable) {\n              popup = this.overflowPopup;\n              result = result.add(popup.element.children().find(\"> *\"));\n            }\n\n            return result;\n          },\n          focused: function () {\n            var active = kendo._activeElement(),\n                popup = this.window,\n                overflowPopup = this.overflowPopup;\n\n            return popup && $(active).closest(popup.wrapper).length || overflowPopup && overflowPopup.visible();\n          },\n          toolById: function (name) {\n            var id,\n                tools = this.tools;\n\n            for (id in tools) {\n              if (id.toLowerCase() == name) {\n                return tools[id];\n              }\n            }\n          },\n          toolGroupFor: function (toolName) {\n            var i,\n                groups = this.groups;\n\n            if (this.isCustomTool(toolName)) {\n              return \"custom\";\n            }\n\n            for (i in groups) {\n              if ($.inArray(toolName, groups[i]) >= 0) {\n                return i;\n              }\n            }\n          },\n          bindTo: function (editor) {\n            var that = this,\n                window = that.window; // detach from editor that was previously listened to\n\n            if (that._editor) {\n              that._editor.unbind(\"select\", that.resize.bind(that));\n            }\n\n            that._editor = editor;\n\n            if (that.options.resizable && that.options.resizable.toolbar) {\n              editor.options.tools.push(OVERFLOWANCHOR);\n            } // re-initialize the tools\n\n\n            that.tools = that.expandTools(editor.options.tools);\n            that.render();\n            that.element.find(\".k-combobox .k-input-inner\").on(\"keydown\", function (e) {\n              var combobox = $(this).closest(\".k-combobox\").data(\"kendoComboBox\"),\n                  key = e.keyCode;\n\n              if (key == keys.RIGHT || key == keys.LEFT) {\n                combobox.close();\n              } else if (key == keys.DOWN) {\n                if (!combobox.dropDown.isOpened()) {\n                  e.stopImmediatePropagation();\n                  combobox.open();\n                }\n              }\n            });\n\n            that._attachEvents();\n\n            that.items().each(function initializeTool() {\n              var toolName = that._toolName(this),\n                  tool = toolName !== \"moreVertical\" ? that.tools[toolName] : that.tools.overflowAnchor,\n                  options = tool && tool.options,\n                  messages = editor.options.messages,\n                  description = options && options.tooltip || messages[toolName],\n                  ui = $(this);\n\n              if (!tool || !tool.initialize) {\n                return;\n              }\n\n              if (toolName == \"fontSize\" || toolName == \"fontName\") {\n                var inheritText = messages[toolName + \"Inherit\"];\n                ui.find(\"input\").val(inheritText).end().find(\"span.k-input-inner\").text(inheritText).end();\n              }\n\n              tool.initialize(ui, {\n                title: that._appendShortcutSequence(description, tool),\n                editor: that._editor\n              });\n              ui.closest(\".k-dropdownlist\", that.element).addClass(\"k-editor-widget\");\n              ui.closest(\".k-combobox\", that.element).addClass(\"k-editor-widget\");\n              ui.closest(\".k-colorpicker\", that.element).next(\".k-colorpicker\").addClass(\"k-editor-widget\");\n            });\n            editor.bind(\"select\", that.resize.bind(that));\n            that.update();\n\n            if (window) {\n              window.wrapper.css({\n                top: \"\",\n                left: \"\",\n                width: \"\"\n              });\n            }\n          },\n          show: function () {\n            var that = this,\n                window = that.window,\n                editorOptions = that.options.editor,\n                wrapper,\n                editorElement,\n                editorOffset,\n                browser = kendo.support.browser;\n\n            if (window) {\n              wrapper = window.wrapper;\n              editorElement = editorOptions.element;\n\n              if (!wrapper.is(\":visible\") || !that.window.options.visible) {\n                if (!wrapper[0].style.width) {\n                  wrapper.width(this._getWindowWidth());\n                } // track content position when other parts of page change\n\n\n                if (!window._moved) {\n                  editorOffset = editorElement.offset();\n                  wrapper.css({\n                    top: Math.max(0, parseInt(editorOffset.top, 10) - outerHeight(wrapper) - parseInt(that.window.element.css(\"padding-bottom\"), 10)),\n                    left: Math.max(0, parseInt(editorOffset.left, 10))\n                  });\n                }\n\n                if ((browser.msie || browser.edge) && that._overlaps(editorElement)) {\n                  setTimeout(function () {\n                    window.open();\n                  }, 0);\n                } else {\n                  window.open();\n                }\n              }\n            }\n          },\n          _getWindowWidth: function () {\n            var that = this,\n                wrapper = that.window.wrapper,\n                editorElement = that.options.editor.element;\n            return outerWidth(editorElement) - parseInt(wrapper.css(\"border-left-width\"), 10) - parseInt(wrapper.css(\"border-right-width\"), 10);\n          },\n          _overlaps: function (box) {\n            var toolbarWrapper = this.window.wrapper,\n                toolbarWrapperOffset = toolbarWrapper.offset(),\n                toolbarWrapperLeft = toolbarWrapperOffset.left,\n                toolbarWrapperTop = toolbarWrapperOffset.top,\n                boxOffset = box.offset(),\n                boxOffsetLeft = boxOffset.left,\n                boxOffsetTop = boxOffset.top;\n            return !(boxOffsetLeft + box.width() < toolbarWrapperLeft || boxOffsetLeft > toolbarWrapperLeft + toolbarWrapper.width() || boxOffsetTop + box.height() < toolbarWrapperTop || boxOffsetTop > toolbarWrapperTop + toolbarWrapper.height());\n          },\n          hide: function () {\n            if (this.window) {\n              this.window.close();\n            }\n          },\n          focus: function () {\n            var TABINDEX = \"tabIndex\";\n            var element = this.element;\n\n            var tabIndex = this._editor.element.attr(TABINDEX); // Chrome can't focus something which has already been focused\n\n\n            element.attr(TABINDEX, tabIndex || 0).trigger(\"focus\").find(focusable).first().trigger(\"focus\");\n\n            if (!tabIndex && tabIndex !== 0) {\n              element.removeAttr(TABINDEX);\n            }\n          },\n          focusOverflowPopup: function () {\n            var TABINDEX = \"tabIndex\";\n            var element = this.overflowPopup.element;\n\n            var tabIndex = this._editor.element.attr(TABINDEX);\n\n            element.closest(\".k-animation-container\").addClass(\"k-overflow-wrapper\");\n            element.attr(TABINDEX, tabIndex || 0).find(focusable).first().trigger(\"focus\");\n\n            if (!tabIndex && tabIndex !== 0) {\n              element.removeAttr(TABINDEX);\n            }\n          },\n          _appendShortcutSequence: function (localizedText, tool) {\n            if (!tool.key) {\n              return localizedText;\n            }\n\n            var res = localizedText + \" (\";\n\n            if (tool.ctrl) {\n              res += \"Ctrl + \";\n            }\n\n            if (tool.shift) {\n              res += \"Shift + \";\n            }\n\n            if (tool.alt) {\n              res += \"Alt + \";\n            }\n\n            res += tool.key + \")\";\n            return res;\n          },\n          _nativeTools: [\"insertLineBreak\", \"insertParagraph\", \"redo\", \"undo\", \"autoLink\"],\n          tools: {},\n          // tools collection is copied from defaultTools during initialization\n          isCustomTool: function (toolName) {\n            return !(toolName in kendo.ui.Editor.defaultTools);\n          },\n          // expand the tools parameter to contain tool options objects\n          expandTools: function (tools) {\n            var currentTool,\n                i,\n                nativeTools = this._nativeTools,\n                options,\n                defaultTools = kendo.deepExtend({}, kendo.ui.Editor.defaultTools),\n                result = {},\n                name;\n\n            for (i = 0; i < tools.length; i++) {\n              currentTool = tools[i];\n              name = currentTool.name;\n\n              if ($.isPlainObject(currentTool)) {\n                if (name && defaultTools[name]) {\n                  // configured tool\n                  result[name] = extend({}, defaultTools[name]);\n                  extend(result[name].options, currentTool);\n                } else {\n                  // custom tool\n                  options = extend({\n                    cssClass: \"k-i-gear\",\n                    type: \"button\",\n                    title: \"\"\n                  }, currentTool);\n\n                  if (!options.name) {\n                    options.name = \"custom\";\n                  }\n\n                  options.cssClass = \"k-\" + options.name;\n\n                  if (!options.template && options.type == \"button\") {\n                    options.template = editorNS.EditorUtils.buttonTemplate;\n                    options.title = options.title || options.tooltip;\n                  }\n\n                  result[name] = {\n                    options: options\n                  };\n                }\n              } else if (defaultTools[currentTool]) {\n                // tool by name\n                result[currentTool] = defaultTools[currentTool];\n              }\n            }\n\n            for (i = 0; i < nativeTools.length; i++) {\n              if (!result[nativeTools[i]]) {\n                result[nativeTools[i]] = defaultTools[nativeTools[i]];\n              }\n            }\n\n            return result;\n          },\n          render: function () {\n            var that = this,\n                tools = that.tools,\n                options,\n                template,\n                toolElement,\n                toolName,\n                editorElement = that._editor.element,\n                element = that.element.empty(),\n                groupName,\n                newGroupName,\n                toolConfig = that._editor.options.tools,\n                group,\n                i,\n                groupPosition = 0,\n                resizable = that.options.resizable && that.options.resizable.toolbar,\n                overflowFlaseTools = this.overflowFlaseTools;\n\n            function stringify(template) {\n              var result = \"\";\n\n              if (template.getHtml) {\n                result = template.getHtml();\n              } else {\n                if (!kendo.isFunction(template)) {\n                  template = kendo.template(template);\n                }\n\n                result = template(options);\n              }\n\n              return kendo.trim(result);\n            }\n\n            function endGroup() {\n              if (group.children().length) {\n                if (resizable) {\n                  group.data(\"position\", groupPosition);\n                  groupPosition++;\n                }\n\n                group.appendTo(element);\n              }\n            }\n\n            function startGroup(toolName) {\n              if (toolName !== OVERFLOWANCHOR) {\n                group = $(\"<li class='k-tool-group' role='presentation' />\");\n                group.data(\"overflow\", $.inArray(toolName, overflowFlaseTools) === -1 ? true : false);\n              } else {\n                group = $(\"<li class='k-overflow-tools' />\");\n              }\n            }\n\n            element.empty();\n\n            if (toolConfig.length) {\n              toolName = toolConfig[0].name || toolConfig[0];\n            }\n\n            startGroup(toolName, overflowFlaseTools);\n\n            for (i = 0; i < toolConfig.length; i++) {\n              toolName = toolConfig[i].name || toolConfig[i];\n              options = tools[toolName] && tools[toolName].options;\n\n              if (!options && $.isPlainObject(toolName)) {\n                options = toolName;\n              }\n\n              template = options && options.template;\n\n              if (toolName == \"break\") {\n                endGroup();\n                $(\"<li class='k-row-break' role='presentation' />\").appendTo(that.element);\n                startGroup(toolName, overflowFlaseTools);\n              }\n\n              if (!template) {\n                continue;\n              }\n\n              newGroupName = that.toolGroupFor(toolName);\n\n              if (groupName != newGroupName || toolName == OVERFLOWANCHOR) {\n                endGroup();\n                startGroup(toolName, overflowFlaseTools);\n                groupName = newGroupName;\n              }\n\n              if (toolName == OVERFLOWANCHOR) {\n                template.options.title = that.options.messages.overflowAnchor;\n              }\n\n              template = stringify(template);\n              toolElement = $(template).appendTo(group);\n\n              if (newGroupName == \"custom\") {\n                endGroup();\n                startGroup(toolName, overflowFlaseTools);\n              }\n\n              if (options.exec && toolElement.hasClass(\"k-tool\")) {\n                toolElement.on(\"click\", options.exec.bind(editorElement[0]));\n              }\n            }\n\n            endGroup();\n            $(that.element).children(\":has(> .k-tool)\").not(\".k-overflow-tools\").addClass(\"k-button-group\");\n            that.updateGroups();\n\n            if (resizable) {\n              that._initOverflowPopup(that.element.find(\".k-overflow-anchor\"));\n            }\n\n            that.angular(\"compile\", function () {\n              return {\n                elements: that.element\n              };\n            });\n          },\n          updateGroups: function () {\n            $(this.element).children().not(\".k-overflow-tools\").each(function () {\n              $(this).children().removeClass(\"k-group-start k-group-end\").first().addClass(\"k-group-start\").end().last().addClass(\"k-group-end\").end();\n            });\n          },\n          decorateFrom: function (body) {\n            this.items().filter(\".k-decorated\").each(function () {\n              var selectBox = $(this).data(\"kendoSelectBox\");\n\n              if (selectBox) {\n                selectBox.decorate(body);\n              }\n            });\n          },\n          destroy: function () {\n            Widget.fn.destroy.call(this);\n            var id,\n                tools = this.tools;\n\n            for (id in tools) {\n              if (tools[id].destroy) {\n                tools[id].destroy();\n              }\n            }\n\n            if (this.window) {\n              this.window.destroy();\n            }\n\n            if (this._resizeHandler) {\n              kendo.unbindResize(this._resizeHandler);\n            }\n\n            if (this.overflowPopup) {\n              this.overflowPopup.destroy();\n            }\n          },\n          _attachEvents: function () {\n            var that = this,\n                popupElement = that.overflowPopup ? that.overflowPopup.element : $([]);\n            that.attachToolsEvents(that.element.add(popupElement));\n          },\n          attachToolsEvents: function (element) {\n            var that = this,\n                buttons = \"[role=button].k-tool\",\n                enabledButtons = buttons + \":not(.k-disabled)\" + \", [role=button].k-i-import:not(.k-disabled)\",\n                disabledButtons = buttons + \".k-disabled\",\n                dropdown = \".k-dropdownlist\",\n                colorpicker = \".k-colorpicker\",\n                editorTools = [buttons, dropdown, colorpicker].join(\",\");\n            element.off(NS).on(\"mouseenter\" + NS, enabledButtons, function () {\n              $(this).addClass(\"k-hover\");\n            }).on(\"mouseleave\" + NS, enabledButtons, function () {\n              $(this).removeClass(\"k-hover\");\n            }).on(\"mousedown\" + NS, editorTools, function (e) {\n              e.preventDefault();\n            }).on(\"keydown\" + NS, focusable, function (e) {\n              var current = this;\n              var resizable = that.options.resizable && that.options.resizable.toolbar;\n              var direction = kendo.support.isRtl(that.element) ? -1 : 1;\n              var focusableItems;\n              var focusElement,\n                  currentContainer,\n                  keyCode = e.keyCode;\n\n              function move(direction, container, constrain) {\n                var tools = container.find(focusable);\n                var index = tools.index(current) + direction;\n\n                if (constrain) {\n                  index = Math.max(0, Math.min(tools.length - 1, index));\n                }\n\n                return tools[index];\n              }\n\n              if (keyCode == keys.RIGHT || keyCode == keys.LEFT) {\n                if (!$(current).is(\".k-dropdownlist\")) {\n                  focusElement = move(keyCode == keys.RIGHT ? 1 * direction : -1 * direction, that.element, true);\n                } else {\n                  focusElement = $(current);\n                }\n              } else if (resizable && (keyCode == keys.UP || keyCode == keys.DOWN)) {\n                focusElement = move(keyCode == keys.DOWN ? 1 : -1, that.overflowPopup.element, true);\n              } else if (keyCode == keys.HOME) {\n                focusElement = that.element.find(focusable)[0];\n                e.preventDefault();\n              } else if (keyCode == keys.END) {\n                focusableItems = that.element.find(focusable).filter(function () {\n                  return $(this).css('visibility') !== 'hidden';\n                });\n                focusElement = focusableItems[focusableItems.length - 1];\n                e.preventDefault();\n              } else if (keyCode == keys.ESC) {\n                if (that.overflowPopup && that.overflowPopup.visible()) {\n                  that.overflowPopup.close();\n                }\n\n                focusElement = that._editor;\n              } else if (keyCode == keys.TAB && !(e.ctrlKey || e.altKey)) {\n                if (resizable) {\n                  currentContainer = $(current.parentElement).hasClass(\"k-overflow-tool-group\") ? that.overflowPopup.element : that.element;\n                } else {\n                  currentContainer = that.element;\n                } // skip tabbing to disabled tools, and focus the editing area when running out of tools\n\n\n                if (e.shiftKey) {\n                  focusElement = move(-1, currentContainer);\n                } else {\n                  focusElement = move(1, currentContainer);\n\n                  if (!focusElement || $(focusElement).closest(\".k-overflow-tools\").css(\"visibility\") === \"hidden\") {\n                    focusElement = that._editor;\n                  }\n                }\n              }\n\n              if (focusElement) {\n                e.preventDefault();\n                focusElement.focus();\n              }\n\n              if ((keyCode === keys.ENTER || keyCode === keys.SPACEBAR) && ($(current).is(\"button\") || $(current).is(\"a\")) && !$(current).attr(\"href\")) {\n                //anchors without href attribute do not respond to Enter key\n                that._executeToolCommand(current, e);\n              }\n            }).on(\"click\" + NS, enabledButtons, function (e) {\n              that._executeToolCommand(this, e);\n            }).on(\"click\" + NS, disabledButtons, function (e) {\n              e.preventDefault();\n            });\n          },\n          _executeToolCommand: function (toolElement, e) {\n            var that = this;\n            var button = $(toolElement);\n            e.preventDefault();\n            e.stopPropagation();\n            button.removeClass(\"k-hover\");\n\n            if (!button.is(\"[data-popup]\")) {\n              that._editor.exec(that._toolName(toolElement));\n            }\n          },\n          _toolName: function (element) {\n            if (!element) {\n              return;\n            }\n\n            var className = element.className;\n\n            if (/k-tool\\b/i.test(className)) {\n              className = element.firstChild.className;\n            }\n\n            var tool = $.grep(className.split(\" \"), function (x) {\n              return !/^k-(widget|tool|tool-icon|icon|state-hover|header|combobox|dropdown|selectbox|colorpicker)$/i.test(x);\n            });\n\n            if (tool[0]) {\n              var toolname = tool[0];\n\n              if (toolNamesByCssClass[toolname]) {\n                toolname = toolNamesByCssClass[toolname];\n              }\n\n              if (toolname.indexOf(\"k-i-\") >= 0) {\n                return kendo.toCamelCase(toolname.substring(toolname.indexOf(\"k-i-\") + 4));\n              } else {\n                return toolname.substring(toolname.lastIndexOf(\"-\") + 1);\n              }\n            }\n\n            return \"custom\";\n          },\n          refreshTools: function () {\n            var that = this,\n                editor = that._editor,\n                range = editor.getRange(),\n                nodes = editorNS.RangeUtils.textNodes(range),\n                immutables = editor.options.immutables,\n                immutablesContext = that._immutablesContext(range);\n\n            nodes = editorNS.Dom.filterBy(nodes, editorNS.Dom.htmlIndentSpace, true);\n\n            if (!nodes.length) {\n              nodes = [range.startContainer];\n            }\n\n            that.items().each(function () {\n              var tool = that.tools[that._toolName(this)];\n\n              if (tool) {\n                var ui = $(this);\n\n                if (tool.update) {\n                  tool.update(ui, nodes, editor.undoRedoStack);\n                }\n\n                if (immutables) {\n                  that._updateImmutablesState(tool, ui, immutablesContext);\n                }\n              }\n            });\n            this.update();\n          },\n          _immutablesContext: function (range) {\n            if (this._editor.options.immutables) {\n              if (range.collapsed) {\n                return editorNS.Immutables.immutablesContext(range);\n              } else {\n                return editorNS.RangeUtils.editableTextNodes(range).length === 0;\n              }\n            }\n          },\n          _updateImmutablesState: function (tool, ui, immutablesContext) {\n            var name = tool.name;\n            var uiElement = ui;\n            var trackImmutables = tool.options.trackImmutables;\n\n            if (trackImmutables === undefined) {\n              trackImmutables = $.inArray(name, editorNS.Immutables.toolsToBeUpdated) > -1;\n            }\n\n            if (trackImmutables) {\n              var display = immutablesContext ? \"none\" : \"\";\n\n              if (!ui.is(\".k-tool\")) {\n                var uiData = ui.data();\n\n                for (var key in uiData) {\n                  if (key.match(/^kendo[A-Z][a-zA-Z]*/)) {\n                    var widget = uiData[key];\n                    uiElement = widget.wrapper;\n                    break;\n                  }\n                }\n              }\n\n              uiElement.css(\"display\", display);\n              var groupUi = uiElement.closest(\"li\");\n\n              if (groupUi.children(\":visible\").length === 0) {\n                groupUi.css(\"display\", display);\n              }\n            }\n          },\n          update: function () {\n            this.updateGroups();\n          },\n          _resize: function (e) {\n            var containerWidth = e.width;\n            var resizable = this.options.resizable && this.options.resizable.toolbar;\n            var popup = this.overflowPopup;\n            var editorElement = this.options.editor.element;\n            var toolbarWindow = this.window;\n            this.refreshTools();\n\n            if (!resizable) {\n              return;\n            }\n\n            if (toolbarWindow) {\n              toolbarWindow.wrapper.width(this._getWindowWidth());\n\n              if (!toolbarWindow._moved) {\n                toolbarWindow.wrapper.css({\n                  left: Math.max(0, parseInt(editorElement.offset().left, 10))\n                });\n              }\n            }\n\n            if (popup.visible()) {\n              popup.close(true);\n            }\n\n            this._refreshWidths();\n\n            this._shrink(containerWidth);\n\n            this._stretch(containerWidth);\n\n            this._toggleOverflowStyles(this.element, false);\n\n            this._toggleOverflowStyles(this.overflowPopup.element, true);\n\n            this.element.children(\"li.k-overflow-tools\").css(\"visibility\", popup.element.is(\":empty\") ? \"hidden\" : \"visible\");\n          },\n          _refreshWidths: function () {\n            this.element.children(\"li\").each(function (idx, element) {\n              var group = $(element);\n              group.data(\"outerWidth\", outerWidth(group, true));\n            });\n          },\n          _shrink: function (width) {\n            var group, visibleGroups;\n\n            if (width < this._groupsWidth()) {\n              visibleGroups = this._visibleGroups().filter(\":not(.k-overflow-tools)\");\n\n              for (var i = visibleGroups.length - 1; i >= 0; i--) {\n                group = visibleGroups.eq(i);\n\n                if (width > this._groupsWidth()) {\n                  break;\n                } else {\n                  this._hideGroup(group);\n                }\n              }\n            }\n          },\n          _stretch: function (width) {\n            var group, hiddenGroups;\n\n            if (width > this._groupsWidth()) {\n              hiddenGroups = this._hiddenGroups();\n\n              for (var i = 0; i < hiddenGroups.length; i++) {\n                group = hiddenGroups.eq(i);\n\n                if (width < this._groupsWidth() || !this._showGroup(group, width)) {\n                  break;\n                }\n              }\n            }\n          },\n          _hiddenGroups: function () {\n            var popup = this.overflowPopup;\n            var hiddenGroups = this.element.children(\"li.k-tool-group\").filter(\":hidden\");\n            hiddenGroups = hiddenGroups.add(popup.element.children(\"li\"));\n            hiddenGroups.sort(function (a, b) {\n              return $(a).data(\"position\") > $(b).data(\"position\") ? 1 : -1;\n            });\n            return hiddenGroups;\n          },\n          _visibleGroups: function () {\n            return this.element.children(\"li.k-tool-group, li.k-overflow-tools\").filter(\":visible\");\n          },\n          _groupsWidth: function () {\n            var width = 0;\n\n            this._visibleGroups().each(function () {\n              width += $(this).data(\"outerWidth\");\n            });\n\n            return Math.ceil(width);\n          },\n          _hideGroup: function (group) {\n            if (group.data(\"overflow\")) {\n              var popup = this.overflowPopup;\n              group.detach().prependTo(popup.element).addClass(\"k-overflow-tool-group\");\n            } else {\n              group.addClass(\"k-hidden\");\n            }\n          },\n          _showGroup: function (group, width) {\n            var position, previous, groupWidth;\n\n            if (group.hasClass('k-disabled')) {\n              return true;\n            }\n\n            if (group.hasClass(\"k-overflow-tool-group\")) {\n              groupWidth = group.data(\"outerWidth\");\n            } else {\n              group.removeClass(\"k-hidden\");\n              groupWidth = outerWidth(group, true);\n              group.addClass(\"k-hidden\");\n            }\n\n            if (group.length && width > this._groupsWidth() + groupWidth) {\n              if (group.hasClass(\"k-overflow-tool-group\")) {\n                position = group.data(\"position\");\n\n                if (position === 0) {\n                  group.detach().prependTo(this.element);\n                } else {\n                  previous = this.element.children().filter(function (idx, element) {\n                    return $(element).data(\"position\") === position - 1;\n                  });\n                  group.detach().insertAfter(previous);\n                }\n\n                group.removeClass(\"k-overflow-tool-group\");\n              } else {\n                group.removeClass(\"k-hidden\");\n              }\n\n              return true;\n            }\n\n            return false;\n          }\n        });\n        $.extend(editorNS, {\n          Toolbar: Toolbar\n        });\n      })(window.kendo.jQuery);\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}