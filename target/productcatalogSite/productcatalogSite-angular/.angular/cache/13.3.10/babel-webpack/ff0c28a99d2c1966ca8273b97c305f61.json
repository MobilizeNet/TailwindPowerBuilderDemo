{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1475);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1051:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.core\");\n    /***/\n  },\n\n  /***/\n  1308:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.progressbar\");\n    /***/\n  },\n\n  /***/\n  1475:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1051), __webpack_require__(1308)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"stepper\",\n        name: \"Stepper\",\n        category: \"web\",\n        description: \"The Stepper widget displays navigation steps.\",\n        depends: [\"core\", \"progressbar\"]\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n            keys = kendo.keys,\n            extend = $.extend,\n            STEPPER = \".kendoStepper\",\n            CLICK = \"click\",\n            ACTIVATE = \"activate\",\n            SELECT = \"select\",\n            KEYDOWN = \"keydown\",\n            FOCUSOUT = \"focusout\",\n            DOT = \".\",\n            SPACE = \" \",\n            VERTICAL = \"vertical\",\n            TABINDEX = \"tabindex\",\n            ARIA_CURRENT = \"aria-current\",\n            ARIA_DISABLED = \"aria-disabled\",\n            ARIA_INVALID = \"aria-invalid\",\n            ARIA_HIDDEN = \"aria-hidden\";\n        var stepStyles = {\n          step: \"k-step\",\n          firstStep: \"k-step-first\",\n          lastStep: \"k-step-last\",\n          doneStep: \"k-step-done\",\n          successStep: \"k-step-success\",\n          errorStep: \"k-step-error\",\n          currentStep: \"k-step-current\",\n          focusStep: \"k-step-focus\",\n          disabledStep: \"k-step-disabled\",\n          stepLink: \"k-step-link\",\n          stepIndicator: \"k-step-indicator\",\n          stepLabel: \"k-step-label\"\n        };\n        var stepperStyles = {\n          widget: \"k-widget k-stepper\",\n          stepperLinear: \"k-stepper-linear\",\n          stepList: \"k-step-list\",\n          stepListHorizontal: \"k-step-list-horizontal\",\n          stepListVertical: \"k-step-list-vertical\"\n        };\n        var Step = kendo.Class.extend({\n          init: function (options) {\n            this.options = extend({}, this.options, options);\n\n            this._render();\n          },\n          options: {\n            label: \"\",\n            icon: \"\",\n            successIcon: \"\",\n            iconTemplate: \"\",\n            enabled: true,\n            error: false,\n            selected: false,\n            isFirstStep: false,\n            isLastStep: false,\n            indicatorVisible: true,\n            labelVisible: true,\n            index: 0,\n            previous: false,\n            selectable: true\n          },\n          _indicatorTemplate: '<span class=\"k-step-indicator\" aria-hidden=\"true\">' + '#if(successIcon && previous && !error) {#' + '<span class=\"k-step-indicator-icon k-icon k-i-#: successIcon #\"></span>' + '#} else if(icon) {#' + '<span class=\"k-step-indicator-icon k-icon k-i-#: icon #\"></span>' + '#} else if(previous && !error) {#' + '<span class=\"k-step-indicator-icon k-icon k-i-check\"></span>' + '#} else {#' + '<span class=\"k-step-indicator-text\">#: index + 1 #</span>' + '#}#' + '</span>',\n          _labelTemplate: '<span class=\"k-step-label\">' + '<span class=\"k-step-text\">' + '#: label #' + '</span>' + ' ' + '#if(error || (!indicatorVisible && !error && previous)) {#' + '<span class=\"k-icon' + '#if(previous && !error){# k-i-check#}#' + '#if(error){# k-i-warning#}#' + '\" aria-hidden=\"true\"></span>' + '#}#' + '</span>',\n          deselect: function () {\n            this.options.selected = false;\n\n            this._link();\n\n            this._stepClasses();\n          },\n          enable: function (value) {\n            if (this.options.enabled !== value) {\n              this.options.enabled = value;\n              this.options.selectable = value;\n\n              this._link();\n\n              this._stepClasses();\n            }\n          },\n          select: function () {\n            this.options.selected = true;\n\n            this._link();\n\n            this._stepClasses();\n          },\n          getEnabled: function () {\n            return this.options.enabled;\n          },\n          getIndex: function () {\n            return this.options.index;\n          },\n          setPrevious: function (previous) {\n            this.options.previous = previous;\n\n            this._link();\n\n            this._stepClasses();\n          },\n          getSelectable: function () {\n            return this.options.selectable;\n          },\n          getSelected: function () {\n            return this.options.selected;\n          },\n          setValid: function (valid) {\n            if (this.options.error === valid) {\n              this.options.error = !valid;\n\n              this._link();\n\n              this._stepClasses();\n            }\n          },\n          _indicator: function () {\n            var options = this.options,\n                stepIndicator;\n\n            if (!!options.iconTemplate) {\n              stepIndicator = $(\"<span>\").addClass(stepStyles.stepIndicator).attr(ARIA_HIDDEN, \"true\");\n              stepIndicator.append(kendo.template(options.iconTemplate)(options));\n            } else {\n              stepIndicator = kendo.template(this._indicatorTemplate)(options);\n            }\n\n            this.element.find(DOT + stepStyles.stepLink).append(stepIndicator);\n          },\n          _label: function () {\n            var stepLabel = kendo.template(this._labelTemplate)(this.options);\n            this.element.find(DOT + stepStyles.stepLink).append(stepLabel);\n          },\n          _link: function () {\n            var options = this.options;\n            this.element.find(DOT + stepStyles.stepLink).empty();\n\n            this._linkAttributes();\n\n            if (options.indicatorVisible) {\n              this._indicator();\n            }\n\n            if (options.labelVisible) {\n              this._label();\n            }\n          },\n          _linkAttributes: function () {\n            var options = this.options,\n                link = this.element.find(DOT + stepStyles.stepLink);\n            link.removeAttr(ARIA_DISABLED + SPACE + ARIA_INVALID + SPACE + ARIA_CURRENT + SPACE + TABINDEX);\n\n            if (!options.selected) {\n              link.attr(TABINDEX, \"-1\");\n            } else {\n              link.attr(ARIA_CURRENT, \"true\");\n            }\n\n            if (!options.enabled || !options.selectable) {\n              link.attr(ARIA_DISABLED, \"true\");\n            }\n\n            if (options.error) {\n              link.attr(ARIA_INVALID, \"true\");\n            }\n          },\n          _render: function () {\n            var stepLink = $(\"<a href='#'>\").addClass(stepStyles.stepLink).attr(\"title\", this.options.label);\n            this.element = $(\"<li>\").append(stepLink);\n\n            this._link();\n\n            this._stepClasses();\n          },\n          _stepClasses: function () {\n            var options = this.options,\n                stepClasses = stepStyles.step;\n\n            if (options.isFirstStep) {\n              stepClasses += SPACE + stepStyles.firstStep;\n            }\n\n            if (options.isLastStep) {\n              stepClasses += SPACE + stepStyles.lastStep;\n            }\n\n            if (!options.enabled) {\n              stepClasses += SPACE + stepStyles.disabledStep;\n            }\n\n            if (options.error) {\n              stepClasses += SPACE + stepStyles.errorStep;\n            }\n\n            if (options.previous) {\n              stepClasses += SPACE + stepStyles.doneStep;\n\n              if (!options.error) {\n                stepClasses += SPACE + stepStyles.successStep;\n              }\n            } else if (options.selected) {\n              stepClasses += SPACE + stepStyles.currentStep;\n              stepClasses += SPACE + stepStyles.focusStep;\n            }\n\n            this.element.removeClass().addClass(stepClasses);\n          }\n        });\n        var Stepper = Widget.extend({\n          init: function (element, options) {\n            var that = this;\n            options = options || {};\n            Widget.fn.init.call(that, element, options);\n\n            that._indicatorAndLabel();\n\n            that._wrapper();\n\n            if (options.steps && options.steps.length) {\n              that._processSteps(options.steps);\n\n              that._progressBar();\n            }\n\n            that._attachEvents();\n\n            that._resizeHandler = kendo.onResize(function () {\n              that.resize();\n            });\n          },\n          options: {\n            orientation: \"horizontal\",\n            linear: true,\n            indicator: true,\n            label: true,\n            selectOnFocus: false,\n            steps: null,\n            name: \"Stepper\"\n          },\n          events: [ACTIVATE, SELECT, \"kendoKeydown\"],\n          destroy: function () {\n            var that = this;\n\n            if (that.progressBar) {\n              Widget.fn.destroy.call(that.progressBar);\n            }\n\n            Widget.fn.destroy.call(that);\n            kendo.unbindResize(that._resizeHandler);\n            that.wrapper.off(STEPPER);\n          },\n          setOptions: function (options) {\n            var that = this;\n            Widget.fn.setOptions.call(that, options);\n\n            if (that.progressBar) {\n              Widget.fn.destroy.call(that.progressBar);\n            }\n\n            that._indicatorAndLabel();\n\n            that._addStepList();\n\n            if (that.options.steps && that.options.steps.length) {\n              that._processSteps(that.options.steps);\n\n              that._progressBar();\n            }\n          },\n          enable: function (value) {\n            var steps = this.steps(),\n                stepsOptions = this.options.steps;\n\n            var enableStep = function (step, idx) {\n              step.enable(value);\n              stepsOptions[idx] = step.options;\n            };\n\n            if (value) {\n              this.wrapper.removeAttr(ARIA_DISABLED);\n            } else {\n              this.wrapper.attr(ARIA_DISABLED, \"true\");\n            }\n\n            this.progressBar.enable(value);\n            steps.forEach(enableStep);\n          },\n          insertAt: function (index, stepOptions) {\n            var steps = this.options.steps,\n                selectedStep;\n\n            var findSelectedStep = function (step) {\n              if (step.selected) {\n                selectedStep = step;\n              }\n            };\n\n            if (!stepOptions || isNaN(index)) {\n              return;\n            }\n\n            if (index < 0) {\n              index = steps.length + index;\n            }\n\n            if (index < 0) {\n              return;\n            }\n\n            if (!steps) {\n              steps = [];\n            }\n\n            if (steps.length === 0 || index >= steps.length) {\n              index = steps.length;\n            }\n\n            steps.forEach(findSelectedStep);\n\n            if (stepOptions.selected === true) {\n              selectedStep.selected = false;\n            }\n\n            steps.splice(index, 0, stepOptions);\n\n            this._createSteps();\n\n            this._renderSteps();\n\n            this._resetProgressBar();\n\n            this._calculateDimensions();\n          },\n          next: function () {\n            if (!this._steps || this._steps.length <= 1) {\n              return;\n            }\n\n            var selectedStep = this.selectedStep;\n            var selectedIndex = selectedStep.getIndex();\n\n            if (selectedIndex + 1 === this._steps.length) {\n              return;\n            } else {\n              this._select(selectedIndex + 1);\n            }\n          },\n          previous: function () {\n            if (!this._steps || this._steps.length <= 1) {\n              return;\n            }\n\n            var selectedStep = this.selectedStep;\n            var selectedIndex = selectedStep.getIndex();\n\n            if (selectedIndex === 0) {\n              return;\n            } else {\n              this._select(selectedIndex - 1);\n            }\n          },\n          removeAt: function (index) {\n            var steps = this.options.steps,\n                removedStep,\n                newSelected,\n                newSelectedIndex;\n\n            if (isNaN(index) || !steps || steps.length < 2 || index >= steps.length) {\n              return;\n            }\n\n            if (index < 0) {\n              index = steps.length + index;\n            }\n\n            if (index < 0) {\n              return;\n            }\n\n            removedStep = steps.splice(index, 1)[0];\n\n            if (removedStep.selected === true && steps.length > 0) {\n              if (index > 0) {\n                newSelectedIndex = index - 1;\n              } else {\n                newSelectedIndex = 0;\n              }\n\n              newSelected = steps[newSelectedIndex];\n\n              if (typeof newSelected === \"string\") {\n                newSelected = {\n                  label: newSelected\n                };\n                steps[newSelectedIndex] = newSelected;\n              }\n\n              newSelected.selected = true;\n              newSelected.previous = false;\n            }\n\n            this._createSteps();\n\n            this._renderSteps();\n\n            this._resetProgressBar();\n\n            this._calculateDimensions();\n          },\n          resize: function () {\n            this._calculateDimensions();\n          },\n          select: function (stepIndex) {\n            var that = this;\n\n            if (stepIndex === undefined || stepIndex === null || isNaN(stepIndex)) {\n              return that.selectedStep;\n            }\n\n            if (stepIndex >= that._steps.length || stepIndex < 0) {\n              return;\n            }\n\n            stepIndex = Number(stepIndex);\n\n            that._select(stepIndex);\n          },\n          steps: function (steps) {\n            if (steps === undefined) {\n              return this._steps;\n            }\n\n            this._processSteps(steps);\n\n            this._resetProgressBar();\n\n            this._calculateDimensions();\n          },\n          _processSteps: function (steps) {\n            var that = this,\n                selectedStep;\n\n            var findSelectedStep = function (step) {\n              if (step.selected) {\n                selectedStep = step;\n              }\n            };\n\n            steps.forEach(findSelectedStep);\n\n            if (!selectedStep) {\n              if (typeof steps[0] === \"string\") {\n                steps[0] = {\n                  label: steps[0]\n                };\n              }\n\n              steps[0].selected = true;\n            }\n\n            that.options.steps = steps;\n\n            that._createSteps();\n\n            that._renderSteps();\n          },\n          _addStepList: function () {\n            var that = this;\n            that.wrapper.empty().append($(\"<ol />\").addClass(stepperStyles.stepList));\n            that._stepList = that.wrapper.find(DOT + stepperStyles.stepList);\n\n            if (that.options.orientation === VERTICAL) {\n              that._stepList.addClass(stepperStyles.stepListVertical);\n            } else {\n              that._stepList.addClass(stepperStyles.stepListHorizontal);\n            }\n          },\n          _attachEvents: function () {\n            var that = this;\n            that.wrapper.on(CLICK + STEPPER, DOT + stepStyles.step, that._selectClickHandler.bind(that)).on(CLICK + STEPPER, that._wrapperClickHandler.bind(that)).on(FOCUSOUT + STEPPER, that._focusout.bind(that)).on(KEYDOWN + STEPPER, that, that._keydown.bind(that));\n          },\n          _calculateDimensions: function () {\n            var orientation = this.options.orientation,\n                numberOfSteps = this._steps.length,\n                stepList = this._stepList,\n                steps = stepList.find(DOT + stepStyles.step),\n                stepWidth = stepList.width() / numberOfSteps,\n                stepHeight = stepList.height() / numberOfSteps,\n                progressElement = this.progressBar.element,\n                margin = \"margin-left\",\n                style = {};\n\n            if (orientation === VERTICAL) {\n              steps.css(\"max-height\", 100 / numberOfSteps + \"%\");\n              progressElement.css({\n                \"margin-top\": -1 * (stepList.height() - 16),\n                \"height\": stepHeight * (numberOfSteps - 1)\n              });\n            } else {\n              steps.css(\"max-width\", 100 / numberOfSteps + \"%\");\n\n              if (kendo.support.isRtl(this.wrapper)) {\n                margin = \"margin-right\";\n              }\n\n              style[margin] = stepWidth / 2;\n              style.width = stepWidth * (numberOfSteps - 1);\n              progressElement.css(style);\n            }\n          },\n          _createStep: function (stepOptions, idx, isLastStep) {\n            var that = this,\n                isFirstStep = idx === 0,\n                options = that.options,\n                indicatorVisible = options.indicator,\n                labelVisible = options.label;\n            stepOptions = extend({}, stepOptions, {\n              enabled: stepOptions.enabled === false ? false : true\n            });\n            stepOptions = extend({}, stepOptions, {\n              isFirstStep: isFirstStep,\n              isLastStep: isLastStep,\n              indicatorVisible: indicatorVisible,\n              labelVisible: labelVisible,\n              index: idx\n            });\n            return new Step(stepOptions);\n          },\n          _createSteps: function () {\n            var that = this,\n                stepsOptions = that.options.steps,\n                selected = false,\n                step,\n                idx,\n                isLastStep,\n                stepOpt;\n            that._steps = [];\n\n            for (idx = 0; idx < stepsOptions.length; idx++) {\n              stepOpt = stepsOptions[idx];\n\n              if (typeof stepOpt === \"string\") {\n                stepOpt = {\n                  label: stepOpt\n                };\n              }\n\n              if (stepOpt !== undefined) {\n                isLastStep = idx === stepsOptions.length - 1;\n\n                if (stepOpt.selected) {\n                  selected = true;\n                } else {\n                  stepOpt = that._selectablePreviousState(stepOpt, selected, idx);\n                }\n\n                step = that._createStep(stepOpt, idx, isLastStep);\n\n                that._steps.push(step);\n\n                if (step.getSelected()) {\n                  that.selectedStep = step;\n                }\n              }\n            }\n          },\n          _indicatorAndLabel: function () {\n            if (!this.options.indicator && !this.options.label) {\n              this.options.indicator = true;\n              this.options.label = true;\n            }\n          },\n          _focusout: function (e) {\n            var that = this;\n\n            if (!that.wrapper.get(0).contains(e.relatedTarget)) {\n              setTimeout(function () {\n                that._leaveStepper();\n              });\n            }\n          },\n          _focusStep: function (newStep) {\n            var focusedStep = this.wrapper.find(DOT + stepStyles.focusStep),\n                allStepLinks = this.wrapper.find(DOT + stepStyles.stepLink);\n\n            if (newStep.length > 0) {\n              focusedStep.removeClass(stepStyles.focusStep);\n              allStepLinks.attr(TABINDEX, \"-1\");\n              newStep.find(DOT + stepStyles.stepLink).removeAttr(TABINDEX)[0].focus();\n            }\n          },\n          _focusNextStep: function () {\n            var focusedStep = $(document.activeElement).closest(DOT + stepStyles.step),\n                nextStep = focusedStep.next();\n\n            this._focusStep(nextStep);\n          },\n          _focusPreviousStep: function () {\n            var focusedStep = $(document.activeElement).closest(DOT + stepStyles.step),\n                previousStep = focusedStep.prev();\n\n            this._focusStep(previousStep);\n          },\n          _focusFirstStep: function () {\n            var wrapper = this.wrapper,\n                firstStep = wrapper.find(DOT + stepStyles.firstStep);\n\n            this._focusStep(firstStep);\n          },\n          _focusLastStep: function () {\n            var wrapper = this.wrapper,\n                lastStep = wrapper.find(DOT + stepStyles.lastStep);\n\n            this._focusStep(lastStep);\n          },\n          _keydown: function (e) {\n            var that = this,\n                keyCode = e.keyCode,\n                focusedStepElement = $(document.activeElement).closest(DOT + stepStyles.step),\n                focusedStepIndex = focusedStepElement.index(),\n                stepsCount = that.steps().length;\n\n            if (keyCode === keys.TAB) {\n              if (e.shiftKey && focusedStepIndex > 0) {\n                e.preventDefault();\n\n                that._tabKey(e, -1);\n              } else if (!e.shiftKey && focusedStepIndex < stepsCount - 1) {\n                e.preventDefault();\n\n                that._tabKey(e, +1);\n              }\n            } else if (keyCode > 34 && keyCode < 41) {\n              e.preventDefault();\n\n              that._navKeys(e);\n            } else if (keyCode === keys.ENTER || keyCode === keys.SPACEBAR) {\n              e.preventDefault();\n\n              that._selectHandler(e, $(document.activeElement).closest(DOT + stepStyles.step));\n            } else {\n              e.preventDefault();\n            }\n          },\n          _leaveStepper: function () {\n            var selectedStep = this.wrapper.find(DOT + stepStyles.currentStep),\n                allStepLinks = this.wrapper.find(DOT + stepStyles.stepLink);\n            allStepLinks.removeClass(stepStyles.focusStep).attr(TABINDEX, \"-1\");\n            selectedStep.addClass(stepStyles.focusStep);\n            selectedStep.find(DOT + stepStyles.stepLink).removeAttr(TABINDEX);\n          },\n          _navKeys: function (e) {\n            var selectOnFocus = this.options.selectOnFocus;\n\n            if (selectOnFocus) {\n              this._navKeysSelect(e);\n            } else {\n              this._navKeysFocus(e);\n            }\n          },\n          _navKeysFocus: function (e) {\n            var keyCode = e.keyCode,\n                rtl = kendo.support.isRtl(this.wrapper),\n                orientation = this.options.orientation;\n\n            switch (keyCode) {\n              case keys.DOWN:\n                if (rtl && orientation !== VERTICAL) {\n                  this._focusPreviousStep();\n                } else {\n                  this._focusNextStep();\n                }\n\n                break;\n\n              case keys.RIGHT:\n                if (rtl) {\n                  this._focusPreviousStep();\n                } else {\n                  this._focusNextStep();\n                }\n\n                break;\n\n              case keys.UP:\n                if (rtl && orientation !== VERTICAL) {\n                  this._focusNextStep();\n                } else {\n                  this._focusPreviousStep();\n                }\n\n                break;\n\n              case keys.LEFT:\n                if (rtl) {\n                  this._focusNextStep();\n                } else {\n                  this._focusPreviousStep();\n                }\n\n                break;\n\n              case keys.HOME:\n                this._focusFirstStep();\n\n                break;\n\n              case keys.END:\n                this._focusLastStep();\n\n                break;\n            }\n          },\n          _navKeysSelect: function (e) {\n            var keyCode = e.keyCode,\n                focusedStepIndex = $(document.activeElement).closest(DOT + stepStyles.step).index(),\n                rtl = kendo.support.isRtl(this.wrapper),\n                steps = this.steps(),\n                orientation = this.options.orientation,\n                targetStep;\n\n            switch (keyCode) {\n              case keys.DOWN:\n                if (rtl && orientation !== VERTICAL) {\n                  targetStep = steps[focusedStepIndex - 1];\n                } else {\n                  targetStep = steps[focusedStepIndex + 1];\n                }\n\n                break;\n\n              case keys.RIGHT:\n                if (rtl) {\n                  targetStep = steps[focusedStepIndex - 1];\n                } else {\n                  targetStep = steps[focusedStepIndex + 1];\n                }\n\n                break;\n\n              case keys.UP:\n                if (rtl && orientation !== VERTICAL) {\n                  targetStep = steps[focusedStepIndex + 1];\n                } else {\n                  targetStep = steps[focusedStepIndex - 1];\n                }\n\n                break;\n\n              case keys.LEFT:\n                if (rtl) {\n                  targetStep = steps[focusedStepIndex + 1];\n                } else {\n                  targetStep = steps[focusedStepIndex - 1];\n                }\n\n                break;\n\n              case keys.HOME:\n                targetStep = steps[0];\n                break;\n\n              case keys.END:\n                targetStep = steps[steps.length - 1];\n                break;\n            }\n\n            if (targetStep) {\n              this._focusStep(targetStep.element);\n\n              this._selectHandlerOnKey(e, targetStep.element);\n            }\n          },\n          _progressBar: function () {\n            var wrapper = this.wrapper,\n                progressBarOptions = this._progressOptions();\n\n            this.progressBar = $(\"<div>\").kendoProgressBar(progressBarOptions).getKendoProgressBar();\n            this.progressBar.element.addClass(\"k-pos-absolute k-overflow-hidden\"); // TODO: for 2021 R2 the following line must be removed!\n\n            this.progressBar.element.css(\"position\", \"absolute\");\n\n            this._calculateDimensions();\n\n            wrapper.append(this.progressBar.element);\n          },\n          _progressOptions: function () {\n            var options = this.options,\n                orientation = options.orientation,\n                stepsOptions = options.steps,\n                numberOfSteps,\n                progressBarOptions;\n\n            if (!stepsOptions || stepsOptions.length === 0) {\n              return;\n            } else {\n              numberOfSteps = stepsOptions.length;\n            }\n\n            progressBarOptions = {\n              max: numberOfSteps - 1,\n              value: this.select().getIndex(),\n              orientation: orientation,\n              showStatus: false\n            };\n\n            if (orientation === VERTICAL) {\n              progressBarOptions.reverse = true;\n            }\n\n            return progressBarOptions;\n          },\n          _resetProgressBar: function () {\n            var progressBar = this.progressBar,\n                newOptions;\n\n            if (!progressBar) {\n              return;\n            }\n\n            newOptions = this._progressOptions();\n            progressBar.setOptions(newOptions);\n          },\n          _renderSteps: function () {\n            var steps = this._steps,\n                stepsList = this._stepList,\n                step,\n                idx;\n            stepsList.empty();\n\n            for (idx = 0; idx < steps.length; idx++) {\n              step = steps[idx];\n              stepsList.append(step.element);\n            }\n          },\n          _resetStep: function (i, index, forward) {\n            var step = this._steps[i];\n\n            if (!forward && i < index) {\n              step.options.selectable = true;\n            } else if (i === index) {\n              step.options.previous = false;\n              step.options.selected = true;\n              step.options.selectable = true;\n            } else if (forward && i > index) {\n              step.options.selectable = true;\n            } else {\n              step.options.selected = false;\n              step.options.previous = forward;\n            }\n\n            if (this.options.linear && (i < index - 1 || i > index + 1)) {\n              step.options.selectable = false;\n            }\n\n            step._link();\n\n            step._stepClasses();\n\n            this.options.steps[i] = step.options;\n          },\n          _select: function (index) {\n            var options = this.options,\n                linear = options.linear,\n                selectedStep = this.select(),\n                selectedIndex = selectedStep.getIndex(),\n                stepsOptions = options.steps,\n                targetStep = this._steps[index],\n                forward,\n                i,\n                min,\n                max;\n\n            if (!targetStep || !targetStep.getEnabled()) {\n              return;\n            }\n\n            if (index > selectedIndex) {\n              forward = true;\n\n              if (linear) {\n                min = Math.max(selectedIndex - 1, 0);\n                max = Math.min(index + 1, stepsOptions.length - 1);\n              } else {\n                min = selectedIndex;\n                max = index;\n              }\n            } else {\n              forward = false;\n\n              if (linear) {\n                min = Math.max(index - 1, 0);\n                max = Math.min(selectedIndex + 1, stepsOptions.length - 1);\n              } else {\n                min = index;\n                max = selectedIndex;\n              }\n            }\n\n            for (i = min; i <= max; i++) {\n              this._resetStep(i, index, forward);\n            }\n\n            this.selectedStep = targetStep;\n            this.progressBar.value(index);\n          },\n          _selectablePreviousState: function (stepOpt, selected, idx) {\n            var stepsOptions = this.options.steps,\n                linear = this.options.linear;\n\n            if (!selected) {\n              stepOpt.previous = true;\n\n              if (linear && !stepsOptions[idx + 1].selected) {\n                stepOpt.selectable = false;\n              } else {\n                stepOpt.selectable = true;\n              }\n            } else if (linear && !stepsOptions[idx - 1].selected) {\n              stepOpt.selectable = false;\n            } else {\n              stepOpt.selectable = true;\n            }\n\n            return stepOpt;\n          },\n          _selectClickHandler: function (e) {\n            var stepElement = $(e.target).closest(DOT + stepStyles.step);\n            e.preventDefault();\n            this._preventWrapperClick = true;\n\n            this._selectHandler(e, stepElement);\n          },\n          _selectHandler: function (e, stepElement) {\n            var that = this,\n                step = that._steps[stepElement.index()],\n                currentStep = this.select();\n\n            if (!step || step.getIndex() === currentStep.getIndex() || !step.getEnabled() || !step.getSelectable()) {\n              that._focusStep(currentStep.element);\n\n              return;\n            }\n\n            if (!that.trigger(SELECT, {\n              sender: that,\n              originalEvent: e,\n              step: step\n            })) {\n              that._select(step.getIndex());\n\n              stepElement.find(DOT + stepStyles.stepLink)[0].focus();\n              that.trigger(ACTIVATE, {\n                sender: that,\n                originalEvent: e,\n                step: step\n              });\n            }\n          },\n          _selectHandlerOnKey: function (e, stepElement) {\n            var that = this,\n                step = that._steps[stepElement.index()];\n\n            if (!step.getEnabled() || !step.getSelectable()) {\n              return;\n            }\n\n            if (!that.trigger(SELECT, {\n              sender: that,\n              originalEvent: e,\n              step: step\n            })) {\n              that._select(step.getIndex());\n\n              stepElement.find(DOT + stepStyles.stepLink)[0].focus();\n              that.trigger(ACTIVATE, {\n                sender: that,\n                originalEvent: e,\n                step: step\n              });\n            }\n          },\n          _tabKey: function (e, shift) {\n            var selectOnFocus = this.options.selectOnFocus,\n                focusedStepElement = $(document.activeElement).closest(DOT + stepStyles.step),\n                focusedStepIndex = focusedStepElement.index(),\n                targetStep = $(focusedStepElement.parent().find(DOT + stepStyles.step)[focusedStepIndex + shift]);\n\n            this._focusStep(targetStep);\n\n            if (selectOnFocus) {\n              this._selectHandlerOnKey(e, targetStep);\n            }\n          },\n          _wrapper: function () {\n            var that = this,\n                element = that.element;\n            that.wrapper = element;\n            that.wrapper.addClass(stepperStyles.widget);\n\n            if (that.options.linear) {\n              that.wrapper.addClass(stepperStyles.stepperLinear);\n            }\n\n            this._addStepList();\n          },\n          _wrapperClickHandler: function (e) {\n            var currentStep = this.select();\n\n            if (!this._preventWrapperClick) {\n              e.preventDefault();\n\n              this._focusStep(currentStep.element);\n            } else {\n              this._preventWrapperClick = false;\n            }\n          }\n        });\n        kendo.stepper = {\n          Step: Step\n        };\n        kendo.ui.plugin(Stepper);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}