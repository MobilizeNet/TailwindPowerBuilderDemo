{"ast":null,"code":"import { drawing as draw } from '@progress/kendo-drawing';\nimport { ChartElement, Point } from '../../core';\nimport RangeLinePoint from './range-line-point';\nimport PointEventsMixin from '../mixins/point-events-mixin';\nimport NoteMixin from '../mixins/note-mixin';\nimport { LINE_MARKER_SIZE, FADEIN, INITIAL_ANIMATION_DURATION, TOOLTIP_OFFSET, ABOVE, BELOW } from '../constants';\nimport { WHITE, CIRCLE, HIGHLIGHT_ZINDEX, LEFT, RIGHT, BOTTOM, CENTER } from '../../common/constants';\nimport { deepExtend, valueOrDefault, getSpacing } from '../../common';\nconst AUTO = 'auto';\nconst DEFAULT_FROM_FORMAT = '{0}';\nconst DEFAULT_TO_FORMAT = '{1}';\n\nclass RangeAreaPoint extends ChartElement {\n  constructor(value, options) {\n    super();\n    this.value = value;\n    this.options = options;\n    this.aboveAxis = valueOrDefault(this.options.aboveAxis, true);\n    this.tooltipTracking = true;\n    this.initLabelsFormat();\n  }\n\n  render() {\n    if (this._rendered) {\n      return;\n    }\n\n    this._rendered = true;\n    const {\n      markers,\n      labels\n    } = this.options;\n    const value = this.value;\n    const fromPoint = this.fromPoint = new RangeLinePoint(value, deepExtend({}, this.options, {\n      labels: labels.from,\n      markers: markers.from\n    }));\n    const toPoint = this.toPoint = new RangeLinePoint(value, deepExtend({}, this.options, {\n      labels: labels.to,\n      markers: markers.to\n    }));\n    this.copyFields(fromPoint);\n    this.copyFields(toPoint);\n    this.append(fromPoint);\n    this.append(toPoint);\n  }\n\n  reflow(targetBox) {\n    this.render();\n    const {\n      from: fromBox,\n      to: toBox\n    } = targetBox;\n    this.positionLabels(fromBox, toBox);\n    this.fromPoint.reflow(fromBox);\n    this.toPoint.reflow(toBox);\n    this.box = this.fromPoint.markerBox().clone().wrap(this.toPoint.markerBox());\n  }\n\n  createHighlight() {\n    const group = new draw.Group();\n    group.append(this.fromPoint.createHighlight());\n    group.append(this.toPoint.createHighlight());\n    return group;\n  }\n\n  highlightVisual() {\n    return this.visual;\n  }\n\n  highlightVisualArgs() {\n    return {\n      options: this.options,\n      from: this.fromPoint.highlightVisualArgs(),\n      to: this.toPoint.highlightVisualArgs()\n    };\n  }\n\n  tooltipAnchor() {\n    const clipBox = this.owner.pane.clipBox();\n    const showTooltip = !clipBox || clipBox.overlaps(this.box);\n\n    if (showTooltip) {\n      const box = this.box;\n      const center = box.center();\n      const horizontalAlign = LEFT;\n      let x, y, verticalAlign;\n\n      if (this.options.vertical) {\n        x = center.x;\n        y = box.y1 - TOOLTIP_OFFSET;\n        verticalAlign = BOTTOM;\n      } else {\n        x = box.x2 + TOOLTIP_OFFSET;\n        y = center.y;\n        verticalAlign = CENTER;\n      }\n\n      return {\n        point: new Point(x, y),\n        align: {\n          horizontal: horizontalAlign,\n          vertical: verticalAlign\n        }\n      };\n    }\n  }\n\n  formatValue(format) {\n    return this.owner.formatPointValue(this, format);\n  }\n\n  overlapsBox(box) {\n    return this.box.overlaps(box);\n  }\n\n  unclipElements() {\n    this.fromPoint.unclipElements();\n    this.toPoint.unclipElements();\n  }\n\n  initLabelsFormat() {\n    const labels = this.options.labels;\n\n    if (!labels.format) {\n      if (!labels.from || !labels.from.format) {\n        labels.from = Object.assign({}, labels.from, {\n          format: DEFAULT_FROM_FORMAT\n        });\n      }\n\n      if (!labels.to || !labels.to.format) {\n        labels.to = Object.assign({}, labels.to, {\n          format: DEFAULT_TO_FORMAT\n        });\n      }\n    }\n  }\n\n  positionLabels(fromBox, toBox) {\n    const {\n      labels,\n      vertical\n    } = this.options;\n\n    if (labels.position === AUTO) {\n      let fromLabelPosition, toLabelPosition;\n\n      if (vertical) {\n        if (toBox.y1 <= fromBox.y1) {\n          toLabelPosition = ABOVE;\n          fromLabelPosition = BELOW;\n        } else {\n          toLabelPosition = BELOW;\n          fromLabelPosition = ABOVE;\n        }\n      } else {\n        if (toBox.x1 <= fromBox.x1) {\n          toLabelPosition = LEFT;\n          fromLabelPosition = RIGHT;\n        } else {\n          toLabelPosition = RIGHT;\n          fromLabelPosition = LEFT;\n        }\n      }\n\n      if (!labels.from || !labels.from.position) {\n        this.fromPoint.options.labels.position = fromLabelPosition;\n      }\n\n      if (!labels.to || !labels.to.position) {\n        this.toPoint.options.labels.position = toLabelPosition;\n      }\n    }\n  }\n\n  copyFields(point) {\n    point.dataItem = this.dataItem;\n    point.category = this.category;\n    point.series = this.series;\n    point.color = this.color;\n    point.owner = this.owner;\n  }\n\n}\n\ndeepExtend(RangeAreaPoint.prototype, PointEventsMixin);\ndeepExtend(RangeAreaPoint.prototype, NoteMixin);\nRangeAreaPoint.prototype.defaults = {\n  markers: {\n    visible: false,\n    background: WHITE,\n    size: LINE_MARKER_SIZE,\n    type: CIRCLE,\n    border: {\n      width: 2\n    },\n    opacity: 1\n  },\n  labels: {\n    visible: false,\n    margin: getSpacing(3),\n    padding: getSpacing(4),\n    animation: {\n      type: FADEIN,\n      delay: INITIAL_ANIMATION_DURATION\n    },\n    position: AUTO\n  },\n  notes: {\n    label: {}\n  },\n  highlight: {\n    markers: {\n      border: {\n        color: WHITE,\n        width: 2\n      }\n    },\n    zIndex: HIGHLIGHT_ZINDEX\n  },\n  tooltip: {\n    format: '{0} - {1}'\n  }\n};\nexport default RangeAreaPoint;","map":null,"metadata":{},"sourceType":"module"}