{"ast":null,"code":"import * as i1 from '@angular/common/http';\nimport { HttpClient, HttpHeaders, HttpResponse, HTTP_INTERCEPTORS, HttpClientModule, HttpClientXsrfModule } from '@angular/common/http';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Inject, Optional, NgModule } from '@angular/core';\nimport { __decorate, __metadata } from 'tslib';\nimport { ExceptionHandlerClass, ErrorCodes, RequestConfig, Events, PendingResponse, Send, SendV5, ActionModel, ActionModelV5, Inject as Inject$1, Constants, NetworkException, ContentType, Modal, Order, Request, RequestType, View, App, AppV5, ModelV5, Resolve, RequestBuilderV5, EventBehavior, ExceptionHandler, ModelFactoryV5 } from '@mobilize/webmap-core';\nimport { of } from 'rxjs';\nimport { finalize, map } from 'rxjs/operators';\nimport { WMLogger } from '@mobilize/logging';\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n/**\r\n * InjectionToken used to provide a default WebMapServiceConfig to the Dependency Injection.\r\n */\n\nconst WEBMAP_CONFIG = new InjectionToken('WebMap Service Configuration');\n/**\r\n * Default configuration for the WebMap Service.\r\n */\n\nconst WEBMAP_DEFAULT_CONFIG = {\n  dataManagerBusyLoaderTime: 0,\n  useBundleEvent: false,\n  useDynamicServerEvents: true,\n  usePercentage: false,\n  webMapVersion: 'v5',\n  wmSourceVersion: 'WF',\n  showBrowserContextMenu: false,\n  baseHref: '',\n  styleProperties: ['BackColor', 'ForeColor', 'BackgroundImage', 'Top', 'Right', 'Left', 'Bottom', 'Height', 'Width', 'Location', 'Font', 'FontFamily', 'TextDecoration']\n};\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\nvar WebMapUtils_1;\nlet WebMapUtils = WebMapUtils_1 = class WebMapUtils {\n  static getPropertyName(name) {\n    name = name.replace(/\\[(\\w+)\\]/g, '.$1'); // convert indexes to properties\n\n    name = name.replace(/^\\./, ''); // strip a leading dot\n\n    const nameArray = name.split('.');\n    return nameArray[nameArray.length - 1];\n  }\n\n  static getProperty(obj, name) {\n    name = name.replace(/\\[(\\w+)\\]/g, '.$1'); // convert indexes to properties\n\n    name = name.replace(/^\\./, ''); // strip a leading dot\n\n    const nameArray = name.split('.');\n    const result = new Map();\n    result.set(0, obj);\n\n    for (let i = 0, n = nameArray.length; i < n; ++i) {\n      const model = result.get(i);\n      const currentProp = nameArray[i];\n\n      if (model && currentProp in model) {\n        result.set(i + 1, model[currentProp]);\n      } else {\n        return;\n      }\n    }\n\n    return result.get(result.size - 1);\n  }\n\n  static getPropertyParent(obj, name) {\n    name = name.replace(/\\[(\\w+)\\]/g, '.$1'); // convert indexes to properties\n\n    name = name.replace(/^\\./, ''); // strip a leading dot\n\n    const nameArray = name.split('.');\n    const result = new Map();\n    result.set(0, obj);\n\n    for (let i = 0, n = nameArray.length - 1; i < n; ++i) {\n      const model = result.get(i);\n      const currentProp = nameArray[i];\n      /* c8 ignore next 5 */\n\n      if (model && currentProp in model) {\n        result.set(i + 1, model[currentProp]);\n      } else {\n        return;\n      }\n    }\n\n    return result.get(result.size - 1);\n  }\n\n  static getRoutingName(name) {\n    return name.replace('.', '-').toLowerCase();\n  }\n\n  static getDataQuery(url, id, action) {\n    return action !== '' ? `${url}/${action}/${id}` : `${url}/${id}`;\n  }\n\n  static getWebApiHeaders() {\n    const basicHeaders = {\n      Accept: 'application/json',\n      'Cache-Control': 'no-cache',\n      'Content-Type': 'application/json',\n      Expires: 'Sat, 01 Jan 2000 00:00:00 GMT',\n      Pragma: 'no-cache'\n    };\n    basicHeaders[WebMapUtils_1.WebApiHeader] = 'true';\n    return basicHeaders;\n  }\n  /**\r\n   * Identifies if a request contains the WebMap WebAPI headers.\r\n   * @param request the Http Request\r\n   */\n\n\n  static isWebMapWebAPI(request) {\n    return request.headers.get(WebMapUtils_1.WebApiHeader) === 'true';\n  }\n  /**\r\n   * Identifies if a request contains the WebMap WebAPI headers.\r\n   * @param request the Http Request\r\n   */\n\n\n  static getPendingResponseKey(response) {\n    return response.headers.get(WebMapUtils_1.PendingResponseHeader);\n  }\n\n};\n/**\r\n * Http Header used for a Web API request that requires the WebMap Services\r\n * to be initialized in the server.\r\n */\n\nWebMapUtils.WebApiHeader = 'WM-API';\n/**\r\n * Http Header used for a Web API response that has a pending response that\r\n * must be retrieved from the server.\r\n */\n\nWebMapUtils.PendingResponseHeader = 'WM-Pending';\n/**\r\n * Http header used for the WebMap server to identify a request that is\r\n * intended to created a new Application.\r\n */\n\nWebMapUtils.getNewAppHeader = 'WM-NewApp';\nWebMapUtils = WebMapUtils_1 = __decorate([ExceptionHandlerClass(ErrorCodes.AngularClient)], WebMapUtils);\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\nlet WMConstants = /*#__PURE__*/(() => {\n  class WMConstants {}\n\n  WMConstants.version4 = 'v4';\n  WMConstants.version5 = 'v5';\n  WMConstants.sourceVersionPB = 'PB';\n  WMConstants.sourceVersionWin = 'WF';\n  WMConstants.sourceVersionWebForms = 'WEBF';\n  /** *********************************************************************\r\n   * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n   *\r\n   * This file is part of the Mobilize Frameworks, which is\r\n   * proprietary and confidential.\r\n   *\r\n   * NOTICE:  All information contained herein is, and remains\r\n   * the property of Mobilize.Net Corporation.\r\n   * The intellectual and technical concepts contained herein are\r\n   * proprietary to Mobilize.Net Corporation and may be covered\r\n   * by U.S. Patents, and are protected by trade secret or copyright law.\r\n   * Dissemination of this information or reproduction of this material\r\n   * is strictly forbidden unless prior written permission is obtained\r\n   * from Mobilize.Net Corporation.\r\n   *\r\n   * This file is subject to the terms and conditions defined in\r\n   * file 'LICENSE.txt', which is part of this source code package.\r\n   ***********************************************************************/\n\n  /**\r\n   * InjectionToken used to provide a custom configuration for the WebMAP application\r\n   */\n\n  return WMConstants;\n})();\nconst WEBMAP_APP_CONFIG = new InjectionToken('WebMap Application Configuration');\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n/**\r\n * @classdesc Provides the access to the WebMap Application.\r\n */\n// @dynamic\n\nclass WebMapService {\n  /**\r\n   * Creates a new instance of WebMapService with the specified HttpClient and\r\n   * configuration.\r\n   * @param http The HttpClient.\r\n   * @param config Optional service configuration.\r\n   */\n\n  /* c8 ignore start */\n  constructor(http, config, appConfig) {\n    this.http = http;\n    /**\r\n     * Flag that indicates if events\r\n     * must be sent to the server side\r\n     */\n\n    this.sendEventsToServer = true;\n    /**\r\n     * Flag that indicates that the events must be recorded\r\n     * and sent as a batch.\r\n     */\n\n    this.recordingRequests = false;\n    /**\r\n     * Keeps the record of events that are sent to server side as a batch\r\n     */\n\n    this.recordedRequests = [];\n    this.config = config ? config : WebMapService.getDefaultConfig();\n    this.core = new AngularApp(this.config, appConfig).currentApp;\n    window['app'] = this.core;\n    this.forms = {};\n  }\n  /**\r\n   * Provides the WebMapService with the specified configuration.\r\n   * To be used when defining the root application providers.\r\n   * @param config\r\n   */\n\n  /* c8 ignore start */\n\n\n  static provide(config) {\n    return {\n      deps: [HttpClient],\n      provide: WebMapService,\n      useFactory: http => new WebMapService(http, config)\n    };\n  }\n  /* c8 ignore stop */\n\n  /**\r\n   * Gets the default configuration for a WebMapService.\r\n   * @returns The default configuration object.\r\n   */\n\n  /* c8 ignore next 3 */\n\n\n  static getDefaultConfig() {\n    return WEBMAP_DEFAULT_CONFIG;\n  }\n  /**\r\n   * Initializes the WebMapService with the specified router.\r\n   * @param router The router instance of @angular/router.\r\n   * @param appName The name of the application to send in the AppStart\r\n   * @param callback The callback function to be executed\r\n   * @param params Optional parameter to send queryString params when AppStart POST\r\n   * request is call, the format of params should be 'param=1&param=2&param=3&param...'\r\n   */\n\n  /* c8 ignore start */\n\n\n  init(appname, router, callback, params) {\n    WebMapService.currentService = this;\n    this.appname = appname ? appname : null;\n    this.router = router ? router : null;\n    const requestConfig = new RequestConfig();\n    requestConfig.headers[WebMapUtils.getNewAppHeader] = 'true';\n    const qryParam = this.tryObtainQueryParams(params);\n    const action = this.processAppStartActionWithQueryParams(qryParam);\n    this.core.init('', action, callback, this.appname, requestConfig, qryParam);\n    this.core.subscribeEvent(Events.ApplicationRestart, () => this.restartApplication());\n    this.core.subscribeEvent(Events.ReloadPendingViews, viewId => this.reloadPendingViews(viewId));\n  }\n  /* c8 ignore stop */\n\n  /**\r\n   * Restart the WebMapService with the specified router.\r\n   */\n\n  /* c8 ignore next 3 */\n\n\n  restartApplication() {\n    this.createPreprareStartUpRequest();\n  }\n  /**\r\n   * Remove pending views from ViewManager.\r\n   */\n\n  /* c8 ignore start */\n\n\n  reloadPendingViews(viewId) {\n    const pendingViews = this.core.getPendingViews();\n    const ids = new Array();\n\n    if (pendingViews.length > 0) {\n      pendingViews.values().forEach(view => {\n        if (this.shouldCallPendingView(viewId, view)) {\n          view.load();\n          ids.push(view.id);\n        }\n      });\n    }\n  }\n  /* c8 ignore stop */\n\n  /**\r\n   * Gets the model with the specified identifier.\r\n   * @param uniqueId The model unique identifier.\r\n   * @returns The IModel with the corresponding identifier, or null if not found.\r\n   */\n\n  /* c8 ignore next 3 */\n\n\n  getModel(uniqueId) {\n    return Promise.resolve(this.core.getModel(uniqueId));\n  }\n  /**\r\n   * Adds an new model in models\r\n   * @param newModel The model. of style\r\n   */\n\n\n  addModel(newModel) {\n    this.core.addModel(newModel);\n  }\n  /**\r\n   * Invokes the specified command inside the WebMapService.\r\n   * @param command The command.\r\n   */\n\n\n  invoke(command) {\n    this.core.invoke(command);\n  }\n  /**\r\n   * Notifies that a property of a model has been changed. Used to keep track of\r\n   * changes that must be sent to the server.\r\n   * @param model The model whose property changed.\r\n   * @param property The property that changed.\r\n   */\n\n  /* c8 ignore start */\n\n\n  notifyChange(model, property) {\n    const parent = WebMapUtils.getPropertyParent(model, property); // if the retrieved parent is a model\n\n    if (parent.UniqueID || parent.id) {\n      const id = parent.UniqueID ?? parent.id; // Validate if model still exists\n\n      if (this.core.getModel(id)) {\n        const name = WebMapUtils.getPropertyName(property);\n        this.core.publishEvent(Events.Change, {\n          model: parent,\n          property: name\n        });\n      } else {\n        WMLogger.instance().error(`Trying to notify a property change for an invalid model with Id: ${id}`);\n      }\n    } else {\n      // its a subproperty ex. Text.Value\n      const id = model.UniqueID ?? model.id; // Validate if model still exists\n\n      if (this.core.getModel(id)) {\n        this.core.publishEvent(Events.Change, {\n          model,\n          property\n        });\n      } else {\n        WMLogger.instance().error(`Trying to notify a property change for an invalid model with Id: ${id}`);\n      }\n    }\n  }\n  /* c8 ignore stop */\n\n  /**\r\n   * Fetches the component data as an array of the specified type.\r\n   * @param url the url for the generic component.\r\n   * @param id the identifier of the object.\r\n   * @param [parameters] optional HttpParams object\r\n   * @param [model] the current component model\r\n   * @param [itemsExtractor] a function that extracts the desired collection from the component model used in V4 core versions.\r\n   */\n\n\n  fetch(url, id, parameters, model, itemsExtractor, action = '') {\n    /* c8 ignore else */\n    if (this.config.webMapVersion === WMConstants.version4) {\n      const data = itemsExtractor(model);\n      const length = data.length || 0; // eslint-disable-next-line import/no-deprecated\n\n      return of({\n        data,\n        length\n      });\n    } else {\n      const dataQuery = WebMapUtils.getDataQuery(url, id, action);\n      const headers = WebMapUtils.getWebApiHeaders();\n      this.core.publishEvent(Events.ActionSending);\n      return this.http.get(dataQuery, {\n        headers,\n        params: parameters\n      }).pipe(finalize(() => this.afterHttpRequest()));\n    }\n  }\n  /**\r\n   * Posts the information specified in the data parameter to the server\r\n   * @param url the url for the generic component.\r\n   * @param data the data to be posted\r\n   */\n\n  /* c8 ignore start */\n\n\n  post(url, data, callback = () => this.afterHttpRequest()) {\n    const headers = new HttpHeaders().set(WebMapUtils.WebApiHeader, 'true');\n    this.core.publishEvent(Events.ActionSending);\n    return this.http.post(url, data, {\n      headers\n    }).pipe(finalize(callback));\n  }\n  /* c8 ignore stop */\n\n  /**\r\n   * Processes the pending model response from the server. Model changes are\r\n   * expected to be applied during this operation.\r\n   * @param key The identifier of the pending response.\r\n   */\n\n  /* c8 ignore next 5 */\n\n\n  processPendingResponse(key) {\n    this.core.invoke(new PendingResponse(WebMapUtils.PendingResponseHeader, key));\n  }\n  /**\r\n   * Executes actions after a http invocation.\r\n   */\n\n  /* c8 ignore next 4 */\n\n\n  afterHttpRequest() {\n    this.core.publishEvent('detectChanges', undefined);\n    this.core.publishEvent(Events.ActionComplete);\n  }\n  /**\r\n   * Initialized events batch mode\r\n   */\n\n\n  startRecordingRequests() {\n    this.recordingRequests = true;\n    this.recordedRequests = [];\n  }\n  /**\r\n   * Stops events batch mode\r\n   */\n\n\n  stopRecordingRequests() {\n    this.recordingRequests = false;\n    this.recordedRequests = [];\n  }\n  /**\r\n   * Gets enabled server events\r\n   */\n\n\n  get enabledServerEvents() {\n    return this.sendEventsToServer;\n  }\n  /**\r\n   * Sets enabled server events\r\n   */\n\n\n  set enabledServerEvents(value) {\n    this.sendEventsToServer = value;\n  }\n  /**\r\n   * function used to make a server request.\r\n   * @param action Action to execute\r\n   */\n\n  /* c8 ignore next 3 */\n\n\n  sendAction(action) {\n    this.core.sendAction(action);\n  }\n  /**\r\n   * function used to send a Background Worker action\r\n   * This is because the bkworkers should not wait for responses to finish to be sended\r\n   * @param {IActionModel} action\r\n   * @memberof WebMapService\r\n   */\n\n  /* c8 ignore next 3 */\n\n\n  sendImmediateWorkerAction(action) {\n    this.core.sendImmediateAction(action);\n  }\n  /**\r\n   * Performs an event call to the server side.\r\n   * @param sender the object that send the action.\r\n   * @param action the action name.\r\n   * @param controller the url to the event controller usually empty.\r\n   * @param serverEvent the name of the event in the server side.\r\n   * @param receiverId the unique id of the current component.\r\n   * @param args the arguments for the current event.\r\n   * @param callback a function to be executed after the send action.\r\n   */\n\n\n  sendCommand(cmd, callback) {\n    if (this.config.webMapVersion === WMConstants.version4) {\n      const commandV4 = new Send(cmd.sender, cmd.serverEvent, cmd.args, callback, cmd.highPriority);\n      this.handleSendCommandAction(commandV4);\n    } else {\n      const commandV5 = new SendV5(cmd.sender, cmd.action, cmd.receiverId, cmd.serverEvent, cmd.args, callback, cmd.highPriority);\n      this.handleSendCommandAction(commandV5);\n    }\n  }\n  /**\r\n   * Send the collected commands to the server and reset the\r\n   * recordedRequest array.\r\n   */\n\n\n  sendRecordedActions() {\n    this.core.sendAction(this.createPerformMultiOperationRequest());\n    this.recordedRequests = [];\n  }\n  /**\r\n   * Handle the commands actions if the recording request flag is on then it is\r\n   * registered in the recordedRequest queue otherwise it is invoked right away.\r\n   * @param command The send command\r\n   */\n\n\n  handleSendCommandAction(command) {\n    if (this.recordingRequests) {\n      this.recordedRequests.push(command);\n    } else {\n      this.invoke(command);\n    }\n  }\n  /**\r\n   * Create the request to send all the recorded commands.\r\n   */\n\n  /* c8 ignore start */\n\n\n  createPerformMultiOperationRequest() {\n    if (this.config.webMapVersion === WMConstants.version4) {\n      return new ActionModel('ResumeOperation', 'PerformMultiOperation', null, {\n        args: this.recordedRequests\n      });\n    } else {\n      return new ActionModelV5('', '', 'ResumeOperation', 'PerformMultiOperation', {\n        args: this.recordedRequests\n      });\n    }\n  }\n  /* c8 ignore stop */\n\n  /**\r\n   * Create the request to send a clean up.\r\n   */\n\n  /* c8 ignore start */\n\n\n  createPreprareStartUpRequest() {\n    if (this.config.webMapVersion === WMConstants.version4) {\n      this.core.sendAction(new ActionModel('ResumeOperation', 'prepareStartupApp'));\n      window.location.reload();\n    } else {\n      this.post('ResumeOperation/prepareStartupApp', null, () => {\n        window.location.reload();\n      }).subscribe();\n    }\n  }\n  /* c8 ignore stop */\n\n  /* c8 ignore start */\n\n\n  shouldCallPendingView(viewId, view) {\n    return !viewId || view.model.MdiParentInternal && view.model.MdiParentInternal.UniqueID === viewId || view.model.ParentInternal && view.model.ParentInternal.UniqueID === viewId || view.model.ParentWindow && view.model.ParentWindow.UniqueID === viewId;\n  }\n  /* c8 ignore stop */\n\n  /**\r\n   * Tries to obtain query params from window.location.href if\r\n   * params parameter is null or empty.\r\n   * @param params Parameter received from init method of app.component.ts\r\n   * migrated application.\r\n   * @returns Returns a queryString params with format [param=1&param=2&para...]\r\n   */\n\n  /* c8 ignore start */\n\n\n  tryObtainQueryParams(params) {\n    if (params && params.length > 0) {\n      return params;\n    }\n\n    const url = window.location.href;\n\n    if (url.includes('?')) {\n      return `${url.split('?')[1]}`;\n    }\n\n    return null;\n  }\n  /* c8 ignore stop */\n\n  /**\r\n   * Process an AppStart action with query params if application runs with\r\n   * WebMap version 4.\r\n   * @param qryParam queryString parameters\r\n   * @returns AppStart action with queryString parameters if it is V4\r\n   */\n\n  /* c8 ignore start */\n\n\n  processAppStartActionWithQueryParams(qryParam) {\n    return 'AppStart' + (qryParam && this.config.webMapVersion === WMConstants.version4 ? `/?${qryParam}` : '');\n  }\n\n}\n/**\r\n * Current singleton instance of the WebMapService.\r\n */\n\n\nWebMapService.currentService = undefined;\n\nWebMapService.ɵfac = function WebMapService_Factory(t) {\n  return new (t || WebMapService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(WEBMAP_CONFIG), i0.ɵɵinject(WEBMAP_APP_CONFIG, 8));\n};\n\nWebMapService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: WebMapService,\n  factory: WebMapService.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n/**\r\n * @classdesc Intercepts http requests to handle special logic required for\r\n * WebMAp WebAPI requests.\r\n */\n\n\nlet WebMapInterceptor = /*#__PURE__*/(() => {\n  class WebMapInterceptor {\n    /**\r\n     * Creates a new instace of the WebMapHttpInterceptor class.\r\n     * @param webmapService The WebMap Service instance.\r\n     */\n    constructor(webmapService) {\n      this.webmapService = webmapService;\n    }\n    /** @inheritdoc */\n\n\n    intercept(request, next) {\n      // Check if we need to intercept the response\n      const intercept = WebMapUtils.isWebMapWebAPI(request);\n      /* c8 ignore else */\n\n      if (intercept) {\n        return next.handle(request).pipe(map(\n        /* c8 ignore next 3 */\n        response => {\n          if (response instanceof HttpResponse) {\n            const key = WebMapUtils.getPendingResponseKey(response);\n            /* c8 ignore next 3 */\n\n            if (key) {\n              this.webmapService.processPendingResponse(key);\n            }\n          }\n\n          return response;\n        }));\n      } else {\n        return next.handle(request);\n      }\n    }\n\n  }\n\n  WebMapInterceptor.ɵfac = function WebMapInterceptor_Factory(t) {\n    return new (t || WebMapInterceptor)(i0.ɵɵinject(WebMapService));\n  };\n\n  WebMapInterceptor.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: WebMapInterceptor,\n    factory: WebMapInterceptor.ɵfac\n  });\n  return WebMapInterceptor;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n\nlet InjectorInstance;\n/**\r\n * Contains the list of directives that can be used with WebMap\r\n */\n\nlet WebMapModule = /*#__PURE__*/(() => {\n  class WebMapModule {\n    /* c8 ignore stop */\n\n    /* c8 ignore next 3 */\n    constructor(injector) {\n      this.injector = injector;\n      InjectorInstance = this.injector;\n    }\n    /**\r\n     * Provides the WebMapService at a global scope. To be imported only in the root module, for example:\r\n     * @NgModule({\r\n     *   imports: [WebMapModule.forRoot()]\r\n     * })\r\n     */\n\n    /* c8 ignore start */\n\n\n    static forRoot() {\n      return {\n        ngModule: WebMapModule,\n        providers: [{\n          provide: WEBMAP_CONFIG,\n          useValue: WEBMAP_DEFAULT_CONFIG\n        }, WebMapService, {\n          provide: HTTP_INTERCEPTORS,\n          useClass: WebMapInterceptor,\n          multi: true\n        }]\n      };\n    }\n\n  }\n\n  WebMapModule.ɵfac = function WebMapModule_Factory(t) {\n    return new (t || WebMapModule)(i0.ɵɵinject(i0.Injector));\n  };\n\n  WebMapModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: WebMapModule\n  });\n  WebMapModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [{\n      provide: WEBMAP_CONFIG,\n      useValue: WEBMAP_DEFAULT_CONFIG\n    }],\n    imports: [[HttpClientModule, HttpClientXsrfModule]]\n  });\n  return WebMapModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n\nclass HttpServer {\n  constructor(inject, httpClient) {\n    this.inject = inject;\n    this.pendingResp = 0;\n\n    this.parseResponse = function (response) {\n      let result = {};\n      result = response.body || {};\n      result['status'] = response.status;\n      result['responseText'] = JSON.stringify(response.body);\n      return result;\n    };\n\n    this.inject = inject ||\n    /* c8 ignore next */\n    Inject$1.Instance;\n    this.event = this.inject.resolve(Constants.EventAggregator);\n    this.http = httpClient\n    /* c8 ignore next */\n    || InjectorInstance.get(HttpClient);\n  }\n  /**\r\n   * Returns the amount of pending responses in order\r\n   * to verify if we can remove the busy loader in the front end.\r\n   */\n\n\n  get pendingResponses() {\n    return this.pendingResp;\n  }\n\n  get(url, params, callback) {\n    const httpParams = params;\n    this.pendingResp++;\n    this.http.get(url, {\n      observe: 'response',\n      params: {\n        httpParams\n      },\n      responseType: 'json'\n    }).subscribe({\n      next: response => {\n        this.pendingResp--;\n        this.executeCallback(response, callback);\n      },\n      error: errorResponse => {\n        this.pendingResp--;\n        this.errorResponse(errorResponse, callback);\n      }\n    });\n  }\n\n  post(url, data, callback, config, eventName) {\n    this.sendRequest(url, data, config, eventName).subscribe({\n      next: result => {\n        this.executeCallback(result, callback);\n        this.pendingResp--;\n      },\n      error: errorResponse => {\n        this.errorResponse(errorResponse, callback);\n      }\n    }).add(() => {\n      this.event.publish(Events.ActionComplete, url);\n    });\n  }\n\n  errorResponse(errorResponse, callback) {\n    this.pendingResp--;\n    this.NotifyError(errorResponse);\n    this.executeCallback(errorResponse, callback);\n  }\n\n  NotifyError(response) {\n    const errorResponse = this.parseResponse(response);\n\n    if (errorResponse.status) {\n      this.event.publish(Events.Error, new NetworkException(errorResponse.responseText, errorResponse.status));\n    }\n  }\n\n  sendRequest(url, data, config, eventName) {\n    config = config || new RequestConfig();\n    config.contentType = config.contentType || ContentType.applicationJson;\n    this.pendingResp++;\n\n    if (config.contentType === ContentType.multipartFormdata) {\n      return this.processFormData(url, data);\n    } else {\n      return this.processDefault(url, data, config, eventName);\n    }\n  }\n\n  processFormData(url, data) {\n    this.event.publish(Events.ActionSending, url);\n    return this.http.post(url, data, {\n      headers: {\n        WM: 'true'\n      },\n      observe: 'response'\n    });\n  }\n\n  processDefault(url, data, config, eventName) {\n    // add WebMap headers\n    config.headers.WM = 'true';\n    let headers = new HttpHeaders(config.headers);\n    headers = headers.set('Content-Type', config.contentType);\n    this.event.publish(Events.ActionSending, url, eventName);\n    return this.http.post(url, data, {\n      headers,\n      observe: 'response'\n    });\n  }\n\n  executeCallback(response, callback) {\n    if (callback) {\n      callback(this.parseResponse(response));\n    }\n  }\n\n}\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n/**\r\n * This is a collection used to save the strings of the BackGroundWorkers\r\n * related events\r\n */\n\n\nconst bgWorkerEvents = ['BackgroundWorkerStarted', 'BackgroundWorkerDoWork', 'BackgroundWorkerCompleted'];\n\nclass LoadingModal extends Modal {\n  constructor() {\n    super();\n  }\n\n  name() {\n    return 'loading';\n  }\n\n  show(args) {\n    /* c8 ignore start */\n    if (args.eventName && bgWorkerEvents.includes(args.eventName) || window['app'] && window['app'].disableLoading && window['app'].disableLoading === true) {\n      args.show = false;\n    }\n    /* c8 ignore stop */\n\n\n    triggerEvent(args);\n  }\n\n}\n/**\r\n * Trigger an event that tells the loading component\r\n * to show or to hide according the param value.\r\n * @param show The value that indicates if the\r\n * loading component is visible.\r\n */\n\n\nfunction triggerEvent(args) {\n  /* c8 ignore next 5 */\n  if (WebMapService.currentService) {\n    WebMapService.currentService.core.getEvent().publish('DisplayLoading', args);\n  }\n}\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n\nclass SessionExpiredModal extends Modal {\n  constructor() {\n    super();\n  }\n\n  name() {\n    return 'expired';\n  }\n  /** Trigger an event to navigate\r\n   * to the session expired component\r\n   * This event is handled by the formscontainer component\r\n   */\n\n  /* c8 ignore start */\n\n\n  show(args) {\n    WebMapService.currentService.core.getEvent().publish('navigateSystemDialog', {\n      dialog: 'SessionExpired',\n      model: {\n        arguments: args.arguments[0]\n      }\n    });\n  }\n\n}\n\nlet UrlResolver = /*#__PURE__*/(() => {\n  let UrlResolver = class UrlResolver {\n    resolveUrl(action) {\n      return this.formatUrl(action);\n    }\n\n    formatUrl(actionModel) {\n      const controller = actionModel.controller;\n      const action = actionModel.action;\n      const queryString = actionModel.queryString;\n      const target = getTargetId(actionModel);\n      let url = WebMapService.currentService.config.baseHref;\n\n      if (controller && controller.length > 0) {\n        url += controller;\n      }\n\n      if (action && action.length > 0) {\n        /* c8 ignore next 3  */\n        if (url.length > 0) {\n          url += '/';\n        }\n\n        url += action;\n      }\n\n      if (target && target.length > 0) {\n        /* c8 ignore next 3  */\n        if (url.length > 0) {\n          url += '/';\n        }\n\n        url += target;\n      }\n\n      if (queryString && queryString.length > 0) {\n        if (url.length > 0) {\n          url += '/';\n        }\n\n        url += `?${queryString}`;\n      }\n\n      if (url.length === 0) {\n        url = '/';\n      }\n\n      return url;\n    }\n\n  };\n  UrlResolver = __decorate([ExceptionHandlerClass(ErrorCodes.AngularClient)], UrlResolver);\n  return UrlResolver;\n})();\n\nfunction getTargetId(action) {\n  if (action.receiverId) {\n    // For WM5\n    return action.receiverId;\n  }\n\n  return encodeURIComponent(action.item ? action.item.UniqueID : ''); // For WM4\n}\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n\nclass ChangeDetectionWorker {\n  constructor(inject = null) {\n    this.inject = inject;\n    this.inject = inject || Inject$1.Instance;\n    this.event = this.inject.resolve(Constants.EventAggregator);\n  }\n\n  process(response) {\n    response?.changed.forEach(elem => {\n      this.event.publish('detectChanges', elem.Id);\n    });\n  }\n\n  get Order() {\n    return Order.POST;\n  }\n\n}\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n\nclass SyncCompletedWorker {\n  constructor(inject = null) {\n    this.inject = inject;\n    this.inject = inject || Inject$1.Instance;\n    this.event = this.inject.resolve(Constants.EventAggregator);\n  }\n\n  process(response) {\n    // This setTimeout is required, because the controls may not be created at this time.\n    // Please note that created does not mean it has already been rendered.\n    setTimeout(() => {\n      this.event.publish('SyncCompleted', undefined);\n    }, 100);\n  }\n\n  get Order() {\n    return Order.POST;\n  }\n\n}\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n\nlet ModalsName = /*#__PURE__*/(() => {\n  class ModalsName {}\n\n  ModalsName.messageBox = 'MSGBOX';\n  ModalsName.fileExplorer = 'FileExplorer';\n  /** *********************************************************************\r\n   * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n   *\r\n   * This file is part of the Mobilize Frameworks, which is\r\n   * proprietary and confidential.\r\n   *\r\n   * NOTICE:  All information contained herein is, and remains\r\n   * the property of Mobilize.Net Corporation.\r\n   * The intellectual and technical concepts contained herein are\r\n   * proprietary to Mobilize.Net Corporation and may be covered\r\n   * by U.S. Patents, and are protected by trade secret or copyright law.\r\n   * Dissemination of this information or reproduction of this material\r\n   * is strictly forbidden unless prior written permission is obtained\r\n   * from Mobilize.Net Corporation.\r\n   *\r\n   * This file is subject to the terms and conditions defined in\r\n   * file 'LICENSE.txt', which is part of this source code package.\r\n   ***********************************************************************/\n\n  return ModalsName;\n})();\n\nclass MessageBox extends Modal {\n  name() {\n    return ModalsName.messageBox;\n  }\n  /**\r\n   * Trigger an event that tells the MessageBox component\r\n   * to show or to hide according the param value.\r\n   * @param params The value that indicates if the\r\n   * loading component is visible.\r\n   */\n\n  /* c8 ignore next 7 */\n\n\n  show(params) {\n    if (WebMapService.currentService) {\n      WebMapService.currentService.core.getEvent().publish('MessageBox', params);\n    }\n  }\n\n}\n\nlet RequestBuilder = /*#__PURE__*/(() => {\n  let RequestBuilder = class RequestBuilder {\n    constructor(inject = null) {\n      this.inject = inject;\n      this.inject = inject || Inject$1.Instance;\n      this.library = this.inject.resolve(Constants.Library);\n    }\n\n    create(action) {\n      let request;\n\n      switch (action.requestConfig.requestType) {\n        case RequestType.ModelRequest:\n          request = new Request();\n          request.vm = action.item ? action.item.UniqueID : '';\n          request.arguments = action.parameters;\n          break;\n\n        case RequestType.RawRequest:\n          request = action.parameters;\n          break;\n\n        default:\n          request = new Request();\n          request.parameters = action.parameters;\n          break;\n      }\n\n      return request;\n    }\n\n  };\n  RequestBuilder = __decorate([ExceptionHandlerClass(ErrorCodes.AngularClient), __metadata(\"design:paramtypes\", [Object])], RequestBuilder);\n  /** *********************************************************************\r\n   * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n   *\r\n   * This file is part of the Mobilize Frameworks, which is\r\n   * proprietary and confidential.\r\n   *\r\n   * NOTICE:  All information contained herein is, and remains\r\n   * the property of Mobilize.Net Corporation.\r\n   * The intellectual and technical concepts contained herein are\r\n   * proprietary to Mobilize.Net Corporation and may be covered\r\n   * by U.S. Patents, and are protected by trade secret or copyright law.\r\n   * Dissemination of this information or reproduction of this material\r\n   * is strictly forbidden unless prior written permission is obtained\r\n   * from Mobilize.Net Corporation.\r\n   *\r\n   * This file is subject to the terms and conditions defined in\r\n   * file 'LICENSE.txt', which is part of this source code package.\r\n   ***********************************************************************/\n\n  return RequestBuilder;\n})();\n\nclass FileExplorer extends Modal {\n  name() {\n    return ModalsName.fileExplorer;\n  }\n  /**\r\n   * Trigger an event that tells the FileExplorer component\r\n   * to show or to hide according the param value.\r\n   * @param params The value that indicates if the\r\n   * loading component is visible.\r\n   */\n\n  /* c8 ignore start */\n\n\n  show(params) {\n    if (WebMapService.currentService) {\n      WebMapService.currentService.core.getEvent().publish('FileExplorer', params);\n    }\n  }\n\n}\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n\nclass AlertModal extends Modal {\n  constructor() {\n    super();\n  }\n\n  name() {\n    return 'alert';\n  }\n  /** Trigger an event to navigate\r\n   * to the alert component\r\n   * This event is handled by the formscontainer component\r\n   */\n\n  /* c8 ignore next 5 */\n\n\n  show(args) {\n    WebMapService.currentService.core.getEvent().publish('alert', {\n      model: args\n    });\n  }\n\n}\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n\nclass AngularView extends View {\n  /* c8 ignore start */\n  constructor(model, inject) {\n    super(model, inject);\n    this.id = model.UniqueID;\n  }\n  /* c8 ignore next */\n\n\n  bindings() {}\n  /* c8 ignore next 4 */\n\n\n  render() {\n    const eventHandler = Inject$1.Instance.resolve(Constants.EventAggregator);\n    eventHandler.publish('navigateToView', this.id);\n  }\n  /* c8 ignore next 4 */\n\n\n  dispose() {\n    const eventHandler = Inject$1.Instance.resolve(Constants.EventAggregator);\n    eventHandler.publish('disposeView', this.id);\n  }\n  /* c8 ignore next 4 */\n\n\n  close() {\n    const eventHandler = Inject$1.Instance.resolve(Constants.EventAggregator);\n    eventHandler.publish('disposeView', this.id);\n  }\n  /* c8 ignore next 4 */\n\n\n  focus() {\n    const eventHandler = Inject$1.Instance.resolve(Constants.EventAggregator);\n    eventHandler.publish('setTopView', this.id);\n  }\n  /* c8 ignore next */\n\n\n  show() {}\n  /* c8 ignore next */\n\n\n  hide() {}\n  /* c8 ignore next 4 */\n\n\n  bringToFront() {\n    const eventHandler = Inject$1.Instance.resolve(Constants.EventAggregator);\n    eventHandler.publish('bringToFront', this.route);\n  }\n  /* c8 ignore next 3 */\n\n\n  isPendingLoad(view, views) {\n    return false;\n  }\n\n}\n\nclass AngularViewWF extends AngularView {\n  /* c8 ignore start */\n  constructor(model, inject) {\n    super(model, inject);\n  }\n  /* c8 ignore stop */\n\n  /**\r\n   * Verify if the parent container is actually loaded or pending to load\r\n   * @param {IView} view\r\n   * @param {Array<IView>} views\r\n   *\r\n   * @return True if the parent container is pending to load, otherwise return False\r\n   */\n\n\n  isPendingLoad(view, views) {\n    if (view.model.MdiParentInternal) {\n      return !view.model.MdiParentInternal.IsPendingViewLoaded;\n    } else if (view.model.ParentInternal) {\n      return views.length > 1;\n    } else {\n      return false;\n    }\n  }\n\n}\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n\nclass ViewResolver {\n  // eslint-disable-next-line\n\n  /* c8 ignore next 3 */\n  resolve(model, load) {\n    load(new AngularView(model));\n  }\n\n}\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n\nclass ViewResolverWF extends ViewResolver {\n  // eslint-disable-next-line\n\n  /* c8 ignore next 3 */\n  resolve(model, load) {\n    load(new AngularViewWF(model));\n  }\n\n}\n\nclass AngularViewPB extends AngularView {\n  /* c8 ignore start */\n  constructor(model, inject) {\n    super(model, inject);\n    /* c8 ignore stop */\n\n    /* c8 ignore start */\n\n    this.hasMDI = views => {\n      for (const view of views) {\n        if (view.model.WindowType === 3 || view.model.WindowType === 2) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n  }\n  /* c8 ignore stop */\n\n  /* c8 ignore start*/\n\n\n  isPendingLoad(view, views) {\n    return views.length > 1 && view.model.ParentWindow && this.hasMDI(views);\n  }\n\n}\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n\nclass ViewResolverPB extends ViewResolver {\n  // eslint-disable-next-line\n\n  /* c8 ignore next 3 */\n  resolve(model, load) {\n    load(new AngularViewPB(model));\n  }\n\n}\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n/**\r\n * @classdesc Implements the Angular version of the WebMap Core Application.\r\n */\n\n\nclass AngularApp {\n  /**\r\n   * Creates a new instance of the App class that contains angular-specific\r\n   * behavior.\r\n   */\n  constructor(serviceConfig, config) {\n    this.appVersion = serviceConfig.webMapVersion;\n    this.webMapConfig = serviceConfig;\n    this.appConfig = config;\n    this.currentApp = this.appVersion === WMConstants.version4 ? new App() : new AppV5();\n    this.setupApp(serviceConfig.webMapVersion);\n  }\n\n  setupApp(version) {\n    if (this.appConfig) {\n      this.currentApp.extCommandRegister = this.appConfig.onCommandRegister;\n      this.currentApp.extCommandHandlerRegister = this.appConfig.onCommandHandlerRegister;\n      this.currentApp.extOnSystemEvent = this.appConfig.onSystemEvent;\n    }\n\n    this.currentApp.onRegister = this.appVersion === WMConstants.version5 ? this.angularRegisterV5 : this.angularRegister;\n    this.currentApp.onViewHandler = this.viewHandler;\n    this.currentApp.onDeltaHandler = this.deltaHandlerInit;\n    this.currentApp.getModel = this.getModel;\n    this.currentApp.addModel = this.addModel;\n    this.currentApp.getEvent = this.getEvent;\n    this.currentApp.invoke = this.invoke;\n    this.currentApp.angularRegister = this.angularRegister;\n    this.currentApp.onCommandRegister = this.angularOnCommandRegister;\n    this.currentApp.onResolver = this.appVersion === WMConstants.version5 ? undefined : this.angularOnResolver;\n    this.currentApp.webMapConfig = this.webMapConfig;\n    this.currentApp.styleProperties = this.webMapConfig.styleProperties;\n  }\n  /**\r\n   * Returns event object from this App.\r\n   */\n\n\n  getEvent() {\n    return this.event;\n  }\n  /**\r\n   * Invokes a Command.\r\n   * @param command The command to invoke.\r\n   */\n\n\n  invoke(command) {\n    this.invoker.invoke(command);\n  }\n  /**\r\n   * Returns the model with the specified Unique Id.\r\n   * @param uniqueId The identifier of the model.\r\n   */\n\n\n  getModel(uniqueId) {\n    return this.models.getModel(uniqueId);\n  }\n  /**\r\n   * Adds a new modelV5 in models\r\n   * @param newModel The model.\r\n   */\n\n\n  addModel(model) {\n    this.models.add(new ModelV5(model.Id, model));\n  }\n  /**\r\n   * Applies angular-specific configuration to the dependency injector.\r\n   * @param inject The dependency injector.\r\n   */\n\n\n  angularRegister(inject) {\n    inject.register(Constants.UrlResolver, UrlResolver, Resolve.Singleton);\n    inject.register(Constants.Server, HttpServer, Resolve.Singleton);\n    inject.register(Constants.ViewResolver, this.webMapConfig.wmSourceVersion === WMConstants.sourceVersionPB ? ViewResolverPB : ViewResolverWF, Resolve.Singleton);\n    inject.register(Constants.RequestBuilder, RequestBuilder, Resolve.Singleton);\n  }\n  /**\r\n   * Applies angular-specific configuration to the dependency injector.\r\n   * @param inject The dependency injector.\r\n   */\n\n\n  angularRegisterV5(inject) {\n    this.angularRegister(inject);\n    inject.register(Constants.RequestBuilder, RequestBuilderV5, Resolve.Singleton);\n  }\n  /**\r\n   * Applies deltaHandler workers registration\r\n   */\n\n\n  deltaHandlerInit() {\n    this.deltaHandler.registerWorker(new ChangeDetectionWorker());\n    this.deltaHandler.registerWorker(new SyncCompletedWorker());\n  }\n  /**\r\n   * Register new Modal Components\r\n   * @param viewManager the webmap's viewmanager object\r\n   */\n\n\n  viewHandler(viewManager) {\n    viewManager.registerModal(new LoadingModal());\n    viewManager.registerModal(new SessionExpiredModal());\n    viewManager.registerModal(new MessageBox());\n    viewManager.registerModal(new FileExplorer());\n    viewManager.registerModal(new AlertModal());\n    /* c8 ignore next 3 */\n\n    if (this.extCommandHandlerRegister) {\n      this.extCommandHandlerRegister(viewManager);\n    }\n  }\n  /**\r\n   * This method allows to override existing command definitions or\r\n   * to register new ones\r\n   */\n\n  /* c8 ignore start */\n\n\n  angularOnCommandRegister(factory) {\n    if (this.extCommandRegister) {\n      this.extCommandRegister(factory);\n    }\n\n    if (this.extOnSystemEvent) {\n      const eventAggregator = this.currentApp.inject.resolve(Constants.EventAggregator);\n      this.extOnSystemEvent(eventAggregator);\n    }\n  }\n  /* c8 ignore stop */\n\n  /* c8 ignore next 3 */\n\n\n  angularOnResolver(modelResolver) {\n    modelResolver.registerBehavior(new EventBehavior(), true);\n  }\n\n}\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n/**\r\n * Used to define the parameters of a Send Command call used by both\r\n * WebMap5 and WebMap 4 protocols.\r\n */\n\n\nclass AngularCommand {\n  /* c8 ignore start */\n  constructor(sender, action, controller = '', serverEvent, receiverId, args, highPriority) {\n    this.sender = sender;\n    this.action = action;\n    this.controller = controller;\n    this.serverEvent = serverEvent;\n    this.receiverId = receiverId;\n    this.args = args;\n    this.highPriority = highPriority;\n  }\n\n}\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n\nvar CommandType = /*#__PURE__*/(() => {\n  (function (CommandType) {\n    CommandType[\"Create\"] = \"CreateData\";\n    CommandType[\"Delete\"] = \"DeleteData\";\n    CommandType[\"Update\"] = \"UpdateData\";\n  })(CommandType || (CommandType = {}));\n\n  return CommandType;\n})();\n\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n/*\r\nThe DataCommand class is used to manage command\r\nobject related with data\r\n */\nclass DataCommand {\n  /**\r\n   * This function is used to bind the command and\r\n   * register to bind command in WebMapService\r\n   *\r\n   * @memberof DataCommand\r\n   */\n  register() {\n    this.bindCommand = this.create.bind(this);\n    WebMapService.currentService.core.getEvent().publish(Events.PreActionCommandGeneratorRegistration, this.bindCommand);\n  }\n  /**\r\n   * If the command has changes, create a new command object\r\n   * with the receiverId, command name, and\r\n   * data. Then clean the command object.\r\n   * @returns The result is an object DataCommand\r\n   *\r\n   * @memberof DataCommand\r\n   */\n\n\n  create() {\n    const tmpData = {};\n\n    if (this.name == CommandType.Update && this.data) {\n      return this.buildUpdateContent();\n    } else if (this.data && this.data.length > 0) {\n      return this.buildContent();\n    }\n\n    return null;\n  }\n  /**\r\n   * Clean the data of the command and set false\r\n   * hasChanges flag\r\n   *\r\n   * @memberof DataCommand\r\n   */\n\n\n  clean() {\n    this.hasChanges = false;\n    this.data = undefined;\n  }\n  /**\r\n   * Update command properties\r\n   * @param data : object with the properties custom related\r\n   * with data\r\n   * @param properties : object with the properties related\r\n   * with styles and functionality\r\n   * @param commandType - The type of the command.\r\n   *\r\n   * @memberof DataCommand\r\n   */\n\n\n  update(data) {\n    if (this.name == CommandType.Update) {\n      this.data = data;\n    } else {\n      this.data.push(data);\n    }\n\n    this.hasChanges = true;\n  }\n  /**\r\n   * This function is called  when we needs to execute an\r\n   * un-registration event in the command\r\n   *\r\n   * @memberof DataCommand\r\n   */\n\n\n  destroy() {\n    WebMapService.currentService.core.getEvent().publish(Events.PreActionCommandGeneratorDeregistration, this.bindCommand);\n  }\n\n  buildContent() {\n    const tmpData = {};\n    tmpData['Data'] = this.data.map(data => {\n      const target = data.target;\n      this.cleanDelta(target);\n      return data.data(target);\n    });\n\n    if (this.hasChanges) {\n      const result = {\n        receiverId: this.receiverId,\n        command: this.name,\n        data: tmpData\n      };\n      this.clean();\n      return result;\n    }\n\n    return null;\n  }\n\n  buildUpdateContent() {\n    const current = this.data.data(this.data.target);\n    this.cleanDelta(this.data.target);\n\n    if (this.hasChanges) {\n      const result = {\n        receiverId: this.receiverId,\n        command: this.name,\n        data: current\n      };\n      this.clean();\n      return result;\n    }\n\n    return null;\n  }\n\n  cleanDelta(target) {\n    if (target.__delta) {\n      target.__delta = {\n        changes: [],\n        dataChanges: [],\n        isNew: false,\n        isDirty: true,\n        propsTargets: {}\n      };\n    }\n  }\n\n}\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n/*\r\nThis service manages the commands Array that stores the commands\r\nrelated with Data(DataCommand)\r\n*/\n\n\nlet DataCommandService = /*#__PURE__*/(() => {\n  class DataCommandService {\n    /**\r\n     * This function returns a DataCommand object from the commands Map object\r\n     * @param id - The id of the command to get.\r\n     * @returns A DataCommand object.\r\n     *\r\n     * @memberof DataCommandService\r\n     */\n    getCommand(id, type) {\n      return DataCommandService.commands.find(command => command.receiverId === id && command.name === type);\n    }\n    /**\r\n     * If a command exists, update it, otherwise register it.\r\n     * @param receiverId - The id of the element that will receive the command.\r\n     * @param commandType - CommandType - this is an enum that has the following values:\r\n     * @param data : object with the properties custom related\r\n     * with data\r\n     * @param properties : object with the properties related\r\n     * with styles and functionality\r\n     *\r\n     * @memberof DataCommandService\r\n     */\n\n\n    addCommand(receiverId, commandType, object) {\n      const command = this.getCommand(receiverId, commandType);\n      const data = object;\n\n      if (command) {\n        this.updateDataCommand(command, data);\n      } else {\n        this.registerDataCommand(receiverId, data, commandType);\n      }\n    }\n    /**\r\n     * This function builds a command and registers it, and also\r\n     *  sets it in the commands map.\r\n     * @param {string} receiverId - The id of the element that will receive the data.\r\n     * @param data : object with the properties custom related\r\n     * with data\r\n     * @param properties : object with the properties related\r\n     * with styles and functionality\r\n     * @param {CommandType} commandType - CommandType\r\n     *\r\n     * @memberof DataCommandService\r\n     */\n\n\n    registerDataCommand(receiverId, data, commandType) {\n      const command = this.buildDataCommand(receiverId, data, commandType);\n      command.register();\n      DataCommandService.commands.push(command);\n    }\n    /**\r\n     * Create an new object DataCommand.\r\n     * @param receiverId - The id of the receiver that will receive the command.\r\n     * @param data : object with the properties custom related\r\n     * with data\r\n     * @param properties : object with the properties related\r\n     * with styles and functionality\r\n     * @param commandType - CommandType\r\n     * @returns A DataCommand object.\r\n     *\r\n     * @memberof DataCommandService\r\n     */\n\n\n    buildDataCommand(receiverId, data, commandType) {\n      const command = new DataCommand();\n      command.receiverId = receiverId;\n\n      if (commandType === CommandType.Update) {\n        command.data = data;\n      } else {\n        command.data = [data];\n      }\n\n      command.hasChanges = true;\n      command.name = commandType;\n      return command;\n    }\n    /**\r\n     * This function updates the command data.\r\n     * @param commandType - CommandType - The type of command to update.\r\n     * @param  command - The command object that is being updated.\r\n     * @param data : object with the properties custom related\r\n     * with data\r\n     * @param properties : object with the properties related\r\n     * with styles and functionality\r\n     *\r\n     * @memberof DataCommandService\r\n     */\n\n\n    updateDataCommand(command, data) {\n      command.update(data);\n    }\n    /**\r\n     * For each key in the commands object, call the destroy function on the command\r\n     * object and then clear the commands object, but just if the command was executed.\r\n     *\r\n     * @memberof DataCommandService\r\n     */\n\n\n    ngOnDestroy() {\n      DataCommandService.commands = DataCommandService.commands.filter(command => {\n        if (!command.hasChanges) {\n          command.destroy();\n          return false;\n        }\n\n        return true;\n      });\n    }\n\n  }\n\n  // Register commands related with the manage of data\n  DataCommandService.commands = [];\n\n  DataCommandService.ɵfac = function DataCommandService_Factory(t) {\n    return new (t || DataCommandService)();\n  };\n\n  DataCommandService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: DataCommandService,\n    factory: DataCommandService.ɵfac\n  });\n  return DataCommandService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet SocketService = /*#__PURE__*/(() => {\n  class SocketService {\n    constructor() {\n      /**\r\n       * Store the webSocket that is being used.\r\n      @memberof SocketService\r\n      */\n      this.webSocket = undefined;\n    }\n    /**\r\n     * Returns a string that s the URL of the WebSocket.\r\n     * @returns\r\n     * @memberof SocketService\r\n     */\n\n\n    getURL() {\n      const origin = window.location.origin;\n      const protocol = window.location.protocol;\n      const urlBase = protocol === 'http:' ? 'ws:' : 'wss:';\n      return urlBase.concat(origin.slice(protocol.length, origin.length), '/dws');\n    }\n    /**\r\n     * Sets up a websocket connection to the server and binds the\r\n     * functions to the websocket events.\r\n     * @memberof SocketService\r\n     */\n\n\n    setupSocketConnection() {\n      this.webSocket = new WebSocket(this.getURL());\n      this.webSocket.onopen = this.onSocketOpen.bind(this);\n      this.webSocket.onclose = this.onSocketClose.bind(this);\n      this.webSocket.onmessage = this.onSocketMessage.bind(this);\n    }\n    /**\r\n     * Call this function when the state of the sockets is OPEN\r\n     * @memberof SocketService\r\n     */\n\n\n    onSocketOpen() {}\n    /**\r\n     * If the state of the connection is CLOSE, handle the error\r\n     * @param {CloseEvent} event - CloseEvent - The event that was triggered when the\r\n     * socket was closed.\r\n     * @memberof SocketService\r\n     */\n\n\n    onSocketClose(event) {\n      if (!event.wasClean) {\n        this.handleError(event);\n      }\n    }\n    /**\r\n     * When the socket receives a message, call the handleMessage function and pass\r\n     * it the event.\r\n     * @param event - The event object that was passed to the function.\r\n     */\n\n\n    onSocketMessage(event) {\n      this.handleMessage(event);\n    }\n    /**\r\n     * Throws a new NetworkException with the message 'Sockets error' and the code\r\n     * @memberof SocketService\r\n     */\n\n    /* c8 ignore next 3 */\n\n\n    handleError(event) {\n      throw new NetworkException('Sockets error', event?.code ?? 1006);\n    }\n    /**\r\n     * Sends a message to the WebSocket\r\n     * @param {IMessageCollections} message - IMessageCollections\r\n     * @memberof SocketService\r\n     */\n\n\n    sendMessage(message) {\n      this.webSocket.send(JSON.stringify(message));\n    }\n    /**\r\n     * Receives a message from the WebSocket, and apply in the models that get from\r\n     * WebMapService\r\n     * @param event\r\n     * @memberof SocketService\r\n     */\n\n\n    handleMessage(event) {\n      const message = JSON.parse(event.data);\n      const collectionModel = WebMapService.currentService.core.getModel(message.UniqueId);\n\n      if (collectionModel) {\n        Object.getPrototypeOf(collectionModel)._lambdasReceiver[message.Action.toLowerCase()]?.apply(collectionModel, message.Arguments);\n      }\n    }\n\n  }\n\n  SocketService.ɵfac = function SocketService_Factory(t) {\n    return new (t || SocketService)();\n  };\n\n  SocketService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: SocketService,\n    factory: SocketService.ɵfac\n  });\n\n  __decorate([ExceptionHandler(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [CloseEvent]), __metadata(\"design:returntype\", void 0)], SocketService.prototype, \"handleError\", null);\n\n  return SocketService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n/* Wrapper class that takes a service type and then sets the service to the\r\nappropriate service. */\n\n\nclass MessagingService {\n  /**\r\n   * Creates a new instance of MessagingService\r\n   * @param {SocketService} socketService - SocketService -\r\n   */\n\n  /* c8 ignore start */\n  constructor(socketService) {\n    this.socketService = socketService;\n  }\n  /* c8 ignore stop */\n\n  /**\r\n   * If the serviceType is 'socket', then set the service to the socketService,\r\n   * and then call the init() function on the socketService.\r\n   * @param {'socket' | 'http'} serviceType - 'socket' | 'http'\r\n   * @memberof MessagingService\r\n   */\n\n  /* c8 ignore next */\n\n\n  init(serviceType = 'http') {\n    MessagingService.currentService = this;\n\n    switch (serviceType) {\n      case 'socket':\n        this.service = this.socketService;\n        this.service.setupSocketConnection();\n        break;\n\n      case 'http':\n        /**\r\n         * TODO: Feature deltas mechanism\r\n         */\n        break;\n    }\n  }\n  /**\r\n   * This function takes a message object and passes it to the sendMessage function\r\n   * in the service.\r\n   * @param {IMessageCollections} message - IMessageCollections\r\n   * @memberof MessagingService\r\n   */\n\n\n  sendMessage(message) {\n    if (this.service) {\n      this.service.sendMessage(message);\n    }\n  }\n\n}\n/**\r\n * Store the current service.\r\n * @memberof MessagingService\r\n * */\n\n\nMessagingService.currentService = undefined;\n\nMessagingService.ɵfac = function MessagingService_Factory(t) {\n  return new (t || MessagingService)(i0.ɵɵinject(SocketService));\n};\n\nMessagingService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: MessagingService,\n  factory: MessagingService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n/* c8 ignore stop */\n\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n/**\r\n * Decorates a Property Setter to notify the WebMap Service about the change.\r\n */\n\n\nfunction NotifyChange(property, projectVersion) {\n  return function (target, key, descriptor) {\n    const originalMethod = descriptor.set;\n\n    descriptor.set = function (...args) {\n      // Execute original setter\n      // eslint-disable-next-line no-invalid-this\n      const result = originalMethod.apply(this, args); // this if check if the model is new,\n      // if the model is new return and don't use delta option\n      //to send the changes\n\n      if (this.model?.__delta?.isNew === true) {\n        return;\n      } // Avoid executing the method if should be ignored by protocol\n\n\n      if (projectVersion && projectVersion !== WebMapService.currentService.config.webMapVersion) {\n        return;\n      } // Execute change tracking\n\n\n      if (WebMapService.currentService) {\n        // eslint-disable-next-line no-invalid-this\n        if (this.model && property) {\n          WebMapService.currentService.notifyChange(this.model, property);\n        } else if (!this[ModelFactoryV5.isInitializingModel]) {\n          // if is a nested custom model, send this\n          WebMapService.currentService.notifyChange(this, key);\n        }\n      } else {\n        WMLogger.instance().error('Trying to notify a property change but the WebMap Service is not available');\n      }\n\n      return result;\n    };\n\n    return descriptor;\n  };\n}\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n/**\r\n * Decorates a Property to notify the WebMap Service about the change.\r\n *  @param property ? : string\r\n *  @param projectVersion ? : string\r\n */\n\n\nfunction NotifyPropertyChange(property, projectVersion) {\n  return (target, key, descriptor) => {\n    if (property) {\n      key = property;\n    }\n\n    return Object.assign({}, descriptor, {\n      get: function () {\n        return this.model ? this.model[key] : '';\n      },\n      set: function (newValue) {\n        if (!this.model) {\n          return;\n        } // Avoid executing the method if should be ignored by protocol\n\n\n        if (projectVersion && WebMapService.currentService && projectVersion !== WebMapService.currentService.config.webMapVersion) {\n          return;\n        }\n\n        if (WebMapService.currentService) {\n          // eslint-disable-next-line no-invalid-this\n          this.model[key] = newValue;\n          WebMapService.currentService.notifyChange(this.model, key);\n        } else {\n          WMLogger.instance().error('Trying to notify a property change but the WebMap Service is not available');\n        }\n      }\n    });\n  };\n}\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n/**\r\n * Data resolver is created to manage the references when we use add decorator\r\n * the idea is manage the model in target and the data to command in 'data'\r\n * @export\r\n * @class DataResolver\r\n */\n\n\nclass DataResolver {\n  /**\r\n   * Creates an instance of DataResolver.\r\n   * this.data is a lambda to resolve in the last moment to send the BE\r\n   * this.target save the model to keep de reference\r\n   * @param {*} args\r\n   * @param {*} functionAux\r\n   * @memberof DataResolver\r\n   */\n  constructor(args, functionAux) {\n    this.data = target => functionAux(target);\n\n    this.target = args;\n  }\n\n}\n/** *********************************************************************\r\n\r\nCopyright (C) Mobilize.Net  info@mobilize.net - All Rights Reserved\r\nThis file is part of the Mobilize Frameworks, which is\r\nproprietary and confidential.\r\nNOTICE: All information contained herein is, and remains\r\nthe property of Mobilize.Net  Corporation.\r\nThe intellectual and technical concepts contained herein are\r\nproprietary to Mobilize.Net  Corporation and may be covered\r\nby U.S. Patents, and are protected by trade secret or copyright law.\r\nDissemination of this information or reproduction of this material\r\nis strictly forbidden unless prior written permission is obtained\r\nfrom Mobilize.Net  Corporation.\r\nThis file is subject to the terms and conditions defined in\r\nfile 'LICENSE.txt', which is part of this source code package.\r\n***********************************************************************\r\n\r\n/** @type {*}\r\n * list a propierties that we need to delete\r\n * to have the model cleaner\r\n*/\n\n\nconst listOfPropertiesToDelete = ['childrenToNotify', 'eventChanges', 'events', 'id', 'mapperId', 'myInternalProperties', 'myIsModalView', 'myIsTempModel', 'myPointers', 'myUniqueID', 'referencedBy', 'references', 'stylePivot', 'IsModalView', 'IsTempModel', 'UniqueID', 'isArray', 'isPointer', '__delta', 'Id', 'data'];\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n/**\r\n * Decorator of function to send command of type CreateData\r\n */\n\nfunction Add() {\n  return function (target, key, descriptor) {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = function (...args) {\n      const result = originalMethod.apply(this, args);\n      const object = new DataResolver(args[0], createAuxObject);\n      this.dataCommandService.addCommand(this.id, CommandType.Create, object);\n      return result;\n    };\n\n    return descriptor;\n  };\n}\n/**\r\n * Here we create a auxiliar Object with the next structure\r\n *  { MobilizedId: \"1234\",\r\n *    data : { custom properties},\r\n *    props : { MapperId and styles or properties related with the behavior}\r\n *  }\r\n * we must delete many properties because the model return in some cases may\r\n * properties and we just need a same structure without more properties that we need\r\n *\r\n * @param {*} args\r\n * @return {*}\r\n */\n\n\nconst createAuxObject = args => {\n  const listToRemove = listOfPropertiesToDelete;\n  const argsCopy = { ...args\n  };\n  const {\n    Id,\n    data\n  } = argsCopy;\n  listToRemove.forEach(arg => {\n    delete argsCopy[`${arg}`];\n  });\n  const auxObj = {\n    MobilizeId: Id,\n    data: data ?? {},\n    properties: { ...argsCopy\n    }\n  };\n  return { ...auxObj\n  };\n};\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n/**\r\n * Decorator of function to send command of type DeleteData\r\n */\n\n\nfunction Delete() {\n  return function (target, key, descriptor) {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = function (...args) {\n      const result = originalMethod.apply(this, args);\n      const object = new DataResolver(args[0], createAuxObjectDelete);\n      this.dataCommandService.addCommand(this.id, CommandType.Delete, object);\n      return result;\n    };\n\n    return descriptor;\n  };\n}\n/**\r\n * Here we create a auxiliar Object that return the MobilizeId\r\n * @param {string} id\r\n * @return {*}\r\n */\n\n\nconst createAuxObjectDelete = id => {\n  const auxObj = {\n    MobilizeId: id\n  };\n  return { ...auxObj\n  };\n};\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n/**\r\n * Decorator of function to send command of type UpdateData, this decorator\r\n * should be used when we needs to send changes in properties (style, enable...)\r\n * @param {string} property  - The name of the property that is being updated.\r\n */\n\n\nfunction Update(property) {\n  return function (target, key, descriptor) {\n    const originalMethod = descriptor.set;\n\n    descriptor.set = function (...args) {\n      const result = originalMethod.apply(this, args);\n      verifyDelta(this.model);\n\n      if (!this.model.__delta.isNew) {\n        registerDelta(this.model, this.id, this.dataCommandService);\n        registerPropertyChange(this.model, property);\n      }\n\n      return result;\n    };\n\n    return descriptor;\n  };\n}\n/**\r\n * Decorator of function to send command of type Update with target, this decorator\r\n * should be used when we needs to send changes in properties (style, enable...)\r\n * and the binf should enable to resolve the value from a bound function.\r\n * @param {string} property  - The name of the property that is being updated.\r\n * @param property  - The name of the property that is being updated.\r\n * @param bind - The target function to resolve the value\r\n */\n\n\nfunction UpdateWithTarget(property, targetFunc) {\n  return function (target, key, descriptor) {\n    const originalMethod = descriptor.set;\n\n    descriptor.set = function (...args) {\n      const result = originalMethod.apply(this, args);\n      verifyDelta(this.model);\n\n      if (!this.model.__delta.isNew) {\n        registerDelta(this.model, this.id, this.dataCommandService);\n        registerPropertyChange(this.model, property);\n\n        if (this.model.__delta.propsTargets[property] == undefined) {\n          this.model.__delta.propsTargets[property] = targetFunc.bind(this);\n        }\n      }\n\n      return result;\n    };\n\n    return descriptor;\n  };\n}\n/**\r\n * Decorator of function to send command of type UpdateData, this decorator\r\n * should be used when we needs to send changes in data\r\n */\n\n\nfunction UpdateData(dataFunc) {\n  return function (target, key, descriptor) {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = function (...args) {\n      const result = originalMethod.apply(this, args);\n      verifyDelta(this.model);\n\n      if (!this.model.__delta.isNew) {\n        registerDelta(this.model, this.id, this.dataCommandService);\n        registerDataChange(this.model, args[0]);\n\n        if (this.model.__delta.propsTargets[targetDataName] == undefined) {\n          this.model.__delta.propsTargets[targetDataName] = dataFunc.bind(this);\n        }\n      }\n\n      return result;\n    };\n\n    return descriptor;\n  };\n}\n\nconst targetDataName = '___@@@DataName';\n/**\r\n * Resolves updates registered on a model.\r\n * @param model The model where the changes are located.\r\n * @returns Json object with all changes required to be updated on the command.\r\n */\n\nconst resolveUpdates = model => {\n  const result = {\n    Properties: {},\n    Data: {},\n    MobilizeId: model.Id\n  };\n\n  model.__delta.changes.forEach(element => {\n    if (model.__delta.propsTargets[element]) {\n      result.Properties[element] = model.__delta.propsTargets[element]();\n    } else {\n      result.Properties[element] = model[element];\n    }\n  });\n\n  if (model.__delta.propsTargets[targetDataName]) {\n    const targetDataFunc = model.__delta.propsTargets[targetDataName];\n\n    model.__delta.dataChanges.forEach(element => {\n      result.Data[element] = targetDataFunc(element);\n    });\n  }\n\n  return result;\n};\n\nfunction registerDelta(model, id, dataCommandService) {\n  if (!model.__delta.isDirty) {\n    const object = new DataResolver(model, resolveUpdates);\n    dataCommandService.addCommand(id, CommandType.Update, object);\n    model.__delta.isDirty = true;\n  }\n}\n\nfunction registerPropertyChange(model, property) {\n  if (!model.__delta.changes.includes(property)) {\n    model.__delta.changes.push(property);\n  }\n}\n\nfunction registerDataChange(model, name) {\n  if (!model.__delta.dataChanges.includes(name)) {\n    model.__delta.dataChanges.push(name);\n  }\n}\n\nfunction verifyDelta(model) {\n  if (model.__delta == undefined) {\n    model.__delta = {\n      changes: [],\n      dataChanges: [],\n      isNew: false,\n      isDirty: false,\n      propsTargets: {}\n    };\n  }\n}\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n/**\r\n * Decorates a methods in the collections, to sendMessages with the updates in\r\n * the collections and create a reference of the method to call later\r\n * @memberof UpdateCollection\r\n */\n\n\nfunction SendMessage(action) {\n  return function (target, key, descriptor) {\n    const originalMethod = descriptor.value;\n    const lambda = action ?? key; // Stores a lambda in the prototype of the collection\n\n    target['_lambdasReceiver'] = {\n      [lambda.toLowerCase()]: descriptor.value,\n      ...target._lambdasReceiver\n    }; // Call sendMessage in the MessagingService\n\n    descriptor.value = function (...args) {\n      const result = originalMethod.apply(this, args);\n      MessagingService?.currentService?.sendMessage({\n        Arguments: args,\n        UniqueId: this.id,\n        Action: lambda.toLocaleLowerCase()\n      });\n      return result;\n    };\n\n    return descriptor;\n  };\n}\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n/** *********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { Add, AngularApp, AngularCommand, ChangeDetectionWorker, DataCommandService, Delete, InjectorInstance, LoadingModal, MessagingService, NotifyChange, NotifyPropertyChange, SendMessage, SessionExpiredModal, SocketService, SyncCompletedWorker, Update, ViewResolver, WEBMAP_APP_CONFIG, WEBMAP_CONFIG, WEBMAP_DEFAULT_CONFIG, WMConstants, WebMapInterceptor, WebMapModule, WebMapService, WebMapUtils }; //# sourceMappingURL=mobilize-angularclient.mjs.map","map":null,"metadata":{},"sourceType":"module"}