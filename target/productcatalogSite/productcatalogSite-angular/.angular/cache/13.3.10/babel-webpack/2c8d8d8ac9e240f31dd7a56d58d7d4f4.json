{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(24);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  20:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.core\");\n    /***/\n  },\n\n  /***/\n  24:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(20), __webpack_require__(25)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function ($, undefined) {\n        // WARNING: removing the following jshint declaration and turning\n        // == into === to make JSHint happy will break functionality.\n\n        /*jshint eqnull:true  */\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            Observable = kendo.Observable,\n            parseColor = kendo.parseColor,\n            extend = $.extend,\n            Color = kendo.Color,\n            KEYS = kendo.keys,\n            BACKGROUNDCOLOR = \"background-color\",\n            WHITE = \"#ffffff\",\n            BLACK = \"#000000\",\n            NS = \".kendoColorTools\",\n            KEYDOWN_NS = \"keydown\" + NS,\n            ColorSelector = ui.colorpicker.ColorSelector,\n            contrastToolUtils = ui.colorpicker.contrastToolUtils;\n\n        function preventDefault(ev) {\n          ev.preventDefault();\n        }\n\n        function bind(callback, obj) {\n          return function () {\n            return callback.apply(obj, arguments);\n          };\n        }\n\n        var ColorInput = Observable.extend({\n          init: function (element, options) {\n            var that = this;\n            that.element = element;\n            that.options = options;\n            that._viewModel = kendo.observable({\n              switchMode: that.switchMode.bind(that),\n              keydown: that.keydown.bind(that),\n              mode: function (mode) {\n                return mode === this.get(\"format\");\n              },\n              format: options.format,\n              formats: options.formats,\n              rgb: null,\n              hex: function () {\n                return this.get(\"rgb\") !== null && this.get(\"rgb\").toCss({\n                  alpha: options.opacity\n                });\n              }\n            });\n            that._changeHandler = that.change.bind(that);\n\n            that._viewModel.bind(\"change\", that._changeHandler);\n\n            that._render();\n\n            that.element.on(KEYDOWN_NS, that.keydown.bind(that));\n            Observable.fn.init.call(that);\n          },\n          _template: kendo.template('# if (options.formats && options.formats.length > 1) { #' + '<div class=\"k-vstack\">' + '<button class=\"k-colorgradient-toggle-mode\" data-#:ns#role=\"button\" data-#:ns#icon=\"arrows-kpi\" data data-#:ns#bind=\"click: switchMode\" data-#:ns#fill-mode=\"flat\" data-#:ns#size=\"#: options.size #\" title=\"#: options.messages.toggleFormat #\">' + '</button>' + '</div>' + '# } #' + // HEX input\n          '# if (options.formats && options.formats.indexOf(\"hex\") >= 0) { #' + '<div class=\"k-vstack k-flex-1\" data-#:ns#bind=\"visible: mode(\\'hex\\')\">' + '<input type=\"text\" data-#:ns#bind=\"value: hex\" data-#:ns#role=\"textbox\" data-#:ns#size=\"#: options.size #\" tabindex=\"#:options.tabindex#\"  aria-label=\"#: options.messages.hex #\"/>' + '<label class=\"k-colorgradient-input-label\">HEX</label>' + '</div>' + '# } #' + // RGBA input\n          '# if (options.formats && options.formats.indexOf(\"rgb\") >= 0) { #' + '<div  class=\"k-vstack\" data-#:ns#bind=\"visible: mode(\\'rgb\\')\">' + '<input tabindex=\"#:options.tabindex#\" data-#:ns#bind=\"value: rgb.r\" data-#:ns#role=\"numerictextbox\" data-#:ns#size=\"#: options.size #\" data-#:ns#max=\"255\" data-#:ns#min=\"0\" data-#:ns#decimals=\"0\" data-#:ns#spinners=\"false\" data-#:ns#format=\"n0\"  aria-label=\"#: options.messages.red #\" />' + '<label class=\"k-colorgradient-input-label\">R</label>' + '</div>' + '<div  class=\"k-vstack\" data-#:ns#bind=\"visible: mode(\\'rgb\\')\">' + '<input tabindex=\"#:options.tabindex#\" data-#:ns#bind=\"value: rgb.g\" data-#:ns#role=\"numerictextbox\" data-#:ns#size=\"#: options.size #\" data-#:ns#max=\"255\" data-#:ns#min=\"0\" data-#:ns#decimals=\"0\" data-#:ns#spinners=\"false\" data-#:ns#format=\"n0\"  aria-label=\"#: options.messages.green #\" />' + '<label class=\"k-colorgradient-input-label\">G</label>' + '</div>' + '<div  class=\"k-vstack\" data-#:ns#bind=\"visible: mode(\\'rgb\\')\">' + '<input tabindex=\"#:options.tabindex#\" data-#:ns#bind=\"value: rgb.b\" data-#:ns#role=\"numerictextbox\" data-#:ns#size=\"#: options.size #\" data-#:ns#max=\"255\" data-#:ns#min=\"0\" data-#:ns#decimals=\"0\" data-#:ns#spinners=\"false\" data-#:ns#format=\"n0\"  aria-label=\"#: options.messages.blue #\"/>' + '<label class=\"k-colorgradient-input-label\">B</label>' + '</div>' + '#if(options.opacity){#' + '<div  class=\"k-vstack\" data-#:ns#bind=\"visible: mode(\\'rgb\\')\">' + '<input tabindex=\"#:options.tabindex#\" data-#:ns#bind=\"value: rgb.a\" data-#:ns#role=\"numerictextbox\" data-#:ns#size=\"#: options.size #\" data-#:ns#step=\"0.1\" data-#:ns#max=\"1\" data-#:ns#min=\"0\" data-#:ns#decimals=\"1\" data-#:ns#spinners=\"false\" data-#:ns#format=\"n1\"  aria-label=\"#: options.messages.alpha #\" />' + '<label class=\"k-colorgradient-input-label\">A</label>' + '</div>' + '# } #' + '# } #'),\n          destroy: function () {\n            var that = this;\n\n            that._viewModel.unbind(\"change\", that._changeHandler);\n\n            kendo.unbind(that.element);\n            kendo.destroy(that.element);\n            that.element.off(KEYDOWN_NS);\n            delete that._viewModel;\n            delete that._changeHandler;\n          },\n          _render: function () {\n            var that = this;\n            that.element.append(that._template({\n              ns: kendo.ns,\n              guid: kendo.guid(),\n              options: that.options\n            })).parent();\n            kendo.bind(that.element, that._viewModel);\n            that.element.attr(\"data-\" + kendo.ns + \"stop\", \"stop\");\n          },\n          value: function (color) {\n            var that = this;\n            that._color = color && color.toBytes() || parseColor(BLACK);\n            that._preventChangeEvent = true;\n\n            that._viewModel.set(\"rgb\", that._color);\n\n            delete that._preventChangeEvent;\n          },\n          reset: function () {\n            var that = this;\n            that._preventChangeEvent = true;\n\n            that._viewModel.set(\"rgb\", parseColor(BLACK));\n\n            delete that._preventChangeEvent;\n          },\n          switchMode: function () {\n            var that = this,\n                model = that._viewModel,\n                currentFormat = model.format,\n                index = model.formats.indexOf(currentFormat) + 1;\n            index = index >= model.formats.length ? 0 : index;\n            that._preventChangeEvent = true;\n\n            that._viewModel.set(\"format\", model.formats[index]);\n\n            delete that._preventChangeEvent;\n          },\n          change: function (ev) {\n            var that = this;\n\n            if (ev.field.indexOf(\"rgb\") >= 0) {\n              that._color = that._tryParseColor(that._viewModel.rgb.toCssRgba());\n\n              that._viewModel.set(\"hex\", that._color.toCss({\n                alpha: that.options.opacity\n              }));\n            } else if (ev.field === \"hex\") {\n              that._color = that._tryParseColor(ev.sender[ev.field]);\n\n              that._viewModel.set(\"rgb\", that._color);\n            }\n\n            if (!that._preventChangeEvent) {\n              that.trigger(\"change\", {\n                value: that._color\n              });\n            }\n          },\n          _tryParseColor: function (color) {\n            var that = this;\n\n            try {\n              color = parseColor(color) || that._color;\n            } catch (error) {\n              color = that._color;\n            }\n\n            return color;\n          },\n          keydown: function (ev) {\n            var that = this,\n                textbox = $(ev.target).data(\"kendoTextBox\");\n\n            if (ev.keyCode === KEYS.ENTER && $(ev.target).is(\"input\")) {\n              if (textbox && textbox._change) {\n                textbox._change();\n              }\n\n              that.trigger(\"change\", {\n                value: that._color\n              });\n              that.trigger(\"select\", {\n                value: that._color\n              });\n            }\n          }\n        });\n        var ColorGradient = ColorSelector.extend({\n          init: function (element, options) {\n            var that = this,\n                value;\n            ColorSelector.fn.init.call(that, element, options);\n            options = that.options = kendo.deepExtend({}, that.options, options);\n\n            if (options.messages.previewInput) {\n              options.messages.hex = options.messages.previewInput;\n            }\n\n            options.messages = options.messages ? $.extend(that.options.messages, options.messages) : that.options.messages;\n            element = that.element;\n            that.wrapper = element.addClass(\"k-colorgradient\").append(that._template(options));\n            that._hueElements = $(\".k-hsv-rectangle, .k-alpha-slider .k-slider-track\", element);\n            that._colorgradientInputs = $(\".k-colorgradient-inputs\", element);\n            that._contrastTool = $(\".k-colorgradient-color-contrast\", element);\n\n            that._sliders();\n\n            that._hsvArea();\n\n            value = that._value;\n\n            if (that._colorgradientInputs.length) {\n              that._colorInput = new ColorInput(that._colorgradientInputs, extend({}, options, {\n                tabindex: this._tabIndex\n              }));\n\n              that._colorInput.bind(\"change\", function (ev) {\n                that._updateUI(ev.value, true);\n              });\n\n              that._colorInput.bind(\"select\", function (ev) {\n                var color = parseColor(ev.value);\n\n                that._select(color);\n\n                that.trigger(\"forceSelect\", {\n                  value: that.value()\n                });\n              });\n            }\n\n            that._updateUI(value);\n          },\n          options: {\n            name: \"ColorGradient\",\n            opacity: false,\n            input: true,\n            format: \"hex\",\n            formats: [\"rgb\", \"hex\"],\n            contrastTool: false,\n            size: \"medium\",\n            messages: {\n              contrastRatio: \"Contrast ratio:\",\n              fail: \"Fail\",\n              pass: \"Pass\",\n              hex: \"HEX\",\n              toggleFormat: \"Toggle format\",\n              red: \"Red\",\n              green: \"Green\",\n              blue: \"Blue\",\n              alpha: \"Alpha\"\n            }\n          },\n          _template: kendo.template('<div class=\"k-colorgradient-canvas k-hstack\">' + '<div class=\"k-hsv-rectangle\"><div class=\"k-hsv-gradient\"></div><div class=\"k-hsv-draghandle k-draghandle\"></div></div>' + '<div class=\"k-hsv-controls k-hstack\">' + '<input class=\"k-hue-slider k-colorgradient-slider\" />' + '# if (opacity) { #' + '<input class=\"k-alpha-slider k-colorgradient-slider\" />' + '# } #' + '</div>' + '</div>' + '# if (input) { #' + '<div class=\"k-colorgradient-inputs k-hstack\">' + '</div>' + '# } #' + '# if (contrastTool) { #' + '<div class=\"k-colorgradient-color-contrast k-vbox\">' + '</div>' + '# } #'),\n          _onEnable: function (enable) {\n            this._hueSlider.enable(enable);\n\n            if (this._opacitySlider) {\n              this._opacitySlider.enable(enable);\n            }\n\n            this.wrapper.find(\"input\").attr(\"disabled\", !enable);\n\n            var handle = this._hsvRect.find(\".k-draghandle\");\n\n            if (enable) {\n              handle.attr(\"tabIndex\", this._tabIndex);\n            } else {\n              handle.removeAttr(\"tabIndex\");\n            }\n          },\n          _sliders: function () {\n            var that = this,\n                element = that.element,\n                hueSlider = element.find(\".k-hue-slider\"),\n                opacitySlider = element.find(\".k-alpha-slider\");\n\n            function hueChange(e) {\n              that._updateUI(that._getHSV(e.value, null, null, null));\n            }\n\n            hueSlider.attr(\"aria-label\", \"hue saturation\");\n            that._hueSlider = hueSlider.kendoSlider({\n              min: 0,\n              max: 360,\n              tickPlacement: \"none\",\n              showButtons: false,\n              orientation: \"vertical\",\n              slide: hueChange,\n              change: hueChange\n            }).data(\"kendoSlider\");\n\n            function opacityChange(e) {\n              that._updateUI(that._getHSV(null, null, null, e.value / 100));\n            }\n\n            opacitySlider.attr(\"aria-label\", \"opacity\");\n            that._opacitySlider = opacitySlider.kendoSlider({\n              min: 0,\n              max: 100,\n              tickPlacement: \"none\",\n              showButtons: false,\n              orientation: \"vertical\",\n              slide: opacityChange,\n              change: opacityChange\n            }).data(\"kendoSlider\");\n          },\n          _hsvArea: function () {\n            var that = this,\n                element = that.element,\n                hsvRect = element.find(\".k-hsv-rectangle\"),\n                hsvHandle = hsvRect.find(\".k-draghandle\").attr(\"tabIndex\", 0).on(KEYDOWN_NS, bind(that._keydown, that));\n\n            function update(x, y) {\n              var offset = this.offset,\n                  dx = x - offset.left,\n                  dy = y - offset.top,\n                  rw = this.width,\n                  rh = this.height;\n              dx = dx < 0 ? 0 : dx > rw ? rw : dx;\n              dy = dy < 0 ? 0 : dy > rh ? rh : dy;\n\n              that._svChange(dx / rw, 1 - dy / rh);\n            }\n\n            that._hsvEvents = new kendo.UserEvents(hsvRect, {\n              global: true,\n              press: function (e) {\n                this.offset = kendo.getOffset(hsvRect);\n                this.width = hsvRect.width();\n                this.height = hsvRect.height();\n                hsvHandle.focus();\n                update.call(this, e.x.location, e.y.location);\n              },\n              start: function () {\n                hsvRect.addClass(\"k-dragging\");\n                hsvHandle.focus();\n              },\n              move: function (e) {\n                e.preventDefault();\n                update.call(this, e.x.location, e.y.location);\n              },\n              end: function () {\n                hsvRect.removeClass(\"k-dragging\");\n              }\n            });\n            that._hsvRect = hsvRect;\n            that._hsvHandle = hsvHandle;\n          },\n          setBackgroundColor: function (color) {\n            var that = this;\n\n            if (that.options.contrastTool) {\n              that.options.contrastTool = $.isPlainObject(that.options.contrastTool) ? extend({}, that.options.contrastTool, {\n                backgroundColor: color\n              }) : {\n                backgroundColor: color\n              };\n\n              that._updateColorContrast(that.color() || parseColor(WHITE));\n            }\n          },\n          _updateUI: function (color, dontChangeInput) {\n            var that = this;\n\n            if (!color) {\n              that._reset();\n\n              return;\n            }\n\n            if (!dontChangeInput && that._colorInput) {\n              that._colorInput.value(color);\n            }\n\n            that._triggerSelect(color);\n\n            that._updateHsv(color);\n\n            if (that._contrastTool.length) {\n              that._updateColorContrast(color);\n            }\n          },\n          _reset: function () {\n            var that = this;\n\n            if (that._colorInput) {\n              that._colorInput.reset();\n            }\n\n            that._resetHsv();\n\n            that._resetColorContrast();\n          },\n          _resetHsv: function () {\n            var that = this,\n                color = parseColor(BLACK);\n\n            that._updateHsv(color);\n          },\n          _updateHsv: function (color) {\n            var that = this,\n                rect = that._hsvRect;\n            color = color.toHSV();\n\n            that._hsvHandle.css({\n              // saturation is 0 on the left side, full (1) on the right\n              left: color.s * rect.width() + \"px\",\n              // value is 0 on the bottom, full on the top.\n              top: (1 - color.v) * rect.height() + \"px\"\n            });\n\n            that._hueElements.css(BACKGROUNDCOLOR, Color.fromHSV(color.h, 1, 1, 1).toCss());\n\n            that._hueSlider.value(color.h);\n\n            if (that._opacitySlider) {\n              that._opacitySlider.wrapper.find(\".k-slider-track\").css(\"background\", \"linear-gradient(to top, transparent, \" + Color.fromHSV(color.h, 1, 1, 1).toCss());\n\n              that._opacitySlider.value(100 * color.a);\n            }\n          },\n          _resetColorContrast: function () {\n            var that = this,\n                contrastOptions = that.options.contrastTool;\n\n            if (that._contrastTool.length) {\n              that._updateColorContrast(contrastOptions.backgroundColor ? parseColor(contrastOptions.backgroundColor) : parseColor(WHITE));\n            }\n          },\n          _updateColorContrast: function (color) {\n            var that = this,\n                contrastOptions = that.options.contrastTool,\n                backgroundColor = contrastOptions.backgroundColor ? parseColor(contrastOptions.backgroundColor) : parseColor(WHITE),\n                contrastRatio = contrastToolUtils.getContrastFromTwoRGBAs(parseColor(color.toCssRgba()), backgroundColor),\n                contrastRatioTemplate = kendo.template('<div class=\"k-contrast-ratio\">' + '<span class=\"k-contrast-ratio-text\">#:messages.contrastRatio# #:kendo.toString(ratio, \"n2\")#</span>' + '<span class=\"k-contrast-validation k-text-success\">' + '#if (ratio > 4.5) {#' + '<span class=\"k-icon k-i-check\"></span>' + '#}#' + '#if (ratio > 7) {#' + '<span class=\"k-icon k-i-check\"></span>' + '#}#' + '</span></div>'),\n                labelTemplate = kendo.template('<div>' + '<span>#:level#: #:limit# </span>' + '#if (ratio > limit) {#' + '<span class=\"k-contrast-validation k-text-success\">#:messages.pass# <span class=\"k-icon k-i-check\"></span></span>' + '#} else {#' + '<span class=\"k-contrast-validation k-text-error\">#:messages.fail# <span class=\"k-icon k-i-close\"></span></span>' + '#}#' + '</div>'),\n                output = \"\";\n            output += contrastRatioTemplate({\n              messages: that.options.messages,\n              ratio: contrastRatio\n            });\n            output += labelTemplate({\n              messages: that.options.messages,\n              ratio: contrastRatio,\n              limit: 4.5,\n              level: \"AA\"\n            });\n            output += labelTemplate({\n              messages: that.options.messages,\n              ratio: contrastRatio,\n              limit: 7,\n              level: \"AAA\"\n            });\n\n            that._contrastTool.find(\".k-contrast-ratio, div\").remove();\n\n            that._contrastTool.append(output);\n\n            that._updateContrastSvg(backgroundColor);\n          },\n          _updateContrastSvg: function (backgroundColor) {\n            var that = this,\n                hsvRect = that._hsvRect,\n                svgClassName = \"k-color-contrast-svg\",\n                metrics = {\n              width: hsvRect.width(),\n              height: hsvRect.height()\n            },\n                newSvg;\n\n            if (!metrics.width || !metrics.height) {\n              return;\n            }\n\n            newSvg = $(contrastToolUtils.renderSvgCurveLine(metrics, that._getHSV(), backgroundColor)).addClass(svgClassName);\n            hsvRect.find(\".\" + svgClassName).remove();\n            hsvRect.append(newSvg);\n          },\n          _keydown: function (ev) {\n            var that = this;\n\n            function move(prop, d) {\n              var c = that._getHSV();\n\n              c[prop] += d * (ev.shiftKey ? 0.01 : 0.05);\n\n              if (c[prop] < 0) {\n                c[prop] = 0;\n              }\n\n              if (c[prop] > 1) {\n                c[prop] = 1;\n              }\n\n              that._updateUI(c);\n\n              preventDefault(ev);\n            }\n\n            function hue(d) {\n              var c = that._getHSV();\n\n              c.h += d * (ev.shiftKey ? 1 : 5);\n\n              if (c.h < 0) {\n                c.h = 0;\n              }\n\n              if (c.h > 359) {\n                c.h = 359;\n              }\n\n              that._updateUI(c);\n\n              preventDefault(ev);\n            }\n\n            switch (ev.keyCode) {\n              case KEYS.LEFT:\n                if (ev.ctrlKey) {\n                  hue(-1);\n                } else {\n                  move(\"s\", -1);\n                }\n\n                break;\n\n              case KEYS.RIGHT:\n                if (ev.ctrlKey) {\n                  hue(1);\n                } else {\n                  move(\"s\", 1);\n                }\n\n                break;\n\n              case KEYS.UP:\n                move(ev.ctrlKey && that._opacitySlider ? \"a\" : \"v\", 1);\n                break;\n\n              case KEYS.DOWN:\n                move(ev.ctrlKey && that._opacitySlider ? \"a\" : \"v\", -1);\n                break;\n\n              case KEYS.ENTER:\n                that._select(that._getHSV());\n\n                break;\n\n              case KEYS.F2:\n                that._colorInput.element.find(\"input\").trigger(\"focus\").select();\n\n                break;\n\n              case KEYS.ESC:\n                that._cancel();\n\n                break;\n            }\n          },\n          focus: function () {\n            this._hsvHandle.focus();\n          },\n          _getHSV: function (h, s, v, a) {\n            var that = this,\n                rect = that._hsvRect,\n                width = rect.width(),\n                height = rect.height(),\n                handlePosition = this._hsvHandle.position();\n\n            if (!width || !height) {\n              return that.color() ? that.color().toHSV() : parseColor(BLACK);\n            }\n\n            if (h == null) {\n              h = that._hueSlider.value();\n            }\n\n            if (s == null) {\n              s = handlePosition.left / width;\n            }\n\n            if (v == null) {\n              v = 1 - handlePosition.top / height;\n            }\n\n            if (a == null) {\n              a = that._opacitySlider ? that._opacitySlider.value() / 100 : 1;\n            }\n\n            return Color.fromHSV(h, s, v, a);\n          },\n          _svChange: function (s, v) {\n            var color = this._getHSV(null, s, v, null);\n\n            this._updateUI(color);\n          },\n          destroy: function () {\n            this._hsvEvents.destroy();\n\n            this._hueSlider.destroy();\n\n            if (this._opacitySlider) {\n              this._opacitySlider.destroy();\n            }\n\n            if (this._colorInput) {\n              this._colorInput.destroy();\n            }\n\n            this._hueSlider = this._opacitySlider = this._hsvRect = this._hsvHandle = this._hueElements = this._selectedColor = this._colorAsText = this._contrastTool = null;\n            ColorSelector.fn.destroy.call(this);\n          }\n        });\n        ui.plugin(ColorGradient);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  25:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./contrastToolUtils\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}