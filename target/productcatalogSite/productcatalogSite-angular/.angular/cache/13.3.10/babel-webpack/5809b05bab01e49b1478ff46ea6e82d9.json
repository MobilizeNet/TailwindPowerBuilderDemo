{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1328);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1065:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.dropdownlist\");\n    /***/\n  },\n\n  /***/\n  1094:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.slider\");\n    /***/\n  },\n\n  /***/\n  1137:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.tooltip\");\n    /***/\n  },\n\n  /***/\n  1328:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1094), __webpack_require__(1329), __webpack_require__(1065), __webpack_require__(1137)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"mediaplayer\",\n        name: \"MediaPlayer\",\n        category: \"web\",\n        description: \"\",\n        depends: [\"slider\", \"toolbar\", \"dropdownlist\", \"tooltip\"]\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            END = \"end\",\n            PAUSE = \"pause\",\n            PLAY = \"play\",\n            READY = \"ready\",\n            TIMECHANGE = \"timeChange\",\n            VOLUMECHANGE = \"volumeChange\",\n            FULLSCREEN_ENTER = \"k-i-full-screen\",\n            FULLSCREEN_EXIT = \"k-i-full-screen-exit\",\n            MUTE = \"k-i-volume-off\",\n            LOW_VOLUME = \"k-i-volume-down\",\n            HIGH_VOLUME = \"k-i-volume-up\",\n            VIDEO_QUALITY = \"k-mediaplayer-quality\",\n            STATE_PLAY = \"k-i-play\",\n            STATE_PAUSE = \"k-i-pause\",\n            TITLEBAR = \"k-mediaplayer-titlebar\",\n            TITLE = \"k-title\",\n            TOOLBARWRAP = \"k-mediaplayer-toolbar-wrap\",\n            TOOLBAR = \"k-mediaplayer-toolbar\",\n            SLIDER = \"k-mediaplayer-seekbar\",\n            VOLUME_SLIDER = \"k-mediaplayer-volume\",\n            MEDIA = \"k-mediaplayer-media\",\n            OVERLAY = \"k-mediaplayer-overlay\",\n            YTPLAYER = \"k-mediaplayer-yt\",\n            DOT = \".\",\n            ui = kendo.ui,\n            ns = \".kendoMediaPlayer\",\n            baseTime = new Date(1970, 0, 1),\n            timeZoneSec = baseTime.getTimezoneOffset() * 60,\n            Widget = kendo.ui.Widget,\n            isArray = Array.isArray,\n            timeFormats = {\n          shortTime: \"mm:ss\",\n          longTime: \"HH:mm:ss\"\n        },\n            template = kendo.template,\n            keys = kendo.keys,\n            templates = {\n          htmlPlayer: \"<video class='\" + MEDIA + \"'> </video>\",\n          titleBar: template(\"<div class='\" + TITLEBAR + \"'><span class='\" + TITLE + \"'>Video Title</span></div>\"),\n          toolBar: \"<div class='\" + TOOLBARWRAP + \"'><div class='\" + TOOLBAR + \"'></div></div>\",\n          youtubePlayer: \"<div class='\" + YTPLAYER + \"'> </div>\",\n          toolBarTime: \"<span class='k-mediaplayer-currenttime'>00:00:00</span> / <span class='k-mediaplayer-duration'>00:00:00</span>\",\n          slider: \"<input class='\" + SLIDER + \"' value='0' title='seekbar' />\",\n          volumeSlider: \"<input class='\" + VOLUME_SLIDER + \"' title='volume'/>\",\n          qualityDropDown: \"<input class='\" + VIDEO_QUALITY + \"' title='video quality' />\",\n          toolTip: \"#= kendo.toString(new Date(value), 'HH:mm:ss') #\"\n        };\n        var MediaPlayer = Widget.extend({\n          init: function (element, options) {\n            this.wrapper = $(element);\n            Widget.fn.init.call(this, element, options);\n            this.wrapper.addClass(\"k-mediaplayer k-widget\");\n            options = this.options;\n            this._currentIndex = 0;\n\n            this._createTitlebar();\n\n            this._createToolbar();\n\n            this._createDropDown();\n\n            this._createSlider();\n\n            this._createVolumeSlider();\n\n            this._timers = {};\n\n            this._aria();\n\n            this._navigatable();\n\n            if (options.fullScreen) {\n              this.fullScreen(true);\n            }\n\n            if (options.media) {\n              this.media(this.options.media);\n            }\n\n            kendo.notify(this);\n          },\n          events: [END, PAUSE, PLAY, READY, TIMECHANGE, VOLUMECHANGE],\n          options: {\n            name: \"MediaPlayer\",\n            autoPlay: false,\n            autoRepeat: false,\n            volume: 100,\n            fullScreen: false,\n            mute: false,\n            navigatable: false,\n            forwardSeek: true,\n            media: null,\n            messages: {\n              \"pause\": \"Pause\",\n              \"play\": \"Play\",\n              \"mute\": \"Mute\",\n              \"unmute\": \"Unmute\",\n              \"quality\": \"Quality\",\n              \"fullscreen\": \"Full Screen\"\n            }\n          },\n          _msToTime: function (ms) {\n            var time = new Date(baseTime.getTime());\n            time.setSeconds(ms);\n            return time;\n          },\n          _timeToSec: function (time) {\n            var curTime = new Date(time).getTime();\n            return curTime / 1000;\n          },\n          _createTitlebar: function () {\n            this._titleBar = this.wrapper.find(DOT + TITLEBAR);\n\n            if (this._titleBar.length === 0) {\n              this.wrapper.append(templates.titleBar);\n              this._titleBar = this.wrapper.find(DOT + TITLEBAR);\n            }\n          },\n          _createSlider: function () {\n            var sliderElement = this.wrapper.find(DOT + SLIDER);\n\n            if (!this._slider) {\n              this._sliderDragChangeHandler = this._sliderDragChange.bind(this);\n              this._sliderDraggingHandler = this._sliderDragging.bind(this);\n              sliderElement = this.wrapper.find(DOT + SLIDER);\n              this._slider = new ui.Slider(sliderElement[0], {\n                smallStep: 1000,\n                tickPlacement: \"none\",\n                showButtons: false,\n                change: this._sliderDragChangeHandler,\n                slide: this._sliderDraggingHandler,\n                tooltip: {\n                  template: templates.toolTip\n                },\n                dragHandleTitle: this.options.messages.time\n              });\n            }\n          },\n          _createVolumeSlider: function () {\n            var volumeSliderElement = this.wrapper.find(DOT + VOLUME_SLIDER);\n\n            if (!this._volumeSlider) {\n              this._volumeDraggingHandler = this._volumeDragging.bind(this);\n              this._volumeChangeHandler = this._volumeChange.bind(this);\n              volumeSliderElement.width(87);\n              this._volumeSlider = new ui.Slider(volumeSliderElement[0], {\n                smallStep: 1,\n                min: 0,\n                max: 100,\n                value: this.options.volume,\n                slide: this._volumeDraggingHandler,\n                change: this._volumeChangeHandler,\n                tickPlacement: \"none\",\n                showButtons: false,\n                tooltip: {\n                  enabled: false\n                },\n                dragHandleTitle: this.options.messages.volume\n              });\n            }\n          },\n          _resetTime: function () {\n            if (this._youTubeVideo) {\n              this._ytmedia.seekTo(0, true);\n            } else {\n              this._media.currentTime = 0;\n            }\n\n            this._mediaTimeUpdate();\n\n            $.grep(this._toolBar.options.items, function (e) {\n              return !!e.template;\n            }).template = templates.toolBarTime;\n          },\n          _currentUrl: function () {\n            var media = this.media();\n            return isArray(media.source) ? media.source[this._currentIndex].url : media.source;\n          },\n          _isYouTubeUrl: function () {\n            return !!this._currentUrl().match(\"youtube.com/|youtu.be/\");\n          },\n          _setPlayerUrl: function () {\n            var oldPlayer = this._youTubeVideo;\n            this.stop();\n            this._youTubeVideo = this._isYouTubeUrl();\n\n            if (oldPlayer !== this._youTubeVideo) {\n              this.wrapper.find(DOT + YTPLAYER).toggle();\n              this.wrapper.find(DOT + MEDIA).toggle();\n            }\n\n            var initialized = this._media || this._ytmedia;\n\n            this._initializePlayer();\n\n            if (initialized) {\n              //mute and volume settings should be persisted when switching between html and youtube players\n              this.mute(this.mute());\n              this.volume(this.volume());\n            }\n\n            if (!this._youTubeVideo) {\n              this._videoOverlay.show();\n\n              this.wrapper.find(DOT + MEDIA + \" > source\").remove();\n              this.wrapper.find(DOT + MEDIA).attr(\"src\", this._currentUrl());\n\n              if (this.options.autoPlay) {\n                this.play();\n              }\n            } else if (this._ytmedia) {\n              if (this._videoOverlay) {\n                this._videoOverlay.hide();\n              }\n\n              if (this.options.autoPlay) {\n                this._ytmedia.loadVideoById(this._getMediaId());\n\n                this._playStateToggle(true);\n              } else {\n                this._ytmedia.cueVideoById(this._getMediaId());\n\n                this._playStateToggle(true);\n              }\n            }\n          },\n          _createToolbar: function () {\n            var toolBarElement = this.wrapper.find(DOT + TOOLBAR);\n\n            if (toolBarElement.length === 0) {\n              this._toolbarClickHandler = this._toolbarClick.bind(this);\n              this.wrapper.append(templates.toolBar);\n              toolBarElement = this.wrapper.find(DOT + TOOLBAR);\n              toolBarElement.width(this.wrapper.find(DOT + MEDIA).width());\n              this._toolBar = new ui.ToolBar(toolBarElement, {\n                click: this._toolbarClickHandler,\n                resizable: false,\n                items: [{\n                  type: \"button\",\n                  attributes: {\n                    \"class\": \"k-play-button\"\n                  },\n                  icon: \"play\",\n                  fillMode: \"flat\"\n                }, {\n                  template: templates.toolBarTime,\n                  attributes: {\n                    \"class\": \"k-mediaplayer-currenttime-wrap\"\n                  }\n                }, {\n                  type: \"spacer\"\n                }, {\n                  type: \"button\",\n                  attributes: {\n                    \"class\": \"k-volume-button\"\n                  },\n                  icon: \"volume-up\",\n                  fillMode: \"flat\"\n                }, {\n                  template: templates.volumeSlider,\n                  attributes: {\n                    \"class\": \"k-mediaplayer-volume-wrap\"\n                  }\n                }, {\n                  template: templates.qualityDropDown,\n                  attributes: {\n                    \"class\": \"k-mediaplayer-quality-wrap\"\n                  }\n                }, {\n                  type: \"button\",\n                  attributes: {\n                    \"class\": \"k-fullscreen-button\"\n                  },\n                  icon: \"full-screen\",\n                  fillMode: \"flat\"\n                }]\n              });\n\n              this._toolBar.wrapper.off(\"keydown\");\n\n              toolBarElement.before(templates.slider);\n              this._volumeButton = toolBarElement.find(\".k-volume-button\");\n              this._fullscreenButton = toolBarElement.find(\".k-fullscreen-button\");\n\n              this._volumeButton.attr(\"title\", this.options.mute ? this.options.messages.unmute : this.options.messages.mute);\n\n              this._volumeButton.attr(\"aria-label\", this.options.mute ? this.options.messages.unmute : this.options.messages.mute);\n\n              this._fullscreenButton.attr(\"title\", this.options.messages.fullscreen);\n\n              this._fullscreenButton.attr(\"aria-label\", this.options.messages.fullscreen);\n\n              toolBarElement.width(\"auto\");\n              this._currentTimeElement = toolBarElement.find(\".k-mediaplayer-currenttime\");\n              this._durationElement = toolBarElement.find(\".k-mediaplayer-duration\");\n              this._playButton = toolBarElement.find(\".k-play-button\");\n              this._playButtonSpan = this._playButton.find(\".k-i-play\");\n\n              if (this.options.autoPlay) {\n                this._playStateToggle(true);\n              }\n\n              if (kendo.support.cssFlexbox === false) {\n                $([this._volumeButton[0], toolBarElement.find(\".k-mediaplayer-volume-wrap\")[0], toolBarElement.find(\".k-mediaplayer-quality-wrap\")[0], this._fullscreenButton[0]]).wrapAll(\"<div class='k-align-right' />\");\n              }\n            }\n          },\n          _createDropDown: function () {\n            var dropDownElement = this.wrapper.find(DOT + VIDEO_QUALITY);\n            var media = this.media();\n\n            if (typeof dropDownElement.data(\"kendoDropDownList\") === \"undefined\") {\n              this._dropDownSelectHandler = this._dropDownSelect.bind(this);\n              this._dropDown = new ui.DropDownList(dropDownElement, {\n                dataTextField: \"quality\",\n                dataValueField: \"url\",\n                popup: {\n                  position: \"bottom\",\n                  origin: \"top\",\n                  appendTo: this.wrapper\n                },\n                animation: {\n                  open: {\n                    effects: \"slideIn:up\",\n                    duration: 1\n                  }\n                },\n                select: this._dropDownSelectHandler\n              });\n\n              if (media && isArray(media.source)) {\n                this._dropDown.setDataSource(media.source);\n\n                this._dropDown.select(0);\n              }\n\n              this._dropDown.wrapper.addClass(\"k-button k-button-md k-rounded-md k-button-flat k-button-flat-base\");\n\n              this._dropDown.wrapper.attr(\"title\", this.options.messages.quality).hide();\n\n              this._dropDown.wrapper.find(\"span.k-i-arrow-s\").removeClass('k-i-arrow-s').addClass('k-icon k-i-hd');\n\n              this._dropDown.list.addClass(\"k-quality-list\");\n            }\n          },\n          _dropDownSelect: function (e) {\n            if (this._currentIndex !== e.item.index()) {\n              this._currentIndex = e.item.index();\n\n              this._setPlayerUrl();\n            }\n          },\n          _toolbarClick: function (e) {\n            var target = $(e.target).children().first();\n            var isPaused = target.hasClass(STATE_PLAY);\n\n            if (!this.media()) {\n              return;\n            }\n\n            if (target.hasClass(STATE_PLAY) || target.hasClass(STATE_PAUSE)) {\n              if (isPaused) {\n                this.play();\n              } else {\n                this.pause();\n              }\n            }\n\n            if (target.hasClass(FULLSCREEN_ENTER) || target.hasClass(FULLSCREEN_EXIT)) {\n              if (this._isInFullScreen) {\n                target.removeClass(FULLSCREEN_EXIT).addClass(FULLSCREEN_ENTER);\n                this.fullScreen(false);\n              } else {\n                target.removeClass(FULLSCREEN_ENTER).addClass(FULLSCREEN_EXIT);\n                this.fullScreen(true);\n              }\n            }\n\n            if (target.hasClass(MUTE) || target.hasClass(LOW_VOLUME) || target.hasClass(HIGH_VOLUME)) {\n              var muted = this.mute();\n              this.mute(!muted);\n            }\n          },\n          _sliderDragging: function () {\n            if (!this.media()) {\n              return;\n            }\n\n            this._isDragging = true;\n          },\n          _sliderDragChange: function (e) {\n            var that = this;\n            var slider = e.sender;\n            var tzOffset = timeZoneSec * 1000;\n\n            if (!this.media()) {\n              return;\n            }\n\n            that._sliderChangeFired = true;\n            that._isDragging = false;\n\n            if (!this.options.forwardSeek && slider.value() > this._seekBarLastPosition) {\n              setTimeout(function () {\n                slider.value(that._seekBarLastPosition);\n              }, 1);\n            } else if (this._youTubeVideo) {\n              that._ytmedia.seekTo(that._timeToSec(e.value - tzOffset));\n            } else {\n              that._media.currentTime = that._timeToSec(e.value - tzOffset);\n            }\n\n            that.trigger(TIMECHANGE);\n            that._preventPlay = true;\n          },\n          _changeVolumeButtonImage: function (volume) {\n            var volumeButton = this._volumeButton;\n            var volumeElement = volumeButton.find(\"span\");\n            var cssClass = volumeElement.attr(\"class\");\n            cssClass = cssClass.substring(0, cssClass.lastIndexOf(\" \"));\n\n            if (volume === 0) {\n              volumeElement.attr(\"class\", cssClass + \" \" + MUTE);\n              volumeButton.attr(\"title\", this.options.messages.unmute);\n              volumeButton.attr(\"aria-label\", this.options.messages.unmute);\n            } else if (volume > 0 && volume < 51) {\n              volumeElement.attr(\"class\", cssClass + \" \" + LOW_VOLUME);\n              volumeButton.attr(\"title\", this.options.messages.mute);\n              volumeButton.attr(\"aria-label\", this.options.messages.mute);\n            } else {\n              volumeElement.attr(\"class\", cssClass + \" \" + HIGH_VOLUME);\n              volumeButton.attr(\"title\", this.options.messages.mute);\n              volumeButton.attr(\"aria-label\", this.options.messages.mute);\n            }\n          },\n          _volumeDragging: function (e) {\n            if (!this.media()) {\n              return;\n            }\n\n            this.volume(e.value);\n\n            this._changeVolumeButtonImage(e.value);\n\n            this.trigger(VOLUMECHANGE);\n          },\n          _volumeChange: function (e) {\n            if (!this.media()) {\n              return;\n            }\n\n            this.volume(e.value);\n\n            this._changeVolumeButtonImage(e.value);\n\n            this.trigger(VOLUMECHANGE);\n          },\n          _mediaTimeUpdate: function () {\n            var currentTime = this._youTubeVideo ? this._ytmedia.getCurrentTime() : this._media.currentTime;\n            currentTime = currentTime ? currentTime : 0;\n\n            var timeInMs = this._msToTime(currentTime);\n\n            this._currentTimeElement.text(kendo.toString(timeInMs, this._timeFormat));\n\n            if (!this._isDragging) {\n              this._seekBarLastPosition = (currentTime + timeZoneSec) * 1000;\n\n              this._slider.value(this._seekBarLastPosition);\n            }\n\n            return this.isPlaying();\n          },\n          _playStateToggle: function (play) {\n            if (typeof play === \"undefined\") {\n              play = this._playButtonSpan.is(DOT + STATE_PLAY);\n            }\n\n            if (play) {\n              this._playButtonSpan.removeClass(STATE_PLAY).addClass(STATE_PAUSE);\n\n              this._playButton.attr(\"title\", this.options.messages.pause);\n\n              this._playButton.attr(\"aria-label\", this.options.messages.pause);\n            } else {\n              this._playButtonSpan.removeClass(STATE_PAUSE).addClass(STATE_PLAY);\n\n              this._playButton.attr(\"title\", this.options.messages.play);\n\n              this._playButton.attr(\"aria-label\", this.options.messages.play);\n            }\n          },\n          _mediaEnded: function () {\n            this._playStateToggle(false);\n\n            this._currentTimeElement.text(kendo.toString(this._msToTime(0), this._timeFormat));\n\n            this._slider.value((0 + timeZoneSec) * 1000);\n\n            this.trigger(END);\n          },\n          _mediaPlay: function () {\n            this.trigger(PLAY);\n          },\n          _mediaReady: function () {\n            this.trigger(READY);\n          },\n          _mediaDurationChange: function () {\n            var durationTime = this._msToTime(this._youTubeVideo ? this._ytmedia.getDuration() : this._media.duration);\n\n            this._timeFormat = durationTime.getHours() === 0 ? timeFormats.shortTime : timeFormats.longTime;\n\n            this._durationElement.text(kendo.toString(durationTime, this._timeFormat));\n\n            this._slider.setOptions({\n              min: baseTime.getTime(),\n              max: durationTime.getTime()\n            });\n\n            if (!this._isFirstRun) {\n              this._resetTime();\n\n              this._isFirstRun = true;\n            }\n          },\n          _createYoutubePlayer: function () {\n            this._mediaTimeUpdateHandler = this._mediaTimeUpdate.bind(this);\n            this._mediaDurationChangeHandler = this._mediaDurationChange.bind(this);\n            this.wrapper.prepend(templates.youtubePlayer);\n            this._ytPlayer = this.wrapper.find(DOT + YTPLAYER)[0];\n            $(this._ytPlayer).css({\n              width: this.wrapper.width(),\n              height: this.wrapper.height()\n            });\n\n            if (!window.YT || !window.YT.Player) {\n              if (!window.onYouTubeIframeAPIReadyRegister) {\n                window.onYouTubeIframeAPIReadyRegister = [];\n                $.getScript(\"https://www.youtube.com/iframe_api\");\n\n                window.onYouTubeIframeAPIReady = function () {\n                  if (window.onYouTubeIframeAPIReadyRegister) {\n                    for (var i = 0; i < window.onYouTubeIframeAPIReadyRegister.length; i++) {\n                      window.onYouTubeIframeAPIReadyRegister[i]._youtubeApiReady();\n                    }\n                  }\n\n                  window.onYouTubeIframeAPIReadyRegister.length = 0;\n                  window.onYouTubeIframeAPIReadyRegister = undefined;\n                };\n              }\n\n              window.onYouTubeIframeAPIReadyRegister[window.onYouTubeIframeAPIReadyRegister.length] = this;\n            } else {\n              this._configurePlayer();\n            }\n          },\n          _poll: function (name, callback, interval, context) {\n            var that = this;\n\n            if (that._timers[name] !== null) {\n              clearTimeout(that._timers[name]);\n            }\n\n            that._timers[name] = setTimeout(function (context) {\n              return function callLater() {\n                if (callback.call(context)) {\n                  that._timers[name] = setTimeout(callLater, interval);\n                }\n              };\n            }(context), interval);\n            return that._timers[name];\n          },\n          _youtubeApiReady: function () {\n            this._configurePlayer();\n          },\n          _configurePlayer: function () {\n            var vars = {\n              'autoplay': +this.options.autoPlay,\n              'wmode': 'transparent',\n              'controls': 0,\n              'rel': 0,\n              'showinfo': 0\n            };\n            this._onYouTubePlayerReady = this._onYouTubePlayerReady.bind(this);\n            window.onYouTubePlayerReady = this._onYouTubePlayerReady;\n            this._onPlayerStateChangeHandler = this._onPlayerStateChange.bind(this);\n            window.onPlayerStateChange = this._onPlayerStateChange;\n            /*jshint unused:false */\n\n            var player = new window.YT.Player(this.wrapper.find(DOT + YTPLAYER)[0], {\n              height: this.wrapper.height(),\n              width: this.wrapper.width(),\n              videoId: this._getMediaId(),\n              playerVars: vars,\n              events: {\n                'onReady': this._onYouTubePlayerReady,\n                'onStateChange': this._onPlayerStateChangeHandler\n              }\n            });\n          },\n          _onYouTubePlayerReady: function (event) {\n            this._ytmedia = event.target;\n            this._ytmedia.getIframe().style.width = \"100%\";\n            this._ytmedia.getIframe().style.height = \"100%\";\n            this._youTubeVideo = true;\n\n            this._mediaDurationChangeHandler();\n\n            if (this.options.autoPlay) {\n              this._playStateToggle(true);\n\n              this._ytmedia.loadVideoById(this._getMediaId());\n            } else {\n              this._ytmedia.cueVideoById(this._getMediaId());\n            }\n\n            if (this.options.mute) {\n              this.mute(true);\n            }\n\n            this.trigger(READY);\n          },\n          _updateTitle: function () {\n            this.titlebar().text(this.media().title || this.media().source);\n          },\n          _onPlayerStateChange: function (event) {\n            if (event.data === 0) {\n              this._slider.value(0);\n\n              this._paused = false;\n\n              this._playStateToggle(true);\n\n              this.trigger(END);\n\n              if (this.options.autoRepeat) {\n                this.play();\n              }\n            } else if (event.data === 1) {\n              this._mediaDurationChange();\n\n              this._ytmedia.setVolume(this.volume());\n\n              if (this._sliderChangeFired) {\n                this._sliderChangeFired = false;\n              } else {\n                this._uiDisplay(false);\n              }\n\n              this.trigger(PLAY);\n\n              this._playStateToggle(true);\n\n              this._poll(\"progress\", this._mediaTimeUpdate, 500, this);\n\n              this._paused = false;\n            } else if (event.data === 2) {\n              if (!this._paused) {\n                this._uiDisplay(true);\n\n                this._playStateToggle(false);\n\n                this.trigger(PAUSE);\n                this._paused = true;\n              }\n            }\n          },\n          _getMediaId: function () {\n            var result = this._currentUrl();\n\n            var regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#\\&\\?]*).*/;\n            var match = result.match(regExp);\n\n            if (match && match[7].length === 11) {\n              result = match[7];\n            }\n\n            return result;\n          },\n          _mouseClick: function () {\n            if (this.isPaused()) {\n              this.play();\n            } else {\n              this.pause();\n            }\n          },\n          _initializePlayer: function () {\n            if (!this._mouseMoveHandler) {\n              this._mouseMoveHandler = this._mouseMove.bind(this);\n              this._mouseInHandler = this._mouseIn.bind(this);\n              this._mouseOutHandler = this._mouseOut.bind(this);\n              $(this.wrapper).on(\"mouseenter\" + ns, this._mouseInHandler).on(\"mouseleave\" + ns, this._mouseOutHandler).on(\"mousemove\" + ns, this._mouseMoveHandler);\n            }\n\n            if (!this._ytmedia && this._youTubeVideo) {\n              this._createYoutubePlayer();\n            } else if (!this._media && !this._youTubeVideo) {\n              this._createHtmlPlayer();\n            }\n          },\n          _createHtmlPlayer: function () {\n            if (!this._videoOverlay) {\n              this._mouseClickHanlder = this._mouseClick.bind(this);\n              this.wrapper.append(\"<div class='\" + OVERLAY + \"'></div>\");\n              this._videoOverlay = this.wrapper.find(\".k-mediaplayer-overlay\").on(\"click\" + ns, this._mouseClickHanlder);\n            }\n\n            this._mediaTimeUpdateHandler = this._mediaTimeUpdate.bind(this);\n            this._mediaDurationChangeHandler = this._mediaDurationChange.bind(this);\n            this._mediaEndedHandler = this._mediaEnded.bind(this);\n            this._mediaCanPlayHandler = this._mediaReady.bind(this);\n            this._mediaPlayHandler = this._mediaPlay.bind(this);\n\n            this._videoOverlay.after(templates.htmlPlayer);\n\n            this._media = this.wrapper.find(DOT + MEDIA)[0];\n            $(this._media).css({\n              width: \"100%\",\n              height: \"100%\"\n            });\n\n            if (this.options.mute) {\n              this.mute(true);\n            }\n\n            this._media.ontimeupdate = this._mediaTimeUpdateHandler;\n            this._media.ondurationchange = this._mediaDurationChangeHandler;\n            this._media.oncanplay = this._mediaCanPlayHandler;\n            this._media.onplay = this._mediaPlayHandler;\n            this._media.onended = this._mediaEndedHandler;\n            this._media.loop = this.options.autoRepeat;\n          },\n          _mouseIn: function () {\n            this._uiDisplay(true);\n          },\n          _mouseOut: function () {\n            this._poll(\"mouseIdle\", this._mouseIdle, 3000, this);\n          },\n          _mouseIdle: function () {\n            this._uiDisplay(false);\n\n            return false;\n          },\n          _mouseMove: function () {\n            if (!(this._titleBar.is(':animated') || this._toolBar.element.is(':animated') || this._slider.wrapper.is(':animated'))) {\n              this._uiDisplay(true);\n            }\n\n            this._poll(\"mouseIdle\", this._mouseIdle, 3000, this);\n          },\n          _uiDisplay: function (state) {\n            var animationSpeed = 'slow';\n\n            var uiElements = this._titleBar.add(this._toolBar.element.parent());\n\n            if (state) {\n              uiElements.fadeIn(animationSpeed);\n            } else {\n              uiElements.fadeOut(animationSpeed);\n\n              if (this.options.navigatable) {\n                this.wrapper.trigger(\"focus\");\n              }\n            }\n          },\n          setOptions: function (options) {\n            Widget.fn.setOptions.call(this, options);\n          },\n          destroy: function () {\n            Widget.fn.destroy.call(this);\n\n            if (!this.isPaused()) {\n              this.pause();\n            }\n\n            this.element.off(ns);\n            this.element.find(DOT + OVERLAY).off(ns);\n            this._timers = null;\n            this._mouseMoveHandler = null;\n            this._mouseOutHandler = null;\n            this._mouseInHandler = null;\n            this._mouseClickHanlder = null;\n            this._keyDownHandler = null;\n            this._fullscreenHandler = null;\n            this._toolbarClickHandler = null;\n            this._sliderDragChangeHandler = null;\n            this._sliderDraggingHandler = null;\n            this._volumeDraggingHandler = null;\n            this._volumeChangeHandler = null;\n            this._youtubeApiReadyHandler = null;\n            this._onYouTubePlayerReady = null;\n            this._onPlayerStateChangeHandler = null;\n            this._dropDownSelectHandler = null;\n\n            if (this._youTubeVideo) {\n              this._ytmedia.destroy();\n            } else {\n              this._media.ontimeupdate = this._mediaTimeUpdateHandler = null;\n              this._media.ondurationchange = this._mediaDurationChangeHandler = null;\n              this._media.oncanplay = this._mediaCanPlayHandler = null;\n              this._media.onplay = this._mediaPlayHandler = null;\n              this._media.onended = this._mediaEndedHandler = null;\n              this._media.src = \"\";\n\n              this._media.remove();\n            }\n\n            this._mouseMoveTimer = null;\n            clearTimeout(this._mouseMoveTimer);\n            kendo.destroy(this.element);\n          },\n          seek: function (ms) {\n            if (typeof ms === 'undefined') {\n              return 1000 * this._youTubeVideo ? this._ytmedia.getCurrentTime() : this._media ? this._media.currentTime : 0;\n            }\n\n            var seconds = ms / 1000;\n\n            if (this._youTubeVideo) {\n              if (seconds + 3 >= this._ytmedia.getDuration() | 0) {\n                //avoid infinite bad request loop in youtube player.\n                this._ytmedia.seekTo(this._ytmedia.getDuration() - 3 | 0, true);\n              } else {\n                this._ytmedia.seekTo(seconds, true);\n              }\n            } else {\n              this._media.currentTime = seconds;\n            }\n\n            return this;\n          },\n          play: function () {\n            if (this._youTubeVideo) {\n              this._ytmedia.playVideo();\n            } else {\n              if (kendo.support.mobileOS) {\n                this._uiDisplay(false);\n              }\n\n              this._media.play();\n            }\n\n            this._paused = false;\n\n            this._playStateToggle(true);\n\n            return this;\n          },\n          stop: function () {\n            if (this._youTubeVideo && this._ytmedia) {\n              this._ytmedia.stopVideo();\n            } else if (this._media && !this._youTubeVideo) {\n              if (kendo.support.mobileOS) {\n                this._uiDisplay(true);\n              }\n\n              this._media.pause();\n\n              this._media.currentTime = 0;\n            }\n\n            this._paused = true;\n\n            this._playStateToggle(false);\n\n            return this;\n          },\n          pause: function () {\n            if (this._youTubeVideo) {\n              this._ytmedia.pauseVideo();\n            } else {\n              if (kendo.support.mobileOS) {\n                this._uiDisplay(true);\n              }\n\n              this._media.pause();\n            }\n\n            this._paused = true;\n\n            this._playStateToggle(false);\n\n            this.trigger(PAUSE);\n            return this;\n          },\n          toolbar: function () {\n            return this._toolBar;\n          },\n          dropdown: function () {\n            return this._dropDown;\n          },\n          titlebar: function () {\n            return this._titleBar;\n          },\n          fullScreen: function (enterFullScreen) {\n            if (typeof enterFullScreen === 'undefined') {\n              return this._isInFullScreen || false;\n            }\n\n            var element = this.element.get(0);\n\n            if (enterFullScreen) {\n              // Handles the case when the action is triggered by code and not by user iteraction\n              this.element.addClass(\"k-mediaplayer-fullscreen\");\n\n              if (element.requestFullscreen) {\n                element.requestFullscreen();\n              } else if (element.webkitRequestFullscreen) {\n                element.webkitRequestFullscreen();\n              } else if (element.mozRequestFullScreen) {\n                element.mozRequestFullScreen();\n              } else if (element.msRequestFullscreen) {\n                element.msRequestFullscreen();\n              }\n\n              this._isInFullScreen = true;\n            } else {\n              if (document.cancelFullscreen) {\n                document.cancelFullscreen();\n              } else if (document.webkitCancelFullScreen) {\n                document.webkitCancelFullScreen();\n              } else if (document.mozCancelFullScreen) {\n                document.mozCancelFullScreen();\n              } else if (document.msCancelFullscreen) {\n                document.msCancelFullscreen();\n              } else if (document.exitFullscreen) {\n                document.exitFullscreen();\n              } else if (document.msExitFullscreen) {\n                document.msExitFullscreen();\n              } // Handles the case when the action is triggered by code and not by user iteraction\n\n\n              this.element.removeClass(\"k-mediaplayer-fullscreen\");\n              this._isInFullScreen = false;\n            }\n\n            this._slider.resize();\n          },\n          volume: function (value) {\n            if (typeof value === 'undefined') {\n              return typeof this._volume !== 'undefined' ? this._volume : this._volume = this.options.volume;\n            }\n\n            this._volume = value;\n            this.mute(value <= 0);\n\n            if (this._youTubeVideo) {\n              this._ytmedia.setVolume(this._volume);\n            } else {\n              this._media.volume = this._volume / 100;\n            }\n\n            this._volumeSlider.value(value);\n          },\n          mute: function (muted) {\n            var currentState = this._youTubeVideo ? this._ytmedia && this._ytmedia.isMuted() : this._media && this._media.muted;\n\n            if (typeof muted === 'undefined' || muted === currentState) {\n              return currentState;\n            }\n\n            if (this._youTubeVideo) {\n              if (muted) {\n                this._ytmedia.mute();\n              } else {\n                this._ytmedia.unMute();\n              }\n            } else {\n              this._media.muted = muted;\n            }\n\n            if (muted) {\n              this._volumeSlider.value(0);\n            } else {\n              this._volumeSlider.value(this._media && this._media.volume * 100 || this._ytmedia && this._ytmedia.getVolume());\n            }\n\n            this.trigger(VOLUMECHANGE);\n\n            this._changeVolumeButtonImage(this._volumeSlider.value());\n          },\n          isEnded: function () {\n            if (this._youTubeVideo) {\n              return this._ytmedia.getPlayerState() === 0;\n            } else {\n              return this._media.ended;\n            }\n          },\n          media: function (value) {\n            var dropdown = this.dropdown();\n\n            if (typeof value === 'undefined') {\n              return typeof this._mediaData !== 'undefined' ? this._mediaData : this._mediaData = this.options.media;\n            }\n\n            if (isArray(value.source)) {\n              dropdown.setDataSource(value.source);\n              dropdown.wrapper.show();\n            } else {\n              dropdown.wrapper.hide();\n            }\n\n            this._mediaData = value;\n\n            this._updateTitle();\n\n            this._setPlayerUrl();\n          },\n          isPaused: function () {\n            return this._paused;\n          },\n          isPlaying: function () {\n            return !this.isEnded() && !this._paused;\n          },\n          _aria: function () {\n            this.wrapper.attr(\"role\", \"region\"); //this.wrapper.attr(\"aria-labelledby\", \"mediaplayerTitleBar\");\n            //add onfocus with aria active descendant\n          },\n          _navigatable: function () {\n            this._fullscreenHandler = this._fullscreen.bind(this);\n            $(document).on(\"webkitfullscreenchange mozfullscreenchange fullscreenchange\" + ns, this._fullscreenHandler);\n\n            if (this.options.navigatable) {\n              this.wrapper.attr(\"tabIndex\", 0);\n              this._keyDownHandler = this._keyDown.bind(this);\n              this.wrapper.on(\"keydown\" + ns, this._keyDownHandler);\n            }\n          },\n          _fullscreen: function () {\n            var isFullScreen = document.fullScreen || document.mozFullScreen || document.webkitIsFullScreen;\n\n            this._uiDisplay(true);\n\n            this._slider.resize();\n\n            if (!isFullScreen) {\n              this.wrapper.find('span[class*=\"k-i-fullscreen\"]').removeClass(FULLSCREEN_EXIT).addClass(FULLSCREEN_ENTER);\n              this.fullScreen(false);\n            }\n          },\n          _keyDown: function (e) {\n            e.preventDefault();\n            var fsButton = this.wrapper.find('span[class*=\"k-i-fullscreen\"]');\n\n            if (e.keyCode === keys.SPACEBAR) {\n              if (this.isPlaying()) {\n                this.pause();\n              } else {\n                this.play();\n              }\n            } else if (e.keyCode === keys.ENTER && !this._isInFullScreen) {\n              fsButton.removeClass(FULLSCREEN_ENTER).addClass(FULLSCREEN_EXIT);\n              this.fullScreen(true);\n            } else if (e.keyCode === 77) {\n              var muted = this.mute();\n              this.mute(!muted);\n            } else if (e.keyCode === keys.ESC && this._isInFullScreen) {\n              fsButton.removeClass(FULLSCREEN_EXIT).addClass(FULLSCREEN_ENTER);\n              this.fullScreen(false);\n            }\n          },\n          _error: function () {},\n          _progress: function () {}\n        });\n        ui.plugin(MediaPlayer);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1329:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.toolbar\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}