{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1372);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1051:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.core\");\n    /***/\n  },\n\n  /***/\n  1052:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.popup\");\n    /***/\n  },\n\n  /***/\n  1372:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1051), __webpack_require__(1052)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"notification\",\n        name: \"Notification\",\n        category: \"web\",\n        description: \"The Notification widget displays user alerts.\",\n        depends: [\"core\", \"popup\"],\n        features: [{\n          id: \"notification-fx\",\n          name: \"Animation\",\n          description: \"Support for animation\",\n          depends: [\"fx\"]\n        }]\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n            extend = $.extend,\n            setTimeout = window.setTimeout,\n            CLICK = \"click\",\n            SHOW = \"show\",\n            HIDE = \"hide\",\n            KNOTIFICATION = \"k-notification\",\n            KICLOSE = \".k-notification-wrap .k-i-close\",\n            KHIDING = \"k-hiding\",\n            INFO = \"info\",\n            SUCCESS = \"success\",\n            WARNING = \"warning\",\n            ERROR = \"error\",\n            TOP = \"top\",\n            LEFT = \"left\",\n            BOTTOM = \"bottom\",\n            RIGHT = \"right\",\n            UP = \"up\",\n            NS = \".kendoNotification\",\n            WRAPPER = '<div role=\"alert\" aria-live=\"polite\" class=\"k-widget k-popup k-notification\"></div>',\n            TEMPLATE = '<div class=\"k-notification-wrap\">' + '<span class=\"k-icon k-i-#:typeIcon#\" title=\"#:typeIcon#\"></span>' + '<div class=\"k-notification-content\">#=content#</div>' + '<span aria-hidden=\"true\" class=\"#: closeButton ? \"\" : \"k-hidden\"# k-icon k-i-close\" title=\"Hide\"></span>' + '</div>',\n            SAFE_TEMPLATE = TEMPLATE.replace(\"#=content#\", \"#:content#\");\n        var Notification = Widget.extend({\n          init: function (element, options) {\n            var that = this;\n            Widget.fn.init.call(that, element, options);\n            options = that.options;\n\n            if (!options.appendTo || !$(options.appendTo).is(element)) {\n              that.element.hide();\n            }\n\n            that._compileTemplates(options.templates);\n\n            that._guid = \"_\" + kendo.guid();\n            that._isRtl = kendo.support.isRtl(element);\n\n            that._compileStacking(options.stacking, options.position.top, options.position.left);\n\n            kendo.notify(that);\n          },\n          events: [SHOW, HIDE],\n          options: {\n            name: \"Notification\",\n            position: {\n              pinned: true,\n              top: null,\n              left: null,\n              bottom: 20,\n              right: 20\n            },\n            stacking: \"default\",\n            hideOnClick: true,\n            button: false,\n            allowHideAfter: 0,\n            autoHideAfter: 5000,\n            appendTo: null,\n            width: null,\n            height: null,\n            templates: [],\n            title: null,\n            animation: {\n              open: {\n                effects: \"fade:in\",\n                duration: 300\n              },\n              close: {\n                effects: \"fade:out\",\n                duration: 600,\n                hide: true\n              }\n            }\n          },\n          _compileTemplates: function (templates) {\n            var that = this;\n            var kendoTemplate = kendo.template;\n            that._compiled = {};\n            $.each(templates, function (key, value) {\n              that._compiled[value.type] = kendoTemplate(value.template || $(\"#\" + value.templateId).html());\n            });\n            that._defaultCompiled = kendoTemplate(TEMPLATE);\n            that._safeCompiled = kendoTemplate(SAFE_TEMPLATE);\n          },\n          _getCompiled: function (type, safe) {\n            var defaultCompiled = safe ? this._safeCompiled : this._defaultCompiled;\n            return type ? this._compiled[type] || defaultCompiled : defaultCompiled;\n          },\n          _compileStacking: function (stacking, top, left) {\n            var that = this,\n                paddings = {\n              paddingTop: 0,\n              paddingRight: 0,\n              paddingBottom: 0,\n              paddingLeft: 0\n            },\n                horizontalAlignment = left !== null ? LEFT : RIGHT,\n                origin,\n                position;\n\n            switch (stacking) {\n              case \"down\":\n                origin = BOTTOM + \" \" + horizontalAlignment;\n                position = TOP + \" \" + horizontalAlignment;\n                delete paddings.paddingBottom;\n                break;\n\n              case RIGHT:\n                origin = TOP + \" \" + RIGHT;\n                position = TOP + \" \" + LEFT;\n                delete paddings.paddingRight;\n                break;\n\n              case LEFT:\n                origin = TOP + \" \" + LEFT;\n                position = TOP + \" \" + RIGHT;\n                delete paddings.paddingLeft;\n                break;\n\n              case UP:\n                origin = TOP + \" \" + horizontalAlignment;\n                position = BOTTOM + \" \" + horizontalAlignment;\n                delete paddings.paddingTop;\n                break;\n\n              default:\n                if (top !== null) {\n                  origin = BOTTOM + \" \" + horizontalAlignment;\n                  position = TOP + \" \" + horizontalAlignment;\n                  delete paddings.paddingBottom;\n                } else {\n                  origin = TOP + \" \" + horizontalAlignment;\n                  position = BOTTOM + \" \" + horizontalAlignment;\n                  delete paddings.paddingTop;\n                }\n\n                break;\n            }\n\n            that._popupOrigin = origin;\n            that._popupPosition = position;\n            that._popupPaddings = paddings;\n          },\n          _attachPopupEvents: function (options, popup) {\n            var that = this,\n                allowHideAfter = options.allowHideAfter,\n                attachDelay = !isNaN(allowHideAfter) && allowHideAfter > 0,\n                closeIcon;\n\n            function attachClick(target) {\n              target.on(CLICK + NS, function () {\n                that._hidePopup(popup);\n              });\n            }\n\n            if (options.hideOnClick) {\n              popup.bind(\"activate\", function () {\n                if (attachDelay) {\n                  setTimeout(function () {\n                    attachClick(popup.element);\n                  }, allowHideAfter);\n                } else {\n                  attachClick(popup.element);\n                }\n              });\n            } else if (options.button) {\n              closeIcon = popup.element.find(KICLOSE);\n\n              if (attachDelay) {\n                setTimeout(function () {\n                  attachClick(closeIcon);\n                }, allowHideAfter);\n              } else {\n                attachClick(closeIcon);\n              }\n            }\n          },\n          _showPopup: function (wrapper, options) {\n            var that = this,\n                autoHideAfter = options.autoHideAfter,\n                x = options.position.left,\n                y = options.position.top,\n                popup,\n                openPopup;\n            openPopup = $(\".\" + that._guid + \":not(.\" + KHIDING + \")\").last();\n            popup = new kendo.ui.Popup(wrapper, {\n              anchor: openPopup[0] ? openPopup : document.body,\n              origin: that._popupOrigin,\n              position: that._popupPosition,\n              animation: options.animation,\n              copyAnchorStyles: false,\n              modal: true,\n              collision: \"\",\n              isRtl: that._isRtl,\n              close: function () {\n                that._triggerHide(this.element);\n              },\n              deactivate: function (e) {\n                e.sender.element.off(NS);\n                e.sender.element.find(KICLOSE).off(NS);\n                e.sender.destroy();\n              }\n            });\n\n            that._attachPopupEvents(options, popup);\n\n            wrapper.removeClass(\"k-group k-reset\");\n\n            if (openPopup[0]) {\n              popup.open();\n            } else {\n              if (x === null) {\n                x = $(window).width() - wrapper.outerWidth() - options.position.right;\n              }\n\n              if (y === null) {\n                y = $(window).height() - wrapper.outerHeight() - options.position.bottom;\n              }\n\n              popup.open(x, y);\n            }\n\n            popup.wrapper.addClass(that._guid).css(extend({\n              margin: 0,\n              zIndex: 10050\n            }, that._popupPaddings));\n\n            if (options.position.pinned) {\n              popup.wrapper.css(\"position\", \"fixed\");\n\n              if (openPopup[0]) {\n                that._togglePin(popup.wrapper, true);\n              }\n            } else if (!openPopup[0]) {\n              that._togglePin(popup.wrapper, false);\n            }\n\n            if (autoHideAfter > 0) {\n              setTimeout(function () {\n                that._hidePopup(popup);\n              }, autoHideAfter);\n            }\n          },\n          _hidePopup: function (popup) {\n            popup.wrapper.addClass(KHIDING);\n            popup.close();\n          },\n          _togglePin: function (wrapper, pin) {\n            var win = $(window),\n                sign = pin ? -1 : 1;\n            wrapper.css({\n              top: parseInt(wrapper.css(TOP), 10) + sign * win.scrollTop(),\n              left: parseInt(wrapper.css(LEFT), 10) + sign * win.scrollLeft()\n            });\n          },\n          _attachStaticEvents: function (options, wrapper) {\n            var that = this,\n                allowHideAfter = options.allowHideAfter,\n                attachDelay = !isNaN(allowHideAfter) && allowHideAfter > 0;\n\n            function attachClick(target) {\n              target.on(CLICK + NS, that._hideStatic.bind(that, wrapper));\n            }\n\n            if (options.hideOnClick) {\n              if (attachDelay) {\n                setTimeout(function () {\n                  attachClick(wrapper);\n                }, allowHideAfter);\n              } else {\n                attachClick(wrapper);\n              }\n            } else if (options.button) {\n              if (attachDelay) {\n                setTimeout(function () {\n                  attachClick(wrapper.find(KICLOSE));\n                }, allowHideAfter);\n              } else {\n                attachClick(wrapper.find(KICLOSE));\n              }\n            }\n          },\n          _showStatic: function (wrapper, options) {\n            var that = this,\n                autoHideAfter = options.autoHideAfter,\n                animation = options.animation,\n                insertionMethod = options.stacking == UP || options.stacking == LEFT ? \"prependTo\" : \"appendTo\",\n                initializedNotifications;\n            wrapper.removeClass(\"k-popup\").addClass(that._guid)[insertionMethod](options.appendTo).hide().kendoAnimate(animation.open || false);\n            initializedNotifications = that.getNotifications();\n            initializedNotifications.each(function (idx, element) {\n              that._attachStaticEvents(options, $(element));\n\n              if (autoHideAfter > 0) {\n                setTimeout(function () {\n                  that._hideStatic($(element));\n                }, autoHideAfter);\n              }\n            });\n          },\n          _hideStatic: function (wrapper) {\n            wrapper.kendoAnimate(extend(this.options.animation.close || false, {\n              complete: function () {\n                wrapper.off(NS).find(KICLOSE).off(NS);\n                wrapper.remove();\n              }\n            }));\n\n            this._triggerHide(wrapper);\n          },\n          _triggerHide: function (element) {\n            this.trigger(HIDE, {\n              element: element\n            });\n            this.angular(\"cleanup\", function () {\n              return {\n                elements: element\n              };\n            });\n          },\n          show: function (content, type, safe) {\n            var that = this,\n                options = that.options,\n                wrapper = $(WRAPPER),\n                contentId = kendo.guid(),\n                args,\n                defaultArgs;\n\n            if (!type) {\n              type = INFO;\n            }\n\n            wrapper.attr(\"aria-label\", type);\n\n            if (content !== null && content !== undefined && content !== \"\") {\n              if (kendo.isFunction(content)) {\n                content = content();\n              }\n\n              defaultArgs = {\n                typeIcon: type,\n                content: \"\",\n                closeButton: options.button\n              };\n\n              if ($.isPlainObject(content)) {\n                args = extend(defaultArgs, content);\n              } else {\n                args = extend(defaultArgs, {\n                  content: content\n                });\n              }\n\n              wrapper.addClass(KNOTIFICATION + \"-\" + type).toggleClass(KNOTIFICATION + \"-button\", options.button).toggleClass(KNOTIFICATION + \"-closable\", options.button).attr({\n                \"data-role\": \"alert\",\n                title: options.title\n              }).css({\n                width: options.width,\n                height: options.height\n              }).append(that._getCompiled(type, safe)(args));\n              wrapper.find(\".k-notification-content\").attr(\"id\", contentId);\n              wrapper.attr(\"aria-describedby\", contentId);\n              that.angular(\"compile\", function () {\n                return {\n                  elements: wrapper,\n                  data: [{\n                    dataItem: args\n                  }]\n                };\n              });\n\n              if ($(options.appendTo)[0]) {\n                that._showStatic(wrapper, options);\n              } else {\n                that._showPopup(wrapper, options);\n              }\n\n              that.trigger(SHOW, {\n                element: wrapper\n              });\n            }\n\n            return that;\n          },\n          showText: function (content, type) {\n            this.show(content, type, true);\n          },\n          info: function (content) {\n            return this.show(content, INFO);\n          },\n          success: function (content) {\n            return this.show(content, SUCCESS);\n          },\n          warning: function (content) {\n            return this.show(content, WARNING);\n          },\n          error: function (content) {\n            return this.show(content, ERROR);\n          },\n          hide: function () {\n            var that = this,\n                openedNotifications = that.getNotifications();\n\n            if (that.options.appendTo) {\n              openedNotifications.each(function (idx, element) {\n                that._hideStatic($(element));\n              });\n            } else {\n              openedNotifications.each(function (idx, element) {\n                var popup = $(element).data(\"kendoPopup\");\n\n                if (popup) {\n                  that._hidePopup(popup);\n                }\n              });\n            }\n\n            return that;\n          },\n          getNotifications: function () {\n            var that = this,\n                guidElements = $(\".\" + that._guid + \":not(.\" + KHIDING + \")\");\n\n            if (that.options.appendTo) {\n              return guidElements;\n            } else {\n              return guidElements.children(\".\" + KNOTIFICATION);\n            }\n          },\n          setOptions: function (newOptions) {\n            var that = this,\n                options;\n            Widget.fn.setOptions.call(that, newOptions);\n            options = that.options;\n\n            if (newOptions.templates !== undefined) {\n              that._compileTemplates(options.templates);\n            }\n\n            if (newOptions.stacking !== undefined || newOptions.position !== undefined) {\n              that._compileStacking(options.stacking, options.position.top, options.position.left);\n            }\n          },\n          destroy: function () {\n            Widget.fn.destroy.call(this);\n            this.getNotifications().off(NS).find(KICLOSE).off(NS);\n          }\n        });\n        kendo.ui.plugin(Notification);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}