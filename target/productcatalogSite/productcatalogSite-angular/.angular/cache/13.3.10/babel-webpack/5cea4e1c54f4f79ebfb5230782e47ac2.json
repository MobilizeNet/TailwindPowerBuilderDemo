{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1426);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1065:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.dropdownlist\");\n    /***/\n  },\n\n  /***/\n  1115:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.numerictextbox\");\n    /***/\n  },\n\n  /***/\n  1197:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.datepicker\");\n    /***/\n  },\n\n  /***/\n  1272:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.buttongroup\");\n    /***/\n  },\n\n  /***/\n  1426:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1065), __webpack_require__(1197), __webpack_require__(1115), __webpack_require__(1272)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"scheduler.recurrence\",\n        name: \"Recurrence\",\n        category: \"web\",\n        depends: [\"dropdownlist\", \"datepicker\", \"numerictextbox\", \"buttongroup\"],\n        hidden: true\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            timezone = kendo.timezone,\n            Class = kendo.Class,\n            ui = kendo.ui,\n            Widget = ui.Widget,\n            DropDownList = ui.DropDownList,\n            ButtonGroup = ui.ButtonGroup,\n            kendoDate = kendo.date,\n            setTime = kendoDate.setTime,\n            setDayOfWeek = kendoDate.setDayOfWeek,\n            adjustDST = kendoDate.adjustDST,\n            firstDayOfMonth = kendoDate.firstDayOfMonth,\n            getMilliseconds = kendoDate.getMilliseconds,\n            DAYS_IN_LEAPYEAR = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366],\n            DAYS_IN_YEAR = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365],\n            MONTHS = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],\n            WEEK_DAYS = {\n          0: \"SU\",\n          1: \"MO\",\n          2: \"TU\",\n          3: \"WE\",\n          4: \"TH\",\n          5: \"FR\",\n          6: \"SA\"\n        },\n            WEEK_DAYS_IDX = {\n          \"SU\": 0,\n          \"MO\": 1,\n          \"TU\": 2,\n          \"WE\": 3,\n          \"TH\": 4,\n          \"FR\": 5,\n          \"SA\": 6\n        },\n            DATE_FORMATS = [\"yyyy-MM-ddTHH:mm:ss.fffzzz\", \"yyyy-MM-ddTHH:mm:sszzz\", \"yyyy-MM-ddTHH:mm:ss\", \"yyyy-MM-ddTHH:mm\", \"yyyy-MM-ddTHH\", \"yyyy-MM-dd\", \"yyyyMMddTHHmmssfffzzz\", \"yyyyMMddTHHmmsszzz\", \"yyyyMMddTHHmmss\", \"yyyyMMddTHHmm\", \"yyyyMMddTHH\", \"yyyyMMdd\"],\n            RULE_NAMES = [\"months\", \"weeks\", \"yearDays\", \"monthDays\", \"weekDays\", \"hours\", \"minutes\", \"seconds\"],\n            RULE_NAMES_LENGTH = RULE_NAMES.length,\n            RECURRENCE_DATE_FORMAT = \"yyyyMMddTHHmmssZ\",\n            limitation = {\n          months: function (date, end, rule) {\n            var monthRules = rule.months,\n                months = ruleValues(monthRules, date.getMonth() + 1),\n                changed = false;\n\n            if (months !== null) {\n              if (months.length) {\n                date.setMonth(months[0] - 1, 1);\n              } else {\n                date.setFullYear(date.getFullYear() + 1, monthRules[0] - 1, 1);\n              }\n\n              changed = true;\n            }\n\n            return changed;\n          },\n          monthDays: function (date, end, rule) {\n            var monthLength,\n                month,\n                days,\n                changed = false,\n                hours = date.getHours(),\n                normalize = function (monthDay) {\n              if (monthDay < 0) {\n                monthDay = monthLength + monthDay + 1;\n              }\n\n              return monthDay;\n            };\n\n            while (date <= end) {\n              month = date.getMonth();\n              monthLength = getMonthLength(date);\n              days = ruleValues(rule.monthDays, date.getDate(), normalize);\n\n              if (days === null) {\n                return changed;\n              }\n\n              changed = true;\n\n              if (days.length) {\n                date.setMonth(month, days.sort(numberSortPredicate)[0]);\n                adjustDST(date, hours);\n\n                if (month === date.getMonth()) {\n                  break;\n                }\n              } else {\n                date.setMonth(month + 1, 1);\n              }\n            }\n\n            return changed;\n          },\n          yearDays: function (date, end, rule) {\n            var year,\n                yearDays,\n                changed = false,\n                hours = date.getHours(),\n                normalize = function (yearDay) {\n              if (yearDay < 0) {\n                yearDay = year + yearDay;\n              }\n\n              return yearDay;\n            };\n\n            while (date < end) {\n              year = leapYear(date) ? 366 : 365;\n              yearDays = ruleValues(rule.yearDays, dayInYear(date), normalize);\n\n              if (yearDays === null) {\n                return changed;\n              }\n\n              changed = true;\n              year = date.getFullYear();\n\n              if (yearDays.length) {\n                date.setFullYear(year, 0, yearDays.sort(numberSortPredicate)[0]);\n                adjustDST(date, hours);\n                break;\n              } else {\n                date.setFullYear(year + 1, 0, 1);\n              }\n            }\n\n            return changed;\n          },\n          weeks: function (date, end, rule) {\n            var weekStart = rule.weekStart,\n                year,\n                weeks,\n                day,\n                changed = false,\n                hours = date.getHours(),\n                normalize = function (week) {\n              if (week < 0) {\n                week = 53 + week;\n              }\n\n              return week;\n            };\n\n            while (date < end) {\n              weeks = ruleValues(rule.weeks, weekInYear(date, weekStart), normalize);\n\n              if (weeks === null) {\n                return changed;\n              }\n\n              changed = true;\n              year = date.getFullYear();\n\n              if (weeks.length) {\n                day = weeks.sort(numberSortPredicate)[0] * 7 - 1;\n                date.setFullYear(year, 0, day);\n                setDayOfWeek(date, weekStart, -1);\n                adjustDST(date, hours);\n                break;\n              } else {\n                date.setFullYear(year + 1, 0, 1);\n              }\n            }\n\n            return changed;\n          },\n          weekDays: function (date, end, rule) {\n            var offsetDate = new Date(date.getTime() + rule.offsets.start);\n            var normalizeDay = offsetDate.getDay() - date.getDay();\n            var weekDays = rule.weekDays;\n            var weekStart = rule.weekStart;\n            var weekDayRules = ruleWeekValues(weekDays, offsetDate, weekStart);\n            var hours = date.getHours();\n\n            var traverseRuleForNextMont = function (rule) {\n              var nextMonthFirstDay = new Date(date.getFullYear(), date.getMonth() + 1, 1);\n              var ruleDay = normalizeDayIndex(rule.day, weekStart);\n\n              if (nextMonthFirstDay.getDay() <= ruleDay) {\n                if (!weekDayRule || normalizeDayIndex(weekDayRule.day, weekStart) > ruleDay) {\n                  weekDayRule = rule;\n                }\n              }\n            };\n\n            var weekDayRule, day;\n\n            if (weekDayRules === null) {\n              return false;\n            }\n\n            weekDayRule = weekDayRules[0];\n\n            if (!weekDayRule) {\n              if (rule.freq === \"monthly\" && !rule.positions || rule.position > 0) {\n                weekDays.forEach(traverseRuleForNextMont);\n              }\n\n              if (!weekDayRule) {\n                weekDayRule = weekDays[0];\n              }\n\n              setDayOfWeek(date, weekStart);\n            }\n\n            day = weekDayRule.day;\n            day -= normalizeDay;\n\n            if (weekDayRule.offset) {\n              while (date <= end && !isInWeek(date, weekDayRule, weekStart)) {\n                if (weekInMonth(date, weekStart) === numberOfWeeks(date, weekStart)) {\n                  date.setMonth(date.getMonth() + 1, 1);\n                  adjustDST(date, hours);\n                } else {\n                  date.setDate(date.getDate() + 7);\n                  adjustDST(date, hours);\n                  setDayOfWeek(date, weekStart, -1);\n                }\n              }\n            }\n\n            if (date.getDay() !== day) {\n              setDayOfWeek(date, day);\n            }\n\n            return true;\n          },\n          hours: function (date, end, rule) {\n            var hourRules = rule.hours,\n                startTime = rule._startTime,\n                startHours = startTime.getHours(),\n                hours = ruleValues(hourRules, startHours),\n                changed = false;\n\n            if (hours !== null) {\n              changed = true;\n              date.setHours(startHours);\n              adjustDST(date, startHours);\n\n              if (hours.length) {\n                hours = hours[0];\n                date.setHours(hours);\n              } else {\n                hours = date.getHours();\n                date.setDate(date.getDate() + 1);\n                adjustDST(date, hours);\n                hours = hourRules[0];\n                date.setHours(hours);\n                adjustDST(date, hours);\n              }\n\n              if (rule.minutes) {\n                date.setMinutes(0);\n              }\n\n              startTime.setHours(hours, date.getMinutes());\n            }\n\n            return changed;\n          },\n          minutes: function (date, end, rule) {\n            var minuteRules = rule.minutes,\n                currentMinutes = date.getMinutes(),\n                minutes = ruleValues(minuteRules, currentMinutes),\n                hours = rule._startTime.getHours(),\n                changed = false;\n\n            if (minutes !== null) {\n              changed = true;\n\n              if (minutes.length) {\n                minutes = minutes[0];\n              } else {\n                hours += 1;\n                minutes = minuteRules[0];\n              }\n\n              if (rule.seconds) {\n                date.setSeconds(0);\n              }\n\n              date.setHours(hours, minutes);\n              hours = hours % 24;\n              adjustDST(date, hours);\n\n              rule._startTime.setHours(hours, minutes, date.getSeconds());\n            }\n\n            return changed;\n          },\n          seconds: function (date, end, rule) {\n            var secondRules = rule.seconds,\n                hours = rule._startTime.getHours(),\n                seconds = ruleValues(secondRules, date.getSeconds()),\n                minutes = date.getMinutes(),\n                changed = false;\n\n            if (seconds !== null) {\n              changed = true;\n\n              if (seconds.length) {\n                date.setSeconds(seconds[0]);\n              } else {\n                minutes += 1;\n                date.setMinutes(minutes, secondRules[0]);\n\n                if (minutes > 59) {\n                  minutes = minutes % 60;\n                  hours = (hours + 1) % 24;\n                }\n              }\n\n              rule._startTime.setHours(hours, minutes, date.getSeconds());\n            }\n\n            return changed;\n          }\n        },\n            BaseFrequency = Class.extend({\n          next: function (date, rule) {\n            var startTime = rule._startTime,\n                day = startTime.getDate(),\n                minutes,\n                seconds;\n\n            if (rule.seconds) {\n              seconds = date.getSeconds() + 1;\n              date.setSeconds(seconds);\n              startTime.setSeconds(seconds);\n              startTime.setDate(day);\n            } else if (rule.minutes) {\n              minutes = date.getMinutes() + 1;\n              date.setMinutes(minutes);\n              startTime.setMinutes(minutes);\n              startTime.setDate(day);\n            } else {\n              return false;\n            }\n\n            return true;\n          },\n          normalize: function (options) {\n            var rule = options.rule;\n\n            if (options.idx === 4 && rule.hours) {\n              rule._startTime.setHours(0);\n\n              this._hour(options.date, rule);\n            }\n          },\n          limit: function (date, end, rule) {\n            var interval = rule.interval,\n                ruleName,\n                firstRule,\n                modified,\n                idx,\n                day;\n\n            while (date <= end) {\n              modified = firstRule = undefined;\n              day = date.getDate();\n\n              for (idx = 0; idx < RULE_NAMES_LENGTH; idx++) {\n                ruleName = RULE_NAMES[idx];\n\n                if (rule[ruleName]) {\n                  modified = limitation[ruleName](date, end, rule);\n\n                  if (firstRule !== undefined && modified) {\n                    break;\n                  } else {\n                    firstRule = modified;\n                  }\n                }\n\n                if (modified) {\n                  this.normalize({\n                    date: date,\n                    rule: rule,\n                    day: day,\n                    idx: idx\n                  });\n                }\n              }\n\n              if ((interval === 1 || !this.interval(rule, date)) && idx === RULE_NAMES_LENGTH) {\n                break;\n              }\n            }\n          },\n          interval: function (rule, current) {\n            var start = new Date(rule._startPeriod);\n            var date = new Date(current);\n            var hours = current.getHours();\n            var weekStart = rule.weekStart;\n            var interval = rule.interval;\n            var frequency = rule.freq;\n            var modified = false;\n            var excess = 0;\n            var month = 0;\n            var day = 1;\n            var diff;\n            var startTimeHours;\n\n            if (frequency === \"hourly\") {\n              diff = date.getTimezoneOffset() - start.getTimezoneOffset();\n              startTimeHours = rule._startTime.getHours();\n              date = date.getTime();\n\n              if (hours !== startTimeHours) {\n                date += (startTimeHours - hours) * kendoDate.MS_PER_HOUR;\n              }\n\n              date -= start;\n\n              if (diff) {\n                date -= diff * kendoDate.MS_PER_MINUTE;\n              }\n\n              diff = Math.floor(date / kendoDate.MS_PER_HOUR);\n              excess = intervalExcess(diff, interval);\n\n              if (excess !== 0) {\n                this._hour(current, rule, excess);\n\n                modified = true;\n              }\n            } else if (frequency === \"daily\") {\n              kendoDate.setTime(date, -start, true);\n              diff = Math.round(date / kendoDate.MS_PER_DAY);\n              excess = intervalExcess(diff, interval);\n\n              if (excess !== 0) {\n                this._date(current, rule, excess);\n\n                modified = true;\n              }\n            } else if (frequency === \"weekly\") {\n              excess = this._getNumberOfWeeksBetweenDates(start, current);\n              var normalizedCurrentIndex = normalizeDayIndex(current.getDay(), weekStart);\n              var normalizedStartIndex = normalizeDayIndex(start.getDay(), weekStart);\n\n              if (normalizedCurrentIndex < normalizedStartIndex) {\n                excess += 1;\n              }\n\n              excess = intervalExcess(excess, interval);\n\n              if (excess !== 0) {\n                kendoDate.setDayOfWeek(current, rule.weekStart, -1);\n                current.setDate(current.getDate() + excess * 7);\n                adjustDST(current, hours);\n                modified = true;\n              }\n            } else if (frequency === \"monthly\") {\n              diff = current.getFullYear() - start.getFullYear();\n              diff = current.getMonth() - start.getMonth() + diff * 12;\n              excess = intervalExcess(diff, interval);\n\n              if (excess !== 0) {\n                day = rule._hasRuleValue ? 1 : current.getDate();\n                current.setFullYear(current.getFullYear(), current.getMonth() + excess, day);\n                adjustDST(current, hours);\n                modified = true;\n              }\n            } else if (frequency === \"yearly\") {\n              diff = current.getFullYear() - start.getFullYear();\n              excess = intervalExcess(diff, interval);\n\n              if (!rule.months) {\n                month = current.getMonth();\n              }\n\n              if (!rule.yearDays && !rule.monthDays && !rule.weekDays) {\n                day = current.getDate();\n              }\n\n              if (excess !== 0) {\n                current.setFullYear(current.getFullYear() + excess, month, day);\n                adjustDST(current, hours);\n                modified = true;\n              }\n            }\n\n            return modified;\n          },\n          _getNumberOfWeeksBetweenDates: function (first, second) {\n            var weeks = (second - first) / 604800000;\n            var exactWeeks = Math.floor(weeks); //this is happening when weeks pass DST change\n\n            if (weeks - exactWeeks > 0.99) {\n              exactWeeks = Math.round(weeks);\n            }\n\n            return exactWeeks;\n          },\n          _hour: function (date, rule, interval) {\n            var startTime = rule._startTime,\n                hours = startTime.getHours();\n\n            if (interval) {\n              hours += interval;\n            }\n\n            date.setHours(hours);\n            hours = hours % 24;\n            startTime.setHours(hours);\n            adjustDST(date, hours);\n          },\n          _date: function (date, rule, interval) {\n            var hours = date.getHours();\n            date.setDate(date.getDate() + interval);\n\n            if (!adjustDST(date, hours)) {\n              this._hour(date, rule);\n            }\n          }\n        }),\n            HourlyFrequency = BaseFrequency.extend({\n          next: function (date, rule) {\n            if (!BaseFrequency.fn.next(date, rule)) {\n              this._hour(date, rule, 1);\n            }\n          },\n          normalize: function (options) {\n            var rule = options.rule;\n\n            if (options.idx === 4) {\n              rule._startTime.setHours(0);\n\n              this._hour(options.date, rule);\n            }\n          }\n        }),\n            DailyFrequency = BaseFrequency.extend({\n          next: function (date, rule) {\n            if (!BaseFrequency.fn.next(date, rule)) {\n              this[rule.hours ? \"_hour\" : \"_date\"](date, rule, 1);\n            }\n          }\n        }),\n            WeeklyFrequency = DailyFrequency.extend({\n          setup: function (rule, eventStartDate) {\n            if (!rule.weekDays) {\n              rule.weekDays = [{\n                day: eventStartDate.getDay(),\n                offset: 0\n              }];\n            }\n          }\n        }),\n            MonthlyFrequency = BaseFrequency.extend({\n          next: function (date, rule) {\n            var day, hours;\n\n            if (!BaseFrequency.fn.next(date, rule)) {\n              if (rule.hours) {\n                this._hour(date, rule, 1);\n              } else if (rule.monthDays || rule.weekDays || rule.yearDays || rule.weeks) {\n                this._date(date, rule, 1);\n              } else {\n                day = date.getDate();\n                hours = date.getHours();\n                date.setMonth(date.getMonth() + 1);\n                adjustDST(date, hours);\n\n                while (date.getDate() !== day) {\n                  date.setDate(day);\n                  adjustDST(date, hours);\n                }\n\n                this._hour(date, rule);\n              }\n            }\n          },\n          normalize: function (options) {\n            var rule = options.rule,\n                date = options.date,\n                hours = date.getHours();\n\n            if (options.idx === 0 && !rule.monthDays && !rule.weekDays) {\n              date.setDate(options.day);\n              adjustDST(date, hours);\n            } else {\n              BaseFrequency.fn.normalize(options);\n            }\n          },\n          setup: function (rule, eventStartDate, date) {\n            if (!rule.monthDays && !rule.weekDays) {\n              date.setDate(eventStartDate.getDate());\n            }\n          }\n        }),\n            YearlyFrequency = MonthlyFrequency.extend({\n          next: function (date, rule) {\n            var day,\n                hours = date.getHours();\n\n            if (!BaseFrequency.fn.next(date, rule)) {\n              if (rule.hours) {\n                this._hour(date, rule, 1);\n              } else if (rule.monthDays || rule.weekDays || rule.yearDays || rule.weeks) {\n                this._date(date, rule, 1);\n              } else if (rule.months) {\n                day = date.getDate();\n                date.setMonth(date.getMonth() + 1);\n                adjustDST(date, hours);\n\n                while (date.getDate() !== day) {\n                  date.setDate(day);\n                  adjustDST(date, hours);\n                }\n\n                this._hour(date, rule);\n              } else {\n                date.setFullYear(date.getFullYear() + 1);\n                adjustDST(date, hours);\n\n                this._hour(date, rule);\n              }\n            }\n          },\n          setup: function () {}\n        }),\n            frequencies = {\n          \"hourly\": new HourlyFrequency(),\n          \"daily\": new DailyFrequency(),\n          \"weekly\": new WeeklyFrequency(),\n          \"monthly\": new MonthlyFrequency(),\n          \"yearly\": new YearlyFrequency()\n        },\n            CLICK = \"click\",\n            CHANGE = \"change\";\n\n        function intervalExcess(diff, interval) {\n          var excess;\n\n          if (diff !== 0 && diff < interval) {\n            excess = interval - diff;\n          } else {\n            excess = diff % interval;\n\n            if (excess) {\n              excess = interval - excess;\n            }\n          }\n\n          return excess;\n        }\n\n        function dayInYear(date) {\n          var month = date.getMonth();\n          var days = leapYear(date) ? DAYS_IN_LEAPYEAR[month] : DAYS_IN_YEAR[month];\n          return days + date.getDate();\n        }\n\n        function weekInYear(date, weekStart) {\n          var year, days;\n          date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n          adjustDST(date, 0);\n          year = date.getFullYear();\n\n          if (weekStart !== undefined) {\n            setDayOfWeek(date, weekStart, -1);\n            date.setDate(date.getDate() + 4);\n          } else {\n            date.setDate(date.getDate() + (4 - (date.getDay() || 7)));\n          }\n\n          adjustDST(date, 0);\n          days = Math.floor((date.getTime() - new Date(year, 0, 1, -6)) / 86400000);\n          return 1 + Math.floor(days / 7);\n        }\n\n        function weekInMonth(date, weekStart) {\n          var firstWeekDay = firstDayOfMonth(date).getDay();\n          var firstWeekLength = 7 - (firstWeekDay + 7 - (weekStart || 7)) || 7;\n\n          if (firstWeekLength < 0) {\n            firstWeekLength += 7;\n          }\n\n          return Math.ceil((date.getDate() - firstWeekLength) / 7) + 1;\n        }\n\n        function normalizeDayIndex(weekDay, weekStart) {\n          return weekDay + (weekDay < weekStart ? 7 : 0);\n        }\n\n        function normalizeOffset(date, rule, weekStart) {\n          var offset = rule.offset;\n\n          if (!offset) {\n            return weekInMonth(date, weekStart);\n          }\n\n          var lastDate = new Date(date.getFullYear(), date.getMonth() + 1, 0);\n          var weeksInMonth = weekInMonth(lastDate, weekStart);\n          var day = normalizeDayIndex(rule.day, weekStart);\n          var skipFirst = day < normalizeDayIndex(new Date(date.getFullYear(), date.getMonth(), 1).getDay(), weekStart);\n          var skipLast = day > normalizeDayIndex(lastDate.getDay(), weekStart);\n\n          if (offset < 0) {\n            offset = weeksInMonth + (offset + 1 - (skipLast ? 1 : 0));\n          } else if (skipFirst) {\n            offset += 1;\n          }\n\n          weeksInMonth -= skipLast ? 1 : 0;\n\n          if (offset < (skipFirst ? 1 : 0) || offset > weeksInMonth) {\n            return null;\n          }\n\n          return offset;\n        }\n\n        function numberOfWeeks(date, weekStart) {\n          return weekInMonth(new Date(date.getFullYear(), date.getMonth() + 1, 0), weekStart);\n        }\n\n        function isInWeek(date, rule, weekStart) {\n          return weekInMonth(date, weekStart) === normalizeOffset(date, rule, weekStart);\n        }\n\n        function ruleWeekValues(weekDays, date, weekStart) {\n          var currentDay = normalizeDayIndex(date.getDay(), weekStart);\n          var length = weekDays.length;\n          var ruleWeekOffset;\n          var weekDay, day;\n          var weekNumber;\n          var result = [];\n          var idx = 0;\n\n          for (; idx < length; idx++) {\n            weekDay = weekDays[idx];\n            weekNumber = weekInMonth(date, weekStart);\n            ruleWeekOffset = normalizeOffset(date, weekDay, weekStart);\n\n            if (ruleWeekOffset === null) {\n              continue;\n            }\n\n            if (weekNumber < ruleWeekOffset) {\n              result.push(weekDay);\n            } else if (weekNumber === ruleWeekOffset) {\n              day = normalizeDayIndex(weekDay.day, weekStart);\n\n              if (currentDay < day) {\n                result.push(weekDay);\n              } else if (currentDay === day) {\n                return null;\n              }\n            }\n          }\n\n          return result;\n        }\n\n        function ruleValues(rules, value, normalize) {\n          var idx = 0,\n              length = rules.length,\n              availableRules = [],\n              ruleValue;\n\n          for (; idx < length; idx++) {\n            ruleValue = rules[idx];\n\n            if (normalize) {\n              ruleValue = normalize(ruleValue);\n            }\n\n            if (value === ruleValue) {\n              return null;\n            } else if (value < ruleValue) {\n              availableRules.push(ruleValue);\n            }\n          }\n\n          return availableRules;\n        }\n\n        function parseArray(list, range) {\n          var idx = 0,\n              length = list.length,\n              value;\n\n          for (; idx < length; idx++) {\n            value = parseInt(list[idx], 10);\n\n            if (isNaN(value) || value < range.start || value > range.end || value === 0 && range.start < 0) {\n              return null;\n            }\n\n            list[idx] = value;\n          }\n\n          return list.sort(numberSortPredicate);\n        }\n\n        function parseWeekDayList(list) {\n          var idx = 0,\n              length = list.length,\n              value,\n              valueLength,\n              day;\n\n          for (; idx < length; idx++) {\n            value = list[idx];\n            valueLength = value.length;\n            day = value.substring(valueLength - 2).toUpperCase();\n            day = WEEK_DAYS_IDX[day];\n\n            if (day === undefined) {\n              return null;\n            }\n\n            list[idx] = {\n              offset: parseInt(value.substring(0, valueLength - 2), 10) || 0,\n              day: day\n            };\n          }\n\n          return list;\n        }\n\n        function serializeWeekDayList(list) {\n          var idx = 0,\n              length = list.length,\n              value,\n              valueString,\n              result = [];\n\n          for (; idx < length; idx++) {\n            value = list[idx];\n\n            if (typeof value === \"string\") {\n              valueString = value;\n            } else {\n              valueString = \"\" + WEEK_DAYS[value.day];\n\n              if (value.offset) {\n                valueString = value.offset + valueString;\n              }\n            }\n\n            result.push(valueString);\n          }\n\n          return result.toString();\n        }\n\n        function getMonthLength(date) {\n          var month = date.getMonth();\n\n          if (month === 1) {\n            if (new Date(date.getFullYear(), 1, 29).getMonth() === 1) {\n              return 29;\n            }\n\n            return 28;\n          }\n\n          return MONTHS[month];\n        }\n\n        function leapYear(year) {\n          year = year.getFullYear();\n          return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n        }\n\n        function numberSortPredicate(a, b) {\n          return a - b;\n        }\n\n        function parseExceptions(exceptions, zone) {\n          var idx = 0,\n              length,\n              date,\n              dates = [];\n\n          if (exceptions) {\n            exceptions = exceptions.split(exceptions.indexOf(\";\") !== -1 ? \";\" : \",\");\n            length = exceptions.length;\n\n            for (; idx < length; idx++) {\n              date = parseUTCDate(exceptions[idx], zone);\n\n              if (date) {\n                dates.push(date);\n              }\n            }\n          }\n\n          return dates;\n        }\n\n        function isException(exceptions, date, zone) {\n          var dates = Array.isArray(exceptions) ? exceptions : parseExceptions(exceptions, zone),\n              dateTime = date.getTime() - date.getMilliseconds(),\n              idx = 0,\n              length = dates.length;\n\n          for (; idx < length; idx++) {\n            if (dates[idx].getTime() === dateTime) {\n              return true;\n            }\n          }\n\n          return false;\n        }\n\n        function toExceptionString(dates, zone) {\n          var idx = 0;\n          var length;\n          var date;\n          var result = [].concat(dates);\n\n          for (length = result.length; idx < length; idx++) {\n            date = result[idx];\n            date = kendo.timezone.convert(date, zone || date.getTimezoneOffset(), \"Etc/UTC\");\n            result[idx] = kendo.toString(date, RECURRENCE_DATE_FORMAT);\n          }\n\n          return result.join(\",\");\n        }\n\n        function startPeriodByFreq(start, rule) {\n          var date = new Date(start);\n\n          switch (rule.freq) {\n            case \"yearly\":\n              date.setFullYear(date.getFullYear(), 0, 1);\n              break;\n\n            case \"monthly\":\n              date.setFullYear(date.getFullYear(), date.getMonth(), 1);\n              break;\n\n            case \"weekly\":\n              setDayOfWeek(date, rule.weekStart, -1);\n              break;\n\n            default:\n              break;\n          }\n\n          if (rule.hours) {\n            date.setHours(0);\n          }\n\n          if (rule.minutes) {\n            date.setMinutes(0);\n          }\n\n          if (rule.seconds) {\n            date.setSeconds(0);\n          }\n\n          return date;\n        }\n\n        function endPeriodByFreq(start, rule) {\n          var date = new Date(start);\n\n          switch (rule.freq) {\n            case \"yearly\":\n              date.setFullYear(date.getFullYear(), 11, 31);\n              break;\n\n            case \"monthly\":\n              date.setFullYear(date.getFullYear(), date.getMonth() + 1, 0);\n              break;\n\n            case \"weekly\":\n              setDayOfWeek(date, rule.weekStart, -1);\n              date.setDate(date.getDate() + 6);\n              break;\n\n            default:\n              break;\n          }\n\n          if (rule.hours) {\n            date.setHours(23);\n          }\n\n          if (rule.minutes) {\n            date.setMinutes(59);\n          }\n\n          if (rule.seconds) {\n            date.setSeconds(59);\n          }\n\n          return date;\n        }\n\n        function eventsByPosition(periodEvents, start, positions, until) {\n          var periodEventsLength = periodEvents.length;\n          var events = [];\n          var position;\n          var event;\n          var inPeriod;\n\n          for (var idx = 0, length = positions.length; idx < length; idx++) {\n            position = positions[idx];\n\n            if (position < 0) {\n              position = periodEventsLength + position;\n            } else {\n              position -= 1; //convert to zero based index\n            }\n\n            event = periodEvents[position];\n            inPeriod = until ? event.start < until : true;\n\n            if (event && event.start >= start && inPeriod) {\n              events.push(event);\n            }\n          }\n\n          return events;\n        }\n\n        function removeExceptionDates(periodEvents, exceptionDates, zone) {\n          var events = [];\n          var event;\n\n          for (var idx = 0; idx < periodEvents.length; idx++) {\n            event = periodEvents[idx];\n\n            if (!isException(exceptionDates, event.start, zone)) {\n              events.push(event);\n            }\n          }\n\n          return events;\n        }\n\n        function expand(event, start, end, zone) {\n          var rule,\n              startTime,\n              endTime,\n              endDate,\n              hours,\n              minutes,\n              seconds,\n              durationMS,\n              startPeriod,\n              inPeriod,\n              ruleStart,\n              ruleEnd,\n              useEventStart,\n              freqName,\n              exceptionDates,\n              eventStartTime,\n              eventStartMS,\n              eventStart,\n              count,\n              freq,\n              positions,\n              currentIdx,\n              periodEvents,\n              events = [],\n              shiftedStart,\n              shiftedEnd,\n              shiftedStartTime,\n              shifterEndTime;\n          rule = parseRule(event.recurrenceRule, zone, {\n            // offsets argument\n            start: (getZoneOffset(event.start, zone) - getZoneOffset(event.start, event.startTimezone)) * kendo.date.MS_PER_MINUTE,\n            end: (getZoneOffset(event.end, zone) - getZoneOffset(event.end, event.endTimezone)) * kendo.date.MS_PER_MINUTE\n          });\n\n          if (!rule) {\n            return [event];\n          }\n\n          positions = rule.positions;\n          currentIdx = positions ? 0 : 1;\n          ruleStart = rule.start;\n          ruleEnd = rule.end;\n\n          if (ruleStart || ruleEnd) {\n            event = event.clone({\n              start: ruleStart ? new Date(ruleStart.value[0]) : undefined,\n              end: ruleEnd ? new Date(ruleEnd.value[0]) : undefined\n            });\n          }\n\n          eventStart = event.start;\n          eventStartMS = eventStart.getTime();\n          eventStartTime = getMilliseconds(eventStart);\n          exceptionDates = parseExceptions(event.recurrenceException, zone);\n\n          if (!exceptionDates[0] && rule.exdates) {\n            exceptionDates = rule.exdates.value;\n            event.set(\"recurrenceException\", toExceptionString(exceptionDates, zone));\n          }\n\n          startPeriod = start = new Date(start);\n          end = new Date(end);\n          freqName = rule.freq;\n          freq = frequencies[freqName];\n          count = rule.count;\n\n          if (rule.until && rule.until < end) {\n            end = new Date(rule.until);\n          }\n\n          useEventStart = freqName === \"yearly\" || freqName === \"monthly\" || freqName === \"weekly\";\n\n          if (start < eventStartMS || count || rule.interval > 1 || useEventStart || (freqName === \"daily\" || freqName === \"hourly\") && !rule.seconds) {\n            start = new Date(eventStartMS);\n          } else {\n            hours = start.getHours();\n            minutes = start.getMinutes();\n            seconds = start.getSeconds();\n\n            if (!rule.hours) {\n              hours = eventStart.getHours();\n            }\n\n            if (!rule.minutes) {\n              minutes = eventStart.getMinutes();\n            }\n\n            if (!rule.seconds) {\n              seconds = eventStart.getSeconds();\n            }\n\n            start.setHours(hours, minutes, seconds, eventStart.getMilliseconds());\n          }\n\n          rule._startPeriod = new Date(start);\n\n          if (positions) {\n            start = startPeriodByFreq(start, rule);\n            end = endPeriodByFreq(end, rule);\n            var diff = getMilliseconds(end) - getMilliseconds(start);\n\n            if (diff < 0) {\n              hours = start.getHours();\n              end.setHours(hours, start.getMinutes(), start.getSeconds(), start.getMilliseconds());\n              kendoDate.adjustDST(end, hours);\n            }\n\n            rule._startPeriod = new Date(start);\n            rule._endPeriod = endPeriodByFreq(start, rule);\n          }\n\n          durationMS = event.duration();\n          var allDayCompensation = event.isAllDay ? 86400000 : 0;\n          rule._startTime = startTime = kendoDate.toInvariantTime(start);\n\n          if (freq.setup) {\n            freq.setup(rule, eventStart, start);\n          }\n\n          freq.limit(start, end, rule);\n\n          while (start <= end) {\n            endDate = new Date(start);\n            setTime(endDate, durationMS);\n            var inPeriodCheckEndDate = new Date(start);\n            setTime(inPeriodCheckEndDate, durationMS + allDayCompensation);\n            inPeriod = start >= startPeriod || inPeriodCheckEndDate > startPeriod;\n\n            if (inPeriod && !isException(exceptionDates, start, zone) || positions) {\n              startTime = kendoDate.toUtcTime(kendoDate.getDate(start)) + getMilliseconds(rule._startTime);\n              endTime = startTime + durationMS;\n\n              if (eventStartMS !== start.getTime() || eventStartTime !== getMilliseconds(rule._startTime)) {\n                var startZone = event.startTimezone || event.endTimezone;\n                var endZone = event.endTimezone || event.startTimezone;\n\n                if (!event.isAllDay) {\n                  if (zone && startZone || !zone && !startZone) {\n                    var startOffsetDiff = getZoneOffset(start, zone) - getZoneOffset(event.start, zone);\n                    var endOffsetDiff = getZoneOffset(endDate, zone) - getZoneOffset(event.end, zone);\n                    var startTZOffsetDiff = getZoneOffset(start, startZone) - getZoneOffset(event.start, startZone);\n                    var endTZOffsetDiff = getZoneOffset(endDate, endZone) - getZoneOffset(event.end, endZone);\n\n                    if (startOffsetDiff !== startTZOffsetDiff) {\n                      var offsetTicksStart = (startOffsetDiff - startTZOffsetDiff) * 60000;\n                      shiftedStart = new Date(start.getTime() - offsetTicksStart);\n                      shiftedStartTime = startTime - offsetTicksStart;\n                    }\n\n                    if (endOffsetDiff !== endTZOffsetDiff) {\n                      var offsetTicksEnd = (endOffsetDiff - endTZOffsetDiff) * 60000;\n                      shiftedEnd = new Date(endDate.getTime() - offsetTicksEnd);\n                      shifterEndTime = endTime - offsetTicksEnd;\n                    }\n                  }\n                }\n\n                events.push(event.toOccurrence({\n                  start: shiftedStart || new Date(start),\n                  end: shiftedEnd || endDate,\n                  _startTime: shiftedStartTime || startTime,\n                  _endTime: shifterEndTime || endTime\n                }));\n                shiftedStart = shiftedEnd = shiftedStartTime = shifterEndTime = null;\n              } else {\n                event._startTime = startTime;\n                event._endTime = endTime;\n                events.push(event);\n              }\n            }\n\n            if (positions) {\n              freq.next(start, rule);\n              freq.limit(start, end, rule);\n\n              if (start > rule._endPeriod) {\n                periodEvents = eventsByPosition(events.slice(currentIdx), eventStart, positions, rule.until);\n                periodEvents = removeExceptionDates(periodEvents, exceptionDates, zone);\n                events = events.slice(0, currentIdx).concat(periodEvents);\n                rule._endPeriod = endPeriodByFreq(start, rule);\n                currentIdx = events.length;\n              }\n\n              if (count && count === currentIdx) {\n                break;\n              }\n            } else {\n              if (count && count === currentIdx) {\n                break;\n              }\n\n              currentIdx += 1;\n              var isMissingDSTHour = isDSTMissingHour(start);\n              freq.next(start, rule);\n\n              if (isMissingDSTHour && rule.freq !== \"hourly\" && kendoDate.toInvariantTime(event.start).getTime() !== kendoDate.toInvariantTime(start).getTime()) {\n                rule._startTime = startTime = new Date(start.getTime() - 3600000);\n              }\n\n              freq.limit(start, end, rule);\n            }\n          }\n\n          return events;\n        }\n\n        function isDSTMissingHour(date) {\n          var dateOffset = date.getTimezoneOffset();\n          var dateMinusHour = new Date(date.getTime() - 3600000);\n          var dateMinusHourOffset = dateMinusHour.getTimezoneOffset();\n          return dateOffset < dateMinusHourOffset;\n        }\n\n        function getZoneOffset(date, zone) {\n          return zone ? kendo.timezone.offset(date, zone) : date.getTimezoneOffset();\n        }\n\n        function parseUTCDate(value, zone) {\n          value = kendo.parseDate(value, DATE_FORMATS); //Parse UTC to local time\n\n          if (value && zone) {\n            value = timezone.apply(value, zone);\n          }\n\n          return value;\n        }\n\n        function parseDateRule(dateRule, zone) {\n          var pairs = dateRule.split(\";\");\n          var pair;\n          var property;\n          var value;\n          var tzid;\n          var valueIdx, valueLength;\n\n          for (var idx = 0, length = pairs.length; idx < length; idx++) {\n            pair = pairs[idx].split(\":\");\n            property = pair[0];\n            value = pair[1];\n\n            if (property.indexOf(\"TZID\") !== -1) {\n              tzid = property.substring(property.indexOf(\"TZID\")).split(\"=\")[1];\n            }\n\n            if (value) {\n              value = value.split(\",\");\n\n              for (valueIdx = 0, valueLength = value.length; valueIdx < valueLength; valueIdx++) {\n                value[valueIdx] = parseUTCDate(value[valueIdx], tzid || zone);\n              }\n            }\n          }\n\n          if (value) {\n            return {\n              value: value,\n              tzid: tzid\n            };\n          }\n        }\n\n        function parseRule(recur, zone, offsets) {\n          var instance = {};\n          var splits, value;\n          var idx = 0,\n              length;\n          var ruleValue = false;\n          var rule, part, parts;\n          var property, weekStart, weekDays;\n\n          var predicate = function (a, b) {\n            var day1 = a.day,\n                day2 = b.day;\n\n            if (day1 < weekStart) {\n              day1 += 7;\n            }\n\n            if (day2 < weekStart) {\n              day2 += 7;\n            }\n\n            return day1 - day2;\n          };\n\n          if (!recur) {\n            return null;\n          }\n\n          parts = recur.split(\"\\n\");\n\n          if (!parts[1] && (recur.indexOf(\"DTSTART\") !== -1 || recur.indexOf(\"DTEND\") !== -1 || recur.indexOf(\"EXDATE\") !== -1)) {\n            parts = recur.split(\" \");\n          }\n\n          for (idx = 0, length = parts.length; idx < length; idx++) {\n            part = kendo.trim(parts[idx]);\n\n            if (part.indexOf(\"DTSTART\") !== -1) {\n              instance.start = parseDateRule(part, zone);\n            } else if (part.indexOf(\"DTEND\") !== -1) {\n              instance.end = parseDateRule(part, zone);\n            } else if (part.indexOf(\"EXDATE\") !== -1) {\n              instance.exdates = parseDateRule(part, zone);\n            } else if (part.indexOf(\"RRULE\") !== -1) {\n              rule = part.substring(6);\n            } else if (kendo.trim(part)) {\n              rule = part;\n            }\n          }\n\n          rule = rule.split(\";\");\n\n          for (idx = 0, length = rule.length; idx < length; idx++) {\n            property = rule[idx];\n            splits = property.split(\"=\");\n            value = kendo.trim(splits[1]).split(\",\");\n\n            switch (kendo.trim(splits[0]).toUpperCase()) {\n              case \"FREQ\":\n                instance.freq = value[0].toLowerCase();\n                break;\n\n              case \"UNTIL\":\n                instance.until = parseUTCDate(value[0], zone);\n                break;\n\n              case \"COUNT\":\n                instance.count = parseInt(value[0], 10);\n                break;\n\n              case \"INTERVAL\":\n                instance.interval = parseInt(value[0], 10);\n                break;\n\n              case \"BYSECOND\":\n                instance.seconds = parseArray(value, {\n                  start: 0,\n                  end: 60\n                });\n                ruleValue = true;\n                break;\n\n              case \"BYMINUTE\":\n                instance.minutes = parseArray(value, {\n                  start: 0,\n                  end: 59\n                });\n                ruleValue = true;\n                break;\n\n              case \"BYHOUR\":\n                instance.hours = parseArray(value, {\n                  start: 0,\n                  end: 23\n                });\n                ruleValue = true;\n                break;\n\n              case \"BYMONTHDAY\":\n                instance.monthDays = parseArray(value, {\n                  start: -31,\n                  end: 31\n                });\n                ruleValue = true;\n                break;\n\n              case \"BYYEARDAY\":\n                instance.yearDays = parseArray(value, {\n                  start: -366,\n                  end: 366\n                });\n                ruleValue = true;\n                break;\n\n              case \"BYMONTH\":\n                instance.months = parseArray(value, {\n                  start: 1,\n                  end: 12\n                });\n                ruleValue = true;\n                break;\n\n              case \"BYDAY\":\n                instance.weekDays = weekDays = parseWeekDayList(value);\n                ruleValue = true;\n                break;\n\n              case \"BYWEEKNO\":\n                instance.weeks = parseArray(value, {\n                  start: -53,\n                  end: 53\n                });\n                ruleValue = true;\n                break;\n\n              case \"BYSETPOS\":\n                instance.positions = parseArray(value, {\n                  start: -366,\n                  end: 366\n                });\n                break;\n\n              case \"WKST\":\n                instance.weekStart = weekStart = WEEK_DAYS_IDX[value[0]];\n                break;\n            }\n          }\n\n          if (instance.freq === undefined || instance.count !== undefined && instance.until) {\n            return null;\n          }\n\n          if (!instance.interval) {\n            instance.interval = 1;\n          }\n\n          if (weekStart === undefined) {\n            instance.weekStart = weekStart = kendo.culture().calendar.firstDay;\n          }\n\n          if (weekDays) {\n            instance.weekDays = weekDays.sort(predicate);\n          }\n\n          if (instance.positions && !ruleValue) {\n            instance.positions = null;\n          }\n\n          instance._hasRuleValue = ruleValue;\n          instance.offsets = offsets;\n          return instance;\n        }\n\n        function serializeDateRule(dateRule, zone) {\n          var value = dateRule.value;\n          var tzid = dateRule.tzid || \"\";\n          var length = value.length;\n          var idx = 0;\n          var val;\n\n          for (; idx < length; idx++) {\n            val = value[idx];\n            val = timezone.convert(val, tzid || zone || val.getTimezoneOffset(), \"Etc/UTC\");\n            value[idx] = kendo.toString(val, \"yyyyMMddTHHmmssZ\");\n          }\n\n          if (tzid) {\n            tzid = \";TZID=\" + tzid;\n          }\n\n          return tzid + \":\" + value.join(\",\") + \" \";\n        }\n\n        function serialize(rule, zone) {\n          var weekStart = rule.weekStart;\n          var ruleString = \"FREQ=\" + rule.freq.toUpperCase();\n          var exdates = rule.exdates || \"\";\n          var start = rule.start || \"\";\n          var end = rule.end || \"\";\n          var until = rule.until;\n\n          if (weekStart === undefined) {\n            weekStart = kendo.culture().calendar.firstDay;\n          }\n\n          if (rule.interval > 1) {\n            ruleString += \";INTERVAL=\" + rule.interval;\n          }\n\n          if (rule.count) {\n            ruleString += \";COUNT=\" + rule.count;\n          }\n\n          if (until) {\n            until = timezone.convert(until, zone || until.getTimezoneOffset(), \"Etc/UTC\");\n            ruleString += \";UNTIL=\" + kendo.toString(until, \"yyyyMMddTHHmmssZ\");\n          }\n\n          if (rule.months) {\n            ruleString += \";BYMONTH=\" + rule.months;\n          }\n\n          if (rule.weeks) {\n            ruleString += \";BYWEEKNO=\" + rule.weeks;\n          }\n\n          if (rule.yearDays) {\n            ruleString += \";BYYEARDAY=\" + rule.yearDays;\n          }\n\n          if (rule.monthDays) {\n            ruleString += \";BYMONTHDAY=\" + rule.monthDays;\n          }\n\n          if (rule.weekDays) {\n            ruleString += \";BYDAY=\" + serializeWeekDayList(rule.weekDays);\n          }\n\n          if (rule.hours) {\n            ruleString += \";BYHOUR=\" + rule.hours;\n          }\n\n          if (rule.minutes) {\n            ruleString += \";BYMINUTE=\" + rule.minutes;\n          }\n\n          if (rule.seconds) {\n            ruleString += \";BYSECOND=\" + rule.seconds;\n          }\n\n          if (rule.positions) {\n            ruleString += \";BYSETPOS=\" + rule.positions;\n          }\n\n          if (weekStart !== undefined) {\n            ruleString += \";WKST=\" + WEEK_DAYS[weekStart];\n          }\n\n          if (start) {\n            start = \"DTSTART\" + serializeDateRule(start, zone);\n          }\n\n          if (end) {\n            end = \"DTEND\" + serializeDateRule(end, zone);\n          }\n\n          if (exdates) {\n            exdates = \"EXDATE\" + serializeDateRule(exdates, zone);\n          }\n\n          if (start || end || exdates) {\n            ruleString = start + end + exdates + \"RRULE:\" + ruleString;\n          }\n\n          return ruleString;\n        }\n\n        kendo.recurrence = {\n          rule: {\n            parse: parseRule,\n            serialize: serialize\n          },\n          expand: expand,\n          dayInYear: dayInYear,\n          weekInYear: weekInYear,\n          weekInMonth: weekInMonth,\n          numberOfWeeks: numberOfWeeks,\n          isException: isException,\n          toExceptionString: toExceptionString\n        };\n        var RECURRENCE_VIEW_TEMPLATE = kendo.template('# if (frequency !== \"never\") { #' + '<div class=\"k-edit-label\"><label for=\"recur_interval\">#:messages.repeatEvery#</label></div>' + '<div class=\"k-edit-field\"><input id=\"recur_interval\" class=\"k-recur-interval\" title=\"#:messages.repeatEvery# #:messages.interval#\"/>#:messages.interval#</div>' + '# } #' + '# if (frequency === \"weekly\") { #' + '<div class=\"k-edit-label\"><label>#:messages.repeatOn#</label></div>' + '<div class=\"k-edit-field\"><div class=\"k-button-group-stretched k-recur-weekday-buttons\" title=\"#:messages.repeatOn#\"></div></div>' + '# } else if (frequency === \"monthly\") { #' + '<div class=\"k-edit-label\"><label>#:messages.repeatOn#</label></div>' + '<div class=\"k-edit-field\">' + '<ul class=\"k-reset\">' + '<li>' + '<label class=\"k-radio-label\"><input class=\"k-recur-month-radio k-radio k-radio-md\" type=\"radio\" name=\"month\" value=\"monthday\" title=\"#:messages.repeatOn#\" />#:messages.date#:</label>' + '<input class=\"k-recur-monthday\" aria-label=\"#:messages.date#\" title=\"#:messages.date#\" />' + '</li>' + '<li>' + '<input class=\"k-recur-month-radio k-radio k-radio-md\" type=\"radio\" name=\"month\" value=\"weekday\" aria-label=\"#:messages.repeatOn# #:messages.day#\" title=\"#:messages.repeatOn# #:messages.day#\" />' + '<input class=\"k-recur-weekday-offset\" title=\"#:messages.repeatOn#\" /><input class=\"k-recur-weekday\" title=\"#:messages.day#\" />' + '</li>' + '</ul>' + '</div>' + '# } else if (frequency === \"yearly\") { #' + '<div class=\"k-edit-label\"><label>#:messages.repeatOn#</label></div>' + '<div class=\"k-edit-field\">' + '<ul class=\"k-reset\">' + '<li>' + '<input class=\"k-recur-year-radio k-radio k-radio-md\" type=\"radio\" name=\"year\" value=\"monthday\" title=\"#:messages.repeatOn# #:messages.month#\" />' + '<input class=\"k-recur-month\" aria-label=\"#:messages.month#\" title=\"#:messages.month#\" />' + '<input class=\"k-recur-monthday\" aria-label=\"#:messages.date#\" title=\"#:messages.date#\" />' + '</li>' + '<li>' + '<input class=\"k-recur-year-radio k-radio k-radio-md\" type=\"radio\" name=\"year\" value=\"weekday\" title=\"#:messages.repeatOn# #:messages.day#\" />' + '<input class=\"k-recur-weekday-offset\" title=\"#:messages.repeatOn#\" /><input class=\"k-recur-weekday\" title=\"#:messages.day#\"  />#:messages.of#<input class=\"k-recur-month\" title=\"#:messages.of + messages.month#\"/>' + '</li>' + '</ul>' + '</div>' + '# } #' + '# if (frequency !== \"never\") { #' + '<div class=\"k-edit-label\"><label>#:end.label#</label></div>' + '<div class=\"k-edit-field\">' + '<ul class=\"k-reset\">' + '<li>' + '<label class=\"k-radio-label\"><input class=\"k-recur-end-never k-radio k-radio-md\" type=\"radio\" name=\"end\" value=\"never\" title=\"#:end.label#\" />#:end.never#</label>' + '</li>' + '<li>' + '<label class=\"k-radio-label\"><input class=\"k-recur-end-count k-radio k-radio-md\" type=\"radio\" name=\"end\" value=\"count\" title=\"#:end.label#\" />#:end.after#</label>' + '<input class=\"k-recur-count\" aria-label=\"#:end.occurrence#\" title=\"#:end.occurrence#\" />#:end.occurrence#' + '</li>' + '<li>' + '<label class=\"k-radio-label\"><input class=\"k-recur-end-until k-radio k-radio-md\" type=\"radio\" name=\"end\" value=\"until\" title=\"#:end.label#\" />#:end.on#</label>' + '<input class=\"k-recur-until\" title=\"#:end.on#\" aria-label=\"#:end.on#\" name=\"recur-until\" />' + '</li>' + '</ul>' + '</div>' + '# } #');\n        var DAY_RULE = [{\n          day: 0,\n          offset: 0\n        }, {\n          day: 1,\n          offset: 0\n        }, {\n          day: 2,\n          offset: 0\n        }, {\n          day: 3,\n          offset: 0\n        }, {\n          day: 4,\n          offset: 0\n        }, {\n          day: 5,\n          offset: 0\n        }, {\n          day: 6,\n          offset: 0\n        }];\n        var WEEKDAY_RULE = [{\n          day: 1,\n          offset: 0\n        }, {\n          day: 2,\n          offset: 0\n        }, {\n          day: 3,\n          offset: 0\n        }, {\n          day: 4,\n          offset: 0\n        }, {\n          day: 5,\n          offset: 0\n        }];\n        var WEEKEND_RULE = [{\n          day: 0,\n          offset: 0\n        }, {\n          day: 6,\n          offset: 0\n        }];\n        var BaseRecurrenceEditor = Widget.extend({\n          init: function (element, options) {\n            var start;\n            var that = this;\n            var frequencies = options && options.frequencies;\n            Widget.fn.init.call(that, element, options);\n            that.wrapper = that.element;\n            options = that.options;\n            options.start = start = options.start || kendoDate.today();\n\n            if (frequencies) {\n              options.frequencies = frequencies;\n            }\n\n            if (typeof start === \"string\") {\n              options.start = kendo.parseDate(start, \"yyyyMMddTHHmmss\");\n            }\n\n            if (options.firstWeekDay === null) {\n              options.firstWeekDay = kendo.culture().calendar.firstDay;\n            }\n\n            that._namespace = \".\" + options.name;\n          },\n          options: {\n            value: \"\",\n            start: \"\",\n            timezone: \"\",\n            spinners: true,\n            firstWeekDay: null,\n            frequencies: [\"never\", \"daily\", \"weekly\", \"monthly\", \"yearly\"],\n            mobile: false,\n            messages: {\n              repeat: \"Repeat\",\n              recurrenceEditorTitle: \"Recurrence editor\",\n              frequencies: {\n                never: \"Never\",\n                hourly: \"Hourly\",\n                daily: \"Daily\",\n                weekly: \"Weekly\",\n                monthly: \"Monthly\",\n                yearly: \"Yearly\"\n              },\n              hourly: {\n                repeatEvery: \"Repeat every: \",\n                interval: \" hour(s)\"\n              },\n              daily: {\n                repeatEvery: \"Repeat every: \",\n                interval: \" day(s)\"\n              },\n              weekly: {\n                interval: \" week(s)\",\n                repeatEvery: \"Repeat every: \",\n                repeatOn: \"Repeat on: \"\n              },\n              monthly: {\n                repeatEvery: \"Repeat every: \",\n                repeatOn: \"Repeat on: \",\n                interval: \" month(s)\",\n                day: \"Day \",\n                date: \"Date\"\n              },\n              yearly: {\n                repeatEvery: \"Repeat every: \",\n                repeatOn: \"Repeat on: \",\n                interval: \" year(s)\",\n                of: \" of \",\n                month: \"month\",\n                day: \"day\",\n                date: \"Date\"\n              },\n              end: {\n                label: \"End:\",\n                mobileLabel: \"Ends\",\n                never: \"Never\",\n                after: \"After \",\n                occurrence: \" occurrence(s)\",\n                on: \"On \"\n              },\n              offsetPositions: {\n                first: \"first\",\n                second: \"second\",\n                third: \"third\",\n                fourth: \"fourth\",\n                last: \"last\"\n              },\n              weekdays: {\n                day: \"day\",\n                weekday: \"weekday\",\n                weekend: \"weekend day\"\n              }\n            }\n          },\n          events: [\"change\"],\n          _initInterval: function () {\n            var that = this;\n            var rule = that._value;\n\n            that._container.find(\".k-recur-interval\").kendoNumericTextBox({\n              spinners: that.options.spinners,\n              value: rule.interval || 1,\n              decimals: 0,\n              format: \"#\",\n              min: 1,\n              change: function () {\n                rule.interval = this.value();\n\n                that._trigger();\n              }\n            });\n          },\n          _weekDayButtons: function (firstDay) {\n            var that = this,\n                names = kendo.culture().calendar.days.names,\n                abbreviated = kendo.culture().calendar.days.namesAbbr,\n                repeatOn = that.options.messages.weekly.repeatOn,\n                length = names.length,\n                idx = 0,\n                values = [],\n                items = [];\n\n            for (; idx < length; idx++) {\n              values.push(idx);\n            }\n\n            names = names.slice(firstDay).concat(names.slice(0, firstDay));\n            abbreviated = abbreviated.slice(firstDay).concat(abbreviated.slice(0, firstDay));\n            values = values.slice(firstDay).concat(values.slice(0, firstDay));\n\n            for (idx = 0; idx < length; idx++) {\n              items.push({\n                text: abbreviated[idx],\n                attributes: {\n                  \"data-value\": values[idx],\n                  \"aria-label\": repeatOn + \" \" + names[idx]\n                }\n              });\n            }\n\n            that._weekDayButtonGroup = new ButtonGroup(that._container.find(\".k-recur-weekday-buttons\"), {\n              items: items,\n              selection: \"multiple\",\n              select: function () {\n                var rule = that._value,\n                    selectedDays = that._weekDayButtonGroup.current();\n\n                rule.weekDays = selectedDays.map(function (i, day) {\n                  return {\n                    day: Number(day.getAttribute(\"data-value\")),\n                    offset: 0\n                  };\n                });\n\n                if (!that.options.mobile) {\n                  that._trigger();\n                }\n              }\n            });\n          },\n          _weekDayRule: function (clear) {\n            var that = this;\n\n            var weekday = (that._weekDay.element || that._weekDay).val();\n\n            var offset = Number((that._weekDayOffset.element || that._weekDayOffset).val());\n            var weekDays = null;\n            var positions = null;\n\n            if (!clear) {\n              if (weekday === \"day\") {\n                weekDays = DAY_RULE;\n                positions = offset;\n              } else if (weekday === \"weekday\") {\n                weekDays = WEEKDAY_RULE;\n                positions = offset;\n              } else if (weekday === \"weekend\") {\n                weekDays = WEEKEND_RULE;\n                positions = offset;\n              } else {\n                weekDays = [{\n                  offset: offset,\n                  day: Number(weekday)\n                }];\n              }\n            }\n\n            that._value.weekDays = weekDays;\n            that._value.positions = positions;\n          },\n          _weekDayView: function () {\n            var that = this;\n            var weekDays = that._value.weekDays;\n            var positions = that._value.positions;\n            var weekDayOffsetWidget = that._weekDayOffset;\n            var weekDayOffset;\n            var weekDayValue;\n            var length;\n            var method;\n\n            if (weekDays) {\n              length = weekDays.length;\n\n              if (positions) {\n                if (length === 7) {\n                  weekDayValue = \"day\";\n                  weekDayOffset = positions;\n                } else if (length === 5) {\n                  weekDayValue = \"weekday\";\n                  weekDayOffset = positions;\n                } else if (length === 2) {\n                  weekDayValue = \"weekend\";\n                  weekDayOffset = positions;\n                }\n              }\n\n              if (!weekDayValue) {\n                weekDays = weekDays[0];\n                weekDayValue = weekDays.day;\n                weekDayOffset = weekDays.offset || \"\";\n              }\n\n              method = weekDayOffsetWidget.value ? \"value\" : \"val\";\n              weekDayOffsetWidget[method](weekDayOffset);\n\n              that._weekDay[method](weekDayValue);\n            }\n          },\n          _initWeekDay: function () {\n            var that = this,\n                data;\n            var weekdayMessage = that.options.messages.weekdays;\n            var offsetMessage = that.options.messages.offsetPositions;\n\n            var weekDayInput = that._container.find(\".k-recur-weekday\");\n\n            var change = function () {\n              that._weekDayRule();\n\n              that._trigger();\n            };\n\n            if (weekDayInput[0]) {\n              that._weekDayOffset = new DropDownList(that._container.find(\".k-recur-weekday-offset\"), {\n                change: change,\n                dataTextField: \"text\",\n                dataValueField: \"value\",\n                dataSource: [{\n                  text: offsetMessage.first,\n                  value: \"1\"\n                }, {\n                  text: offsetMessage.second,\n                  value: \"2\"\n                }, {\n                  text: offsetMessage.third,\n                  value: \"3\"\n                }, {\n                  text: offsetMessage.fourth,\n                  value: \"4\"\n                }, {\n                  text: offsetMessage.last,\n                  value: \"-1\"\n                }]\n              });\n              data = [{\n                text: weekdayMessage.day,\n                value: \"day\"\n              }, {\n                text: weekdayMessage.weekday,\n                value: \"weekday\"\n              }, {\n                text: weekdayMessage.weekend,\n                value: \"weekend\"\n              }];\n              that._weekDay = new DropDownList(weekDayInput, {\n                value: that.options.start.getDay(),\n                change: change,\n                dataTextField: \"text\",\n                dataValueField: \"value\",\n                dataSource: data.concat($.map(kendo.culture().calendar.days.names, function (dayName, idx) {\n                  return {\n                    text: dayName,\n                    value: idx\n                  };\n                }))\n              });\n\n              that._weekDayView();\n            }\n          },\n          _initWeekDays: function () {\n            var that = this;\n            var rule = that._value;\n            var weekDayButtonGroup = that._weekDayButtonGroup;\n\n            if (weekDayButtonGroup && rule.weekDays && rule.weekDays.length) {\n              var ruleDays = rule.weekDays,\n                  ruleDaysLength = ruleDays.length,\n                  selectors = [],\n                  i = 0,\n                  selectedWeekDayButtons;\n\n              for (; i < ruleDaysLength; i++) {\n                selectors.push(\"[data-value='\" + ruleDays[i].day + \"']\");\n              }\n\n              selectedWeekDayButtons = weekDayButtonGroup.element.find(selectors.join(\",\"));\n              weekDayButtonGroup.select(selectedWeekDayButtons);\n            }\n          },\n          _initMonthDay: function () {\n            var that = this;\n            var rule = that._value;\n\n            var monthDayInput = that._container.find(\".k-recur-monthday\");\n\n            if (monthDayInput[0]) {\n              that._monthDay = new kendo.ui.NumericTextBox(monthDayInput, {\n                spinners: that.options.spinners,\n                min: 1,\n                max: 31,\n                decimals: 0,\n                format: \"#\",\n                value: rule.monthDays ? rule.monthDays[0] : that.options.start.getDate(),\n                change: function () {\n                  var value = this.value();\n                  rule.monthDays = value ? [value] : value;\n\n                  that._trigger();\n                }\n              });\n            }\n          },\n          _initCount: function () {\n            var that = this,\n                input = that._container.find(\".k-recur-count\"),\n                rule = that._value;\n\n            that._count = input.kendoNumericTextBox({\n              spinners: that.options.spinners,\n              value: rule.count || 1,\n              decimals: 0,\n              format: \"#\",\n              min: 1,\n              change: function () {\n                rule.count = this.value();\n\n                that._trigger();\n              }\n            }).data(\"kendoNumericTextBox\");\n          },\n          _initUntil: function () {\n            var that = this,\n                input = that._container.find(\".k-recur-until\"),\n                start = that.options.start,\n                rule = that._value,\n                until = rule.until,\n                min = until && until < start ? until : start,\n                startInput = that.wrapper.closest(\".k-scheduler-edit-form\").find(\"[name=start]:visible\"),\n                validDateValidationMessage = kendo.format(kendo.ui.Validator.prototype.options.messages.date, that.options.messages.end.on),\n                dateCompareValidationMessage = kendo.ui.Validator.prototype.options.messages.dateCompare,\n                initialValue = new Date(start.getFullYear(), start.getMonth(), start.getDate(), 23, 59, 59);\n\n            input.attr(\"data-validDate-msg\", validDateValidationMessage);\n            input.attr(\"data-untilDateCompare-msg\", dateCompareValidationMessage);\n\n            if (startInput.length === 0) {\n              startInput = that.wrapper.closest(\".k-scheduler-edit-form\").find(\"[name=start]\");\n            }\n\n            if (startInput.length > 0 && startInput.val()) {\n              min = kendo.parseDate(startInput.val());\n\n              if (initialValue < min) {\n                initialValue = min;\n              }\n            }\n\n            that._until = input.kendoDatePicker({\n              min: min,\n              value: until || initialValue,\n              change: function () {\n                var date = this.value();\n\n                if (date) {\n                  rule.until = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 23, 59, 59);\n                }\n\n                that._trigger();\n              }\n            }).data(\"kendoDatePicker\");\n\n            if (startInput) {\n              startInput.on(\"change\", function () {\n                that._until.setOptions({\n                  min: startInput.val()\n                });\n              });\n            }\n          },\n          _trigger: function () {\n            if (!this.options.mobile) {\n              this.trigger(\"change\");\n            }\n          }\n        });\n        var RecurrenceEditor = BaseRecurrenceEditor.extend({\n          init: function (element, options) {\n            var that = this;\n            BaseRecurrenceEditor.fn.init.call(that, element, options);\n\n            that._initFrequency();\n\n            that._initContainer();\n\n            that.value(that.options.value);\n          },\n          options: {\n            name: \"RecurrenceEditor\"\n          },\n          events: [\"change\"],\n          destroy: function () {\n            var that = this;\n\n            that._frequency.destroy();\n\n            if (this._weekDayButtonGroup) {\n              this._weekDayButtonGroup.destroy();\n            }\n\n            that._container.find(\"input[type=radio],input[type=checkbox]\").off(CLICK + that._namespace);\n\n            kendo.destroy(that._container);\n            BaseRecurrenceEditor.fn.destroy.call(that);\n          },\n          value: function (value) {\n            var that = this;\n            var timezone = that.options.timezone;\n            var freq, freqButton;\n\n            if (value === undefined) {\n              if (!that._value.freq) {\n                return \"\";\n              }\n\n              return serialize(that._value, timezone);\n            }\n\n            that._value = parseRule(value, timezone) || {};\n            freq = that._value.freq;\n\n            if (freq) {\n              freqButton = that._frequency.element.find(\"[data-value='\" + freq + \"']\");\n\n              that._frequency.select(freqButton);\n            } else {\n              that._frequency.select(0);\n            }\n\n            that._initView(that._frequency.current().data(\"value\"));\n          },\n          _initContainer: function () {\n            var element = this.element,\n                container = $('<div class=\"k-recur-view\" />'),\n                editContainer = element.parent(\".k-edit-field\");\n\n            if (editContainer[0]) {\n              container.insertAfter(editContainer);\n            } else {\n              element.append(container);\n            }\n\n            this._container = container;\n          },\n          _initFrequency: function () {\n            var that = this,\n                options = that.options,\n                frequencies = options.frequencies,\n                messages = options.messages.frequencies,\n                buttonGroupElement = $('<div class=\"k-button-group-stretched k-flex-1\"/>').attr({\n              title: options.messages.recurrenceEditorTitle\n            }),\n                frequency;\n            frequencies = $.map(frequencies, function (frequency) {\n              return {\n                text: messages[frequency],\n                attributes: {\n                  \"data-value\": frequency,\n                  \"aria-label\": options.messages.repeat + messages[frequency]\n                }\n              };\n            });\n            frequency = frequencies[0];\n\n            if (frequency && frequency.attributes && frequency.attributes[\"data-value\"] === \"never\") {\n              frequency.attributes[\"data-value\"] = \"\";\n            }\n\n            that.element.append(buttonGroupElement);\n            that._frequency = new ButtonGroup(buttonGroupElement, {\n              items: frequencies,\n              select: function () {\n                that._value = {};\n\n                that._initView(that._frequency.current().data(\"value\"));\n\n                that.trigger(\"change\");\n              }\n            });\n          },\n          _initView: function (frequency) {\n            var that = this;\n            var rule = that._value;\n            var options = that.options;\n            var data = {\n              frequency: frequency || \"never\",\n              firstWeekDay: options.firstWeekDay,\n              messages: options.messages[frequency],\n              end: options.messages.end\n            };\n            kendo.destroy(that._container);\n\n            that._container.html(RECURRENCE_VIEW_TEMPLATE(data));\n\n            if (!frequency) {\n              that._value = {};\n              return;\n            }\n\n            rule.freq = frequency;\n\n            if (frequency === \"weekly\" && !rule.weekDays) {\n              rule.weekDays = [{\n                day: options.start.getDay(),\n                offset: 0\n              }];\n            }\n\n            that._weekDayButtons(options.firstWeekDay);\n\n            that._initInterval();\n\n            that._initWeekDays();\n\n            that._initMonthDay();\n\n            that._initWeekDay();\n\n            that._initMonth();\n\n            that._initCount();\n\n            that._initUntil();\n\n            that._period();\n\n            that._end();\n          },\n          _initMonth: function () {\n            var that = this;\n            var rule = that._value;\n            var month = rule.months || [that.options.start.getMonth() + 1];\n\n            var monthInputs = that._container.find(\".k-recur-month\");\n\n            var options;\n\n            if (monthInputs[0]) {\n              options = {\n                change: function () {\n                  rule.months = [Number(this.value())];\n                  that.trigger(\"change\");\n                },\n                dataTextField: \"text\",\n                dataValueField: \"value\",\n                dataSource: $.map(kendo.culture().calendar.months.names, function (monthName, idx) {\n                  return {\n                    text: monthName,\n                    value: idx + 1\n                  };\n                })\n              };\n              that._month1 = new DropDownList(monthInputs[0], options);\n              that._month2 = new DropDownList(monthInputs[1], options);\n\n              if (month) {\n                month = month[0];\n\n                that._month1.value(month);\n\n                that._month2.value(month);\n              }\n            }\n          },\n          _end: function () {\n            var that = this;\n            var rule = that._value;\n            var container = that._container;\n            var namespace = that._namespace;\n\n            var click = function (e) {\n              that._toggleEnd(e.currentTarget.value);\n\n              that.trigger(\"change\");\n            };\n\n            var endRule;\n            that._buttonNever = container.find(\".k-recur-end-never\").on(CLICK + namespace, click);\n            that._buttonCount = container.find(\".k-recur-end-count\").on(CLICK + namespace, click);\n            that._buttonUntil = container.find(\".k-recur-end-until\").on(CLICK + namespace, click);\n\n            if (rule.count) {\n              endRule = \"count\";\n            } else if (rule.until) {\n              endRule = \"until\";\n            }\n\n            that._toggleEnd(endRule);\n          },\n          _period: function () {\n            var that = this;\n            var rule = that._value;\n            var monthly = rule.freq === \"monthly\";\n            var toggleRule = monthly ? that._toggleMonthDay : that._toggleYear;\n            var selector = \".k-recur-\" + (monthly ? \"month\" : \"year\") + \"-radio\";\n\n            var radioButtons = that._container.find(selector);\n\n            if (!monthly && rule.freq !== \"yearly\") {\n              return;\n            }\n\n            radioButtons.on(CLICK + that._namespace, function (e) {\n              toggleRule.call(that, e.currentTarget.value);\n              that.trigger(\"change\");\n            });\n            that._buttonMonthDay = radioButtons.eq(0);\n            that._buttonWeekDay = radioButtons.eq(1);\n            toggleRule.call(that, rule.weekDays ? \"weekday\" : \"monthday\");\n          },\n          _toggleEnd: function (endRule) {\n            var that = this;\n            var count, until;\n            var enableCount, enableUntil;\n\n            if (endRule === \"count\") {\n              that._buttonCount.prop(\"checked\", true);\n\n              enableCount = true;\n              enableUntil = false;\n              count = that._count.value();\n              until = null;\n            } else if (endRule === \"until\") {\n              that._buttonUntil.prop(\"checked\", true);\n\n              enableCount = false;\n              enableUntil = true;\n              count = null;\n              until = that._until.value();\n            } else {\n              that._buttonNever.prop(\"checked\", true);\n\n              enableCount = enableUntil = false;\n              count = until = null;\n            }\n\n            if (that._count) {\n              that._count.enable(enableCount);\n            }\n\n            if (that._until) {\n              that._until.enable(enableUntil);\n            }\n\n            that._value.count = count;\n            that._value.until = until;\n          },\n          _toggleMonthDay: function (monthRule) {\n            var that = this;\n            var enableMonthDay = false;\n            var enableWeekDay = true;\n            var clear = false;\n            var monthDays;\n\n            if (monthRule === \"monthday\") {\n              that._buttonMonthDay.prop(\"checked\", true);\n\n              monthDays = [that._monthDay.value()];\n              enableMonthDay = true;\n              enableWeekDay = false;\n              clear = true;\n            } else {\n              that._buttonWeekDay.prop(\"checked\", true);\n\n              monthDays = null;\n            }\n\n            that._weekDay.enable(enableWeekDay);\n\n            that._weekDayOffset.enable(enableWeekDay);\n\n            that._monthDay.enable(enableMonthDay);\n\n            that._value.monthDays = monthDays;\n\n            that._weekDayRule(clear);\n          },\n          _toggleYear: function (yearRule) {\n            var that = this;\n            var enableMonth1 = false;\n            var enableMonth2 = true;\n            var month;\n\n            if (yearRule === \"monthday\") {\n              enableMonth1 = true;\n              enableMonth2 = false;\n              month = that._month1.value();\n            } else {\n              month = that._month2.value();\n            }\n\n            that._month1.enable(enableMonth1);\n\n            that._month2.enable(enableMonth2);\n\n            that._value.months = [month];\n\n            that._toggleMonthDay(yearRule);\n          }\n        });\n        ui.plugin(RecurrenceEditor);\n        var RECURRENCE_HEADER_TEMPLATE = kendo.template('<div data-role=\"content\">' + '<ul class=\"k-listgroup k-listgroup-flush\">' + '<li class=\"k-item k-listgroup-item\">' + '<label class=\"k-label k-listgroup-form-row\">' + '<span class=\"k-item-title k-listgroup-form-field-label\">#:headerTitle#</span>' + '<div class=\"k-recur-pattern k-listgroup-form-field-wrapper\"></div>' + '</label>' + '</li>' + '<li class=\"k-item k-listgroup-item k-recur-view\"></li>' + '</ul>' + '</div>');\n        var RECURRENCE_REPEAT_PATTERN_TEMPLATE = kendo.template('# if (frequency !== \"never\") { #' + '<label class=\"k-label k-listgroup-form-row\">' + '<span class=\"k-item-title k-listgroup-form-field-label\">#:messages.repeatEvery#</span>' + '<div class=\"k-recur-editor-wrap k-listgroup-form-field-wrapper\">' + '<input class=\"k-recur-interval\" type=\"number\" pattern=\"\\\\\\\\d*\"/>' + '# if (messages.interval.length) { #' + '<span class=\"k-recur-editor-text\">#:messages.interval#</span>' + '# } #' + '</div>' + '</label>' + '# } #' + '# if (frequency === \"weekly\") { #' + '<ul class=\"k-recur-items-wrap k-listgroup k-listgroup-flush\">' + '<li class=\"k-item k-listgroup-item k-no-click\">' + '<label class=\"k-label k-listgroup-form-row\">' + '<span class=\"k-item-title k-listgroup-form-field-label\">#:messages.repeatOn#</span>' + '</label>' + '</li>' + '<div class=\"k-button-group-stretched k-recur-weekday-buttons\" title=\"#:messages.repeatOn#\">' + '</ul>' + '# } else if (frequency === \"monthly\") { #' + '<ul class=\"k-recur-items-wrap k-listgroup k-listgroup-flush\">' + '<li class=\"k-item k-listgroup-item\">' + '<label class=\"k-label k-listgroup-form-row\">' + '<span class=\"k-item-title k-listgroup-form-field-label\">#:messages.repeatBy#</span>' + '<div class=\"k-repeat-rule k-listgroup-form-field-wrapper\"></div>' + '</label>' + '</li>' + '<li class=\"k-monthday-view k-item k-listgroup-item\" style=\"display:none\">' + '<label class=\"k-label k-listgroup-form-row\">' + '<span class=\"k-item-title k-listgroup-form-field-label\">#:messages.day#</span>' + '<div class=\"k-listgroup-form-field-wrapper\"><input class=\"k-recur-monthday\" type=\"number\" aria-label=\"#:messages.date#\" title=\"#:messages.day#\" pattern=\"\\\\\\\\d*\"/></div>' + '</label>' + '</li>' + '<li class=\"k-weekday-view k-item k-listgroup-item\" style=\"display:none\">' + '<label class=\"k-label k-listgroup-form-row\">' + '<span class=\"k-item-title k-listgroup-form-field-label\">#:messages.every#</span>' + '<div class=\"k-listgroup-form-field-wrapper\"><select class=\"k-recur-weekday-offset\" title=\"#:messages.every#\"></select></div>' + '</label>' + '</li>' + '<li class=\"k-weekday-view k-item k-listgroup-item\" style=\"display:none\">' + '<label class=\"k-label k-listgroup-form-row\">' + '<span class=\"k-item-title k-listgroup-form-field-label\">#:messages.day#</span>' + '<div class=\"k-listgroup-form-field-wrapper\"><select class=\"k-recur-weekday\" title=\"#:messages.day#\"></select></div>' + '</label>' + '</li>' + '</ul>' + '# } else if (frequency === \"yearly\") { #' + '<ul class=\"k-recur-items-wrap k-listgroup k-listgroup-flush\">' + '<li class=\"k-item k-listgroup-item\">' + '<label class=\"k-label k-listgroup-form-row\">' + '<span class=\"k-item-title k-listgroup-form-field-label\">#:messages.repeatBy#</span>' + '<div class=\"k-repeat-rule k-listgroup-form-field-wrapper\"></div>' + '</label>' + '</li>' + '<li class=\"k-monthday-view k-item k-listgroup-item\" style=\"display:none\">' + '<label class=\"k-label k-listgroup-form-row\">' + '<span class=\"k-item-title k-listgroup-form-field-label\">#:messages.day#</span>' + '<div class=\"k-listgroup-form-field-wrapper\"><input class=\"k-recur-monthday\" type=\"number\" aria-label=\"#:messages.date#\" title=\"#:messages.day#\" pattern=\"\\\\\\\\d*\"/></div>' + '</label>' + '</li>' + '<li class=\"k-weekday-view k-item k-listgroup-item\" style=\"display:none\">' + '<label class=\"k-label k-listgroup-form-row\">' + '<span class=\"k-item-title k-listgroup-form-field-label\">#:messages.every#</span>' + '<div class=\"k-listgroup-form-field-wrapper\"><select class=\"k-recur-weekday-offset\" title=\"#:messages.every#\"></select></div>' + '</label>' + '</li>' + '<li class=\"k-weekday-view k-item k-listgroup-item\" style=\"display:none\">' + '<label class=\"k-label k-listgroup-form-row\">' + '<span class=\"k-item-title k-listgroup-form-field-label\">#:messages.day#</span>' + '<div class=\"k-listgroup-form-field-wrapper\"><select class=\"k-recur-weekday\" title=\"#:messages.day#\"></select></div>' + '</label>' + '</li>' + '<li class=\"k-item k-item k-listgroup-item\">' + '<label class=\"k-label k-listgroup-form-row\">' + '<span class=\"k-item-title k-listgroup-form-field-label\">#:messages.month#</span>' + '<div class=\"k-listgroup-form-field-wrapper\"><select class=\"k-recur-month\" title=\"#:messages.month#\"></select></div>' + '</label>' + '</li>' + '</ul>' + '# } #');\n        var RECURRENCE_END_PATTERN_TEMPLATE = kendo.template('# if (endPattern === \"count\") { #' + '<label class=\"k-label k-listgroup-form-row\">' + '<span class=\"k-item-title k-listgroup-form-field-label\">#:messages.after#</span>' + '<div class=\"k-listgroup-form-field-wrapper\"><input class=\"k-recur-count\" aria-label=\"#:messages.occurrence#\" type=\"number\" pattern=\"\\\\\\\\d*\" /></div>' + '</label>' + '# } else if (endPattern === \"until\") { #' + '<label class=\"k-label k-listgroup-form-row\">' + '<span class=\"k-item-title k-listgroup-form-field-label\">#:messages.on#</span>' + '<div class=\"k-listgroup-form-field-wrapper\"><input type=\"date\" class=\"k-recur-until\" aria-label=\"#:messages.on#\" name=\"recur-until\"/></div>' + '</label>' + '# } #');\n        var RECURRENCE_GROUP_BUTTON_TEMPLATE = kendo.template('<select class=\"k-scheduler-select\">' + '#for (var i = 0, length = dataSource.length; i < length; i++) {#' + '<option value=\"#=dataSource[i].value#\" #= value === dataSource[i].value  ? \\\"selected\\\" : \\\"\\\" #>#:dataSource[i].text#</option>' + '#}#' + '</select>');\n        var MobileRecurrenceEditor = BaseRecurrenceEditor.extend({\n          init: function (element, options) {\n            var that = this;\n            BaseRecurrenceEditor.fn.init.call(that, element, options);\n            options = that.options;\n            that._optionTemplate = kendo.template('<option value=\"#:value#\">#:text#</option>');\n            that.value(options.value);\n            that._pane = options.pane || that.wrapper.closest(\"[data-role=pane]\").data(\"kendoPane\");\n\n            that._initRepeatButton();\n\n            that._initParentRepeatEnd();\n\n            that._defaultValue = that._value;\n          },\n          options: {\n            name: \"MobileRecurrenceEditor\",\n            animations: {\n              left: \"slide\",\n              right: \"slide:right\"\n            },\n            mobile: true,\n            messages: {\n              cancel: \"Cancel\",\n              update: \"Save\",\n              endTitle: \"Repeat ends\",\n              repeatTitle: \"Repeat pattern\",\n              headerTitle: \"Repeat event\",\n              end: {\n                patterns: {\n                  never: \"Never\",\n                  after: \"After...\",\n                  on: \"On...\"\n                },\n                never: \"Never\",\n                after: \"End repeat after\",\n                on: \"End repeat on\"\n              },\n              daily: {\n                interval: \"\"\n              },\n              hourly: {\n                interval: \"\"\n              },\n              weekly: {\n                interval: \"\"\n              },\n              monthly: {\n                interval: \"\",\n                repeatBy: \"Repeat by: \",\n                dayOfMonth: \"Day of the month\",\n                dayOfWeek: \"Day of the week\",\n                repeatEvery: \"Repeat every\",\n                every: \"Every\",\n                day: \"Day \"\n              },\n              yearly: {\n                interval: \"\",\n                repeatBy: \"Repeat by: \",\n                dayOfMonth: \"Day of the month\",\n                dayOfWeek: \"Day of the week\",\n                repeatEvery: \"Repeat every: \",\n                every: \"Every\",\n                month: \"Month\",\n                day: \"Day\"\n              }\n            }\n          },\n          events: [\"change\"],\n          value: function (value) {\n            var that = this;\n            var timezone = that.options.timezone;\n\n            if (value === undefined) {\n              if (!that._value.freq) {\n                return \"\";\n              }\n\n              return serialize(that._value, timezone);\n            }\n\n            that._value = parseRule(value, timezone) || {};\n          },\n          destroy: function () {\n            this._destroyView();\n\n            kendo.destroy(this._endFields);\n\n            if (this._weekDayButtonGroup) {\n              this._weekDayButtonGroup.destroy();\n            }\n\n            this.element.off(CLICK + this._namespace);\n            BaseRecurrenceEditor.fn.destroy.call(this);\n          },\n          _initInterval: function () {\n            var that = this;\n            var rule = that._value;\n\n            that._container.find(\".k-recur-interval\").val(that._value.interval || 1).on(CHANGE + that._namespace, function (e) {\n              rule.interval = e.target.value;\n\n              that._trigger();\n            });\n          },\n          _initRepeatButton: function () {\n            var that = this;\n            var freq = that.options.messages.frequencies[this._value.freq || \"never\"];\n            that._chevronButton = $('<span class=\"k-icon k-i-arrow-chevron-right\"></span>');\n            that._repeatValue = $('<span class=\"\">' + freq + '</span>');\n            that.element.append(that._repeatValue).append(that._chevronButton);\n            that.element.parents(\"li.k-item\").on(CLICK + that._namespace, function (e) {\n              e.preventDefault();\n\n              that._createView(\"repeat\");\n\n              that._pane.navigate(that._view, that.options.animations.left);\n            });\n          },\n          _endLiItem: function () {\n            var that = this;\n            return '<li class=\"k-item k-listgroup-item\"><label class=\"k-label k-listgroup-form-row\"><span class=\"k-item-title k-listgroup-form-field-label\">' + that.options.messages.end.mobileLabel + '</span></label></li>';\n          },\n          _initParentRepeatEnd: function () {\n            var that = this;\n            var endLabelField = $(that._endLiItem()).insertAfter(that.element.parents(\"li.k-item\"));\n            var endEditField = $('<div class=\"k-scheduler-recur-end-wrap k-listgroup-form-field-wrapper\"><span class=\"k-scheduler-recur-end\"></span></div>').appendTo(endLabelField.find(\".k-label\"));\n            endLabelField.on(CLICK + that._namespace, function (e) {\n              e.preventDefault();\n\n              that._navigateToView(\"repeat\");\n            });\n            that._endParentLabelField = endLabelField.toggle(!!that._value.freq);\n            that._endParentEndButton = endEditField.find(\".k-scheduler-recur-end\").text(that._endText());\n          },\n          _initRepeatEnd: function () {\n            var that = this;\n            var endLabelField = $(that._endLiItem()).insertAfter(that._container);\n            var endEditField = $('<div class=\"k-scheduler-recur-end-wrap k-listgroup-form-field-wrapper\"><span class=\"k-scheduler-recur-end\"></span><span class=\"k-icon k-i-arrow-chevron-right\"></span></div>').appendTo(endLabelField.find(\".k-label\"));\n            endLabelField.on(CLICK + that._namespace, function (e) {\n              e.preventDefault();\n\n              that._navigateToView(\"end\");\n            });\n            that._endLabelField = endLabelField.toggleClass(\"k-state-disabled\", !that._value.freq);\n            that._endButton = endEditField.find(\".k-scheduler-recur-end\").text(that._endText());\n          },\n          _navigateToView: function (viewName) {\n            var that = this;\n\n            that._createView(viewName);\n\n            that._pane.navigate(that._view, that.options.animations.left);\n          },\n          _endText: function () {\n            var rule = this._value;\n            var messages = this.options.messages.end;\n            var text = messages.never;\n\n            if (rule.count) {\n              text = kendo.format(\"{0} {1}\", messages.after, rule.count);\n            } else if (rule.until) {\n              text = kendo.format(\"{0} {1:d}\", messages.on, rule.until);\n            }\n\n            return text;\n          },\n          _initFrequency: function () {\n            var that = this;\n            var frequencyMessages = that.options.messages.frequencies;\n            var html = RECURRENCE_GROUP_BUTTON_TEMPLATE({\n              dataSource: $.map(this.options.frequencies, function (frequency) {\n                return {\n                  text: frequencyMessages[frequency],\n                  value: frequency !== \"never\" ? frequency : \"\"\n                };\n              }),\n              value: that._value.freq || \"\",\n              ns: kendo.ns\n            });\n\n            that._view.element.find(\".k-recur-pattern\").append(html);\n\n            that._view.element.find(\".k-scheduler-select\").on(CHANGE + that._namespace, function (e) {\n              var value = e.target.value;\n              that._value = {\n                freq: value\n              };\n              that._defaultValue = $.extend({}, that._value);\n\n              that._initRepeatView();\n\n              that._endButton.text(that._endText());\n\n              that._endParentEndButton.text(that._endText());\n            });\n          },\n          _initEndNavigation: function () {\n            var that = this;\n            var endMessages = that.options.messages.end.patterns;\n            var rule = that._value;\n            var value = \"\";\n\n            if (rule.count) {\n              value = \"count\";\n            } else if (rule.until) {\n              value = \"until\";\n            }\n\n            var html = RECURRENCE_GROUP_BUTTON_TEMPLATE({\n              dataSource: [{\n                text: endMessages.never,\n                value: \"\"\n              }, {\n                text: endMessages.after,\n                value: \"count\"\n              }, {\n                text: endMessages.on,\n                value: \"until\"\n              }],\n              value: value,\n              ns: kendo.ns\n            });\n\n            that._view.element.find(\".k-recur-pattern\").append(html);\n\n            that._view.element.find(\".k-scheduler-select\").on(CHANGE + that._namespace, function (e) {\n              var value = e.target.value;\n              var count = null;\n              var until = null;\n\n              that._initEndView(value);\n\n              if (that._count.length) {\n                count = that._count.val();\n                until = null;\n              } else if (that._until.length) {\n                count = null;\n                until = that._until.val ? kendo.parseDate(that._until.val(), \"yyyy-MM-dd\") : that._until.value();\n              }\n\n              rule.count = count;\n              rule.until = until;\n            });\n          },\n          _createView: function (viewType) {\n            var that = this;\n            var options = that.options;\n            var messages = options.messages;\n            var headerTitle = messages[viewType === \"repeat\" ? \"repeatTitle\" : \"endTitle\"];\n            var html = '<div data-role=\"view\" class=\"k-popup-edit-form k-scheduler-edit-form\" id=\"recurrence\">' + '<div data-role=\"header\" class=\"k-header\">' + '<a href=\"#\" class=\"k-header-cancel k-scheduler-cancel k-link\" title=\"' + messages.cancel + '\"' + 'aria-label=\"' + messages.cancel + '\"><span class=\"k-icon k-i-arrow-chevron-left\"></span></a>' + messages.headerTitle + '<a href=\"#\" class=\"k-header-done k-scheduler-update k-link\" title=\"' + messages.update + '\" ' + 'aria-label=\"' + messages.update + '\"><span class=\"k-icon k-i-check\"></span></a>' + '</div>';\n\n            var returnViewId = that._pane.view().id;\n\n            that._view = that._pane.append(html + RECURRENCE_HEADER_TEMPLATE({\n              headerTitle: headerTitle\n            }));\n\n            that._view.element.on(CLICK + that._namespace, \"a.k-scheduler-cancel, a.k-scheduler-update\", function (e) {\n              e.preventDefault();\n              e.stopPropagation();\n\n              if ($(this).hasClass(\"k-scheduler-update\")) {\n                that.trigger(\"change\");\n                that._defaultValue = $.extend({}, that._value);\n              } else {\n                that._value = that._defaultValue;\n              }\n\n              var frequency = that._value.freq;\n\n              that._endParentEndButton.text(that._endText());\n\n              that._endParentLabelField.toggle(!!frequency && frequency !== \"never\");\n\n              that._endButton.text(that._endText());\n\n              that._repeatValue.text(messages.frequencies[frequency || \"never\"]);\n\n              that._pane.one(\"viewShow\", function () {\n                that._destroyView();\n              });\n\n              that._pane.navigate(returnViewId, that.options.animations.right);\n            });\n\n            that._container = that._view.element.find(\".k-recur-view\");\n\n            if (viewType === \"repeat\") {\n              that._initFrequency();\n\n              that._initRepeatView();\n\n              that._initRepeatEnd();\n            } else {\n              that._initEndNavigation();\n\n              that._initEndView();\n            }\n          },\n          _destroyView: function () {\n            if (this._view) {\n              this._view.destroy();\n\n              this._view.element.remove();\n\n              this._container = null;\n            }\n\n            this._view = null;\n          },\n          _initRepeatView: function () {\n            var that = this;\n            var frequency = that._value.freq || \"never\";\n            var data = {\n              frequency: frequency,\n              firstWeekDay: that.options.firstWeekDay,\n              messages: that.options.messages[frequency]\n            };\n            var html = RECURRENCE_REPEAT_PATTERN_TEMPLATE(data);\n\n            var container = that._container = that._container || this._pane.view().content.find(\"li.k-recur-view\");\n\n            var rule = that._value;\n\n            if (that._endLabelField) {\n              that._endLabelField.toggleClass(\"k-state-disabled\", frequency === \"never\");\n            }\n\n            kendo.destroy(container);\n            container.html(html);\n\n            if (!html) {\n              that._value = {};\n              container.hide();\n              return;\n            } else {\n              container.show();\n            }\n\n            if (frequency === \"weekly\" && !rule.weekDays) {\n              rule.weekDays = [{\n                day: that.options.start.getDay(),\n                offset: 0\n              }];\n            }\n\n            that._weekDayButtons(that.options.firstWeekDay);\n\n            that._initInterval();\n\n            that._initMonthDay();\n\n            that._initWeekDays();\n\n            that._initWeekDay();\n\n            that._initMonth();\n\n            that._period();\n          },\n          _initMonthDay: function () {\n            var that = this;\n            var rule = that._value;\n\n            var monthDayInput = that._monthDay = that._container.find(\".k-recur-monthday\");\n\n            monthDayInput.attr({\n              min: 1,\n              max: 31\n            }).val(rule.monthDays ? rule.monthDays[0] : that.options.start.getDate()).on(CHANGE + that._namespace, function (e) {\n              rule.count = e.target.value;\n\n              that._trigger();\n            });\n          },\n          _initCount: function () {\n            var that = this,\n                input = that._count = that._container.find(\".k-recur-count\"),\n                rule = that._value;\n\n            input.val(rule.count || 1).on(CHANGE + that._namespace, function (ev) {\n              rule.count = ev.target.value;\n\n              that._trigger();\n            });\n          },\n          _initEndView: function (endPattern) {\n            var that = this;\n            var rule = that._value;\n\n            if (endPattern === undefined) {\n              if (rule.count) {\n                endPattern = \"count\";\n              } else if (rule.until) {\n                endPattern = \"until\";\n              }\n            }\n\n            var data = {\n              endPattern: endPattern,\n              messages: that.options.messages.end\n            };\n            kendo.destroy(that._container);\n\n            that._container.html(RECURRENCE_END_PATTERN_TEMPLATE(data));\n\n            that._initCount();\n\n            that._initUntil();\n          },\n          _initWeekDay: function () {\n            var that = this,\n                data;\n            var weekdayMessage = that.options.messages.weekdays;\n            var offsetMessage = that.options.messages.offsetPositions;\n\n            var weekDaySelect = that._container.find(\".k-recur-weekday\");\n\n            var change = function () {\n              that._weekDayRule();\n\n              that.trigger(\"change\");\n            };\n\n            if (weekDaySelect[0]) {\n              that._weekDayOffset = that._container.find(\".k-recur-weekday-offset\").html(that._options([{\n                text: offsetMessage.first,\n                value: \"1\"\n              }, {\n                text: offsetMessage.second,\n                value: \"2\"\n              }, {\n                text: offsetMessage.third,\n                value: \"3\"\n              }, {\n                text: offsetMessage.fourth,\n                value: \"4\"\n              }, {\n                text: offsetMessage.last,\n                value: \"-1\"\n              }])).on(\"change\", change);\n              data = [{\n                text: weekdayMessage.day,\n                value: \"day\"\n              }, {\n                text: weekdayMessage.weekday,\n                value: \"weekday\"\n              }, {\n                text: weekdayMessage.weekend,\n                value: \"weekend\"\n              }];\n              data = data.concat($.map(kendo.culture().calendar.days.names, function (dayName, idx) {\n                return {\n                  text: dayName,\n                  value: idx\n                };\n              }));\n              that._weekDay = weekDaySelect.html(that._options(data)).on(\"change\", change).val(that.options.start.getDay());\n\n              that._weekDayView();\n            }\n          },\n          _initMonth: function () {\n            var that = this;\n            var rule = that._value;\n            var start = that.options.start;\n            var month = rule.months || [start.getMonth() + 1];\n\n            var monthSelect = that._container.find(\".k-recur-month\");\n\n            var monthNames = kendo.culture().calendar.months.names;\n\n            if (monthSelect[0]) {\n              var data = $.map(monthNames, function (monthName, idx) {\n                return {\n                  text: monthName,\n                  value: idx + 1\n                };\n              });\n              monthSelect.html(that._options(data)).on(\"change\", function () {\n                rule.months = [Number(this.value)];\n              });\n              that._monthSelect = monthSelect;\n\n              if (month) {\n                monthSelect.val(month[0]);\n              }\n            }\n          },\n          _period: function () {\n            var that = this;\n            var rule = that._value;\n            var container = that._container;\n            var messages = that.options.messages[rule.freq];\n            var repeatRuleGroupButton = container.find(\".k-repeat-rule\");\n            var weekDayView = container.find(\".k-weekday-view\");\n            var monthDayView = container.find(\".k-monthday-view\");\n\n            if (repeatRuleGroupButton[0]) {\n              var currentValue = rule.weekDays ? \"weekday\" : \"monthday\";\n              var html = RECURRENCE_GROUP_BUTTON_TEMPLATE({\n                value: currentValue,\n                dataSource: [{\n                  text: messages.dayOfMonth,\n                  value: \"monthday\"\n                }, {\n                  text: messages.dayOfWeek,\n                  value: \"weekday\"\n                }],\n                ns: kendo.ns\n              });\n\n              var init = function (val) {\n                var weekDayName = that._weekDay.val();\n\n                var weekDayOffset = that._weekDayOffset.val();\n\n                var monthDay = that._monthDay.val();\n\n                var month = that._monthSelect ? that._monthSelect.val() : null;\n\n                if (val === \"monthday\") {\n                  rule.weekDays = null;\n                  rule.monthDays = monthDay ? [monthDay] : monthDay;\n                  rule.months = month ? [Number(month)] : month;\n                  weekDayView.hide();\n                  monthDayView.show();\n                } else {\n                  rule.monthDays = null;\n                  rule.months = month ? [Number(month)] : month;\n                  rule.weekDays = [{\n                    offset: Number(weekDayOffset),\n                    day: Number(weekDayName)\n                  }];\n                  weekDayView.show();\n                  monthDayView.hide();\n                }\n              };\n\n              repeatRuleGroupButton.append(html);\n              repeatRuleGroupButton.find(\".k-scheduler-select\").on(CHANGE + that._namespace, function (e) {\n                init(e.target.value);\n              });\n              init(currentValue);\n            }\n          },\n          _initUntil: function () {\n            var that = this;\n\n            var input = that._container.find(\".k-recur-until\");\n\n            var start = that.options.start;\n            var rule = that._value;\n            var until = rule.until;\n            var min = until && until < start ? until : start;\n            var validDateValidationMessage = kendo.format(kendo.ui.Validator.prototype.options.messages.date, that.options.messages.end.on);\n            var dateCompareValidationMessage = kendo.ui.Validator.prototype.options.messages.dateCompare;\n            input.attr(\"data-validDate-msg\", validDateValidationMessage);\n            input.attr(\"data-untilDateCompare-msg\", dateCompareValidationMessage);\n\n            if (kendo.support.input.date) {\n              that._until = input.attr(\"min\", kendo.toString(min, \"yyyy-MM-dd\")).val(kendo.toString(until || start, \"yyyy-MM-dd\")).on(\"change\", function () {\n                var date = kendo.parseDate(this.value, \"yyyy-MM-dd\");\n\n                if (date) {\n                  rule.until = date;\n                }\n\n                that._trigger();\n              });\n            } else {\n              that._until = input.kendoDatePicker({\n                min: min,\n                value: until || start,\n                change: function () {\n                  var date = this.value();\n\n                  if (date) {\n                    rule.until = date;\n                  }\n\n                  that._trigger();\n                }\n              }).data(\"kendoDatePicker\");\n            }\n          },\n          _options: function (data, optionLabel) {\n            var idx = 0;\n            var html = \"\";\n            var length = data.length;\n            var template = this._optionTemplate;\n\n            if (optionLabel) {\n              html += template({\n                value: \"\",\n                text: optionLabel\n              });\n            }\n\n            for (; idx < length; idx++) {\n              html += template(data[idx]);\n            }\n\n            return html;\n          }\n        });\n        ui.plugin(MobileRecurrenceEditor);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}