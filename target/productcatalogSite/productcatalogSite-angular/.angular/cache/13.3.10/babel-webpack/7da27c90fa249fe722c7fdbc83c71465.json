{"ast":null,"code":"import RadialGauge from '../radial/radial-gauge';\nimport ArcScale from './arc-scale';\nimport RangePointer from './range-pointer';\nimport { deepExtend } from '../../common';\n\nclass ArcGauge extends RadialGauge {\n  _initTheme(theme) {\n    super._initTheme(theme);\n\n    this.options.color = this.options.color || (this.theme.pointer || {}).color;\n  }\n\n  _createModel() {\n    const options = this.options;\n    const scale = this.scale = new ArcScale(options.scale, this.contextService);\n    const pointer = new RangePointer(scale, deepExtend({}, {\n      colors: options.colors,\n      color: options.color,\n      value: options.value,\n      opacity: options.opacity,\n      animation: {\n        transitions: options.transitions\n      }\n    }));\n    this.pointers = [pointer];\n  }\n\n  _buildPointers(pointers) {\n    for (let i = 0; i < pointers.length; i++) {\n      const current = pointers[i];\n      current.render();\n      current.value(current.options.value);\n    }\n  }\n\n  _setValueOptions(value) {\n    this.options.value = value;\n  }\n\n  currentColor() {\n    const pointer = this.pointers[0];\n\n    if (pointer) {\n      return pointer.currentColor();\n    }\n  }\n\n  centerLabelPosition(width, height) {\n    const size = this.getSize();\n    const center = this.scale.arc.center;\n    let left = center.x - width / 2;\n    let top = center.y - height / 2;\n\n    if (width < size.width) {\n      const right = left + width;\n      left = Math.max(left, 0);\n\n      if (right > size.width) {\n        left -= right - size.width;\n      }\n    }\n\n    if (height < size.height) {\n      const bbox = this.scale.bbox;\n      const yLimit = bbox.bottomRight().y;\n      const bottom = top + height;\n      top = Math.max(top, bbox.origin.y);\n\n      if (bottom > yLimit) {\n        top -= bottom - yLimit;\n      }\n    }\n\n    return {\n      left: left,\n      top: top\n    };\n  }\n\n}\n\nexport default ArcGauge;","map":null,"metadata":{},"sourceType":"module"}