{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1259);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1051:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.core\");\n    /***/\n  },\n\n  /***/\n  1259:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1051)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"expansionpanel\",\n        name: \"ExpansionPanel\",\n        category: \"web\",\n        description: \"The ExpansionPanel provides an expandable details-summary view\",\n        depends: [\"core\"]\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n            ui = kendo.ui,\n            keys = kendo.keys,\n            extend = $.extend,\n            NS = \".kendoExpansionPanel\",\n            EXPAND = \"expand\",\n            COLLAPSE = \"collapse\",\n            COMPLETE = \"complete\",\n            STATEDISABLED = \"k-state-disabled\",\n            ARIA_DISABLED = \"aria-disabled\",\n            ARIA_EXPANDED = \"aria-expanded\",\n            ARIA_HIDDEN = \"aria-hidden\",\n            EXPANDED = \"k-expanded\",\n            EXPANDER_CONTENT = \"k-expander-content\",\n            EXPANDER_CONTENT_WRAPPER = \"k-expander-content-wrapper\",\n            INDICATOR = \".k-expander-indicator\",\n            FOCUSED = \"k-state-focus\",\n            CLICK = \"click\",\n            KEYDOWN = \"keydown\",\n            HEIGHT = \"height\",\n            headerTemplate = '<div #if(!useBareTemplate){# class=\"k-expander-header\" #}#  data-#=ns#expander-header role=\"button\" tabindex=\"0\" aria-controls=\"#: elementId #\">' + '#if(!useBareTemplate){#' + '<div class=\"k-expander-title\">#:title#</div>' + '#} else {#' + '#=title#' + '#}#' + '<span class=\"k-expander-spacer\"></span>' + '#if(!useBareTemplate){#' + '<div class=\"k-expander-sub-title\">#:subTitle#</div>' + '#}#' + '<span class=\"k-expander-indicator #:iconClass#\"></span>' + '</div>';\n        var ExpansionPanel = Widget.extend({\n          init: function (element, options) {\n            var that = this;\n            var headerAttribute = kendo.attr(\"expander-header\");\n            Widget.fn.init.call(that, element, options);\n            options = $.extend(true, {}, options);\n\n            that._wrapper();\n\n            that._animations(options);\n\n            that.element.attr(ARIA_HIDDEN, !options.expanded);\n\n            if (!that.options.useBareTemplate) {\n              that.element.addClass(EXPANDER_CONTENT);\n            }\n\n            that.wrapper.on(CLICK + NS, '[' + headerAttribute + ']', that._click.bind(that)).on(\"focusin\" + NS, that._focus.bind(that)).on(\"focusout\" + NS, that._blur.bind(that)).on(KEYDOWN + NS, that._keydown.bind(that));\n            that.toggle(that.options.expanded, false);\n            kendo.notify(that);\n          },\n          events: [EXPAND, COLLAPSE, COMPLETE],\n          options: {\n            name: 'ExpansionPanel',\n            disabled: false,\n            expanded: false,\n            animation: {\n              expand: {\n                effects: \"expand:vertical\",\n                duration: 200\n              },\n              collapse: {\n                // if collapse animation effects are defined, they will be used instead of expand.reverse\n                duration: 200\n              }\n            },\n            height: null,\n            toggleable: true,\n            expandIconClass: \"k-icon k-i-arrow-chevron-down\",\n            collapseIconClass: \"k-icon k-i-arrow-chevron-up\",\n            title: '',\n            subTitle: '',\n            headerClass: null,\n            useBareTemplate: false\n          },\n          _wrapper: function () {\n            var that = this;\n            var element = that.element;\n            var DOMElement = element[0];\n            var wrapper;\n            var header;\n            var elementId = element.attr(\"id\");\n\n            if (!elementId) {\n              elementId = kendo.guid();\n              element.attr(\"id\", elementId);\n            }\n\n            wrapper = element.wrap(\"<div class='k-widget k-expander\" + (that.options.expanded ? \" \" + EXPANDED : \"\") + \"'></div>\").parent();\n            header = kendo.template(headerTemplate)({\n              title: that.options.title,\n              subTitle: that.options.subTitle,\n              iconClass: that.options.expanded ? that.options.expandIconClass : that.options.collapseIconClass,\n              useBareTemplate: that.options.useBareTemplate,\n              ns: kendo.ns,\n              elementId: elementId\n            });\n            that.header = $(header);\n            wrapper.prepend(that.header);\n            that._indicator = wrapper.find(INDICATOR);\n            wrapper[0].style.cssText = DOMElement.style.cssText;\n            DOMElement.style.width = \"100%\";\n            that.wrapper = wrapper.addClass(that.options.disabled ? STATEDISABLED : '');\n            that.contentWrapper = that.element.wrap('<div></div>').parent().addClass(EXPANDER_CONTENT_WRAPPER);\n            that.header.attr(ARIA_DISABLED, that.options.disabled).attr(ARIA_EXPANDED, that.options.expanded);\n\n            if (!that.options.useBareTemplate) {\n              wrapper.addClass(DOMElement.className);\n            }\n\n            if (that.options.height) {\n              that.wrapper.css(HEIGHT, that.options.height);\n            }\n\n            if (that.options.headerClass) {\n              that.header.addClass(that.options.headerClass);\n            }\n          },\n          _animations: function (options) {\n            if (options && \"animation\" in options && !options.animation) {\n              options.animation = {\n                expand: {\n                  effects: {}\n                },\n                collapse: {\n                  hide: true,\n                  effects: {}\n                }\n              };\n            }\n          },\n          _click: function (e) {\n            var that = this;\n\n            var expanded = that._indicator.hasClass(that.options.collapseIconClass);\n\n            var element = that.element;\n            e.stopPropagation();\n\n            if (!that.options.toggleable) {\n              e.preventDefault();\n              return;\n            }\n\n            if (!that.trigger(expanded ? COLLAPSE : EXPAND, {\n              item: element[0]\n            })) {\n              that.toggle();\n            }\n          },\n          toggle: function (expand, animate) {\n            var that = this,\n                animationSettings = that.options.animation,\n                animation = animationSettings.expand,\n                hasCollapseAnimation = animationSettings.collapse && \"effects\" in animationSettings.collapse,\n                collapse = extend({}, animationSettings.expand, animationSettings.collapse),\n                element = that.element,\n                wrapper = that.wrapper;\n\n            if (expand !== undefined) {\n              if (animate === false) {\n                collapse = null;\n              }\n            } else {\n              expand = !that._indicator.hasClass(that.options.collapseIconClass);\n            }\n\n            if (!hasCollapseAnimation) {\n              collapse = extend(collapse, {\n                reverse: true\n              });\n            }\n\n            if (!expand) {\n              animation = extend(collapse, {\n                hide: true\n              });\n              animation.complete = that._completeHandler.bind(that);\n            } else {\n              animation = extend({\n                complete: that._completeHandler.bind(that)\n              }, animation);\n            }\n\n            if (expand) {\n              that._indicator.removeClass(this.options.expandIconClass);\n\n              that._indicator.addClass(this.options.collapseIconClass);\n\n              wrapper.addClass(EXPANDED);\n            } else {\n              that._indicator.removeClass(this.options.collapseIconClass);\n\n              that._indicator.addClass(this.options.expandIconClass);\n\n              wrapper.removeClass(EXPANDED);\n            }\n\n            element.attr(ARIA_HIDDEN, !expand);\n            that.header.attr(ARIA_EXPANDED, expand);\n            that.contentWrapper.kendoStop(true, true).kendoAnimate(animation);\n          },\n          _completeHandler: function () {\n            this.trigger(COMPLETE);\n          },\n          _keydown: function (e) {\n            var that = this,\n                key = e.keyCode;\n\n            if ((key == keys.ENTER || key == keys.SPACEBAR) && $(e.target).is(\"[data-expander-header]\")) {\n              that._click(e);\n\n              e.preventDefault();\n            }\n          },\n          destroy: function () {\n            var that = this;\n            that.wrapper.off(NS);\n            Widget.fn.destroy.call(that);\n          },\n          enable: function (enabled) {\n            this.wrapper.toggleClass(STATEDISABLED, !enabled);\n            this.header.attr(ARIA_DISABLED, !enabled);\n          },\n          _blur: function () {\n            var that = this;\n\n            if (that.header) {\n              that.wrapper.removeClass(FOCUSED);\n            }\n          },\n          _focus: function () {\n            var that = this;\n\n            if (that.wrapper) {\n              that.wrapper.addClass(FOCUSED);\n            }\n          }\n        });\n        ui.plugin(ExpansionPanel);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}