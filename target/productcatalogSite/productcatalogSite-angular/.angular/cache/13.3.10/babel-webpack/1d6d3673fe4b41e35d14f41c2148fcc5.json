{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1091);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1051:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.core\");\n    /***/\n  },\n\n  /***/\n  1091:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1051), __webpack_require__(1092)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"calendar\",\n        name: \"Calendar\",\n        category: \"web\",\n        description: \"The Calendar widget renders a graphical calendar that supports navigation and selection.\",\n        depends: [\"core\", \"selectable\"]\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            support = kendo.support,\n            ui = kendo.ui,\n            Widget = ui.Widget,\n            keys = kendo.keys,\n            parse = kendo.parseDate,\n            adjustDST = kendo.date.adjustDST,\n            weekInYear = kendo.date.weekInYear,\n            Selectable = kendo.ui.Selectable,\n            extractFormat = kendo._extractFormat,\n            template = kendo.template,\n            getCulture = kendo.getCulture,\n            transitions = kendo.support.transitions,\n            transitionOrigin = transitions ? transitions.css + \"transform-origin\" : \"\",\n            cellTemplate = template('<td class=\"#=data.cssClass#\" role=\"gridcell\"><a tabindex=\"-1\" class=\"k-link\" href=\"\\\\#\" data-#=data.ns#value=\"#=data.dateString#\">#=data.value#</a></td>', {\n          useWithBlock: false\n        }),\n            emptyCellTemplate = template('<td role=\"gridcell\" class=\"k-calendar-td k-out-of-range\"><a class=\"k-link\"></a></td>', {\n          useWithBlock: false\n        }),\n            otherMonthCellTemplate = template('<td role=\"gridcell\" class=\"k-calendar-td k-out-of-range\">&nbsp;</td>', {\n          useWithBlock: false\n        }),\n            weekNumberTemplate = template('<td class=\"k-calendar-td k-alt\">#= data.weekNumber #</td>', {\n          useWithBlock: false\n        }),\n            outerWidth = kendo._outerWidth,\n            ns = \".kendoCalendar\",\n            CLICK = \"click\" + ns,\n            KEYDOWN_NS = \"keydown\" + ns,\n            ID = \"id\",\n            MIN = \"min\",\n            LEFT = \"left\",\n            SLIDE = \"slideIn\",\n            MONTH = \"month\",\n            CENTURY = \"century\",\n            CHANGE = \"change\",\n            NAVIGATE = \"navigate\",\n            VALUE = \"value\",\n            HOVER = \"k-state-hover\",\n            DISABLED = \"k-state-disabled\",\n            FOCUSED = \"k-state-focused\",\n            OTHERMONTH = \"k-other-month\",\n            OUTOFRANGE = \"k-out-of-range\",\n            TODAY = \"k-nav-today\",\n            CELLSELECTOR = \"td:has(.k-link)\",\n            CELLSELECTORVALID = \"td:has(.k-link):not(.\" + DISABLED + \"):not(.\" + OUTOFRANGE + \")\",\n            WEEKCOLUMNSELECTOR = \"td:not(:has(.k-link))\",\n            SELECTED = \"k-state-selected\",\n            BLUR = \"blur\" + ns,\n            FOCUS = \"focus\",\n            FOCUS_WITH_NS = FOCUS + ns,\n            MOUSEENTER = support.touch ? \"touchstart\" : \"mouseenter\",\n            MOUSEENTER_WITH_NS = support.touch ? \"touchstart\" + ns : \"mouseenter\" + ns,\n            MOUSELEAVE = support.touch ? \"touchend\" + ns + \" touchmove\" + ns : \"mouseleave\" + ns,\n            MS_PER_MINUTE = 60000,\n            MS_PER_DAY = 86400000,\n            PREVARROW = \"_prevArrow\",\n            NEXTARROW = \"_nextArrow\",\n            ARIA_DISABLED = \"aria-disabled\",\n            ARIA_SELECTED = \"aria-selected\",\n            ARIA_LABEL = \"aria-label\",\n            extend = $.extend,\n            DATE = Date,\n            views = {\n          month: 0,\n          year: 1,\n          decade: 2,\n          century: 3\n        },\n            HEADERSELECTOR = '.k-header, .k-calendar-header',\n            CLASSIC_HEADER_TEMPLATE = '<div class=\"k-header k-hstack\">' + '<a href=\"\\\\#\" #=actionAttr#=\"prev\" role=\"button\" class=\"k-nav-prev k-button #=size# k-rounded-md k-button-flat k-button-flat-base k-icon-button\" ' + ARIA_LABEL + '=\"Previous\"><span class=\"k-button-icon k-icon k-i-arrow-60-left\"></span></a>' + '<a href=\"\\\\#\" #=actionAttr#=\"nav-up\" role=\"button\" aria-live=\"assertive\" aria-atomic=\"true\" class=\"k-nav-fast k-button #=size# k-rounded-md k-button-flat k-button-flat-base  k-flex\"></a>' + '<a href=\"\\\\#\" #=actionAttr#=\"next\" role=\"button\" class=\"k-nav-next k-button #=size# k-rounded-md k-button-flat k-button-flat-base  k-icon-button\" ' + ARIA_LABEL + '=\"Next\"><span class=\"k-icon k-i-arrow-60-right\"></span></a>' + '</div>',\n            MODERN_HEADER_TEMPLATE = '<div class=\"k-calendar-header k-hstack\">' + '<a href=\"\\\\#\" #=actionAttr#=\"nav-up\" role=\"button\" aria-live=\"assertive\" aria-atomic=\"true\" class=\"k-calendar-title k-title k-button #=size# k-rounded-md k-button-flat k-button-flat-base \"></a>' + '<span class=\"k-spacer\"></span>' + '<span class=\"k-calendar-nav k-hstack\">' + '<a #=actionAttr#=\"prev\" class=\"k-button #=size# k-rounded-md k-button-flat k-button-flat-base  k-icon-button k-prev-view\">' + '<span class=\"k-button-icon k-icon k-i-arrow-60-left\"></span>' + '</a>' + '<a #=actionAttr#=\"today\" class=\"k-nav-today\">#=messages.today#</a>' + '<a #=actionAttr#=\"next\" class=\"k-button #=size# k-rounded-md k-button-flat k-button-flat-base  k-icon-button k-next-view\">' + '<span class=\"k-button-icon k-icon k-i-arrow-60-right\"></span>' + '</a>' + '</span>' + '</div>';\n        var Calendar = Widget.extend({\n          init: function (element, options) {\n            var that = this,\n                value,\n                id;\n            options = options || {};\n            options.componentType = options.componentType || \"classic\";\n            Widget.fn.init.call(that, element, options);\n            element = that.wrapper = that.element;\n            options = that.options;\n            options.url = kendo.unescape(options.url);\n            that.options.disableDates = getDisabledExpr(that.options.disableDates);\n\n            that._templates();\n\n            that._selectable();\n\n            that._header();\n\n            that._viewWrapper();\n\n            if (that.options.hasFooter) {\n              that._footer(that.footer);\n            } else {\n              that._today = that.element.find('a.k-nav-today');\n\n              that._toggle();\n            }\n\n            id = element.addClass(\"k-widget k-calendar \" + (options.weekNumber ? \" k-week-number\" : \"\")).on(MOUSEENTER_WITH_NS + \" \" + MOUSELEAVE, CELLSELECTOR, mousetoggle).on(KEYDOWN_NS, \"table.k-content\", that._move.bind(that)).on(CLICK + \" touchend\", CELLSELECTOR, function (e) {\n              var link = e.currentTarget.firstChild,\n                  value = toDateObject(link);\n\n              if (link.href.indexOf(\"#\") != -1) {\n                e.preventDefault();\n              }\n\n              if (that._view.name == \"month\" && that.options.disableDates(value)) {\n                return;\n              }\n\n              if (that._view.name != \"month\" || options.selectable == \"single\") {\n                that._click($(link));\n              }\n            }).on(\"mouseup\" + ns, \"table.k-content, .k-footer\", function () {\n              that._focusView(that.options.focusOnNav !== false);\n            }).attr(ID);\n\n            if (that._isMultipleSelection() && that.options.weekNumber) {\n              element.on(CLICK, WEEKCOLUMNSELECTOR, function (e) {\n                var first = $(e.currentTarget).closest(\"tr\").find(CELLSELECTORVALID).first(),\n                    last = that.selectable._lastActive = $(e.currentTarget).closest(\"tr\").find(CELLSELECTORVALID).last();\n                that.selectable.selectRange(first, last, {\n                  event: e\n                });\n                that._current = that._value = toDateObject(last.find(\"a\"));\n\n                that._setCurrent(that._current);\n              });\n            }\n\n            normalize(options);\n            value = parse(options.value, options.format, options.culture);\n            that._selectDates = [];\n            that._index = views[options.start];\n            that._current = new DATE(+restrictValue(value, options.min, options.max));\n\n            that._addClassProxy = function () {\n              that._active = true;\n\n              if (that._cell.hasClass(DISABLED)) {\n                var todayString = that._view.toDateString(getToday());\n\n                that._cell = that._cellByDate(todayString);\n              }\n\n              that._cell.addClass(FOCUSED);\n            };\n\n            that._removeClassProxy = function () {\n              that._active = false;\n\n              if (that._cell) {\n                that._cell.removeClass(FOCUSED);\n              }\n            };\n\n            that.value(value);\n\n            if (that._isMultipleSelection() && options.selectDates.length > 0) {\n              that.selectDates(options.selectDates);\n            }\n\n            kendo.notify(that);\n          },\n          options: {\n            name: \"Calendar\",\n            value: null,\n            min: new DATE(1900, 0, 1),\n            max: new DATE(2099, 11, 31),\n            dates: [],\n            disableDates: null,\n            url: \"\",\n            culture: \"\",\n            footer: \"\",\n            format: \"\",\n            month: {},\n            weekNumber: false,\n            selectable: \"single\",\n            selectDates: [],\n            start: MONTH,\n            depth: MONTH,\n            size: \"medium\",\n            animation: {\n              horizontal: {\n                effects: SLIDE,\n                reverse: true,\n                duration: 500,\n                divisor: 2\n              },\n              vertical: {\n                effects: \"zoomIn\",\n                duration: 400\n              }\n            },\n            messages: {\n              weekColumnHeader: \"\",\n              today: \"Today\"\n            },\n            componentType: \"classic\"\n          },\n          events: [CHANGE, NAVIGATE],\n          componentTypes: {\n            \"classic\": {\n              header: {\n                template: CLASSIC_HEADER_TEMPLATE\n              },\n              hasFooter: true,\n              linksSelector: \".k-button\",\n              contentClasses: \"k-calendar-table k-content\"\n            },\n            \"modern\": {\n              header: {\n                template: MODERN_HEADER_TEMPLATE\n              },\n              hasFooter: false,\n              linksSelector: \".k-button\",\n              contentClasses: \"k-calendar-table k-content k-calendar-content\"\n            }\n          },\n          setOptions: function (options) {\n            var that = this;\n            normalize(options);\n            options.disableDates = getDisabledExpr(options.disableDates);\n\n            that._destroySelectable();\n\n            Widget.fn.setOptions.call(that, options);\n\n            that._templates();\n\n            that._selectable();\n\n            that._viewWrapper();\n\n            if (that.options.hasFooter) {\n              that._footer(that.footer);\n            } else {\n              that.element.find(\".k-footer\").hide();\n\n              that._toggle();\n            }\n\n            that._index = views[that.options.start];\n            that.navigate();\n\n            if (options.weekNumber) {\n              that.element.addClass('k-week-number');\n            }\n          },\n          destroy: function () {\n            var that = this,\n                today = that._today;\n            that.element.off(ns);\n\n            that._title.off(ns);\n\n            that[PREVARROW].off(ns);\n            that[NEXTARROW].off(ns);\n\n            that._destroySelectable();\n\n            kendo.destroy(that._table);\n\n            if (today) {\n              kendo.destroy(today.off(ns));\n            }\n\n            Widget.fn.destroy.call(that);\n          },\n          current: function () {\n            return this._current;\n          },\n          view: function () {\n            return this._view;\n          },\n          focus: function (table) {\n            table = table || this._table;\n\n            this._bindTable(table);\n\n            table.trigger(\"focus\");\n          },\n          min: function (value) {\n            return this._option(MIN, value);\n          },\n          max: function (value) {\n            return this._option(\"max\", value);\n          },\n          navigateToPast: function () {\n            this._navigate(PREVARROW, -1);\n          },\n          navigateToFuture: function () {\n            this._navigate(NEXTARROW, 1);\n          },\n          navigateUp: function () {\n            var that = this,\n                index = that._index;\n\n            if (that._title.hasClass(DISABLED)) {\n              return;\n            }\n\n            that.navigate(that._current, ++index);\n          },\n          navigateDown: function (value) {\n            var that = this,\n                index = that._index,\n                depth = that.options.depth;\n\n            if (!value) {\n              return;\n            }\n\n            if (index === views[depth]) {\n              if (!isEqualDate(that._value, that._current) || !isEqualDate(that._value, value)) {\n                that.value(value);\n                that.trigger(CHANGE);\n              }\n\n              return;\n            }\n\n            that.navigate(value, --index);\n          },\n          navigate: function (value, view) {\n            view = isNaN(view) ? views[view] : view;\n            var that = this,\n                options = that.options,\n                culture = options.culture,\n                min = options.min,\n                max = options.max,\n                title = that._title,\n                from = that._table,\n                old = that._oldTable,\n                currentValue = that._current,\n                future = value && +value > +currentValue,\n                vertical = view !== undefined && view !== that._index,\n                to,\n                currentView,\n                compare,\n                disabled,\n                viewWrapper = that.element.children(\".k-calendar-view\");\n\n            if (!value) {\n              value = currentValue;\n            }\n\n            that._current = value = new DATE(+restrictValue(value, min, max));\n\n            if (view === undefined) {\n              view = that._index;\n            } else {\n              that._index = view;\n            }\n\n            that._view = currentView = calendar.views[view];\n            compare = currentView.compare;\n            disabled = view === views[CENTURY];\n            title.toggleClass(DISABLED, disabled).attr(ARIA_DISABLED, disabled);\n            disabled = compare(value, min) < 1;\n            that[PREVARROW].toggleClass(DISABLED, disabled).attr(ARIA_DISABLED, disabled);\n            disabled = compare(value, max) > -1;\n            that[NEXTARROW].toggleClass(DISABLED, disabled).attr(ARIA_DISABLED, disabled);\n\n            if (from && old && old.data(\"animating\")) {\n              old.kendoStop(true, true);\n              from.kendoStop(true, true);\n            }\n\n            that._oldTable = from;\n\n            if (!from || that._changeView) {\n              title.html(currentView.title(value, min, max, culture));\n              that._table = to = $(currentView.content(extend({\n                min: min,\n                max: max,\n                date: value,\n                url: options.url,\n                dates: options.dates,\n                format: options.format,\n                otherMonth: true,\n                culture: culture,\n                disableDates: options.disableDates,\n                isWeekColumnVisible: options.weekNumber,\n                messages: options.messages,\n                contentClasses: that.options.contentClasses\n              }, that[currentView.name])));\n              addClassToViewContainer(to, currentView.name);\n              var replace = from && from.data(\"start\") === to.data(\"start\");\n\n              that._animate({\n                from: from,\n                to: to,\n                vertical: vertical,\n                future: future,\n                replace: replace\n              });\n\n              viewWrapper.removeClass(\"k-calendar-monthview k-calendar-yearview k-calendar-decadeview k-calendar-centuryview\");\n              viewWrapper.addClass(\"k-calendar-\" + currentView.name + \"view\");\n              that.trigger(NAVIGATE);\n\n              that._focus(value);\n            }\n\n            if (view === views[options.depth] && that._selectDates.length > 0) {\n              that._visualizeSelectedDatesInView();\n            }\n\n            if (that.options.selectable === \"single\") {\n              if (view === views[options.depth] && that._value && !that.options.disableDates(that._value)) {\n                that._selectCell(that._value);\n              }\n            }\n\n            that._setCurrent(value);\n\n            if (!from && that._cell) {\n              that._cell.removeClass(FOCUSED);\n            }\n\n            that._changeView = true;\n          },\n          selectDates: function (dates) {\n            var that = this,\n                validSelectedDates,\n                datesUnique;\n\n            if (dates === undefined) {\n              return that._selectDates;\n            }\n\n            datesUnique = dates.map(function (date) {\n              return date.getTime();\n            }).filter(function (date, position, array) {\n              return array.indexOf(date) === position;\n            }).map(function (time) {\n              return new Date(time);\n            });\n            validSelectedDates = $.grep(datesUnique, function (value) {\n              if (value) {\n                return +that._validateValue(new Date(value.setHours(0, 0, 0, 0))) === +value;\n              }\n            });\n            that._selectDates = validSelectedDates.length > 0 ? validSelectedDates : datesUnique.length === 0 ? datesUnique : that._selectDates;\n\n            that._visualizeSelectedDatesInView();\n          },\n          value: function (value) {\n            var that = this,\n                old = that._view,\n                view = that._view;\n\n            if (value === undefined) {\n              return that._value;\n            }\n\n            value = that._validateValue(value);\n\n            if (value && that._isMultipleSelection()) {\n              var date = new Date(+value);\n              date.setHours(0, 0, 0, 0);\n              that._selectDates = [date];\n              that.selectable._lastActive = null;\n            }\n\n            if (old && value === null && that._cell) {\n              that._cell.removeClass(SELECTED);\n            } else {\n              that._changeView = !value || view && view.compare(value, that._current) !== 0;\n              that.navigate(value);\n            }\n          },\n          _validateValue: function (value) {\n            var that = this,\n                options = that.options,\n                min = options.min,\n                max = options.max;\n\n            if (value === null) {\n              that._current = createDate(that._current.getFullYear(), that._current.getMonth(), that._current.getDate());\n            }\n\n            value = parse(value, options.format, options.culture);\n\n            if (value !== null) {\n              value = new DATE(+value);\n\n              if (!isInRange(value, min, max)) {\n                value = null;\n              }\n            }\n\n            if (value === null || !that.options.disableDates(new Date(+value))) {\n              that._value = value;\n            } else if (that._value === undefined) {\n              that._value = null;\n            }\n\n            return that._value;\n          },\n          _visualizeSelectedDatesInView: function () {\n            var that = this;\n            var selectedDates = {};\n            $.each(that._selectDates, function (index, value) {\n              selectedDates[kendo.calendar.views[0].toDateString(value)] = value;\n            });\n            that.selectable.clear();\n\n            var cells = that._table.find(CELLSELECTOR).filter(function (index, element) {\n              return selectedDates[$(element.firstChild).attr(kendo.attr(VALUE))];\n            });\n\n            if (cells.length > 0) {\n              that.selectable._selectElement(cells, true);\n            }\n          },\n          _isMultipleSelection: function () {\n            var that = this;\n            return that.options.selectable === \"multiple\";\n          },\n          _selectable: function () {\n            var that = this;\n\n            if (!that._isMultipleSelection()) {\n              return;\n            }\n\n            var selectable = that.options.selectable,\n                selectableOptions = Selectable.parseOptions(selectable);\n\n            if (selectableOptions.multiple) {\n              that.element.attr(\"aria-multiselectable\", \"true\");\n            }\n\n            that.selectable = new Selectable(that.wrapper, {\n              aria: true,\n              //excludes the anchor element\n              inputSelectors: \"input,textarea,.k-multiselect-wrap,select,button,.k-button>span,.k-button>img,span.k-icon.k-i-arrow-60-down,span.k-icon.k-i-arrow-60-up\",\n              multiple: selectableOptions.multiple,\n              filter: \"table.k-month:eq(0) \" + CELLSELECTORVALID,\n              change: that._onSelect.bind(that),\n              relatedTarget: that._onRelatedTarget.bind(that)\n            });\n          },\n          _onRelatedTarget: function (target) {\n            var that = this;\n\n            if (that.selectable.options.multiple && target.is(CELLSELECTORVALID)) {\n              that._current = toDateObject(target.find(\"a\"));\n\n              that._setCurrent(that._current);\n            }\n          },\n          _onSelect: function (e) {\n            var that = this,\n                eventArgs = e,\n                selectableOptions = Selectable.parseOptions(that.options.selectable);\n\n            if (!selectableOptions.multiple) {\n              if ($(eventArgs.event.currentTarget).is(\"td\") && !$(eventArgs.event.currentTarget).hasClass(\"k-state-selected\")) {\n                $(eventArgs.event.currentTarget).addClass(\"k-state-selected\");\n              } else {\n                that._click($(eventArgs.event.currentTarget).find(\"a\"));\n              }\n\n              return;\n            }\n\n            if (eventArgs.event.ctrlKey || eventArgs.event.metaKey) {\n              if ($(eventArgs.event.currentTarget).is(CELLSELECTORVALID)) {\n                that._toggleSelection($(eventArgs.event.currentTarget));\n              } else {\n                that._cellsBySelector(CELLSELECTORVALID).each(function (index, element) {\n                  var value = toDateObject($(element).find(\"a\"));\n\n                  that._deselect(value);\n                });\n\n                that._addSelectedCellsToArray();\n              }\n            } else if (eventArgs.event.shiftKey) {\n              that._rangeSelection(that._cell);\n            } else if ($(eventArgs.event.currentTarget).is(CELLSELECTOR)) {\n              that.value(toDateObject($(eventArgs.event.currentTarget).find(\"a\")));\n            } else {\n              that._selectDates = [];\n\n              that._addSelectedCellsToArray();\n            }\n\n            that.trigger(CHANGE);\n          },\n          _destroySelectable: function () {\n            var that = this;\n\n            if (that.selectable) {\n              that.selectable.destroy();\n              that.selectable = null;\n            }\n          },\n          //when ctrl key is clicked\n          _toggleSelection: function (currentCell) {\n            var that = this,\n                date = toDateObject(currentCell.find(\"a\"));\n\n            if (currentCell.hasClass(\"k-state-selected\")) {\n              that._selectDates.push(date);\n            } else {\n              that._deselect(date);\n            }\n          },\n          //shift selection\n          _rangeSelection: function (toDateCell, startDate) {\n            var that = this,\n                fromDate = startDate || toDateObject(that.selectable.value().first().find(\"a\")),\n                toDate = toDateObject(toDateCell.find(\"a\")),\n                daysDifference;\n\n            if (that.selectable._lastActive || that._value) {\n              fromDate = that.selectable._lastActive ? toDateObject(that.selectable._lastActive.find(\"a\")) : new Date(+that._value);\n            } else {\n              that.selectable._lastActive = startDate ? that._cellByDate(that._view.toDateString(startDate), CELLSELECTORVALID) : that.selectable.value().first();\n            }\n\n            that._selectDates = [];\n            daysDifference = daysBetweenTwoDates(fromDate, toDate);\n            addDaysToArray(that._selectDates, daysDifference, fromDate, that.options.disableDates);\n\n            that._visualizeSelectedDatesInView();\n          },\n          _cellsBySelector: function (selector) {\n            var that = this;\n            return that._table.find(selector);\n          },\n          _addSelectedCellsToArray: function () {\n            var that = this;\n            that.selectable.value().each(function (index, item) {\n              var date = toDateObject($(item.firstChild));\n\n              if (!that.options.disableDates(date)) {\n                that._selectDates.push(date);\n              }\n            });\n          },\n          _deselect: function (date) {\n            var that = this;\n\n            var currentDateIndex = that._selectDates.map(Number).indexOf(+date);\n\n            if (currentDateIndex != -1) {\n              that._selectDates.splice(currentDateIndex, 1);\n            }\n          },\n          _dateInView: function (date) {\n            var that = this,\n                firstDateInView = toDateObject(that._cellsBySelector(CELLSELECTORVALID).first().find(\"a\")),\n                lastDateInView = toDateObject(that._cellsBySelector(CELLSELECTORVALID).last().find(\"a\"));\n            return +date <= +lastDateInView && +date >= +firstDateInView;\n          },\n          _isNavigatable: function (currentValue, cellIndex) {\n            var that = this;\n            var isDisabled = that.options.disableDates;\n            var cell;\n            var index;\n\n            if (that._view.name == \"month\") {\n              return !isDisabled(currentValue);\n            } else {\n              index = that.wrapper.find(\".\" + FOCUSED).index();\n              cell = that.wrapper.find(\".k-content td\").eq(index + cellIndex);\n              return cell.is(CELLSELECTORVALID) || !isDisabled(currentValue);\n            }\n          },\n          _move: function (e) {\n            var that = this,\n                options = that.options,\n                key = e.keyCode,\n                view = that._view,\n                index = that._index,\n                min = that.options.min,\n                max = that.options.max,\n                currentValue = new DATE(+that._current),\n                isRtl = kendo.support.isRtl(that.wrapper),\n                isDisabled = that.options.disableDates,\n                value,\n                prevent,\n                method,\n                temp;\n\n            if (e.target === that._table[0]) {\n              that._active = true;\n            }\n\n            if (key == keys.RIGHT && !isRtl || key == keys.LEFT && isRtl) {\n              value = 1;\n              prevent = true;\n            } else if (key == keys.LEFT && !isRtl || key == keys.RIGHT && isRtl) {\n              value = -1;\n              prevent = true;\n            } else if (key == keys.UP) {\n              value = index === 0 ? -7 : -4;\n              prevent = true;\n            } else if (key == keys.DOWN) {\n              value = index === 0 ? 7 : 4;\n              prevent = true;\n            } else if (key == keys.SPACEBAR) {\n              value = 0;\n              prevent = true;\n            } else if (key == keys.HOME || key == keys.END) {\n              method = key == keys.HOME ? \"first\" : \"last\";\n              temp = view[method](currentValue);\n              currentValue = new DATE(temp.getFullYear(), temp.getMonth(), temp.getDate(), currentValue.getHours(), currentValue.getMinutes(), currentValue.getSeconds(), currentValue.getMilliseconds());\n              currentValue.setFullYear(temp.getFullYear());\n              prevent = true;\n            }\n\n            if (e.ctrlKey || e.metaKey) {\n              if (key == keys.RIGHT && !isRtl || key == keys.LEFT && isRtl) {\n                that.navigateToFuture();\n                prevent = true;\n              } else if (key == keys.LEFT && !isRtl || key == keys.RIGHT && isRtl) {\n                that.navigateToPast();\n                prevent = true;\n              } else if (key == keys.UP) {\n                that.navigateUp();\n                prevent = true;\n              } else if (key == keys.DOWN) {\n                that._click($(that._cell[0].firstChild));\n\n                prevent = true;\n              } else if ((key == keys.ENTER || key == keys.SPACEBAR) && that._isMultipleSelection()) {\n                that._keyboardToggleSelection(e);\n\n                var focusedDate = toDateObject($(that._cell[0]).find(\"a\"));\n\n                that._setCurrent(focusedDate);\n              }\n            } else if (e.shiftKey) {\n              if (value !== undefined || method) {\n                if (!method) {\n                  view.setDate(currentValue, value);\n                }\n\n                if (!isInRange(currentValue, min, max)) {\n                  currentValue = restrictValue(currentValue, options.min, options.max);\n                }\n\n                if (isDisabled(currentValue)) {\n                  currentValue = that._nextNavigatable(currentValue, value);\n                }\n\n                min = createDate(min.getFullYear(), min.getMonth(), min.getDate());\n\n                if (that._isMultipleSelection()) {\n                  that._keyboardRangeSelection(e, currentValue);\n                } else {\n                  that._focus(currentValue);\n                }\n              }\n            } else {\n              if (key == keys.ENTER || key == keys.SPACEBAR) {\n                if (view.name == \"month\" && that._isMultipleSelection()) {\n                  that.value(toDateObject($(that._cell.find(\"a\"))));\n                  that.selectable._lastActive = $(that._cell[0]);\n                  that.trigger(CHANGE);\n                } else {\n                  that._click($(that._cell[0].firstChild));\n                }\n\n                prevent = true;\n              } else if (key == keys.PAGEUP) {\n                prevent = true;\n                that.navigateToPast();\n              } else if (key == keys.PAGEDOWN) {\n                prevent = true;\n                that.navigateToFuture();\n              }\n\n              if (value || method) {\n                if (!method) {\n                  view.setDate(currentValue, value);\n                }\n\n                min = createDate(min.getFullYear(), min.getMonth(), min.getDate());\n\n                if (!isInRange(currentValue, min, max)) {\n                  currentValue = restrictValue(currentValue, options.min, options.max);\n                }\n\n                if (!that._isNavigatable(currentValue, value)) {\n                  currentValue = that._nextNavigatable(currentValue, value);\n                }\n\n                if (that._isMultipleSelection()) {\n                  if (!that._dateInView(currentValue)) {\n                    that.navigate(currentValue);\n                  } else {\n                    that._current = currentValue;\n\n                    that._setCurrent(currentValue);\n                  }\n                } else {\n                  that._focus(currentValue);\n                }\n              }\n            }\n\n            if (prevent) {\n              e.preventDefault();\n            }\n\n            return that._current;\n          },\n          _keyboardRangeSelection: function (event, currentValue) {\n            var that = this,\n                fromDate,\n                daysDifference;\n\n            if (!that._dateInView(currentValue)) {\n              that._selectDates = [];\n              fromDate = that.selectable._lastActive ? toDateObject(that.selectable._lastActive.find(\"a\")) : currentValue;\n              daysDifference = daysBetweenTwoDates(fromDate, new Date(+currentValue));\n              addDaysToArray(that._selectDates, daysDifference, fromDate, that.options.disableDates);\n              that.navigate(currentValue);\n              that._current = currentValue;\n              that.selectable._lastActive = that.selectable._lastActive || that._cellByDate(that._view.toDateString(currentValue), CELLSELECTORVALID);\n              that.trigger(CHANGE);\n              return;\n            }\n\n            that.selectable.options.filter = that.wrapper.find(\"table\").length > 1 && +currentValue > +that._current ? \"table.k-month:eq(1) \" + CELLSELECTORVALID : \"table.k-month:eq(0) \" + CELLSELECTORVALID;\n\n            that._setCurrent(currentValue);\n\n            that._current = currentValue;\n\n            that._rangeSelection(that._cellByDate(that._view.toDateString(currentValue), CELLSELECTORVALID), currentValue);\n\n            that.trigger(CHANGE);\n            that.selectable.options.filter = \"table.k-month:eq(0) \" + CELLSELECTORVALID;\n          },\n          _keyboardToggleSelection: function (event) {\n            var that = this;\n            event.currentTarget = that._cell[0];\n            that.selectable._lastActive = $(that._cell[0]);\n\n            if ($(that._cell[0]).hasClass(SELECTED)) {\n              that.selectable._unselect($(that._cell[0]));\n\n              that.selectable.trigger(CHANGE, {\n                event: event\n              });\n            } else {\n              that.selectable.value($(that._cell[0]), {\n                event: event\n              });\n            }\n          },\n          _nextNavigatable: function (currentValue, value) {\n            var that = this,\n                disabled = true,\n                view = that._view,\n                min = that.options.min,\n                max = that.options.max,\n                isDisabled = that.options.disableDates,\n                navigatableDate = new Date(currentValue.getTime());\n            view.setDate(navigatableDate, -value);\n\n            while (disabled) {\n              view.setDate(currentValue, value);\n\n              if (!isInRange(currentValue, min, max)) {\n                currentValue = navigatableDate;\n                break;\n              }\n\n              disabled = isDisabled(currentValue);\n            }\n\n            return currentValue;\n          },\n          _animate: function (options) {\n            var that = this;\n            var from = options.from;\n            var to = options.to;\n            var active = that._active;\n            var viewWrapper = that.element.children(\".k-calendar-view\");\n\n            if (!from) {\n              viewWrapper.append(to);\n\n              that._bindTable(to);\n            } else if (from.parent().data(\"animating\")) {\n              from.off(ns);\n              from.parent().kendoStop(true, true).remove();\n              from.remove();\n              viewWrapper.append(to);\n\n              that._focusView(active);\n            } else if (!from.is(\":visible\") || that.options.animation === false || options.replace) {\n              to.insertAfter(from);\n              from.off(ns).remove();\n\n              that._focusView(active);\n            } else {\n              that[options.vertical ? \"_vertical\" : \"_horizontal\"](from, to, options.future);\n            }\n          },\n          _horizontal: function (from, to, future) {\n            var that = this,\n                active = that._active,\n                horizontal = that.options.animation.horizontal,\n                effects = horizontal.effects,\n                viewWidth = outerWidth(from);\n\n            if (effects && effects.indexOf(SLIDE) != -1) {\n              from.add(to).css({\n                width: viewWidth\n              });\n              from.wrap(\"<div/>\");\n\n              that._focusView(active, from);\n\n              from.parent().css({\n                position: \"relative\",\n                width: viewWidth * 2,\n                \"float\": LEFT,\n                \"margin-left\": future ? 0 : -viewWidth\n              });\n              to[future ? \"insertAfter\" : \"insertBefore\"](from);\n              extend(horizontal, {\n                effects: SLIDE + \":\" + (future ? \"right\" : LEFT),\n                complete: function () {\n                  from.off(ns).remove();\n                  that._oldTable = null;\n                  to.unwrap();\n\n                  that._focusView(active);\n                }\n              });\n              from.parent().kendoStop(true, true).kendoAnimate(horizontal);\n            }\n          },\n          _vertical: function (from, to) {\n            var that = this,\n                vertical = that.options.animation.vertical,\n                effects = vertical.effects,\n                active = that._active,\n                //active state before from's blur\n            cell,\n                position;\n\n            if (effects && effects.indexOf(\"zoom\") != -1) {\n              to.insertBefore(from);\n              from.css({\n                position: \"absolute\",\n                width: to.width()\n              });\n\n              if (transitionOrigin) {\n                cell = that._cellByDate(that._view.toDateString(that._current));\n                position = cell.position();\n                position = position.left + parseInt(cell.width() / 2, 10) + \"px\" + \" \" + (position.top + parseInt(cell.height() / 2, 10) + \"px\");\n                to.css(transitionOrigin, position);\n              }\n\n              from.kendoStop(true, true).kendoAnimate({\n                effects: \"fadeOut\",\n                duration: 600,\n                complete: function () {\n                  from.off(ns).remove();\n                  that._oldTable = null;\n\n                  that._focusView(active);\n                }\n              });\n              to.kendoStop(true, true).kendoAnimate(vertical);\n            }\n          },\n          _cellByDate: function (value, selector) {\n            return this._table.find(selector ? selector : \"td:not(.\" + OTHERMONTH + \")\").filter(function () {\n              return $(this.firstChild).attr(kendo.attr(VALUE)) === value;\n            });\n          },\n          _selectCell: function (date) {\n            var that = this,\n                cell = that._selectedCell,\n                value = that._view.toDateString(date);\n\n            if (cell && cell[0]) {\n              cell[0].removeAttribute(ARIA_SELECTED);\n              cell.removeClass(SELECTED);\n            }\n\n            cell = that._cellByDate(value, that.options.selectable == \"multiple\" ? CELLSELECTOR : \"td:not(.\" + OTHERMONTH + \")\");\n            that._selectedCell = cell;\n            cell.addClass(SELECTED).attr(ARIA_SELECTED, true);\n          },\n          _setCurrent: function (date) {\n            var that = this,\n                id = kendo.guid(),\n                cell = that._cell,\n                value = that._view.toDateString(date);\n\n            if (cell && cell[0]) {\n              cell.removeClass(FOCUSED);\n              cell[0].removeAttribute(ARIA_LABEL);\n              cell[0].removeAttribute(ID);\n            }\n\n            cell = that._cellByDate(value, that.options.selectable == \"multiple\" ? CELLSELECTOR : \"td:not(.\" + OTHERMONTH + \")\");\n            that._cell = cell;\n            cell.attr(ID, id).addClass(FOCUSED);\n\n            if (that._table[0]) {\n              that._table[0].removeAttribute(\"aria-activedescendant\");\n\n              that._table.attr(\"aria-activedescendant\", id);\n            }\n          },\n          _bindTable: function (table) {\n            table.on(FOCUS_WITH_NS, this._addClassProxy).on(BLUR, this._removeClassProxy);\n          },\n          _click: function (link) {\n            var that = this,\n                options = that.options,\n                currentValue = new Date(+that._current),\n                value = toDateObject(link);\n            adjustDST(value, 0);\n\n            if (that._view.name == \"month\" && that.options.disableDates(value)) {\n              value = that._value;\n            }\n\n            that._view.setDate(currentValue, value);\n\n            that.navigateDown(restrictValue(currentValue, options.min, options.max));\n          },\n          _focus: function (value) {\n            var that = this,\n                view = that._view;\n\n            if (view.compare(value, that._current) !== 0) {\n              that.navigate(value);\n            } else {\n              that._current = value;\n\n              that._setCurrent(value);\n            }\n          },\n          _focusView: function (active, table) {\n            if (active) {\n              this.focus(table);\n            }\n          },\n          _viewWrapper: function () {\n            var that = this;\n            var element = that.element;\n            var viewWrapper = element.children(\".k-calendar-view\");\n\n            if (!viewWrapper[0]) {\n              viewWrapper = $(\"<div class='k-calendar-view' />\").insertAfter(element.find(HEADERSELECTOR));\n            }\n          },\n          _footer: function (template) {\n            var that = this,\n                today = getToday(),\n                element = that.element,\n                footer = element.find(\".k-footer\");\n\n            if (!template) {\n              that._toggle(false);\n\n              footer.hide();\n              return;\n            }\n\n            if (!footer[0]) {\n              footer = $('<div class=\"k-footer\"><a href=\"#\" class=\"k-link k-nav-today\"></a></div>').appendTo(element);\n            }\n\n            that._today = footer.show().find(\".k-link\").html(template(today)).attr(\"title\", kendo.toString(today, \"D\", that.options.culture));\n\n            that._toggle();\n          },\n          _header: function () {\n            var that = this,\n                element = that.element,\n                linksSelector = that.options.linksSelector;\n\n            if (!element.find(HEADERSELECTOR)[0]) {\n              element.html(kendo.template(that.options.header.template)($.extend(true, {}, that.options, {\n                actionAttr: kendo.attr(\"action\"),\n                size: kendo.getValidCssClass(\"k-button-\", \"size\", that.options.size)\n              })));\n            }\n\n            element.find(linksSelector).on(CLICK + \" touchend\" + ns, function () {\n              return false;\n            });\n            that._title = element.find('[' + kendo.attr(\"action\") + '=\"nav-up\"]').on(CLICK + \" touchend\" + ns, function () {\n              that._active = that.options.focusOnNav !== false;\n              that.navigateUp();\n            });\n            that[PREVARROW] = element.find('[' + kendo.attr(\"action\") + '=\"prev\"]').on(CLICK + \" touchend\" + ns, function () {\n              that._active = that.options.focusOnNav !== false;\n              that.navigateToPast();\n            });\n            that[NEXTARROW] = element.find('[' + kendo.attr(\"action\") + '=\"next\"]').on(CLICK + \" touchend\" + ns, function () {\n              that._active = that.options.focusOnNav !== false;\n              that.navigateToFuture();\n            });\n            element.find('[' + kendo.attr(\"action\") + '=\"today\"]').on(CLICK + \" touchend\" + ns, that._todayClick.bind(that));\n          },\n          _navigate: function (arrow, modifier) {\n            var that = this,\n                index = that._index + 1,\n                currentValue = new DATE(+that._current);\n\n            if (that._isMultipleSelection()) {\n              var firstDayCurrentMonth = that._table.find(\"td:not(.k-other-month):not(.k-out-of-range)\").has(\".k-link\").first();\n\n              currentValue = toDateObject(firstDayCurrentMonth.find(\"a\"));\n              that._current = new Date(+currentValue);\n            }\n\n            arrow = that[arrow];\n\n            if (!arrow.hasClass(DISABLED)) {\n              if (index > 3) {\n                currentValue.setFullYear(currentValue.getFullYear() + 100 * modifier);\n              } else {\n                calendar.views[index].setDate(currentValue, modifier);\n              }\n\n              that.navigate(currentValue);\n            }\n          },\n          _option: function (option, value) {\n            var that = this,\n                options = that.options,\n                currentValue = that._value || that._current,\n                isBigger;\n\n            if (value === undefined) {\n              return options[option];\n            }\n\n            value = parse(value, options.format, options.culture);\n\n            if (!value) {\n              return;\n            }\n\n            options[option] = new DATE(+value);\n\n            if (option === MIN) {\n              isBigger = value > currentValue;\n            } else {\n              isBigger = currentValue > value;\n            }\n\n            if (isBigger || isEqualMonth(currentValue, value)) {\n              if (isBigger) {\n                that._value = null;\n              }\n\n              that._changeView = true;\n            }\n\n            if (!that._changeView) {\n              that._changeView = !!(options.month.content || options.month.empty);\n            }\n\n            that.navigate(that._value);\n\n            that._toggle();\n          },\n          _toggle: function (toggle) {\n            var that = this,\n                options = that.options,\n                isTodayDisabled = that.options.disableDates(getToday()),\n                link = that._today,\n                todayClass = that._todayClass();\n\n            if (toggle === undefined) {\n              toggle = isInRange(getToday(), options.min, options.max);\n            }\n\n            if (link) {\n              link.off(CLICK);\n\n              if (toggle && !isTodayDisabled) {\n                link.addClass(todayClass).removeClass(DISABLED).on(CLICK, that._todayClick.bind(that));\n              } else {\n                link.removeClass(todayClass).addClass(DISABLED).on(CLICK, prevent);\n              }\n            }\n          },\n          _todayClass: function () {\n            return TODAY;\n          },\n          _todayClick: function (e) {\n            var that = this,\n                depth = views[that.options.depth],\n                disabled = that.options.disableDates,\n                today = getToday();\n            e.preventDefault();\n\n            if (disabled(today)) {\n              return;\n            }\n\n            if (that._view.compare(that._current, today) === 0 && that._index == depth) {\n              that._changeView = false;\n            }\n\n            if (that._isMultipleSelection()) {\n              that._selectDates = [today];\n              that.selectable._lastActive = null;\n            }\n\n            that._value = today;\n            that.navigate(today, depth);\n            that.trigger(CHANGE);\n          },\n          _templates: function () {\n            var that = this,\n                options = that.options,\n                footer = options.footer,\n                month = options.month,\n                content = month.content,\n                weekNumber = month.weekNumber,\n                empty = month.empty,\n                footerTemplate = '#= kendo.toString(data,\"D\",\"' + options.culture + '\") #';\n            that.month = {\n              content: template('<td class=\"#=data.cssClass#\" role=\"gridcell\"><a tabindex=\"-1\" class=\"k-link#=data.linkClass#\" href=\"#=data.url#\" ' + kendo.attr(VALUE) + '=\"#=data.dateString#\" title=\"#=data.title#\">' + (content || \"#=data.value#\") + '</a></td>', {\n                useWithBlock: !!content\n              }),\n              empty: template('<td role=\"gridcell\">' + (empty || \"&nbsp;\") + \"</td>\", {\n                useWithBlock: !!empty\n              }),\n              weekNumber: template('<td class=\"k-alt\">' + (weekNumber || \"#= data.weekNumber #\") + \"</td>\", {\n                useWithBlock: !!weekNumber\n              })\n            };\n\n            if (footer && footer !== true) {\n              footerTemplate = footer;\n            }\n\n            that.footer = footer !== false ? template(footerTemplate, {\n              useWithBlock: false\n            }) : null;\n          },\n          _updateAria: function (ariaTemplate, date) {\n            var that = this;\n            var cell = that._cell;\n            var valueType = that.view().valueType();\n            var current = date || that.current();\n            var text;\n\n            if (valueType === \"month\") {\n              text = kendo.toString(current, \"MMMM\");\n            } else if (valueType === \"date\") {\n              text = kendo.toString(current, \"D\");\n            } else {\n              text = cell.text();\n            }\n\n            cell.attr(\"aria-label\", ariaTemplate({\n              current: current,\n              valueType: valueType,\n              text: text\n            }));\n            return cell.attr(\"id\");\n          }\n        });\n        ui.plugin(Calendar);\n        var calendar = {\n          firstDayOfMonth: function (date) {\n            return createDate(date.getFullYear(), date.getMonth(), 1);\n          },\n          firstVisibleDay: function (date, calendarInfo) {\n            calendarInfo = calendarInfo || kendo.culture().calendar;\n            var firstDay = calendarInfo.firstDay,\n                firstVisibleDay = new DATE(date.getFullYear(), date.getMonth(), 1, date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n            firstVisibleDay.setFullYear(date.getFullYear());\n\n            while (firstVisibleDay.getDay() != firstDay) {\n              calendar.setTime(firstVisibleDay, -1 * MS_PER_DAY);\n            }\n\n            return firstVisibleDay;\n          },\n          setTime: function (date, time) {\n            var tzOffsetBefore = date.getTimezoneOffset(),\n                resultDATE = new DATE(date.getTime() + time),\n                tzOffsetDiff = resultDATE.getTimezoneOffset() - tzOffsetBefore;\n            date.setTime(resultDATE.getTime() + tzOffsetDiff * MS_PER_MINUTE);\n          },\n          views: [{\n            name: MONTH,\n            title: function (date, min, max, culture) {\n              return getCalendarInfo(culture).months.names[date.getMonth()] + \" \" + date.getFullYear();\n            },\n            content: function (options) {\n              var that = this,\n                  idx = 0,\n                  min = options.min,\n                  max = options.max,\n                  date = options.date,\n                  dates = options.dates,\n                  format = options.format,\n                  culture = options.culture,\n                  navigateUrl = options.url,\n                  showHeader = options.showHeader,\n                  otherMonth = options.otherMonth,\n                  isWeekColumnVisible = options.isWeekColumnVisible,\n                  hasUrl = navigateUrl && dates[0],\n                  currentCalendar = getCalendarInfo(culture),\n                  firstDayIdx = currentCalendar.firstDay,\n                  days = currentCalendar.days,\n                  names = shiftArray(days.names, firstDayIdx),\n                  shortNames = shiftArray(days.namesShort, firstDayIdx),\n                  start = calendar.firstVisibleDay(date, currentCalendar),\n                  firstDayOfMonth = that.first(date),\n                  lastDayOfMonth = that.last(date),\n                  toDateString = that.toDateString,\n                  today = getToday(),\n                  contentClasses = options.contentClasses,\n                  html = '<table tabindex=\"0\" role=\"grid\" class=\"' + contentClasses + '\" cellspacing=\"0\" data-start=\"' + toDateString(start) + '\">';\n\n              if (showHeader) {\n                html += '<caption class=\"k-calendar-caption k-month-header\">' + this.title(date, min, max, culture) + '</caption>';\n              }\n\n              html += '<thead class=\"k-calendar-thead\"><tr role=\"row\" class=\"k-calendar-tr\">';\n\n              if (isWeekColumnVisible) {\n                html += '<th scope=\"col\" class=\"k-calendar-th k-alt\">' + options.messages.weekColumnHeader + '</th>';\n              }\n\n              for (; idx < 7; idx++) {\n                html += '<th scope=\"col\" class=\"k-calendar-th\" title=\"' + names[idx] + '\">' + shortNames[idx] + '</th>';\n              }\n\n              adjustDST(today, 0);\n              today = +today;\n              return view({\n                cells: 42,\n                perRow: 7,\n                html: html += '</tr></thead><tbody class=\"k-calendar-tbody\"><tr role=\"row\" class=\"k-calendar-tr\">',\n                start: start,\n                isWeekColumnVisible: isWeekColumnVisible,\n                weekNumber: options.weekNumber,\n                min: createDate(min.getFullYear(), min.getMonth(), min.getDate()),\n                max: createDate(max.getFullYear(), max.getMonth(), max.getDate()),\n                otherMonth: otherMonth,\n                content: options.content,\n                lastDayOfMonth: lastDayOfMonth,\n                empty: options.empty,\n                setter: that.setDate,\n                disableDates: options.disableDates,\n                build: function (date, idx, disableDates) {\n                  var cssClass = [\"k-calendar-td\"],\n                      day = date.getDay(),\n                      linkClass = \"\",\n                      url = \"#\";\n\n                  if (date < firstDayOfMonth || date > lastDayOfMonth) {\n                    cssClass.push(OTHERMONTH);\n                  }\n\n                  if (disableDates(date)) {\n                    cssClass.push(DISABLED);\n                  }\n\n                  if (+date === today) {\n                    cssClass.push(\"k-today\");\n                  }\n\n                  if (day === 0 || day === 6) {\n                    cssClass.push(\"k-weekend\");\n                  }\n\n                  if (hasUrl && inArray(+date, dates)) {\n                    url = navigateUrl.replace(\"{0}\", kendo.toString(date, format, culture));\n                    linkClass = \" k-action-link\";\n                  }\n\n                  return {\n                    date: date,\n                    dates: dates,\n                    ns: kendo.ns,\n                    title: kendo.toString(date, \"D\", culture),\n                    value: date.getDate(),\n                    dateString: toDateString(date),\n                    cssClass: cssClass.join(\" \"),\n                    linkClass: linkClass,\n                    url: url\n                  };\n                },\n                weekNumberBuild: function (date) {\n                  return {\n                    weekNumber: weekInYear(date, kendo.culture().calendar.firstDay),\n                    currentDate: date\n                  };\n                }\n              });\n            },\n            first: function (date) {\n              return calendar.firstDayOfMonth(date);\n            },\n            last: function (date) {\n              var last = createDate(date.getFullYear(), date.getMonth() + 1, 0),\n                  first = calendar.firstDayOfMonth(date),\n                  timeOffset = Math.abs(last.getTimezoneOffset() - first.getTimezoneOffset());\n\n              if (timeOffset) {\n                last.setHours(first.getHours() + timeOffset / 60);\n              }\n\n              return last;\n            },\n            compare: function (date1, date2) {\n              var result,\n                  month1 = date1.getMonth(),\n                  year1 = date1.getFullYear(),\n                  month2 = date2.getMonth(),\n                  year2 = date2.getFullYear();\n\n              if (year1 > year2) {\n                result = 1;\n              } else if (year1 < year2) {\n                result = -1;\n              } else {\n                result = month1 == month2 ? 0 : month1 > month2 ? 1 : -1;\n              }\n\n              return result;\n            },\n            setDate: function (date, value) {\n              var hours = date.getHours();\n\n              if (value instanceof DATE) {\n                date.setFullYear(value.getFullYear(), value.getMonth(), value.getDate());\n              } else {\n                calendar.setTime(date, value * MS_PER_DAY);\n              }\n\n              adjustDST(date, hours);\n            },\n            toDateString: function (date) {\n              return date.getFullYear() + \"/\" + date.getMonth() + \"/\" + date.getDate();\n            },\n            valueType: function () {\n              return \"date\";\n            }\n          }, {\n            name: \"year\",\n            title: function (date) {\n              return date.getFullYear();\n            },\n            content: function (options) {\n              var namesAbbr = getCalendarInfo(options.culture).months.namesAbbr,\n                  toDateString = this.toDateString,\n                  min = options.min,\n                  max = options.max,\n                  html = \"\";\n\n              if (options.showHeader) {\n                html += '<table tabindex=\"0\" role=\"grid\" class=\"k-calendar-table k-content k-meta-view\" cellspacing=\"0\">';\n                html += '<caption class=\"k-calendar-caption k-meta-header\">';\n                html += this.title(options.date);\n                html += '</caption>';\n                html += '<tbody class=\"k-calendar-tbody\">';\n                html += '<tr role=\"row\" class=\"k-calendar-tr\">';\n              }\n\n              return view({\n                min: createDate(min.getFullYear(), min.getMonth(), 1),\n                max: createDate(max.getFullYear(), max.getMonth(), 1),\n                start: createDate(options.date.getFullYear(), 0, 1),\n                html: html,\n                setter: this.setDate,\n                build: function (date) {\n                  var cssClass = [\"k-calendar-td\"];\n                  return {\n                    value: namesAbbr[date.getMonth()],\n                    ns: kendo.ns,\n                    dateString: toDateString(date),\n                    cssClass: cssClass.join(\" \")\n                  };\n                }\n              });\n            },\n            first: function (date) {\n              return createDate(date.getFullYear(), 0, date.getDate());\n            },\n            last: function (date) {\n              return createDate(date.getFullYear(), 11, date.getDate());\n            },\n            compare: function (date1, date2) {\n              return compare(date1, date2);\n            },\n            setDate: function (date, value) {\n              var month,\n                  hours = date.getHours();\n\n              if (value instanceof DATE) {\n                month = value.getMonth();\n                date.setFullYear(value.getFullYear(), month, date.getDate());\n\n                if (month !== date.getMonth()) {\n                  date.setDate(0);\n                }\n              } else {\n                month = date.getMonth() + value;\n                date.setMonth(month);\n\n                if (month > 11) {\n                  month -= 12;\n                }\n\n                if (month > 0 && date.getMonth() != month) {\n                  date.setDate(0);\n                }\n              }\n\n              adjustDST(date, hours);\n            },\n            toDateString: function (date) {\n              return date.getFullYear() + \"/\" + date.getMonth() + \"/1\";\n            },\n            valueType: function () {\n              return \"month\";\n            }\n          }, {\n            name: \"decade\",\n            title: function (date, min, max) {\n              return title(date, min, max, 10);\n            },\n            content: function (options) {\n              var year = options.date.getFullYear(),\n                  toDateString = this.toDateString,\n                  html = \"\";\n\n              if (options.showHeader) {\n                html += '<table tabindex=\"0\" role=\"grid\" class=\"k-calendar-table k-content k-meta-view\" cellspacing=\"0\">';\n                html += '<caption class=\"k-meta-header\">';\n                html += this.title(options.date, options.min, options.max);\n                html += '</caption>';\n                html += '<tbody class=\"k-calendar-thead\">';\n                html += '<tr role=\"row\" class=\"k-calendar-tr\">';\n              }\n\n              return view({\n                start: createDate(year - year % 10 - 1, 0, 1),\n                min: createDate(options.min.getFullYear(), 0, 1),\n                max: createDate(options.max.getFullYear(), 0, 1),\n                otherMonth: options.otherMonth,\n                html: html,\n                setter: this.setDate,\n                build: function (date, idx) {\n                  var cssClass = [\"k-calendar-td\"];\n\n                  if (idx === 0 || idx === 11) {\n                    cssClass.push(OTHERMONTH);\n                  }\n\n                  return {\n                    value: date.getFullYear(),\n                    ns: kendo.ns,\n                    dateString: toDateString(date),\n                    cssClass: cssClass.join(\" \")\n                  };\n                }\n              });\n            },\n            first: function (date) {\n              var year = date.getFullYear();\n              return createDate(year - year % 10, date.getMonth(), date.getDate());\n            },\n            last: function (date) {\n              var year = date.getFullYear();\n              return createDate(year - year % 10 + 9, date.getMonth(), date.getDate());\n            },\n            compare: function (date1, date2) {\n              return compare(date1, date2, 10);\n            },\n            setDate: function (date, value) {\n              setDate(date, value, 1);\n            },\n            toDateString: function (date) {\n              return date.getFullYear() + \"/0/1\";\n            },\n            valueType: function () {\n              return \"year\";\n            }\n          }, {\n            name: CENTURY,\n            title: function (date, min, max) {\n              return title(date, min, max, 100);\n            },\n            content: function (options) {\n              var year = options.date.getFullYear(),\n                  min = options.min.getFullYear(),\n                  max = options.max.getFullYear(),\n                  toDateString = this.toDateString,\n                  minYear = min,\n                  maxYear = max,\n                  html = \"\";\n              minYear = minYear - minYear % 10;\n              maxYear = maxYear - maxYear % 10;\n\n              if (maxYear - minYear < 10) {\n                maxYear = minYear + 9;\n              }\n\n              if (options.showHeader) {\n                html += '<table tabindex=\"0\" role=\"grid\" class=\"k-calendar-table k-content k-meta-view\" cellspacing=\"0\">';\n                html += '<caption class=\"k-calendar-caption k-meta-header\">';\n                html += this.title(options.date, options.min, options.max);\n                html += '</caption>';\n                html += '<tbody class=\"k-calendar-tbody\">';\n                html += '<tr role=\"row\" class=\"k-calendar-tr\">';\n              }\n\n              return view({\n                start: createDate(year - year % 100 - 10, 0, 1),\n                min: createDate(minYear, 0, 1),\n                max: createDate(maxYear, 0, 1),\n                otherMonth: options.otherMonth,\n                html: html,\n                setter: this.setDate,\n                build: function (date, idx) {\n                  var cssClass = [\"k-calendar-td\"];\n                  var start = date.getFullYear(),\n                      end = start + 9;\n\n                  if (idx === 0 || idx === 11) {\n                    cssClass.push(OTHERMONTH);\n                  }\n\n                  if (start < min) {\n                    start = min;\n                  }\n\n                  if (end > max) {\n                    end = max;\n                  }\n\n                  return {\n                    ns: kendo.ns,\n                    value: start + \" - \" + end,\n                    dateString: toDateString(date),\n                    cssClass: cssClass.join(\" \")\n                  };\n                }\n              });\n            },\n            first: function (date) {\n              var year = date.getFullYear();\n              return createDate(year - year % 100, date.getMonth(), date.getDate());\n            },\n            last: function (date) {\n              var year = date.getFullYear();\n              return createDate(year - year % 100 + 99, date.getMonth(), date.getDate());\n            },\n            compare: function (date1, date2) {\n              return compare(date1, date2, 100);\n            },\n            setDate: function (date, value) {\n              setDate(date, value, 10);\n            },\n            toDateString: function (date) {\n              var year = date.getFullYear();\n              return year - year % 10 + \"/0/1\";\n            },\n            valueType: function () {\n              return \"decade\";\n            }\n          }]\n        };\n\n        function title(date, min, max, modular) {\n          var start = date.getFullYear(),\n              minYear = min.getFullYear(),\n              maxYear = max.getFullYear(),\n              end;\n          start = start - start % modular;\n          end = start + (modular - 1);\n\n          if (start < minYear) {\n            start = minYear;\n          }\n\n          if (end > maxYear) {\n            end = maxYear;\n          }\n\n          return start + \"-\" + end;\n        }\n\n        function view(options) {\n          var idx = 0,\n              data,\n              min = options.min,\n              max = options.max,\n              start = options.start,\n              setter = options.setter,\n              build = options.build,\n              weekNumberBuild = options.weekNumberBuild,\n              length = options.cells || 12,\n              isWeekColumnVisible = options.isWeekColumnVisible,\n              cellsPerRow = options.perRow || 4,\n              otherMonth = options.otherMonth,\n              lastDayOfMonth = options.lastDayOfMonth,\n              weekNumber = options.weekNumber || weekNumberTemplate,\n              content = options.content || cellTemplate,\n              empty = options.empty || emptyCellTemplate,\n              otherMonthTemplate = options.otherMonthCellTemplate || otherMonthCellTemplate,\n              html = options.html || '<table tabindex=\"0\" role=\"grid\" class=\"k-calendar-table k-content k-meta-view\" cellspacing=\"0\"><tbody class=\"k-calendar-tbody\"><tr role=\"row\" class=\"k-calendar-tr\">';\n\n          if (isWeekColumnVisible) {\n            html += weekNumber(weekNumberBuild(start));\n          }\n\n          for (; idx < length; idx++) {\n            if (idx > 0 && idx % cellsPerRow === 0) {\n              html += '</tr><tr role=\"row\" class=\"k-calendar-tr\">';\n\n              if (isWeekColumnVisible) {\n                html += otherMonth || +start <= +lastDayOfMonth ? weekNumber(weekNumberBuild(start)) : weekNumber({\n                  weekNumber: \"&nbsp;\"\n                });\n              }\n            }\n\n            start = createDate(start.getFullYear(), start.getMonth(), start.getDate());\n            adjustDST(start, 0);\n            data = build(start, idx, options.disableDates);\n            html += data.cssClass.indexOf(OTHERMONTH) !== -1 && !otherMonth ? otherMonthTemplate(data) : isInRange(start, min, max) ? content(data) : empty(data);\n            setter(start, 1);\n          }\n\n          return html + \"</tr></tbody></table>\";\n        }\n\n        function compare(date1, date2, modifier) {\n          var year1 = date1.getFullYear(),\n              start = date2.getFullYear(),\n              end = start,\n              result = 0;\n\n          if (modifier) {\n            start = start - start % modifier;\n            end = start - start % modifier + modifier - 1;\n          }\n\n          if (year1 > end) {\n            result = 1;\n          } else if (year1 < start) {\n            result = -1;\n          }\n\n          return result;\n        }\n\n        function getToday() {\n          var today = new DATE();\n          return new DATE(today.getFullYear(), today.getMonth(), today.getDate());\n        }\n\n        function restrictValue(value, min, max) {\n          var today = getToday();\n\n          if (value) {\n            today = new DATE(+value);\n          }\n\n          if (min > today) {\n            today = new DATE(+min);\n          } else if (max < today) {\n            today = new DATE(+max);\n          }\n\n          return today;\n        }\n\n        function isInRange(date, min, max) {\n          return +date >= +min && +date <= +max;\n        }\n\n        function shiftArray(array, idx) {\n          return array.slice(idx).concat(array.slice(0, idx));\n        }\n\n        function setDate(date, value, multiplier) {\n          value = value instanceof DATE ? value.getFullYear() : date.getFullYear() + multiplier * value;\n          date.setFullYear(value);\n        }\n\n        function daysBetweenTwoDates(startDate, endDate) {\n          if (+endDate < +startDate) {\n            var temp = +startDate;\n            calendar.views[0].setDate(startDate, endDate);\n            calendar.views[0].setDate(endDate, new Date(temp));\n          }\n\n          var fromDateUTC = Date.UTC(startDate.getFullYear(), startDate.getMonth(), startDate.getDate());\n          var endDateUTC = Date.UTC(endDate.getFullYear(), endDate.getMonth(), endDate.getDate());\n          return Math.ceil((+endDateUTC - +fromDateUTC) / kendo.date.MS_PER_DAY);\n        }\n\n        function addDaysToArray(array, numberOfDays, fromDate, disableDates) {\n          for (var i = 0; i <= numberOfDays; i++) {\n            var nextDay = new Date(fromDate.getTime());\n            nextDay = new Date(nextDay.setDate(nextDay.getDate() + i));\n\n            if (!disableDates(nextDay)) {\n              array.push(nextDay);\n            }\n          }\n        }\n\n        function mousetoggle(e) {\n          var disabled = $(this).hasClass(\"k-state-disabled\");\n\n          if (!disabled) {\n            $(this).toggleClass(HOVER, MOUSEENTER.indexOf(e.type) > -1 || e.type == FOCUS);\n          }\n        }\n\n        function prevent(e) {\n          e.preventDefault();\n        } // creates date with full year\n\n\n        function createDate(year, month, date) {\n          var dateObject = new DATE(year, month, date);\n          dateObject.setFullYear(year, month, date);\n          return dateObject;\n        }\n\n        function getCalendarInfo(culture) {\n          return getCulture(culture).calendars.standard;\n        }\n\n        function normalize(options) {\n          var start = views[options.start],\n              depth = views[options.depth],\n              culture = getCulture(options.culture);\n          options.format = extractFormat(options.format || culture.calendars.standard.patterns.d);\n\n          if (isNaN(start)) {\n            start = 0;\n            options.start = MONTH;\n          }\n\n          if (depth === undefined || depth > start) {\n            options.depth = MONTH;\n          }\n\n          if (options.dates === null) {\n            options.dates = [];\n          }\n        }\n\n        function addClassToViewContainer(element, currentView) {\n          element.addClass(\"k-\" + currentView);\n        }\n\n        function inArray(date, dates) {\n          for (var i = 0, length = dates.length; i < length; i++) {\n            if (date === +dates[i]) {\n              return true;\n            }\n          }\n\n          return false;\n        }\n\n        function isEqualDatePart(value1, value2) {\n          if (value1) {\n            return value1.getFullYear() === value2.getFullYear() && value1.getMonth() === value2.getMonth() && value1.getDate() === value2.getDate();\n          }\n\n          return false;\n        }\n\n        function isEqualMonth(value1, value2) {\n          if (value1) {\n            return value1.getFullYear() === value2.getFullYear() && value1.getMonth() === value2.getMonth();\n          }\n\n          return false;\n        }\n\n        function getDisabledExpr(option) {\n          if (kendo.isFunction(option)) {\n            return option;\n          }\n\n          if (Array.isArray(option)) {\n            return createDisabledExpr(option);\n          }\n\n          return $.noop;\n        }\n\n        function convertDatesArray(dates) {\n          var result = [];\n\n          for (var i = 0; i < dates.length; i++) {\n            result.push(dates[i].setHours(0, 0, 0, 0));\n          }\n\n          return result;\n        }\n\n        function createDisabledExpr(dates) {\n          var body,\n              callback,\n              disabledDates = [],\n              days = [\"su\", \"mo\", \"tu\", \"we\", \"th\", \"fr\", \"sa\"],\n              searchExpression = \"if (found) {\" + \" return true \" + \"} else {\" + \"return false\" + \"}\";\n\n          if (dates[0] instanceof DATE) {\n            disabledDates = convertDatesArray(dates);\n            body = \"var clonedDate = new Date(date); var found = date && window.kendo.jQuery.inArray(clonedDate.setHours(0, 0, 0, 0),[\" + disabledDates + \"]) > -1;\" + searchExpression;\n          } else {\n            for (var i = 0; i < dates.length; i++) {\n              var day = dates[i].slice(0, 2).toLowerCase();\n              var index = $.inArray(day, days);\n\n              if (index > -1) {\n                disabledDates.push(index);\n              }\n            }\n\n            body = \"var clonedDate = new Date(date); var found = date && window.kendo.jQuery.inArray(clonedDate.getDay(),[\" + disabledDates + \"]) > -1;\" + searchExpression;\n          }\n\n          callback = new Function(\"date\", body); //jshint ignore:line\n\n          return callback;\n        }\n\n        function isEqualDate(oldValue, newValue) {\n          if (oldValue instanceof Date && newValue instanceof Date) {\n            oldValue = oldValue.getTime();\n            newValue = newValue.getTime();\n          }\n\n          return oldValue === newValue;\n        }\n\n        function toDateObject(link) {\n          var value = $(link).attr(kendo.attr(VALUE)).split(\"/\"); //Safari cannot create correctly date from \"1/1/2090\"\n\n          value = createDate(value[0], value[1], value[2]);\n          return value;\n        }\n\n        calendar.isEqualDatePart = isEqualDatePart;\n        calendar.isEqualDate = isEqualDate;\n        calendar.restrictValue = restrictValue;\n        calendar.isInRange = isInRange;\n        calendar.addClassToViewContainer = addClassToViewContainer;\n        calendar.normalize = normalize;\n        calendar.viewsEnum = views;\n        calendar.disabled = getDisabledExpr;\n        calendar.toDateObject = toDateObject;\n        calendar.getToday = getToday;\n        calendar.createDate = createDate;\n        kendo.calendar = calendar;\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1092:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.selectable\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}