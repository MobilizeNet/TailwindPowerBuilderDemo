{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1093);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1051:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.core\");\n    /***/\n  },\n\n  /***/\n  1093:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1051), __webpack_require__(1094), __webpack_require__(1095), __webpack_require__(1096)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"captcha\",\n        name: \"Captcha\",\n        category: \"web\",\n        description: \"The Captcha widget displays captcha validation image and an input so that user case be validated against captcha value.\",\n        depends: [\"core\", \"slider\", \"textbox\", \"skeletoncontainer\"]\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n            extend = $.extend,\n            ajax = $.ajax,\n            isFunction = kendo.isFunction,\n            STRING = \"string\",\n            DOT = \".\",\n            NS = DOT + \"kendoCaptcha\",\n            CLICK = \"click\",\n            BLUR = \"blur\",\n            CHANGE = \"change\",\n            REQUEST_START = \"requestStart\",\n            REQUEST_END = \"requestEnd\",\n            ERROR = \"error\";\n        var CaptchaStyles = {\n          wrapper: \"k-widget k-captcha\",\n          textbox: \"k-textbox\",\n          button: \"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base\",\n          buttonIcon: \"k-button-icon\",\n          iconButton: \"k-icon-button\",\n          resetIcon: \"k-icon k-i-reload\",\n          audioIcon: \"k-icon k-i-volume-up\",\n          disabled: \"k-state-disabled\",\n          inputWrapper: \"k-captcha-input k-vstack\",\n          imageWrapper: \"k-captcha-image-wrap k-hstack\",\n          captchaImage: \"k-captcha-image\",\n          buttonsWrapper: \"k-captcha-image-controls k-vstack\",\n          volumeControlWrapper: \"k-captcha-volume-control k-vstack k-pos-absolute\",\n          hidden: \"k-hidden\",\n          success: \"k-captcha-validation-message k-text-success\",\n          loading: \"k-captcha-loading\"\n        };\n        var Captcha = Widget.extend({\n          init: function (element, options) {\n            var that = this;\n            Widget.fn.init.call(that, element, options);\n            that._captchaField = that.options.dataCaptchaField;\n            that._valueField = that.element.attr(\"name\") || \"captcha\";\n            that._captchaIdField = that.options.dataCaptchaIdField;\n\n            that._wrapper();\n\n            that._idInput();\n\n            that._captchaImage();\n\n            if (that.options.audioButton || that.options.resetButton) {\n              that._buttons();\n            }\n\n            if (!that.options.captcha || !that.options.captchaId) {\n              that._resetHandler();\n            }\n\n            if (that.options.validateOnBlur) {\n              that.element.on(BLUR + NS, function () {\n                that._validationHandler();\n              });\n            }\n\n            that.element.on(CHANGE + NS, function (ev) {\n              delete that._isValid;\n              that.trigger(CHANGE, {\n                value: that.element.val(),\n                originalEvent: ev\n              });\n            });\n            kendo.notify(that);\n          },\n          events: [CHANGE, REQUEST_START, REQUEST_END, ERROR],\n          options: {\n            name: \"Captcha\",\n            dataCaptchaField: \"captcha\",\n            dataCaptchaIdField: \"captchaId\",\n            captchaId: \"\",\n            captcha: null,\n            handler: null,\n            audioHandler: null,\n            validationHandler: null,\n            validateOnBlur: false,\n            resetButton: true,\n            audioButton: true,\n            volumeControl: true,\n            messages: {\n              reset: \"Reset captcha\",\n              audio: \"Speak captcha\",\n              imageAlt: \"Type the Captcha code from the image\",\n              success: \"Verification successful\"\n            }\n          },\n          destroy: function () {\n            var that = this;\n            that.textbox.destroy();\n\n            if (that.resetButton) {\n              that.resetButton.off(NS);\n            }\n\n            if (that.audioButton) {\n              that.audioButton.off(NS);\n            }\n\n            that.element.off(NS); // Just in case, destroy slider.\n\n            that._audioEnded();\n\n            Widget.fn.destroy.call(that);\n          },\n          _wrapper: function () {\n            var that = this,\n                styles = Captcha.styles,\n                wrapper = \"<div class='\" + styles.wrapper + \"'><div class='\" + styles.inputWrapper + \"'></div></div>\",\n                imageWrapper = \"<div class='\" + styles.imageWrapper + \"'></div>\",\n                cssText = that.element[0].style.cssText;\n            that.element.css(\"width\", \"auto\");\n            that.element.css(\"height\", \"auto\");\n            that.textbox = that.element.kendoTextBox().data(\"kendoTextBox\");\n            that._inputWrapper = that.textbox.wrapper;\n            that.wrapper = that._inputWrapper.wrap(wrapper).parent().parent();\n            that.wrapper[0].style.cssText = cssText;\n            that.imageWrapper = $(imageWrapper);\n            that.wrapper.prepend(that.imageWrapper);\n          },\n          _captchaImage: function () {\n            var that = this,\n                options = that.options,\n                messages = options.messages,\n                styles = Captcha.styles;\n            that.captchaImage = $(\"<div class=\\\"\" + styles.captchaImage + \"\\\">\" + \"<img alt=\\\"\" + messages.imageAlt + \"\\\" src= \\\"\" + (options.captcha || \"\") + \"\\\"/>\" + \"</div>\").find(\"img\");\n            that.imageWrapper.append(that.captchaImage.parent());\n\n            that._tabindex(that.captchaImage);\n          },\n          _idInput: function () {\n            var that = this,\n                options = that.options,\n                nameAttr = that._captchaIdField;\n            that.idInput = $(\"<input type=\\\"hidden\\\" name=\\\"\" + nameAttr + \"\\\" value=\\\"\" + options.captchaId + \"\\\" data-\" + kendo.ns + \"stop=\\\"true\\\" />\");\n\n            that._inputWrapper.after(that.idInput);\n          },\n          _buttons: function () {\n            var that = this,\n                styles = Captcha.styles;\n            that.buttonsWrapper = $(\"<div class=\\\"\" + styles.buttonsWrapper + \"\\\"></div>\");\n            that.imageWrapper.append(that.buttonsWrapper);\n\n            if (that.options.audioButton) {\n              that._audioButton();\n            }\n\n            if (that.options.resetButton) {\n              that._resetButton();\n            }\n          },\n          _resetButton: function () {\n            var that = this,\n                messages = that.options.messages,\n                styles = Captcha.styles;\n            that.resetButton = $(\"<button type=\\\"button\\\" title=\\\"\" + messages.reset + \"\\\" class=\\\"\" + styles.button + \" \" + styles.iconButton + \"\\\">\" + \"<span class=\\\"\" + styles.buttonIcon + \" \" + styles.resetIcon + \"\\\"></span>\" + \"</button>\");\n            that.buttonsWrapper.append(that.resetButton);\n            that.resetButton.on(CLICK + NS, that._resetHandler.bind(that, true));\n          },\n          _audioButton: function () {\n            var that = this,\n                messages = that.options.messages,\n                styles = Captcha.styles;\n            that.audioButton = $(\"<button type=\\\"button\\\" title=\\\"\" + messages.audio + \"\\\" class=\\\"\" + styles.button + \" \" + styles.iconButton + \"\\\">\" + \"<span class=\\\"\" + styles.buttonIcon + \" \" + styles.audioIcon + \"\\\"></span>\" + \"</button>\");\n            that.buttonsWrapper.append(that.audioButton);\n            that.audioButton.on(CLICK + NS, that._audioHandler.bind(that));\n          },\n          _resetHandler: function (focusResetButton) {\n            var that = this,\n                handler = that.options.handler,\n                deferred = $.Deferred(),\n                success = that._resetCaptcha.bind(that, deferred);\n\n            delete that._isValid;\n\n            that._toggleSuccessMessage(false);\n\n            that._audioEnded();\n\n            that._progress(true);\n\n            if (!handler) {\n              window.console.error(\"Captcha's handler option is not defined!\");\n              deferred.reject({\n                msg: \"Captcha's handler option is not defined!\",\n                error: \"handler_not_defined\"\n              });\n\n              that._progress(false);\n\n              return deferred.promise();\n            }\n\n            that._callHandler(\"reset\", handler, success).done(function () {\n              if (focusResetButton) {\n                that.resetButton.trigger(\"focus\");\n              }\n            }).fail(function (args) {\n              that._progress(false);\n\n              deferred.reject(args);\n            });\n\n            return deferred.promise();\n          },\n          _audioHandler: function () {\n            var that = this,\n                handler = that.options.audioHandler,\n                deferred = $.Deferred(),\n                success = that._playAudio.bind(that, deferred),\n                data = {};\n\n            data[that._captchaIdField] = that.idInput.val();\n\n            if (!handler) {\n              window.console.error(\"Captcha's audioHandler option is not defined!\");\n              deferred.reject({\n                msg: \"Captcha's audioHandler option is not defined!\",\n                error: \"handler_not_defined\"\n              });\n              return deferred.promise();\n            }\n\n            that._callHandler(\"audio\", handler, success, data).fail(deferred.reject);\n\n            return deferred.promise();\n          },\n          _validationHandler: function () {\n            var that = this,\n                handler = that.options.validationHandler,\n                deferred = $.Deferred(),\n                success = that._validate.bind(that, deferred),\n                data = {};\n\n            delete that._isValid;\n            data[that._captchaIdField] = that.idInput.val();\n            data[that._valueField] = that.element.val();\n\n            if (!handler) {\n              window.console.error(\"Captcha's validationHandler option is not defined!\");\n              deferred.reject({\n                msg: \"Captcha's validationHandler option is not defined!\",\n                error: \"handler_not_defined\"\n              });\n              return deferred.promise();\n            }\n\n            that._callHandler(\"validation\", handler, success, data).fail(deferred.reject);\n\n            return deferred.promise();\n          },\n          _callHandler: function (type, handler, success, data) {\n            var that = this,\n                error = that._error.bind(that, type),\n                requestEnd = that._requestEnd.bind(that, type),\n                args;\n\n            if (isFunction(handler)) {\n              handler({\n                success: success,\n                data: data\n              });\n              return $.Deferred().promise();\n            } else {\n              args = typeof handler === STRING ? {\n                url: handler,\n                cache: false\n              } : extend({}, handler);\n              args.success = success;\n              args.data = extend({}, data, args.data);\n\n              if (!that.trigger(REQUEST_START, {\n                type: type,\n                data: data\n              })) {\n                return ajax(args).done(requestEnd).fail(error);\n              }\n            }\n          },\n          _requestEnd: function (type, data) {\n            var that = this;\n            that.trigger(REQUEST_END, {\n              type: type,\n              data: data\n            });\n          },\n          _error: function (type, jqXHR, textStatus, errorThrown) {\n            var that = this;\n            that.trigger(ERROR, {\n              type: type,\n              jqXHR: jqXHR,\n              textStatus: textStatus,\n              errorThrown: errorThrown\n            });\n          },\n          _resetCaptcha: function (deferred, data) {\n            var that = this,\n                id = data[that._captchaIdField],\n                captcha = data[that._captchaField];\n            that.idInput.val(id);\n            that.captchaImage.attr(\"src\", captcha || \"\");\n            that.captchaImage.one(\"load\", function () {\n              that._progress(false);\n            });\n            deferred.resolve(data);\n          },\n          _playAudio: function (deferred, data) {\n            var that = this;\n\n            if (that._canPlayWav()) {\n              if (that.audioElement) {\n                return;\n              }\n\n              that.audioElement = new Audio(data);\n              that.audioElement.volume = that._audioVolume || that.audioElement.volume;\n\n              if (that.options.volumeControl) {\n                $(that.audioElement).on(\"loadeddata\" + NS, function () {\n                  that._showVolumeControl(that.audioElement.volume);\n                });\n              }\n\n              $(that.audioElement).on(\"ended\" + NS + \" error\" + NS, that._audioEnded.bind(that, deferred));\n              that.audioElement.play();\n            } else if (that._canPlayWithPlugin()) {\n              if (that.audioElement) {\n                that.audioElement.play();\n                return;\n              }\n\n              that.audioElement = that._createEmbedElement(data);\n              that.wrapper.append(that.audioElement);\n            }\n          },\n          _createEmbedElement: function (src) {\n            var that = this,\n                objectElement = document.createElement(\"embed\");\n            objectElement.setAttribute(\"src\", src);\n            objectElement.setAttribute(\"autostart\", \"true\");\n            objectElement.setAttribute(\"pluginspage\", that._audioPlugin);\n            objectElement.setAttribute(\"enablejavascript\", \"true\");\n            objectElement.setAttribute(\"type\", \"audio/wav\");\n            objectElement.setAttribute(\"tabIndex\", \"-1\");\n            objectElement.style.width = \"0px\";\n            objectElement.style.height = \"0px\";\n            objectElement.style.position = \"absolute\";\n            objectElement.style.top = 0;\n            objectElement.style.left = 0;\n            return objectElement;\n          },\n          _showVolumeControl: function (volume) {\n            var that = this,\n                styles = Captcha.styles,\n                volumeControlWrapper = $(\"<div class=\\\"\" + styles.volumeControlWrapper + \"\\\"></div>\");\n\n            if (that.volumeControl) {\n              return;\n            }\n\n            that.volumeControlElm = $(\"<input />\");\n            that.volumeControlWrapper = volumeControlWrapper.append(that.volumeControlElm);\n            that.imageWrapper.append(volumeControlWrapper);\n            that.volumeControlWrapper.css(that._isRtl() ? \"right\" : \"left\", that.wrapper.width());\n            that.volumeControl = that.volumeControlElm.kendoSlider({\n              min: 0,\n              max: 1,\n              smallStep: 0.1,\n              largeStep: 0.5,\n              orientation: \"vertical\",\n              showButtons: false,\n              tickPlacement: \"none\",\n              value: volume,\n              tooltip: {\n                enabled: false\n              },\n              change: function (ev) {\n                that._audioVolume = that.audioElement.volume = ev.value;\n              }\n            }).data(\"kendoSlider\");\n          },\n          _audioEnded: function (deferred) {\n            var that = this;\n\n            if ($(document.activeElement).is(\"a.k-draghandle\")) {\n              that.audioButton.trigger(\"focus\");\n            }\n\n            if (that.volumeControl) {\n              that.volumeControl.destroy();\n              that.volumeControl.wrapper.remove();\n              delete that.volumeControl;\n              that.volumeControlElm.remove();\n              that.volumeControlWrapper.remove();\n              delete that.volumeControlElm;\n              delete that.volumeControlWrapper;\n            }\n\n            if (that.audioElement) {\n              that.audioElement.pause();\n            }\n\n            $(that.audioElement).off(NS);\n            $(that.audioElement).remove();\n            delete that.audioElement;\n\n            if (deferred && deferred.resolve) {\n              deferred.resolve();\n            }\n          },\n          _canPlayWav: function () {\n            var that = this,\n                audio;\n\n            if (that._canPlayAudio) {\n              return that._canPlayAudio;\n            }\n\n            audio = new Audio();\n            that._canPlayAudio = audio.canPlayType(\"audio/wav\").replace(/no/gi, \"\") !== \"\";\n            return that._canPlayAudio;\n          },\n          _canPlayWithPlugin: function () {\n            var that = this;\n\n            if (that._audioPlugin) {\n              return that._audioPlugin;\n            }\n\n            that._audioPlugin = that._getPlugin();\n            return that._audioPlugin;\n          },\n          _getPlugin: function () {\n            var testNavigatorPlugins = function (name) {\n              var plugins = navigator.plugins;\n\n              for (var i = 0; i < plugins.length; i++) {\n                var pluginName = plugins[i].name;\n\n                if (pluginName.indexOf(name) !== -1) {\n                  return true;\n                }\n              }\n\n              return false;\n            };\n\n            var testActiveXAvailability = function (objectName) {\n              try {\n                var control = new window.ActiveXObject(objectName);\n                return !!control;\n              } catch (e) {\n                return false;\n              }\n            };\n\n            if (testActiveXAvailability('QuickTime.QuickTime') || testActiveXAvailability('QuickTimeCheckObject.QuickTimeCheck') || testNavigatorPlugins(\"QuickTime Plug-in\")) {\n              return \"http://www.apple.com/quicktime/download/\";\n            }\n\n            if (testActiveXAvailability('WMPlayer.OCX') || testNavigatorPlugins(\"Windows Media\")) {\n              return \"http://www.microsoft.com/Windows/MediaPlayer\";\n            }\n          },\n          _validate: function (deferred, data) {\n            var that = this;\n            that._isValid = data;\n\n            that._toggleSuccessMessage(that._isValid);\n\n            deferred.resolve(data);\n          },\n          _toggleSuccessMessage: function (toggle) {\n            var that = this,\n                idAttr = (that.element.attr(\"id\") || that.element.attr(\"name\")) + \"-success\",\n                messages = that.options.messages;\n            $(that.successMessage).remove();\n            that.element.removeAttr(\"aria-describedby\");\n\n            if (toggle) {\n              that.successMessage = $(\"<span id=\\\"\" + idAttr + \"\\\" class=\\\"\" + Captcha.styles.success + \"\\\">\" + messages.success + \"</span>\");\n\n              that._inputWrapper.after(that.successMessage);\n\n              that.element.attr(\"aria-describedby\", idAttr);\n            }\n          },\n          _toggleButtons: function (toggle) {\n            var that = this;\n\n            if (that.resetButton) {\n              that.resetButton.prop(\"disabled\", !toggle);\n            }\n\n            if (that.audioButton) {\n              that.audioButton.prop(\"disabled\", !toggle);\n            }\n          },\n          _progress: function (toggle) {\n            var that = this;\n            that.wrapper.toggleClass(Captcha.styles.loading, toggle);\n\n            that._inputWrapper.toggleClass(Captcha.styles.disabled, toggle);\n\n            that._toggleButtons(!toggle);\n\n            that._toggleSkeleton(toggle);\n          },\n          _toggleSkeleton: function (toggle) {\n            var that = this;\n\n            if (that.skeleton) {\n              that.skeleton.remove();\n            }\n\n            if (toggle) {\n              that.skeleton = $(\"<span class='k-skeleton k-skeleton-rect k-skeleton-pulse' style=\\\"width: 100%; height: 100%;\\\"></span>\");\n              that.captchaImage.before(that.skeleton);\n            }\n          },\n          _isRtl: function () {\n            return kendo.support.isRtl(this.wrapper);\n          },\n          value: function () {\n            return this.element.val();\n          },\n          getCaptchaId: function () {\n            return this.idInput.val();\n          },\n          toJSON: function () {\n            var that = this,\n                obj = {};\n            obj[that._valueField] = that.value();\n            obj[that._captchaIdField] = that.getCaptchaId();\n            return obj;\n          },\n          validate: function () {\n            return this._validationHandler();\n          },\n          isValid: function () {\n            return this._isValid;\n          },\n          enable: function (toggle) {\n            var that = this;\n            toggle = toggle !== false;\n\n            that._toggleButtons(toggle);\n\n            that.textbox.enable(toggle);\n\n            if (toggle) {\n              that.captchaImage.removeAttr(\"tabIndex\");\n\n              that._tabindex(that.captchaImage);\n            } else {\n              that.captchaImage.attr(\"tabIndex\", \"-1\");\n            }\n\n            that.captchaImage.toggleClass(Captcha.styles.disabled, !toggle);\n            that.wrapper.toggleClass(Captcha.styles.disabled, !toggle);\n          },\n          readonly: function (toggle) {\n            var that = this;\n            toggle = toggle !== false;\n\n            if (that.resetButton) {\n              that.resetButton.prop(\"disabled\", toggle);\n            }\n\n            that.textbox.readonly(toggle);\n          },\n          speak: function () {\n            return this._audioHandler();\n          },\n          reset: function () {\n            return this._resetHandler();\n          }\n        });\n        kendo.ui.plugin(Captcha);\n        extend(true, Captcha, {\n          styles: CaptchaStyles\n        });\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1094:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.slider\");\n    /***/\n  },\n\n  /***/\n  1095:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.textbox\");\n    /***/\n  },\n\n  /***/\n  1096:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.skeletoncontainer\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}