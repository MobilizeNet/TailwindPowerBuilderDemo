{"ast":null,"code":"/**-----------------------------------------------------------------------------------------\n* Copyright © 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport * as i0 from '@angular/core';\nimport { Component, Input, ContentChildren, QueryList, Directive, Optional, forwardRef, SkipSelf, Host, ContentChild, NgModule } from '@angular/core';\nimport { saveAs } from '@progress/kendo-file-saver';\nimport { IntlService, ExcelExporter, Workbook } from '@progress/kendo-ooxml';\nexport * from '@progress/kendo-ooxml';\nimport { toString } from '@progress/kendo-intl';\nimport * as i1 from '@progress/kendo-angular-l10n';\nimport { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';\nimport { validatePackage } from '@progress/kendo-licensing';\n\nconst compileTemplate = (templateRef, context, updateContext) => {\n  let embeddedView = templateRef.createEmbeddedView(context);\n\n  const result = data => {\n    updateContext(context, data);\n    embeddedView.detectChanges();\n    return embeddedView.rootNodes.reduce((content, rootNode) => {\n      return content + rootNode.textContent;\n    }, '').trim();\n  };\n\n  result.destroy = () => {\n    embeddedView.destroy();\n    embeddedView = null;\n  };\n\n  return result;\n};\n\nconst updateGroupHeaderContext = (context, data) => {\n  context.$implicit = context.group = data;\n  context.field = data.field;\n  context.value = data.value;\n  context.aggregates = data.aggregates;\n};\n\nconst updateGroupFooterContext = (context, data) => {\n  context.group = data.group;\n  context.$implicit = context.aggregates = data;\n};\n\nconst updateFooterContext = (context, data) => {\n  context.aggregates = data.aggregates;\n};\n/**\n * @hidden\n */\n\n\nconst toExporterColumns = sourceColumns => {\n  const exporterColumns = [];\n  let columnIndex = 0;\n\n  const addColumns = (columns, result, level) => {\n    columns.forEach(column => {\n      if (column.level === level) {\n        const exporterColumn = new ExporterColumn(column, columnIndex);\n        result.push(exporterColumn);\n\n        if (column.children && column.children.some(c => c !== column)) {\n          const children = exporterColumn.columns = [];\n          addColumns(column.children, children, level + 1);\n        } else {\n          columnIndex++;\n        }\n      }\n    });\n  };\n\n  addColumns(sourceColumns, exporterColumns, 0);\n  return exporterColumns;\n};\n/**\n * @hidden\n */\n\n\nconst destroyColumns = columns => {\n  if (columns) {\n    columns.forEach(column => {\n      column.destroy();\n    });\n  }\n};\n/**\n * @hidden\n */\n\n\nclass ExporterColumn {\n  constructor(column, columnIndex) {\n    this.title = column.title;\n    this.field = column.field;\n    this.hidden = column.hidden;\n    this.locked = column.locked;\n    this.width = column.width;\n    this.headerCellOptions = column.headerCellOptions;\n    this.cellOptions = column.cellOptions;\n    this.groupHeaderCellOptions = column.groupHeaderCellOptions;\n    this.groupFooterCellOptions = column.groupFooterCellOptions;\n    this.footerCellOptions = column.footerCellOptions;\n\n    if (column.footerTemplate) {\n      this.footerTemplate = compileTemplate(column.footerTemplate.templateRef, {\n        $implicit: column,\n        column: column,\n        columnIndex: columnIndex\n      }, updateFooterContext);\n    }\n\n    if (column.groupFooterTemplate) {\n      this.groupFooterTemplate = compileTemplate(column.groupFooterTemplate.templateRef, {\n        column: column,\n        field: column.field\n      }, updateGroupFooterContext);\n    }\n\n    if (column.groupHeaderTemplate) {\n      this.groupHeaderTemplate = compileTemplate(column.groupHeaderTemplate.templateRef, {}, updateGroupHeaderContext);\n    }\n\n    if (column.groupHeaderColumnTemplate) {\n      this.groupHeaderColumnTemplate = compileTemplate(column.groupHeaderColumnTemplate.templateRef, {}, updateGroupHeaderContext);\n    }\n  }\n\n  destroy() {\n    if (this.footerTemplate) {\n      this.footerTemplate.destroy();\n    }\n\n    if (this.groupFooterTemplate) {\n      this.groupFooterTemplate.destroy();\n    }\n\n    if (this.groupHeaderTemplate) {\n      this.groupHeaderTemplate.destroy();\n    }\n\n    if (this.groupHeaderColumnTemplate) {\n      this.groupHeaderColumnTemplate.destroy();\n    }\n\n    destroyColumns(this.columns);\n  }\n\n}\n\nIntlService.register({\n  toString\n});\n/**\n *\n * @hidden\n */\n\nconst workbookOptions = options => {\n  const columns = toExporterColumns(options.columns);\n  const exporter = new ExcelExporter({\n    columns: columns,\n    data: options.data,\n    filterable: options.filterable,\n    groups: options.group,\n    paddingCellOptions: options.paddingCellOptions,\n    headerPaddingCellOptions: options.headerPaddingCellOptions,\n    collapsible: options.collapsible,\n    hierarchy: options.hierarchy,\n    aggregates: options.aggregates\n  });\n  const result = exporter.workbook();\n  result.creator = options.creator;\n  result.date = options.date;\n  result.rtl = options.rtl;\n  destroyColumns(columns);\n  return result;\n};\n/**\n * @hidden\n */\n\n\nconst toDataURL = options => {\n  const workbook = new Workbook(options);\n  return workbook.toDataURL();\n};\n/**\n * @hidden\n */\n\n\nconst isWorkbookOptions = value => {\n  return value && value.sheets;\n};\n/**\n * @hidden\n */\n\n\nlet ColumnBase = /*#__PURE__*/(() => {\n  class ColumnBase {\n    constructor(parent) {\n      this.parent = parent;\n    }\n    /**\n     * @hidden\n     */\n\n\n    get level() {\n      return this.parent ? this.parent.level + 1 : 0;\n    }\n\n  }\n\n  ColumnBase.ɵfac = function ColumnBase_Factory(t) {\n    return new (t || ColumnBase)(i0.ɵɵdirectiveInject(ColumnBase));\n  };\n\n  ColumnBase.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ColumnBase,\n    selectors: [[\"ng-component\"]],\n    contentQueries: function ColumnBase_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, ColumnBase, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.children = _t);\n      }\n    },\n    inputs: {\n      title: \"title\",\n      width: \"width\",\n      locked: \"locked\",\n      hidden: \"hidden\",\n      headerCellOptions: \"headerCellOptions\"\n    },\n    decls: 0,\n    vars: 0,\n    template: function ColumnBase_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return ColumnBase;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @hidden\n */\n\n\nconst packageMetadata = {\n  name: '@progress/kendo-angular-excel-export',\n  productName: 'Kendo UI for Angular',\n  productCodes: ['KENDOUIANGULAR', 'KENDOUICOMPLETE'],\n  publishDate: 1654678008,\n  version: '',\n  licensingDocsUrl: 'https://www.telerik.com/kendo-angular-ui/my-license/?utm_medium=product&utm_source=kendoangular&utm_campaign=kendo-ui-angular-purchase-license-keys-warning'\n}; // eslint-disable max-line-length\n\n/**\n * Represents the [Kendo UI Excel Export component for Angular]({% slug overview_excelexport %}).\n * Configures the settings for the Excel export of the Kendo UI Grid.\n */\n\nlet ExcelExportComponent = /*#__PURE__*/(() => {\n  class ExcelExportComponent {\n    constructor(localization, zone) {\n      this.localization = localization;\n      this.zone = zone;\n      /**\n       * Specifies the name of the file that is exported to Excel.\n       * @default \"Export.xlsx\"\n       */\n\n      this.fileName = 'Export.xlsx';\n      /**\n       * @hidden\n       */\n\n      this.columns = new QueryList();\n      validatePackage(packageMetadata);\n      this.saveFile = this.saveFile.bind(this);\n    }\n    /**\n     * Saves the data to Excel.\n     *\n     * @param exportData - An optional parameter. Can be the data that will be exported or [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}).\n     */\n\n\n    save(exportData) {\n      this.toDataURL(exportData).then(this.saveFile);\n    }\n    /**\n     * Based on the specified columns and data, returns\n     * [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %})\n     * ([see example]({% slug customrowsandcells_excelexport %})).\n     *\n     * @param exportData - The optional data to be exported.\n     * @returns {WorkbookOptions} - The workbook options.\n     */\n\n\n    workbookOptions(exportData) {\n      const currentData = this.getExportData(exportData);\n      const options = workbookOptions({\n        columns: this.columns,\n        data: currentData.data,\n        group: currentData.group,\n        filterable: this.filterable,\n        creator: this.creator,\n        date: this.date,\n        rtl: this.localization.rtl,\n        paddingCellOptions: this.paddingCellOptions,\n        headerPaddingCellOptions: this.headerPaddingCellOptions,\n        collapsible: this.collapsible\n      });\n      return options;\n    }\n    /**\n     * Returns a promise which will be resolved with the file data URI\n     * ([see example]({% slug filesaving_excelexport %})).\n     *\n     * @param exportData - The optional data or [`WorkbookOptions`]({% slug api_excel-export_workbookoptions %}) that will be used to generate the data URI.\n     * @returns {Promise<string>} - The promise that will be resolved by the file data URI.\n     */\n\n\n    toDataURL(exportData) {\n      const options = isWorkbookOptions(exportData) ? exportData : this.workbookOptions(exportData);\n      return this.zone.runOutsideAngular(() => toDataURL(options));\n    }\n\n    getExportData(exportData) {\n      let result;\n\n      if (exportData) {\n        if (Array.isArray(exportData)) {\n          result = {\n            data: exportData\n          };\n        } else {\n          result = exportData;\n        }\n      } else {\n        result = {\n          data: this.data,\n          group: this.group\n        };\n      }\n\n      return result;\n    }\n\n    saveFile(dataURL) {\n      saveAs(dataURL, this.fileName, {\n        forceProxy: this.forceProxy,\n        proxyURL: this.proxyURL\n      });\n    }\n\n  }\n\n  ExcelExportComponent.ɵfac = function ExcelExportComponent_Factory(t) {\n    return new (t || ExcelExportComponent)(i0.ɵɵdirectiveInject(i1.LocalizationService), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n\n  ExcelExportComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ExcelExportComponent,\n    selectors: [[\"kendo-excelexport\"]],\n    contentQueries: function ExcelExportComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, ColumnBase, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.columns = _t);\n      }\n    },\n    inputs: {\n      fileName: \"fileName\",\n      filterable: \"filterable\",\n      collapsible: \"collapsible\",\n      creator: \"creator\",\n      date: \"date\",\n      forceProxy: \"forceProxy\",\n      proxyURL: \"proxyURL\",\n      data: \"data\",\n      group: \"group\",\n      paddingCellOptions: \"paddingCellOptions\",\n      headerPaddingCellOptions: \"headerPaddingCellOptions\"\n    },\n    exportAs: [\"kendoExcelExport\"],\n    features: [i0.ɵɵProvidersFeature([LocalizationService, {\n      provide: L10N_PREFIX,\n      useValue: 'kendo.excelexport'\n    }])],\n    decls: 0,\n    vars: 0,\n    template: function ExcelExportComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return ExcelExportComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Represents the group header cell template of the Excel Export column component\n * ([see example]({% slug columns_excel-export %}#toc-group-header-template)).\n * Enables you to customize the content of the group header item.\n */\n\n\nlet GroupHeaderTemplateDirective = /*#__PURE__*/(() => {\n  class GroupHeaderTemplateDirective {\n    constructor(templateRef) {\n      this.templateRef = templateRef;\n    }\n\n  }\n\n  GroupHeaderTemplateDirective.ɵfac = function GroupHeaderTemplateDirective_Factory(t) {\n    return new (t || GroupHeaderTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef, 8));\n  };\n\n  GroupHeaderTemplateDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: GroupHeaderTemplateDirective,\n    selectors: [[\"\", \"kendoExcelExportGroupHeaderTemplate\", \"\"]]\n  });\n  return GroupHeaderTemplateDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Represents the group header column template of the Excel Export column component\n * ([see example]({% slug columns_excel-export %}#toc-group-header-column-template)).\n */\n\n\nlet GroupHeaderColumnTemplateDirective = /*#__PURE__*/(() => {\n  class GroupHeaderColumnTemplateDirective {\n    constructor(templateRef) {\n      this.templateRef = templateRef;\n    }\n\n  }\n\n  GroupHeaderColumnTemplateDirective.ɵfac = function GroupHeaderColumnTemplateDirective_Factory(t) {\n    return new (t || GroupHeaderColumnTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef, 8));\n  };\n\n  GroupHeaderColumnTemplateDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: GroupHeaderColumnTemplateDirective,\n    selectors: [[\"\", \"kendoExcelExportGroupHeaderColumnTemplate\", \"\"]]\n  });\n  return GroupHeaderColumnTemplateDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Represents the group footer cell template of the Excel Export column component\n * ([see example]({% slug columns_excel-export %}#toc-group-footer-template)).\n * Enables you to customize the group footer cell of the column.\n */\n\n\nlet GroupFooterTemplateDirective = /*#__PURE__*/(() => {\n  class GroupFooterTemplateDirective {\n    constructor(templateRef) {\n      this.templateRef = templateRef;\n    }\n\n  }\n\n  GroupFooterTemplateDirective.ɵfac = function GroupFooterTemplateDirective_Factory(t) {\n    return new (t || GroupFooterTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef, 8));\n  };\n\n  GroupFooterTemplateDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: GroupFooterTemplateDirective,\n    selectors: [[\"\", \"kendoExcelExportGroupFooterTemplate\", \"\"]]\n  });\n  return GroupFooterTemplateDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Represents the footer cell template of the Excel Export column component\n * ([see example]({% slug columns_excel-export %}#toc-footer-template)).\n * Enables you to customize the footer cell of the column.\n */\n\n\nlet FooterTemplateDirective = /*#__PURE__*/(() => {\n  class FooterTemplateDirective {\n    constructor(templateRef) {\n      this.templateRef = templateRef;\n    }\n\n  }\n\n  FooterTemplateDirective.ɵfac = function FooterTemplateDirective_Factory(t) {\n    return new (t || FooterTemplateDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef, 8));\n  };\n\n  FooterTemplateDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: FooterTemplateDirective,\n    selectors: [[\"\", \"kendoExcelExportFooterTemplate\", \"\"]]\n  });\n  return FooterTemplateDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Represents the columns of the Kendo UI Excel Export component for Angular.\n */\n\n\nlet ColumnComponent = /*#__PURE__*/(() => {\n  class ColumnComponent extends ColumnBase {\n    constructor(parent) {\n      super(parent);\n    }\n\n  }\n\n  ColumnComponent.ɵfac = function ColumnComponent_Factory(t) {\n    return new (t || ColumnComponent)(i0.ɵɵdirectiveInject(ColumnBase, 13));\n  };\n\n  ColumnComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ColumnComponent,\n    selectors: [[\"kendo-excelexport-column\"]],\n    contentQueries: function ColumnComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, GroupHeaderTemplateDirective, 5);\n        i0.ɵɵcontentQuery(dirIndex, GroupHeaderColumnTemplateDirective, 5);\n        i0.ɵɵcontentQuery(dirIndex, GroupFooterTemplateDirective, 5);\n        i0.ɵɵcontentQuery(dirIndex, FooterTemplateDirective, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.groupHeaderTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.groupHeaderColumnTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.groupFooterTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.footerTemplate = _t.first);\n      }\n    },\n    inputs: {\n      field: \"field\",\n      cellOptions: \"cellOptions\",\n      groupHeaderCellOptions: \"groupHeaderCellOptions\",\n      groupFooterCellOptions: \"groupFooterCellOptions\",\n      footerCellOptions: \"footerCellOptions\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: ColumnBase,\n      useExisting: forwardRef(() => ColumnComponent)\n    }]), i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function ColumnComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return ColumnComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Represents the column group component of the Kendo UI Excel Export component.\n */\n\n\nlet ColumnGroupComponent = /*#__PURE__*/(() => {\n  class ColumnGroupComponent extends ColumnBase {\n    constructor(parent) {\n      super(parent);\n      this.parent = parent;\n    }\n\n  }\n\n  ColumnGroupComponent.ɵfac = function ColumnGroupComponent_Factory(t) {\n    return new (t || ColumnGroupComponent)(i0.ɵɵdirectiveInject(ColumnBase, 13));\n  };\n\n  ColumnGroupComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ColumnGroupComponent,\n    selectors: [[\"kendo-excelexport-column-group\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: ColumnBase,\n      useExisting: forwardRef(() => ColumnGroupComponent)\n    }]), i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function ColumnGroupComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return ColumnGroupComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst declarations = [ExcelExportComponent, ColumnComponent, ColumnGroupComponent, FooterTemplateDirective, GroupFooterTemplateDirective, GroupHeaderTemplateDirective, GroupHeaderColumnTemplateDirective];\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the Excel Export component.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the ExcelExportModule module\n * import { ExcelExportModule } from '@progress/kendo-angular-excel-export';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, ExcelExportModule], // import ExcelExportModule module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\n\nlet ExcelExportModule = /*#__PURE__*/(() => {\n  class ExcelExportModule {}\n\n  ExcelExportModule.ɵfac = function ExcelExportModule_Factory(t) {\n    return new (t || ExcelExportModule)();\n  };\n\n  ExcelExportModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ExcelExportModule\n  });\n  ExcelExportModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return ExcelExportModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ColumnBase, ColumnComponent, ColumnGroupComponent, ExcelExportComponent, ExcelExportModule, FooterTemplateDirective, GroupFooterTemplateDirective, GroupHeaderColumnTemplateDirective, GroupHeaderTemplateDirective, isWorkbookOptions, toDataURL, workbookOptions };","map":null,"metadata":{},"sourceType":"module"}