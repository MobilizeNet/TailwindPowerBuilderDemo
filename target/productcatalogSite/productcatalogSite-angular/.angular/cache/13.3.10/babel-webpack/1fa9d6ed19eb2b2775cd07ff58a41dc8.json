{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { DirtyModel } from './DirtyModel';\nimport { DirtyProperty } from './DirtyProperty';\nimport { Inject } from '../Application';\nimport { Constants, Events } from '../Contract';\nimport { ErrorCodes, ExceptionHandlerClass } from '../System/Aop';\n\nvar DirtyCache = function () {\n  function DirtyCache(inject) {\n    if (inject === void 0) {\n      inject = null;\n    }\n\n    var myInject = inject || Inject.Instance;\n    this.items = Array();\n    this.event = myInject.resolve(Constants.EventAggregator);\n  }\n\n  DirtyCache.prototype.change = function (model, property) {\n    var _this = this;\n\n    if (property && model.UniqueID && !model.isCoreSynchronizing()) {\n      if (this.items.some(function (item) {\n        return item.name === model.UniqueID;\n      })) {\n        this.items.filter(function (item) {\n          return item.name === model.UniqueID;\n        }).forEach(function (item) {\n          item.properties.push(new DirtyProperty(property, _this.getPropertyValue(model, property)));\n        });\n      } else {\n        this.items.push(new DirtyModel(model.UniqueID, new Array(new DirtyProperty(property, this.getPropertyValue(model, property)))));\n      }\n    }\n  };\n\n  DirtyCache.prototype.init = function (entity) {\n    this.entity = entity;\n    this.setListener();\n  };\n\n  DirtyCache.prototype.getChanges = function () {\n    var collection = {};\n\n    while (this.items.length > 0) {\n      var currentItem = this.items.pop();\n      collection[currentItem.name] = currentItem.toReduce();\n    }\n\n    return collection;\n  };\n\n  DirtyCache.prototype.setListener = function () {\n    var _this = this;\n\n    this.event.subscribe(Events.Change, function (event) {\n      return _this.change(event.model, event.property);\n    });\n  };\n\n  DirtyCache.prototype.getPropertyValue = function (model, property) {\n    var composedProperty = property.split('.');\n\n    if (composedProperty.length === 1) {\n      return model[property];\n    }\n\n    var result = new Map();\n    result.set(0, model);\n\n    for (var index = 0; index < composedProperty.length; index++) {\n      var prevProp = result.get(index);\n      result.set(index + 1, prevProp[composedProperty[index]]);\n    }\n\n    return result.get(result.size - 1);\n  };\n\n  DirtyCache.prototype.getPropertyName = function (property) {\n    var composedProperty = property.split('.');\n\n    if (composedProperty.length === 1) {\n      return property;\n    } else {\n      return composedProperty[1];\n    }\n  };\n\n  DirtyCache = __decorate([ExceptionHandlerClass(ErrorCodes.ClientCore), __metadata(\"design:paramtypes\", [Object])], DirtyCache);\n  return DirtyCache;\n}();\n\nexport { DirtyCache }; //# sourceMappingURL=data:application/json;base64,","map":null,"metadata":{},"sourceType":"module"}