{"ast":null,"code":"import { Encoding } from './encoding';\nimport inArray from '../../common/in-array';\nconst numberRegex = /^\\d+$/;\nconst extend = Object.assign;\nexport class Postnet extends Encoding {\n  initProperties() {\n    super.initProperties();\n    extend(this, {\n      name: \"Postnet\",\n      START: \"2\",\n      VALID_CODE_LENGTHS: [5, 9, 11],\n      DIGIT_SEPARATOR: \"-\",\n      characterMap: [\"22111\", \"11122\", \"11212\", \"11221\", \"12112\", \"12121\", \"12211\", \"21112\", \"21121\", \"21211\"]\n    });\n  }\n\n  initValue(value, width, height) {\n    this.height = height;\n    this.width = width;\n    this.baseHeight = height / 2;\n    this.value = value.replace(new RegExp(this.DIGIT_SEPARATOR, \"g\"), \"\");\n    this.pattern = [];\n    this.validate(this.value);\n    this.checkSum = 0;\n    this.setBaseUnit();\n  }\n\n  addData() {\n    const value = this.value;\n    this.addPattern(this.START);\n\n    for (let i = 0; i < value.length; i++) {\n      this.addCharacter(value.charAt(i));\n    }\n\n    if (this.options.addCheckSum) {\n      this.addCheckSum();\n    }\n\n    this.addPattern(this.START);\n    this.pattern.pop();\n  }\n\n  addCharacter(character) {\n    const pattern = this.characterMap[character];\n    this.checkSum += parseInt(character, 10);\n    this.addPattern(pattern);\n  }\n\n  addCheckSum() {\n    this.checksum = (10 - this.checkSum % 10) % 10;\n    this.addCharacter(this.checksum);\n  }\n\n  setBaseUnit() {\n    const startStopLength = 3;\n    this.baseUnit = this.width / ((this.value.length + 1) * 10 + startStopLength + this.quietZoneLength);\n  }\n\n  validate(value) {\n    if (!numberRegex.test(value)) {\n      this.invalidCharacterError(value.match(/[^0-9]/)[0]);\n    }\n\n    if (!inArray(value.length, this.VALID_CODE_LENGTHS)) {\n      throw new Error(\"Invalid value length. Valid lengths for the Postnet symbology are \" + this.VALID_CODE_LENGTHS.join(\",\") + \".\");\n    }\n  }\n\n  addPattern(pattern) {\n    let y1;\n\n    for (let i = 0; i < pattern.length; i++) {\n      y1 = this.height - this.baseHeight * pattern.charAt(i);\n      this.pattern.push({\n        width: 1,\n        y1: y1,\n        y2: this.height\n      });\n      this.pattern.push(1);\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}