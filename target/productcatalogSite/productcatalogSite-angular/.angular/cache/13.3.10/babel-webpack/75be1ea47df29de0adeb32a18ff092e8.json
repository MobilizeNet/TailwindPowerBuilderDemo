{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { WMLogger } from '@mobilize/logging';\nimport { Model } from './Model';\nimport { Dictionary } from '../Application';\nimport { ErrorCodes, ExceptionHandlerClass } from '../System/Aop';\nimport { Messages } from '../System/Diagnostics';\n\nvar ModelCollection = function () {\n  function ModelCollection() {\n    this.models = new Dictionary();\n    this.removedModels = [];\n  }\n\n  ModelCollection.prototype.add = function (model) {\n    if (this.models.containsKey(model.UniqueID)) {\n      if (this.models.value(model.UniqueID).IsTempModel) {\n        this.models.remove(model.UniqueID);\n      } else {\n        throw new Error(\"there is a problem, can't add a repeated uniqueID into the model collection.\");\n      }\n    }\n\n    this.models.add(model.UniqueID, model);\n  };\n\n  ModelCollection.prototype.apply = function (fn) {\n    if (fn) {\n      this.models.values().forEach(function (item) {\n        return fn(item);\n      });\n    }\n  };\n\n  ModelCollection.prototype.getModel = function (key) {\n    if (this.models.containsKey(key)) {\n      return this.models.value(key);\n    }\n\n    WMLogger.instance().error(Messages.Error.ModelNotFound, {\n      id: key\n    });\n    return null;\n  };\n\n  ModelCollection.prototype.getParentByKey = function (key) {\n    var parentUniqueID = key.substr(key.indexOf(Model.separator) + Model.separator.length);\n    return this.getModel(parentUniqueID);\n  };\n\n  ModelCollection.prototype.getParentByModel = function (model) {\n    return this.getParentByKey(model.UniqueID);\n  };\n\n  ModelCollection.prototype.addRange = function (array) {\n    var _this = this;\n\n    array.forEach(function (element) {\n      _this.add(element);\n    });\n  };\n\n  Object.defineProperty(ModelCollection.prototype, \"length\", {\n    get: function () {\n      return this.models.length;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ModelCollection.prototype.deleteCascade = function (key) {\n    var model = this.getModel(key);\n\n    if (model) {\n      for (var propertyName in model) {\n        if (this.isValidModelProperty(model, propertyName)) {\n          this.removePointer(propertyName, key);\n        }\n      }\n\n      this.removedModels.push(key);\n      this.models.remove(key);\n    }\n  };\n\n  ModelCollection.prototype.removePointer = function (propertyName, key) {\n    propertyName = propertyName === 'Items' ? '_items' : propertyName;\n    var pointerName = propertyName + Model.separator + key;\n    this.deleteCascade(pointerName);\n  };\n\n  ModelCollection.prototype.isValidModelProperty = function (model, propertyName) {\n    return model.hasOwnProperty(propertyName) && model[propertyName] && model[propertyName].UniqueID;\n  };\n\n  ModelCollection.prototype.replace = function (model) {\n    this.models.replace(model.UniqueID, model);\n  };\n\n  ModelCollection.prototype.switchIds = function (oldUniqueId, newUniqueId) {\n    var model = this.models.value(oldUniqueId);\n    var tempModel = this.models.value(newUniqueId);\n\n    if (model) {\n      model.UniqueID = newUniqueId;\n      this.models.remove(oldUniqueId);\n      this.models.add(newUniqueId, model);\n      var parentArray = this.getParentByKey(newUniqueId);\n\n      if (parentArray && parentArray.isArray) {\n        if (tempModel) {\n          tempModel.UniqueID = oldUniqueId;\n        } else {\n          tempModel = new Model(oldUniqueId);\n        }\n\n        tempModel.IsTempModel = true;\n        this.models.add(oldUniqueId, tempModel);\n        var radix = 10;\n        var oldIndex = parseInt(oldUniqueId.split(Model.separator)[0], radix);\n        var newIndex = parseInt(newUniqueId.split(Model.separator)[0], radix);\n        parentArray.splice(oldIndex, 1, tempModel);\n        parentArray.splice(newIndex, 1, model);\n      }\n    }\n  };\n\n  ModelCollection.prototype.exists = function (model) {\n    return this.models.containsKey(model.UniqueID) && !this.models.value(model.UniqueID).IsTempModel;\n  };\n\n  ModelCollection.prototype.search = function (name) {\n    var model = null;\n    this.models.values().forEach(function (item) {\n      if (item && item.UniqueID && item.UniqueID.indexOf(name) > -1) {\n        model = item;\n      }\n    });\n    return model;\n  };\n\n  ModelCollection.prototype.toArray = function () {\n    return this.models.values();\n  };\n\n  ModelCollection = __decorate([ExceptionHandlerClass(ErrorCodes.ClientCore), __metadata(\"design:paramtypes\", [])], ModelCollection);\n  return ModelCollection;\n}();\n\nexport { ModelCollection }; //# sourceMappingURL=data:application/json;base64,","map":null,"metadata":{},"sourceType":"module"}