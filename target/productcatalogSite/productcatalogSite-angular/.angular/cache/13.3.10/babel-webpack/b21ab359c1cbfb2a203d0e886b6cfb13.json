{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1110);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1051:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.core\");\n    /***/\n  },\n\n  /***/\n  1052:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.popup\");\n    /***/\n  },\n\n  /***/\n  1089:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.html.button\");\n    /***/\n  },\n\n  /***/\n  1094:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.slider\");\n    /***/\n  },\n\n  /***/\n  1095:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.textbox\");\n    /***/\n  },\n\n  /***/\n  1110:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1051), __webpack_require__(1111), __webpack_require__(1052), __webpack_require__(1094), __webpack_require__(1112), __webpack_require__(1113), __webpack_require__(1114), __webpack_require__(1095), __webpack_require__(1115), __webpack_require__(1089), __webpack_require__(1116), __webpack_require__(1117)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"colorpicker\",\n        name: \"Color tools\",\n        category: \"web\",\n        description: \"Color selection widgets\",\n        depends: [\"core\", \"color\", \"popup\", \"slider\", \"userevents\", \"button\", \"binder\", \"textbox\", \"numerictextbox\", \"html.button\"]\n      };\n\n      (function ($, undefined) {\n        // WARNING: removing the following jshint declaration and turning\n        // == into === to make JSHint happy will break functionality.\n\n        /*jshint eqnull:true  */\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            Widget = ui.Widget,\n            Color = kendo.Color,\n            parseColor = kendo.parseColor,\n            KEYS = kendo.keys,\n            BACKGROUNDCOLOR = \"background-color\",\n            MESSAGES = {\n          apply: \"Apply\",\n          cancel: \"Cancel\",\n          noColor: \"no color\",\n          clearColor: \"Clear color\",\n          previewInput: null,\n          contrastRatio: \"Contrast ratio:\",\n          fail: \"Fail\",\n          pass: \"Pass\",\n          hex: \"HEX\",\n          toggleFormat: \"Toggle format\",\n          red: \"Red\",\n          green: \"Green\",\n          blue: \"Blue\",\n          alpha: \"Alpha\",\n          gradient: \"Gradient view\",\n          palette: \"Palette view\"\n        },\n            NS = \".kendoColorTools\",\n            CLICK_NS = \"click\" + NS,\n            KEYDOWN_NS = \"keydown\" + NS,\n            ColorSelector = ui.colorpicker.ColorSelector,\n            FlatColorPicker = ui.FlatColorPicker;\n        /* -----[ The ColorPicker widget ]----- */\n\n        var ColorPicker = Widget.extend({\n          init: function (element, options) {\n            var that = this; // Legacy support for the cases where only palette is defined\n\n            if (options && options.palette && !options.view) {\n              options.view = \"palette\";\n            }\n\n            Widget.fn.init.call(that, element, options);\n            options = that.options = kendo.deepExtend({}, that.options, options);\n            element = that.element;\n            var value = element.attr(\"value\") || element.val();\n\n            if (value) {\n              value = parseColor(value, true);\n            } else {\n              value = parseColor(options.value, true);\n            }\n\n            that._value = options.value = value;\n\n            var _buttonHtml = kendo.html.renderButton('<button class=\"k-input-button\" unselectable=\"on\" aria-label=\"select\" tabindex=\"-1\"></button>', $.extend({}, that.options, {\n              icon: \"arrow-s\"\n            }));\n\n            var content = that._inputWrapper = that.wrapper = $(that._template($.extend({}, that.options, {\n              _buttonHtml: _buttonHtml\n            })));\n\n            that._applyCssClasses();\n\n            element.hide().after(content);\n\n            if (element.is(\"input\")) {\n              element.appendTo(content); // if there exists a <label> associated with this\n              // input field, we must catch clicks on it to prevent\n              // the built-in color picker from showing up.\n              // https://github.com/telerik/kendo-ui-core/issues/292\n\n              var label = element.closest(\"label\");\n              var id = element.attr(\"id\");\n\n              if (id) {\n                label = label.add('label[for=\"' + id + '\"]');\n              }\n\n              label.on(\"click\", function (ev) {\n                that.open();\n                ev.preventDefault();\n              });\n            }\n\n            that._tabIndex = element.attr(\"tabIndex\") || 0;\n            that.enable(!element.attr(\"disabled\"));\n            var accesskey = element.attr(\"accesskey\");\n\n            if (accesskey) {\n              element.attr(\"accesskey\", null);\n              content.attr(\"accesskey\", accesskey);\n            }\n\n            that.bind(\"activate\", function (ev) {\n              if (!ev.isDefaultPrevented()) {\n                that.toggle();\n              }\n            });\n\n            that._updateUI(value);\n          },\n          destroy: function () {\n            this.wrapper.off(NS).find(\"*\").off(NS);\n\n            if (this._popup) {\n              this._selector.destroy();\n\n              this._popup.destroy();\n            }\n\n            this._selector = this._popup = this.wrapper = null;\n            Widget.fn.destroy.call(this);\n          },\n          enable: function (enable) {\n            var that = this,\n                wrapper = that.wrapper,\n                arrow = wrapper.find(\".k-input-button\");\n\n            if (arguments.length === 0) {\n              enable = true;\n            }\n\n            that.element.attr(\"disabled\", !enable);\n            wrapper.attr(\"aria-disabled\", !enable);\n            arrow.off(NS).on(\"mousedown\" + NS, preventDefault);\n            wrapper.addClass(\"k-disabled\").removeAttr(\"tabIndex\").add(\"*\", wrapper).off(NS);\n\n            if (enable) {\n              wrapper.removeClass(\"k-disabled\").attr(\"tabIndex\", that._tabIndex).on(\"mouseenter\" + NS, function () {\n                wrapper.addClass(\"k-hover\");\n              }).on(\"mouseleave\" + NS, function () {\n                wrapper.removeClass(\"k-hover\");\n              }).on(\"focus\" + NS, function () {\n                wrapper.addClass(\"k-focus\");\n              }).on(\"blur\" + NS, function () {\n                wrapper.removeClass(\"k-focus\");\n              }).on(KEYDOWN_NS, bind(that._keydown, that)).on(CLICK_NS, \".k-input-button\", bind(that.toggle, that)).on(CLICK_NS, \".k-input-inner\", function () {\n                that.trigger(\"activate\");\n              });\n            } else {\n              that.close();\n            }\n          },\n          _template: kendo.template('<span role=\"textbox\" aria-haspopup=\"true\" class=\"k-colorpicker k-picker k-icon-picker\">' + '<span  class=\"k-input-inner\">' + '<span class=\"k-value-icon k-color-preview #: toolIcon ? \"k-icon-color-preview\" : \"\" #\">' + '# if (toolIcon) { #' + '<span class=\"k-color-preview-icon k-icon #= toolIcon #\"></span>' + '# } #' + '<span class=\"k-color-preview-mask\"></span>' + '</span>' + '</span >' + '#= _buttonHtml #' + '</span>'),\n          options: {\n            name: \"ColorPicker\",\n            closeOnSelect: false,\n            contrastTool: false,\n            palette: null,\n            columns: 10,\n            toolIcon: null,\n            value: null,\n            messages: MESSAGES,\n            opacity: false,\n            buttons: true,\n            preview: true,\n            clearButton: false,\n            input: true,\n            format: \"hex\",\n            formats: [\"rgb\", \"hex\"],\n            view: \"gradient\",\n            views: [\"gradient\", \"palette\"],\n            backgroundColor: null,\n            ARIATemplate: 'Current selected color is #=data || \"\"#',\n            size: \"medium\",\n            rounded: \"medium\",\n            fillMode: \"solid\"\n          },\n          events: [\"activate\", \"change\", \"select\", \"open\", \"close\"],\n          open: function () {\n            if (!this.element.prop(\"disabled\")) {\n              this._getPopup().open();\n            }\n          },\n          close: function () {\n            var selOptions = this._selector && this._selector.options || {};\n            selOptions._closing = true;\n\n            this._getPopup().close();\n\n            delete selOptions._closing;\n          },\n          toggle: function () {\n            if (!this.element.prop(\"disabled\")) {\n              this._getPopup().toggle();\n            }\n          },\n          setBackgroundColor: function (color) {\n            var that = this,\n                handler = function () {\n              that._selector.setBackgroundColor(color);\n            };\n\n            that.options.contrastTool.backgroundColor = color;\n\n            if (that._selector && that._popup && that._popup.visible()) {\n              that._selector.setBackgroundColor(color);\n            } else if (that._popup) {\n              that._popup.unbind(\"activate\", handler);\n\n              that._popup.bind(\"activate\", handler);\n            }\n          },\n          _noColorIcon: function () {\n            return this.wrapper.find(\".k-color-preview\");\n          },\n          color: ColorSelector.fn.color,\n          value: ColorSelector.fn.value,\n          _select: ColorSelector.fn._select,\n          _triggerSelect: ColorSelector.fn._triggerSelect,\n          _isInputTypeColor: function () {\n            var el = this.element[0];\n            return /^input$/i.test(el.tagName) && /^color$/i.test(el.type);\n          },\n          _updateUI: function (value, dontChangeSelector) {\n            var formattedValue = \"\";\n\n            if (value) {\n              if (this._isInputTypeColor() || value.a == 1) {\n                // seems that input type=\"color\" doesn't support opacity\n                // in colors; the only accepted format is hex #RRGGBB\n                formattedValue = value.toCss();\n              } else {\n                formattedValue = value.toCssRgba();\n              }\n\n              this.element.val(formattedValue);\n            }\n\n            if (!this._ariaTemplate) {\n              this._ariaTemplate = kendo.template(this.options.ARIATemplate);\n            }\n\n            this.wrapper.attr(\"aria-label\", this._ariaTemplate(formattedValue));\n\n            this._triggerSelect(value);\n\n            this.wrapper.find(\".k-color-preview-mask\").css(BACKGROUNDCOLOR, value ? value.toDisplay() : \"\");\n\n            this._noColorIcon().toggleClass(\"k-no-color\", !formattedValue);\n\n            if (this._selector && !dontChangeSelector) {\n              this._selector.value(value);\n            }\n          },\n          _keydown: function (ev) {\n            var key = ev.keyCode;\n\n            if (this._getPopup().visible()) {\n              if (key == KEYS.ESC) {\n                this._selector._cancel();\n              } else {\n                this._selector._keydown(ev);\n              }\n\n              preventDefault(ev);\n            } else if (key == KEYS.ENTER || key == KEYS.DOWN) {\n              this.open();\n              preventDefault(ev);\n            }\n          },\n          _getPopup: function () {\n            var that = this,\n                popup = that._popup;\n\n            if (!popup) {\n              var options = that.options;\n              var selectorType;\n              selectorType = FlatColorPicker;\n              options.autoupdate = options.buttons !== true;\n              delete options.select;\n              delete options.change;\n              delete options.cancel;\n              var id = kendo.guid();\n              var selectorWrapper = $('<div id=\"' + id + '\" class=\"k-colorpicker-popup\"></div>').appendTo(document.body);\n              var selector = that._selector = new selectorType($('<div></div>').appendTo(selectorWrapper), options);\n              that.wrapper.attr(\"aria-owns\", id);\n              that._popup = popup = selectorWrapper.kendoPopup({\n                anchor: that.wrapper,\n                adjustSize: {\n                  width: 5,\n                  height: 0\n                }\n              }).data(\"kendoPopup\");\n              selector.bind({\n                select: function (ev) {\n                  that._updateUI(parseColor(ev.value), true);\n                },\n                change: function (ev) {\n                  if (that.options.buttons) {\n                    that._select(selector.color());\n                  } else {\n                    that._updateUI(parseColor(ev.value), true);\n                  }\n\n                  if (that.options.buttons || that._selector.options.view === \"palette\" && that.options.closeOnSelect) {\n                    that.close();\n                  }\n                },\n                cancel: function () {\n                  that.close();\n                }\n              });\n              popup.bind({\n                close: function (ev) {\n                  if (that.trigger(\"close\")) {\n                    ev.preventDefault();\n                    return;\n                  }\n\n                  that.wrapper.removeClass(\"k-focus\");\n                  var color = selector.color();\n\n                  if (!that.options.buttons) {\n                    that._select(color);\n                  } else {\n                    that._select(that.color());\n                  }\n\n                  color = that.color();\n\n                  if (color && color.h) {\n                    that._cachedHue = color.h;\n                  }\n\n                  var clickedOutside = event && event instanceof MouseEvent && $(event.target).parents(\".k-colorpicker-popup\").length === 0;\n\n                  if (!clickedOutside) {\n                    setTimeout(function () {\n                      if (that.wrapper && !that.wrapper.is(\"[unselectable='on']\")) {\n                        that.wrapper.trigger(\"focus\");\n                      }\n                    }, 0);\n                  }\n                },\n                open: function (ev) {\n                  if (that.trigger(\"open\")) {\n                    ev.preventDefault();\n                  } else {\n                    that.wrapper.addClass(\"k-focus\");\n                  }\n                },\n                activate: function () {\n                  var hsvColor,\n                      selectedColor = that.color();\n\n                  if (selectedColor) {\n                    selectedColor = selectedColor.toHSV();\n                    hsvColor = Color.fromHSV(that._cachedHue || 0, selectedColor.s, selectedColor.v, selectedColor.a);\n                    selectedColor = selectedColor.equals(hsvColor) ? hsvColor : selectedColor;\n                  }\n\n                  selector.value(selectedColor);\n                  selector.focus();\n                  that.wrapper.addClass(\"k-focus\");\n                }\n              });\n            }\n\n            return popup;\n          }\n        });\n\n        function preventDefault(ev) {\n          ev.preventDefault();\n        }\n\n        function bind(callback, obj) {\n          return function () {\n            return callback.apply(obj, arguments);\n          };\n        }\n\n        ui.plugin(ColorPicker);\n        kendo.cssProperties.registerPrefix(\"ColorPicker\", \"k-picker-\");\n        kendo.cssProperties.registerValues(\"ColorPicker\", [{\n          prop: \"rounded\",\n          values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n        }]);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1111:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.color\");\n    /***/\n  },\n\n  /***/\n  1112:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.userevents\");\n    /***/\n  },\n\n  /***/\n  1113:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.button\");\n    /***/\n  },\n\n  /***/\n  1114:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.binder\");\n    /***/\n  },\n\n  /***/\n  1115:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.numerictextbox\");\n    /***/\n  },\n\n  /***/\n  1116:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./colorpicker/colorselector\");\n    /***/\n  },\n\n  /***/\n  1117:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./colorpicker/flatcolorpicker\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}