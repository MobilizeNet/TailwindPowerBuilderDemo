{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1550);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1113:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.button\");\n    /***/\n  },\n\n  /***/\n  1379:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.form\");\n    /***/\n  },\n\n  /***/\n  1534:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.stepper\");\n    /***/\n  },\n\n  /***/\n  1550:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1534), __webpack_require__(1113), __webpack_require__(1379)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"wizard\",\n        name: \"Wizard\",\n        category: \"web\",\n        description: \"The Wizard widget serves as a container of stepped process.\",\n        depends: [\"stepper\", \"button\", \"form\"],\n        features: [{\n          id: \"wizard-form-dropdowns\",\n          name: \"DropDowns\",\n          description: \"Support for DropDown editors in Wizard From\",\n          depends: [\"autocomplete\", \"combobox\", \"multiselect\", \"dropdowntree\", \"multicolumncombobox\"]\n        }, {\n          id: \"wizard-form-datepickers\",\n          name: \"DatePickers\",\n          description: \"Support for DatePicker editors in Wizard From\",\n          depends: [\"dateinput\", \"datepicker\", \"datetimepicker\", \"timepicker\"]\n        }, {\n          id: \"wizard-form-inputs\",\n          name: \"Inputs\",\n          description: \"Support for Input editors in Wizard From\",\n          depends: [\"numerictextbox\", \"maskedtextbox\", \"switch\", \"rating\", \"slider\", \"colorpicker\"]\n        }, {\n          id: \"wizard-form-editor\",\n          name: \"Editor\",\n          description: \"Support for Editor editor in Wizard From\",\n          depends: [\"editor\"]\n        }]\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n            extend = $.extend,\n            WIZARD = \".kendoWizard\",\n            CLICK = \"click\",\n            ACTIVATE = \"activate\",\n            SELECT = \"select\",\n            RESET = \"reset\",\n            SUBMIT = \"submit\",\n            PREVIOUS = \"previous\",\n            NEXT = \"next\",\n            DONE = \"done\",\n            ERROR = \"error\",\n            CONTENTLOAD = \"contentLoad\",\n            FORM_VALIDATE_FAILED = \"formValidateFailed\",\n            HIDDEN = \"k-hidden\",\n            STEPPER_LIST = \"k-step-list\",\n            STEPPER_STEP_LINK = \"k-step-link\",\n            ARIA_SELECTED = \"aria-selected\",\n            ARIA_CONTROLS = \"aria-controls\",\n            ARIA_HIDDEN = \"aria-hidden\",\n            ARIA_EXPANDED = \"aria-expanded\",\n            ARIA_LABEL = \"aria-label\",\n            VERTICAL = \"vertical\",\n            HORIZONTAL = \"horizontal\",\n            BOTTOM = \"bottom\",\n            RIGHT = \"right\",\n            LEFT = \"left\",\n            DOT = \".\",\n            SPACE = \" \",\n            DASH = \"-\",\n            ID = \"id\",\n            TABINDEX = \"tabindex\",\n            ROLE = \"role\",\n            DATA_WIZARD_PREFIX = \"data-wizard-\";\n        var wizardClasses = {\n          wizard: \"k-widget k-wizard\",\n          horizontalWizard: \"k-wizard-horizontal\",\n          verticalWizard: \"k-wizard-vertical\",\n          rightWizard: \"k-wizard-right\",\n          leftWizard: \"k-wizard-left\",\n          wizardStepsContainer: \"k-wizard-steps\",\n          wizardStep: \"k-wizard-step\",\n          wizardContent: \"k-wizard-content\",\n          wizardButtons: \"k-wizard-buttons\",\n          wizardLeftButtons: \"k-wizard-buttons-left\",\n          wizardRightButtons: \"k-wizard-buttons-right\",\n          wizardPager: \"k-wizard-pager\"\n        };\n        var Step = kendo.Class.extend({\n          init: function (options) {\n            this.options = extend({}, this.options, options);\n\n            if (this.options.actionBar) {\n              this._processButtons();\n            }\n\n            this._render();\n          },\n          options: {\n            name: \"WizardStep\",\n            index: 0,\n            content: \"\",\n            contentUrl: null,\n            contentId: null,\n            markupContainer: null,\n            form: null,\n            actionBar: true,\n            buttons: [],\n            pager: true,\n            selected: false,\n            enabled: true,\n            className: \"\",\n            totalSteps: 1,\n            wizardId: \"wizard\",\n            formTag: \"form\",\n            messages: {}\n          },\n          _defaultButtonsConfiguration: {\n            first: [RESET, NEXT],\n            middle: [RESET, PREVIOUS, NEXT],\n            last: [RESET, PREVIOUS, DONE]\n          },\n          _pagerTemplate: '<span class=\"k-wizard-pager\">' + '#: step # ' + '#: currentStep # ' + '#: of # ' + '#: totalSteps #' + '</span>',\n          buttons: function () {\n            return this._buttons;\n          },\n          load: function () {\n            if (this.options.contentUrl) {\n              this._ajaxRequest();\n            }\n          },\n          resetButtons: function () {\n            var buttonsContainer = this.element.find(DOT + wizardClasses.wizardButtons);\n            kendo.destroy(buttonsContainer);\n            buttonsContainer.remove();\n            this.options.buttons = [];\n\n            this._processButtons();\n\n            this._buttonsContainer();\n          },\n          _ajaxRequest: function (wizard, triggerActivate) {\n            var that = this,\n                url = that.options.contentUrl,\n                data = {},\n                element = that.element;\n            var ajaxOptions = {\n              type: \"GET\",\n              cache: false,\n              url: url,\n              dataType: \"html\",\n              data: data,\n              error: function (xhr, status) {\n                if (wizard) {\n                  wizard._triggerError(xhr, status, that);\n                }\n              },\n              complete: function () {\n                if (wizard && triggerActivate) {\n                  wizard._triggerActivate(that);\n                }\n              },\n              success: function (content) {\n                var contentElement = element.find(DOT + wizardClasses.wizardContent);\n\n                try {\n                  if (wizard) {\n                    wizard.angular(\"cleanup\", function () {\n                      return {\n                        elements: element.get()\n                      };\n                    });\n                  }\n\n                  kendo.destroy(contentElement);\n                  contentElement.html(content);\n\n                  if (wizard) {\n                    wizard._triggerContentLoad(that);\n                  }\n                } catch (e) {\n                  this.error(this.xhr, \"error\");\n                }\n\n                if (wizard) {\n                  wizard.angular(\"compile\", function () {\n                    return {\n                      elements: element.get()\n                    };\n                  });\n                }\n              }\n            };\n\n            if (typeof url === \"object\") {\n              ajaxOptions = $.extend(true, {}, ajaxOptions, url);\n            }\n\n            $.ajax(ajaxOptions);\n          },\n          _ariaAttributes: function () {\n            var element = this.element,\n                options = this.options,\n                messages = options.messages,\n                label = messages.step + \" \" + (options.index + 1) + \" \" + messages.of + \" \" + options.totalSteps;\n            element.attr(ROLE, \"tabpanel\").attr(TABINDEX, 0).attr(ID, options.wizardId + DASH + options.index).attr(ARIA_EXPANDED, options.selected).attr(ARIA_LABEL, label);\n          },\n          _buttonFactory: function (buttonOptions) {\n            var button = $(\"<button type='button'>\").kendoButton({\n              themeColor: buttonOptions.primary ? \"primary\" : \"base\"\n            }).getKendoButton(),\n                buttonElement = button.element;\n            buttonElement.attr(DATA_WIZARD_PREFIX + buttonOptions.name, \"\");\n            buttonElement.text(buttonOptions.text);\n\n            if (buttonOptions.click) {\n              button.bind(CLICK, buttonOptions.click);\n            }\n\n            if (buttonOptions.enabled === false) {\n              button.enable(false);\n            }\n\n            if (buttonOptions.position === LEFT) {\n              this._leftButtonsContainer.append(buttonElement);\n            } else {\n              this._rightButtonsContainer.append(buttonElement);\n            }\n\n            if (buttonOptions.name === \"done\" && this.options.formTag !== \"form\") {\n              button.element.attr(\"type\", SUBMIT);\n            }\n\n            this._buttons.push(button);\n          },\n          _buttonsContainer: function () {\n            var buttonsContainer = $(\"<div>\").addClass(wizardClasses.wizardButtons);\n            this._leftButtonsContainer = $(\"<span>\").addClass(wizardClasses.wizardLeftButtons);\n            this._rightButtonsContainer = $(\"<span>\").addClass(wizardClasses.wizardRightButtons);\n            buttonsContainer.append(this._leftButtonsContainer);\n            buttonsContainer.append(this._rightButtonsContainer);\n            this.element.append(buttonsContainer);\n            this._buttons = [];\n            this.options.buttons.map(this._buttonFactory.bind(this));\n\n            if (this.options.pager) {\n              this._pager();\n            }\n          },\n          _content: function () {\n            var options = this.options,\n                loadFromRemote = !!options.contentUrl,\n                contentElement = $(\"<div>\").addClass(wizardClasses.wizardContent);\n\n            if (!loadFromRemote && options.contentId) {\n              contentElement.html($(\"#\" + options.contentId).html());\n            } else if (!loadFromRemote && options.content) {\n              contentElement.append(options.content);\n            }\n\n            if (options.markupContainer) {\n              if (!loadFromRemote && !options.contentId && !options.content) {\n                contentElement.append(options.markupContainer.html());\n              }\n\n              kendo.destroy(options.markupContainer);\n              options.markupContainer.remove();\n            }\n\n            this.element.prepend(contentElement);\n          },\n          _form: function () {\n            var formTag = \"<\" + this.options.formTag + \">\",\n                formElement = $(formTag).hide(),\n                contentElement = $(\"<div>\").addClass(wizardClasses.wizardContent),\n                formOptions = this.options.form;\n            $(\"body\").append(formElement);\n            this.element.prepend(contentElement);\n            formOptions.buttonsTemplate = formOptions.buttonsTemplate || \"\";\n            this.form = formElement.kendoForm(formOptions).getKendoForm();\n            contentElement.append(formElement.show());\n          },\n          _iterateButton: function (button) {\n            var messages = this.options.messages;\n\n            if (typeof button === \"string\") {\n              button = {\n                name: button\n              };\n            }\n\n            if (!button.text) {\n              button.text = messages[button.name] || button.name.charAt(0).toUpperCase() + button.name.slice(1);\n            }\n\n            if (button.primary !== false && (button.name === DONE || button.name === NEXT)) {\n              button.primary = true;\n            }\n\n            if (!button.position && button.name === RESET) {\n              button.position = LEFT;\n            } else if (!button.position) {\n              button.position = RIGHT;\n            }\n\n            return button;\n          },\n          _pager: function () {\n            var options = this.options,\n                messages = options.messages,\n                pagerData = {\n              step: messages.step,\n              currentStep: options.index + 1,\n              of: messages.of,\n              totalSteps: options.totalSteps\n            },\n                pager = kendo.template(this._pagerTemplate)(pagerData);\n\n            this._leftButtonsContainer.append(pager);\n          },\n          _processButtons: function () {\n            var options = this.options,\n                buttonsOptions = options.buttons,\n                defaultButtons = this._defaultButtonsConfiguration;\n\n            if (!buttonsOptions || !buttonsOptions.length || buttonsOptions.length === 0) {\n              this.options.defaultButtons = true;\n\n              if (options.index === 0) {\n                buttonsOptions = defaultButtons.first;\n              } else if (options.index + 1 === options.totalSteps) {\n                buttonsOptions = defaultButtons.last;\n              } else {\n                buttonsOptions = defaultButtons.middle;\n              }\n            }\n\n            this.options.buttons = buttonsOptions.map(this._iterateButton.bind(this));\n          },\n          _render: function () {\n            this.element = $(\"<div>\").addClass(wizardClasses.wizardStep);\n\n            if (this.options.className) {\n              this.element.addClass(this.options.className);\n            }\n\n            this._ariaAttributes();\n\n            if (!this.options.selected) {\n              this.element.addClass(HIDDEN);\n              this.element.attr(ARIA_HIDDEN, true);\n            }\n\n            if (this.options.actionBar) {\n              this._buttonsContainer();\n            }\n\n            if (this.options.form) {\n              this._form();\n            } else {\n              this._content();\n            }\n          }\n        });\n        var Wizard = Widget.extend({\n          init: function (element, options) {\n            var that = this;\n            options = options || {};\n            Widget.fn.init.call(that, element, options);\n\n            that._wrapper();\n\n            that._createSteps();\n\n            that._stepper();\n\n            that._attachEvents();\n          },\n          options: {\n            name: \"Wizard\",\n            contentPosition: BOTTOM,\n            actionBar: true,\n            pager: true,\n            loadOnDemand: false,\n            reloadOnSelect: false,\n            validateForms: true,\n            stepper: {},\n            steps: [],\n            messages: {\n              reset: \"Reset\",\n              previous: \"Previous\",\n              next: \"Next\",\n              done: \"Done\",\n              step: \"Step\",\n              of: \"of\"\n            }\n          },\n          events: [ACTIVATE, SELECT, RESET, DONE, ERROR, CONTENTLOAD, FORM_VALIDATE_FAILED],\n          destroy: function () {\n            var that = this;\n            Widget.fn.destroy.call(that.stepper);\n            Widget.fn.destroy.call(that);\n            that.wrapper.off(WIZARD);\n          },\n          activeStep: function () {\n            return this.currentStep;\n          },\n          enableStep: function (stepIndex, value) {\n            var that = this,\n                targetStep;\n\n            if (stepIndex === undefined || stepIndex === null || isNaN(stepIndex) || stepIndex >= that._steps.length || stepIndex < 0) {\n              return;\n            }\n\n            stepIndex = Number(stepIndex);\n            targetStep = that._steps[stepIndex];\n\n            if (targetStep.options.enabled === value) {\n              return;\n            } else {\n              targetStep.options.enabled = value;\n              that.stepper.steps()[stepIndex].enable(value);\n            }\n          },\n          insertAt: function (index, stepOptions) {\n            var steps = this._steps,\n                numberOfSteps = steps.length,\n                messages = this.options.messages,\n                step,\n                stepperStepOptions,\n                alteredStepIndex,\n                alteredStep,\n                iterateStep = function (step, i) {\n              var label;\n\n              if (i >= index) {\n                step.options.index += 1;\n              }\n\n              step.options.totalSteps += 1;\n              step.element.find(DOT + wizardClasses.wizardPager).remove();\n\n              step._pager();\n\n              label = messages.step + \" \" + (step.options.index + 1) + \" \" + messages.of + \" \" + (numberOfSteps + 1);\n              step.element.attr(ARIA_LABEL, label);\n            };\n\n            if (index === null || index === undefined || isNaN(index) || index < 0 || index > numberOfSteps) {\n              return;\n            }\n\n            if (!stepOptions) {\n              return;\n            }\n\n            stepperStepOptions = this._mapStepForStepper(stepOptions);\n            this.stepper.insertAt(index, stepperStepOptions);\n            stepOptions.totalSteps = numberOfSteps + 1;\n            stepOptions.messages = messages;\n            stepOptions.index = index;\n            stepOptions.formTag = this.wrapper.is(\"form\") ? \"div\" : \"form\";\n\n            if (this.options.pager === false && stepOptions.pager !== true) {\n              stepOptions.pager = false;\n            }\n\n            step = new Step(stepOptions);\n            steps.forEach(iterateStep);\n            steps.splice(index, 0, step);\n\n            if (index === 0 || index === numberOfSteps) {\n              alteredStepIndex = index === 0 ? 1 : numberOfSteps - 1;\n              alteredStep = steps[alteredStepIndex];\n\n              if (alteredStep.options.defaultButtons) {\n                alteredStep.resetButtons();\n              }\n            }\n\n            this._insertStepElementAtIndex(index, step.element);\n\n            this._stepperAriaAttributes();\n\n            this._steps.forEach(this._iterateAriaStep);\n          },\n          next: function () {\n            var that = this,\n                stepsLength = that._steps.length,\n                currentStepIndex = that.currentStep.options.index;\n\n            if (currentStepIndex + 1 === stepsLength) {\n              return;\n            } else if (!that.steps()[currentStepIndex + 1].options.enabled) {\n              return;\n            } else {\n              that._select(currentStepIndex + 1);\n\n              that._selectStepper(currentStepIndex + 1);\n            }\n          },\n          previous: function () {\n            var that = this,\n                currentStepIndex = that.currentStep.options.index;\n\n            if (currentStepIndex === 0) {\n              return;\n            } else if (!that.steps()[currentStepIndex - 1].options.enabled) {\n              return;\n            } else {\n              that._select(currentStepIndex - 1);\n\n              that._selectStepper(currentStepIndex - 1);\n            }\n          },\n          removeAt: function (index) {\n            var steps = this._steps,\n                numberOfSteps = steps.length,\n                stepContentElement = $(this.element.find(DOT + wizardClasses.wizardStep).get(index)),\n                removedStep,\n                newSelectedStepIndex,\n                alteredStepIndex,\n                alteredStep,\n                i,\n                step,\n                label,\n                messages = this.options.messages;\n\n            if (index === null || index === undefined || isNaN(index) || index < 0 || index > numberOfSteps || numberOfSteps === 1) {\n              return;\n            }\n\n            this.stepper.removeAt(index);\n            removedStep = steps.splice(index, 1)[0];\n\n            if (!stepContentElement.hasClass(HIDDEN)) {\n              newSelectedStepIndex = index === 0 ? 0 : index - 1;\n              this.select(newSelectedStepIndex);\n            }\n\n            kendo.destroy(stepContentElement);\n            stepContentElement.remove();\n\n            for (i = 0; i < numberOfSteps - 1; i += 1) {\n              step = steps[i];\n              step.options.index = i;\n              step.options.totalSteps = numberOfSteps - 1;\n              step.element.find(DOT + wizardClasses.wizardPager).remove();\n\n              step._pager();\n\n              label = messages.step + \" \" + (i + 1) + \" \" + messages.of + \" \" + (numberOfSteps - 1);\n              step.element.attr(ARIA_LABEL, label);\n            }\n\n            if (index === 0 || index === numberOfSteps - 1) {\n              alteredStepIndex = index === 0 ? 0 : numberOfSteps - 2;\n              alteredStep = steps[alteredStepIndex];\n\n              if (alteredStep.options.defaultButtons) {\n                alteredStep.resetButtons();\n              }\n            }\n\n            this._stepperAriaAttributes();\n\n            this._steps.forEach(this._iterateAriaStep);\n          },\n          select: function (stepIndex) {\n            var that = this,\n                targetStep;\n\n            if (stepIndex === undefined || stepIndex === null || isNaN(stepIndex) || stepIndex >= that._steps.length || stepIndex < 0) {\n              return;\n            }\n\n            stepIndex = Number(stepIndex);\n            targetStep = that._steps[stepIndex];\n\n            if (!targetStep.options.enabled) {\n              return;\n            }\n\n            that._select(stepIndex);\n\n            that._selectStepper(stepIndex);\n          },\n          steps: function () {\n            return this._steps;\n          },\n          _attachEvents: function () {\n            var that = this,\n                clickBeforeSubmit = function () {\n              that._doneClicked = true;\n            };\n\n            that.stepper.bind(SELECT, that._stepperSelectHandler.bind(that));\n            that.wrapper.on(CLICK + WIZARD, \"[\" + DATA_WIZARD_PREFIX + RESET + \"]\", that._resetClickHandler.bind(that)).on(CLICK + WIZARD, \"[\" + DATA_WIZARD_PREFIX + PREVIOUS + \"]\", that._previousClickHandler.bind(that)).on(CLICK + WIZARD, \"[\" + DATA_WIZARD_PREFIX + NEXT + \"]\", that._nextClickHandler.bind(that));\n\n            if (that.wrapper.is(\"form\")) {\n              that.wrapper.on(CLICK + WIZARD, \"[\" + DATA_WIZARD_PREFIX + DONE + \"]\", clickBeforeSubmit);\n              that.wrapper.on(SUBMIT + WIZARD, that._doneHandler.bind(that));\n            } else {\n              that.wrapper.on(CLICK + WIZARD, \"[\" + DATA_WIZARD_PREFIX + DONE + \"]\", clickBeforeSubmit);\n              that.wrapper.on(CLICK + WIZARD, \"[\" + DATA_WIZARD_PREFIX + DONE + \"]\", that._doneHandler.bind(that));\n            }\n          },\n          _changeStep: function (step) {\n            var steps = this.wrapper.find(DOT + wizardClasses.wizardStep);\n            this.currentStep = step;\n            steps.addClass(HIDDEN);\n            steps.attr(ARIA_HIDDEN, true);\n            steps.attr(ARIA_EXPANDED, false);\n            step.element.removeClass(HIDDEN);\n            step.element.removeAttr(ARIA_HIDDEN);\n            step.element.attr(ARIA_EXPANDED, true);\n          },\n          _createStep: function (options, index, stepsFromMarkup, total) {\n            var wrapper = this.wrapper,\n                stepsFromMarkupTitles = this.wrapper.children(\"ol, ul\").children(\"li\");\n\n            if (typeof options === \"string\") {\n              options = {\n                title: options\n              };\n            }\n\n            options.totalSteps = total;\n            options.messages = this.options.messages;\n            options.index = index;\n            options.formTag = this.wrapper.is(\"form\") ? \"div\" : \"form\";\n\n            if (index === 0) {\n              options.selected = true;\n            }\n\n            if (this.options.actionBar === false) {\n              options.actionBar = false;\n            }\n\n            if (stepsFromMarkup.length > 0 && stepsFromMarkup[index]) {\n              options.markupContainer = $(stepsFromMarkup[index]);\n\n              if (!options.title) {\n                options.title = stepsFromMarkupTitles[index] ? stepsFromMarkupTitles[index].textContent : (index + 1).toString();\n\n                if (!this.options.steps) {\n                  this.options.steps = [];\n                }\n              }\n            }\n\n            if (wrapper.attr(ID)) {\n              options.wizardId = wrapper.attr(ID);\n            }\n\n            if (this.options.pager === false && options.pager !== true) {\n              options.pager = false;\n            }\n\n            this.options.steps[index] = extend(true, {}, options);\n            return new Step(options);\n          },\n          _createSteps: function () {\n            var that = this,\n                wrapper = that.wrapper,\n                stepsOptions = that.options.steps,\n                stepsFromMarkup = wrapper.children(\"div\"),\n                stepsContainer,\n                i,\n                stepOptions,\n                step;\n            stepsContainer = $(\"<div>\").addClass(wizardClasses.wizardStepsContainer);\n            that._steps = [];\n\n            if (!stepsOptions || stepsOptions.length === 0) {\n              stepsOptions = [];\n\n              for (i = 0; i < stepsFromMarkup.length; i += 1) {\n                stepsOptions.push({});\n              }\n            }\n\n            for (i = 0; i < stepsOptions.length; i += 1) {\n              stepOptions = stepsOptions[i];\n              step = that._createStep(stepOptions, i, stepsFromMarkup, stepsOptions.length);\n\n              if (stepOptions.contentUrl && (i === 0 || !that.options.loadOnDemand)) {\n                kendo.ui.progress(that.wrapper, true);\n\n                step._ajaxRequest(that);\n              }\n\n              stepsContainer.append(step.element);\n\n              that._steps.push(step);\n            }\n\n            wrapper.children(\"ol, ul\").remove();\n            wrapper.empty();\n            wrapper.append(stepsContainer);\n\n            that._refreshEditorWidgets();\n\n            that.currentStep = that._steps[0];\n          },\n          _doneHandler: function (e) {\n            var steps = this._steps,\n                currentStep = this.currentStep,\n                forms = [],\n                form,\n                i;\n\n            if (!this._doneClicked) {\n              return;\n            }\n\n            this._doneClicked = false;\n\n            if (!!this.options.validateForms && !!currentStep.form && !currentStep.form.validator.validate()) {\n              e.preventDefault();\n              this.trigger(FORM_VALIDATE_FAILED, {\n                sender: this,\n                step: currentStep,\n                form: currentStep.form\n              });\n              return;\n            }\n\n            for (i = 0; i < steps.length; i += 1) {\n              form = steps[i].form;\n\n              if (form) {\n                forms.push(form);\n              }\n            }\n\n            this.trigger(DONE, {\n              sender: this,\n              forms: forms,\n              originalEvent: e,\n              button: $(e.target).getKendoButton()\n            });\n          },\n          _insertStepElementAtIndex: function (index, stepElement) {\n            var stepsContainer = this.wrapper.find(DOT + wizardClasses.wizardStepsContainer);\n\n            if (index === 0) {\n              stepsContainer.prepend(stepElement);\n            } else {\n              stepsContainer.find(DOT + wizardClasses.wizardStep + \":nth-child(\" + index + \")\").after(stepElement);\n            }\n          },\n          _isEmpty: function (element) {\n            return !kendo.trim(element.html());\n          },\n          _iterateAriaStep: function (step) {\n            step._ariaAttributes();\n          },\n          _mapStepForStepper: function (step) {\n            var stepperStep = extend(true, {}, step);\n            stepperStep.label = stepperStep.title;\n            delete stepperStep.buttons;\n            delete stepperStep.pager;\n            delete stepperStep.content;\n            delete stepperStep.contentUrl;\n            delete stepperStep.contentId;\n            delete stepperStep.formTag;\n            delete stepperStep.wizardId;\n            delete stepperStep.messages;\n            return stepperStep;\n          },\n          _select: function (index) {\n            var targetStep = this._steps[index],\n                options = this.options;\n\n            if (targetStep.options.contentUrl && (options.reloadOnSelect || options.loadOnDemand && this._isEmpty(targetStep.element.find(DOT + wizardClasses.wizardContent)))) {\n              this.ajaxLoad = true;\n              kendo.ui.progress(this.wrapper, true);\n\n              targetStep._ajaxRequest(this, true);\n            } else {\n              this._changeStep(targetStep);\n            }\n          },\n          _nextClickHandler: function (e) {\n            var that = this,\n                steps = that._steps,\n                numberOfSteps = that._steps.length,\n                currentStep = that.currentStep,\n                currentStepIndex = currentStep.options.index,\n                button = $(e.target).getKendoButton(),\n                targetStep = steps[currentStepIndex + 1];\n\n            if (numberOfSteps === currentStepIndex + 1 || !targetStep.options.enabled) {\n              return;\n            }\n\n            if (!!that.options.validateForms && !!currentStep.form && !currentStep.form.validator.validate()) {\n              that.trigger(FORM_VALIDATE_FAILED, {\n                sender: that,\n                step: currentStep,\n                form: currentStep.form\n              });\n              return;\n            }\n\n            if (!that.trigger(SELECT, {\n              sender: that,\n              originalEvent: e.originalEvent,\n              step: targetStep,\n              button: button\n            })) {\n              that._select(currentStepIndex + 1);\n\n              that._selectStepper(currentStepIndex + 1);\n\n              if (!that.ajaxLoad) {\n                that.trigger(ACTIVATE, {\n                  sender: that,\n                  step: targetStep\n                });\n              }\n\n              that.ajaxLoad = false;\n            }\n          },\n          _previousClickHandler: function (e) {\n            var that = this,\n                validateForms = that.options.validateForms,\n                steps = that._steps,\n                currentStep = that.currentStep,\n                currentStepIndex = currentStep.options.index,\n                button = $(e.target).getKendoButton(),\n                targetStep = steps[currentStepIndex - 1];\n\n            if (currentStepIndex === 0 || !targetStep.options.enabled) {\n              return;\n            }\n\n            if (!!validateForms && validateForms.validateOnPrevious !== false && !!currentStep.form && !currentStep.form.validator.validate()) {\n              that.trigger(FORM_VALIDATE_FAILED, {\n                sender: that,\n                step: currentStep,\n                form: currentStep.form\n              });\n              return;\n            }\n\n            if (!that.trigger(SELECT, {\n              sender: that,\n              originalEvent: e.originalEvent,\n              step: targetStep,\n              button: button\n            })) {\n              that._select(currentStepIndex - 1);\n\n              that._selectStepper(currentStepIndex - 1);\n\n              if (!that.ajaxLoad) {\n                that.trigger(ACTIVATE, {\n                  sender: that,\n                  step: targetStep\n                });\n              }\n\n              that.ajaxLoad = false;\n            }\n          },\n          _refreshEditorWidgets: function () {\n            var editorElements = this.wrapper.find(\"[data-role='editor']\"),\n                i,\n                element;\n\n            for (i = 0; i < editorElements.length; i += 1) {\n              element = $(editorElements[i]);\n              element.getKendoEditor().refresh();\n            }\n          },\n          _resetClickHandler: function (e) {\n            this.trigger(RESET, {\n              sender: this,\n              originalEvent: e,\n              button: $(e.target).getKendoButton()\n            });\n          },\n          _selectStepper: function (index) {\n            var stepper = this.stepper,\n                targetStep = stepper.steps()[index],\n                targetLink = targetStep.element.find(DOT + STEPPER_STEP_LINK);\n            stepper.select(index);\n            stepper.wrapper.find(DOT + STEPPER_STEP_LINK).attr(ARIA_SELECTED, false);\n            targetLink.attr(ARIA_SELECTED, true).trigger(\"focus\");\n          },\n          _stepper: function () {\n            var wrapper = this.wrapper,\n                stepperElement = $(\"<div>\").prependTo(wrapper),\n                options = this.options,\n                stepperOptions = options.stepper,\n                stepsOptions = options.steps.map(this._mapStepForStepper);\n            stepperOptions.steps = stepsOptions;\n            stepperOptions.orientation = options.contentPosition === BOTTOM ? HORIZONTAL : VERTICAL;\n            stepperOptions.selectOnFocus = true;\n\n            stepperOptions.kendoKeydown = function (e) {\n              if (e.keyCode === kendo.keys.TAB) {\n                e.preventKendoKeydown = true;\n              }\n            };\n\n            this.stepper = stepperElement.kendoStepper(stepperOptions).getKendoStepper();\n\n            this._stepperAriaAttributes();\n          },\n          _stepperAriaAttributes: function () {\n            var stepper = this.stepper,\n                wrapperId = this.wrapper.attr(ID) || \"wizard\",\n                stepperSteps = stepper.steps(),\n                selected,\n                step,\n                i;\n\n            if (!stepperSteps) {\n              return;\n            }\n\n            stepper.element.find(DOT + STEPPER_LIST).attr(ROLE, \"tablist\");\n\n            for (i = 0; i < stepperSteps.length; i += 1) {\n              selected = false;\n\n              if (i === 0) {\n                selected = true;\n              }\n\n              step = stepperSteps[i];\n              step.element.attr(ROLE, \"none\").find(\"a\").attr(ROLE, \"tab\").attr(ARIA_CONTROLS, wrapperId + DASH + i).attr(ARIA_SELECTED, selected);\n            }\n          },\n          _stepperSelectHandler: function (e) {\n            var that = this,\n                validateForms = that.options.validateForms,\n                stepper = e.sender,\n                stepperStep = e.step,\n                currentStepIndex = that.currentStep.options.index,\n                stepIndex = stepperStep.getIndex(),\n                wizardSteps = that._steps,\n                step = wizardSteps[stepIndex],\n                currentStep = that.currentStep;\n\n            if (stepIndex > currentStepIndex && !!validateForms && !!currentStep.form && !currentStep.form.validator.validate()) {\n              e.preventDefault();\n              that.trigger(FORM_VALIDATE_FAILED, {\n                sender: that,\n                step: currentStep,\n                form: currentStep.form\n              });\n              return;\n            }\n\n            if (stepIndex < currentStepIndex && !!validateForms && validateForms.validateOnPrevious !== false && !!currentStep.form && !currentStep.form.validator.validate()) {\n              e.preventDefault();\n              that.trigger(FORM_VALIDATE_FAILED, {\n                sender: that,\n                step: currentStep,\n                form: currentStep.form\n              });\n              return;\n            }\n\n            if (!that.trigger(SELECT, {\n              sender: that,\n              originalEvent: e.originalEvent,\n              step: step,\n              stepper: stepper\n            })) {\n              that._select(stepIndex);\n\n              stepper.wrapper.find(DOT + STEPPER_STEP_LINK).attr(ARIA_SELECTED, false);\n              stepperStep.element.find(DOT + STEPPER_STEP_LINK).attr(ARIA_SELECTED, true);\n\n              if (!that.ajaxLoad) {\n                that.trigger(ACTIVATE, {\n                  sender: that,\n                  step: step\n                });\n              }\n\n              that.ajaxLoad = false;\n            } else {\n              e.preventDefault();\n            }\n          },\n          _triggerActivate: function (step) {\n            this._changeStep(step);\n\n            this.trigger(ACTIVATE, {\n              sender: this,\n              step: step\n            });\n          },\n          _triggerError: function (xhr, status, step) {\n            kendo.ui.progress(this.wrapper, false);\n            this.trigger(ERROR, {\n              sender: this,\n              xhr: xhr,\n              status: status,\n              step: step\n            });\n          },\n          _triggerContentLoad: function (step) {\n            kendo.ui.progress(this.wrapper, false);\n            this.trigger(CONTENTLOAD, {\n              sender: this,\n              step: step\n            });\n          },\n          _wrapper: function () {\n            var that = this,\n                element = that.element,\n                contentPosition = that.options.contentPosition;\n            that.wrapper = element;\n            that.wrapper.addClass(wizardClasses.wizard);\n\n            if (contentPosition === RIGHT) {\n              that.wrapper.addClass(wizardClasses.verticalWizard + SPACE + wizardClasses.rightWizard);\n            } else if (contentPosition === LEFT) {\n              that.wrapper.addClass(wizardClasses.verticalWizard + SPACE + wizardClasses.leftWizard);\n            } else {\n              that.wrapper.addClass(wizardClasses.horizontalWizard);\n            }\n          }\n        });\n        kendo.wizard = {\n          Step: Step\n        };\n        kendo.ui.plugin(Wizard);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}