{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1717);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  20:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.core\");\n    /***/\n  },\n\n  /***/\n  958:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../util/text-metrics\");\n    /***/\n  },\n\n  /***/\n  1712:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../util/main\");\n    /***/\n  },\n\n  /***/\n  1717:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(20), __webpack_require__(958), __webpack_require__(1712)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function (kendo) {\n        var $ = kendo.jQuery;\n        var UnionRef = kendo.spreadsheet.UnionRef;\n        var CellRef = kendo.spreadsheet.CellRef;\n        var RangeRef = kendo.spreadsheet.RangeRef;\n        var PROPERTIES = [\"color\", \"fontFamily\", \"underline\", \"italic\", \"bold\", \"textAlign\", \"indent\", \"verticalAlign\", \"background\", \"format\", \"link\", \"editor\", \"borderTop\", \"borderRight\", \"borderBottom\", \"borderLeft\", \"comment\", \"html\"];\n        var Range = kendo.Class.extend({\n          init: function (ref, sheet) {\n            this._sheet = sheet;\n            this._ref = ref;\n          },\n          clone: function () {\n            return new Range(this._ref.clone(), this._sheet);\n          },\n          skipHiddenCells: function () {\n            var refs = [];\n            var self = this,\n                sheet = self._sheet;\n            var skipHiddenRows = sheet.isHiddenRow.bind(sheet);\n            var skipHiddenCols = sheet.isHiddenColumn.bind(sheet);\n\n            self._ref.forEach(function (ref) {\n              ref = self._normalize(ref.toRangeRef());\n              var tl = ref.topLeft,\n                  br = ref.bottomRight;\n              var rows = partition(tl.row, br.row, skipHiddenRows);\n              var cols = partition(tl.col, br.col, skipHiddenCols);\n\n              for (var i = 0; i < rows.length; ++i) {\n                for (var j = 0; j < cols.length; ++j) {\n                  refs.push(new RangeRef(new CellRef(rows[i].begin, cols[j].begin), new CellRef(rows[i].end, cols[j].end)));\n                }\n              }\n            });\n\n            return sheet.range(refs.length > 1 ? new UnionRef(refs) : refs[0]);\n          },\n          _normalize: function (ref) {\n            return this._sheet._grid.normalize(ref);\n          },\n          _set: function (name, value, noTrigger) {\n            var self = this;\n            var sheet = self._sheet;\n\n            self._ref.forEach(function (ref) {\n              var result = ref;\n              var valueProp = name === \"value\" || name === \"formula\" || name === \"link\"; // Set values/formulas/links only to the topLeft cell when merged\n\n              if (valueProp && ref.topLeft) {\n                var topLeftRef = new CellRef(ref.topLeft.row, ref.topLeft.col);\n                sheet.forEachMergedCell(function (f) {\n                  if (f.intersects(topLeftRef)) {\n                    result = topLeftRef;\n                  }\n                });\n              }\n\n              sheet._set(result.toRangeRef(), name, value);\n            });\n\n            if (!noTrigger) {\n              sheet.triggerChange({\n                recalc: name == \"formula\" || name == \"value\" || name == \"validation\",\n                value: value,\n                range: self,\n                ref: self._ref\n              });\n            }\n\n            return self;\n          },\n          _get: function (name) {\n            return this._sheet._get(this._ref.toRangeRef(), name);\n          },\n          _property: function (name, value) {\n            if (value === undefined) {\n              return this._get(name);\n            } else {\n              return this._set(name, value);\n            }\n          },\n          value: function (value) {\n            if (value !== undefined) {\n              // When value is set through the public API we must clear the\n              // formula.  Don't trigger change (third parameter), it'll be\n              // done when setting the value below\n              this._set(\"formula\", null, true);\n            }\n\n            return this._property(\"value\", value);\n          },\n          html: function (value) {\n            return this._property(\"html\", value);\n          },\n          resize: function (direction) {\n            var ref = this._resizedRef(direction);\n\n            return new Range(ref, this._sheet);\n          },\n          _resizedRef: function (direction) {\n            return this._ref.map(function (ref) {\n              return ref.toRangeRef().resize(direction);\n            });\n          },\n          input: function (value, options) {\n            options = $.extend({\n              arrayFormula: false\n            }, options);\n\n            var existingFormat = this._get(\"format\"),\n                x;\n\n            if (value !== undefined) {\n              var tl = this._ref.toRangeRef().topLeft;\n\n              x = kendo.spreadsheet.calc.parse(this._sheet.name(), tl.row, tl.col, value, existingFormat);\n\n              this._sheet.batch(function () {\n                var formula = null;\n\n                if (x.type == \"exp\") {\n                  formula = kendo.spreadsheet.calc.compile(x);\n                } else if (existingFormat != \"@\") {\n                  var existingFormatType = existingFormat && kendo.spreadsheet.formatting.type(x.value, existingFormat);\n\n                  if (x.type == \"date\" && existingFormatType != \"date\") {\n                    this.format(x.format || toExcelFormat(kendo.culture().calendar.patterns.d));\n                  } else if (x.type == \"percent\" && existingFormatType != \"percent\") {\n                    this.format(x.value * 100 == (x.value * 100 | 0) ? \"0%\" : \"0.00%\");\n                  } else if (x.format) {\n                    if (!existingFormat || x.currency || existingFormatType == \"number\" && x.type == \"number\" && x.format.length > existingFormat.length) {\n                      this.format(x.format);\n                    }\n                  }\n                } else if (x.type != \"string\") {\n                  x.value = value;\n                }\n\n                this.formula(formula, options.arrayFormula);\n\n                if (!formula) {\n                  // value() will clear the formula.  Lucky for us,\n                  // x.value is undefined so it actually won't, but let's\n                  // be explicit and only set value if formula is not\n                  // present.\n                  this.value(x.value);\n                }\n              }.bind(this), {\n                recalc: true,\n                value: value,\n                ref: this._ref,\n                editorChange: this._sheet.isInEditMode()\n              });\n\n              return this;\n            } else {\n              value = this._get(\"value\");\n\n              var formula = this._get(\"formula\");\n\n              var type = existingFormat && !formula && kendo.spreadsheet.formatting.type(value, existingFormat);\n\n              if (formula) {\n                // it's a Formula object which stringifies to the\n                // formula as text (without the starting `=`).\n                value = \"=\" + formula;\n              } else OUT: {\n                // jshint ignore:line\n                if (existingFormat && type == \"date\") {\n                  // check if we could parse back the displayed value.\n                  // https://github.com/telerik/kendo/issues/5335\n                  var t1 = kendo.spreadsheet.formatting.text(value, existingFormat);\n                  x = kendo.spreadsheet.calc.parse(null, null, null, t1, existingFormat); // it's not a formula so we don't need sheet/row/col\n\n                  var t2 = kendo.spreadsheet.formatting.text(x.value, existingFormat);\n\n                  if (t1 == t2) {\n                    value = t1;\n                    break OUT; // jshint ignore:line\n                  }\n                }\n\n                if (type === \"date\") {\n                  value = kendo.toString(kendo.spreadsheet.numberToDate(value), kendo.culture().calendar.patterns.d);\n                } else if (type === \"percent\") {\n                  value = kendo.spreadsheet.calc.runtime.limitPrecision(value * 100) + \"%\";\n                } else if (typeof value == \"string\" && (/^[=']/.test(value) || /^(?:true|false)$/i.test(value) || looksLikeANumber(value))) {\n                  value = \"'\" + value;\n                } else if (this._sheet._useCultureDecimals() && typeof value == \"number\" && value != Math.floor(value)) {\n                  value = String(value).replace(\".\", kendo.culture().numberFormat[\".\"]);\n                }\n              }\n\n              return value;\n            }\n          },\n          enable: function (value) {\n            if (value === undefined) {\n              return !kendo.util.withExit(function (exit) {\n                this._sheet.forEach(this._ref, function (_, __, data) {\n                  if (data.enable === false) {\n                    exit(true);\n                  }\n                });\n              }, this);\n            }\n\n            return this._property(\"enable\", value);\n          },\n          formula: function (value, arrayFormula) {\n            var self = this;\n\n            if (value === undefined) {\n              var f = self._get(\"formula\");\n\n              return f ? \"\" + f : null; // stringify if present\n            }\n\n            if (arrayFormula) {\n              // when setting an array formula, we want to set it on\n              // the first cell only, as it will fill the whole\n              // range.\n              var ref = this._ref.toRangeRef();\n\n              value = self._sheet.range(ref.topLeft)._set(\"formula\", value)._get(\"formula\"); // make sure we get the compiled Formula, not a string\n\n              if (value) {\n                // could be null.\n                // this will be used in FormulaContext -- it's the\n                // range that the formula must populate.\n                value.setArrayFormulaRange(ref);\n              }\n            } else {\n              self._set(\"formula\", value);\n            }\n\n            return self;\n          },\n          intersectingArrayFormula: function () {\n            var ref = this._ref.clone().simplify().setSheet(this._sheet.name());\n\n            return kendo.util.withExit(function (exit) {\n              this._sheet._forFormulas(function (f) {\n                var r = f.arrayFormulaRange;\n\n                if (r && (r = ref.intersect(r)) !== kendo.spreadsheet.NULLREF) {\n                  exit({\n                    formula: f,\n                    intersection: r\n                  });\n                }\n              });\n            }, this);\n          },\n          canEditArrayFormula: function () {\n            var x = this.intersectingArrayFormula();\n\n            if (x) {\n              // we want to allow editing only when the new range is\n              // at least as big as the original range (i.e. no\n              // cells removed)\n              return x.formula.arrayFormulaRange.eq(x.intersection);\n            }\n\n            return true;\n          },\n          validation: function (value) {\n            //TODO: Accept objects only?\n            if (value === undefined) {\n              var f = this._get(\"validation\");\n\n              return f ? f.toJSON() : null; // stringify if present\n            }\n\n            return this._property(\"validation\", value);\n          },\n          _getValidationState: function () {\n            var ref = this._ref.toRangeRef();\n\n            var topLeftRow = ref.topLeft.row;\n            var topLeftCol = ref.topLeft.col;\n            var bottomRightRow = ref.bottomRight.row;\n            var bottomRightCol = ref.bottomRight.col;\n            var ci, ri;\n\n            for (ci = topLeftCol; ci <= bottomRightCol; ci++) {\n              for (ri = topLeftRow; ri <= bottomRightRow; ri++) {\n                var validation = this._sheet._validation(ri, ci);\n\n                if (validation && validation.type === \"reject\" && validation.value === false) {\n                  return validation;\n                }\n              }\n            }\n\n            return false;\n          },\n          merge: function () {\n            this._ref = this._sheet._merge(this._ref);\n            return this;\n          },\n          unmerge: function () {\n            var mergedCells = this._sheet._mergedCells;\n\n            this._ref.forEach(function (ref) {\n              ref.toRangeRef().intersecting(mergedCells).forEach(function (mergedRef) {\n                mergedCells.splice(mergedCells.indexOf(mergedRef), 1);\n              });\n            });\n\n            this._sheet.triggerChange({});\n\n            return this;\n          },\n          select: function () {\n            this._sheet.select(this._ref);\n\n            return this;\n          },\n          values: function (values) {\n            if (this._ref instanceof UnionRef) {\n              throw new Error(\"Unsupported for multiple ranges.\");\n            }\n\n            if (this._ref === kendo.spreadsheet.NULLREF) {\n              if (values !== undefined) {\n                throw new Error(\"Unsupported for NULLREF.\");\n              } else {\n                return [];\n              }\n            }\n\n            var ref = this._ref.toRangeRef();\n\n            var topLeftRow = ref.topLeft.row;\n            var topLeftCol = ref.topLeft.col;\n            var bottomRightRow = ref.bottomRight.row;\n            var bottomRightCol = ref.bottomRight.col;\n            var ci, ri;\n\n            if (values === undefined) {\n              values = new Array(ref.height());\n\n              for (var vi = 0; vi < values.length; vi++) {\n                values[vi] = new Array(ref.width());\n              }\n\n              for (ci = topLeftCol; ci <= bottomRightCol; ci++) {\n                for (ri = topLeftRow; ri <= bottomRightRow; ri++) {\n                  values[ri - topLeftRow][ci - topLeftCol] = this._sheet._value(ri, ci);\n                }\n              }\n\n              return values;\n            } else {\n              this._sheet._set(ref, \"formula\", null);\n\n              for (ci = topLeftCol; ci <= bottomRightCol; ci++) {\n                for (ri = topLeftRow; ri <= bottomRightRow; ri++) {\n                  var row = values[ri - topLeftRow];\n\n                  if (row) {\n                    var value = row[ci - topLeftCol];\n\n                    if (value !== undefined) {\n                      this._sheet._value(ri, ci, value);\n                    }\n                  }\n                }\n              }\n\n              this._sheet.triggerChange({\n                recalc: true,\n                ref: ref\n              });\n\n              return this;\n            }\n          },\n          _properties: function (props, isAutofill) {\n            if (this._ref instanceof UnionRef) {\n              throw new Error(\"Unsupported for multiple ranges.\");\n            }\n\n            if (this._ref === kendo.spreadsheet.NULLREF) {\n              if (props !== undefined) {\n                throw new Error(\"Unsupported for NULLREF.\");\n              } else {\n                return [];\n              }\n            }\n\n            var ref = this._ref.toRangeRef();\n\n            var topLeftRow = ref.topLeft.row;\n            var topLeftCol = ref.topLeft.col;\n            var bottomRightRow = ref.bottomRight.row;\n            var bottomRightCol = ref.bottomRight.col;\n            var ci, ri;\n            var sheet = this._sheet;\n\n            if (props === undefined) {\n              props = new Array(ref.height());\n              sheet.forEach(ref, function (row, col, data) {\n                row -= topLeftRow;\n                col -= topLeftCol;\n                var line = props[row] || (props[row] = []);\n                line[col] = data;\n              });\n              return props;\n            } else {\n              var data;\n              ref = ref.clone();\n\n              var setProp = function (propName) {\n                var propValue = data[propName];\n                ref.topLeft.row = ref.bottomRight.row = ri;\n                ref.topLeft.col = ref.bottomRight.col = ci;\n\n                if (propName == \"value\") {\n                  sheet._set(ref, \"formula\", null);\n                }\n\n                sheet._set(ref, propName, propValue);\n              };\n\n              for (ci = topLeftCol; ci <= bottomRightCol; ci++) {\n                if (!isAutofill && sheet.isHiddenColumn(ci)) {\n                  continue;\n                }\n\n                for (ri = topLeftRow; ri <= bottomRightRow; ri++) {\n                  if (!isAutofill && sheet.isHiddenRow(ri)) {\n                    continue;\n                  }\n\n                  if (isAutofill && sheet.isFilteredRow(ri)) {\n                    continue;\n                  }\n\n                  var row = props[ri - topLeftRow];\n\n                  if (row) {\n                    data = row[ci - topLeftCol];\n\n                    if (data) {\n                      Object.keys(data).forEach(setProp);\n                    }\n                  }\n                }\n              }\n\n              sheet.triggerChange({\n                recalc: true,\n                ref: this._ref\n              });\n              return this;\n            }\n          },\n          clear: function (options) {\n            options = options || {};\n            var clearAll = options.clearAll || !Object.keys(options).length;\n            var sheet = this._sheet;\n            var reason = {\n              recalc: clearAll || options.contentsOnly,\n              ref: this._ref\n            };\n            sheet.batch(function () {\n              if (reason.recalc) {\n                this.formula(null);\n              }\n\n              if (clearAll) {\n                this.validation(null);\n              }\n\n              if (clearAll || options.formatOnly) {\n                PROPERTIES.forEach(function (x) {\n                  if (!(options.keepBorders && /^border/i.test(x))) {\n                    this[x](null);\n                  }\n                }.bind(this));\n                this.fontSize(null);\n                this.wrap(null);\n                this.unmerge();\n              }\n            }.bind(this), reason);\n            return this;\n          },\n          clearContent: function () {\n            return this.clear({\n              contentsOnly: true\n            });\n          },\n          clearFormat: function () {\n            return this.clear({\n              formatOnly: true\n            });\n          },\n          isSortable: function () {\n            return !this.cantSort();\n          },\n          cantSort: function () {\n            if (this._ref instanceof UnionRef) {\n              return {\n                code: \"cantSortMultipleSelection\",\n                message: \"Unsupported for multiple ranges.\"\n              };\n            }\n\n            if (this._ref === kendo.spreadsheet.NULLREF) {\n              return {\n                code: \"cantSortNullRef\",\n                message: \"Unsupported for NULLREF.\"\n              };\n            }\n\n            var mc = this._sheet._getMergedCells(this._ref.toRangeRef());\n\n            var primary = mc.primary;\n            var secondary = mc.secondary;\n            var width = null,\n                height = null;\n            var cant = {};\n\n            try {\n              this._sheet.forEach(this, function (row, col) {\n                var id = new CellRef(row, col).print();\n                var merged = primary[id];\n\n                if (merged) {\n                  if (width === null) {\n                    width = merged.width();\n                    height = merged.height();\n                  } else if (!(width == merged.width() && height == merged.height())) {\n                    throw cant;\n                  }\n                } else if (!secondary[id] && mc.hasMerged) {\n                  throw cant;\n                }\n              });\n            } catch (ex) {\n              if (ex !== cant) {\n                throw ex;\n              }\n\n              return {\n                code: \"cantSortMixedCells\",\n                message: \"Unsupported for range containing cells of different shapes.\"\n              };\n            }\n\n            return false;\n          },\n          sort: function (spec) {\n            var reason = this.cantSort();\n\n            if (reason) {\n              throw new Error(reason.message);\n            }\n\n            if (spec === undefined) {\n              spec = {\n                column: 0\n              };\n            }\n\n            spec = spec instanceof Array ? spec : [spec];\n\n            this._sheet._sortBy(this._ref.toRangeRef(), spec.map(function (spec, index) {\n              if (typeof spec === \"number\") {\n                spec = {\n                  column: spec\n                };\n              }\n\n              return {\n                index: spec.column === undefined ? index : spec.column,\n                ascending: spec.ascending === undefined ? true : spec.ascending\n              };\n            }));\n\n            return this;\n          },\n          isFilterable: function () {\n            return !(this._ref instanceof UnionRef);\n          },\n          filter: function (spec) {\n            if (this._ref instanceof UnionRef) {\n              throw new Error(\"Unsupported for multiple ranges.\");\n            }\n\n            if (spec === false) {\n              this.clearFilters();\n            } else {\n              spec = spec === true ? [] : spec instanceof Array ? spec : [spec];\n\n              this._sheet._filterBy(this._ref.toRangeRef(), spec.map(function (spec, index) {\n                return {\n                  index: spec.column === undefined ? index : spec.column,\n                  filter: spec.filter\n                };\n              }));\n            }\n\n            return this;\n          },\n          clearFilter: function (spec) {\n            this._sheet.clearFilter(spec);\n          },\n          clearFilters: function () {\n            var filter = this._sheet.filter();\n\n            var spec = [];\n\n            if (filter) {\n              for (var i = 0; i < filter.columns.length; i++) {\n                spec.push(filter.columns[i].index);\n              }\n\n              this._sheet.batch(function () {\n                this.clearFilter(spec);\n                this._filter = null;\n              }, {\n                layout: true,\n                filter: true\n              });\n            }\n          },\n          hasFilter: function () {\n            var filter = this._sheet.filter();\n\n            return !!filter;\n          },\n          leftColumn: function () {\n            return new Range(this._ref.leftColumn(), this._sheet);\n          },\n          rightColumn: function () {\n            return new Range(this._ref.rightColumn(), this._sheet);\n          },\n          topRow: function () {\n            return new Range(this._ref.topRow(), this._sheet);\n          },\n          bottomRow: function () {\n            return new Range(this._ref.bottomRow(), this._sheet);\n          },\n          column: function (column) {\n            return new Range(this._ref.toColumn(column), this._sheet);\n          },\n          row: function (row) {\n            return new Range(this._ref.toRow(row), this._sheet);\n          },\n          forEachRow: function (callback) {\n            this._ref.forEachRow(function (ref) {\n              callback(new Range(ref, this._sheet));\n            }.bind(this));\n          },\n          forEachColumn: function (callback) {\n            this._ref.forEachColumn(function (ref) {\n              callback(new Range(ref, this._sheet));\n            }.bind(this));\n          },\n          sheet: function () {\n            return this._sheet;\n          },\n          topLeft: function () {\n            return this._ref.toRangeRef().topLeft;\n          },\n          intersectingMerged: function () {\n            var sheet = this._sheet;\n            var mergedCells = [];\n\n            sheet._mergedCells.forEach(function (ref) {\n              if (ref.intersects(this._ref)) {\n                mergedCells.push(ref.toString());\n              }\n            }.bind(this));\n\n            return mergedCells;\n          },\n          getState: function (propertyName) {\n            var topLeft = this._ref.first();\n\n            var state = {\n              ref: topLeft,\n              data: [],\n              origRef: this._ref,\n              // save row heights\n              rows: this._sheet._rows.getState()\n            };\n            var properties;\n\n            if (!propertyName) {\n              properties = kendo.spreadsheet.ALL_PROPERTIES;\n              state.mergedCells = this.intersectingMerged();\n            } else if (propertyName === \"input\") {\n              properties = [\"value\", \"formula\"];\n            } else if (propertyName === \"border\") {\n              properties = [\"borderLeft\", \"borderTop\", \"borderRight\", \"borderBottom\"];\n            } else {\n              properties = [propertyName];\n            }\n\n            var data = state.data;\n            this.forEachCell(function (row, col, cell) {\n              var cellState = {};\n              var dr = row - topLeft.row;\n              var dc = col - topLeft.col;\n\n              if (!data[dr]) {\n                data[dr] = [];\n              }\n\n              data[dr][dc] = cellState;\n              properties.forEach(function (property) {\n                var value = typeof cell[property] == \"undefined\" ? null : cell[property];\n\n                if (value instanceof kendo.spreadsheet.calc.runtime.Formula || value instanceof kendo.spreadsheet.validation.Validation) {\n                  value = value.deepClone();\n                }\n\n                cellState[property] = value;\n              });\n            });\n            return state;\n          },\n          setState: function (state, clipboard) {\n            var sheet = this._sheet;\n\n            var origin = this._ref.first();\n\n            var rowDelta = state.ref.row - origin.row;\n            var colDelta = state.ref.col - origin.col;\n            var internalClipboard = clipboard && !clipboard.isExternal();\n            var externalClipboard = clipboard && !internalClipboard;\n            sheet.batch(function () {\n              if (state.mergedCells) {\n                this.unmerge();\n              }\n\n              if (!clipboard) {\n                // restore row heights.  they won't be available\n                // when this function is called from the clipboard\n                // code.\n                this._sheet._rows.setState(state.rows);\n              }\n\n              var row = origin.row;\n              var hasFilter = this.hasFilter();\n              state.data.forEach(function (data, dr) {\n                if (hasFilter && internalClipboard && sheet.isHiddenRow(state.ref.row + dr)) {\n                  return;\n                }\n\n                var col = origin.col;\n                data.forEach(function (cellState, dc) {\n                  if (hasFilter && internalClipboard && sheet.isHiddenColumn(state.ref.col + dc)) {\n                    return;\n                  }\n\n                  var range = clipboard ? sheet.range(row, col) : sheet.range(origin.row + dr, origin.col + dc);\n\n                  if (range.enable()) {\n                    for (var property in cellState) {\n                      if (property != \"value\") {\n                        // make sure value comes last (after the loop),\n                        // because if we set value here and get get to\n                        // formula later and cellState.formula is null,\n                        // it'll clear the value.\n                        // when pasting, do not copy \"disabled\" state\n                        if (!(clipboard && property == \"enable\")) {\n                          range._set(property, cellState[property]);\n                        }\n                      }\n                    }\n\n                    if (!cellState.formula) {\n                      // only need to set the value if we don't have a\n                      // formula.  Go through the lower level setter rather\n                      // than range.value(...), because range.value will clear\n                      // the formula!  chicken and egg issues.\n                      if (externalClipboard) {\n                        // https://github.com/telerik/kendo-ui-core/issues/1688\n                        // if we have a paste from external source, we should parse the\n                        // value as if it were inputted.  This allows to treat numbers\n                        // as numbers, or `=sum(a1:b2)` as formula (Google Sheets does\n                        // the same).  A difference though is that we can't store an\n                        // invalid Formula and display #ERROR, like G.S. does, so in\n                        // case of a parse error we'll just set the value as string.\n                        try {\n                          if (cellState.value == null) {\n                            // jshint ignore:line\n                            range._set(\"value\", null);\n                          } else {\n                            range.input(cellState.value);\n                          }\n                        } catch (ex) {\n                          range._set(\"value\", cellState.value);\n                        }\n                      } else {\n                        range._set(\"value\", cellState.value);\n                      }\n                    }\n                  }\n\n                  col++;\n                });\n                row++;\n              });\n\n              if (state.mergedCells) {\n                state.mergedCells.forEach(function (merged) {\n                  merged = sheet._ref(merged).relative(rowDelta, colDelta, 3);\n                  sheet.range(merged).merge();\n                }, this);\n              }\n            }.bind(this), {\n              recalc: true,\n              ref: this._ref\n            });\n          },\n          _adjustRowHeight: function () {\n            var that = this;\n            var sheet = that._sheet;\n\n            var mc = sheet._getMergedCells(that._ref.toRangeRef());\n\n            var primary = mc.primary;\n            var secondary = mc.secondary;\n            sheet.batch(function () {\n              that.forEachRow(function (rowRange) {\n                var row = rowRange._ref.topLeft.row;\n                var height = sheet.rowHeight(row);\n\n                if (!height) {\n                  // do not adjust if hidden.\n                  // https://github.com/telerik/kendo-ui-core/issues/6272\n                  // (case 2)\n                  return;\n                }\n\n                rowRange.forEachCell(function (row, col, cell) {\n                  var id = new CellRef(row, col).print();\n\n                  if (secondary[id]) {\n                    return;\n                  }\n\n                  var merged = primary[id];\n                  var width;\n\n                  if (merged) {\n                    width = sheet._columns.sum(merged.topLeft.col, merged.bottomRight.col);\n                  } else {\n                    width = sheet.columnWidth(col);\n                  }\n\n                  var data = cell.value;\n\n                  if (cell.format && data != null) {\n                    // jshint ignore:line\n                    data = kendo.spreadsheet.formatting.format(data, cell.format);\n                  }\n\n                  var textHeight = kendo.spreadsheet.util.getTextHeight(data, width, cell.fontFamily, cell.fontSize, cell.wrap);\n                  height = Math.max(height, textHeight);\n                });\n                sheet.rowHeight(row, height);\n              });\n            }, {\n              layout: true\n            });\n          },\n          forEachCell: function (callback) {\n            this._ref.forEach(function (ref) {\n              this._sheet.forEach(ref.toRangeRef(), callback.bind(this));\n            }.bind(this));\n          },\n          hasValue: function () {\n            var defStyle = this._sheet._defaultCellStyle;\n            return kendo.util.withExit(function (exit) {\n              this.forEachCell(function (row, col, cell) {\n                // we must not consider cells that only have same values\n                // as defaultCellStyle, or otherwise we will forbid\n                // inserting rows/cols in an empty sheet.\n                for (var key in cell) {\n                  var val = cell[key];\n\n                  if (val !== undefined && val !== null && val !== defStyle[key]) {\n                    exit(true);\n                  }\n                }\n              });\n            }, this);\n          },\n          wrap: function (flag) {\n            if (flag === undefined) {\n              return !!this._property(\"wrap\");\n            }\n\n            this._property(\"wrap\", flag);\n\n            if (flag !== null) {\n              this._adjustRowHeight();\n            }\n\n            return this;\n          },\n          fontSize: function (size) {\n            if (size === undefined) {\n              return this._property(\"fontSize\");\n            }\n\n            this._property(\"fontSize\", size);\n\n            if (size !== null) {\n              this._adjustRowHeight();\n            }\n\n            return this;\n          },\n          draw: function (options, callback) {\n            this._sheet.draw(this, options, callback);\n          },\n          insideBorders: function (value) {\n            return this.insideVerticalBorders(value).insideHorizontalBorders(value);\n          },\n          insideVerticalBorders: function (value) {\n            this._ref.forEach(function (ref) {\n              if (ref instanceof RangeRef && ref.width() > 1) {\n                ref = ref.clone();\n                ref.topLeft.col++;\n\n                this._sheet.range(ref)._set(\"vBorders\", value);\n              }\n            }, this);\n\n            return this;\n          },\n          insideHorizontalBorders: function (value) {\n            this._ref.forEach(function (ref) {\n              if (ref instanceof RangeRef && ref.height() > 1) {\n                ref = ref.clone();\n                ref.topLeft.row++;\n\n                this._sheet.range(ref)._set(\"hBorders\", value);\n              }\n            }, this);\n\n            return this;\n          }\n        });\n\n        function partition(begin, end, predicate) {\n          while (begin <= end && predicate(begin)) {\n            begin++;\n          }\n\n          if (begin > end) {\n            return [];\n          }\n\n          for (var i = begin + 1; i <= end; ++i) {\n            if (predicate(i)) {\n              return [{\n                begin: begin,\n                end: i - 1\n              }].concat(partition(i + 1, end, predicate));\n            }\n          }\n\n          return [{\n            begin: begin,\n            end: end\n          }];\n        } // use $.each instead of forEach to work in oldIE\n\n\n        $.each(PROPERTIES, function (i, property) {\n          Range.prototype[property] = function (value) {\n            return this._property(property, value);\n          };\n        });\n\n        function toExcelFormat(format) {\n          return format.replace(/M/g, \"m\").replace(/'/g, '\"').replace(/tt/, \"am/pm\");\n        }\n\n        function looksLikeANumber(str) {\n          // XXX: could do with just a regexp instead of calling parse.\n          return !/^=/.test(str) && /number|percent/.test(kendo.spreadsheet.calc.parse(null, 0, 0, str).type);\n        }\n\n        var measureBox = $('<div style=\"position: absolute !important; top: -4000px !important; height: auto !important;' + 'padding: 1px 3px !important; box-sizing: border-box; margin: 0 !important; border: 1px solid black !important;' + 'line-height: normal !important; visibility: hidden !important;' + 'white-space: pre-wrap;\"></div>')[0];\n\n        function getTextHeight(text, width, fontFamily, fontSize, wrap) {\n          var styles = {\n            \"baselineMarkerSize\": 0,\n            \"width\": wrap === true ? width + \"px\" : \"auto\",\n            \"font-size\": (fontSize || 12) + \"px\",\n            \"font-family\": fontFamily || \"Arial\",\n            \"white-space\": wrap === true ? \"pre-wrap\" : \"pre\",\n            \"overflow-wrap\": wrap === true ? \"break-word\" : \"normal\",\n            \"word-wrap\": wrap === true ? \"break-word\" : \"normal\"\n          };\n          return kendo.util.measureText(text, styles, {\n            box: measureBox,\n            normalizeText: false\n          }).height;\n        }\n\n        kendo.spreadsheet.util = {\n          getTextHeight: getTextHeight\n        };\n        kendo.spreadsheet.Range = Range;\n      })(window.kendo);\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}