{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1667);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1658:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.drawing\");\n    /***/\n  },\n\n  /***/\n  1667:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1658)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function ($, undefined) {\n        var extend = $.extend,\n            noop = $.noop,\n            drawing = kendo.drawing,\n            Group = drawing.Group,\n            Surface = drawing.Surface,\n            RENDER = \"render\",\n            Class = kendo.Class;\n        var geometryTypes = {\n          Path: \"path\",\n          MultiPath: \"multipath\",\n          Rect: \"rect\",\n          Image: \"image\",\n          Text: \"text\"\n        };\n        var Page = Class.extend({\n          init: function (options, viewer) {\n            this.viewer = viewer;\n            this.processor = options.processor;\n            this.options = options;\n            this.pageNumber = options.number;\n            this.element = $(\"<div class='k-page' />\");\n            this.element.attr(kendo.attr(\"number\"), this.pageNumber);\n\n            this._updatePageSize(options);\n\n            this.width = options.width;\n            this.height = options.height;\n          },\n          resize: function (ratio) {\n            var pageElement = this.element;\n\n            this._updatePageSize({\n              width: Math.min(pageElement.width() * ratio, this.width),\n              height: Math.min(pageElement.height() * ratio, this.height)\n            });\n          },\n          _updatePageSize: function (size) {\n            this.element.width(size.width).height(size.height);\n          },\n          destroy: function () {\n            kendo.destroy(this.element);\n          },\n          render: noop\n        });\n        var DPLPage = Page.extend({\n          draw: function () {\n            var that = this,\n                geometries = that.options.geometries;\n            that.group = new Group();\n            that.surface.draw(that.group);\n\n            that._drawGeometries(geometries);\n\n            that.viewer.trigger(RENDER, {\n              page: this\n            });\n            kendo.ui.progress(that.element, false);\n          },\n          load: function () {\n            var that = this;\n\n            if (that.loaded || !that.processor) {\n              return;\n            }\n\n            that.processor.fetchPageData(that.pageNumber).then(function (data) {\n              that.options = data;\n\n              that._initSurface();\n\n              that.draw();\n            });\n            that.loaded = true;\n          },\n          _initSurface: function () {\n            var size = {\n              width: this.element.width(),\n              height: this.element.height()\n            };\n            var surfaceOptions = extend({\n              width: this.width,\n              height: this.height\n            }, this.viewer.options.view);\n            this.surface = new Surface(this.element, surfaceOptions);\n\n            this._updatePageSize(size);\n          },\n          _drawGeometries: function (geometries) {\n            var that = this,\n                kGeometry;\n\n            if (!geometries) {\n              return;\n            }\n\n            for (var i = 0; i <= geometries.length; i++) {\n              var geometry = geometries[i];\n\n              if (!geometry) {\n                continue;\n              }\n\n              switch (geometry.type) {\n                case geometryTypes.Path:\n                case geometryTypes.MultiPath:\n                  kGeometry = that._drawPath(geometry);\n                  break;\n\n                case geometryTypes.Rect:\n                  kGeometry = that._drawRect(geometry);\n                  break;\n\n                case geometryTypes.Image:\n                  kGeometry = that._drawImage(geometry);\n                  break;\n\n                case geometryTypes.Text:\n                  kGeometry = that._drawText(geometry);\n                  break;\n\n                default:\n                  kGeometry = null;\n                  break;\n              }\n\n              if (kGeometry) {\n                that.group.append(kGeometry);\n              }\n            }\n          },\n          _drawRect: function (geometry) {\n            var rectGeo = new kendo.geometry.Rect(geometry.point, geometry.size);\n            return new drawing.Rect(rectGeo, {\n              transform: this._getMatrix(geometry.transform),\n              fill: geometry.fillOptions,\n              stroke: geometry.strokeOptions\n            });\n          },\n          _drawImage: function (geometry) {\n            var imageRect = new kendo.geometry.Rect(geometry.point, geometry.size);\n            return new drawing.Image(geometry.src, imageRect, {\n              transform: this._getMatrix(geometry.transform)\n            });\n          },\n          _drawText: function (geometry) {\n            var options = {\n              transform: this._getMatrix(geometry.transform),\n              stroke: geometry.strokeOptions,\n              fill: geometry.fillOptions,\n              font: geometry.font\n            };\n            return new kendo.drawing.Text(geometry.content, geometry.point, options);\n          },\n          _drawPath: function (geometry) {\n            var options = {\n              transform: this._getMatrix(geometry.transform),\n              stroke: geometry.strokeOptions,\n              fill: geometry.fillOptions\n            };\n            var path = new drawing.MultiPath(options);\n\n            for (var i = 0; i < geometry.paths.length; i++) {\n              var subPath = geometry.paths[i];\n\n              if (!subPath.segments) {\n                return;\n              }\n\n              path.moveTo.apply(path, subPath.point);\n\n              for (var j = 0; j < subPath.segments.length; j++) {\n                var segment = subPath.segments[j];\n                var drawAction = segment.points.length === 1 ? path.lineTo : path.curveTo;\n                drawAction.apply(path, segment.points);\n              }\n\n              if (subPath.closed) {\n                path.close();\n              }\n            }\n\n            return path;\n          },\n          _getMatrix: function (transform) {\n            var matrix = Object.create(kendo.geometry.Matrix.prototype);\n            kendo.geometry.Matrix.apply(matrix, transform);\n            return matrix;\n          }\n        });\n        var PDFJSPage = Page.extend({\n          init: function (options, viewer) {\n            var that = this,\n                canvas;\n            canvas = $(\"<canvas style='width: 100%; height: 100%;' />\");\n            that.canvas = canvas.get(0);\n            Page.fn.init.call(that, options, viewer);\n            that.canvas.width = that.width;\n            that.canvas.height = that.height;\n            that.element.append(canvas);\n          },\n          load: function (defaultScale, force) {\n            var that = this,\n                promise = $.Deferred();\n\n            if (that._scale === defaultScale && !force) {\n              return;\n            } else if (that._scale && that._scale !== defaultScale && !force) {\n              that._scale = defaultScale;\n              that.render(defaultScale);\n              return promise.resolve(that);\n            }\n\n            if (that.processor) {\n              that.processor.fetchPageData(that.pageNumber).then(function (page) {\n                that._page = page;\n                that._renderPromise = that.render(defaultScale).then(function () {\n                  that.viewer.trigger(RENDER, {\n                    page: that\n                  });\n                });\n                promise.resolve(that);\n              });\n            }\n\n            that._scale = defaultScale;\n            that.loaded = true;\n            return promise;\n          },\n          render: function (scale) {\n            var that = this;\n\n            var context = this.canvas.getContext('2d'),\n                viewport = this._page.getViewport({\n              scale: scale\n            });\n\n            this._scale = scale;\n            this.canvas.width = viewport.width;\n            this.canvas.height = viewport.height;\n\n            if (this._renderTask) {\n              this._renderTask.cancel();\n\n              this._renderTask = null;\n            }\n\n            this._updatePageSize({\n              width: viewport.width,\n              height: viewport.height\n            });\n\n            this._renderTask = this._page.render({\n              canvasContext: context,\n              viewport: viewport\n            });\n\n            this._renderTextLayer(viewport);\n\n            return this._renderTask.promise.then(function () {\n              that._renderTask = null;\n            }).catch(function () {}); // jshint ignore:line\n          },\n          _renderTextLayer: function (viewport) {\n            var that = this;\n            var page = that._page;\n\n            if (that.textLayer) {\n              that.textLayer.remove();\n            }\n\n            that.textLayer = $(\"<div class='k-text-layer'></div>\").get(0);\n            that.element.append(that.textLayer);\n            page.getTextContent({\n              normalizeWhitespace: true\n            }).then(function (textContent) {\n              $(that.textLayer).css({\n                height: viewport.height,\n                width: viewport.width\n              }).html(\"\"); // Clear content to make sure that refreshing the page will not cause duplication of the text content.\n\n              var params = {\n                textContent: textContent,\n                container: that.textLayer,\n                viewport: viewport,\n                textDivs: [],\n                enhanceTextSelection: true\n              };\n              that.processor.renderTextLayer(params);\n            });\n          }\n        });\n        extend(kendo.pdfviewer.dpl, {\n          geometryTypes: geometryTypes,\n          Page: DPLPage\n        });\n        extend(kendo.pdfviewer.pdfjs, {\n          Page: PDFJSPage\n        });\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}