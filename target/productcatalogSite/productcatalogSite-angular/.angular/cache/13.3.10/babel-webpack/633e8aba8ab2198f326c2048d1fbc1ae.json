{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1376);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1120:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.menu\");\n    /***/\n  },\n\n  /***/\n  1218:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.window\");\n    /***/\n  },\n\n  /***/\n  1262:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.upload\");\n    /***/\n  },\n\n  /***/\n  1270:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.dialog\");\n    /***/\n  },\n\n  /***/\n  1376:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1377), __webpack_require__(1378), __webpack_require__(1120), __webpack_require__(1270), __webpack_require__(1379), __webpack_require__(1262), __webpack_require__(1218)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"orgchart\",\n        name: \"OrgChart\",\n        category: \"web\",\n        description: \"The OrgChart widget displays hierarchical organizational structure.\",\n        depends: [\"core\", \"menu\", \"dialog\", \"form\", \"upload\", \"window\"]\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            DataBoundWidget = kendo.ui.DataBoundWidget,\n            OrgChartDataSource = kendo.data.OrgChartDataSource,\n            ContextMenu = kendo.ui.ContextMenu,\n            extend = $.extend,\n            isArray = Array.isArray,\n            NS = \".kendoOrgChart\",\n            CANCEL = \"cancel\",\n            CHANGE = \"change\",\n            CLICK = \"click\",\n            COLLAPSE = \"collapse\",\n            CREATE = \"create\",\n            DATABINDING = \"dataBinding\",\n            DATABOUND = \"dataBound\",\n            DELETE = \"delete\",\n            DESTROY = \"destroy\",\n            EDIT = \"edit\",\n            ERROR = \"error\",\n            EXPAND = \"expand\",\n            FOCUS = \"focus\",\n            KENDOKEYDOWN = \"kendoKeydown\",\n            MENU = \"menu\",\n            PROGRESS = \"progress\",\n            SAVE = \"save\",\n            SELECT = \"select\",\n            REQUEST_START = \"requestStart\",\n            DOT = \".\",\n            SPACE = \" \",\n            COMMA = \",\",\n            ID = \"id\",\n            UID = \"uid\",\n            ACTION = \"action\";\n        var ORGCHART_STYLES = {\n          wrapper: \"k-orgchart\",\n          container: \"k-orgchart-container\",\n          line: \"k-orgchart-line\",\n          lineVertical: \"k-orgchart-line-v\",\n          lineHorizontal: \"k-orgchart-line-h\",\n          lineVerticalTop: \"k-orgchart-line-v-top\",\n          group: \"k-orgchart-group\",\n          groupVertical: \"k-orgchart-group-v\",\n          groupHorizontal: \"k-orgchart-group-h\",\n          nodesGroup: \"k-orgchart-node-group\",\n          nodesGroupContainer: \"k-orgchart-node-group-container\",\n          nodeContainer: \"k-orgchart-node-container\",\n          node: \"k-orgchart-node\",\n          card: \"k-orgchart-card\",\n          cardMenu: \"k-orgchart-card-menu\",\n          button: \"k-orgchart-button\",\n          focused: \"k-state-focus\",\n          plusIcon: \"k-i-plus\",\n          menuItem: \"k-item\",\n          avatarPreview: \"k-orgchart-avatar-preview\",\n          update: \"k-orgchart-update\",\n          cancel: \"k-orgchart-cancel\",\n          vstack: \"k-vstack\",\n          hstack: \"k-hstack\",\n          closeButton: \"k-i-close\"\n        };\n        var MENU_ITEMS = {\n          edit: \"<li data-action='edit'>#: edit #</li>\",\n          create: \"<li data-action='create'>#: create #</li>\",\n          destroy: \"<li data-action='destroy'>#: destroy #</li>\"\n        };\n        var GROUP_HEADER_TEMPLATE = '<div>' + '<div class=\"k-orgchart-node-group-title\">#: value #</div>' + '<div class=\"k-orgchart-node-group-subtitle\">#: field #</div>' + '</div>';\n        var AVATAR_PREVIEW_TEMPLATE = '<div class=\"k-orgchart-avatar-preview k-hstack k-align-items-center k-pb-lg\">' + '<div class=\"k-avatar k-avatar-solid-primary k-avatar-solid k-avatar-lg k-rounded-full\">' + '<span class=\"k-avatar-image\">' + '<img src=\"#: avatar #\" alt=\"#: name #\">' + '</span>' + '</div>' + '<div class=\"k-px-md\">#: fileName #</div>' + '<button class=\"k-button k-button-md k-rounded-md k-button-flat k-button-flat-base k-icon-button\" aria-label=\"#: destroy #\">' + '<span class=\"k-button-icon k-icon k-i-delete\"></span>' + '</button>' + '</div>';\n        var EDITOR_BUTTONS_TEMPLATE = '<div class=\"k-edit-buttons\">' + '<button type=\"button\" class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-orgchart-cancel\">' + '<span class=\"k-button-text\">#: cancel #</span>' + '</button>' + '<button type=\"button\" class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary k-orgchart-update\">' + '<span class=\"k-button-text\">#: save #</span>' + '</button>' + '</div>';\n        var OrgChart = DataBoundWidget.extend({\n          init: function (element, options, events) {\n            if (isArray(options)) {\n              options = {\n                dataSource: options\n              };\n            }\n\n            options = options || {};\n            DataBoundWidget.fn.init.call(this, element, options);\n\n            if (events) {\n              this._events = events;\n            }\n\n            this._wrapper();\n\n            this._view();\n\n            this._dataSource();\n\n            this._contextMenu();\n\n            if (this.options.autoBind) {\n              this.dataSource.fetch();\n            }\n\n            kendo.notify(this);\n          },\n          options: {\n            name: \"OrgChart\",\n            autoBind: true,\n            cardsColors: null,\n            dataSource: {},\n            editable: {\n              create: true,\n              destroy: true,\n              fields: true,\n              form: {\n                buttonsTemplate: \"\",\n                orientation: \"vertical\"\n              },\n              parent: true\n            },\n            groupField: null,\n            groupHeaderTemplate: GROUP_HEADER_TEMPLATE,\n            template: null,\n            messages: {\n              label: \"Org Chart\",\n              edit: \"Edit\",\n              create: \"Create\",\n              destroy: \"Delete\",\n              destroyContent: \"Are you sure you want to delete this item and all its children?\",\n              destroyTitle: \"Delete item\",\n              cancel: \"Cancel\",\n              save: \"Save\",\n              menuLabel: \"Edit menu\",\n              uploadAvatar: \"Upload new avatar\",\n              parent: \"Parent\",\n              name: \"Name\",\n              title: \"Title\",\n              none: \"--None--\",\n              expand: \"expand\",\n              collapse: \"collapse\"\n            }\n          },\n          events: [CANCEL, CHANGE, COLLAPSE, CREATE, DATABINDING, DATABOUND, DELETE, EDIT, EXPAND, KENDOKEYDOWN, SAVE, SELECT],\n          destroy: function () {\n            if (this._menu) {\n              this._menu.destroy();\n            }\n\n            if (this._editWindow) {\n              this._editWindow.destroy();\n            }\n\n            if (this._confirmDestroy) {\n              this._confirmDestroy.destroy();\n            }\n\n            this.view.destroy();\n            DataBoundWidget.fn.destroy.call(this);\n            this.wrapper.off(NS);\n          },\n          setDataSource: function (dataSource) {\n            this.options.dataSource = dataSource;\n\n            this._dataSource();\n\n            if (this.options.autoBind) {\n              dataSource.fetch();\n            }\n          },\n          setOptions: function (options) {\n            var that = this;\n            DataBoundWidget.fn.setOptions.call(that, options);\n          },\n          append: function (item, parent) {\n            var that = this,\n                $parent = that.view.jqueryItemElement(parent),\n                parentItem = that.dataItem($parent);\n\n            if (!$parent || !parentItem) {\n              return;\n            }\n\n            if (!parentItem.loaded()) {\n              that.dataSource.read({\n                id: parentItem.id\n              }).then(function () {\n                that.dataSource.add(extend({}, item, {\n                  parentId: parentItem.id\n                }));\n                that.dataSource.sync();\n              });\n            } else {\n              that.dataSource.add(extend({}, item, {\n                parentId: parentItem.id\n              }));\n              that.dataSource.sync();\n            }\n          },\n          cancelChanges: function () {\n            if (this.dataSource.hasChanges()) {\n              this.dataSource.cancelChanges();\n            }\n          },\n          collapse: function (item) {\n            return this.view.collapse(item);\n          },\n          dataItem: function (item) {\n            var $item = this.view.jqueryItemElement(item);\n\n            if (!$item || !$item.data(UID)) {\n              return;\n            }\n\n            return this.dataSource.getByUid($item.data(UID));\n          },\n          delete: function (item) {\n            var $item = this.view.jqueryItemElement(item);\n\n            if (!$item) {\n              return;\n            }\n\n            this.dataSource.remove(this.dataItem($item));\n            this.dataSource.sync();\n          },\n          edit: function (item) {\n            var $item = this.view.jqueryItemElement(item),\n                dataItem = this.dataItem($item);\n\n            if (!$item || !dataItem) {\n              return;\n            }\n\n            this._edit(dataItem);\n          },\n          expand: function (item) {\n            return this.view.expand(item);\n          },\n          getCollapsedNodes: function () {\n            return this.wrapper.find(\"[aria-expanded='false']\");\n          },\n          items: function () {\n            return this.wrapper.find(DOT + ORGCHART_STYLES.card);\n          },\n          parent: function (item) {\n            var $item = this.view.jqueryItemElement(item),\n                id;\n\n            if (!$item) {\n              return;\n            }\n\n            id = $item.closest(DOT + ORGCHART_STYLES.group).attr(ID);\n            return this.wrapper.find(\"[aria-owns='\" + id + \"']\");\n          },\n          saveChanges: function () {\n            this.dataSource.sync();\n          },\n          select: function (item) {\n            var $item = this.view._getToSelect(item);\n\n            if (!$item) {\n              return;\n            } else {\n              return this.view.select($item);\n            }\n          },\n          _avatarPreview: function (item, fileName) {\n            var form = this._form,\n                avatar = item.avatar,\n                avatarRemove = function () {\n              formWrapper.find(DOT + ORGCHART_STYLES.avatarPreview).remove();\n              item.set(\"avatar\", null);\n            },\n                formWrapper,\n                data;\n\n            if (!form) {\n              return;\n            }\n\n            if (!fileName) {\n              fileName = avatar.split('\\\\').pop().split('/').pop();\n\n              if (!fileName || fileName.indexOf('.') == -1) {\n                fileName = item.name;\n              }\n            }\n\n            data = {\n              name: item.name,\n              avatar: avatar,\n              fileName: fileName,\n              destroy: this.options.messages.destroy\n            };\n            formWrapper = form.wrapper;\n            formWrapper.find(DOT + ORGCHART_STYLES.avatarPreview).remove();\n            formWrapper.find('[type=\"file\"]').closest(DOT + \"k-form-field\").prepend(kendo.template(AVATAR_PREVIEW_TEMPLATE)(data));\n            formWrapper.find(DOT + ORGCHART_STYLES.avatarPreview + SPACE + DOT + \"k-button\").on(CLICK, avatarRemove);\n          },\n          _contextMenu: function () {\n            var options = this.options,\n                editable = options.editable,\n                messages = options.messages,\n                menuOptions = {\n              target: this.wrapper,\n              filter: DOT + ORGCHART_STYLES.cardMenu,\n              select: this._onMenuItemClick.bind(this),\n              activate: this._onMenuOpen.bind(this),\n              deactivate: this._onMenuClose.bind(this),\n              showOn: \"click\",\n              animation: false\n            },\n                menuElement;\n\n            if (editable === true || editable !== false && (editable.create || editable.destroy || editable.fields || editable.parent)) {\n              menuElement = \"<ul>\";\n\n              if (editable === true) {\n                menuElement += MENU_ITEMS.edit;\n                menuElement += MENU_ITEMS.create;\n                menuElement += MENU_ITEMS.destroy;\n              } else {\n                if (editable.fields || editable.parent) {\n                  menuElement += MENU_ITEMS.edit;\n                }\n\n                if (editable.create) {\n                  menuElement += MENU_ITEMS.create;\n                }\n\n                if (editable.destroy) {\n                  menuElement += MENU_ITEMS.destroy;\n                }\n              }\n\n              menuElement = kendo.template(menuElement)(messages);\n              this._menu = new ContextMenu(menuElement, menuOptions);\n            }\n          },\n          _dataSource: function () {\n            var ds = this.dataSource,\n                dsOptions = this.options.dataSource;\n\n            if (ds) {\n              ds.unbind(CHANGE, this._dataSourceChangeHandler);\n              ds.unbind(ERROR, this._errorHandler);\n              ds.unbind(PROGRESS, this._progressHandler);\n              ds.unbind(REQUEST_START, this._requestStartHandler);\n            }\n\n            this._dataSourceChangeHandler = this._onDataSourceChange.bind(this);\n            this._errorHandler = this._onDataSourceError.bind(this);\n            this._progressHandler = this._progress.bind(this);\n            this._requestStartHandler = this._onDataSourceRequestStart.bind(this);\n            ds = this.dataSource = OrgChartDataSource.create(dsOptions);\n            ds.bind(CHANGE, this._dataSourceChangeHandler);\n            ds.bind(ERROR, this._errorHandler);\n            ds.bind(PROGRESS, this._progressHandler);\n            ds.bind(REQUEST_START, this._requestStartHandler);\n            this.view.dataSource = ds;\n          },\n          _destroyItem: function (item) {\n            var that = this,\n                el = $(\"<div></div>\"),\n                messages = that.options.messages,\n                restoreFocus = function () {\n              that.wrapper.find(DOT + ORGCHART_STYLES.card + \"[tabindex=0]\" + COMMA + DOT + ORGCHART_STYLES.nodesGroup + \"[tabindex=0]\").addClass(ORGCHART_STYLES.focused).trigger(\"focus\");\n            },\n                confirm = this._confirmDestroy = new kendo.ui.Confirm(el, {\n              title: messages.destroyTitle,\n              content: messages.destroyContent,\n              messages: {\n                okText: messages.destroy,\n                cancel: messages.cancel\n              },\n              show: function () {\n                setTimeout(function () {\n                  confirm.element.trigger(\"focus\");\n                });\n              }\n            });\n\n            confirm.open();\n            confirm.result.done(function () {\n              if (!that.trigger(DELETE, {\n                dataItem: item\n              })) {\n                that.dataSource.remove(item);\n                that.dataSource.sync();\n              }\n\n              that.view._shouldRestoreSelection = true;\n\n              that.view._restoreSelection();\n            });\n            confirm.result.fail(restoreFocus);\n          },\n          _edit: function (dataItem) {\n            var that = this,\n                formElement = $(\"<div>\"),\n                windowElement = $(\"<div>\"),\n                messages = this.options.messages,\n                formOptions = this._formOptions(dataItem),\n                save;\n\n            if (!formOptions) {\n              return;\n            }\n\n            that._form = new kendo.ui.Form(formElement, formOptions);\n\n            if (!!dataItem.avatar) {\n              that._avatarPreview(dataItem);\n            }\n\n            windowElement.append(formElement);\n            that._editWindow = new kendo.ui.Window(windowElement, {\n              title: messages.edit,\n              width: \"380 px\",\n              modal: true,\n              close: function (e) {\n                if (!save) {\n                  if (!that.trigger(CANCEL, {\n                    dataItem: dataItem\n                  })) {\n                    that.cancelChanges();\n                  } else {\n                    e.preventDefault();\n                  }\n                } else {\n                  save = false;\n                }\n              },\n              deactivate: function () {\n                windowElement.off(CLICK);\n\n                that._editWindow.destroy();\n\n                that._editWindow = null;\n\n                that.view._restoreSelection();\n              }\n            });\n            windowElement.append(kendo.template(EDITOR_BUTTONS_TEMPLATE)({\n              save: messages.save,\n              cancel: messages.cancel\n            }));\n\n            that._editWindow.center().open();\n\n            windowElement.on(CLICK, DOT + ORGCHART_STYLES.update, function () {\n              if (that._form.validate()) {\n                save = true;\n\n                if (!that.trigger(SAVE, {\n                  dataItem: dataItem\n                })) {\n                  that._editWindow.close();\n\n                  that.saveChanges();\n                }\n              }\n            });\n            windowElement.on(CLICK, DOT + ORGCHART_STYLES.cancel, function () {\n              that._editWindow.close();\n            });\n          },\n          _formOptions: function (item) {\n            var options = this.options,\n                messages = options.messages,\n                optionsForm = options.editable.form,\n                items = [],\n                parentsDs,\n                optionsItems;\n\n            if (optionsForm) {\n              optionsItems = optionsForm.items;\n            }\n\n            if ((!optionsItems || optionsItems.length === 0) && (options.editable === true || options.editable && options.editable.parent)) {\n              parentsDs = [{\n                id: null,\n                name: messages.none\n              }].concat(this.dataSource.prospectParents(item));\n              items.push({\n                field: \"parentId\",\n                editor: \"DropDownList\",\n                label: messages.parent,\n                editorOptions: {\n                  dataSource: parentsDs,\n                  dataValueField: \"id\",\n                  dataTextField: \"name\",\n                  valuePrimitive: true\n                }\n              });\n            }\n\n            if ((!optionsItems || optionsItems.length === 0) && (options.editable === true || options.editable && options.editable.fields)) {\n              items = items.concat([{\n                field: \"name\",\n                label: messages.name,\n                validation: {\n                  required: true\n                }\n              }, {\n                field: \"title\",\n                label: messages.title\n              }, {\n                field: \"avatar\",\n                label: messages.uploadAvatar,\n                editor: this._uploadEditor.bind(this, item)\n              }]);\n            }\n\n            if (optionsForm) {\n              delete optionsForm.formData;\n            }\n\n            if (items.length > 0 || optionsItems && optionsItems.length > 0) {\n              return extend(true, {}, {\n                formData: item,\n                items: items\n              }, optionsForm);\n            } else {\n              return false;\n            }\n          },\n          _onDataSourceChange: function (e) {\n            if (e.action === \"add\" || e.action === \"itemchange\" && this._editWindow) {\n              return;\n            }\n\n            if (!e.action || e.action === \"sync\") {\n              if (this.trigger(DATABINDING, e)) {\n                this._progress(false);\n\n                return;\n              }\n            }\n\n            this._progress(true);\n\n            this.view.refresh();\n\n            if (!e.action || e.action === \"sync\") {\n              this.trigger(DATABOUND);\n            }\n\n            this._progress(false);\n          },\n          _onDataSourceError: function () {\n            this._progress(false);\n          },\n          _onDataSourceRequestStart: function () {\n            this.view._cacheFocused();\n          },\n          _onMenuClose: function () {\n            if ($(document.activeElement).closest(\"[role='alertdialog']\").length === 0) {\n              this.wrapper.find(\"[tabindex='0']\").addClass(ORGCHART_STYLES.focused).trigger(\"focus\");\n            }\n          },\n          _onMenuItemClick: function (e) {\n            var that = this,\n                targetItem = $(e.target).closest(DOT + ORGCHART_STYLES.node).find(DOT + ORGCHART_STYLES.card),\n                dataItem = that.dataItem(targetItem),\n                action = $(e.item).data(ACTION),\n                newItem;\n\n            if (!dataItem) {\n              return;\n            }\n\n            if (action === EDIT) {\n              if (!that.trigger(EDIT, {\n                dataItem: dataItem\n              })) {\n                that._edit(dataItem);\n              }\n            } else if (action === CREATE) {\n              if (!that.trigger(CREATE, {\n                dataItem: dataItem\n              })) {\n                if (!dataItem.loaded()) {\n                  that.dataSource.read({\n                    id: dataItem.id\n                  }).then(function () {\n                    newItem = that.dataSource.add({\n                      parentId: dataItem.id\n                    });\n\n                    that._edit(newItem);\n                  });\n                } else {\n                  newItem = that.dataSource.add({\n                    parentId: dataItem.id\n                  });\n\n                  that._edit(newItem);\n                }\n              }\n            } else if (action === DESTROY) {\n              that._destroyItem(dataItem);\n            }\n          },\n          _onMenuOpen: function () {\n            this.view._cacheFocused();\n\n            this.wrapper.find(DOT + ORGCHART_STYLES.focused).removeClass(ORGCHART_STYLES.focused);\n\n            this._menu.element.find(DOT + ORGCHART_STYLES.menuItem).first().trigger(FOCUS);\n          },\n          _openMenu: function (focused) {\n            if (this._menu) {\n              this._menu.open(focused.find(DOT + ORGCHART_STYLES.cardMenu));\n            }\n          },\n          _progress: function (toggle) {\n            kendo.ui.progress(this.container, toggle);\n          },\n          _triggerCollapse: function (e) {\n            if (this.trigger(COLLAPSE, {\n              item: e.item,\n              dataItems: e.dataItems\n            })) {\n              e.preventDefault();\n            }\n          },\n          _triggerExpand: function (e) {\n            if (this.trigger(EXPAND, {\n              item: e.item,\n              dataItems: e.dataItems\n            })) {\n              e.preventDefault();\n            }\n          },\n          _triggerSelect: function (e) {\n            if (!this.trigger(SELECT, {\n              item: e.item,\n              dataItems: e.dataItems\n            })) {\n              this.view.select(e.item);\n              this.trigger(CHANGE, {\n                item: e.item,\n                dataItems: e.dataItems\n              });\n            }\n          },\n          _uploadEditor: function (item, container) {\n            var that = this;\n            $('<input type=\"file\">').appendTo(container).kendoUpload({\n              async: false,\n              multiple: false,\n              select: function (e) {\n                var fileInfo = e.files[0];\n                var raw = fileInfo.rawFile;\n                var reader = new FileReader();\n\n                if (fileInfo.validationErrors && fileInfo.validationErrors.length > 0) {\n                  return;\n                }\n\n                if (raw) {\n                  reader.onloadend = function () {\n                    item.set(\"avatar\", this.result);\n\n                    that._avatarPreview(item, raw.name);\n                  };\n\n                  reader.readAsDataURL(raw);\n                }\n              },\n              validation: {\n                allowedExtensions: [\".gif\", \".jpg\", \".png\"],\n                maxFileSize: 1048576\n              }\n            });\n          },\n          _view: function () {\n            if (this.options.groupField !== null && this.options.groupField !== undefined) {\n              this.view = new kendo.orgChart.GroupedView(this.container, this.options);\n            } else {\n              this.view = new kendo.orgChart.SingleView(this.container, this.options);\n            }\n\n            this.view.bind(SELECT, this._triggerSelect.bind(this));\n            this.view.bind(EXPAND, this._triggerExpand.bind(this));\n            this.view.bind(COLLAPSE, this._triggerCollapse.bind(this));\n            this.view.bind(MENU, this._openMenu.bind(this));\n          },\n          _wrapper: function () {\n            var container = $(\"<div class='k-orgchart-container'>\");\n            this.wrapper = this.element;\n            this.container = container;\n            this.wrapper.addClass(ORGCHART_STYLES.wrapper);\n            this.wrapper.append(container);\n          }\n        });\n        kendo.ui.plugin(OrgChart);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3)); // add validation to upload images only in the edit pop-up\n\n    /***/\n\n  },\n\n  /***/\n  1377:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./orgchart/data\");\n    /***/\n  },\n\n  /***/\n  1378:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./orgchart/view\");\n    /***/\n  },\n\n  /***/\n  1379:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.form\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}