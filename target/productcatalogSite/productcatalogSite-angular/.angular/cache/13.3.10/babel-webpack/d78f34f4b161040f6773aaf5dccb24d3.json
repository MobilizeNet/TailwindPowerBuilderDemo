{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(990);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  980:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../command\");\n    /***/\n  },\n\n  /***/\n  990:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(980)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function ($) {\n        var kendo = window.kendo,\n            Editor = kendo.ui.editor,\n            Tool = Editor.Tool,\n            Command = Editor.Command,\n            ToolTemplate = Editor.ToolTemplate,\n            EditorUtils = Editor.EditorUtils,\n            dom = Editor.Dom,\n            RangeUtils = Editor.RangeUtils,\n            registerTool = EditorUtils.registerTool;\n        var CopyFormatCommand = Command.extend({\n          init: function (options) {\n            Command.fn.init.call(this, options);\n          },\n          exec: function () {\n            var range = this.lockRange(true);\n            this.inlineStyles = [];\n            this.blockStyles = [];\n            this.collectStyles(range);\n            this.editor.inlineStyles = this.inlineStyles;\n            this.editor.blockStyles = this.blockStyles;\n            this.releaseRange(range);\n          },\n          collectStyles: function (range) {\n            var rangeNodes = RangeUtils.nodes(range);\n            var node;\n\n            if (rangeNodes.length === 1) {\n              node = rangeNodes[0].parentNode;\n            } else {\n              node = range.startContainer;\n            }\n\n            while (node && !dom.is(node, \"body\") && node.getAttribute(\"data-role\") !== \"editor\") {\n              if (dom.isBlock(node)) {\n                this.populateStyles(node, \"blockStyles\");\n\n                if (dom.is(node, \"li\")) {\n                  node = node.parentNode;\n                } else {\n                  node = null;\n                }\n              } else {\n                this.populateStyles(node, \"inlineStyles\");\n                node = node.parentNode;\n              }\n            }\n          },\n          populateStyles: function (node, destination) {\n            var styles = node.style;\n            var attributes = node.attributes;\n            var nodeStyles = {\n              tags: [node.tagName],\n              attr: {\n                style: {}\n              }\n            };\n            var styleValue, styleKey, attributeKey, attributeValue, i;\n\n            for (i = 0; styles && i < styles.length; i++) {\n              styleKey = styles[i];\n              styleValue = styles[styleKey];\n              nodeStyles.attr.style[styleKey] = styleValue;\n            }\n\n            for (i = 0; attributes && i < attributes.length; i++) {\n              attributeKey = attributes[i].nodeName;\n              attributeValue = attributes[i].nodeValue;\n\n              if (attributeKey === \"style\") {\n                continue;\n              } else if (attributeKey === \"class\") {\n                nodeStyles.attr.className = attributeValue;\n              } else {\n                nodeStyles.attr[attributeKey] = attributeValue;\n              }\n            }\n\n            this[destination].push(nodeStyles);\n          }\n        });\n        var ApplyFormatCommand = Command.extend({\n          init: function (options) {\n            Command.fn.init.call(this, options);\n          },\n          exec: function () {\n            var range = this.lockRange(true);\n            var markers = RangeUtils.getMarkers(range);\n            var editor = this.editor;\n            var inlineStyles = editor.inlineStyles;\n            var blockStyles = editor.blockStyles;\n            var nodes;\n\n            if ((!inlineStyles || inlineStyles.length === 0) && (!blockStyles || blockStyles.length === 0)) {\n              return;\n            }\n\n            if (markers.length === 3) {\n              this.marker.removeCaret(range);\n              this.marker.caret = null;\n            }\n\n            this.removeEmptyElementsFromRange(range);\n            nodes = RangeUtils.nodes(range);\n            this.cleanInlineParents(nodes);\n            dom.normalize(range.commonAncestorContainer);\n\n            if (markers.length === 2) {\n              range.setStartAfter(markers[0]);\n              range.setEndBefore(markers[1]);\n            } else {\n              range.setStartBefore(nodes[0]);\n              range.setEndAfter(nodes[0]);\n            }\n\n            nodes = RangeUtils.nodes(range);\n\n            if (nodes && blockStyles && blockStyles.length) {\n              this.applyBlockStyles(nodes, blockStyles);\n            }\n\n            if (nodes && inlineStyles && inlineStyles.length) {\n              this.applyInlineStyles(nodes, inlineStyles);\n            }\n\n            this.releaseRange(range);\n          },\n          removeEmptyElementsFromRange: function (range) {\n            var isEmptyInline = function (node) {\n              return dom.isInline(node) && !node.firstChild && !dom.isMarker(node);\n            };\n\n            var emptyElements, i;\n            emptyElements = RangeUtils.getAll(range, isEmptyInline);\n\n            if (emptyElements && emptyElements.length > 0) {\n              for (i = 0; i < emptyElements.length; i++) {\n                emptyElements[i].parentNode.removeChild(emptyElements[i]);\n              }\n            }\n          },\n          cleanInlineParents: function (nodes) {\n            var i, node, parent, children, j, child, newNode;\n\n            for (i = 0; i < nodes.length; i++) {\n              node = nodes[i];\n              parent = node.parentNode;\n\n              if (this.immutableParent(node)) {\n                continue;\n              }\n\n              while (parent && dom.isInline(parent)) {\n                children = parent.childNodes;\n\n                for (j = 0; j < children.length; j++) {\n                  child = children[j];\n\n                  if (!dom.isMarker(child) && child !== node) {\n                    newNode = parent.cloneNode(true);\n                    newNode.innerHTML = \"\";\n                    dom.wrap(child, newNode);\n                  }\n                }\n\n                dom.unwrap(parent);\n                parent = node.parentNode;\n              }\n            }\n          },\n          applyBlockStyles: function (nodes, blockStyles) {\n            var formatTag = blockStyles[0].tags[0];\n            var attr = blockStyles[0].attr;\n            var document = this.editor.document;\n            var i, len, node, wrapper, blockParent, outerWrapper;\n            var previousNodes, nextNodes, previous, next, prevWrapper, nextWrapper, child, j, listItems;\n\n            for (i = 0, len = nodes.length; i < len; i++) {\n              node = nodes[i];\n\n              if (dom.isWhitespace(node) || this.immutableParent(node)) {\n                continue;\n              }\n\n              blockParent = dom.blockParentOrBody(node);\n\n              if (blockParent.tagName !== \"BODY\" && blockParent.tagName !== formatTag) {\n                if (blockParent.tagName !== \"LI\" && blockParent.tagName !== \"TD\" && blockParent.tagName !== \"TH\") {\n                  previousNodes = [];\n                  nextNodes = [];\n                  previous = node.previousSibling;\n                  next = node.nextSibling;\n\n                  while (previous) {\n                    if (!dom.isMarker(previous)) {\n                      previousNodes.push(previous);\n                    }\n\n                    previous = previous.previousSibling;\n                  }\n\n                  if (previousNodes.length) {\n                    prevWrapper = blockParent.cloneNode(true);\n                    prevWrapper.innerHTML = \"\";\n                    dom.insertBefore(prevWrapper, previousNodes[0]);\n\n                    for (j = 0; j < previousNodes.length; j++) {\n                      child = previousNodes[j];\n                      dom.insertAt(prevWrapper, child, 0);\n                    }\n                  }\n\n                  while (next) {\n                    if (!dom.isMarker(next)) {\n                      nextNodes.push(next);\n                    }\n\n                    next = next.nextSibling;\n                  }\n\n                  if (nextNodes.length) {\n                    nextWrapper = blockParent.cloneNode(true);\n                    nextWrapper.innerHTML = \"\";\n                    dom.insertBefore(nextWrapper, nextNodes[0]);\n\n                    for (j = 0; j < nextNodes.length; j++) {\n                      child = nextNodes[j];\n                      nextWrapper.appendChild(child);\n                    }\n                  }\n\n                  dom.unwrap(blockParent);\n                }\n\n                wrapper = dom.create(document, formatTag, attr);\n                dom.wrap(node, wrapper);\n              } else if (blockParent.tagName === formatTag) {\n                dom.attr(blockParent, attr);\n              }\n            }\n\n            if (blockParent && blockStyles.length === 2 && blockParent.tagName !== \"LI\" && formatTag === \"LI\") {\n              listItems = [];\n\n              while (dom.is(wrapper, \"li\")) {\n                listItems.push(wrapper);\n                wrapper = dom.prev(wrapper);\n              }\n\n              outerWrapper = dom.create(document, blockStyles[1].tags[0], blockStyles[1].attr);\n              dom.insertBefore(outerWrapper, listItems[listItems.length - 1]);\n              outerWrapper.appendChild(listItems[0]);\n\n              for (i = 1, len = listItems.length; i < len; i++) {\n                dom.insertBefore(listItems[i], outerWrapper.firstChild);\n              }\n            } else if (blockParent && blockStyles.length === 2 && blockParent.tagName !== \"LI\") {\n              outerWrapper = dom.create(document, blockStyles[1].tags[0], blockStyles[1].attr);\n              dom.wrap(wrapper, outerWrapper);\n            }\n          },\n          applyInlineStyles: function (nodes, inlineStyles) {\n            var document = this.editor.document;\n            var currentStyle, createdNode, topNode, i, newNode, node;\n\n            for (i = 0; i < inlineStyles.length; i++) {\n              currentStyle = inlineStyles[i];\n              createdNode = dom.create(document, currentStyle.tags[0], currentStyle.attr);\n\n              if (topNode) {\n                createdNode.appendChild(topNode);\n              }\n\n              topNode = createdNode;\n            }\n\n            if (topNode) {\n              for (i = 0; i < nodes.length; i++) {\n                node = nodes[i];\n\n                if (dom.isWhitespace(node) || this.immutableParent(node)) {\n                  continue;\n                }\n\n                newNode = topNode.cloneNode(true);\n                dom.insertBefore(newNode, node);\n\n                while (newNode.children && newNode.children.length) {\n                  newNode = newNode.children[0];\n                }\n\n                newNode.appendChild(node);\n              }\n            }\n          },\n          immutables: function () {\n            return this.editor && this.editor.options.immutables;\n          },\n          immutableParent: function (node) {\n            return this.immutables() && Editor.Immutables.immutableParent(node);\n          }\n        });\n        var CopyFormatTool = Tool.extend({\n          init: function (options) {\n            Tool.fn.init.call(this, options);\n          },\n          command: function (commandArguments) {\n            return new CopyFormatCommand(commandArguments);\n          }\n        });\n        var ApplyFormatTool = Tool.extend({\n          init: function (options) {\n            Tool.fn.init.call(this, options);\n          },\n          command: function (commandArguments) {\n            return new ApplyFormatCommand(commandArguments);\n          }\n        });\n        $.extend(Editor, {\n          CopyFormatCommand: CopyFormatCommand,\n          ApplyFormatCommand: ApplyFormatCommand,\n          CopyFormatTool: CopyFormatTool,\n          ApplyFormatTool: ApplyFormatTool\n        });\n        registerTool(\"copyFormat\", new CopyFormatTool({\n          template: new ToolTemplate({\n            template: EditorUtils.buttonTemplate,\n            title: \"Copy format\"\n          })\n        }));\n        registerTool(\"applyFormat\", new ApplyFormatTool({\n          template: new ToolTemplate({\n            template: EditorUtils.buttonTemplate,\n            title: \"Apply format\"\n          })\n        }));\n      })(window.kendo.jQuery);\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}