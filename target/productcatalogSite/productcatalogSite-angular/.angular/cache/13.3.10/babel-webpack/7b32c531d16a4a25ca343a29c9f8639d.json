{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { WMLogger } from '@mobilize/logging';\nimport { Order } from '../../Contract';\nimport { ErrorCodes, ExceptionHandlerClass } from '../../System/Aop';\n\nvar PointerBehavior = function () {\n  function PointerBehavior() {}\n\n  PointerBehavior.prototype.apply = function (model, root) {\n    if (model.isPointer) {\n      var value = void 0;\n\n      if (model['p']) {\n        value = model['p'];\n      } else if (model['v']) {\n        value = model['v'];\n      }\n\n      var parent_1 = root.getParentByModel(model);\n\n      if (model['p']) {\n        var pointedObject = root.getModel(value);\n\n        if (pointedObject) {\n          pointedObject.addPointerId(parent_1.UniqueID, model.UniqueID);\n          parent_1.addReference(model.uniqueName(), pointedObject);\n        } else {\n          WMLogger.instance().error(\"PointerBehavior: Unable to find model \" + value + \" in the model buffer, pointed by model \" + model.UniqueID);\n        }\n      } else if (model['v']) {\n        parent_1.addValue(model.uniqueName(), value);\n      }\n    }\n  };\n\n  Object.defineProperty(PointerBehavior.prototype, \"Order\", {\n    get: function () {\n      return Order.ORD;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  PointerBehavior = __decorate([ExceptionHandlerClass(ErrorCodes.ClientCore)], PointerBehavior);\n  return PointerBehavior;\n}();\n\nexport { PointerBehavior }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUG9pbnRlckJlaGF2aW9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL0NvcmUvQmVoYXZpb3JzL1BvaW50ZXJCZWhhdmlvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFrQkEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRzdDLE9BQU8sRUFBb0MsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDekUsT0FBTyxFQUFFLFVBQVUsRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBR3JFO0lBQUE7SUFzQ0EsQ0FBQztJQXBDRywrQkFBSyxHQUFMLFVBQU0sS0FBYSxFQUFFLElBQWE7UUFDOUIsSUFBSSxLQUFLLENBQUMsU0FBUyxFQUFFO1lBU2pCLElBQUksS0FBSyxTQUFLLENBQUM7WUFDZixJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDWixLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ3RCO2lCQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNuQixLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ3RCO1lBRUQsSUFBTSxRQUFNLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRTVDLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNaLElBQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQzNDLElBQUksYUFBYSxFQUFFO29CQUNmLGFBQWEsQ0FBQyxZQUFZLENBQUMsUUFBTSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7b0JBQzVELFFBQU0sQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxFQUFFLGFBQWEsQ0FBQyxDQUFDO2lCQUMxRDtxQkFBTTtvQkFDSCxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLDJDQUF5QyxLQUFLLCtDQUEwQyxLQUFLLENBQUMsUUFBVSxDQUFDLENBQUM7aUJBQ3ZJO2FBQ0o7aUJBQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ25CLFFBQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO2FBQzlDO1NBQ0o7SUFDTCxDQUFDO0lBRUQsc0JBQUksa0NBQUs7YUFBVDtZQUNJLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUNyQixDQUFDOzs7T0FBQTtJQXJDUSxlQUFlO1FBRDNCLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUM7T0FDaEMsZUFBZSxDQXNDM0I7SUFBRCxzQkFBQztDQUFBLEFBdENELElBc0NDO1NBdENZLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuKiBDb3B5cmlnaHQgKEMpIE1vYmlsaXplLk5ldCA8aW5mb0Btb2JpbGl6ZS5uZXQ+IC0gQWxsIFJpZ2h0cyBSZXNlcnZlZFxyXG4qXHJcbiogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIE1vYmlsaXplIEZyYW1ld29ya3MsIHdoaWNoIGlzXHJcbiogcHJvcHJpZXRhcnkgYW5kIGNvbmZpZGVudGlhbC5cclxuKlxyXG4qIE5PVElDRTogIEFsbCBpbmZvcm1hdGlvbiBjb250YWluZWQgaGVyZWluIGlzLCBhbmQgcmVtYWluc1xyXG4qIHRoZSBwcm9wZXJ0eSBvZiBNb2JpbGl6ZS5OZXQgQ29ycG9yYXRpb24uXHJcbiogVGhlIGludGVsbGVjdHVhbCBhbmQgdGVjaG5pY2FsIGNvbmNlcHRzIGNvbnRhaW5lZCBoZXJlaW4gYXJlXHJcbiogcHJvcHJpZXRhcnkgdG8gTW9iaWxpemUuTmV0IENvcnBvcmF0aW9uIGFuZCBtYXkgYmUgY292ZXJlZFxyXG4qIGJ5IFUuUy4gUGF0ZW50cywgYW5kIGFyZSBwcm90ZWN0ZWQgYnkgdHJhZGUgc2VjcmV0IG9yIGNvcHlyaWdodCBsYXcuXHJcbiogRGlzc2VtaW5hdGlvbiBvZiB0aGlzIGluZm9ybWF0aW9uIG9yIHJlcHJvZHVjdGlvbiBvZiB0aGlzIG1hdGVyaWFsXHJcbiogaXMgc3RyaWN0bHkgZm9yYmlkZGVuIHVubGVzcyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24gaXMgb2J0YWluZWRcclxuKiBmcm9tIE1vYmlsaXplLk5ldCBDb3Jwb3JhdGlvbi5cclxuKlxyXG4qIFRoaXMgZmlsZSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBhbmQgY29uZGl0aW9ucyBkZWZpbmVkIGluXHJcbiogZmlsZSAnTElDRU5TRS50eHQnLCB3aGljaCBpcyBwYXJ0IG9mIHRoaXMgc291cmNlIGNvZGUgcGFja2FnZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbmltcG9ydCB7IFdNTG9nZ2VyIH0gZnJvbSAnQG1vYmlsaXplL2xvZ2dpbmcnO1xyXG5cclxuaW1wb3J0IHsgSW5qZWN0IH0gZnJvbSAnLi4vLi4vQXBwbGljYXRpb24nO1xyXG5pbXBvcnQgeyBJQ2xpZW50QmVoYXZpb3IsIElFbnRpdHksIElNb2RlbCwgT3JkZXIgfSBmcm9tICcuLi8uLi9Db250cmFjdCc7XHJcbmltcG9ydCB7IEVycm9yQ29kZXMsIEV4Y2VwdGlvbkhhbmRsZXJDbGFzcyB9IGZyb20gJy4uLy4uL1N5c3RlbS9Bb3AnO1xyXG5cclxuQEV4Y2VwdGlvbkhhbmRsZXJDbGFzcyhFcnJvckNvZGVzLkNsaWVudENvcmUpXHJcbmV4cG9ydCBjbGFzcyBQb2ludGVyQmVoYXZpb3IgaW1wbGVtZW50cyBJQ2xpZW50QmVoYXZpb3Ige1xyXG4gICAgLyp0c2xpbnQ6ZGlzYWJsZTpuby1zdHJpbmctbGl0ZXJhbCAqL1xyXG4gICAgYXBwbHkobW9kZWw6IElNb2RlbCwgcm9vdDogSUVudGl0eSk6IHZvaWQge1xyXG4gICAgICAgIGlmIChtb2RlbC5pc1BvaW50ZXIpIHtcclxuICAgICAgICAgICAgLy8gdGhlIG9yaWdpbmFsIGpzb24gb2JqZWN0IGZvciBhIHBvaW50ZXIgaGFzIGFuIHN0cnVjdHVyZSBsaWtlOlxyXG4gICAgICAgICAgICAvLyB7QGs6MiwgcFsnLT5wcm9wZXJ0eSNvYmplY3QxIzInLCAncHJvcGVyMiNwYW5lbDEjMiddfVxyXG4gICAgICAgICAgICAvLyBvclxyXG4gICAgICAgICAgICAvLyB7QGs6MiwgdlsnLT52YWx1ZSNvYmplY3QjMicsICdNeVN0cmluZyddfVxyXG4gICAgICAgICAgICAvLyBhbmQgZ2V0cyB0cmFuc2Zvcm1lZCAoaW4gdGhlIE1vZGVsIGNvbnN0cnVjdG9yKSBpbnRvIHNvbWV0aGluZyBsaWtlOlxyXG4gICAgICAgICAgICAvLyB7QGs6MiwgVW5pcXVlSUQ6J3Byb3BlcnR5I29iamVjdDEjMicsIHA6J3Byb3BlcjIjcGFuZWwxIzInXX1cclxuICAgICAgICAgICAgLy8gb3JcclxuICAgICAgICAgICAgLy8ge0BrOjIsIFVuaXF1ZUlEOid2YWx1ZSNvYmplY3QjMicsIHY6J015U3RyaW5nJ119XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZTogYW55O1xyXG4gICAgICAgICAgICBpZiAobW9kZWxbJ3AnXSkge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBtb2RlbFsncCddO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1vZGVsWyd2J10pIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gbW9kZWxbJ3YnXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gcm9vdC5nZXRQYXJlbnRCeU1vZGVsKG1vZGVsKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChtb2RlbFsncCddKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwb2ludGVkT2JqZWN0ID0gcm9vdC5nZXRNb2RlbCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAocG9pbnRlZE9iamVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvaW50ZWRPYmplY3QuYWRkUG9pbnRlcklkKHBhcmVudC5VbmlxdWVJRCwgbW9kZWwuVW5pcXVlSUQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudC5hZGRSZWZlcmVuY2UobW9kZWwudW5pcXVlTmFtZSgpLCBwb2ludGVkT2JqZWN0KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgV01Mb2dnZXIuaW5zdGFuY2UoKS5lcnJvcihgUG9pbnRlckJlaGF2aW9yOiBVbmFibGUgdG8gZmluZCBtb2RlbCAke3ZhbHVlfSBpbiB0aGUgbW9kZWwgYnVmZmVyLCBwb2ludGVkIGJ5IG1vZGVsICR7bW9kZWwuVW5pcXVlSUR9YCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobW9kZWxbJ3YnXSkge1xyXG4gICAgICAgICAgICAgICAgcGFyZW50LmFkZFZhbHVlKG1vZGVsLnVuaXF1ZU5hbWUoKSwgdmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBPcmRlcigpOiBPcmRlciB7XHJcbiAgICAgICAgcmV0dXJuIE9yZGVyLk9SRDtcclxuICAgIH1cclxufVxyXG4iXX0=","map":null,"metadata":{},"sourceType":"module"}