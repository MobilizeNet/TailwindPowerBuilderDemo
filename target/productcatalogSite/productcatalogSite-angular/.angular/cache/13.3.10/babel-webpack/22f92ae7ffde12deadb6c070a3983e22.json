{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1414);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1051:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.core\");\n    /***/\n  },\n\n  /***/\n  1414:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1051)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"router\",\n        name: \"Router\",\n        category: \"framework\",\n        description: \"The Router class is responsible for tracking the application state and navigating between the application states.\",\n        depends: [\"core\"],\n        hidden: false\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            CHANGE = \"change\",\n            BACK = \"back\",\n            SAME = \"same\",\n            support = kendo.support,\n            location = window.location,\n            history = window.history,\n            CHECK_URL_INTERVAL = 50,\n            BROKEN_BACK_NAV = kendo.support.browser.msie,\n            hashStrip = /^#*/,\n            document = window.document;\n\n        function absoluteURL(path, pathPrefix) {\n          if (!pathPrefix) {\n            return path;\n          }\n\n          if (path + \"/\" === pathPrefix) {\n            path = pathPrefix;\n          }\n\n          var regEx = new RegExp(\"^\" + pathPrefix, \"i\");\n\n          if (!regEx.test(path)) {\n            path = pathPrefix + \"/\" + path;\n          }\n\n          return location.protocol + '//' + (location.host + \"/\" + path).replace(/\\/\\/+/g, '/');\n        }\n\n        function hashDelimiter(bang) {\n          return bang ? \"#!\" : \"#\";\n        }\n\n        function locationHash(hashDelimiter) {\n          var href = location.href; // ignore normal anchors if in hashbang mode - however, still return \"\" if no hash present\n\n          if (hashDelimiter === \"#!\" && href.indexOf(\"#\") > -1 && href.indexOf(\"#!\") < 0) {\n            return null;\n          }\n\n          return href.split(hashDelimiter)[1] || \"\";\n        }\n\n        function stripRoot(root, url) {\n          if (url.indexOf(root) === 0) {\n            return url.substr(root.length).replace(/\\/\\//g, '/');\n          } else {\n            return url;\n          }\n        }\n\n        var HistoryAdapter = kendo.Class.extend({\n          back: function () {\n            if (BROKEN_BACK_NAV) {\n              setTimeout(function () {\n                history.back();\n              });\n            } else {\n              history.back();\n            }\n          },\n          forward: function () {\n            if (BROKEN_BACK_NAV) {\n              setTimeout(function () {\n                history.forward();\n              });\n            } else {\n              history.forward();\n            }\n          },\n          length: function () {\n            return history.length;\n          },\n          replaceLocation: function (url) {\n            location.replace(url);\n          }\n        });\n        var PushStateAdapter = HistoryAdapter.extend({\n          init: function (root) {\n            this.root = root;\n          },\n          navigate: function (to) {\n            history.pushState({}, document.title, absoluteURL(to, this.root));\n          },\n          replace: function (to) {\n            history.replaceState({}, document.title, absoluteURL(to, this.root));\n          },\n          normalize: function (url) {\n            return stripRoot(this.root, url);\n          },\n          current: function () {\n            var current = location.pathname;\n\n            if (location.search) {\n              current += location.search;\n            }\n\n            return stripRoot(this.root, current);\n          },\n          change: function (callback) {\n            $(window).bind(\"popstate.kendo\", callback);\n          },\n          stop: function () {\n            $(window).unbind(\"popstate.kendo\");\n          },\n          normalizeCurrent: function (options) {\n            var fixedUrl,\n                root = options.root,\n                pathname = location.pathname,\n                hash = locationHash(hashDelimiter(options.hashBang));\n\n            if (root === pathname + \"/\") {\n              fixedUrl = root;\n            }\n\n            if (root === pathname && hash) {\n              fixedUrl = absoluteURL(hash.replace(hashStrip, ''), root);\n            }\n\n            if (fixedUrl) {\n              history.pushState({}, document.title, fixedUrl);\n            }\n          }\n        });\n\n        function fixHash(url) {\n          return url.replace(/^(#)?/, \"#\");\n        }\n\n        function fixBang(url) {\n          return url.replace(/^(#(!)?)?/, \"#!\");\n        }\n\n        var HashAdapter = HistoryAdapter.extend({\n          init: function (bang) {\n            this._id = kendo.guid();\n            this.prefix = hashDelimiter(bang);\n            this.fix = bang ? fixBang : fixHash;\n          },\n          navigate: function (to) {\n            location.hash = this.fix(to);\n          },\n          replace: function (to) {\n            this.replaceLocation(this.fix(to));\n          },\n          normalize: function (url) {\n            if (url.indexOf(this.prefix) < 0) {\n              return url;\n            } else {\n              return url.split(this.prefix)[1];\n            }\n          },\n          change: function (callback) {\n            if (support.hashChange) {\n              $(window).on(\"hashchange.\" + this._id, callback);\n            } else {\n              this._interval = setInterval(callback, CHECK_URL_INTERVAL);\n            }\n          },\n          stop: function () {\n            $(window).off(\"hashchange.\" + this._id);\n            clearInterval(this._interval);\n          },\n          current: function () {\n            return locationHash(this.prefix);\n          },\n          normalizeCurrent: function (options) {\n            var pathname = location.pathname,\n                root = options.root;\n\n            if (options.pushState && root !== pathname) {\n              this.replaceLocation(root + this.prefix + stripRoot(root, pathname));\n              return true; // browser will reload at this point.\n            }\n\n            return false;\n          }\n        });\n        var History = kendo.Observable.extend({\n          start: function (options) {\n            options = options || {};\n            this.bind([CHANGE, BACK, SAME], options);\n\n            if (this._started) {\n              return;\n            }\n\n            this._started = true;\n            options.root = options.root || \"/\";\n            var adapter = this.createAdapter(options),\n                current; // adapter may reload the document\n\n            if (adapter.normalizeCurrent(options)) {\n              return;\n            }\n\n            current = adapter.current();\n            $.extend(this, {\n              adapter: adapter,\n              root: options.root,\n              historyLength: adapter.length(),\n              current: current,\n              locations: [current]\n            });\n            adapter.change(this._checkUrl.bind(this));\n          },\n          createAdapter: function (options) {\n            return support.pushState && options.pushState ? new PushStateAdapter(options.root) : new HashAdapter(options.hashBang);\n          },\n          stop: function () {\n            if (!this._started) {\n              return;\n            }\n\n            this.adapter.stop();\n            this.unbind(CHANGE);\n            this._started = false;\n          },\n          change: function (callback) {\n            this.bind(CHANGE, callback);\n          },\n          replace: function (to, silent) {\n            this._navigate(to, silent, function (adapter) {\n              adapter.replace(to);\n              this.locations[this.locations.length - 1] = this.current;\n            });\n          },\n          navigate: function (to, silent) {\n            if (to === \"#:back\") {\n              this.backCalled = true;\n              this.adapter.back();\n              return;\n            }\n\n            this._navigate(to, silent, function (adapter) {\n              adapter.navigate(to);\n              this.locations.push(this.current);\n            });\n          },\n          _navigate: function (to, silent, callback) {\n            var adapter = this.adapter;\n            to = adapter.normalize(to);\n\n            if (this.current === to || this.current === decodeURIComponent(to)) {\n              this.trigger(SAME);\n              return;\n            }\n\n            if (!silent) {\n              if (this.trigger(CHANGE, {\n                url: to,\n                decode: false\n              })) {\n                return;\n              }\n            }\n\n            this.current = to;\n            callback.call(this, adapter);\n            this.historyLength = adapter.length();\n          },\n          _checkUrl: function () {\n            var adapter = this.adapter,\n                current = adapter.current(),\n                newLength = adapter.length(),\n                navigatingInExisting = this.historyLength === newLength,\n                back = current === this.locations[this.locations.length - 2] && navigatingInExisting,\n                backCalled = this.backCalled,\n                prev = this.current;\n\n            if (current === null || this.current === current || this.current === decodeURIComponent(current)) {\n              return true;\n            }\n\n            this.historyLength = newLength;\n            this.backCalled = false;\n            this.current = current;\n\n            if (back && this.trigger(\"back\", {\n              url: prev,\n              to: current\n            })) {\n              adapter.forward();\n              this.current = prev;\n              return;\n            }\n\n            if (this.trigger(CHANGE, {\n              url: current,\n              backButtonPressed: !backCalled\n            })) {\n              if (back) {\n                adapter.forward();\n              } else {\n                adapter.back();\n                this.historyLength--;\n              }\n\n              this.current = prev;\n              return;\n            }\n\n            if (back) {\n              this.locations.pop();\n            } else {\n              this.locations.push(current);\n            }\n          }\n        });\n        kendo.History = History;\n        kendo.History.HistoryAdapter = HistoryAdapter;\n        kendo.History.HashAdapter = HashAdapter;\n        kendo.History.PushStateAdapter = PushStateAdapter;\n        kendo.absoluteURL = absoluteURL;\n        kendo.history = new History();\n      })(window.kendo.jQuery);\n\n      (function () {\n        var kendo = window.kendo,\n            history = kendo.history,\n            Observable = kendo.Observable,\n            INIT = \"init\",\n            ROUTE_MISSING = \"routeMissing\",\n            CHANGE = \"change\",\n            BACK = \"back\",\n            SAME = \"same\",\n            optionalParam = /\\((.*?)\\)/g,\n            namedParam = /(\\(\\?)?:\\w+/g,\n            splatParam = /\\*\\w+/g,\n            escapeRegExp = /[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g;\n\n        function namedParamReplace(match, optional) {\n          return optional ? match : '([^\\/]+)';\n        }\n\n        function routeToRegExp(route, ignoreCase) {\n          return new RegExp('^' + route.replace(escapeRegExp, '\\\\$&').replace(optionalParam, '(?:$1)?').replace(namedParam, namedParamReplace).replace(splatParam, '(.*?)') + '$', ignoreCase ? \"i\" : \"\");\n        }\n\n        function stripUrl(url) {\n          return url.replace(/(\\?.*)|(#.*)/g, \"\");\n        }\n\n        var Route = kendo.Class.extend({\n          init: function (route, callback, ignoreCase) {\n            if (!(route instanceof RegExp)) {\n              route = routeToRegExp(route, ignoreCase);\n            }\n\n            this.route = route;\n            this._callback = callback;\n          },\n          callback: function (url, back, decode) {\n            var params,\n                idx = 0,\n                length,\n                queryStringParams = kendo.parseQueryStringParams(url);\n            queryStringParams._back = back;\n            url = stripUrl(url);\n            params = this.route.exec(url).slice(1);\n            length = params.length;\n\n            if (decode) {\n              for (; idx < length; idx++) {\n                if (typeof params[idx] !== 'undefined') {\n                  params[idx] = decodeURIComponent(params[idx]);\n                }\n              }\n            }\n\n            params.push(queryStringParams);\n\n            this._callback.apply(null, params);\n          },\n          worksWith: function (url, back, decode) {\n            if (this.route.test(stripUrl(url))) {\n              this.callback(url, back, decode);\n              return true;\n            } else {\n              return false;\n            }\n          }\n        });\n        var Router = Observable.extend({\n          init: function (options) {\n            if (!options) {\n              options = {};\n            }\n\n            Observable.fn.init.call(this);\n            this.routes = [];\n            this.pushState = options.pushState;\n            this.hashBang = options.hashBang;\n            this.root = options.root;\n            this.ignoreCase = options.ignoreCase !== false;\n            this.bind([INIT, ROUTE_MISSING, CHANGE, SAME, BACK], options);\n          },\n          destroy: function () {\n            history.unbind(CHANGE, this._urlChangedProxy);\n            history.unbind(SAME, this._sameProxy);\n            history.unbind(BACK, this._backProxy);\n            this.unbind();\n          },\n          start: function () {\n            var that = this,\n                sameProxy = function () {\n              that._same();\n            },\n                backProxy = function (e) {\n              that._back(e);\n            },\n                urlChangedProxy = function (e) {\n              that._urlChanged(e);\n            };\n\n            history.start({\n              same: sameProxy,\n              change: urlChangedProxy,\n              back: backProxy,\n              pushState: that.pushState,\n              hashBang: that.hashBang,\n              root: that.root\n            });\n            var initEventObject = {\n              url: history.current || \"/\",\n              preventDefault: $.noop\n            };\n\n            if (!that.trigger(INIT, initEventObject)) {\n              that._urlChanged(initEventObject);\n            }\n\n            this._urlChangedProxy = urlChangedProxy;\n            this._backProxy = backProxy;\n          },\n          route: function (route, callback) {\n            this.routes.push(new Route(route, callback, this.ignoreCase));\n          },\n          navigate: function (url, silent) {\n            kendo.history.navigate(url, silent);\n          },\n          replace: function (url, silent) {\n            kendo.history.replace(url, silent);\n          },\n          _back: function (e) {\n            if (this.trigger(BACK, {\n              url: e.url,\n              to: e.to\n            })) {\n              e.preventDefault();\n            }\n          },\n          _same: function () {\n            this.trigger(SAME);\n          },\n          _urlChanged: function (e) {\n            var url = e.url;\n            var decode = !!e.decode;\n            var back = e.backButtonPressed;\n\n            if (!url) {\n              url = \"/\";\n            }\n\n            if (this.trigger(CHANGE, {\n              url: e.url,\n              params: kendo.parseQueryStringParams(e.url),\n              backButtonPressed: back\n            })) {\n              e.preventDefault();\n              return;\n            }\n\n            var idx = 0,\n                routes = this.routes,\n                route,\n                length = routes.length;\n\n            for (; idx < length; idx++) {\n              route = routes[idx];\n\n              if (route.worksWith(url, back, decode)) {\n                return;\n              }\n            }\n\n            if (this.trigger(ROUTE_MISSING, {\n              url: url,\n              params: kendo.parseQueryStringParams(url),\n              backButtonPressed: back\n            })) {\n              e.preventDefault();\n            }\n          }\n        });\n        kendo.Router = Router;\n      })();\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}