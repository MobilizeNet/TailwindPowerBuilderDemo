{"ast":null,"code":"import PieChart from '../pie-chart/pie-chart';\nimport DonutSegment from './donut-segment';\nimport { INITIAL_ANIMATION_DURATION } from '../constants';\nimport { deepExtend, defined, setDefaultOptions, valueOrDefault } from '../../common';\nconst DONUT_SECTOR_ANIM_DELAY = 50;\n\nclass DonutChart extends PieChart {\n  addValue(value, sector, fields) {\n    const segmentOptions = deepExtend({}, fields.series, {\n      index: fields.index\n    });\n    this.evalSegmentOptions(segmentOptions, value, fields);\n    this.createLegendItem(value, segmentOptions, fields);\n\n    if (fields.visible === false) {\n      return;\n    }\n\n    const segment = new DonutSegment(value, sector, segmentOptions);\n    Object.assign(segment, fields);\n    this.append(segment);\n    this.points.push(segment);\n  }\n\n  reflow(targetBox) {\n    const options = this.options;\n    const box = targetBox.clone();\n    const space = 5;\n    const minWidth = Math.min(box.width(), box.height());\n    const halfMinWidth = minWidth / 2;\n    const defaultPadding = minWidth - minWidth * 0.85;\n    const series = options.series;\n    const seriesCount = series.length;\n    let padding = valueOrDefault(options.padding, defaultPadding);\n    padding = padding > halfMinWidth - space ? halfMinWidth - space : padding;\n    let totalSize = halfMinWidth - padding;\n    let seriesWithoutSize = 0;\n    let holeSize;\n\n    for (let i = 0; i < seriesCount; i++) {\n      const currentSeries = series[i];\n\n      if (i === 0) {\n        if (defined(currentSeries.holeSize)) {\n          holeSize = currentSeries.holeSize;\n          totalSize -= currentSeries.holeSize;\n        }\n      }\n\n      if (defined(currentSeries.size)) {\n        totalSize -= currentSeries.size;\n      } else {\n        seriesWithoutSize++;\n      }\n\n      if (defined(currentSeries.margin) && i !== seriesCount - 1) {\n        totalSize -= currentSeries.margin;\n      }\n    }\n\n    if (!defined(holeSize)) {\n      const currentSize = (halfMinWidth - padding) / (seriesCount + 0.75);\n      holeSize = currentSize * 0.75;\n      totalSize -= holeSize;\n    }\n\n    let innerRadius = holeSize;\n    let margin = 0;\n    let size, radius;\n    this.seriesConfigs = [];\n\n    for (let i = 0; i < seriesCount; i++) {\n      const currentSeries = series[i];\n      size = valueOrDefault(currentSeries.size, totalSize / seriesWithoutSize);\n      innerRadius += margin;\n      radius = innerRadius + size;\n      this.seriesConfigs.push({\n        innerRadius: innerRadius,\n        radius: radius\n      });\n      margin = currentSeries.margin || 0;\n      innerRadius = radius;\n    }\n\n    super.reflow(targetBox);\n  }\n\n  animationDelay(categoryIndex, seriesIndex, seriesCount) {\n    return categoryIndex * DONUT_SECTOR_ANIM_DELAY + INITIAL_ANIMATION_DURATION * (seriesIndex + 1) / (seriesCount + 1);\n  }\n\n}\n\nsetDefaultOptions(DonutChart, {\n  startAngle: 90,\n  connectors: {\n    width: 2,\n    color: \"#939393\",\n    padding: 8\n  }\n});\nexport default DonutChart;","map":null,"metadata":{},"sourceType":"module"}