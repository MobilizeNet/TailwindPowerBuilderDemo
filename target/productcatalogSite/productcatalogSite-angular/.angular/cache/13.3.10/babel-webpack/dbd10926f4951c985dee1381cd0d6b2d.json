{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { WMLogger } from '@mobilize/logging';\nimport { Constants, ErrorCode, Events, RequestType, Resolve } from '../Contract';\nimport { ChangeNotifier, DirtyCache, ModelCollection, ModelFactory, ModelResolver, TypeService } from '../Core';\nimport { HierarchyBehavior, ModalVisibilityManagementBehavior, PointerBehavior, PropagateChangeIdBehavior } from '../Core/Behaviors';\nimport { HttpServer, RequestBuilder, RequestConfig, UrlResolver } from '../Server';\nimport { NetworkException } from '../System';\nimport { ExceptionHandler } from '../System/Aop';\nimport { Invoker, ModalFactory, ViewManager } from '../UI';\nimport { ArrangeWindowCommand, ChangeFocusControl, ChangeMenu, ChangeStatus, CloseView, CommandFactory, Commands, ContextMenu, FileExplorerRemote, FileExplorerRemoteInput, InputBox, MessageBox, ModalCommandAlert, ModalCommandLoading, ModalCommandSessionExpired, OpenView, PopMenu, PrintScreen, QuitCurrentApplication, RefreshApplicationMenu, ServerVersionCommand, StartEdit } from '../UI/Command';\nimport { ChangeMenuState } from '../UI/Command/ChangeMenuState';\nimport { CloseWindowByTimer } from '../UI/Command/CloseWindowByTimer';\nimport { DisposeWindowCommand } from '../UI/Command/DisposeWindowCommand';\nimport { OpenExternalLinkCommand } from '../UI/Command/OpenExternalLinkCommand';\nimport { SetTextToDataManagerCommand } from '../UI/Command/SetTextToDataManagerCommand';\nimport { SessionExpiredCommand } from '../v5/UI/Command/SessionExpired';\nimport { ActionModel, ActionService, Alert, DeltaHandler, EventAggregator, Inject, Library, WorkQueue } from '.';\nimport { MsgBox } from './../UI/Command/MsgBox';\nimport { CommandsWorker, ModelDeltaWorker, RemovedIdWorker, SwitchIdWorker, ViewDeltaWorker } from './DeltaWorkers';\nimport { PendingActionWorker } from './DeltaWorkers/PendingActionWorker';\nimport { Version } from './Version';\n\nvar App = function () {\n  function App(inject) {\n    if (inject === void 0) {\n      inject = null;\n    }\n\n    this.inject = inject || Inject.Instance;\n    this.version = new Version();\n    this.styleProperties = [];\n  }\n\n  App.prototype.init = function (controller, action, callback, appname) {\n    if (controller === void 0) {\n      controller = 'Home';\n    }\n\n    if (action === void 0) {\n      action = 'AppState';\n    }\n\n    this.register();\n    this.initResolve();\n    this.loadInitialState(controller, action, callback, appname);\n  };\n\n  App.prototype.sendAction = function (action) {\n    this.action.send(action);\n  };\n\n  App.prototype.sendImmediateAction = function (action) {\n    this.action.sendImmediateAction(action);\n  };\n\n  App.prototype.loadInitialState = function (controller, action, callback, appname) {\n    var _this = this;\n\n    var parameters = appname ? [{\n      applicationName: appname\n    }] : null;\n    this.action.send(new ActionModel(controller, action, null, parameters, function () {\n      return _this.afterInit(callback);\n    }, new RequestConfig(RequestType.ModelRequest, true, '')));\n  };\n\n  App.prototype.isSyncronizing = function () {\n    return this.modelResolver.isCoreSynchronizing();\n  };\n\n  App.prototype.executeSafely = function (data) {\n    if (this.isSyncronizing()) {\n      this.workQueue.addToWorkQueue(data);\n    } else {\n      data.fn();\n    }\n  };\n\n  App.prototype.getTypeInfo = function (modelType) {\n    return this.typeService.getTypeInfo(modelType);\n  };\n\n  App.prototype.publishEvent = function (event, data) {\n    this.event.publish(event, data);\n  };\n\n  App.prototype.subscribeEvent = function (event, lambda) {\n    this.event.subscribe(event, lambda);\n  };\n\n  App.prototype.removePendingView = function (viewId) {\n    this.viewManager.removePendingView(viewId);\n  };\n\n  App.prototype.getPendingViews = function () {\n    return this.viewManager.getPendingViews();\n  };\n\n  App.prototype.handleResponse = function (response) {\n    this.deltaHandler.executeWorkers(response);\n  };\n\n  App.prototype.afterInit = function (callback) {\n    if (callback === void 0) {\n      callback = undefined;\n    }\n\n    if (this.onInitialized) {\n      this.onInitialized();\n    }\n\n    if (callback) {\n      callback();\n    }\n  };\n\n  App.prototype.register = function () {\n    this.inject.register(Constants.Server, HttpServer, Resolve.Singleton);\n    this.inject.register(Constants.EventAggregator, EventAggregator, Resolve.Singleton);\n    this.inject.register(Constants.ModelResolver, ModelResolver, Resolve.Singleton);\n    this.inject.register(Constants.Action, ActionService, Resolve.Singleton);\n    this.inject.register(Constants.ViewManager, ViewManager, Resolve.Singleton);\n    this.inject.register(Constants.Buffer, ModelCollection, Resolve.Request);\n    this.inject.register(Constants.Invoker, Invoker, Resolve.Singleton);\n    this.inject.register(Constants.NotifyBuffer, DirtyCache, Resolve.Singleton);\n    this.inject.register(Constants.Library, Library, Resolve.Singleton);\n    this.inject.register(Constants.UrlResolver, UrlResolver, Resolve.Singleton);\n    this.inject.register(Constants.ModelFactory, ModelFactory, Resolve.Singleton);\n    this.inject.register(Constants.ModalFactory, ModalFactory, Resolve.Singleton);\n    this.inject.register(Constants.RequestBuilder, RequestBuilder, Resolve.Singleton);\n    this.inject.register(Constants.DeltaHandler, DeltaHandler, Resolve.Singleton);\n    this.inject.register(Constants.WorkQueue, WorkQueue, Resolve.Singleton);\n    this.inject.register(Constants.TypeService, TypeService, Resolve.Singleton);\n    this.inject.register(Constants.CommandFactory, CommandFactory, Resolve.Singleton);\n    this.executeOnRegister();\n  };\n\n  App.prototype.initResolve = function () {\n    this.viewManager = this.inject.resolve(Constants.ViewManager);\n    this.modelResolver = this.inject.resolve(Constants.ModelResolver);\n    this.deltaHandler = this.inject.resolve(Constants.DeltaHandler);\n    this.event = this.inject.resolve(Constants.EventAggregator);\n    this.action = this.inject.resolve(Constants.Action);\n    this.invoker = this.inject.resolve(Constants.Invoker);\n    this.notifyBuffer = this.inject.resolve(Constants.NotifyBuffer);\n    this.modelFactory = this.inject.resolve(Constants.ModelFactory);\n    this.commandFactory = this.inject.resolve(Constants.CommandFactory);\n    this.httpService = this.inject.resolve(Constants.Server);\n    this.workQueue = this.inject.resolve(Constants.WorkQueue);\n    this.typeService = this.inject.resolve(Constants.TypeService);\n    this.modelResolverInit();\n    this.deltaHandlerInit();\n    this.executeOnInvoker();\n    this.executeOnResolver();\n    this.executeOnViewResolver();\n    this.executeOnCommandRegister();\n    this.subscribe();\n    this.initModules();\n  };\n\n  App.prototype.modelResolverInit = function () {\n    this.modelResolver.registerBehavior(new HierarchyBehavior());\n    this.modelResolver.registerBehavior(new PointerBehavior(), true);\n    this.modelResolver.registerBehavior(new PropagateChangeIdBehavior());\n    this.modelResolver.registerNotifier(new ChangeNotifier());\n    this.modelResolver.registerBehavior(new ModalVisibilityManagementBehavior());\n  };\n\n  App.prototype.deltaHandlerInit = function () {\n    this.deltaHandler.registerWorker(new SwitchIdWorker());\n    this.deltaHandler.registerWorker(new RemovedIdWorker());\n    this.deltaHandler.registerWorker(new ModelDeltaWorker());\n    this.deltaHandler.registerWorker(new CommandsWorker());\n    this.deltaHandler.registerWorker(new ViewDeltaWorker());\n    this.deltaHandler.registerWorker(new PendingActionWorker());\n    this.executeDeltaHandler();\n  };\n\n  App.prototype.executeOnRegister = function () {\n    if (this.onRegister) {\n      this.onRegister(this.inject);\n    }\n  };\n\n  App.prototype.executeDeltaHandler = function () {\n    if (this.onDeltaHandler) {\n      this.onDeltaHandler();\n    }\n  };\n\n  App.prototype.executeOnCommandRegister = function () {\n    this.commandFactory.register(Commands.OpenView, OpenView);\n    this.commandFactory.register(Commands.CloseView, CloseView);\n    this.commandFactory.register(Commands.MessageBox, MessageBox);\n    this.commandFactory.register(Commands.MsgBox, MsgBox);\n    this.commandFactory.register(Commands.InputBox, InputBox);\n    this.commandFactory.register(Commands.ChangeFocusControlCommand, ChangeFocusControl);\n    this.commandFactory.register(Commands.ChangeMenuCommand, ChangeMenu);\n    this.commandFactory.register(Commands.ChangeStatusCommand, ChangeStatus);\n    this.commandFactory.register(Commands.FileExplorerInput, FileExplorerRemoteInput);\n    this.commandFactory.register(Commands.FileExplorer, FileExplorerRemote);\n    this.commandFactory.register(Commands.RefreshApplicationMenu, RefreshApplicationMenu);\n    this.commandFactory.register(Commands.QuitCurrentApplication, QuitCurrentApplication);\n    this.commandFactory.register(Commands.PrintScreenCommand, PrintScreen);\n    this.commandFactory.register(Commands.ContextMenuCommand, ContextMenu);\n    this.commandFactory.register(Commands.OpenExternalLinkCommand, OpenExternalLinkCommand);\n    this.commandFactory.register(Commands.ModalCommandAlert, ModalCommandAlert);\n    this.commandFactory.register(Commands.SessionExpiredCommand, SessionExpiredCommand);\n    this.commandFactory.register(Commands.DisposeWindowCommand, DisposeWindowCommand);\n    this.commandFactory.register(Commands.ChangeMenuStateCommand, ChangeMenuState);\n    this.commandFactory.register(Commands.SetTextToDataManagerCommand, SetTextToDataManagerCommand);\n    this.commandFactory.register(Commands.CloseWindowByTimerCommand, CloseWindowByTimer);\n    this.commandFactory.register(Commands.ServerVersionCommand, ServerVersionCommand);\n    this.commandFactory.register(Commands.ArrangeWindowCommand, ArrangeWindowCommand);\n    this.commandFactory.register(Commands.PopMenuCommand, PopMenu);\n    this.commandFactory.register(Commands.StartEditCommand, StartEdit);\n\n    if (this.onCommandRegister) {\n      this.onCommandRegister(this.commandFactory);\n    }\n  };\n\n  App.prototype.executeOnInvoker = function () {\n    this.invoker.register(this.viewManager);\n\n    if (this.onInvoker) {\n      this.onInvoker(this.invoker);\n    }\n  };\n\n  App.prototype.executeOnResolver = function () {\n    if (this.onResolver) {\n      this.onResolver(this.modelResolver);\n    }\n  };\n\n  App.prototype.executeOnViewResolver = function () {\n    if (this.onViewHandler) {\n      this.onViewHandler(this.viewManager);\n    }\n  };\n\n  App.prototype.handleError = function (exception) {\n    this.invoker.invoke(new ModalCommandLoading({\n      show: false\n    }));\n    var message = '';\n\n    if (exception instanceof NetworkException) {\n      this.handleNetworkError(exception);\n      message = 'Network Error';\n    } else {\n      this.invoker.invoke(new ModalCommandAlert(new Alert('Error', exception.message, '', 'error')));\n      message = 'Internal Error';\n    }\n\n    WMLogger.instance().error(message);\n  };\n\n  App.prototype.handleNetworkError = function (exception) {\n    if (exception.code === ErrorCode.SessionExpire) {\n      this.invoker.invoke(new ModalCommandSessionExpired(new Alert('Session Expired', exception.message ? exception.message : 'The application will be reloaded', '', 'error')));\n    } else if (exception.code === ErrorCode.Socket_Close_Abnormal) {\n      setTimeout(function () {\n        window.location.reload();\n      }, 5000);\n      this.invoker.invoke(new ModalCommandAlert(new Alert('Connection error', 'The application will be reloaded', '', 'error')));\n    } else if (!!exception.message) {\n      this.invoker.invoke(new ModalCommandAlert(new Alert('Network Error', exception.message, '', 'error')));\n    }\n  };\n\n  App.prototype.subscribe = function () {\n    var _this = this;\n\n    this.event.subscribe(Events.ApplyDeltas, function (response) {\n      return _this.handleResponse(response);\n    });\n    this.event.subscribe(Events.ActionSending, function (id) {\n      return _this.invoker.invoke(id && id.eventName ? new ModalCommandLoading({\n        show: true,\n        id: id.data,\n        eventName: id.eventName\n      }) : new ModalCommandLoading({\n        show: true,\n        id: id\n      }));\n    });\n    this.event.subscribe(Events.ActionComplete, function (id) {\n      return _this.invoker.invoke(new ModalCommandLoading({\n        show: false,\n        id: id\n      }));\n    });\n    this.event.subscribe(Events.Error, function (exception) {\n      return _this.handleError(exception);\n    });\n  };\n\n  App.prototype.initModules = function () {\n    var buffer = this.inject.resolve(Constants.Buffer);\n    this.modelResolver.init(buffer);\n    this.notifyBuffer.init(buffer);\n    this.models = buffer;\n    this.viewManager.init(null, buffer);\n  };\n\n  __decorate([ExceptionHandler(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], App.prototype, \"sendAction\", null);\n\n  __decorate([ExceptionHandler(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], App.prototype, \"sendImmediateAction\", null);\n\n  __decorate([ExceptionHandler(), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String, String, Function, String]), __metadata(\"design:returntype\", void 0)], App.prototype, \"loadInitialState\", null);\n\n  return App;\n}();\n\nexport { App }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL0FwcGxpY2F0aW9uL0FwcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFrQkEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRTdDLE9BQU8sRUFDSCxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFFMEMsV0FBVyxFQUFFLE9BQU8sRUFDN0YsTUFBTSxhQUFhLENBQUM7QUFDckIsT0FBTyxFQUFFLGNBQWMsRUFBRSxVQUFVLEVBQUUsZUFBZSxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsV0FBVyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ2hILE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxpQ0FBaUMsRUFBRSxlQUFlLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNySSxPQUFPLEVBQUUsVUFBVSxFQUFFLGNBQWMsRUFBRSxhQUFhLEVBQUUsV0FBVyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ25GLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUM3QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQzNELE9BQU8sRUFDSCxvQkFBb0IsRUFBRSxrQkFBa0IsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFDcEgsa0JBQWtCLEVBQUUsdUJBQXVCLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxpQkFBaUIsRUFBRSxtQkFBbUIsRUFDekcsMEJBQTBCLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFDN0MsV0FBVyxFQUFFLHNCQUFzQixFQUFFLHNCQUFzQixFQUFFLG9CQUFvQixFQUFFLFNBQVMsR0FDL0YsTUFBTSxl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LElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsVUFBQyxTQUFTLElBQUssT0FBQSxLQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxFQUEzQixDQUEyQixDQUFDLENBQUM7SUFDbkYsQ0FBQztJQUVPLHlCQUFXLEdBQW5CO1FBQ0ksSUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQy9CLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBdFJEO1FBREMsZ0JBQWdCLEVBQUU7Ozs7eUNBR2xCO0lBVUQ7UUFEQyxnQkFBZ0IsRUFBRTs7OztrREFHbEI7SUFHRDtRQURDLGdCQUFnQixFQUFFOzs7OytDQUtsQjtJQWtRTCxVQUFDO0NBQUEsQUFqVUQsSUFpVUM7U0FqVVksR0FBRyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4qIENvcHlyaWdodCAoQykgTW9iaWxpemUuTmV0IDxpbmZvQG1vYmlsaXplLm5ldD4gLSBBbGwgUmlnaHRzIFJlc2VydmVkXHJcbipcclxuKiBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgTW9iaWxpemUgRnJhbWV3b3Jrcywgd2hpY2ggaXNcclxuKiBwcm9wcmlldGFyeSBhbmQgY29uZmlkZW50aWFsLlxyXG4qXHJcbiogTk9USUNFOiAgQWxsIGluZm9ybWF0aW9uIGNvbnRhaW5lZCBoZXJlaW4gaXMsIGFuZCByZW1haW5zXHJcbiogdGhlIHByb3BlcnR5IG9mIE1vYmlsaXplLk5ldCBDb3Jwb3JhdGlvbi5cclxuKiBUaGUgaW50ZWxsZWN0dWFsIGFuZCB0ZWNobmljYWwgY29uY2VwdHMgY29udGFpbmVkIGhlcmVpbiBhcmVcclxuKiBwcm9wcmlldGFyeSB0byBNb2JpbGl6ZS5OZXQgQ29ycG9yYXRpb24gYW5kIG1heSBiZSBjb3ZlcmVkXHJcbiogYnkgVS5TLiBQYXRlbnRzLCBhbmQgYXJlIHByb3RlY3RlZCBieSB0cmFkZSBzZWNyZXQgb3IgY29weXJpZ2h0IGxhdy5cclxuKiBEaXNzZW1pbmF0aW9uIG9mIHRoaXMgaW5mb3JtYXRpb24gb3IgcmVwcm9kdWN0aW9uIG9mIHRoaXMgbWF0ZXJpYWxcclxuKiBpcyBzdHJpY3RseSBmb3JiaWRkZW4gdW5sZXNzIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbiBpcyBvYnRhaW5lZFxyXG4qIGZyb20gTW9iaWxpemUuTmV0IENvcnBvcmF0aW9uLlxyXG4qXHJcbiogVGhpcyBmaWxlIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zIGRlZmluZWQgaW5cclxuKiBmaWxlICdMSUNFTlNFLnR4dCcsIHdoaWNoIGlzIHBhcnQgb2YgdGhpcyBzb3VyY2UgY29kZSBwYWNrYWdlLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuaW1wb3J0IHsgV01Mb2dnZXIgfSBmcm9tICdAbW9iaWxpemUvbG9nZ2luZyc7XHJcblxyXG5pbXBvcnQge1xyXG4gICAgQ29uc3RhbnRzLCBFcnJvckNvZGUsIEV2ZW50cywgSUFjdGlvbiwgSUFjdGlvbk1vZGVsLCBJQXBwLCBJQnVmZmVyLCBJQ2hhbmdlQnVmZmVyLCBJQ29tbWFuZEZhY3RvcnksIElEZWx0YUhhbmRsZXIsXHJcbiAgICBJRXZlbnRBZ2dyZWdhdG9yLCBJRXhjZXB0aW9uLCBJSW5qZWN0LCBJSW52b2tlciwgSU1vZGVsRmFjdG9yeSwgSU1vZGVsUmVzb2x2ZXIsIElOZXR3b3JrRXhjZXB0aW9uLCBJUmVzcG9uc2UsXHJcbiAgICBJU2VydmVyLCBJVHlwZVNlcnZpY2UsIElWZXJzaW9uLCBJVmlld01hbmFnZXIsIElXb3JrRGF0YSwgSVdvcmtRdWV1ZSwgUmVxdWVzdFR5cGUsIFJlc29sdmVcclxufSBmcm9tICcuLi9Db250cmFjdCc7XHJcbmltcG9ydCB7IENoYW5nZU5vdGlmaWVyLCBEaXJ0eUNhY2hlLCBNb2RlbENvbGxlY3Rpb24sIE1vZGVsRmFjdG9yeSwgTW9kZWxSZXNvbHZlciwgVHlwZVNlcnZpY2UgfSBmcm9tICcuLi9Db3JlJztcclxuaW1wb3J0IHsgSGllcmFyY2h5QmVoYXZpb3IsIE1vZGFsVmlzaWJpbGl0eU1hbmFnZW1lbnRCZWhhdmlvciwgUG9pbnRlckJlaGF2aW9yLCBQcm9wYWdhdGVDaGFuZ2VJZEJlaGF2aW9yIH0gZnJvbSAnLi4vQ29yZS9CZWhhdmlvcnMnO1xyXG5pbXBvcnQgeyBIdHRwU2VydmVyLCBSZXF1ZXN0QnVpbGRlciwgUmVxdWVzdENvbmZpZywgVXJsUmVzb2x2ZXIgfSBmcm9tICcuLi9TZXJ2ZXInO1xyXG5pbXBvcnQgeyBOZXR3b3JrRXhjZXB0aW9uIH0gZnJvbSAnLi4vU3lzdGVtJztcclxuaW1wb3J0IHsgRXhjZXB0aW9uSGFuZGxlciB9IGZyb20gJy4uL1N5c3RlbS9Bb3AnO1xyXG5pbXBvcnQgeyBJbnZva2VyLCBNb2RhbEZhY3RvcnksIFZpZXdNYW5hZ2VyIH0gZnJvbSAnLi4vVUknO1xyXG5pbXBvcnQge1xyXG4gICAgQXJyYW5nZVdpbmRvd0NvbW1hbmQsIENoYW5nZUZvY3VzQ29udHJvbCwgQ2hhbmdlTWVudSwgQ2hhbmdlU3RhdHVzLCBDbG9zZVZpZXcsIENvbW1hbmRGYWN0b3J5LCBDb21tYW5kcywgQ29udGV4dE1lbnUsXHJcbiAgICBGaWxlRXhwbG9yZXJSZW1vdGUsIEZpbGVFeHBsb3JlclJlbW90ZUlucHV0LCBJbnB1dEJveCwgTWVzc2FnZUJveCwgTW9kYWxDb21tYW5kQWxlcnQsIE1vZGFsQ29tbWFuZExvYWRpbmcsXHJcbiAgICBNb2RhbENvbW1hbmRTZXNzaW9uRXhwaXJlZCwgT3BlblZpZXcsIFBvcE1lbnUsXHJcbiAgICBQcmludFNjcmVlbiwgUXVpdEN1cnJlbnRBcHBsaWNhdGlvbiwgUmVmcmVzaEFwcGxpY2F0aW9uTWVudSwgU2VydmVyVmVyc2lvbkNvbW1hbmQsIFN0YXJ0RWRpdCxcclxufSBmcm9tICcuLi9VSS9Db21tYW5kJztcclxuaW1wb3J0IHsgQ2hhbmdlTWVudVN0YXRlIH0gZnJvbSAnLi4vVUkvQ29tbWFuZC9DaGFuZ2VNZW51U3RhdGUnO1xyXG5pbXBvcnQgeyBDbG9zZVdpbmRvd0J5VGltZXIgfSBmcm9tICcuLi9VSS9Db21tYW5kL0Nsb3NlV2luZG93QnlUaW1lcic7XHJcbmltcG9ydCB7IERpc3Bvc2VXaW5kb3dDb21tYW5kIH0gZnJvbSAnLi4vVUkvQ29tbWFuZC9EaXNwb3NlV2luZG93Q29tbWFuZCc7XHJcbmltcG9ydCB7IE9wZW5FeHRlcm5hbExpbmtDb21tYW5kIH0gZnJvbSAnLi4vVUkvQ29tbWFuZC9PcGVuRXh0ZXJuYWxMaW5rQ29tbWFuZCc7XHJcbmltcG9ydCB7IFNldFRleHRUb0RhdGFNYW5hZ2VyQ29tbWFuZCB9IGZyb20gJy4uL1VJL0NvbW1hbmQvU2V0VGV4dFRvRGF0YU1hbmFnZXJDb21tYW5kJztcclxuaW1wb3J0IHsgU2Vzc2lvbkV4cGlyZWRDb21tYW5kIH0gZnJvbSAnLi4vdjUvVUkvQ29tbWFuZC9TZXNzaW9uRXhwaXJlZCc7XHJcblxyXG5pbXBvcnQgeyBBY3Rpb25Nb2RlbCwgQWN0aW9uU2VydmljZSwgQWxlcnQsIERlbHRhSGFuZGxlciwgRXZlbnRBZ2dyZWdhdG9yLCBJbmplY3QsIExpYnJhcnksIFdvcmtRdWV1ZSB9IGZyb20gJy4nO1xyXG5pbXBvcnQgeyBNc2dCb3ggfSBmcm9tICcuLy4uL1VJL0NvbW1hbmQvTXNnQm94JztcclxuaW1wb3J0IHsgQ29tbWFuZHNXb3JrZXIsIE1vZGVsRGVsdGFXb3JrZXIsIFJlbW92ZWRJZFdvcmtlciwgU3dpdGNoSWRXb3JrZXIsIFZpZXdEZWx0YVdvcmtlciB9IGZyb20gJy4vRGVsdGFXb3JrZXJzJztcclxuaW1wb3J0IHsgUGVuZGluZ0FjdGlvbldvcmtlciB9IGZyb20gJy4vRGVsdGFXb3JrZXJzL1BlbmRpbmdBY3Rpb25Xb3JrZXInO1xyXG5pbXBvcnQgeyBEaWN0aW9uYXJ5IH0gZnJvbSAnLi9EaWN0aW9uYXJ5JztcclxuaW1wb3J0IHsgVmVyc2lvbiB9IGZyb20gJy4vVmVyc2lvbic7XHJcbmV4cG9ydCBjbGFzcyBBcHAgaW1wbGVtZW50cyBJQXBwIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihpbmplY3Q6IElJbmplY3QgPSBudWxsKSB7XHJcbiAgICAgICAgdGhpcy5pbmplY3QgPSBpbmplY3QgfHwgSW5qZWN0Lkluc3RhbmNlO1xyXG4gICAgICAgIHRoaXMudmVyc2lvbiA9IG5ldyBWZXJzaW9uKCk7XHJcbiAgICAgICAgdGhpcy5zdHlsZVByb3BlcnRpZXMgPSBbXTtcclxuICAgIH1cclxuXHJcbiAgICBvblJlZ2lzdGVyOiAoaW5qZWN0OiBJSW5qZWN0KSA9PiB2b2lkO1xyXG4gICAgb25SZXNvbHZlcjogKG1vZGVsUmVzb2x2ZXI6IElNb2RlbFJlc29sdmVyKSA9PiB2b2lkO1xyXG4gICAgb25JbnZva2VyOiAoaW52b2tlcjogSUludm9rZXIpID0+IHZvaWQ7XHJcbiAgICBvblZpZXdIYW5kbGVyOiAodmlld01hbmFnZXI6IElWaWV3TWFuYWdlcikgPT4gdm9pZDtcclxuICAgIG9uQ29tbWFuZFJlZ2lzdGVyOiAoZmFjdG9yeTogSUNvbW1hbmRGYWN0b3J5KSA9PiB2b2lkO1xyXG4gICAgb25Jbml0aWFsaXplZDogKCkgPT4gdm9pZDtcclxuICAgIG9uRXJyb3I6IChlcnJvcikgPT4gdm9pZDtcclxuICAgIG9uRGVsdGFIYW5kbGVyOiAoKSA9PiB2b2lkO1xyXG5cclxuICAgIGluamVjdDogSUluamVjdDtcclxuICAgIHByb3RlY3RlZCB2aWV3TWFuYWdlcjogSVZpZXdNYW5hZ2VyO1xyXG4gICAgcHJvdGVjdGVkIG1vZGVsUmVzb2x2ZXI6IElNb2RlbFJlc29sdmVyO1xyXG4gICAgcHJvdGVjdGVkIGV2ZW50OiBJRXZlbnRBZ2dyZWdhdG9yO1xyXG4gICAgcHJvdGVjdGVkIGFjdGlvbjogSUFjdGlvbjtcclxuICAgIHByb3RlY3RlZCBpbnZva2VyOiBJSW52b2tlcjtcclxuICAgIHByb3RlY3RlZCBub3RpZnlCdWZmZXI6IElDaGFuZ2VCdWZmZXI7XHJcbiAgICBwcm90ZWN0ZWQgbW9kZWxGYWN0b3J5OiBJTW9kZWxGYWN0b3J5O1xyXG4gICAgcHJvdGVjdGVkIG1vZGVsczogSUJ1ZmZlcjtcclxuICAgIHByb3RlY3RlZCBkZWx0YUhhbmRsZXI6IElEZWx0YUhhbmRsZXI7XHJcbiAgICBwcm90ZWN0ZWQgdHlwZVNlcnZpY2U6IElUeXBlU2VydmljZTtcclxuICAgIHByb3RlY3RlZCBjb21tYW5kRmFjdG9yeTogSUNvbW1hbmRGYWN0b3J5O1xyXG4gICAgcHJvdGVjdGVkIGh0dHBTZXJ2aWNlOiBJU2VydmVyO1xyXG4gICAgcHJvdGVjdGVkIHdvcmtRdWV1ZTogSVdvcmtRdWV1ZTtcclxuICAgIHByb3RlY3RlZCB2ZXJzaW9uOiBJVmVyc2lvbjtcclxuICAgIHByb3RlY3RlZCBzdHlsZVByb3BlcnRpZXM6IHN0cmluZ1tdO1xyXG5cclxuICAgIGluaXQoY29udHJvbGxlciA9ICdIb21lJywgYWN0aW9uID0gJ0FwcFN0YXRlJywgY2FsbGJhY2s/OiAoKSA9PiB2b2lkLCBhcHBuYW1lPzogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5yZWdpc3RlcigpO1xyXG4gICAgICAgIHRoaXMuaW5pdFJlc29sdmUoKTtcclxuICAgICAgICAvLyB0aGUgdHlwZXMgaW5mbyBpcyByZXF1aXJlZCBiZWZvcmUgdGhlIGZpcnN0IGxvYWQgb2YgdGhlIGFwcGxpY2F0aW9uIHN0YXRlXHJcbiAgICAgICAgdGhpcy5sb2FkSW5pdGlhbFN0YXRlKGNvbnRyb2xsZXIsIGFjdGlvbiwgY2FsbGJhY2ssIGFwcG5hbWUpO1xyXG4gICAgfVxyXG5cclxuICAgIEBFeGNlcHRpb25IYW5kbGVyKClcclxuICAgIHNlbmRBY3Rpb24oYWN0aW9uOiBJQWN0aW9uTW9kZWwpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmFjdGlvbi5zZW5kKGFjdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNZXRob2QgdG8gc2VuZCBhbiBpbW1lZGlhdGUgYWN0aW9uXHJcbiAgICAgKiBUaGlzIGlzIHRvIGF2b2lkIHdhaXQgZm9yIHJlc3BvbnNlcyB0byBmaW5pc2ggdG8gZXhlY3V0ZSBuZXh0IGFjdGlvblxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7SUFjdGlvbk1vZGVsfSBhY3Rpb25cclxuICAgICAqIEBtZW1iZXJvZiBBcHBcclxuICAgICAqL1xyXG4gICAgQEV4Y2VwdGlvbkhhbmRsZXIoKVxyXG4gICAgc2VuZEltbWVkaWF0ZUFjdGlvbihhY3Rpb246IElBY3Rpb25Nb2RlbCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuYWN0aW9uLnNlbmRJbW1lZGlhdGVBY3Rpb24oYWN0aW9uKTtcclxuICAgIH1cclxuXHJcbiAgICBARXhjZXB0aW9uSGFuZGxlcigpXHJcbiAgICBsb2FkSW5pdGlhbFN0YXRlKGNvbnRyb2xsZXI6IHN0cmluZywgYWN0aW9uOiBzdHJpbmcsIGNhbGxiYWNrPzogKCkgPT4gdm9pZCwgYXBwbmFtZT86IHN0cmluZyk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHBhcmFtZXRlcnMgPSBhcHBuYW1lID8gW3thcHBsaWNhdGlvbk5hbWU6IGFwcG5hbWV9XSA6IG51bGw7XHJcbiAgICAgICAgdGhpcy5hY3Rpb24uc2VuZChuZXcgQWN0aW9uTW9kZWwoY29udHJvbGxlciwgYWN0aW9uLCBudWxsLCBwYXJhbWV0ZXJzLCAoKSA9PiB0aGlzLmFmdGVySW5pdChjYWxsYmFjayksXHJcbiAgICAgICAgICAgIG5ldyBSZXF1ZXN0Q29uZmlnKFJlcXVlc3RUeXBlLk1vZGVsUmVxdWVzdCwgdHJ1ZSwgJycpKSk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNTeW5jcm9uaXppbmcoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kZWxSZXNvbHZlci5pc0NvcmVTeW5jaHJvbml6aW5nKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZXhlY3V0ZVNhZmVseShkYXRhOiBJV29ya0RhdGEpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5pc1N5bmNyb25pemluZygpKSB7XHJcbiAgICAgICAgICAgIHRoaXMud29ya1F1ZXVlLmFkZFRvV29ya1F1ZXVlKGRhdGEpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGRhdGEuZm4oKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VHlwZUluZm8obW9kZWxUeXBlOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnR5cGVTZXJ2aWNlLmdldFR5cGVJbmZvKG1vZGVsVHlwZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGlzaEV2ZW50KGV2ZW50OiBzdHJpbmcsIGRhdGE/OiBhbnkpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmV2ZW50LnB1Ymxpc2goZXZlbnQsIGRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHN1YnNjcmliZUV2ZW50KGV2ZW50OiBzdHJpbmcsIGxhbWJkYTogYW55KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5ldmVudC5zdWJzY3JpYmUoZXZlbnQsIGxhbWJkYSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlUGVuZGluZ1ZpZXcodmlld0lkOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnZpZXdNYW5hZ2VyLnJlbW92ZVBlbmRpbmdWaWV3KHZpZXdJZCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UGVuZGluZ1ZpZXdzKCk6IERpY3Rpb25hcnkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZpZXdNYW5hZ2VyLmdldFBlbmRpbmdWaWV3cygpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBoYW5kbGVSZXNwb25zZShyZXNwb25zZTogSVJlc3BvbnNlKTogdm9pZCB7XHJcblxyXG4gICAgICAgIC8vIERFUFJFQ0FURUQ6IHR5cGUgcmVxdWlyZW1lbnRzIG5vIGxvbmdlciBsb2FkZWQgbGlrZSB0aGlzIGluIFdlYk1hcCA1XHJcbiAgICAgICAgLy8gbGV0IHJlcXVpcmVtZW50cyA9IHRoaXMuZ2V0RGVwZW5kZW5jaWVzRm9yVHlwZXMocmVzcG9uc2UubW9kZWxEZWx0YVR5cGVzKTtcclxuICAgICAgICAvLyBpZiAocmVxdWlyZW1lbnRzICYmIHJlcXVpcmVtZW50cy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgLy8gICAgIHJlcXVpcmVqcyhyZXF1aXJlbWVudHMsICgpID0+IHtcclxuICAgICAgICAvLyAgICAgICAgIHRoYXQuZGVsdGFIYW5kbGVyLmV4ZWN1dGVXb3JrZXJzKHJlc3BvbnNlKTtcclxuICAgICAgICAvLyAgICAgfSk7XHJcbiAgICAgICAgLy8gfSBlbHNlIHtcclxuICAgICAgICAvLyAgICAgdGhhdC5kZWx0YUhhbmRsZXIuZXhlY3V0ZVdvcmtlcnMocmVzcG9uc2UpO1xyXG4gICAgICAgIC8vIH1cclxuXHJcbiAgICAgICAgdGhpcy5kZWx0YUhhbmRsZXIuZXhlY3V0ZVdvcmtlcnMocmVzcG9uc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERFUFJFQ0FURUQ6IHR5cGUgcmVxdWlyZW1lbnRzIG5vIGxvbmdlciBsb2FkZWQgbGlrZSB0aGlzIGluIFdlYk1hcCA1XHJcbiAgICAvLyBwcm90ZWN0ZWQgZ2V0RGVwZW5kZW5jaWVzRm9yVHlwZXMobW9kZWxUeXBlczogYW55KTogQXJyYXk8c3RyaW5nPiB7XHJcbiAgICAvLyAgICAgbGV0IHJlcXVpcmVtZW50cyA9IFtdO1xyXG4gICAgLy8gICAgIGlmIChtb2RlbFR5cGVzICYmIG1vZGVsVHlwZXMubGVuZ3RoKSB7XHJcbiAgICAvLyAgICAgICAgIGZvciAobGV0IG1UeXBlIG9mIG1vZGVsVHlwZXMpIHtcclxuICAgIC8vICAgICAgICAgICAgIC8vIHJlcXVpcmVtZXRzIGFyZSBhc3NpZ25lZCB0byBtdWx0aXBsZXMgb2YgMTBcclxuICAgIC8vICAgICAgICAgICAgIGlmIChtVHlwZSAlIDEwID09PSAwKSB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgLy8gZGVwZW5kZW5jaWVzIGFyZSBjdXJyZW50bHkgb25seSBmb3IgdXNlciBjb250cm9sc1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGxldCBkZXBlbmRlbmN5ID0gdGhpcy5nZXREZXBlbmRlbmN5RnVsbE5hbWUobVR5cGUpO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIGlmIChkZXBlbmRlbmN5ICYmIGRlcGVuZGVuY3kuaW5kZXhPZignVXBncmFkZUhlbHBlcnMnKSA9PT0gLTEgJiYgIXJlcXVpcmVqcy5kZWZpbmVkKGRlcGVuZGVuY3kpKSB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVtZW50cy5wdXNoKGRlcGVuZGVuY3kpO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgICAgIH1cclxuICAgIC8vICAgICAgICAgfVxyXG4gICAgLy8gICAgIH1cclxuICAgIC8vICAgICByZXR1cm4gcmVxdWlyZW1lbnRzO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vIERFUFJFQ0FURUQ6IHR5cGUgcmVxdWlyZW1lbnRzIG5vIGxvbmdlciBsb2FkZWQgbGlrZSB0aGlzIGluIFdlYk1hcCA1XHJcbiAgICAvLyBwcm90ZWN0ZWQgZ2V0RGVwZW5kZW5jeUZ1bGxOYW1lKG1vZGVsVHlwZTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIC8vICAgICBsZXQgdHlwZU5hbWUgPSB0aGlzLmdldFR5cGVJbmZvKG1vZGVsVHlwZSk7XHJcbiAgICAvLyAgICAgaWYgKHR5cGVOYW1lKSB7XHJcbiAgICAvLyAgICAgICAgIHR5cGVOYW1lID0gJ3VzZXJjb250cm9scy8nICsgdHlwZU5hbWU7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gICAgIHJldHVybiB0eXBlTmFtZTtcclxuICAgIC8vIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgYWZ0ZXJJbml0KGNhbGxiYWNrOiAoKSA9PiB2b2lkID0gdW5kZWZpbmVkKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMub25Jbml0aWFsaXplZCkge1xyXG4gICAgICAgICAgICB0aGlzLm9uSW5pdGlhbGl6ZWQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCByZWdpc3RlcigpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmluamVjdC5yZWdpc3RlcihDb25zdGFudHMuU2VydmVyLCBIdHRwU2VydmVyLCBSZXNvbHZlLlNpbmdsZXRvbik7XHJcbiAgICAgICAgdGhpcy5pbmplY3QucmVnaXN0ZXIoQ29uc3RhbnRzLkV2ZW50QWdncmVnYXRvciwgRXZlbnRBZ2dyZWdhdG9yLCBSZXNvbHZlLlNpbmdsZXRvbik7XHJcbiAgICAgICAgdGhpcy5pbmplY3QucmVnaXN0ZXIoQ29uc3RhbnRzLk1vZGVsUmVzb2x2ZXIsIE1vZGVsUmVzb2x2ZXIsIFJlc29sdmUuU2luZ2xldG9uKTtcclxuICAgICAgICB0aGlzLmluamVjdC5yZWdpc3RlcihDb25zdGFudHMuQWN0aW9uLCBBY3Rpb25TZXJ2aWNlLCBSZXNvbHZlLlNpbmdsZXRvbik7XHJcbiAgICAgICAgdGhpcy5pbmplY3QucmVnaXN0ZXIoQ29uc3RhbnRzLlZpZXdNYW5hZ2VyLCBWaWV3TWFuYWdlciwgUmVzb2x2ZS5TaW5nbGV0b24pO1xyXG4gICAgICAgIHRoaXMuaW5qZWN0LnJlZ2lzdGVyKENvbnN0YW50cy5CdWZmZXIsIE1vZGVsQ29sbGVjdGlvbiwgUmVzb2x2ZS5SZXF1ZXN0KTtcclxuICAgICAgICB0aGlzLmluamVjdC5yZWdpc3RlcihDb25zdGFudHMuSW52b2tlciwgSW52b2tlciwgUmVzb2x2ZS5TaW5nbGV0b24pO1xyXG4gICAgICAgIHRoaXMuaW5qZWN0LnJlZ2lzdGVyKENvbnN0YW50cy5Ob3RpZnlCdWZmZXIsIERpcnR5Q2FjaGUsIFJlc29sdmUuU2luZ2xldG9uKTtcclxuICAgICAgICB0aGlzLmluamVjdC5yZWdpc3RlcihDb25zdGFudHMuTGlicmFyeSwgTGlicmFyeSwgUmVzb2x2ZS5TaW5nbGV0b24pO1xyXG4gICAgICAgIHRoaXMuaW5qZWN0LnJlZ2lzdGVyKENvbnN0YW50cy5VcmxSZXNvbHZlciwgVXJsUmVzb2x2ZXIsIFJlc29sdmUuU2luZ2xldG9uKTtcclxuICAgICAgICB0aGlzLmluamVjdC5yZWdpc3RlcihDb25zdGFudHMuTW9kZWxGYWN0b3J5LCBNb2RlbEZhY3RvcnksIFJlc29sdmUuU2luZ2xldG9uKTtcclxuICAgICAgICB0aGlzLmluamVjdC5yZWdpc3RlcihDb25zdGFudHMuTW9kYWxGYWN0b3J5LCBNb2RhbEZhY3RvcnksIFJlc29sdmUuU2luZ2xldG9uKTtcclxuICAgICAgICB0aGlzLmluamVjdC5yZWdpc3RlcihDb25zdGFudHMuUmVxdWVzdEJ1aWxkZXIsIFJlcXVlc3RCdWlsZGVyLCBSZXNvbHZlLlNpbmdsZXRvbik7XHJcbiAgICAgICAgdGhpcy5pbmplY3QucmVnaXN0ZXIoQ29uc3RhbnRzLkRlbHRhSGFuZGxlciwgRGVsdGFIYW5kbGVyLCBSZXNvbHZlLlNpbmdsZXRvbik7XHJcbiAgICAgICAgdGhpcy5pbmplY3QucmVnaXN0ZXIoQ29uc3RhbnRzLldvcmtRdWV1ZSwgV29ya1F1ZXVlLCBSZXNvbHZlLlNpbmdsZXRvbik7XHJcbiAgICAgICAgdGhpcy5pbmplY3QucmVnaXN0ZXIoQ29uc3RhbnRzLlR5cGVTZXJ2aWNlLCBUeXBlU2VydmljZSwgUmVzb2x2ZS5TaW5nbGV0b24pO1xyXG4gICAgICAgIHRoaXMuaW5qZWN0LnJlZ2lzdGVyKENvbnN0YW50cy5Db21tYW5kRmFjdG9yeSwgQ29tbWFuZEZhY3RvcnksIFJlc29sdmUuU2luZ2xldG9uKTtcclxuICAgICAgICB0aGlzLmV4ZWN1dGVPblJlZ2lzdGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGluaXRSZXNvbHZlKCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudmlld01hbmFnZXIgPSB0aGlzLmluamVjdC5yZXNvbHZlKENvbnN0YW50cy5WaWV3TWFuYWdlcik7XHJcbiAgICAgICAgdGhpcy5tb2RlbFJlc29sdmVyID0gdGhpcy5pbmplY3QucmVzb2x2ZShDb25zdGFudHMuTW9kZWxSZXNvbHZlcik7XHJcbiAgICAgICAgdGhpcy5kZWx0YUhhbmRsZXIgPSB0aGlzLmluamVjdC5yZXNvbHZlKENvbnN0YW50cy5EZWx0YUhhbmRsZXIpO1xyXG4gICAgICAgIHRoaXMuZXZlbnQgPSB0aGlzLmluamVjdC5yZXNvbHZlKENvbnN0YW50cy5FdmVudEFnZ3JlZ2F0b3IpO1xyXG4gICAgICAgIHRoaXMuYWN0aW9uID0gdGhpcy5pbmplY3QucmVzb2x2ZShDb25zdGFudHMuQWN0aW9uKTtcclxuICAgICAgICB0aGlzLmludm9rZXIgPSB0aGlzLmluamVjdC5yZXNvbHZlKENvbnN0YW50cy5JbnZva2VyKTtcclxuICAgICAgICB0aGlzLm5vdGlmeUJ1ZmZlciA9IHRoaXMuaW5qZWN0LnJlc29sdmUoQ29uc3RhbnRzLk5vdGlmeUJ1ZmZlcik7XHJcbiAgICAgICAgdGhpcy5tb2RlbEZhY3RvcnkgPSB0aGlzLmluamVjdC5yZXNvbHZlKENvbnN0YW50cy5Nb2RlbEZhY3RvcnkpO1xyXG4gICAgICAgIHRoaXMuY29tbWFuZEZhY3RvcnkgPSB0aGlzLmluamVjdC5yZXNvbHZlKENvbnN0YW50cy5Db21tYW5kRmFjdG9yeSk7XHJcbiAgICAgICAgdGhpcy5odHRwU2VydmljZSA9IHRoaXMuaW5qZWN0LnJlc29sdmUoQ29uc3RhbnRzLlNlcnZlcik7XHJcbiAgICAgICAgdGhpcy53b3JrUXVldWUgPSB0aGlzLmluamVjdC5yZXNvbHZlKENvbnN0YW50cy5Xb3JrUXVldWUpO1xyXG4gICAgICAgIHRoaXMudHlwZVNlcnZpY2UgPSB0aGlzLmluamVjdC5yZXNvbHZlKENvbnN0YW50cy5UeXBlU2VydmljZSk7XHJcbiAgICAgICAgdGhpcy5tb2RlbFJlc29sdmVySW5pdCgpO1xyXG4gICAgICAgIHRoaXMuZGVsdGFIYW5kbGVySW5pdCgpO1xyXG4gICAgICAgIHRoaXMuZXhlY3V0ZU9uSW52b2tlcigpO1xyXG4gICAgICAgIHRoaXMuZXhlY3V0ZU9uUmVzb2x2ZXIoKTtcclxuICAgICAgICB0aGlzLmV4ZWN1dGVPblZpZXdSZXNvbHZlcigpO1xyXG4gICAgICAgIHRoaXMuZXhlY3V0ZU9uQ29tbWFuZFJlZ2lzdGVyKCk7XHJcbiAgICAgICAgdGhpcy5zdWJzY3JpYmUoKTtcclxuICAgICAgICB0aGlzLmluaXRNb2R1bGVzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIG1vZGVsUmVzb2x2ZXJJbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubW9kZWxSZXNvbHZlci5yZWdpc3RlckJlaGF2aW9yKG5ldyBIaWVyYXJjaHlCZWhhdmlvcigpKTtcclxuICAgICAgICB0aGlzLm1vZGVsUmVzb2x2ZXIucmVnaXN0ZXJCZWhhdmlvcihuZXcgUG9pbnRlckJlaGF2aW9yKCksIHRydWUpO1xyXG4gICAgICAgIHRoaXMubW9kZWxSZXNvbHZlci5yZWdpc3RlckJlaGF2aW9yKG5ldyBQcm9wYWdhdGVDaGFuZ2VJZEJlaGF2aW9yKCkpO1xyXG4gICAgICAgIHRoaXMubW9kZWxSZXNvbHZlci5yZWdpc3Rlck5vdGlmaWVyKG5ldyBDaGFuZ2VOb3RpZmllcigpKTtcclxuICAgICAgICB0aGlzLm1vZGVsUmVzb2x2ZXIucmVnaXN0ZXJCZWhhdmlvcihuZXcgTW9kYWxWaXNpYmlsaXR5TWFuYWdlbWVudEJlaGF2aW9yKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBkZWx0YUhhbmRsZXJJbml0KCk6IHZvaWQge1xyXG4gICAgICAgIC8vIHRoaXMgb3JkZXIgbXVzdCBiZSBtYWludGFpbmVkIGR1cmluZyB0aGUgd29ya2VycyBleGVjdXRpb25cclxuICAgICAgICB0aGlzLmRlbHRhSGFuZGxlci5yZWdpc3RlcldvcmtlcihuZXcgU3dpdGNoSWRXb3JrZXIoKSk7XHJcbiAgICAgICAgdGhpcy5kZWx0YUhhbmRsZXIucmVnaXN0ZXJXb3JrZXIobmV3IFJlbW92ZWRJZFdvcmtlcigpKTtcclxuICAgICAgICB0aGlzLmRlbHRhSGFuZGxlci5yZWdpc3RlcldvcmtlcihuZXcgTW9kZWxEZWx0YVdvcmtlcigpKTtcclxuICAgICAgICB0aGlzLmRlbHRhSGFuZGxlci5yZWdpc3RlcldvcmtlcihuZXcgQ29tbWFuZHNXb3JrZXIoKSk7XHJcbiAgICAgICAgdGhpcy5kZWx0YUhhbmRsZXIucmVnaXN0ZXJXb3JrZXIobmV3IFZpZXdEZWx0YVdvcmtlcigpKTtcclxuICAgICAgICB0aGlzLmRlbHRhSGFuZGxlci5yZWdpc3RlcldvcmtlcihuZXcgUGVuZGluZ0FjdGlvbldvcmtlcigpKTtcclxuICAgICAgICB0aGlzLmV4ZWN1dGVEZWx0YUhhbmRsZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgZXhlY3V0ZU9uUmVnaXN0ZXIoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMub25SZWdpc3Rlcikge1xyXG4gICAgICAgICAgICB0aGlzLm9uUmVnaXN0ZXIodGhpcy5pbmplY3QpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgZXhlY3V0ZURlbHRhSGFuZGxlcigpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5vbkRlbHRhSGFuZGxlcikge1xyXG4gICAgICAgICAgICB0aGlzLm9uRGVsdGFIYW5kbGVyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBleGVjdXRlT25Db21tYW5kUmVnaXN0ZXIoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jb21tYW5kRmFjdG9yeS5yZWdpc3RlcihDb21tYW5kcy5PcGVuVmlldywgT3BlblZpZXcpO1xyXG4gICAgICAgIHRoaXMuY29tbWFuZEZhY3RvcnkucmVnaXN0ZXIoQ29tbWFuZHMuQ2xvc2VWaWV3LCBDbG9zZVZpZXcpO1xyXG4gICAgICAgIHRoaXMuY29tbWFuZEZhY3RvcnkucmVnaXN0ZXIoQ29tbWFuZHMuTWVzc2FnZUJveCwgTWVzc2FnZUJveCk7XHJcbiAgICAgICAgdGhpcy5jb21tYW5kRmFjdG9yeS5yZWdpc3RlcihDb21tYW5kcy5Nc2dCb3gsIE1zZ0JveCk7XHJcbiAgICAgICAgdGhpcy5jb21tYW5kRmFjdG9yeS5yZWdpc3RlcihDb21tYW5kcy5JbnB1dEJveCwgSW5wdXRCb3gpO1xyXG4gICAgICAgIHRoaXMuY29tbWFuZEZhY3RvcnkucmVnaXN0ZXIoQ29tbWFuZHMuQ2hhbmdlRm9jdXNDb250cm9sQ29tbWFuZCwgQ2hhbmdlRm9jdXNDb250cm9sKTtcclxuICAgICAgICB0aGlzLmNvbW1hbmRGYWN0b3J5LnJlZ2lzdGVyKENvbW1hbmRzLkNoYW5nZU1lbnVDb21tYW5kLCBDaGFuZ2VNZW51KTtcclxuICAgICAgICB0aGlzLmNvbW1hbmRGYWN0b3J5LnJlZ2lzdGVyKENvbW1hbmRzLkNoYW5nZVN0YXR1c0NvbW1hbmQsIENoYW5nZVN0YXR1cyk7XHJcbiAgICAgICAgdGhpcy5jb21tYW5kRmFjdG9yeS5yZWdpc3RlcihDb21tYW5kcy5GaWxlRXhwbG9yZXJJbnB1dCwgRmlsZUV4cGxvcmVyUmVtb3RlSW5wdXQpO1xyXG4gICAgICAgIHRoaXMuY29tbWFuZEZhY3RvcnkucmVnaXN0ZXIoQ29tbWFuZHMuRmlsZUV4cGxvcmVyLCBGaWxlRXhwbG9yZXJSZW1vdGUpO1xyXG4gICAgICAgIHRoaXMuY29tbWFuZEZhY3RvcnkucmVnaXN0ZXIoQ29tbWFuZHMuUmVmcmVzaEFwcGxpY2F0aW9uTWVudSwgUmVmcmVzaEFwcGxpY2F0aW9uTWVudSk7XHJcbiAgICAgICAgdGhpcy5jb21tYW5kRmFjdG9yeS5yZWdpc3RlcihDb21tYW5kcy5RdWl0Q3VycmVudEFwcGxpY2F0aW9uLCBRdWl0Q3VycmVudEFwcGxpY2F0aW9uKTtcclxuICAgICAgICB0aGlzLmNvbW1hbmRGYWN0b3J5LnJlZ2lzdGVyKENvbW1hbmRzLlByaW50U2NyZWVuQ29tbWFuZCwgUHJpbnRTY3JlZW4pO1xyXG4gICAgICAgIHRoaXMuY29tbWFuZEZhY3RvcnkucmVnaXN0ZXIoQ29tbWFuZHMuQ29udGV4dE1lbnVDb21tYW5kLCBDb250ZXh0TWVudSk7XHJcbiAgICAgICAgdGhpcy5jb21tYW5kRmFjdG9yeS5yZWdpc3RlcihDb21tYW5kcy5PcGVuRXh0ZXJuYWxMaW5rQ29tbWFuZCwgT3BlbkV4dGVybmFsTGlua0NvbW1hbmQpO1xyXG4gICAgICAgIHRoaXMuY29tbWFuZEZhY3RvcnkucmVnaXN0ZXIoQ29tbWFuZHMuTW9kYWxDb21tYW5kQWxlcnQsIE1vZGFsQ29tbWFuZEFsZXJ0KTtcclxuICAgICAgICB0aGlzLmNvbW1hbmRGYWN0b3J5LnJlZ2lzdGVyKENvbW1hbmRzLlNlc3Npb25FeHBpcmVkQ29tbWFuZCwgU2Vzc2lvbkV4cGlyZWRDb21tYW5kKTtcclxuICAgICAgICB0aGlzLmNvbW1hbmRGYWN0b3J5LnJlZ2lzdGVyKENvbW1hbmRzLkRpc3Bvc2VXaW5kb3dDb21tYW5kLCBEaXNwb3NlV2luZG93Q29tbWFuZCk7XHJcbiAgICAgICAgdGhpcy5jb21tYW5kRmFjdG9yeS5yZWdpc3RlcihDb21tYW5kcy5DaGFuZ2VNZW51U3RhdGVDb21tYW5kLCBDaGFuZ2VNZW51U3RhdGUpO1xyXG4gICAgICAgIHRoaXMuY29tbWFuZEZhY3RvcnkucmVnaXN0ZXIoQ29tbWFuZHMuU2V0VGV4dFRvRGF0YU1hbmFnZXJDb21tYW5kLCBTZXRUZXh0VG9EYXRhTWFuYWdlckNvbW1hbmQpO1xyXG4gICAgICAgIHRoaXMuY29tbWFuZEZhY3RvcnkucmVnaXN0ZXIoQ29tbWFuZHMuQ2xvc2VXaW5kb3dCeVRpbWVyQ29tbWFuZCwgQ2xvc2VXaW5kb3dCeVRpbWVyKTtcclxuICAgICAgICB0aGlzLmNvbW1hbmRGYWN0b3J5LnJlZ2lzdGVyKENvbW1hbmRzLlNlcnZlclZlcnNpb25Db21tYW5kLCBTZXJ2ZXJWZXJzaW9uQ29tbWFuZCk7XHJcbiAgICAgICAgdGhpcy5jb21tYW5kRmFjdG9yeS5yZWdpc3RlcihDb21tYW5kcy5BcnJhbmdlV2luZG93Q29tbWFuZCwgQXJyYW5nZVdpbmRvd0NvbW1hbmQpO1xyXG4gICAgICAgIHRoaXMuY29tbWFuZEZhY3RvcnkucmVnaXN0ZXIoQ29tbWFuZHMuUG9wTWVudUNvbW1hbmQsIFBvcE1lbnUpO1xyXG4gICAgICAgIHRoaXMuY29tbWFuZEZhY3RvcnkucmVnaXN0ZXIoQ29tbWFuZHMuU3RhcnRFZGl0Q29tbWFuZCwgU3RhcnRFZGl0KTtcclxuICAgICAgICBpZiAodGhpcy5vbkNvbW1hbmRSZWdpc3Rlcikge1xyXG4gICAgICAgICAgICB0aGlzLm9uQ29tbWFuZFJlZ2lzdGVyKHRoaXMuY29tbWFuZEZhY3RvcnkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGV4ZWN1dGVPbkludm9rZXIoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5pbnZva2VyLnJlZ2lzdGVyKHRoaXMudmlld01hbmFnZXIpO1xyXG4gICAgICAgIGlmICh0aGlzLm9uSW52b2tlcikge1xyXG4gICAgICAgICAgICB0aGlzLm9uSW52b2tlcih0aGlzLmludm9rZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGV4ZWN1dGVPblJlc29sdmVyKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLm9uUmVzb2x2ZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5vblJlc29sdmVyKHRoaXMubW9kZWxSZXNvbHZlcik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZXhlY3V0ZU9uVmlld1Jlc29sdmVyKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLm9uVmlld0hhbmRsZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5vblZpZXdIYW5kbGVyKHRoaXMudmlld01hbmFnZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGhhbmRsZUVycm9yKGV4Y2VwdGlvbjogSUV4Y2VwdGlvbik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuaW52b2tlci5pbnZva2UobmV3IE1vZGFsQ29tbWFuZExvYWRpbmcoeyBzaG93OiBmYWxzZSB9KSk7XHJcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSAnJztcclxuICAgICAgICBpZiAoZXhjZXB0aW9uIGluc3RhbmNlb2YgTmV0d29ya0V4Y2VwdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLmhhbmRsZU5ldHdvcmtFcnJvcihleGNlcHRpb24pO1xyXG4gICAgICAgICAgICBtZXNzYWdlID0gJ05ldHdvcmsgRXJyb3InO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW52b2tlci5pbnZva2UobmV3IE1vZGFsQ29tbWFuZEFsZXJ0KFxyXG4gICAgICAgICAgICAgICAgbmV3IEFsZXJ0KCdFcnJvcicsIGV4Y2VwdGlvbi5tZXNzYWdlLCAnJywgJ2Vycm9yJykpKTtcclxuICAgICAgICAgICAgbWVzc2FnZSA9ICdJbnRlcm5hbCBFcnJvcic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGFsd2F5cyBzaG93IGluIGNvbnNvbGUgZm9yIGNvbnNpc3RlbmN5IG9mIHRyYWNpbmdcclxuICAgICAgICBXTUxvZ2dlci5pbnN0YW5jZSgpLmVycm9yKG1lc3NhZ2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaGFuZGxlTmV0d29ya0Vycm9yKGV4Y2VwdGlvbjogSU5ldHdvcmtFeGNlcHRpb24pOiB2b2lkIHtcclxuICAgICAgICBpZiAoZXhjZXB0aW9uLmNvZGUgPT09IEVycm9yQ29kZS5TZXNzaW9uRXhwaXJlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW52b2tlci5pbnZva2UobmV3IE1vZGFsQ29tbWFuZFNlc3Npb25FeHBpcmVkKFxyXG4gICAgICAgICAgICAgICAgbmV3IEFsZXJ0KCdTZXNzaW9uIEV4cGlyZWQnLCBleGNlcHRpb24ubWVzc2FnZSA/IGV4Y2VwdGlvbi5tZXNzYWdlIDogJ1RoZSBhcHBsaWNhdGlvbiB3aWxsIGJlIHJlbG9hZGVkJywgJycsICdlcnJvcicpKSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChleGNlcHRpb24uY29kZSA9PT0gRXJyb3JDb2RlLlNvY2tldF9DbG9zZV9BYm5vcm1hbCkge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcclxuICAgICAgICAgICAgfSwgNTAwMCk7XHJcbiAgICAgICAgICAgIHRoaXMuaW52b2tlci5pbnZva2UobmV3IE1vZGFsQ29tbWFuZEFsZXJ0KFxyXG4gICAgICAgICAgICAgICAgbmV3IEFsZXJ0KCdDb25uZWN0aW9uIGVycm9yJywgICdUaGUgYXBwbGljYXRpb24gd2lsbCBiZSByZWxvYWRlZCcsICcnLCAnZXJyb3InKSkpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoISFleGNlcHRpb24ubWVzc2FnZSkge1xyXG4gICAgICAgICAgICB0aGlzLmludm9rZXIuaW52b2tlKG5ldyBNb2RhbENvbW1hbmRBbGVydChcclxuICAgICAgICAgICAgICAgIG5ldyBBbGVydCgnTmV0d29yayBFcnJvcicsIGV4Y2VwdGlvbi5tZXNzYWdlLCAnJywgJ2Vycm9yJykpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzdWJzY3JpYmUoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5ldmVudC5zdWJzY3JpYmUoRXZlbnRzLkFwcGx5RGVsdGFzLCAocmVzcG9uc2U6IElSZXNwb25zZSkgPT4gdGhpcy5oYW5kbGVSZXNwb25zZShyZXNwb25zZSkpO1xyXG4gICAgICAgIHRoaXMuZXZlbnQuc3Vic2NyaWJlKEV2ZW50cy5BY3Rpb25TZW5kaW5nLCAoaWQpID0+IHRoaXMuaW52b2tlci5pbnZva2UoXHJcbiAgICAgICAgICAgIGlkICYmIGlkLmV2ZW50TmFtZSA/IG5ldyBNb2RhbENvbW1hbmRMb2FkaW5nKHsgc2hvdzogdHJ1ZSAsIGlkOiBpZC5kYXRhLCBldmVudE5hbWU6IGlkLmV2ZW50TmFtZX0pIDpcclxuICAgICAgICAgICAgbmV3IE1vZGFsQ29tbWFuZExvYWRpbmcoe3Nob3c6IHRydWUsIGlkfSkpKSA7XHJcbiAgICAgICAgdGhpcy5ldmVudC5zdWJzY3JpYmUoRXZlbnRzLkFjdGlvbkNvbXBsZXRlLCAoaWQpID0+IHRoaXMuaW52b2tlci5pbnZva2UoXHJcbiAgICAgICAgICAgIG5ldyBNb2RhbENvbW1hbmRMb2FkaW5nKHsgc2hvdzogZmFsc2UgLCBpZH0pKSk7XHJcbiAgICAgICAgdGhpcy5ldmVudC5zdWJzY3JpYmUoRXZlbnRzLkVycm9yLCAoZXhjZXB0aW9uKSA9PiB0aGlzLmhhbmRsZUVycm9yKGV4Y2VwdGlvbikpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaW5pdE1vZHVsZXMoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgYnVmZmVyID0gdGhpcy5pbmplY3QucmVzb2x2ZShDb25zdGFudHMuQnVmZmVyKTtcclxuICAgICAgICB0aGlzLm1vZGVsUmVzb2x2ZXIuaW5pdChidWZmZXIpO1xyXG4gICAgICAgIHRoaXMubm90aWZ5QnVmZmVyLmluaXQoYnVmZmVyKTtcclxuICAgICAgICB0aGlzLm1vZGVscyA9IGJ1ZmZlcjtcclxuICAgICAgICB0aGlzLnZpZXdNYW5hZ2VyLmluaXQobnVsbCwgYnVmZmVyKTtcclxuICAgIH1cclxufVxyXG4iXX0=","map":null,"metadata":{},"sourceType":"module"}