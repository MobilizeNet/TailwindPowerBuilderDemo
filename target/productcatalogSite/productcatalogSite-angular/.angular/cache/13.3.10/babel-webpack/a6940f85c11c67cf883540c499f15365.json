{"ast":null,"code":"import { addClass, defined, valueOrDefault, deepExtend, setDefaultOptions } from '../common';\nimport { appendHtml, removeChildren } from './utils';\nimport { Observable } from './scroller/observable';\nexport class Attribution extends Observable {\n  constructor(element, options) {\n    super();\n    this.element = element;\n\n    this._initOptions(options);\n\n    this.items = [];\n    addClass(this.element, 'k-widget k-attribution');\n  }\n\n  _initOptions(options) {\n    this.options = deepExtend({}, this.options, options);\n  }\n\n  filter(extent, zoom) {\n    this._extent = extent;\n    this._zoom = zoom;\n\n    this._render();\n  }\n\n  add(item) {\n    let newItem = item;\n\n    if (defined(item)) {\n      if (typeof item === 'string') {\n        newItem = {\n          text: item\n        };\n      }\n\n      this.items.push(newItem);\n\n      this._render();\n    }\n  }\n\n  remove(text) {\n    let result = [];\n\n    for (let i = 0; i < this.items.length; i++) {\n      let item = this.items[i];\n\n      if (item.text !== text) {\n        result.push(item);\n      }\n    }\n\n    this.items = result;\n\n    this._render();\n  }\n\n  clear() {\n    this.items = [];\n    removeChildren(this.element);\n  }\n\n  _render() {\n    let result = [];\n\n    for (let i = 0; i < this.items.length; i++) {\n      let item = this.items[i];\n\n      let text = this._itemText(item);\n\n      if (text !== '') {\n        result.push(text);\n      }\n    }\n\n    if (result.length > 0) {\n      removeChildren(this.element);\n      const html = result.join(this.options.separator);\n      appendHtml(html, this.element);\n      this.showElement();\n    } else {\n      this.hideElement();\n    }\n  }\n\n  hideElement() {\n    this.element.style.display = \"none\";\n  }\n\n  showElement() {\n    this.element.style.display = \"\";\n  }\n\n  _itemText(item) {\n    let text = '';\n\n    let inZoomLevel = this._inZoomLevel(item.minZoom, item.maxZoom);\n\n    let inArea = this._inArea(item.extent);\n\n    if (inZoomLevel && inArea) {\n      text += item.text;\n    }\n\n    return text;\n  }\n\n  _inZoomLevel(min, max) {\n    let result = true;\n    let newMin = valueOrDefault(min, -Number.MAX_VALUE);\n    let newMax = valueOrDefault(max, Number.MAX_VALUE);\n    result = this._zoom > newMin && this._zoom < newMax;\n    return result;\n  }\n\n  _inArea(area) {\n    let result = true;\n\n    if (area) {\n      result = area.contains(this._extent);\n    }\n\n    return result;\n  }\n\n}\nsetDefaultOptions(Attribution, {\n  name: 'Attribution',\n  separator: '&nbsp;|&nbsp;'\n});","map":null,"metadata":{},"sourceType":"module"}