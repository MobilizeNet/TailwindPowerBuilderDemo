{"ast":null,"code":"import { Inject } from '../Application';\nimport { Constants, ContentType, ErrorCode, Events } from '../Contract';\nimport { NetworkException } from '../System';\nimport { RequestConfig } from '.';\n\nvar HttpServer = function () {\n  function HttpServer(inject) {\n    if (inject === void 0) {\n      inject = null;\n    }\n\n    this.inject = inject || Inject.Instance;\n    this.library = this.inject.resolve(Constants.Library);\n    this.event = this.inject.resolve(Constants.EventAggregator);\n  }\n\n  HttpServer.prototype.get = function (url, params, callback) {\n    var _this = this;\n\n    var request = this.library.query.get(url, params);\n    request.done(function (result) {\n      return _this.ExecuteResponse(result, callback);\n    });\n    request.fail(this.failedResponse(callback));\n  };\n\n  HttpServer.prototype.post = function (url, data, callback, config) {\n    var _this = this;\n\n    var request = this.sendRequest(url, data, config);\n    request.always(function () {\n      _this.event.publish(Events.ActionComplete);\n    });\n    request.done(function (response) {\n      if (callback) {\n        callback(response);\n      }\n    });\n    request.fail(this.failedResponse(callback));\n  };\n\n  HttpServer.prototype.failedResponse = function (callback) {\n    var _this = this;\n\n    return function (response) {\n      if (response.status) {\n        _this.event.publish(Events.Error, new NetworkException(response.responseText, response.status));\n      }\n\n      if (callback) {\n        callback(response);\n      }\n    };\n  };\n\n  HttpServer.prototype.ExecuteResponse = function (response, callback) {\n    this.validateResponse(response);\n\n    if (callback) {\n      callback(response);\n    }\n  };\n\n  HttpServer.prototype.validateResponse = function (response) {\n    if (response.ErrorOcurred) {\n      var message = response.ExMessage + \"<pre>\" + response.ExStackTrace + \"<pre>\";\n      throw new NetworkException(message, ErrorCode.ServerError);\n    }\n  };\n\n  HttpServer.prototype.sendRequest = function (url, data, config) {\n    config = config || new RequestConfig();\n    config.contentType = config.contentType || ContentType.applicationJson;\n\n    if (config.contentType && config.contentType === ContentType.multipartFormdata) {\n      return this.processFormData(url, data);\n    } else {\n      return this.processDefault(url, data, config);\n    }\n  };\n\n  HttpServer.prototype.processFormData = function (url, data) {\n    var _this = this;\n\n    return this.library.query.ajax(url, {\n      beforeSend: function () {\n        _this.event.publish(Events.ActionSending);\n      },\n      contentType: false,\n      data: data,\n      headers: {\n        WM: true\n      },\n      processData: false,\n      type: 'POST'\n    });\n  };\n\n  HttpServer.prototype.processDefault = function (url, data, config) {\n    var _this = this;\n\n    config.headers.WM = 'true';\n    return this.library.query.ajax(url, {\n      beforeSend: function () {\n        _this.event.publish(Events.ActionSending);\n      },\n      contentType: config.contentType,\n      data: data,\n      dataType: 'json',\n      headers: config.headers,\n      type: 'POST'\n    });\n  };\n\n  return HttpServer;\n}();\n\nexport { HttpServer }; //# sourceMappingURL=data:application/json;base64,","map":null,"metadata":{},"sourceType":"module"}