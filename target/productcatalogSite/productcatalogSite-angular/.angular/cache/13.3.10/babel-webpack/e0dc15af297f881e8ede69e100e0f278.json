{"ast":null,"code":"import { drawing as draw, geometry as geom } from '@progress/kendo-drawing';\nimport { round, setDefaultOptions } from '../common';\nimport { CENTER, CIRCLE, COORD_PRECISION, CROSS, ROUNDED_RECT, TRIANGLE } from '../common/constants';\nimport { valueOrDefault } from '../drawing-utils';\nimport BoxElement from './box-element';\n\nclass ShapeElement extends BoxElement {\n  constructor(options, pointData) {\n    super(options);\n    this.pointData = pointData;\n  }\n\n  getElement() {\n    const {\n      options,\n      paddingBox: box\n    } = this;\n    const {\n      type,\n      rotation\n    } = options;\n    const center = box.center();\n    const halfWidth = box.width() / 2;\n    const halfHeight = box.height() / 2;\n\n    if (!options.visible || !this.hasBox()) {\n      return null;\n    }\n\n    const style = this.visualStyle();\n    let element;\n\n    if (type === CIRCLE) {\n      element = new draw.Circle(new geom.Circle([round(box.x1 + halfWidth, COORD_PRECISION), round(box.y1 + halfHeight, COORD_PRECISION)], Math.min(halfWidth, halfHeight)), style);\n    } else if (type === TRIANGLE) {\n      element = draw.Path.fromPoints([[box.x1 + halfWidth, box.y1], [box.x1, box.y2], [box.x2, box.y2]], style).close();\n    } else if (type === CROSS) {\n      element = new draw.MultiPath(style);\n      element.moveTo(box.x1, box.y1).lineTo(box.x2, box.y2);\n      element.moveTo(box.x1, box.y2).lineTo(box.x2, box.y1);\n    } else {\n      const rect = box.toRect();\n\n      if (type === ROUNDED_RECT) {\n        const borderRadius = valueOrDefault(options.borderRadius, rect.width() / 5);\n        rect.setCornerRadius(borderRadius);\n      }\n\n      element = draw.Path.fromRect(rect, style);\n    }\n\n    if (rotation) {\n      element.transform(geom.transform().rotate(-rotation, [center.x, center.y]));\n    }\n\n    element.options.zIndex = options.zIndex;\n    return element;\n  }\n\n  createElement() {\n    const customVisual = this.options.visual;\n    const pointData = this.pointData || {};\n    let visual;\n\n    if (customVisual) {\n      visual = customVisual({\n        value: pointData.value,\n        dataItem: pointData.dataItem,\n        sender: this.getSender(),\n        series: pointData.series,\n        category: pointData.category,\n        rect: this.paddingBox.toRect(),\n        options: this.visualOptions(),\n        createVisual: () => this.getElement()\n      });\n    } else {\n      visual = this.getElement();\n    }\n\n    return visual;\n  }\n\n  visualOptions() {\n    const options = this.options;\n    return {\n      background: options.background,\n      border: options.border,\n      margin: options.margin,\n      padding: options.padding,\n      type: options.type,\n      size: options.width,\n      visible: options.visible\n    };\n  }\n\n  createVisual() {\n    this.visual = this.createElement();\n  }\n\n}\n\nsetDefaultOptions(ShapeElement, {\n  type: CIRCLE,\n  align: CENTER,\n  vAlign: CENTER\n});\nexport default ShapeElement;","map":null,"metadata":{},"sourceType":"module"}