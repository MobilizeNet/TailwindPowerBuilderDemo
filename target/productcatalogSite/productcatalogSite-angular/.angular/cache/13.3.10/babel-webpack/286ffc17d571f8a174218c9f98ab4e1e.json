{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1685);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  20:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.core\");\n    /***/\n  },\n\n  /***/\n  977:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.window\");\n    /***/\n  },\n\n  /***/\n  1665:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.binder\");\n    /***/\n  },\n\n  /***/\n  1685:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(20), __webpack_require__(1665), __webpack_require__(977), __webpack_require__(1686), __webpack_require__(1687)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function (kendo) {\n        /* jshint laxbreak:true */\n        var $ = kendo.jQuery;\n        var COMMAND_TYPES = {\n          AUTO_FILL: \"autoFill\",\n          CLEAR: \"clear\",\n          CUT: \"cut\",\n          EDIT: \"edit\",\n          PASTE: \"paste\",\n          VALIDATION: \"validation\"\n        };\n        var Command = kendo.spreadsheet.Command = kendo.Class.extend({\n          init: function (options) {\n            this.options = options;\n            this._workbook = options.workbook;\n            this._property = options && options.property;\n            this._state = {};\n          },\n          range: function (range) {\n            if (range !== undefined) {\n              this._setRange(range);\n            }\n\n            return this._range;\n          },\n          _setRange: function (range) {\n            this._range = range;\n          },\n          redo: function () {\n            this.range().select();\n            this.exec();\n          },\n          undo: function () {\n            this.setState(this._state);\n          },\n          getState: function () {\n            this._state = this.range().getState(this._property);\n          },\n          setState: function (state) {\n            this.range().setState(state);\n          },\n          rejectState: function (validationState) {\n            this.undo();\n            return {\n              title: validationState.title,\n              body: validationState.message,\n              reason: \"error\",\n              type: \"validationError\"\n            };\n          },\n          _forEachCell: function (callback) {\n            var range = this.range();\n            var ref = range._ref;\n            ref.forEach(function (ref) {\n              range.sheet().forEach(ref.toRangeRef(), callback.bind(this));\n            }.bind(this));\n          },\n          usesImage: function\n            /* image id from workbook._images */\n          () {\n            return false;\n          }\n        });\n        kendo.spreadsheet.DrawingUpdateCommand = Command.extend({\n          init: function (options) {\n            this._sheet = options.sheet;\n            this._drawing = options.drawing;\n            this._orig = this._drawing.clone();\n            this._previous = options.previous;\n          },\n          exec: function () {},\n          undo: function () {\n            this._drawing.reset(this._previous);\n\n            this._sheet._activeDrawing = this._drawing;\n\n            this._sheet.triggerChange({\n              layout: true\n            });\n          },\n          redo: function () {\n            this._drawing.reset(this._orig);\n\n            this._sheet._activeDrawing = this._drawing;\n\n            this._sheet.triggerChange({\n              layout: true\n            });\n          },\n          usesImage: function (img) {\n            return this._drawing.image === img || this._orig.image === img || this._previous.image === img;\n          }\n        });\n        var DrawingCommand = Command.extend({\n          init: function (options) {\n            Command.fn.init.call(this, options);\n            this._drawing = options.drawing;\n          },\n          usesImage: function (img) {\n            return this._drawing.image === img;\n          }\n        });\n        kendo.spreadsheet.InsertImageCommand = DrawingCommand.extend({\n          init: function (options) {\n            DrawingCommand.fn.init.call(this, options);\n            this._blob = options.blob;\n            this._width = options.width;\n            this._height = options.height;\n          },\n          exec: function () {\n            var range = this.range();\n            var sheet = range.sheet();\n            var width = this._width;\n            var height = this._height;\n            var aspect = width / height;\n\n            if (width > height) {\n              width = Math.min(width, 300);\n              height = width / aspect;\n            } else {\n              height = Math.min(height, 300);\n              width = height * aspect;\n            }\n\n            this._drawing = sheet.addDrawing({\n              topLeftCell: range.topLeft(),\n              offsetX: 5,\n              offsetY: 5,\n              width: width,\n              height: height,\n              opacity: 1,\n              image: this._workbook.addImage(this._blob)\n            }, true);\n            this._blob = null;\n          },\n          undo: function () {\n            var sheet = this.range().sheet();\n            sheet._activeDrawing = null;\n            sheet.removeDrawing(this._drawing);\n          },\n          redo: function () {\n            var sheet = this.range().sheet();\n            sheet._activeDrawing = this._drawing;\n            sheet.addDrawing(this._drawing);\n          }\n        });\n        kendo.spreadsheet.DeleteDrawingCommand = DrawingCommand.extend({\n          exec: function () {\n            var sheet = this.range().sheet();\n            sheet._activeDrawing = null;\n            sheet.removeDrawing(this._drawing);\n          },\n          undo: function () {\n            var sheet = this.range().sheet();\n            sheet._activeDrawing = this._drawing;\n            sheet.addDrawing(this._drawing);\n          },\n          redo: function () {\n            this.exec();\n          }\n        });\n        var ReorderDrawingsCommand = DrawingCommand.extend({\n          exec: function () {\n            var sheet = this.range().sheet();\n            this._origIndex = sheet._drawings.indexOf(this._drawing);\n\n            sheet._drawings.splice(this._origIndex, 1);\n\n            this._newIndex = this._reorder();\n\n            sheet._drawings.splice(this._newIndex, 0, this._drawing);\n\n            sheet.triggerChange({\n              drawings: true\n            });\n          },\n          undo: function () {\n            var sheet = this.range().sheet();\n\n            sheet._drawings.splice(this._newIndex, 1);\n\n            sheet._drawings.splice(this._origIndex, 0, this._drawing);\n\n            sheet.triggerChange({\n              drawings: true\n            });\n          }\n        });\n        kendo.spreadsheet.BringToFrontCommand = ReorderDrawingsCommand.extend({\n          _reorder: function () {\n            return this.range().sheet()._drawings.length;\n          }\n        });\n        kendo.spreadsheet.SendToBackCommand = ReorderDrawingsCommand.extend({\n          _reorder: function () {\n            return 0;\n          }\n        });\n        var TargetValueCommand = Command.extend({\n          init: function (options) {\n            Command.fn.init.call(this, options);\n            this._target = options.target;\n            this._value = options.value;\n          },\n          exec: function () {\n            this.getState();\n            this.setState(this._value);\n          }\n        });\n        kendo.spreadsheet.ColumnWidthCommand = TargetValueCommand.extend({\n          getState: function () {\n            this._state = this.range().sheet().columnWidth(this._target);\n          },\n          setState: function (state) {\n            this.range().sheet().columnWidth(this._target, state);\n          }\n        });\n        kendo.spreadsheet.RowHeightCommand = TargetValueCommand.extend({\n          getState: function () {\n            this._state = this.range().sheet().rowHeight(this._target);\n          },\n          setState: function (state) {\n            this.range().sheet().rowHeight(this._target, state);\n          }\n        });\n        kendo.spreadsheet.HyperlinkCommand = Command.extend({\n          init: function (options) {\n            Command.fn.init.call(this, options);\n            this._link = options.link;\n          },\n          exec: function () {\n            var range = this.range();\n            this._prevLink = range.link();\n            this._prevUnderline = range.underline();\n            range.link(this._link);\n            range.underline(true);\n\n            if (range.value() == null) {\n              // jshint ignore:line\n              this._hasSetValue = true;\n              range.value(this._link);\n            }\n          },\n          undo: function () {\n            var range = this.range();\n            range.link(this._prevLink);\n            range.underline(this._prevUnderline);\n\n            if (this._hasSetValue) {\n              range.value(null);\n            }\n          }\n        });\n        kendo.spreadsheet.GridLinesChangeCommand = TargetValueCommand.extend({\n          getState: function () {\n            this._state = this._range.sheet().showGridLines();\n          },\n          setState: function (v) {\n            this._range.sheet().showGridLines(v);\n          }\n        });\n        var PropertyChangeCommand = kendo.spreadsheet.PropertyChangeCommand = Command.extend({\n          _setRange: function (range) {\n            Command.prototype._setRange.call(this, range.skipHiddenCells());\n          },\n          init: function (options) {\n            Command.fn.init.call(this, options);\n            this._value = options.value;\n          },\n          exec: function () {\n            var range = this.range();\n\n            if (range.enable()) {\n              this.getState();\n\n              if (this.options.property === \"format\") {\n                this._workbook.trigger(\"changeFormat\", {\n                  range: range\n                });\n              }\n\n              range[this._property](this._value);\n            }\n          }\n        });\n        kendo.spreadsheet.ClearContentCommand = Command.extend({\n          exec: function () {\n            var values = [],\n                range,\n                rowValues,\n                nullValues,\n                validationState,\n                currentRange;\n\n            if (!this.range().enable()) {\n              return {\n                reason: \"error\",\n                type: \"cannotModifyDisabled\"\n              };\n            }\n\n            if (!this.range().canEditArrayFormula()) {\n              return {\n                reason: \"error\",\n                type: \"intersectsArray\"\n              };\n            }\n\n            this.getState();\n            range = this.range().skipHiddenCells();\n\n            if (range._ref.refs && range._ref.refs.length > 1) {\n              range._ref.refs.forEach(function (ref) {\n                currentRange = range.sheet().range(ref);\n                values = values.concat(currentRange.values());\n              });\n            } else {\n              values = range.values();\n            }\n\n            nullValues = [];\n            values.forEach(function (row) {\n              rowValues = [];\n              row.forEach(function () {\n                rowValues.push(null);\n              });\n              nullValues.push(rowValues);\n            });\n\n            if (range.sheet().trigger(\"changing\", {\n              data: nullValues,\n              range: range,\n              changeType: COMMAND_TYPES.CLEAR\n            })) {\n              return;\n            }\n\n            range.clearContent();\n            validationState = range._getValidationState();\n\n            if (validationState) {\n              return this.rejectState(validationState);\n            }\n          },\n          undo: function () {\n            var range = this.range().skipHiddenCells();\n            var sheet = range.sheet();\n            var data = this._state.data;\n            var values = [];\n            var rowValues;\n            data.forEach(function (row) {\n              rowValues = [];\n              row.forEach(function (cell) {\n                rowValues.push(cell.value);\n              });\n              values.push(rowValues);\n            });\n\n            if (sheet.trigger(\"changing\", {\n              data: values,\n              range: range,\n              changeType: COMMAND_TYPES.CLEAR\n            })) {\n              return;\n            }\n\n            this.setState(this._state);\n          }\n        });\n        kendo.spreadsheet.EditCommand = PropertyChangeCommand.extend({\n          init: function (options) {\n            options.property = options.property || \"input\";\n            PropertyChangeCommand.fn.init.call(this, options);\n          },\n          _setRange: function (range) {\n            PropertyChangeCommand.prototype._setRange.apply(this, arguments);\n\n            this._editRange = this.options.arrayFormula ? range : range.sheet().activeCellSelection();\n          },\n          getState: function () {\n            this._state = this.range().getState();\n          },\n          exec: function () {\n            return this.range().sheet().withCultureDecimals(this._exec.bind(this));\n          },\n          undo: function () {\n            var editRange = this._editRange;\n            var state = this._state;\n\n            if (editRange.sheet().trigger(\"changing\", {\n              data: state.data[0][0].value,\n              range: editRange,\n              changeType: COMMAND_TYPES.EDIT\n            })) {\n              return;\n            }\n\n            this.setState(this._state);\n          },\n          _exec: function () {\n            var arrayFormula = this.options.arrayFormula;\n            var editRange = this._editRange;\n\n            if (!editRange.enable()) {\n              return {\n                reason: \"error\",\n                type: \"rangeDisabled\"\n              };\n            }\n\n            if (!editRange.canEditArrayFormula()) {\n              return {\n                reason: \"error\",\n                type: \"intersectsArray\"\n              };\n            }\n\n            var value = this._value;\n            this.getState();\n\n            if (this.range().sheet().trigger(\"changing\", {\n              data: value,\n              range: this._editRange,\n              changeType: COMMAND_TYPES.EDIT\n            })) {\n              return;\n            }\n\n            if (this._property == \"value\") {\n              editRange.value(value);\n              return;\n            }\n\n            try {\n              editRange.link(null);\n\n              if (value === \"\") {\n                editRange.value(null);\n              } else {\n                editRange.input(value, {\n                  arrayFormula: arrayFormula\n                });\n\n                if (/\\n/.test(editRange.value())) {\n                  editRange.wrap(true);\n                }\n              }\n\n              editRange._adjustRowHeight();\n\n              var validationState = editRange._getValidationState();\n\n              if (validationState) {\n                return this.rejectState(validationState);\n              }\n            } catch (ex) {\n              if (ex instanceof kendo.spreadsheet.calc.ParseError) {\n                return {\n                  title: \"Error in formula\",\n                  body: ex + \"\",\n                  reason: \"error\"\n                };\n              } else {\n                throw ex;\n              }\n            }\n          }\n        });\n        kendo.spreadsheet.InsertCommentCommand = PropertyChangeCommand.extend({\n          init: function (options) {\n            options.property = \"comment\";\n            PropertyChangeCommand.fn.init.call(this, options);\n          }\n        });\n        kendo.spreadsheet.TextWrapCommand = PropertyChangeCommand.extend({\n          init: function (options) {\n            options.property = \"wrap\";\n            PropertyChangeCommand.fn.init.call(this, options);\n            this._value = options.value;\n          },\n          getState: function () {\n            var rowHeight = {};\n            this.range().forEachRow(function (range) {\n              var index = range.topLeft().row;\n              rowHeight[index] = range.sheet().rowHeight(index);\n            });\n            this._state = this.range().getState(this._property);\n            this._rowHeight = rowHeight;\n          },\n          undo: function () {\n            var sheet = this.range().sheet();\n            var rowHeight = this._rowHeight;\n            this.range().setState(this._state);\n\n            for (var row in rowHeight) {\n              sheet.rowHeight(row, rowHeight[row]);\n            }\n          }\n        });\n        kendo.spreadsheet.AdjustDecimalsCommand = Command.extend({\n          init: function (options) {\n            this._delta = options.value;\n            options.property = \"format\";\n            Command.fn.init.call(this, options);\n          },\n          exec: function () {\n            var sheet = this.range().sheet();\n            var delta = this._delta;\n            var formatting = kendo.spreadsheet.formatting;\n            this.getState();\n            sheet.batch(function () {\n              this.range().forEachCell(function (row, col, cell) {\n                var format = cell.format;\n\n                if (!format) {\n                  var value = cell.value;\n\n                  if (typeof value == \"number\" && /\\./.test(value)) {\n                    format = \"0.\" + String(value).split(\".\")[1].replace(/\\d/g, \"0\");\n                  }\n                }\n\n                if (format || delta > 0) {\n                  format = formatting.adjustDecimals(format || \"0\", delta);\n                  sheet.range(row, col).format(format);\n                }\n              });\n            }.bind(this));\n          }\n        });\n        kendo.spreadsheet.BorderChangeCommand = Command.extend({\n          init: function (options) {\n            options.property = \"border\";\n            Command.fn.init.call(this, options);\n            this._type = options.border;\n            this._style = options.style;\n          },\n          _batch: function (f) {\n            return this.range().sheet().batch(f, {});\n          },\n          exec: function () {\n            var self = this;\n            self.getState();\n\n            self._batch(function () {\n              self[self._type](self._style);\n            });\n          },\n          noBorders: function () {\n            this.range().insideBorders(null);\n            this.outsideBorders(null);\n          },\n          allBorders: function (style) {\n            this.range().insideBorders(style);\n            this.outsideBorders(style);\n          },\n          leftBorder: function (style) {\n            this.range().leftColumn().borderLeft(style);\n          },\n          rightBorder: function (style) {\n            this.range().rightColumn().borderRight(style);\n          },\n          topBorder: function (style) {\n            this.range().topRow().borderTop(style);\n          },\n          bottomBorder: function (style) {\n            this.range().bottomRow().borderBottom(style);\n          },\n          outsideBorders: function (style) {\n            var range = this.range();\n            range.leftColumn().borderLeft(style);\n            range.topRow().borderTop(style);\n            range.rightColumn().borderRight(style);\n            range.bottomRow().borderBottom(style);\n          },\n          insideBorders: function (style) {\n            this.range().insideBorders(style);\n            this.outsideBorders(null);\n          },\n          insideHorizontalBorders: function (style) {\n            this.range().insideHorizontalBorders(style);\n          },\n          insideVerticalBorders: function (style) {\n            this.range().insideVerticalBorders(style);\n          }\n        });\n        kendo.spreadsheet.MergeCellCommand = Command.extend({\n          init: function (options) {\n            Command.fn.init.call(this, options);\n            this._type = options.value;\n          },\n          exec: function () {\n            this.getState();\n\n            this[this._type]();\n\n            this.range().sheet().triggerChange({\n              recalc: true\n            });\n          },\n          activate: function (ref) {\n            this.range().sheet().activeCell(ref);\n          },\n          getState: function () {\n            this._state = this.range().getState();\n          },\n          undo: function () {\n            if (this._type !== \"unmerge\") {\n              this.range().unmerge();\n              this.activate(this.range().topLeft());\n            }\n\n            this.range().setState(this._state);\n          },\n          cells: function () {\n            var range = this.range();\n            var ref = range._ref;\n            range.merge();\n            this.activate(ref);\n          },\n          horizontally: function () {\n            var ref = this.range().topRow()._ref;\n\n            this.range().forEachRow(function (range) {\n              range.merge();\n            });\n            this.activate(ref);\n          },\n          vertically: function () {\n            var ref = this.range().leftColumn()._ref;\n\n            this.range().forEachColumn(function (range) {\n              range.merge();\n            });\n            this.activate(ref);\n          },\n          unmerge: function () {\n            var range = this.range();\n            var ref = range._ref.topLeft;\n            range.unmerge();\n            this.activate(ref);\n          }\n        });\n        kendo.spreadsheet.FreezePanesCommand = Command.extend({\n          init: function (options) {\n            Command.fn.init.call(this, options);\n            this._type = options.value;\n          },\n          exec: function () {\n            this.getState();\n            this._topLeft = this.range().topLeft();\n\n            this[this._type]();\n          },\n          getState: function () {\n            this._state = this.range().sheet().getState();\n          },\n          undo: function () {\n            this.range().sheet().setState(this._state);\n          },\n          panes: function () {\n            var topLeft = this._topLeft;\n            var sheet = this.range().sheet();\n            sheet.frozenColumns(topLeft.col).frozenRows(topLeft.row);\n          },\n          rows: function () {\n            var topLeft = this._topLeft;\n            var sheet = this.range().sheet();\n            sheet.frozenRows(topLeft.row);\n          },\n          columns: function () {\n            var topLeft = this._topLeft;\n            var sheet = this.range().sheet();\n            sheet.frozenColumns(topLeft.col);\n          },\n          unfreeze: function () {\n            var sheet = this.range().sheet();\n            sheet.frozenRows(0).frozenColumns(0);\n          }\n        });\n        kendo.spreadsheet.PasteCommand = Command.extend({\n          init: function (options) {\n            Command.fn.init.call(this, options);\n            this._clipboard = options.workbook.clipboard();\n\n            this._clipboard.parse();\n\n            this._event = options.event;\n            this._clipboardContent = this._clipboard._content;\n            this._sheet = this._workbook.activeSheet();\n            this._range = this._sheet.selection ? this._sheet.selection() : this._sheet.range(this._clipboard.pasteRef());\n            this._state = this._range.getState();\n            this._targetRangeRefs = (this._range._ref instanceof kendo.spreadsheet.UnionRef ? this._range._ref.refs : [this._range._ref]).map(function (ref) {\n              return ref.toRangeRef();\n            });\n          },\n          exec: function () {\n            return this.range().sheet().withCultureDecimals(this._exec.bind(this));\n          },\n          undo: function () {\n            var sheet = this._sheet;\n            var range = this._range;\n\n            if (sheet.trigger(\"changing\", {\n              data: this._state.data,\n              range: range,\n              changeType: COMMAND_TYPES.PASTE\n            })) {\n              return;\n            }\n\n            this.setState(this._state);\n          },\n          _exec: function () {\n            var status = this._clipboard.canPaste();\n\n            if (!status.canPaste) {\n              if (status.menuInvoked) {\n                return {\n                  reason: \"error\",\n                  type: \"useKeyboard\"\n                };\n              }\n\n              if (status.pasteOnMerged) {\n                return {\n                  reason: \"error\",\n                  type: \"modifyMerged\"\n                };\n              }\n\n              if (status.pasteOnDisabled) {\n                this._event.preventDefault();\n\n                return {\n                  reason: \"error\",\n                  type: \"cannotModifyDisabled\"\n                };\n              }\n\n              return {\n                reason: \"error\"\n              };\n            }\n\n            var sheet = this._sheet;\n            var range = this._range;\n\n            if (this._workbook.trigger(\"paste\", {\n              range: range,\n              clipboardContent: this._clipboardContent\n            }) || sheet.trigger(\"changing\", {\n              data: this._clipboardContent.data,\n              range: range,\n              changeType: COMMAND_TYPES.PASTE\n            })) {\n              this._event.preventDefault();\n\n              return;\n            } else {\n              this._processPaste();\n            }\n          },\n          _adjustPasteTarget: function (multipliers, sourceRows, sourceCols) {\n            var that = this;\n            var targetRangeRefs = that._targetRangeRefs;\n            var sheet = that._sheet;\n            var RangeRef = kendo.spreadsheet.RangeRef;\n            var UnionRef = kendo.spreadsheet.UnionRef;\n            var refs = [];\n\n            var compare = function (a, b) {\n              var result = 0;\n              var topLeftA = a.topLeft;\n              var topLeftB = b.topLeft;\n\n              if (topLeftA.row > topLeftB.row) {\n                result = 1;\n              } else if (topLeftA.row < topLeftB.row) {\n                result = -1;\n              } else if (topLeftA.col > topLeftB.col) {\n                result = 1;\n              } else if (topLeftA.col < topLeftB.col) {\n                result = -1;\n              }\n\n              return result;\n            };\n\n            var refToSelect, rangeToSelect, ref, topLeft, multiplier, i, bottomRight;\n\n            for (i = 0; i < targetRangeRefs.length; i += 1) {\n              ref = targetRangeRefs[i];\n              multiplier = multipliers[i];\n              topLeft = ref.topLeft;\n              bottomRight = {\n                row: multiplier.rows * sourceRows + topLeft.row - 1,\n                col: multiplier.cols * sourceCols + topLeft.col - 1\n              };\n              refToSelect = new RangeRef(topLeft, bottomRight);\n              refs.push(refToSelect);\n            }\n\n            if (refs.length === 1) {\n              rangeToSelect = sheet.range(refToSelect);\n            } else {\n              refs.sort(compare);\n              rangeToSelect = sheet.range(new UnionRef(refs));\n            }\n\n            rangeToSelect.select();\n            that._range = rangeToSelect;\n            that._state = that._range.getState();\n          },\n          _processPaste: function () {\n            var that = this;\n            var sheet = that._sheet;\n            var clipboardContent = that._clipboardContent;\n            var range = that._range;\n            var sourceData = clipboardContent.data;\n            var sourceRows = sourceData.length;\n            var sourceCols = sourceData[0].length;\n            var targetRangeRefs = that._targetRangeRefs;\n\n            var multipliers = that._targetRanges(sourceRows, sourceCols);\n\n            var i;\n\n            var pasteRef = this._clipboard.pasteRef();\n\n            if (pasteRef.bottomRight.row >= sheet._rows._count || pasteRef.bottomRight.col >= sheet._columns._count) {\n              sheet.resize(Math.max(pasteRef.bottomRight.row + 1, sheet._rows._count), Math.max(pasteRef.bottomRight.col + 1, sheet._columns._count));\n            }\n\n            that._adjustPasteTarget(multipliers, sourceRows, sourceCols);\n\n            sheet.batch(function () {\n              for (i = 0; i < targetRangeRefs.length; i++) {\n                that._populateTargetRange(targetRangeRefs[i], sourceRows, sourceCols, multipliers[i]);\n              }\n            }, {\n              recalc: true,\n              ref: that._range._ref\n            });\n\n            range._adjustRowHeight();\n          },\n          _populateTargetRange: function (ref, sourceRows, sourceCols, multipliers) {\n            var topLeft = ref.topLeft;\n            var range, i, j;\n\n            for (i = 0; i < multipliers.rows; i++) {\n              for (j = 0; j < multipliers.cols; j++) {\n                range = this._sheet.range(topLeft.row + sourceRows * i, topLeft.col + sourceCols * j);\n                range.setState(this._clipboardContent, this._clipboard);\n              }\n            }\n          },\n          _targetRangeDimensions: function (ref, sourceRows, sourceCols) {\n            var topLeft = ref.topLeft;\n            var bottomRight = ref.bottomRight;\n            var targetRangeRows = bottomRight.row - topLeft.row + 1;\n            var targetRangeCols = bottomRight.col - topLeft.col + 1;\n            var rowsMultiplier = 1;\n            var colsMultiplier = 1;\n\n            if (targetRangeRows % sourceRows === 0 && targetRangeCols % sourceCols === 0) {\n              rowsMultiplier = targetRangeRows / sourceRows;\n              colsMultiplier = targetRangeCols / sourceCols;\n            }\n\n            return {\n              rows: rowsMultiplier,\n              cols: colsMultiplier\n            };\n          },\n          _targetRanges: function (sourceRows, sourceCols) {\n            var targetRangeRefs = this._targetRangeRefs;\n            var multipliers = [];\n            var i;\n\n            for (i = 0; i < targetRangeRefs.length; i++) {\n              multipliers.push(this._targetRangeDimensions(targetRangeRefs[i], sourceRows, sourceCols));\n            }\n\n            return multipliers;\n          }\n        });\n        kendo.spreadsheet.AdjustRowHeightCommand = Command.extend({\n          exec: function () {\n            var options = this.options;\n\n            var sheet = this._workbook.activeSheet();\n\n            var range = options.range || sheet.range(options.rowIndex);\n\n            range._adjustRowHeight();\n          }\n        });\n        kendo.spreadsheet.ToolbarPasteCommand = Command.extend({\n          exec: function () {\n            if (kendo.support.clipboard.paste) {\n              this._workbook._view.clipboard.focus().select(); //reason : focusclipbord\n\n\n              document.execCommand('paste');\n            } else {\n              return {\n                reason: \"error\",\n                type: \"useKeyboard\"\n              };\n            }\n          }\n        });\n        kendo.spreadsheet.CutCommand = Command.extend({\n          _eventType: \"cut\",\n          init: function (options) {\n            Command.fn.init.call(this, options);\n            this._clipboard = options.workbook.clipboard();\n            this._event = options.event;\n          },\n          exec: function () {\n            var status = this._clipboard.canCopy();\n\n            var data = [],\n                rangeValues,\n                currentRow;\n\n            if (!status.canCopy) {\n              if (status.menuInvoked) {\n                return {\n                  reason: \"error\",\n                  type: \"useKeyboard\"\n                };\n              } else if (status.multiSelection) {\n                return {\n                  reason: \"error\",\n                  type: \"unsupportedSelection\"\n                };\n              }\n\n              return;\n            }\n\n            var range = this._workbook.activeSheet().selection();\n\n            if (this._eventType == \"cut\") {\n              if (!range.enable()) {\n                this._event.preventDefault();\n\n                return {\n                  reason: \"error\",\n                  type: \"cannotModifyDisabled\"\n                };\n              }\n\n              this.getState();\n            }\n\n            if (this._workbook.trigger(this._eventType, {\n              range: range\n            })) {\n              this._event.preventDefault();\n            } else if (this._eventType == \"cut\") {\n              rangeValues = range.values();\n              rangeValues.forEach(function (row) {\n                currentRow = [];\n                row.forEach(function () {\n                  currentRow.push({});\n                });\n                data.push(currentRow);\n              });\n\n              if (range.sheet().trigger(\"changing\", {\n                data: data,\n                range: range,\n                changeType: COMMAND_TYPES.CUT\n              })) {\n                return;\n              }\n\n              this._clipboard.cut();\n            } else {\n              this._clipboard.copy();\n            }\n          },\n          undo: function () {\n            var range = this.range();\n\n            if (range.sheet().trigger(\"changing\", {\n              data: this._state.data,\n              range: range,\n              changeType: COMMAND_TYPES.CUT\n            })) {\n              return;\n            }\n\n            this.setState(this._state);\n          }\n        });\n        kendo.spreadsheet.CopyCommand = kendo.spreadsheet.CutCommand.extend({\n          _eventType: \"copy\",\n          undo: $.noop\n        }); // function copyToClipboard(html) {\n        //     var textarea = document.createElement('textarea');\n        //     $(textarea).addClass(\"k-spreadsheet-clipboard\")\n        //         .val(html)\n        //         .appendTo(document.body)\n        //         .trigger(\"focus\")\n        //         .select();\n        //     document.execCommand('copy');\n        //     $(textarea).remove();\n        // }\n\n        kendo.spreadsheet.ToolbarCopyCommand = Command.extend({\n          init: function (options) {\n            Command.fn.init.call(this, options);\n            this._clipboard = options.workbook.clipboard();\n          },\n          undo: $.noop,\n          exec: function () {\n            if (kendo.support.clipboard.copy) {\n              document.execCommand('copy');\n            } else {\n              return {\n                reason: \"error\",\n                type: \"useKeyboard\"\n              };\n            }\n          }\n        });\n        kendo.spreadsheet.AutoFillCommand = Command.extend({\n          init: function (options) {\n            Command.fn.init.call(this, options);\n          },\n          origin: function (origin) {\n            this._origin = origin;\n          },\n          exec: function () {\n            var range = this.range(),\n                autoFillData;\n\n            if (!range.enable()) {\n              return {\n                reason: \"error\",\n                type: \"rangeDisabled\"\n              };\n            }\n\n            if (range.intersectingArrayFormula()) {\n              return {\n                reason: \"error\",\n                type: \"intersectsArray\"\n              };\n            }\n\n            this.getState();\n\n            try {\n              autoFillData = range._previewFillFrom(this._origin);\n\n              if (range.sheet().trigger(\"changing\", {\n                data: autoFillData.props,\n                range: autoFillData.dest,\n                changeType: COMMAND_TYPES.AUTO_FILL\n              })) {\n                return;\n              }\n\n              autoFillData.dest._properties(autoFillData.props, true);\n            } catch (ex) {\n              if (ex instanceof kendo.spreadsheet.Range.FillError) {\n                return {\n                  reason: \"error\",\n                  type: ex.code\n                };\n              }\n\n              throw ex;\n            }\n          },\n          undo: function () {\n            var range = this.range();\n            var state = this._state;\n\n            if (range.sheet().trigger(\"changing\", {\n              data: state.data,\n              range: range,\n              changeType: COMMAND_TYPES.AUTO_FILL\n            })) {\n              return;\n            }\n\n            this.setState(this._state);\n          }\n        });\n        kendo.spreadsheet.ToolbarCutCommand = Command.extend({\n          cannotUndo: true,\n          init: function (options) {\n            Command.fn.init.call(this, options);\n            this._clipboard = options.workbook.clipboard();\n          },\n          exec: function () {\n            if (kendo.support.clipboard.copy) {\n              document.execCommand('cut');\n            } else {\n              return {\n                reason: \"error\",\n                type: \"useKeyboard\"\n              };\n            }\n          }\n        });\n        kendo.spreadsheet.FilterCommand = Command.extend({\n          undo: function () {\n            this.range().filter(this._state);\n          },\n          exec: function () {\n            var range = this.range();\n            this._state = range.hasFilter();\n            range.filter(!this._state);\n          }\n        });\n        kendo.spreadsheet.SortCommand = Command.extend({\n          undo: function () {\n            var sheet = this.range().sheet();\n            sheet.setState(this._state);\n          },\n          exec: function () {\n            var range = this.range();\n            var sheet = range.sheet();\n            var activeCell = sheet.activeCell();\n            var col = this.options.sheet ? activeCell.topLeft.col : this.options.column || 0;\n            var ascending = this.options.value === \"asc\" ? true : false;\n            this._state = sheet.getState();\n\n            if (this.options.sheet) {\n              range = this.expandRange();\n            }\n\n            var reason = range.cantSort();\n\n            if (reason) {\n              return {\n                reason: \"error\",\n                type: reason.code\n              };\n            }\n\n            range.sort({\n              column: col,\n              ascending: ascending\n            });\n          },\n          expandRange: function () {\n            var sheet = this.range().sheet();\n            return new kendo.spreadsheet.Range(sheet._sheetRef, sheet);\n          }\n        });\n        var ApplyFilterCommand = kendo.spreadsheet.ApplyFilterCommand = Command.extend({\n          column: function () {\n            return this.options.column || 0;\n          },\n          undo: function () {\n            var sheet = this.range().sheet();\n            sheet.clearFilter(this.column());\n\n            if (this._state.length) {\n              this.range().filter(this._state);\n            }\n          },\n          getState: function () {\n            var sheet = this.range().sheet();\n            var current = sheet.filter();\n\n            if (current) {\n              this._state = current.columns.filter(function (c) {\n                return c.index == this.column();\n              }.bind(this));\n            }\n          },\n          exec: function () {\n            var range = this.range();\n            var column = this.column();\n            var current = range.sheet().filter();\n            var options;\n            var filterRule;\n            var exists = false;\n\n            if (this.options.valueFilter) {\n              filterRule = {\n                column: column,\n                filter: new kendo.spreadsheet.ValueFilter(this.options.valueFilter)\n              };\n            } else if (this.options.customFilter) {\n              filterRule = {\n                column: column,\n                filter: new kendo.spreadsheet.CustomFilter(this.options.customFilter)\n              };\n            }\n\n            this.getState();\n\n            if (current && current.ref.eq(range._ref) && current.columns.length) {\n              current.columns.forEach(function (element) {\n                if (element.index === column) {\n                  exists = true;\n                }\n              });\n              options = current.columns.map(function (element) {\n                return element.index === column ? filterRule : {\n                  column: element.index,\n                  filter: element.filter\n                };\n              });\n\n              if (!exists) {\n                options.push(filterRule);\n              }\n            } else {\n              options = filterRule;\n            }\n\n            range.filter(options);\n          }\n        });\n        kendo.spreadsheet.ClearFilterCommand = ApplyFilterCommand.extend({\n          exec: function () {\n            var range = this.range();\n            var column = this.column();\n            this.getState();\n            range.clearFilter(column);\n          }\n        });\n        kendo.spreadsheet.HideLineCommand = Command.extend({\n          init: function (options) {\n            Command.fn.init.call(this, options);\n            this.axis = options.axis;\n          },\n          undo: function () {\n            var sheet = this.range().sheet();\n            sheet.setAxisState(this._state);\n          },\n          exec: function () {\n            var sheet = this.range().sheet();\n            this._state = sheet.getAxisState();\n\n            if (this.axis == \"row\") {\n              sheet.axisManager().hideSelectedRows();\n            } else {\n              sheet.axisManager().hideSelectedColumns();\n            }\n          }\n        });\n        kendo.spreadsheet.UnHideLineCommand = kendo.spreadsheet.HideLineCommand.extend({\n          exec: function () {\n            var sheet = this.range().sheet();\n            this._state = sheet.getAxisState();\n\n            if (this.axis == \"row\") {\n              sheet.axisManager().unhideSelectedRows();\n            } else {\n              sheet.axisManager().unhideSelectedColumns();\n            }\n          }\n        });\n        var DeleteCommand = Command.extend({\n          exec: function () {\n            this._expandedRange = this._expand(this.range());\n            this._state = this._expandedRange.getState();\n            this._indexes = this._exec(this._expandedRange.sheet());\n          },\n          undo: function () {\n            var self = this;\n            var range = self._expandedRange;\n            var sheet = range.sheet();\n            sheet.batch(function () {\n              self._indexes.forEach(function (x) {\n                self._undoOne(sheet, x);\n\n                sheet._restoreModifiedFormulas(x.formulas);\n              });\n\n              range.setState(self._state);\n            }, {\n              layout: true,\n              recalc: true,\n              ref: range._ref\n            });\n          }\n        });\n        kendo.spreadsheet.DeleteRowCommand = DeleteCommand.extend({\n          _expand: function (range) {\n            return range.resize({\n              left: -Infinity,\n              right: +Infinity\n            });\n          },\n          _exec: function (sheet) {\n            return sheet.axisManager().deleteSelectedRows();\n          },\n          _undoOne: function (sheet, x) {\n            sheet.insertRow(x.index);\n            sheet.rowHeight(x.index, x.height);\n          }\n        });\n        kendo.spreadsheet.DeleteColumnCommand = DeleteCommand.extend({\n          _expand: function (range) {\n            return range.resize({\n              top: -Infinity,\n              bottom: +Infinity\n            });\n          },\n          _exec: function (sheet) {\n            return sheet.axisManager().deleteSelectedColumns();\n          },\n          _undoOne: function (sheet, x) {\n            sheet.insertColumn(x.index);\n            sheet.columnWidth(x.index, x.width);\n          }\n        });\n        var AddCommand = Command.extend({\n          init: function (options) {\n            Command.fn.init.call(this, options);\n            this._value = options.value;\n          },\n          undo: function () {\n            var self = this;\n            var sheet = self.range().sheet();\n            sheet.batch(function () {\n              for (var i = self._pos.count; --i >= 0;) {\n                self._undoOne(sheet, self._pos.base);\n              }\n            }, {\n              layout: true,\n              recalc: true\n            });\n          }\n        });\n        kendo.spreadsheet.AddColumnCommand = AddCommand.extend({\n          exec: function () {\n            var value = this._value;\n            var sheet = this.range().sheet();\n\n            if (value === \"left\") {\n              this._pos = sheet.axisManager().addColumnLeft();\n            } else {\n              this._pos = sheet.axisManager().addColumnRight();\n            }\n          },\n          _undoOne: function (sheet, index) {\n            sheet.deleteColumn(index);\n          }\n        });\n        kendo.spreadsheet.AddRowCommand = AddCommand.extend({\n          exec: function () {\n            var value = this._value;\n            var sheet = this.range().sheet();\n\n            if (value === \"above\") {\n              this._pos = sheet.axisManager().addRowAbove();\n            } else {\n              this._pos = sheet.axisManager().addRowBelow();\n            }\n          },\n          _undoOne: function (sheet, index) {\n            sheet.deleteRow(index);\n          }\n        });\n        kendo.spreadsheet.EditValidationCommand = Command.extend({\n          init: function (options) {\n            Command.fn.init.call(this, options);\n            this._value = options.value;\n          },\n          exec: function () {\n            var self = this,\n                sheet = self.range().sheet();\n            this.getState();\n\n            if (sheet.trigger(\"changing\", {\n              data: self._value,\n              range: self.range(),\n              changeType: COMMAND_TYPES.VALIDATION\n            })) {\n              return;\n            }\n\n            try {\n              sheet.withCultureDecimals(function () {\n                self.range().validation(self._value);\n              });\n            } catch (ex) {\n              if (ex instanceof kendo.spreadsheet.calc.ParseError) {\n                return {\n                  title: \"Error in formula\",\n                  body: ex + \"\",\n                  reason: \"error\"\n                };\n              } else {\n                throw ex;\n              }\n            }\n          },\n          undo: function () {\n            var editRange = this.range();\n            var state = this._state;\n\n            if (editRange.sheet().trigger(\"changing\", {\n              data: state.data[0][0].validation,\n              range: editRange,\n              changeType: COMMAND_TYPES.VALIDATION\n            })) {\n              return;\n            }\n\n            this.setState(this._state);\n          }\n        });\n        kendo.spreadsheet.OpenCommand = Command.extend({\n          cannotUndo: true,\n          exec: function () {\n            var file = this.options.file;\n\n            if (file.name.match(/.xlsx$/i) === null) {\n              return {\n                reason: \"error\",\n                type: \"openUnsupported\"\n              };\n            }\n\n            var workbook = this.options.workbook;\n            workbook.fromFile(this.options.file).then(function () {\n              var errors = workbook.excelImportErrors;\n\n              if (errors && errors.length) {\n                workbook._view.openDialog(\"importError\", {\n                  errors: errors\n                });\n              }\n            });\n          }\n        });\n        kendo.spreadsheet.SaveAsCommand = Command.extend({\n          cannotUndo: true,\n          exec: function () {\n            var fileName = this.options.name + this.options.extension;\n\n            if (this.options.extension === \".xlsx\") {\n              this.options.workbook.saveAsExcel({\n                fileName: fileName\n              });\n            } else if (this.options.extension === \".pdf\") {\n              this.options.workbook.saveAsPDF($.extend(this.options.pdf, {\n                workbook: this.options.workbook,\n                fileName: fileName\n              }));\n            }\n          }\n        });\n        var NameCommand = Command.extend({\n          init: function (options) {\n            Command.fn.init.call(this, options);\n            this._name = options.name;\n            this._value = options.value;\n          },\n          getState: function () {\n            this._state = this._workbook.nameDefinition(this._name);\n          },\n          setState: function () {\n            this._workbook.nameDefinition(this._name, this._state);\n\n            this._workbook.trigger(\"change\", {\n              recalc: true\n            });\n          }\n        });\n        kendo.spreadsheet.DefineNameCommand = NameCommand.extend({\n          exec: function () {\n            this.getState();\n\n            try {\n              this._workbook.defineName(this._name, this._value);\n\n              this._workbook.trigger(\"change\", {\n                recalc: true\n              });\n            } catch (ex) {\n              return {\n                title: \"Error\",\n                body: ex + \"\",\n                reason: \"error\"\n              };\n            }\n          }\n        });\n        kendo.spreadsheet.DeleteNameCommand = NameCommand.extend({\n          exec: function () {\n            this.getState();\n\n            this._workbook.undefineName(this._name);\n\n            this._workbook.trigger(\"change\", {\n              recalc: true\n            });\n          }\n        });\n      })(kendo);\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1686:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.list\");\n    /***/\n  },\n\n  /***/\n  1687:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.tabstrip\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}