{"ast":null,"code":"import SeriesBinder from '../series-binder';\nimport { OBJECT } from '../../common/constants';\nimport { Class, defined, getter, isArray, isNumber } from '../../common';\nconst STD_ERR = \"stderr\";\nconst STD_DEV = \"stddev\";\nconst percentRegex = /percent(?:\\w*)\\((\\d+)\\)/;\nconst standardDeviationRegex = new RegExp(\"^\" + STD_DEV + \"(?:\\\\((\\\\d+(?:\\\\.\\\\d+)?)\\\\))?$\");\n\nclass ErrorRangeCalculator extends Class {\n  constructor(errorValue, series, field) {\n    super();\n    this.initGlobalRanges(errorValue, series, field);\n  }\n\n  initGlobalRanges(errorValue, series, field) {\n    const data = series.data;\n    const deviationMatch = standardDeviationRegex.exec(errorValue);\n\n    if (deviationMatch) {\n      this.valueGetter = this.createValueGetter(series, field);\n      const average = this.getAverage(data);\n      const deviation = this.getStandardDeviation(data, average, false);\n      const multiple = deviationMatch[1] ? parseFloat(deviationMatch[1]) : 1;\n      const errorRange = {\n        low: average.value - deviation * multiple,\n        high: average.value + deviation * multiple\n      };\n\n      this.globalRange = function () {\n        return errorRange;\n      };\n    } else if (errorValue.indexOf && errorValue.indexOf(STD_ERR) >= 0) {\n      this.valueGetter = this.createValueGetter(series, field);\n      const standardError = this.getStandardError(data, this.getAverage(data));\n\n      this.globalRange = function (value) {\n        return {\n          low: value - standardError,\n          high: value + standardError\n        };\n      };\n    }\n  }\n\n  createValueGetter(series, field) {\n    const data = series.data;\n    const binder = SeriesBinder.current;\n    const valueFields = binder.valueFields(series);\n    const item = defined(data[0]) ? data[0] : {};\n    let valueGetter;\n\n    if (isArray(item)) {\n      const index = field ? valueFields.indexOf(field) : 0;\n      valueGetter = getter(\"[\" + index + \"]\");\n    } else if (isNumber(item)) {\n      valueGetter = getter();\n    } else if (typeof item === OBJECT) {\n      const srcValueFields = binder.sourceFields(series, valueFields);\n      valueGetter = getter(srcValueFields[valueFields.indexOf(field)]);\n    }\n\n    return valueGetter;\n  }\n\n  getErrorRange(pointValue, errorValue) {\n    let low, high, value;\n\n    if (!defined(errorValue)) {\n      return null;\n    }\n\n    if (this.globalRange) {\n      return this.globalRange(pointValue);\n    }\n\n    if (isArray(errorValue)) {\n      low = pointValue - errorValue[0];\n      high = pointValue + errorValue[1];\n    } else if (isNumber(value = parseFloat(errorValue))) {\n      low = pointValue - value;\n      high = pointValue + value;\n    } else if (value = percentRegex.exec(errorValue)) {\n      const percentValue = pointValue * (parseFloat(value[1]) / 100);\n      low = pointValue - Math.abs(percentValue);\n      high = pointValue + Math.abs(percentValue);\n    } else {\n      throw new Error(\"Invalid ErrorBar value: \" + errorValue);\n    }\n\n    return {\n      low: low,\n      high: high\n    };\n  }\n\n  getStandardError(data, average) {\n    return this.getStandardDeviation(data, average, true) / Math.sqrt(average.count);\n  }\n\n  getStandardDeviation(data, average, isSample) {\n    const length = data.length;\n    const total = isSample ? average.count - 1 : average.count;\n    let squareDifferenceSum = 0;\n\n    for (let idx = 0; idx < length; idx++) {\n      const value = this.valueGetter(data[idx]);\n\n      if (isNumber(value)) {\n        squareDifferenceSum += Math.pow(value - average.value, 2);\n      }\n    }\n\n    return Math.sqrt(squareDifferenceSum / total);\n  }\n\n  getAverage(data) {\n    const length = data.length;\n    let sum = 0;\n    let count = 0;\n\n    for (let idx = 0; idx < length; idx++) {\n      const value = this.valueGetter(data[idx]);\n\n      if (isNumber(value)) {\n        sum += value;\n        count++;\n      }\n    }\n\n    return {\n      value: sum / count,\n      count: count\n    };\n  }\n\n}\n\nexport default ErrorRangeCalculator;","map":null,"metadata":{},"sourceType":"module"}