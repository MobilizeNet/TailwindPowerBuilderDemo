{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1373);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1051:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.core\");\n    /***/\n  },\n\n  /***/\n  1089:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.html.button\");\n    /***/\n  },\n\n  /***/\n  1112:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.userevents\");\n    /***/\n  },\n\n  /***/\n  1327:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.floatinglabel\");\n    /***/\n  },\n\n  /***/\n  1373:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1051), __webpack_require__(1112), __webpack_require__(1327), __webpack_require__(1089)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"numerictextbox\",\n        name: \"NumericTextBox\",\n        category: \"web\",\n        description: \"The NumericTextBox widget can format and display numeric, percentage or currency textbox.\",\n        depends: [\"core\", \"userevents\", \"floatinglabel\", \"html.button\"]\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            caret = kendo.caret,\n            keys = kendo.keys,\n            html = kendo.html,\n            ui = kendo.ui,\n            Widget = ui.Widget,\n            activeElement = kendo._activeElement,\n            extractFormat = kendo._extractFormat,\n            parse = kendo.parseFloat,\n            placeholderSupported = kendo.support.placeholder,\n            getCulture = kendo.getCulture,\n            CHANGE = \"change\",\n            DISABLED = \"disabled\",\n            READONLY = \"readonly\",\n            INPUT = \"k-input-inner\",\n            SPIN = \"spin\",\n            ns = \".kendoNumericTextBox\",\n            TOUCHEND = \"touchend\",\n            MOUSELEAVE = \"mouseleave\" + ns,\n            HOVEREVENTS = \"mouseenter\" + ns + \" \" + MOUSELEAVE,\n            FOCUSED = \"k-focus\",\n            HOVER = \"k-hover\",\n            FOCUS = \"focus\",\n            POINT = \".\",\n            SYMBOL = \"symbol\",\n            CLASS_ICON = \"k-icon\",\n            LABELCLASSES = \"k-label k-input-label\",\n            SELECTED = \"k-selected\",\n            STATEDISABLED = \"k-disabled\",\n            STATEINVALID = \"k-invalid\",\n            ARIA_DISABLED = \"aria-disabled\",\n            INTEGER_REGEXP = /^(-)?(\\d*)$/,\n            NULL = null,\n            isPlainObject = $.isPlainObject,\n            extend = $.extend;\n        var NumericTextBox = Widget.extend({\n          init: function (element, options) {\n            var that = this,\n                isStep = options && options.step !== undefined,\n                min,\n                max,\n                step,\n                value,\n                disabled;\n            var inputType;\n            Widget.fn.init.call(that, element, options);\n            options = that.options;\n            element = that.element.on(\"focusout\" + ns, that._focusout.bind(that)).attr(\"role\", \"spinbutton\");\n            options.placeholder = options.placeholder || element.attr(\"placeholder\");\n            min = that.min(element.attr(\"min\"));\n            max = that.max(element.attr(\"max\"));\n            step = that._parse(element.attr(\"step\"));\n\n            if (options.min === NULL && min !== NULL) {\n              options.min = min;\n            }\n\n            if (options.max === NULL && max !== NULL) {\n              options.max = max;\n            }\n\n            if (!isStep && step !== NULL) {\n              options.step = step;\n            }\n\n            that._initialOptions = extend({}, options);\n            inputType = element.attr(\"type\");\n\n            that._reset();\n\n            that._wrapper();\n\n            that._arrows();\n\n            that._validation();\n\n            that._input();\n\n            if (!kendo.support.mobileOS) {\n              that._text.on(FOCUS + ns, that._click.bind(that));\n            } else {\n              that._text.on(TOUCHEND + ns + \" \" + FOCUS + ns, function () {\n                if (kendo.support.browser.edge) {\n                  that._text.one(FOCUS + ns, function () {\n                    that._focusin();\n                  });\n                } else {\n                  that._focusin();\n                }\n\n                that.selectValue();\n              });\n            }\n\n            element.attr(\"aria-valuemin\", options.min !== NULL ? options.min * options.factor : options.min).attr(\"aria-valuemax\", options.max !== NULL ? options.max * options.factor : options.max);\n            options.format = extractFormat(options.format);\n            value = options.value;\n\n            if (value == NULL) {\n              if (inputType == \"number\") {\n                value = parseFloat(element.val());\n              } else {\n                value = element.val();\n              }\n            }\n\n            that.value(value);\n            disabled = !options.enable || element.is(\"[disabled]\") || $(that.element).parents(\"fieldset\").is(':disabled');\n\n            if (disabled) {\n              that.enable(false);\n            } else {\n              that.readonly(element.is(\"[readonly]\"));\n            }\n\n            that.angular(\"compile\", function () {\n              return {\n                elements: that._text.get()\n              };\n            });\n\n            that._label();\n\n            that._ariaLabel(that._text);\n\n            that._applyCssClasses();\n\n            kendo.notify(that);\n          },\n          options: {\n            name: \"NumericTextBox\",\n            decimals: NULL,\n            enable: true,\n            restrictDecimals: false,\n            min: NULL,\n            max: NULL,\n            value: NULL,\n            step: 1,\n            round: true,\n            culture: \"\",\n            format: \"n\",\n            spinners: true,\n            placeholder: \"\",\n            selectOnFocus: false,\n            factor: 1,\n            upArrowText: \"Increase value\",\n            downArrowText: \"Decrease value\",\n            label: null,\n            size: \"medium\",\n            fillMode: \"solid\",\n            rounded: \"medium\"\n          },\n          events: [CHANGE, SPIN],\n          _editable: function (options) {\n            var that = this,\n                element = that.element,\n                disable = options.disable,\n                readonly = options.readonly,\n                text = that._text.add(element),\n                wrapper = that.wrapper.off(HOVEREVENTS);\n\n            that._toggleText(true);\n\n            that._upArrowEventHandler.unbind(\"press\");\n\n            that._downArrowEventHandler.unbind(\"press\");\n\n            element.off(\"keydown\" + ns).off(\"keyup\" + ns).off(\"input\" + ns).off(\"paste\" + ns);\n\n            if (that._inputLabel) {\n              that._inputLabel.off(ns);\n            }\n\n            if (!readonly && !disable) {\n              wrapper.removeClass(STATEDISABLED).on(HOVEREVENTS, that._toggleHover);\n              text.prop(DISABLED, false).prop(READONLY, false).attr(ARIA_DISABLED, false);\n\n              that._upArrowEventHandler.bind(\"press\", function (e) {\n                e.preventDefault();\n\n                that._spin(1);\n\n                that._upArrow.addClass(SELECTED);\n              });\n\n              that._downArrowEventHandler.bind(\"press\", function (e) {\n                e.preventDefault();\n\n                that._spin(-1);\n\n                that._downArrow.addClass(SELECTED);\n              });\n\n              that.element.on(\"keydown\" + ns, that._keydown.bind(that)).on(\"keyup\" + ns, that._keyup.bind(that)).on(\"paste\" + ns, that._paste.bind(that)).on(\"input\" + ns, that._inputHandler.bind(that));\n\n              if (that._inputLabel) {\n                that._inputLabel.on(\"click\" + ns, that.focus.bind(that));\n              }\n            } else {\n              wrapper.addClass(disable ? STATEDISABLED : \"\").removeClass(disable ? \"\" : STATEDISABLED);\n              text.attr(DISABLED, disable).attr(READONLY, readonly).attr(ARIA_DISABLED, disable);\n            }\n          },\n          readonly: function (readonly) {\n            var that = this;\n\n            this._editable({\n              readonly: readonly === undefined ? true : readonly,\n              disable: false\n            });\n\n            if (that.floatingLabel) {\n              that.floatingLabel.readonly(readonly === undefined ? true : readonly);\n            }\n          },\n          enable: function (enable) {\n            var that = this;\n\n            this._editable({\n              readonly: false,\n              disable: !(enable = enable === undefined ? true : enable)\n            });\n\n            if (that.floatingLabel) {\n              that.floatingLabel.enable(enable = enable === undefined ? true : enable);\n            }\n          },\n          setOptions: function (options) {\n            var that = this;\n            Widget.fn.setOptions.call(that, options);\n            that.wrapper.toggleClass(\"k-expand-padding\", !that.options.spinners);\n\n            that._text.prop(\"placeholder\", that.options.placeholder);\n\n            that._placeholder(that.options.placeholder);\n\n            that.element.attr({\n              \"aria-valuemin\": that.options.min !== NULL ? that.options.min * that.options.factor : that.options.min,\n              \"aria-valuemax\": that.options.max !== NULL ? that.options.max * that.options.factor : that.options.max\n            });\n            that.options.format = extractFormat(that.options.format);\n\n            that._upArrowEventHandler.destroy();\n\n            that._downArrowEventHandler.destroy();\n\n            that._arrowsWrap.remove();\n\n            that._arrows();\n\n            that._applyCssClasses();\n\n            if (options.value !== undefined) {\n              that.value(options.value);\n            }\n          },\n          destroy: function () {\n            var that = this;\n\n            if (that._inputLabel) {\n              that._inputLabel.off(ns);\n\n              if (that.floatingLabel) {\n                that.floatingLabel.destroy();\n              }\n            }\n\n            that.element.add(that._text).add(that._upArrow).add(that._downArrow).off(ns);\n\n            that._upArrowEventHandler.destroy();\n\n            that._downArrowEventHandler.destroy();\n\n            if (that._form) {\n              that._form.off(\"reset\", that._resetHandler);\n            }\n\n            Widget.fn.destroy.call(that);\n          },\n          min: function (value) {\n            return this._option(\"min\", value);\n          },\n          max: function (value) {\n            return this._option(\"max\", value);\n          },\n          step: function (value) {\n            return this._option(\"step\", value);\n          },\n          value: function (value) {\n            var that = this,\n                adjusted;\n\n            if (value === undefined) {\n              return that._value;\n            }\n\n            value = that._parse(value);\n            adjusted = that._adjust(value);\n\n            if (value !== adjusted) {\n              return;\n            }\n\n            that._update(value);\n\n            that._old = that._value;\n          },\n          focus: function () {\n            this._focusin();\n          },\n          _adjust: function (value) {\n            var that = this,\n                options = that.options,\n                min = options.min,\n                max = options.max;\n\n            if (value === NULL) {\n              return value;\n            }\n\n            if (min !== NULL && value < min) {\n              value = min;\n            } else if (max !== NULL && value > max) {\n              value = max;\n            }\n\n            return value;\n          },\n          _arrows: function () {\n            var that = this,\n                arrows,\n                _release = function () {\n              clearTimeout(that._spinning);\n              arrows.removeClass(SELECTED);\n            },\n                options = that.options,\n                spinners = options.spinners,\n                element = that.element;\n\n            arrows = element.siblings(\".k-icon-button\");\n\n            if (!arrows[0]) {\n              arrows = $(buttonHtml(\"increase\", options.upArrowText, options) + buttonHtml(\"decrease\", options.downArrowText, options)).appendTo(that.wrapper);\n              that._arrowsWrap = arrows.wrapAll('<span class=\"k-input-spinner k-spin-button\"/>').parent();\n            }\n\n            if (!spinners) {\n              arrows.parent().toggle(spinners);\n              that.wrapper.addClass(\"k-expand-padding\");\n            }\n\n            that._upArrow = arrows.eq(0);\n            that._upArrowEventHandler = new kendo.UserEvents(that._upArrow, {\n              release: _release\n            });\n            that._downArrow = arrows.eq(1);\n            that._downArrowEventHandler = new kendo.UserEvents(that._downArrow, {\n              release: _release\n            });\n          },\n          _validation: function () {\n            var that = this;\n            var element = that.element;\n            that._validationIcon = $(\"<span class='k-input-validation-icon \" + CLASS_ICON + \" k-i-warning k-hidden'></span>\").insertAfter(element);\n          },\n          _blur: function () {\n            var that = this;\n\n            that._toggleText(true);\n\n            that._change(that.element.val());\n          },\n          _click: function (e) {\n            var that = this;\n            clearTimeout(that._focusing);\n            that._focusing = setTimeout(function () {\n              var input = e.target,\n                  idx = caret(input)[0],\n                  value = input.value.substring(0, idx),\n                  format = that._format(that.options.format),\n                  group = format[\",\"],\n                  result,\n                  groupRegExp,\n                  extractRegExp,\n                  caretPosition = 0;\n\n              if (group) {\n                groupRegExp = new RegExp(\"\\\\\" + group, \"g\");\n                extractRegExp = new RegExp(\"(-)?(\" + format[SYMBOL] + \")?([\\\\d\\\\\" + group + \"]+)(\\\\\" + format[POINT] + \")?(\\\\d+)?\");\n              }\n\n              if (extractRegExp) {\n                result = extractRegExp.exec(value);\n              }\n\n              if (result) {\n                caretPosition = result[0].replace(groupRegExp, \"\").length;\n\n                if (value.indexOf(\"(\") != -1 && that._value < 0) {\n                  caretPosition++;\n                }\n              }\n\n              that._focusin();\n\n              caret(that.element[0], caretPosition);\n              that.selectValue();\n            });\n          },\n          selectValue: function () {\n            if (this.options.selectOnFocus) {\n              this.element[0].select();\n            }\n          },\n          _getFactorValue: function (value) {\n            var that = this,\n                factor = that.options.factor;\n\n            if (factor && factor !== 1) {\n              value = kendo.parseFloat(value);\n\n              if (value !== null) {\n                value = value / factor;\n              }\n            }\n\n            return value;\n          },\n          _change: function (value) {\n            var that = this;\n            value = that._getFactorValue(value);\n\n            that._update(value);\n\n            value = that._value;\n\n            if (that._old != value) {\n              that._old = value;\n\n              if (!that._typing) {\n                // trigger the DOM change event so any subscriber gets notified\n                that.element.trigger(CHANGE);\n              }\n\n              that.trigger(CHANGE);\n            }\n\n            that._typing = false;\n          },\n          _culture: function (culture) {\n            return culture || getCulture(this.options.culture);\n          },\n          _focusin: function () {\n            var that = this;\n            that.wrapper.addClass(FOCUSED);\n\n            that._toggleText(false);\n\n            that.element[0].focus();\n          },\n          _focusout: function () {\n            var that = this;\n            clearTimeout(that._focusing);\n            that.wrapper.removeClass(FOCUSED).removeClass(HOVER);\n\n            that._blur();\n\n            that._removeInvalidState();\n          },\n          _format: function (format, culture) {\n            var numberFormat = this._culture(culture).numberFormat;\n\n            format = format.toLowerCase();\n\n            if (format.indexOf(\"c\") > -1) {\n              numberFormat = numberFormat.currency;\n            } else if (format.indexOf(\"p\") > -1) {\n              numberFormat = numberFormat.percent;\n            }\n\n            return numberFormat;\n          },\n          _input: function () {\n            var that = this,\n                options = that.options,\n                element = that.element.addClass(INPUT).show()[0],\n                accessKey = element.accessKey,\n                wrapper = that.wrapper,\n                inputs = wrapper.find(POINT + INPUT),\n                text;\n            text = inputs.first();\n\n            if (text.length < 2) {\n              text = $('<input type=\"text\"/>').attr(kendo.attr(\"validate\"), false).insertBefore(element);\n            }\n\n            try {\n              element.setAttribute(\"type\", \"text\");\n            } catch (e) {\n              element.type = \"text\";\n            }\n\n            text[0].title = element.title;\n            text[0].tabIndex = element.tabIndex;\n            text[0].style.cssText = element.style.cssText;\n            text.prop(\"placeholder\", options.placeholder);\n\n            if (accessKey) {\n              text.attr(\"accesskey\", accessKey);\n              element.accessKey = \"\";\n            }\n\n            that._text = text.addClass(element.className).attr({\n              \"role\": \"spinbutton\",\n              \"aria-valuemin\": options.min !== NULL ? options.min * options.factor : options.min,\n              \"aria-valuemax\": options.max !== NULL ? options.max * options.factor : options.max,\n              \"autocomplete\": \"off\"\n            });\n          },\n          _keydown: function (e) {\n            var that = this,\n                key = e.keyCode;\n\n            if (key === keys.NUMPAD_DOT) {\n              that._numPadDot = true;\n            }\n\n            if (key == keys.DOWN) {\n              that._step(-1);\n\n              return;\n            } else if (key == keys.UP) {\n              that._step(1);\n\n              return;\n            } else if (key == keys.ENTER) {\n              that._change(that.element.val());\n\n              return;\n            }\n\n            if (key != keys.TAB) {\n              that._typing = true;\n            }\n\n            that._cachedCaret = caret(that.element);\n          },\n          _keyup: function () {\n            this._removeInvalidState();\n          },\n          _inputHandler: function () {\n            var element = this.element;\n            var value = element.val();\n            var min = this.options.min;\n\n            var numberFormat = this._format(this.options.format);\n\n            var decimalSeparator = numberFormat[POINT];\n            var minInvalid = min !== null && min >= 0 && value.charAt(0) === \"-\";\n\n            if (this._numPadDot && decimalSeparator !== POINT) {\n              value = value.replace(POINT, decimalSeparator);\n              this.element.val(value);\n              this._numPadDot = false;\n            }\n\n            if (this._isPasted && this._parse(value)) {\n              value = this._parse(value).toString().replace(POINT, numberFormat[POINT]);\n            }\n\n            if (this._numericRegex(numberFormat).test(value) && !minInvalid) {\n              this._oldText = value;\n            } else {\n              this._blinkInvalidState();\n\n              this.element.val(this._oldText);\n\n              if (this._cachedCaret) {\n                caret(element, this._cachedCaret[0]);\n                this._cachedCaret = null;\n              }\n            }\n\n            this._isPasted = false;\n          },\n          _blinkInvalidState: function () {\n            var that = this;\n\n            that._addInvalidState();\n\n            clearTimeout(that._invalidStateTimeout);\n            that._invalidStateTimeout = setTimeout(that._removeInvalidState.bind(that), 100);\n          },\n          _addInvalidState: function () {\n            var that = this;\n            that.wrapper.addClass(STATEINVALID);\n\n            that._validationIcon.removeClass('k-hidden');\n          },\n          _removeInvalidState: function () {\n            var that = this;\n            that.wrapper.removeClass(STATEINVALID);\n\n            that._validationIcon.addClass('k-hidden');\n\n            that._invalidStateTimeout = null;\n          },\n          _numericRegex: function (numberFormat) {\n            var that = this;\n            var separator = numberFormat[POINT];\n            var precision = that.options.decimals;\n            var fractionRule = \"*\";\n\n            if (separator === POINT) {\n              separator = \"\\\\\" + separator;\n            }\n\n            if (precision === NULL) {\n              precision = numberFormat.decimals;\n            }\n\n            if (precision === 0 && that.options.restrictDecimals) {\n              return INTEGER_REGEXP;\n            }\n\n            if (that.options.restrictDecimals) {\n              fractionRule = \"{0,\" + precision + \"}\";\n            }\n\n            if (that._separator !== separator) {\n              that._separator = separator;\n              that._floatRegExp = new RegExp(\"^(-)?(((\\\\d+(\" + separator + \"\\\\d\" + fractionRule + \")?)|(\" + separator + \"\\\\d\" + fractionRule + \")))?$\");\n            }\n\n            return that._floatRegExp;\n          },\n          _paste: function (e) {\n            var that = this;\n            var element = e.target;\n            var value = element.value;\n\n            var numberFormat = that._format(that.options.format);\n\n            that._isPasted = true;\n            setTimeout(function () {\n              var result = that._parse(element.value);\n\n              if (result === NULL) {\n                that._update(value);\n              } else {\n                element.value = result.toString().replace(POINT, numberFormat[POINT]);\n\n                if (that._adjust(result) !== result || !that._numericRegex(numberFormat).test(element.value)) {\n                  value = that._getFactorValue(element.value);\n\n                  that._update(value);\n                }\n              }\n            });\n          },\n          _option: function (option, value) {\n            var that = this,\n                element = that.element,\n                options = that.options;\n\n            if (value === undefined) {\n              return options[option];\n            }\n\n            value = that._parse(value);\n\n            if (!value && option === \"step\") {\n              return;\n            }\n\n            options[option] = value;\n            element.add(that._text).attr(\"aria-value\" + option, value);\n            element.attr(option, value);\n          },\n          _spin: function (step, timeout) {\n            var that = this;\n            timeout = timeout || 500;\n            clearTimeout(that._spinning);\n            that._spinning = setTimeout(function () {\n              that._spin(step, 50);\n            }, timeout);\n\n            that._step(step);\n          },\n          _step: function (step) {\n            var that = this,\n                element = that.element,\n                originalValue = that._value,\n                value = that._parse(element.val()) || 0,\n                precision = that.options.decimals || 2;\n\n            if (activeElement() != element[0]) {\n              that._focusin();\n            }\n\n            if (that.options.factor && value) {\n              value = value / that.options.factor;\n            }\n\n            value = +(value + that.options.step * step).toFixed(precision);\n            value = that._adjust(value);\n\n            that._update(value);\n\n            that._typing = false;\n\n            if (originalValue !== value) {\n              that.trigger(SPIN);\n            }\n          },\n          _toggleHover: function (e) {\n            $(e.currentTarget).toggleClass(HOVER, e.type === \"mouseenter\");\n          },\n          _toggleText: function (toggle) {\n            var that = this;\n\n            that._text.toggle(toggle);\n\n            if (toggle) {\n              that._text.removeAttr(\"aria-hidden\");\n            } else {\n              that._text.attr(\"aria-hidden\", \"true\");\n            }\n\n            that.element.toggle(!toggle);\n          },\n          _parse: function (value, culture) {\n            return parse(value, this._culture(culture), this.options.format);\n          },\n          _round: function (value, precision) {\n            var rounder = this.options.round ? kendo._round : truncate;\n            return rounder(value, precision);\n          },\n          _update: function (value) {\n            var that = this,\n                options = that.options,\n                factor = options.factor,\n                format = options.format,\n                decimals = options.decimals,\n                culture = that._culture(),\n                numberFormat = that._format(format, culture),\n                originalValue,\n                isNotNull;\n\n            if (decimals === NULL) {\n              decimals = numberFormat.decimals;\n            }\n\n            value = that._parse(value, culture);\n            isNotNull = value !== NULL;\n\n            if (isNotNull) {\n              value = parseFloat(that._round(value, decimals), 10);\n            }\n\n            that._value = value = that._adjust(value);\n\n            that._placeholder(kendo.toString(value, format, culture));\n\n            if (isNotNull) {\n              if (factor) {\n                value = parseFloat(that._round(value * factor, decimals), 10);\n              }\n\n              value = value.toString();\n\n              if (value.indexOf(\"e\") !== -1) {\n                value = that._round(+value, decimals);\n              }\n\n              originalValue = value;\n              value = value.replace(POINT, numberFormat[POINT]);\n            } else {\n              value = null;\n              originalValue = null;\n            }\n\n            that.element.val(value);\n            that._oldText = value;\n            that.element.add(that._text).attr(\"aria-valuenow\", originalValue);\n          },\n          _placeholder: function (value) {\n            var input = this._text;\n            input.val(value);\n\n            if (!placeholderSupported && !value) {\n              input.val(this.options.placeholder);\n            }\n\n            input.attr(\"title\", this.element.attr(\"title\") || input.val());\n          },\n          _label: function () {\n            var that = this;\n            var element = that.element;\n            var options = that.options;\n            var id = element.attr(\"id\");\n            var floating;\n            var labelText;\n\n            if (options.label !== null) {\n              floating = isPlainObject(options.label) ? options.label.floating : false;\n              labelText = isPlainObject(options.label) ? options.label.content : options.label;\n\n              if (floating) {\n                that._floatingLabelContainer = that.wrapper.wrap(\"<span></span>\").parent();\n                that.floatingLabel = new kendo.ui.FloatingLabel(that._floatingLabelContainer, {\n                  widget: that\n                });\n              }\n\n              if (kendo.isFunction(labelText)) {\n                labelText = labelText.call(that);\n              }\n\n              if (!labelText) {\n                labelText = \"\";\n              }\n\n              if (!id) {\n                id = options.name + \"_\" + kendo.guid();\n                element.attr(\"id\", id);\n              }\n\n              that._inputLabel = $(\"<label class='\" + LABELCLASSES + \"' for='\" + id + \"'>\" + labelText + \"</label>'\").insertBefore(that.wrapper);\n\n              if (that.element.attr(\"disabled\") === undefined && that.element.attr(\"readonly\") === undefined) {\n                that._inputLabel.on(\"click\" + ns, that.focus.bind(that));\n              }\n            }\n          },\n          _wrapper: function () {\n            var that = this,\n                element = that.element,\n                DOMElement = element[0],\n                wrapper;\n            wrapper = element.parents(\".k-numerictextbox\");\n\n            if (!wrapper.is(\"span.k-numerictextbox\")) {\n              wrapper = element.hide().wrap(\"<span/>\").parent();\n            }\n\n            wrapper[0].style.cssText = DOMElement.style.cssText;\n            DOMElement.style.width = \"\";\n            that.wrapper = wrapper.addClass(\"k-numerictextbox k-input\").addClass(DOMElement.className).removeClass('input-validation-error').css(\"display\", \"\");\n          },\n          _reset: function () {\n            var that = this,\n                element = that.element,\n                formId = element.attr(\"form\"),\n                form = formId ? $(\"#\" + formId) : element.closest(\"form\");\n\n            if (form[0]) {\n              that._resetHandler = function () {\n                setTimeout(function () {\n                  that.value(element[0].value);\n                  that.max(that._initialOptions.max);\n                  that.min(that._initialOptions.min);\n                });\n              };\n\n              that._form = form.on(\"reset\", that._resetHandler);\n            }\n          }\n        });\n        kendo.cssProperties.registerPrefix(\"NumericTextBox\", \"k-input-\");\n        kendo.cssProperties.registerValues(\"NumericTextBox\", [{\n          prop: \"rounded\",\n          values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n        }]);\n\n        function buttonHtml(direction, text, options) {\n          var className = direction === \"increase\" ? \"arrow-n\" : \"arrow-s\";\n          var dir = direction === \"increase\" ? \"increase\" : \"decrease\";\n          return html.renderButton('<button role=\"button\" tabindex=\"-1\" unselectable=\"on\" class=\"k-spinner-' + dir + '\" aria-label=\"' + text + '\" title=\"' + text + '\"></button>', extend({}, options, {\n            icon: className,\n            shape: null,\n            rounded: null\n          }));\n        }\n\n        function truncate(value, precision) {\n          var parts = parseFloat(value, 10).toString().split(POINT);\n\n          if (parts[1]) {\n            parts[1] = parts[1].substring(0, precision);\n          }\n\n          return parts.join(POINT);\n        }\n\n        ui.plugin(NumericTextBox);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}