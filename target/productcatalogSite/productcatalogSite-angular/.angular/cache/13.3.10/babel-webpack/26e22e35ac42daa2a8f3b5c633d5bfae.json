{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { WMLogger } from '@mobilize/logging';\nimport { ModelResolver } from '../../Core';\nimport { ErrorCodes, ExceptionHandlerClass } from '../../System/Aop';\n\nvar ModelResolverV5 = function (_super) {\n  __extends(ModelResolverV5, _super);\n\n  function ModelResolverV5() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ModelResolverV5.prototype.resolveAdded = function (projections) {\n    var _this = this;\n\n    this.myIsSynchronizing = true;\n\n    if (projections) {\n      var newModels = projections.map(function (projection) {\n        return _this.modelFactory.create(projection);\n      });\n      this.addNewModels(newModels);\n      var behaviors = this.getBehaviors();\n      this.applyBehaviors(behaviors, newModels);\n    }\n\n    this.myIsSynchronizing = false;\n  };\n\n  ModelResolverV5.prototype.resolveChanged = function (projections) {\n    this.myIsSynchronizing = true;\n\n    if (projections) {\n      var updatedModels = this.updateModels(projections);\n      var behaviors = this.getBehaviors();\n      behaviors.evt = [];\n      this.applyBehaviors(behaviors, updatedModels);\n    }\n\n    this.myIsSynchronizing = false;\n  };\n\n  ModelResolverV5.prototype.resolveRemoved = function (removedIds) {\n    var _this = this;\n\n    this.myIsSynchronizing = true;\n\n    if (removedIds) {\n      removedIds.forEach(function (id) {\n        _this.detachReference(id);\n\n        _this.buffer.deleteCascade(id);\n      });\n    }\n\n    this.myIsSynchronizing = false;\n  };\n\n  ModelResolverV5.prototype.addNewModels = function (newModels) {\n    var _this = this;\n\n    newModels.forEach(function (item) {\n      if (item.UniqueID && item.UniqueID.length > 0) {\n        if (!_this.buffer.exists(item)) {\n          _this.buffer.add(item);\n        } else {\n          WMLogger.instance().error(\"New model with Id \" + item.UniqueID + \" already exists.\");\n        }\n      }\n    });\n  };\n\n  ModelResolverV5.prototype.updateModels = function (projections) {\n    var updatedModels = [];\n\n    for (var _i = 0, projections_1 = projections; _i < projections_1.length; _i++) {\n      var projection = projections_1[_i];\n      var model = this.buffer.getModel(projection.Id);\n\n      if (model) {\n        model.updateModel(projection);\n\n        if (projection.EventChanges) {\n          model.eventChanges = projection.EventChanges;\n        }\n\n        if (projection.Style) {\n          model.stylePivot = projection.Style;\n        }\n\n        updatedModels.push(model);\n      } else {\n        console.error('This models is not in the buffer. Please check the Backend response in the removed area.');\n      }\n    }\n\n    return updatedModels;\n  };\n\n  ModelResolverV5.prototype.detachReference = function (id) {\n    var model = this.buffer.getModel(id);\n\n    if (model) {\n      var parentRefs = model.referencedBy;\n\n      for (var parentId in parentRefs) {\n        if (parentRefs.hasOwnProperty(parentId)) {\n          var parent_1 = this.buffer.getModel(parentId);\n\n          if (parent_1) {\n            parent_1.removeReference(parentRefs[parentId]);\n          }\n        }\n      }\n    }\n  };\n\n  ModelResolverV5 = __decorate([ExceptionHandlerClass(ErrorCodes.ClientCore)], ModelResolverV5);\n  return ModelResolverV5;\n}(ModelResolver);\n\nexport { ModelResolverV5 }; //# sourceMappingURL=data:application/json;base64,","map":null,"metadata":{},"sourceType":"module"}