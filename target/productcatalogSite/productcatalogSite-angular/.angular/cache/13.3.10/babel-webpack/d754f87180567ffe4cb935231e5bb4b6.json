{"ast":null,"code":"import i18next from 'i18next';\nimport * as loglevel from 'loglevel';\n\nvar WMLog = function () {\n  function WMLog() {}\n\n  WMLog.prototype.init = function (options, level) {\n    if (level === void 0) {\n      level = 'silent';\n    }\n\n    i18next.init(options, function () {});\n    loglevel.setLevel(level);\n  };\n\n  WMLog.prototype.trace = function () {\n    loglevel.trace();\n  };\n\n  WMLog.prototype.debug = function (message, args) {\n    loglevel.debug(this.getLocalizedMessage(message, args));\n  };\n\n  WMLog.prototype.info = function (message, args) {\n    loglevel.info(this.getLocalizedMessage(message, args));\n  };\n\n  WMLog.prototype.warn = function (message, args) {\n    loglevel.warn(this.getLocalizedMessage(message, args));\n  };\n\n  WMLog.prototype.error = function (message, args) {\n    loglevel.error(this.getLocalizedMessage(message, args));\n  };\n\n  WMLog.prototype.getLocalizedMessage = function (msg, args) {\n    var tag = localStorage.getItem('logTag');\n\n    if (tag) {\n      msg = '[' + tag + '] ' + msg;\n    }\n\n    if (msg && isI18nMessage(msg)) {\n      if (args) {\n        return i18next.t(msg, args);\n      }\n\n      return i18next.t(msg);\n    }\n\n    return msg;\n  };\n\n  return WMLog;\n}();\n\nexport { WMLog };\n\nvar WMLogger = function () {\n  function WMLogger(inject) {\n    WMLogger.instance();\n  }\n\n  WMLogger.instance = function () {\n    if (WMLogger.Log === undefined || WMLogger.Log === null) {\n      WMLogger.Log = new WMLog();\n    }\n\n    return WMLogger.Log;\n  };\n\n  return WMLogger;\n}();\n\nexport { WMLogger };\n\nfunction isI18nMessage(msg) {\n  msg = msg.toString();\n  return msg.indexOf('error.') === 0 || msg.indexOf('warn.') === 0 || msg.indexOf('debug.') === 0 || msg.indexOf('info.') === 0;\n}\n\nwindow.loglevel = function (level) {\n  loglevel.setLevel(level);\n};","map":null,"metadata":{},"sourceType":"module"}