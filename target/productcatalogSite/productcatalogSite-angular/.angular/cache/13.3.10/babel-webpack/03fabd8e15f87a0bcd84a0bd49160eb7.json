{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Events } from '../../Contract';\nimport { ErrorCodes, ExceptionHandlerClass } from '../../System/Aop';\nimport { ViewManager } from '../../UI';\nimport { Commands } from '../../UI/Command';\nimport { ActionModelV5 } from '../Application';\nimport * as DOMPurify from 'dompurify';\n\nvar ViewManagerV5 = function (_super) {\n  __extends(ViewManagerV5, _super);\n\n  function ViewManagerV5(inject) {\n    if (inject === void 0) {\n      inject = null;\n    }\n\n    return _super.call(this, inject) || this;\n  }\n\n  ViewManagerV5.prototype.removeViews = function (viewIds) {\n    if (!viewIds) {\n      return;\n    }\n\n    for (var _i = 0, viewIds_1 = viewIds; _i < viewIds_1.length; _i++) {\n      var id = viewIds_1[_i];\n      this.deleteView(id);\n      this.models.deleteCascade(id);\n    }\n  };\n\n  ViewManagerV5.prototype.createViews = function (viewIds) {\n    var _this = this;\n\n    if (!viewIds) {\n      return;\n    }\n\n    var views = new Array();\n\n    for (var _i = 0, viewIds_2 = viewIds; _i < viewIds_2.length; _i++) {\n      var id = viewIds_2[_i];\n      this.createNewView(id, views);\n    }\n\n    views.forEach(function (v) {\n      return _this.viewLoad(v, views);\n    });\n  };\n\n  ViewManagerV5.prototype.updateViews = function (viewIds) {\n    if (!viewIds) {\n      return;\n    }\n\n    for (var _i = 0, viewIds_3 = viewIds; _i < viewIds_3.length; _i++) {\n      var id = viewIds_3[_i];\n      this.updateView(id);\n    }\n  };\n\n  ViewManagerV5.prototype.createNewView = function (id, views) {\n    var _this = this;\n\n    var model = this.models.getModel(id);\n\n    if (!model) {\n      throw new TypeError('Cannot create view from null model');\n    }\n\n    if (this.getView(model) === undefined) {\n      this.viewResolver.resolve(model, function (view) {\n        views.push(view);\n\n        _this.viewCreated(view);\n      });\n    }\n  };\n\n  ViewManagerV5.prototype.getModel = function (key) {\n    return this.models.getModel(key);\n  };\n\n  ViewManagerV5.prototype.updateView = function (id) {\n    var view = this.views.value(id);\n\n    if (view) {\n      var model = this.models.getModel(id);\n\n      if (model['IsDisposed']) {\n        this.deleteView(id);\n        this.models.deleteCascade(id);\n        return;\n      }\n\n      if (model['Visible']) {\n        view.show();\n      } else {\n        view.hide();\n      }\n    }\n  };\n\n  ViewManagerV5.prototype.initializeCommand = function () {\n    var _this = this;\n\n    _super.prototype.initializeCommand.call(this);\n\n    this.registerCommand(Commands.OpenView, function (command) {\n      return _this.openViewCommandHandler(command);\n    });\n    this.registerCommand(Commands.SendCommand, function (command) {\n      return _this.sendCommandHandler(command);\n    });\n    this.registerCommand(Commands.PendingResponse, function (command) {\n      return _this.pendingResponseHandler(command);\n    });\n    this.registerCommand(Commands.BringToFrontCommand, function (command) {\n      return _this.bringToFrontHandler(command);\n    });\n    this.registerCommand(Commands.SessionExpiredCommand, function (command) {\n      return _this.sessionExpiredHandler(command);\n    });\n    this.registerCommand(Commands.ChangeMenuCommand, function (command) {\n      return _this.changeMenuHandler(command);\n    });\n    this.registerCommand(Commands.DownloadFileCommand, function (command) {\n      return _this.downloadFileHandler(command);\n    });\n    this.registerCommand(Commands.ArrangeWindowCommand, function (command) {\n      return _this.arrangeWindowHandler(command);\n    });\n    this.registerCommand(Commands.GridPrintCommand, function (command) {\n      return _this.gridPrintHandler(command);\n    });\n    this.registerCommand(Commands.StartEditCommand, function (command) {\n      return _this.startEditControlHandler(command);\n    });\n    this.registerCommand(Commands.StylesChangedCommand, function (command) {\n      return _this.stylesChangedHandler(command);\n    });\n    this.registerCommand(Commands.UpdateRangesCommand, function (command) {\n      return _this.updateRangesHandler(command);\n    });\n    this.registerCommand(Commands.ModalExecutionCommand, function (command) {\n      return _this.modalExecutionHandler(command);\n    });\n  };\n\n  ViewManagerV5.prototype.openViewCommandHandler = function (command) {\n    var _this = this;\n\n    var model = this.models.getModel(command.receiverId);\n\n    if (this.getView(model) === undefined) {\n      this.viewResolver.resolve(model, function (view) {\n        view.load();\n\n        _this.viewCreated(view);\n      });\n    }\n  };\n\n  ViewManagerV5.prototype.sendCommandHandler = function (command) {\n    var actionModel = new ActionModelV5(command.receiverId, command.serverEvent, command.sender.name, command.action, command.args, command.callback, command.highPriority);\n    this.action.send(actionModel);\n  };\n\n  ViewManagerV5.prototype.downloadFileHandler = function (command) {\n    var url = \"\" + window.location.href + command.downloadUrl;\n    var downloadLink = document.createElement('a');\n    downloadLink.setAttribute('download', command.key);\n    var safeUrlT = DOMPurify.sanitize(url, {\n      RETURN_DOM_FRAGMENT: true\n    });\n    downloadLink.setAttribute('href', safeUrlT.textContent);\n    downloadLink.click();\n  };\n\n  ViewManagerV5.prototype.pendingResponseHandler = function (command) {\n    var commandName = Commands.PendingResponse;\n    var actionModel = new ActionModelV5(command.receiverId, command.serverEvent, commandName, command.action, command.args);\n    actionModel.requestConfig.headers[command.action] = command.receiverId;\n    this.action.send(actionModel);\n  };\n\n  ViewManagerV5.prototype.bringToFrontHandler = function (command) {\n    var model = this.models.getModel(command.UniqueID);\n    var view = this.getView(model);\n\n    if (view !== undefined) {\n      view.bringToFront();\n    }\n  };\n\n  ViewManagerV5.prototype.sessionExpiredHandler = function (command) {\n    var modal = this.modalFactory.create('expired');\n    modal.show(command);\n  };\n\n  ViewManagerV5.prototype.gridPrintHandler = function (command) {\n    this.event.publish(Events.GridPrint, command);\n  };\n\n  ViewManagerV5.prototype.stylesChangedHandler = function (command) {\n    this.event.publish(Events.StylesChanged, command);\n  };\n\n  ViewManagerV5.prototype.updateRangesHandler = function (command) {\n    this.event.publish(Events.UpdateRanges, command);\n  };\n\n  ViewManagerV5.prototype.modalExecutionHandler = function (command) {\n    this.event.publish(Events.ModalExecution, command);\n  };\n\n  ViewManagerV5 = __decorate([ExceptionHandlerClass(ErrorCodes.ClientCore), __metadata(\"design:paramtypes\", [Object])], ViewManagerV5);\n  return ViewManagerV5;\n}(ViewManager);\n\nexport { ViewManagerV5 }; //# sourceMappingURL=data:application/json;base64,","map":null,"metadata":{},"sourceType":"module"}