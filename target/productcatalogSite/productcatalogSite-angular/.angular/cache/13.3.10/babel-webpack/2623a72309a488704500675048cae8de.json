{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1363);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1063:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.data\");\n    /***/\n  },\n\n  /***/\n  1132:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.fx\");\n    /***/\n  },\n\n  /***/\n  1136:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.draganddrop\");\n    /***/\n  },\n\n  /***/\n  1363:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1132), __webpack_require__(1063), __webpack_require__(1136)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"mobile.scrollview\",\n        name: \"ScrollView\",\n        category: \"mobile\",\n        description: \"The Kendo Mobile ScrollView widget is used to scroll content wider than the device screen.\",\n        depends: [\"fx\", \"data\", \"draganddrop\"]\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            mobile = kendo.mobile,\n            ui = mobile.ui,\n            Transition = kendo.effects.Transition,\n            Pane = kendo.ui.Pane,\n            PaneDimensions = kendo.ui.PaneDimensions,\n            Widget = ui.DataBoundWidget,\n            DataSource = kendo.data.DataSource,\n            Buffer = kendo.data.Buffer,\n            BatchBuffer = kendo.data.BatchBuffer,\n            // Math\n        math = Math,\n            abs = math.abs,\n            ceil = math.ceil,\n            round = math.round,\n            max = math.max,\n            min = math.min,\n            floor = math.floor,\n            CHANGE = \"change\",\n            CHANGING = \"changing\",\n            REFRESH = \"refresh\",\n            CURRENT_PAGE_CLASS = \"current-page\",\n            VIRTUAL_PAGE_CLASS = \"virtual-page\",\n            FUNCTION = \"function\",\n            ITEM_CHANGE = \"itemChange\",\n            CLEANUP = \"cleanup\",\n            VIRTUAL_PAGE_COUNT = 3,\n            LEFT_PAGE = -1,\n            CETER_PAGE = 0,\n            RIGHT_PAGE = 1,\n            LEFT_SWIPE = -1,\n            NUDGE = 0,\n            RIGHT_SWIPE = 1;\n\n        function className(name) {\n          return \"k-\" + name + \" km-\" + name;\n        }\n\n        var Pager = kendo.Class.extend({\n          init: function (scrollView) {\n            var that = this,\n                element = $(\"<ol class='\" + className(\"pages\") + \"'/>\");\n            scrollView.element.append(element);\n            this._changeProxy = that._change.bind(that);\n            this._refreshProxy = that._refresh.bind(that);\n            scrollView.bind(CHANGE, this._changeProxy);\n            scrollView.bind(REFRESH, this._refreshProxy);\n            $.extend(that, {\n              element: element,\n              scrollView: scrollView\n            });\n          },\n          items: function () {\n            return this.element.children();\n          },\n          _refresh: function (e) {\n            var pageHTML = \"\";\n\n            for (var idx = 0; idx < e.pageCount; idx++) {\n              pageHTML += \"<li></li>\";\n            }\n\n            this.element.html(pageHTML);\n            this.items().eq(e.page).addClass(className(CURRENT_PAGE_CLASS));\n          },\n          _change: function (e) {\n            this.items().removeClass(className(CURRENT_PAGE_CLASS)).eq(e.page).addClass(className(CURRENT_PAGE_CLASS));\n          },\n          destroy: function () {\n            this.scrollView.unbind(CHANGE, this._changeProxy);\n            this.scrollView.unbind(REFRESH, this._refreshProxy);\n            this.element.remove();\n          }\n        });\n        kendo.mobile.ui.ScrollViewPager = Pager;\n        var TRANSITION_END = \"transitionEnd\",\n            DRAG_START = \"dragStart\",\n            DRAG_END = \"dragEnd\";\n        var ElasticPane = kendo.Observable.extend({\n          init: function (element, options) {\n            var that = this;\n            kendo.Observable.fn.init.call(this);\n            this.element = element;\n            this.container = element.parent();\n            var movable, transition, userEvents, dimensions, dimension, pane;\n            movable = new kendo.ui.Movable(that.element);\n            transition = new Transition({\n              axis: \"x\",\n              movable: movable,\n              onEnd: function () {\n                that.trigger(TRANSITION_END);\n              }\n            });\n            userEvents = new kendo.UserEvents(element, {\n              fastTap: true,\n              start: function (e) {\n                if (abs(e.x.velocity) * 2 >= abs(e.y.velocity)) {\n                  userEvents.capture();\n                } else {\n                  userEvents.cancel();\n                }\n\n                that.trigger(DRAG_START, e);\n                transition.cancel();\n              },\n              allowSelection: true,\n              end: function (e) {\n                that.trigger(DRAG_END, e);\n              }\n            });\n            dimensions = new PaneDimensions({\n              element: that.element,\n              container: that.container\n            });\n            dimension = dimensions.x;\n            dimension.bind(CHANGE, function () {\n              that.trigger(CHANGE);\n            });\n            pane = new Pane({\n              dimensions: dimensions,\n              userEvents: userEvents,\n              movable: movable,\n              elastic: true\n            });\n            $.extend(that, {\n              duration: options && options.duration || 1,\n              movable: movable,\n              transition: transition,\n              userEvents: userEvents,\n              dimensions: dimensions,\n              dimension: dimension,\n              pane: pane\n            });\n            this.bind([TRANSITION_END, DRAG_START, DRAG_END, CHANGE], options);\n          },\n          size: function () {\n            return {\n              width: this.dimensions.x.getSize(),\n              height: this.dimensions.y.getSize()\n            };\n          },\n          total: function () {\n            return this.dimension.getTotal();\n          },\n          offset: function () {\n            return -this.movable.x;\n          },\n          updateDimension: function () {\n            this.dimension.update(true);\n          },\n          refresh: function () {\n            this.dimensions.refresh();\n          },\n          moveTo: function (offset) {\n            this.movable.moveAxis(\"x\", -offset);\n          },\n          transitionTo: function (offset, ease, instant) {\n            if (instant) {\n              this.moveTo(-offset);\n            } else {\n              this.transition.moveTo({\n                location: offset,\n                duration: this.duration,\n                ease: ease\n              });\n            }\n          }\n        });\n        kendo.mobile.ui.ScrollViewElasticPane = ElasticPane;\n        var ScrollViewContent = kendo.Observable.extend({\n          init: function (element, pane, options) {\n            var that = this;\n            kendo.Observable.fn.init.call(this);\n            that.element = element;\n            that.pane = pane;\n\n            that._getPages();\n\n            this.page = 0;\n            this.pageSize = options.pageSize || 1;\n            this.contentHeight = options.contentHeight;\n            this.enablePager = options.enablePager;\n            this.pagerOverlay = options.pagerOverlay;\n          },\n          scrollTo: function (page, instant) {\n            this.page = page;\n            this.pane.transitionTo(-page * this.pane.size().width, Transition.easeOutExpo, instant);\n          },\n          paneMoved: function (swipeType, bounce, callback,\n          /*internal*/\n          instant) {\n            var that = this,\n                pane = that.pane,\n                width = pane.size().width * that.pageSize,\n                approx = round,\n                ease = bounce ? Transition.easeOutBack : Transition.easeOutExpo,\n                snap,\n                nextPage;\n\n            if (swipeType === LEFT_SWIPE) {\n              approx = ceil;\n            } else if (swipeType === RIGHT_SWIPE) {\n              approx = floor;\n            }\n\n            nextPage = approx(pane.offset() / width);\n            snap = max(that.minSnap, min(-nextPage * width, that.maxSnap));\n\n            if (nextPage != that.page) {\n              if (callback && callback({\n                currentPage: that.page,\n                nextPage: nextPage\n              })) {\n                snap = -that.page * pane.size().width;\n              }\n            }\n\n            pane.transitionTo(snap, ease, instant);\n          },\n          updatePage: function () {\n            var pane = this.pane,\n                page = round(pane.offset() / pane.size().width);\n\n            if (page != this.page) {\n              this.page = page;\n              return true;\n            }\n\n            return false;\n          },\n          forcePageUpdate: function () {\n            return this.updatePage();\n          },\n          resizeTo: function (size) {\n            var pane = this.pane,\n                width = size.width;\n            this.pageElements.width(width);\n\n            if (this.contentHeight === \"100%\") {\n              var containerHeight = this.element.parent().height();\n\n              if (this.enablePager === true) {\n                var pager = this.element.parent().find(\"ol.km-pages\");\n\n                if (!this.pagerOverlay && pager.length) {\n                  containerHeight -= kendo._outerHeight(pager, true);\n                }\n              }\n\n              this.element.css(\"height\", containerHeight);\n              this.pageElements.css(\"height\", containerHeight);\n            } // re-read pane dimension after the pageElements have been resized.\n\n\n            pane.updateDimension();\n\n            if (!this._paged) {\n              this.page = floor(pane.offset() / width);\n            }\n\n            this.scrollTo(this.page, true);\n            this.pageCount = ceil(pane.total() / width);\n            this.minSnap = -(this.pageCount - 1) * width;\n            this.maxSnap = 0;\n          },\n          _getPages: function () {\n            this.pageElements = this.element.find(kendo.roleSelector(\"page\"));\n            this._paged = this.pageElements.length > 0;\n          }\n        });\n        kendo.mobile.ui.ScrollViewContent = ScrollViewContent;\n        var VirtualScrollViewContent = kendo.Observable.extend({\n          init: function (element, pane, options) {\n            var that = this;\n            kendo.Observable.fn.init.call(this);\n            that.element = element;\n            that.pane = pane;\n            that.options = options;\n\n            that._templates();\n\n            that.page = options.page || 0;\n            that.pages = [];\n\n            that._initPages();\n\n            that.resizeTo(that.pane.size());\n            that.pane.dimension.forceEnabled();\n          },\n          setDataSource: function (dataSource) {\n            this.dataSource = DataSource.create(dataSource);\n\n            this._buffer();\n\n            this._pendingPageRefresh = false;\n            this._pendingWidgetRefresh = false;\n          },\n          _viewShow: function () {\n            var that = this;\n\n            if (that._pendingWidgetRefresh) {\n              setTimeout(function () {\n                that._resetPages();\n              }, 0);\n              that._pendingWidgetRefresh = false;\n            }\n          },\n          _buffer: function () {\n            var itemsPerPage = this.options.itemsPerPage;\n\n            if (this.buffer) {\n              this.buffer.destroy();\n            }\n\n            if (itemsPerPage > 1) {\n              this.buffer = new BatchBuffer(this.dataSource, itemsPerPage);\n            } else {\n              this.buffer = new Buffer(this.dataSource, itemsPerPage * 3);\n            }\n\n            this._resizeProxy = this._onResize.bind(this);\n            this._resetProxy = this._onReset.bind(this);\n            this._endReachedProxy = this._onEndReached.bind(this);\n            this.buffer.bind({\n              \"resize\": this._resizeProxy,\n              \"reset\": this._resetProxy,\n              \"endreached\": this._endReachedProxy\n            });\n          },\n          _templates: function () {\n            var template = this.options.template,\n                emptyTemplate = this.options.emptyTemplate,\n                templateProxy = {},\n                emptyTemplateProxy = {};\n\n            if (typeof template === FUNCTION) {\n              templateProxy.template = template;\n              template = \"#=this.template(data)#\";\n            }\n\n            this.template = kendo.template(template).bind(templateProxy);\n\n            if (typeof emptyTemplate === FUNCTION) {\n              emptyTemplateProxy.emptyTemplate = emptyTemplate;\n              emptyTemplate = \"#=this.emptyTemplate(data)#\";\n            }\n\n            this.emptyTemplate = kendo.template(emptyTemplate).bind(emptyTemplateProxy);\n          },\n          _initPages: function () {\n            var pages = this.pages,\n                element = this.element,\n                page;\n\n            for (var i = 0; i < VIRTUAL_PAGE_COUNT; i++) {\n              page = new Page(element);\n              pages.push(page);\n            }\n\n            this.pane.updateDimension();\n          },\n          resizeTo: function (size) {\n            var pages = this.pages,\n                pane = this.pane;\n\n            for (var i = 0; i < pages.length; i++) {\n              pages[i].setWidth(size.width);\n            }\n\n            if (this.options.contentHeight === \"auto\") {\n              this.element.css(\"height\", this.pages[1].element.height());\n            } else if (this.options.contentHeight === \"100%\") {\n              var containerHeight = this.element.parent().height();\n\n              if (this.options.enablePager === true) {\n                var pager = this.element.parent().find(\"ol.km-pages\");\n\n                if (!this.options.pagerOverlay && pager.length) {\n                  containerHeight -= kendo._outerHeight(pager, true);\n                }\n              }\n\n              this.element.css(\"height\", containerHeight);\n              pages[0].element.css(\"height\", containerHeight);\n              pages[1].element.css(\"height\", containerHeight);\n              pages[2].element.css(\"height\", containerHeight);\n            }\n\n            pane.updateDimension();\n\n            this._repositionPages();\n\n            this.width = size.width;\n          },\n          scrollTo: function (page) {\n            var buffer = this.buffer,\n                dataItem;\n            buffer.syncDataSource();\n            dataItem = buffer.at(page);\n\n            if (!dataItem) {\n              return;\n            }\n\n            this._updatePagesContent(page);\n\n            this.page = page;\n          },\n          paneMoved: function (swipeType, bounce, callback,\n          /*internal*/\n          instant) {\n            var that = this,\n                pane = that.pane,\n                width = pane.size().width,\n                offset = pane.offset(),\n                thresholdPassed = Math.abs(offset) >= width / 3,\n                ease = bounce ? kendo.effects.Transition.easeOutBack : kendo.effects.Transition.easeOutExpo,\n                isEndReached = that.page + 2 > that.buffer.total(),\n                nextPage,\n                delta = 0;\n\n            if (swipeType === RIGHT_SWIPE) {\n              if (that.page !== 0) {\n                delta = -1; //backward\n              }\n            } else if (swipeType === LEFT_SWIPE && !isEndReached) {\n              delta = 1; //forward\n            } else if (offset > 0 && thresholdPassed && !isEndReached) {\n              delta = 1; //forward\n            } else if (offset < 0 && thresholdPassed) {\n              if (that.page !== 0) {\n                delta = -1; //backward\n              }\n            }\n\n            nextPage = that.page;\n\n            if (delta) {\n              nextPage = delta > 0 ? nextPage + 1 : nextPage - 1;\n            }\n\n            if (callback && callback({\n              currentPage: that.page,\n              nextPage: nextPage\n            })) {\n              delta = 0;\n            }\n\n            if (delta === 0) {\n              that._cancelMove(ease, instant);\n            } else if (delta === -1) {\n              that._moveBackward(instant);\n            } else if (delta === 1) {\n              that._moveForward(instant);\n            }\n          },\n          updatePage: function () {\n            var pages = this.pages;\n\n            if (this.pane.offset() === 0) {\n              return false;\n            }\n\n            if (this.pane.offset() > 0) {\n              pages.push(this.pages.shift()); //forward\n\n              this.page++;\n              this.setPageContent(pages[2], this.page + 1);\n            } else {\n              pages.unshift(this.pages.pop()); //back\n\n              this.page--;\n              this.setPageContent(pages[0], this.page - 1);\n            }\n\n            this._repositionPages();\n\n            this._resetMovable();\n\n            return true;\n          },\n          forcePageUpdate: function () {\n            var offset = this.pane.offset(),\n                threshold = this.pane.size().width * 3 / 4;\n\n            if (abs(offset) > threshold) {\n              return this.updatePage();\n            }\n\n            return false;\n          },\n          _resetMovable: function () {\n            this.pane.moveTo(0);\n          },\n          _moveForward: function (instant) {\n            this.pane.transitionTo(-this.width, kendo.effects.Transition.easeOutExpo, instant);\n          },\n          _moveBackward: function (instant) {\n            this.pane.transitionTo(this.width, kendo.effects.Transition.easeOutExpo, instant);\n          },\n          _cancelMove: function (ease,\n          /*internal*/\n          instant) {\n            this.pane.transitionTo(0, ease, instant);\n          },\n          _resetPages: function () {\n            this.page = this.options.page || 0;\n\n            this._updatePagesContent(this.page);\n\n            this._repositionPages();\n\n            this.trigger(\"reset\");\n          },\n          _onResize: function () {\n            this.pageCount = ceil(this.dataSource.total() / this.options.itemsPerPage);\n\n            if (this._pendingPageRefresh) {\n              this._updatePagesContent(this.page);\n\n              this._pendingPageRefresh = false;\n            }\n\n            this.trigger(\"resize\");\n          },\n          _onReset: function () {\n            this.pageCount = ceil(this.dataSource.total() / this.options.itemsPerPage);\n\n            this._resetPages();\n          },\n          _onEndReached: function () {\n            this._pendingPageRefresh = true;\n          },\n          _repositionPages: function () {\n            var pages = this.pages;\n            pages[0].position(LEFT_PAGE);\n            pages[1].position(CETER_PAGE);\n            pages[2].position(RIGHT_PAGE);\n          },\n          _updatePagesContent: function (offset) {\n            var pages = this.pages,\n                currentPage = offset || 0;\n            this.setPageContent(pages[0], currentPage - 1);\n            this.setPageContent(pages[1], currentPage);\n            this.setPageContent(pages[2], currentPage + 1);\n          },\n          setPageContent: function (page, index) {\n            var buffer = this.buffer,\n                template = this.template,\n                emptyTemplate = this.emptyTemplate,\n                view = null;\n\n            if (index >= 0) {\n              view = buffer.at(index);\n\n              if (Array.isArray(view) && !view.length) {\n                view = null;\n              }\n            }\n\n            this.trigger(CLEANUP, {\n              item: page.element\n            });\n\n            if (view !== null) {\n              page.content(template(view));\n            } else {\n              page.content(emptyTemplate({}));\n            }\n\n            kendo.mobile.init(page.element);\n            this.trigger(ITEM_CHANGE, {\n              item: page.element,\n              data: view,\n              ns: kendo.mobile.ui\n            });\n          }\n        });\n        kendo.mobile.ui.VirtualScrollViewContent = VirtualScrollViewContent;\n        var Page = kendo.Class.extend({\n          init: function (container) {\n            this.element = $(\"<div class='\" + className(VIRTUAL_PAGE_CLASS) + \"'></div>\");\n            this.width = container.width();\n            this.element.width(this.width);\n            container.append(this.element);\n          },\n          content: function (theContent) {\n            this.element.html(theContent);\n          },\n          position: function (position) {\n            //position can be -1, 0, 1\n            this.element.css(\"transform\", \"translate3d(\" + this.width * position + \"px, 0, 0)\");\n          },\n          setWidth: function (width) {\n            this.width = width;\n            this.element.width(width);\n          }\n        });\n        kendo.mobile.ui.VirtualPage = Page;\n        var ScrollView = Widget.extend({\n          init: function (element, options) {\n            var that = this;\n            Widget.fn.init.call(that, element, options);\n            options = that.options;\n            element = that.element;\n            kendo.stripWhitespace(element[0]);\n            element.wrapInner(\"<div/>\").addClass(\"k-widget \" + className(\"scrollview\"));\n\n            if (this.options.enablePager) {\n              this.pager = new Pager(this);\n\n              if (this.options.pagerOverlay) {\n                element.addClass(className(\"scrollview-overlay\"));\n              }\n            }\n\n            that.inner = element.children().first();\n            that.page = 0;\n            that.inner.css(\"height\", options.contentHeight);\n            that.pane = new ElasticPane(that.inner, {\n              duration: this.options.duration,\n              transitionEnd: this._transitionEnd.bind(this),\n              dragStart: this._dragStart.bind(this),\n              dragEnd: this._dragEnd.bind(this),\n              change: this[REFRESH].bind(this)\n            });\n            that.bind(\"resize\", function () {\n              that.pane.refresh();\n            });\n            that.page = options.page;\n            var empty = this.inner.children().length === 0;\n            var content = empty ? new VirtualScrollViewContent(that.inner, that.pane, options) : new ScrollViewContent(that.inner, that.pane, options);\n            content.page = that.page;\n            content.bind(\"reset\", function () {\n              this._pendingPageRefresh = false;\n\n              that._syncWithContent();\n\n              that.trigger(REFRESH, {\n                pageCount: content.pageCount,\n                page: content.page\n              });\n            });\n            content.bind(\"resize\", function () {\n              that.trigger(REFRESH, {\n                pageCount: content.pageCount,\n                page: content.page\n              });\n            });\n            content.bind(ITEM_CHANGE, function (e) {\n              that.trigger(ITEM_CHANGE, e);\n              that.angular(\"compile\", function () {\n                return {\n                  elements: e.item,\n                  data: [{\n                    dataItem: e.data\n                  }]\n                };\n              });\n            });\n            content.bind(CLEANUP, function (e) {\n              that.angular(\"cleanup\", function () {\n                return {\n                  elements: e.item\n                };\n              });\n            });\n            that._content = content;\n            that.setDataSource(options.dataSource);\n            var mobileContainer = that.container();\n\n            if (mobileContainer.nullObject) {\n              that.viewInit();\n              that.viewShow();\n            } else {\n              mobileContainer.bind(\"show\", this.viewShow.bind(this)).bind(\"init\", this.viewInit.bind(this));\n            }\n          },\n          options: {\n            name: \"ScrollView\",\n            page: 0,\n            duration: 400,\n            velocityThreshold: 0.8,\n            contentHeight: \"auto\",\n            pageSize: 1,\n            itemsPerPage: 1,\n            bounceVelocityThreshold: 1.6,\n            enablePager: true,\n            pagerOverlay: false,\n            autoBind: true,\n            template: \"\",\n            emptyTemplate: \"\"\n          },\n          events: [CHANGING, CHANGE, REFRESH],\n          destroy: function () {\n            Widget.fn.destroy.call(this);\n            kendo.destroy(this.element);\n          },\n          viewInit: function () {\n            if (this.options.autoBind) {\n              this._content.scrollTo(this._content.page, true);\n            }\n          },\n          viewShow: function () {\n            this.pane.refresh();\n          },\n          refresh: function () {\n            var content = this._content;\n            content.resizeTo(this.pane.size());\n            this.page = content.page;\n            this.trigger(REFRESH, {\n              pageCount: content.pageCount,\n              page: content.page\n            });\n          },\n          content: function (html) {\n            this.element.children().first().html(html);\n\n            this._content._getPages();\n\n            this.pane.refresh();\n          },\n          value: function (item) {\n            var dataSource = this.dataSource;\n\n            if (item) {\n              this.scrollTo(dataSource.indexOf(item), true);\n            } else {\n              return dataSource.at(this.page);\n            }\n          },\n          scrollTo: function (page, instant) {\n            this._content.scrollTo(page, instant);\n\n            this._syncWithContent();\n          },\n          prev: function () {\n            var that = this,\n                prevPage = that.page - 1;\n\n            if (that._content instanceof VirtualScrollViewContent) {\n              that._content.paneMoved(RIGHT_SWIPE, undefined, function (eventData) {\n                return that.trigger(CHANGING, eventData);\n              });\n            } else if (prevPage > -1) {\n              that.scrollTo(prevPage);\n            }\n          },\n          next: function () {\n            var that = this,\n                nextPage = that.page + 1;\n\n            if (that._content instanceof VirtualScrollViewContent) {\n              that._content.paneMoved(LEFT_SWIPE, undefined, function (eventData) {\n                return that.trigger(CHANGING, eventData);\n              });\n            } else if (nextPage < that._content.pageCount) {\n              that.scrollTo(nextPage);\n            }\n          },\n          setDataSource: function (dataSource) {\n            if (!(this._content instanceof VirtualScrollViewContent)) {\n              return;\n            } // the scrollview should have a ready datasource for MVVM to function properly. But an empty datasource should not empty the element\n\n\n            var emptyDataSource = !dataSource;\n            this.dataSource = DataSource.create(dataSource);\n\n            this._content.setDataSource(this.dataSource);\n\n            if (this.options.autoBind && !emptyDataSource) {\n              // this.items().remove();\n              this.dataSource.fetch();\n            }\n          },\n          items: function () {\n            return this.element.find(\".km-\" + VIRTUAL_PAGE_CLASS);\n          },\n          _syncWithContent: function () {\n            var pages = this._content.pages,\n                buffer = this._content.buffer,\n                data,\n                element;\n            this.page = this._content.page;\n            data = buffer ? buffer.at(this.page) : undefined;\n\n            if (!(data instanceof Array)) {\n              data = [data];\n            }\n\n            element = pages ? pages[1].element : undefined;\n            this.trigger(CHANGE, {\n              page: this.page,\n              element: element,\n              data: data\n            });\n          },\n          _dragStart: function () {\n            if (this._content.forcePageUpdate()) {\n              this._syncWithContent();\n            }\n          },\n          _dragEnd: function (e) {\n            var that = this,\n                velocity = e.x.velocity,\n                velocityThreshold = this.options.velocityThreshold,\n                swipeType = NUDGE,\n                bounce = abs(velocity) > this.options.bounceVelocityThreshold;\n\n            if (velocity > velocityThreshold) {\n              swipeType = RIGHT_SWIPE;\n            } else if (velocity < -velocityThreshold) {\n              swipeType = LEFT_SWIPE;\n            }\n\n            this._content.paneMoved(swipeType, bounce, function (eventData) {\n              return that.trigger(CHANGING, eventData);\n            });\n          },\n          _transitionEnd: function () {\n            if (this._content.updatePage()) {\n              this._syncWithContent();\n            }\n          }\n        });\n        ui.plugin(ScrollView);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}