{"ast":null,"code":"import { Encoding } from './encoding';\nconst extend = Object.assign;\nexport class Ean13 extends Encoding {\n  initProperties() {\n    super.initProperties();\n    extend(this, {\n      name: \"EAN 13\",\n      keyTable: ['000000', '001011', '001101', '001110', '010011', '011001', '011100', '010101', '010110', '011010'],\n      characterMap: {\n        digits: [[3, 2, 1, 1], [2, 2, 2, 1], [2, 1, 2, 2], [1, 4, 1, 1], [1, 1, 3, 2], [1, 2, 3, 1], [1, 1, 1, 4], [1, 3, 1, 2], [1, 2, 1, 3], [3, 1, 1, 2]],\n        start: [1, 1, 1],\n        middle: [1, 1, 1, 1, 1]\n      }\n    });\n  }\n\n  initValue(value, width, height) {\n    const valueAsString = String(value);\n\n    if (valueAsString.length !== 12 || /\\D/.test(valueAsString)) {\n      throw new Error('The value of the \"EAN13\" encoding should be 12 symbols');\n    }\n\n    this.pattern = [];\n    this.options.height = height;\n    this.baseUnit = width / (95 + this.quietZoneLength);\n    this.value = valueAsString;\n    this.checksum = this.calculateChecksum();\n    this.leftKey = valueAsString[0];\n    this.leftPart = valueAsString.substr(1, 6);\n    this.rightPart = valueAsString.substr(7) + this.checksum;\n  }\n\n  addData() {\n    this.addPieces(this.characterMap.start);\n    this.addSide(this.leftPart, this.leftKey);\n    this.addPieces(this.characterMap.middle);\n    this.addSide(this.rightPart);\n    this.addPieces(this.characterMap.start);\n  }\n\n  addSide(leftPart, key) {\n    for (let i = 0; i < leftPart.length; i++) {\n      if (key && parseInt(this.keyTable[key].charAt(i), 10)) {\n        this.addPieces(Array.prototype.slice.call(this.characterMap.digits[leftPart.charAt(i)]).reverse(), true);\n      } else {\n        this.addPieces(this.characterMap.digits[leftPart.charAt(i)], true);\n      }\n    }\n  }\n\n  addPieces(arrToAdd, limitedHeight) {\n    for (let i = 0; i < arrToAdd.length; i++) {\n      if (limitedHeight) {\n        this.pattern.push({\n          y1: 0,\n          y2: this.options.height * 0.95,\n          width: arrToAdd[i]\n        });\n      } else {\n        this.pattern.push(arrToAdd[i]);\n      }\n    }\n  }\n\n  calculateChecksum() {\n    let odd = 0,\n        even = 0,\n        value = this.value.split(\"\").reverse().join(\"\");\n\n    for (let i = 0; i < value.length; i++) {\n      if (i % 2) {\n        even += parseInt(value.charAt(i), 10);\n      } else {\n        odd += parseInt(value.charAt(i), 10);\n      }\n    }\n\n    let checksum = (10 - (3 * odd + even) % 10) % 10;\n    return checksum;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}