{"ast":null,"code":"import { isFunction, isArray } from '../common';\n/* eslint-disable arrow-body-style */\n\nconst defineProperty = Object.defineProperty;\nexport const extend = Object.assign;\nexport let convertToHtml = html => {\n  const div = document.createElement(\"div\");\n  div.innerHTML = html;\n  return div.firstChild;\n};\nexport let appendHtml = (html, element) => {\n  const div = document.createElement('div');\n  div.innerHTML = html; // use childNodes instead of children\n  // to cover text nodes as well\n\n  while (div.childNodes.length > 0) {\n    element.appendChild(div.childNodes[0]);\n  }\n};\nexport let removeChildren = element => {\n  while (element.firstChild) {\n    element.removeChild(element.firstChild);\n  }\n};\nexport let prepend = (element, originElement) => {\n  originElement.insertBefore(element, originElement.firstChild);\n};\nexport let wrapInner = (parent, wrapper) => {\n  parent.appendChild(wrapper);\n\n  while (parent.firstChild !== wrapper) {\n    wrapper.appendChild(parent.firstChild);\n  }\n};\nexport let toHyphens = str => {\n  const result = str.replace(/([a-z][A-Z])/g, function (g) {\n    return g.charAt(0) + '-' + g.charAt(1).toLowerCase();\n  });\n  return result;\n};\nexport let toPixels = value => {\n  let result;\n\n  if (value && String(value).endsWith(\"px\")) {\n    result = value;\n  } else {\n    result = String(value) + \"px\";\n  }\n\n  return result;\n};\n\nconst detectOS = ua => {\n  let os = false,\n      minorVersion,\n      match = [],\n      // notAndroidPhone = !/mobile safari/i.test(ua),\n  agentRxs = {\n    wp: /(Windows Phone(?: OS)?)\\s(\\d+)\\.(\\d+(\\.\\d+)?)/,\n    fire: /(Silk)\\/(\\d+)\\.(\\d+(\\.\\d+)?)/,\n    android: /(Android|Android.*(?:Opera|Firefox).*?\\/)\\s*(\\d+)\\.?(\\d+(\\.\\d+)?)?/,\n    iphone: /(iPhone|iPod).*OS\\s+(\\d+)[\\._]([\\d\\._]+)/,\n    ipad: /(iPad).*OS\\s+(\\d+)[\\._]([\\d_]+)/,\n    meego: /(MeeGo).+NokiaBrowser\\/(\\d+)\\.([\\d\\._]+)/,\n    webos: /(webOS)\\/(\\d+)\\.(\\d+(\\.\\d+)?)/,\n    blackberry: /(BlackBerry|BB10).*?Version\\/(\\d+)\\.(\\d+(\\.\\d+)?)/,\n    playbook: /(PlayBook).*?Tablet\\s*OS\\s*(\\d+)\\.(\\d+(\\.\\d+)?)/,\n    windows: /(MSIE)\\s+(\\d+)\\.(\\d+(\\.\\d+)?)/,\n    tizen: /(tizen).*?Version\\/(\\d+)\\.(\\d+(\\.\\d+)?)/i,\n    sailfish: /(sailfish).*rv:(\\d+)\\.(\\d+(\\.\\d+)?).*firefox/i,\n    ffos: /(Mobile).*rv:(\\d+)\\.(\\d+(\\.\\d+)?).*Firefox/\n  },\n      osRxs = {\n    ios: /^i(phone|pad|pod)$/i,\n    android: /^android|fire$/i,\n    blackberry: /^blackberry|playbook/i,\n    windows: /windows/,\n    wp: /wp/,\n    flat: /sailfish|ffos|tizen/i,\n    meego: /meego/\n  },\n      formFactorRxs = {\n    tablet: /playbook|ipad|fire/i\n  },\n      browserRxs = {\n    omini: /Opera\\sMini/i,\n    omobile: /Opera\\sMobi/i,\n    firefox: /Firefox|Fennec/i,\n    mobilesafari: /version\\/.*safari/i,\n    ie: /MSIE|Windows\\sPhone/i,\n    chrome: /chrome|crios/i,\n    webkit: /webkit/i\n  };\n\n  for (let agent in agentRxs) {\n    if (agentRxs.hasOwnProperty(agent)) {\n      match = ua.match(agentRxs[agent]);\n\n      if (match) {\n        if (agent === \"windows\" && \"plugins\" in navigator) {\n          return false;\n        } // Break if not Metro/Mobile Windows\n\n\n        os = {};\n        os.device = agent;\n        os.tablet = testRegex(agent, formFactorRxs, false);\n        os.browser = testRegex(ua, browserRxs, \"default\");\n        os.name = testRegex(agent, osRxs);\n        os[os.name] = true;\n        os.majorVersion = match[2];\n        os.minorVersion = (match[3] || \"0\").replace(\"_\", \".\");\n        minorVersion = os.minorVersion.replace(\".\", \"\").substr(0, 2);\n        os.flatVersion = os.majorVersion + minorVersion + new Array(3 - (minorVersion.length < 3 ? minorVersion.length : 2)).join(\"0\");\n        break;\n      }\n    }\n  }\n\n  return os;\n};\n\nfunction testRegex(agent, regexes, dflt) {\n  for (let regex in regexes) {\n    if (regexes.hasOwnProperty(regex) && regexes[regex].test(agent)) {\n      return regex;\n    }\n  }\n\n  return dflt !== undefined ? dflt : agent;\n}\n\nexport let hasNativeScrolling = userAgent => {\n  const os = detectOS(userAgent);\n  return os.ios || os.android;\n};\n\nconst detectBrowser = userAgent => {\n  let browser = false,\n      match = [],\n      browserRxs = {\n    edge: /(edge)[ \\/]([\\w.]+)/i,\n    webkit: /(chrome|crios)[ \\/]([\\w.]+)/i,\n    safari: /(webkit)[ \\/]([\\w.]+)/i,\n    opera: /(opera)(?:.*version|)[ \\/]([\\w.]+)/i,\n    msie: /(msie\\s|trident.*? rv:)([\\w.]+)/i,\n    mozilla: /(mozilla)(?:.*? rv:([\\w.]+)|)/i\n  };\n\n  for (let agent in browserRxs) {\n    if (browserRxs.hasOwnProperty(agent)) {\n      match = userAgent.match(browserRxs[agent]);\n\n      if (match) {\n        browser = {};\n        browser[agent] = true;\n        browser[match[1].toLowerCase().split(\" \")[0].split(\"/\")[0]] = true;\n        browser.version = parseInt(document.documentMode || match[2], 10);\n        break;\n      }\n    }\n  }\n\n  return browser;\n};\n\nexport let getEventMap = () => {\n  let eventMap = {\n    down: \"touchstart mousedown\",\n    move: \"mousemove touchmove\",\n    up: \"mouseup touchend touchcancel\",\n    cancel: \"mouseleave touchcancel\"\n  };\n  const support = getSupportedFeatures();\n\n  if (support.touch && (support.mobileOS.ios || support.mobileOS.android)) {\n    eventMap = {\n      down: \"touchstart\",\n      move: \"touchmove\",\n      up: \"touchend touchcancel\",\n      cancel: \"touchcancel\"\n    };\n  } else if (support.pointers) {\n    eventMap = {\n      down: \"pointerdown\",\n      move: \"pointermove\",\n      up: \"pointerup\",\n      cancel: \"pointercancel pointerleave\"\n    };\n  } else if (support.msPointers) {\n    eventMap = {\n      down: \"MSPointerDown\",\n      move: \"MSPointerMove\",\n      up: \"MSPointerUp\",\n      cancel: \"MSPointerCancel MSPointerLeave\"\n    };\n  }\n\n  return eventMap;\n};\nexport const getSupportedFeatures = () => {\n  const os = detectOS(navigator.userAgent);\n  const browser = detectBrowser(navigator.userAgent);\n  let chrome = browser.chrome,\n      mobileChrome = browser.crios,\n      mozilla = browser.mozilla,\n      safari = browser.safari;\n  const support = {};\n  support.mobileOS = os;\n  support.touch = \"ontouchstart\" in window;\n  support.pointers = !chrome && !mobileChrome && !mozilla && !safari && window.PointerEvent;\n  support.msPointers = !chrome && window.MSPointerEvent;\n  support.mouseAndTouchPresent = support.touch && !(support.mobileOS.ios || support.mobileOS.android);\n  support.eventCapture = document.documentElement.addEventListener;\n  let table = document.createElement(\"table\");\n  let transitions = support.transitions = false,\n      transforms = support.transforms = false;\n  const STRING = \"string\";\n  [\"Moz\", \"webkit\", \"O\", \"ms\"].forEach(function (prefix) {\n    let hasTransitions = typeof table.style[prefix + \"Transition\"] === STRING;\n\n    if (hasTransitions || typeof table.style[prefix + \"Transform\"] === STRING) {\n      let lowPrefix = prefix.toLowerCase();\n      transforms = {\n        css: lowPrefix !== \"ms\" ? \"-\" + lowPrefix + \"-\" : \"\",\n        prefix: prefix,\n        event: lowPrefix === \"o\" || lowPrefix === \"webkit\" ? lowPrefix : \"\"\n      };\n\n      if (hasTransitions) {\n        transitions = transforms;\n        transitions.event = transitions.event ? transitions.event + \"TransitionEnd\" : \"transitionend\";\n      }\n\n      return false;\n    }\n  });\n  table = null;\n  support.transforms = transforms;\n  support.transitions = transitions;\n\n  support.delayedClick = function () {\n    // only the mobile devices with touch events do this.\n    if (support.touch) {\n      // All iOS devices so far (by the time I am writing this, iOS 9.0.2 is the latest),\n      // delay their click events.\n      if (support.mobileOS.ios) {\n        return true;\n      }\n\n      if (support.mobileOS.android) {\n        if (!support.browser.chrome) {\n          // older webkits and webviews delay the click\n          return true;\n        } // from here on, we deal with Chrome on Android.\n\n\n        if (support.browser.version < 32) {\n          return false;\n        } // Chrome 32+ does conditional fast clicks if the view port is not user scalable.\n\n\n        const meta = document.querySelector(\"meta[name=viewport]\");\n        const contentAttr = meta ? meta.getAttribute(\"content\") : \"\";\n        return !contentAttr.match(/user-scalable=no/i);\n      }\n    }\n\n    return false;\n  };\n\n  return support;\n};\nexport const ownsElement = (parent, element) => {\n  if (!element) {\n    return false;\n  }\n\n  let node = element.parentNode;\n\n  while (node !== null) {\n    if (node === parent) {\n      return true;\n    }\n\n    node = node.parentNode;\n  }\n\n  return false;\n};\nexport const contains = (parent, element) => {\n  return parent === element || ownsElement(parent, element);\n};\nexport const proxy = (method, context) => {\n  return method.bind(context);\n};\n\nfunction isString(value) {\n  return typeof value === \"string\";\n}\n\nexport const on = (element, events, filter, handler, useCapture) => {\n  addEventListeners(element, events, filter, handler, useCapture);\n};\nexport const addEventListeners = (element, events, filter, handler, useCapture) => {\n  const eventNames = isArray(events) ? events : (events || \"\").split(\" \");\n  eventNames.forEach(function (eventName) {\n    addEventListener(element, eventName, filter, handler, useCapture);\n  });\n};\nexport const addEventListener = (element, event, filter, handler, useCapture) => {\n  let eventHandler = handler;\n  let eventFilter;\n\n  if (filter && isFunction(filter) && !handler) {\n    eventHandler = filter;\n  } else if (filter && isString(filter) && isFunction(eventHandler)) {\n    eventFilter = filter;\n  }\n\n  element.addEventListener(event, function (e) {\n    const closestMatchingTarget = e.target ? e.target.closest(eventFilter) : null;\n\n    if (!eventFilter || eventFilter && e.target && closestMatchingTarget) {\n      const currentTarget = eventFilter ? closestMatchingTarget : e.currentTarget; // reassign the property as it is a getters only\n\n      defineProperty(e, \"currentTarget\", {\n        value: currentTarget\n      }); // keep a reference to the top-level target\n\n      defineProperty(e, \"delegateTarget\", {\n        value: element\n      });\n      eventHandler(e);\n    }\n  }, Boolean(useCapture));\n};\nexport const off = (element, events, filter, handler, useCapture) => {\n  removeEventListeners(element, events, filter, handler, useCapture);\n};\nexport const removeEventListeners = (element, events, handler, useCapture) => {\n  const eventNames = isArray(events) ? events : (events || \"\").split(\" \");\n  eventNames.forEach(function (eventName) {\n    removeEventListener(element, eventName, handler, useCapture);\n  });\n};\nexport const removeEventListener = (element, event, handler, useCapture) => {\n  element.removeEventListener(event, handler, Boolean(useCapture));\n};\nexport const applyEventMap = events => {\n  const eventMap = getEventMap(navigator.userAgent);\n\n  function queryEventMap(e) {\n    return eventMap[e] || e;\n  }\n\n  const eventRegEx = /([^ ]+)/g;\n  const appliedEvents = events.replace(eventRegEx, queryEventMap);\n  return appliedEvents;\n};\nexport const setDefaultEvents = (type, events) => {\n  const proto = type.prototype;\n\n  if (proto.events) {\n    events.forEach(event => {\n      if (proto.events.indexOf(event) < 0) {\n        proto.events.push(event);\n      }\n    });\n  } else {\n    proto.events = events;\n  }\n};\nexport const wheelDeltaY = jQueryEvent => {\n  const e = jQueryEvent.originalEvent || jQueryEvent;\n  const deltaY = e.wheelDeltaY;\n  let delta;\n\n  if (e.wheelDelta) {\n    // Webkit and IE\n    if (deltaY === undefined || deltaY) {\n      // IE does not have deltaY, thus always scroll (horizontal scrolling is treated as vertical)\n      delta = e.wheelDelta;\n    }\n  } else if (e.detail && e.axis === e.VERTICAL_AXIS) {\n    // Firefox and Opera\n    delta = -e.detail * 10;\n  }\n\n  return delta;\n};\nexport const guid = () => {\n  let id = \"\";\n  let i;\n  let random;\n\n  for (i = 0; i < 32; i++) {\n    random = Math.random() * 16 | 0;\n\n    if (i === 8 || i === 12 || i === 16 || i === 20) {\n      id += \"-\";\n    }\n\n    id += (i === 12 ? 4 : i === 16 ? random & 3 | 8 : random).toString(16); // eslint-disable-line no-nested-ternary\n  }\n\n  return id;\n};\nexport const now = () => {\n  return Number(new Date());\n};\nexport const noop = () => {};\nexport const renderPos = pos => {\n  let result = [];\n\n  if (pos) {\n    let parts = toHyphens(pos).split(\"-\");\n\n    for (let i = 0; i < parts.length; i++) {\n      result.push(\"k-pos-\" + parts[i]);\n    }\n  }\n\n  return result.join(\" \");\n};\n/* eslint-enable arrow-body-style */","map":null,"metadata":{},"sourceType":"module"}