{"ast":null,"code":"import { Inject } from '../Application';\nimport { Constants } from '../Contract';\nimport { ClientClose } from './Command';\n\nvar View = function () {\n  function View(model, inject) {\n    if (inject === void 0) {\n      inject = null;\n    }\n\n    var myInject = inject || Inject.Instance;\n    this.model = model;\n    this.model['view'] = this;\n    this.invoker = myInject.resolve(Constants.Invoker);\n    this.bindings();\n    this.timersToCleanup = new Array();\n  }\n\n  Object.defineProperty(View.prototype, \"name\", {\n    get: function () {\n      return this._name;\n    },\n    set: function (value) {\n      this._name = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  View.prototype.close = function () {\n    this.cleanupTimers();\n    this.dispose();\n  };\n\n  View.prototype.requestClose = function () {\n    this.invoke(new ClientClose(this));\n  };\n\n  View.prototype.load = function () {\n    if (this.onLoad) {\n      this.onLoad(this, null);\n    }\n\n    this.render();\n\n    if (this.onPostLoad) {\n      this.onPostLoad(this, null);\n    }\n  };\n\n  View.prototype.bind = function (action, delegate) {\n    var _this = this;\n\n    this.model[action] = function (e) {\n      if (delegate) {\n        return delegate(_this, action, e);\n      }\n    };\n  };\n\n  View.prototype.invoke = function (command) {\n    this.invoker.invoke(command);\n  };\n\n  View.prototype.registerTimer = function (timerInfo) {\n    this.timersToCleanup.push(timerInfo);\n  };\n\n  View.prototype.cleanupTimers = function () {\n    this.timersToCleanup.forEach(function (timerInfo) {\n      if (timerInfo && timerInfo.clearTimer) {\n        timerInfo.clearTimer();\n      }\n    });\n  };\n\n  return View;\n}();\n\nexport { View }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9VSS9WaWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtCQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEMsT0FBTyxFQUFFLFNBQVMsRUFBcUMsTUFBTSxhQUFhLENBQUM7QUFFM0UsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUV4QztJQUVJLGNBQVksS0FBYSxFQUFFLE1BQXFCO1FBQXJCLHVCQUFBLEVBQUEsYUFBcUI7UUFDNUMsSUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDM0MsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDMUIsSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDaEIsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO0lBQ3ZDLENBQUM7SUFHRCxzQkFBSSxzQkFBSTthQUFSO1lBQ0ksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3RCLENBQUM7YUFDRCxVQUFTLEtBQWE7WUFDbEIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDdkIsQ0FBQzs7O09BSEE7SUFVRCxvQkFBSyxHQUFMO1FBQ0ksSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNuQixDQUFDO0lBRUQsMkJBQVksR0FBWjtRQUNJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQsbUJBQUksR0FBSjtRQUNJLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNiLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQzNCO1FBQ0QsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2QsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQy9CO0lBQ0wsQ0FBQztJQUVELG1CQUFJLEdBQUosVUFBSyxNQUFjLEVBQUUsUUFBNkQ7UUFBbEYsaUJBTUM7UUFMRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLFVBQUEsQ0FBQztZQUNsQixJQUFJLFFBQVEsRUFBRTtnQkFDVixPQUFPLFFBQVEsQ0FBQyxLQUFJLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ3BDO1FBQ0wsQ0FBQyxDQUFDO0lBQ04sQ0FBQztJQWtCRCxxQkFBTSxHQUFOLFVBQU8sT0FBaUI7UUFDcEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVELDRCQUFhLEdBQWIsVUFBYyxTQUFjO1FBQ3hCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFTyw0QkFBYSxHQUFyQjtRQUNJLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLFVBQUMsU0FBUztZQUNuQyxJQUFJLFNBQVMsSUFBSSxTQUFTLENBQUMsVUFBVSxFQUFFO2dCQUNuQyxTQUFTLENBQUMsVUFBVSxFQUFFLENBQUM7YUFDMUI7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFDTCxXQUFDO0FBQUQsQ0FBQyxBQWxGRCxJQWtGQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4qIENvcHlyaWdodCAoQykgTW9iaWxpemUuTmV0IDxpbmZvQG1vYmlsaXplLm5ldD4gLSBBbGwgUmlnaHRzIFJlc2VydmVkXHJcbipcclxuKiBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgTW9iaWxpemUgRnJhbWV3b3Jrcywgd2hpY2ggaXNcclxuKiBwcm9wcmlldGFyeSBhbmQgY29uZmlkZW50aWFsLlxyXG4qXHJcbiogTk9USUNFOiAgQWxsIGluZm9ybWF0aW9uIGNvbnRhaW5lZCBoZXJlaW4gaXMsIGFuZCByZW1haW5zXHJcbiogdGhlIHByb3BlcnR5IG9mIE1vYmlsaXplLk5ldCBDb3Jwb3JhdGlvbi5cclxuKiBUaGUgaW50ZWxsZWN0dWFsIGFuZCB0ZWNobmljYWwgY29uY2VwdHMgY29udGFpbmVkIGhlcmVpbiBhcmVcclxuKiBwcm9wcmlldGFyeSB0byBNb2JpbGl6ZS5OZXQgQ29ycG9yYXRpb24gYW5kIG1heSBiZSBjb3ZlcmVkXHJcbiogYnkgVS5TLiBQYXRlbnRzLCBhbmQgYXJlIHByb3RlY3RlZCBieSB0cmFkZSBzZWNyZXQgb3IgY29weXJpZ2h0IGxhdy5cclxuKiBEaXNzZW1pbmF0aW9uIG9mIHRoaXMgaW5mb3JtYXRpb24gb3IgcmVwcm9kdWN0aW9uIG9mIHRoaXMgbWF0ZXJpYWxcclxuKiBpcyBzdHJpY3RseSBmb3JiaWRkZW4gdW5sZXNzIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbiBpcyBvYnRhaW5lZFxyXG4qIGZyb20gTW9iaWxpemUuTmV0IENvcnBvcmF0aW9uLlxyXG4qXHJcbiogVGhpcyBmaWxlIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zIGRlZmluZWQgaW5cclxuKiBmaWxlICdMSUNFTlNFLnR4dCcsIHdoaWNoIGlzIHBhcnQgb2YgdGhpcyBzb3VyY2UgY29kZSBwYWNrYWdlLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuaW1wb3J0IHsgSW5qZWN0IH0gZnJvbSAnLi4vQXBwbGljYXRpb24nO1xyXG5pbXBvcnQgeyBDb25zdGFudHMsIElDb21tYW5kLCBJSW52b2tlciwgSU1vZGVsLCBJVmlldyB9IGZyb20gJy4uL0NvbnRyYWN0JztcclxuXHJcbmltcG9ydCB7IENsaWVudENsb3NlIH0gZnJvbSAnLi9Db21tYW5kJztcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBWaWV3IGltcGxlbWVudHMgSVZpZXcge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG1vZGVsOiBJTW9kZWwsIGluamVjdDogSW5qZWN0ID0gbnVsbCkge1xyXG4gICAgICAgIGNvbnN0IG15SW5qZWN0ID0gaW5qZWN0IHx8IEluamVjdC5JbnN0YW5jZTtcclxuICAgICAgICB0aGlzLm1vZGVsID0gbW9kZWw7XHJcbiAgICAgICAgdGhpcy5tb2RlbFsndmlldyddID0gdGhpcztcclxuICAgICAgICB0aGlzLmludm9rZXIgPSBteUluamVjdC5yZXNvbHZlKENvbnN0YW50cy5JbnZva2VyKTtcclxuICAgICAgICB0aGlzLmJpbmRpbmdzKCk7XHJcbiAgICAgICAgdGhpcy50aW1lcnNUb0NsZWFudXAgPSBuZXcgQXJyYXkoKTtcclxuICAgIH1cclxuXHJcbiAgICBfbmFtZTogc3RyaW5nO1xyXG4gICAgZ2V0IG5hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbmFtZTtcclxuICAgIH1cclxuICAgIHNldCBuYW1lKHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLl9uYW1lID0gdmFsdWU7XHJcbiAgICB9XHJcbiAgICBtb2RlbDogSU1vZGVsO1xyXG4gICAgb25Mb2FkOiAoc2VuZGVyLCBldmVudHMpID0+IHZvaWQ7XHJcbiAgICBvblBvc3RMb2FkOiAoc2VuZGVyLCBldmVudHMpID0+IHZvaWQ7XHJcbiAgICBwcm90ZWN0ZWQgaW52b2tlcjogSUludm9rZXI7XHJcbiAgICBwcml2YXRlIHRpbWVyc1RvQ2xlYW51cDogQXJyYXk8YW55PjtcclxuXHJcbiAgICBjbG9zZSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmNsZWFudXBUaW1lcnMoKTtcclxuICAgICAgICB0aGlzLmRpc3Bvc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICByZXF1ZXN0Q2xvc2UoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5pbnZva2UobmV3IENsaWVudENsb3NlKHRoaXMpKTtcclxuICAgIH1cclxuXHJcbiAgICBsb2FkKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLm9uTG9hZCkge1xyXG4gICAgICAgICAgICB0aGlzLm9uTG9hZCh0aGlzLCBudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcclxuICAgICAgICBpZiAodGhpcy5vblBvc3RMb2FkKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25Qb3N0TG9hZCh0aGlzLCBudWxsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYmluZChhY3Rpb246IHN0cmluZywgZGVsZWdhdGU6IChzZW5kZXI6IElWaWV3LCBhY3Rpb246IHN0cmluZywgZXZlbnQ6IGFueSkgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubW9kZWxbYWN0aW9uXSA9IGUgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZGVsZWdhdGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZSh0aGlzLCBhY3Rpb24sIGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBhYnN0cmFjdCBiaW5kaW5ncygpOiB2b2lkO1xyXG5cclxuICAgIGFic3RyYWN0IHJlbmRlcigpOiB2b2lkO1xyXG5cclxuICAgIGFic3RyYWN0IGRpc3Bvc2UoKTogdm9pZDtcclxuXHJcbiAgICBhYnN0cmFjdCBzaG93KGlzTW9kYWw6IGJvb2xlYW4pOiB2b2lkO1xyXG5cclxuICAgIGFic3RyYWN0IGhpZGUoKTogdm9pZDtcclxuXHJcbiAgICBhYnN0cmFjdCBicmluZ1RvRnJvbnQoKTogdm9pZDtcclxuXHJcbiAgICBhYnN0cmFjdCBmb2N1cygpOiB2b2lkO1xyXG5cclxuICAgIGFic3RyYWN0IGlzUGVuZGluZ0xvYWQodmlldzogSVZpZXcsIHZpZXdzOiBBcnJheTxJVmlldz4pOiBib29sZWFuO1xyXG5cclxuICAgIGludm9rZShjb21tYW5kOiBJQ29tbWFuZCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuaW52b2tlci5pbnZva2UoY29tbWFuZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVnaXN0ZXJUaW1lcih0aW1lckluZm86IGFueSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMudGltZXJzVG9DbGVhbnVwLnB1c2godGltZXJJbmZvKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNsZWFudXBUaW1lcnMoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy50aW1lcnNUb0NsZWFudXAuZm9yRWFjaCgodGltZXJJbmZvKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aW1lckluZm8gJiYgdGltZXJJbmZvLmNsZWFyVGltZXIpIHtcclxuICAgICAgICAgICAgICAgIHRpbWVySW5mby5jbGVhclRpbWVyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4iXX0=","map":null,"metadata":{},"sourceType":"module"}