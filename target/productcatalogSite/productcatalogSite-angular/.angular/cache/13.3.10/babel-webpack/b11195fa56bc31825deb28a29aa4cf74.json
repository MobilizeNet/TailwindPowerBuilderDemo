{"ast":null,"code":"import { geometry as geom } from '@progress/kendo-drawing';\nimport { X, Y } from '../common/constants';\nimport { Class, last, round } from '../common';\nconst WEIGHT = 0.333;\nconst EXTREMUM_ALLOWED_DEVIATION = 0.01;\n\nclass CurveProcessor extends Class {\n  constructor(closed) {\n    super();\n    this.closed = closed;\n  }\n\n  process(dataPoints) {\n    const points = dataPoints.slice(0);\n    const segments = [];\n    let closed = this.closed;\n    let length = points.length;\n\n    if (length > 2) {\n      this.removeDuplicates(0, points);\n      length = points.length;\n    }\n\n    if (length < 2 || length === 2 && points[0].equals(points[1])) {\n      return segments;\n    }\n\n    let p0 = points[0];\n    let p1 = points[1];\n    let p2 = points[2];\n    segments.push(new geom.Segment(p0));\n\n    while (p0.equals(points[length - 1])) {\n      closed = true;\n      points.pop();\n      length--;\n    }\n\n    if (length === 2) {\n      const tangent = this.tangent(p0, p1, X, Y);\n      last(segments).controlOut(this.firstControlPoint(tangent, p0, p1, X, Y));\n      segments.push(new geom.Segment(p1, this.secondControlPoint(tangent, p0, p1, X, Y)));\n      return segments;\n    }\n\n    let initialControlPoint, lastControlPoint;\n\n    if (closed) {\n      p0 = points[length - 1];\n      p1 = points[0];\n      p2 = points[1];\n      const controlPoints = this.controlPoints(p0, p1, p2);\n      initialControlPoint = controlPoints[1];\n      lastControlPoint = controlPoints[0];\n    } else {\n      const tangent = this.tangent(p0, p1, X, Y);\n      initialControlPoint = this.firstControlPoint(tangent, p0, p1, X, Y);\n    }\n\n    let cp0 = initialControlPoint;\n\n    for (let idx = 0; idx <= length - 3; idx++) {\n      this.removeDuplicates(idx, points);\n      length = points.length;\n\n      if (idx + 3 <= length) {\n        p0 = points[idx];\n        p1 = points[idx + 1];\n        p2 = points[idx + 2];\n        const controlPoints = this.controlPoints(p0, p1, p2);\n        last(segments).controlOut(cp0);\n        cp0 = controlPoints[1];\n        const cp1 = controlPoints[0];\n        segments.push(new geom.Segment(p1, cp1));\n      }\n    }\n\n    if (closed) {\n      p0 = points[length - 2];\n      p1 = points[length - 1];\n      p2 = points[0];\n      const controlPoints = this.controlPoints(p0, p1, p2);\n      last(segments).controlOut(cp0);\n      segments.push(new geom.Segment(p1, controlPoints[0]));\n      last(segments).controlOut(controlPoints[1]);\n      segments.push(new geom.Segment(p2, lastControlPoint));\n    } else {\n      const tangent = this.tangent(p1, p2, X, Y);\n      last(segments).controlOut(cp0);\n      segments.push(new geom.Segment(p2, this.secondControlPoint(tangent, p1, p2, X, Y)));\n    }\n\n    return segments;\n  }\n\n  removeDuplicates(idx, points) {\n    while (points[idx + 1] && (points[idx].equals(points[idx + 1]) || points[idx + 1].equals(points[idx + 2]))) {\n      points.splice(idx + 1, 1);\n    }\n  }\n\n  invertAxis(p0, p1, p2) {\n    let invertAxis = false;\n\n    if (p0.x === p1.x) {\n      invertAxis = true;\n    } else if (p1.x === p2.x) {\n      if (p1.y < p2.y && p0.y <= p1.y || p2.y < p1.y && p1.y <= p0.y) {\n        invertAxis = true;\n      }\n    } else {\n      const fn = this.lineFunction(p0, p1);\n      const y2 = this.calculateFunction(fn, p2.x);\n\n      if (!(p0.y <= p1.y && p2.y <= y2) && !(p1.y <= p0.y && p2.y >= y2)) {\n        invertAxis = true;\n      }\n    }\n\n    return invertAxis;\n  }\n\n  isLine(p0, p1, p2) {\n    const fn = this.lineFunction(p0, p1);\n    const y2 = this.calculateFunction(fn, p2.x);\n    return p0.x === p1.x && p1.x === p2.x || round(y2, 1) === round(p2.y, 1);\n  }\n\n  lineFunction(p1, p2) {\n    const a = (p2.y - p1.y) / (p2.x - p1.x);\n    const b = p1.y - a * p1.x;\n    return [b, a];\n  }\n\n  controlPoints(p0, p1, p2) {\n    let xField = X;\n    let yField = Y;\n    let restrict = false;\n    let switchOrientation = false;\n    let tangent;\n\n    if (this.isLine(p0, p1, p2)) {\n      tangent = this.tangent(p0, p1, X, Y);\n    } else {\n      const monotonic = {\n        x: this.isMonotonicByField(p0, p1, p2, X),\n        y: this.isMonotonicByField(p0, p1, p2, Y)\n      };\n\n      if (monotonic.x && monotonic.y) {\n        tangent = this.tangent(p0, p2, X, Y);\n        restrict = true;\n      } else {\n        if (this.invertAxis(p0, p1, p2)) {\n          xField = Y;\n          yField = X;\n        }\n\n        if (monotonic[xField]) {\n          tangent = 0;\n        } else {\n          let sign;\n\n          if (p2[yField] < p0[yField] && p0[yField] <= p1[yField] || p0[yField] < p2[yField] && p1[yField] <= p0[yField]) {\n            sign = numberSign((p2[yField] - p0[yField]) * (p1[xField] - p0[xField]));\n          } else {\n            sign = -numberSign((p2[xField] - p0[xField]) * (p1[yField] - p0[yField]));\n          }\n\n          tangent = EXTREMUM_ALLOWED_DEVIATION * sign;\n          switchOrientation = true;\n        }\n      }\n    }\n\n    const secondControlPoint = this.secondControlPoint(tangent, p0, p1, xField, yField);\n\n    if (switchOrientation) {\n      const oldXField = xField;\n      xField = yField;\n      yField = oldXField;\n    }\n\n    const firstControlPoint = this.firstControlPoint(tangent, p1, p2, xField, yField);\n\n    if (restrict) {\n      this.restrictControlPoint(p0, p1, secondControlPoint, tangent);\n      this.restrictControlPoint(p1, p2, firstControlPoint, tangent);\n    }\n\n    return [secondControlPoint, firstControlPoint];\n  }\n\n  restrictControlPoint(p1, p2, cp, tangent) {\n    if (p1.y < p2.y) {\n      if (p2.y < cp.y) {\n        cp.x = p1.x + (p2.y - p1.y) / tangent;\n        cp.y = p2.y;\n      } else if (cp.y < p1.y) {\n        cp.x = p2.x - (p2.y - p1.y) / tangent;\n        cp.y = p1.y;\n      }\n    } else {\n      if (cp.y < p2.y) {\n        cp.x = p1.x - (p1.y - p2.y) / tangent;\n        cp.y = p2.y;\n      } else if (p1.y < cp.y) {\n        cp.x = p2.x + (p1.y - p2.y) / tangent;\n        cp.y = p1.y;\n      }\n    }\n  }\n\n  tangent(p0, p1, xField, yField) {\n    const x = p1[xField] - p0[xField];\n    const y = p1[yField] - p0[yField];\n    let tangent;\n\n    if (x === 0) {\n      tangent = 0;\n    } else {\n      tangent = y / x;\n    }\n\n    return tangent;\n  }\n\n  isMonotonicByField(p0, p1, p2, field) {\n    return p2[field] > p1[field] && p1[field] > p0[field] || p2[field] < p1[field] && p1[field] < p0[field];\n  }\n\n  firstControlPoint(tangent, p0, p3, xField, yField) {\n    const t1 = p0[xField];\n    const t2 = p3[xField];\n    const distance = (t2 - t1) * WEIGHT;\n    return this.point(t1 + distance, p0[yField] + distance * tangent, xField, yField);\n  }\n\n  secondControlPoint(tangent, p0, p3, xField, yField) {\n    const t1 = p0[xField];\n    const t2 = p3[xField];\n    const distance = (t2 - t1) * WEIGHT;\n    return this.point(t2 - distance, p3[yField] - distance * tangent, xField, yField);\n  }\n\n  point(xValue, yValue, xField, yField) {\n    const controlPoint = new geom.Point();\n    controlPoint[xField] = xValue;\n    controlPoint[yField] = yValue;\n    return controlPoint;\n  }\n\n  calculateFunction(fn, x) {\n    const length = fn.length;\n    let result = 0;\n\n    for (let i = 0; i < length; i++) {\n      result += Math.pow(x, i) * fn[i];\n    }\n\n    return result;\n  }\n\n}\n\nfunction numberSign(value) {\n  return value <= 0 ? -1 : 1;\n}\n\nexport default CurveProcessor;","map":null,"metadata":{},"sourceType":"module"}