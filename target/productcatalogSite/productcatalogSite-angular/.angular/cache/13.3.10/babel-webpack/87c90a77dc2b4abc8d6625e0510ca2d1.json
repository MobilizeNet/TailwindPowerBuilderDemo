{"ast":null,"code":"import { isNumber, isString } from '../../common';\nimport SeriesBinder from '../series-binder';\nimport segmentVisible from './segment-visible';\nexport default function bindSegments(series) {\n  const data = series.data;\n  const points = [];\n  let sum = 0;\n  let count = 0;\n\n  for (let idx = 0; idx < data.length; idx++) {\n    const pointData = SeriesBinder.current.bindPoint(series, idx);\n    let value = pointData.valueFields.value;\n\n    if (isString(value)) {\n      value = parseFloat(value);\n    }\n\n    if (isNumber(value)) {\n      pointData.visible = segmentVisible(series, pointData.fields, idx) !== false;\n      pointData.value = Math.abs(value);\n      points.push(pointData);\n\n      if (pointData.visible) {\n        sum += pointData.value;\n      }\n\n      if (value !== 0) {\n        count++;\n      }\n    } else {\n      points.push(null);\n    }\n  }\n\n  return {\n    total: sum,\n    points: points,\n    count: count\n  };\n}","map":null,"metadata":{},"sourceType":"module"}