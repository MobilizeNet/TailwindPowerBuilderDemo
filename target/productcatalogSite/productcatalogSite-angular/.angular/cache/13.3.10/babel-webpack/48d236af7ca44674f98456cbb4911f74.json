{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1203);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1112:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.userevents\");\n    /***/\n  },\n\n  /***/\n  1203:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1112)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"drawer\",\n        name: \"Drawer\",\n        category: \"web\",\n        description: \"The Kendo Drawer widget provides slide to reveal sidebar\",\n        depends: [\"userevents\"]\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            Widget = ui.Widget,\n            SHOW = \"show\",\n            HIDE = \"hide\",\n            NS = \".kendoDrawer\",\n            FOCUSED = \"k-state-focused\",\n            keys = kendo.keys,\n            ITEMCLICK = \"itemClick\",\n            TABINDEX = \"tabIndex\",\n            PUSH = \"push\",\n            OVERLAY = \"overlay\",\n            LEFT = \"left\",\n            RIGHT = \"right\";\n        var Drawer = kendo.ui.Widget.extend({\n          init: function (element, options) {\n            var that = this;\n            var userEvents;\n            Widget.fn.init.call(this, element, options);\n            options = that.options;\n\n            that._element(element);\n\n            that._wrapper(element);\n\n            that._navigatable();\n\n            that.position();\n\n            that._mode();\n\n            if (options.mini) {\n              that._miniMode();\n            }\n\n            that._initDrawerItems();\n\n            if (options.mini && options.mode != PUSH) {\n              that._setBodyOffset();\n            }\n\n            userEvents = this.userEvents = new kendo.UserEvents(options.mode != PUSH ? $(document.body) : this.drawerContainer, {\n              fastTap: true,\n              allowSelection: true\n            });\n\n            that.tap = function (e) {\n              if ($.contains(that.drawerItemsWrapper[0], e.event.target)) {\n                that._itemClick(e);\n              }\n\n              if (options.autoCollapse && that.visible && !that.trigger(\"hide\", {\n                sender: this\n              })) {\n                that.hide();\n                e.preventDefault();\n              }\n            };\n\n            if (this.options.swipeToOpen) {\n              userEvents.bind(\"start\", function (e) {\n                that._start(e);\n              });\n              userEvents.bind(\"move\", function (e) {\n                that._update(e);\n              });\n              userEvents.bind(\"end\", function (e) {\n                that._end(e);\n              });\n              userEvents.bind(\"tap\", that.tap);\n            } else {\n              userEvents.bind(\"press\", that.tap);\n            }\n\n            if (options.minHeight && options.mode == PUSH) {\n              that.drawerContainer.css(\"min-height\", options.minHeight);\n            }\n          },\n          _element: function () {\n            var that = this;\n            var element = that.element;\n            var options = that.options;\n            var contentElement = that.contentElement = element.children().first();\n            that.drawerElement = $(options.template);\n            contentElement.addClass(\"k-drawer-content\");\n            element.addClass(\"k-widget k-drawer\");\n          },\n          _navigatable: function () {\n            if (!this.options.navigatable) {\n              return;\n            }\n\n            var that = this;\n            var element = that.element;\n            var drawerItems = element.find(\"[data-role='drawer-item']\");\n            element.find(\"[data-role='drawer-separator']\").attr(\"aria-hidden\", true);\n            drawerItems.attr(\"role\", \"tab\");\n            drawerItems.first().parent().attr(\"role\", \"tablist\").attr(\"aria-orientation\", \"vertical\");\n            element.attr(TABINDEX, 0).on(\"focus\" + NS, that._focus.bind(that)).on(\"focusout\" + NS, that._blur.bind(that)).on(\"keydown\" + NS, that, that._keyDown.bind(that));\n          },\n          _blur: function () {\n            var that = this;\n\n            if (that._current) {\n              that._current.removeClass(FOCUSED);\n            }\n          },\n          _focus: function () {\n            var that = this;\n\n            that._setCurrent(that._current ? that._current : that.drawerItemsWrapper.find(\"[data-role='drawer-item']\").eq(0));\n          },\n          _setCurrent: function (current) {\n            var that = this;\n            var id = kendo.guid();\n            var next = $(current);\n\n            if (that._current) {\n              $(that._current).removeClass(FOCUSED).removeAttr(\"id\");\n              that.element.removeAttr(\"aria-activedescendant\");\n            }\n\n            next.attr(\"id\", id).addClass(FOCUSED);\n            that.element.attr(\"aria-activedescendant\", id);\n            that._current = next;\n          },\n          _keyDown: function (e) {\n            var that = this;\n            var handled = false;\n            var current = that._current;\n            var next;\n\n            if (e.keyCode == keys.UP) {\n              handled = true;\n              next = current.prevAll(\"[data-role='drawer-item']\").first();\n\n              if (next.length) {\n                that._setCurrent(next);\n              } else {\n                that._setCurrent(current.parent().find(\"[data-role='drawer-item']\").last());\n              }\n            }\n\n            if (e.keyCode == keys.DOWN) {\n              handled = true;\n              next = current.nextAll(\"[data-role='drawer-item']\").first();\n\n              if (next.length) {\n                that._setCurrent(next);\n              } else {\n                that._setCurrent(current.parent().find(\"[data-role='drawer-item']\").first());\n              }\n            }\n\n            if (e.keyCode == keys.HOME) {\n              handled = true;\n\n              that._setCurrent(that.drawerItemsWrapper.find(\"[data-role='drawer-item']\").eq(0));\n            }\n\n            if (e.keyCode == keys.END) {\n              handled = true;\n\n              that._setCurrent(that.drawerItemsWrapper.find(\"[data-role='drawer-item']\").last());\n            }\n\n            if (e.keyCode == keys.SPACEBAR || e.keyCode == keys.ENTER) {\n              handled = true;\n              that.tap({\n                event: {\n                  target: current[0]\n                },\n                preventDefault: $.noop\n              });\n            }\n\n            if (e.keyCode == keys.ESC) {\n              handled = true;\n              that.hide();\n            }\n\n            if (handled) {\n              //prevent scrolling while pressing the keys\n              e.preventDefault();\n            }\n          },\n          _wrapper: function () {\n            var options = this.options;\n            var drawerElement = this.drawerElement;\n            var element = this.element;\n            var contentElement = this.contentElement;\n            var drawerItemsWrapper = this.drawerItemsWrapper = drawerElement.wrapAll(\"<div class='k-drawer-items'></div>\").parent();\n            var drawerWrapper = this.drawerWrapper = drawerItemsWrapper.wrap(\"<div class='k-drawer-wrapper'></div>\").parent();\n            var drawerContainer = this.drawerContainer = element.wrap(\"<div class='k-drawer-container'></div>\").parent();\n\n            if (options.mini) {\n              if (options.mini.width) {\n                drawerWrapper.width(options.mini.width);\n              }\n            } else {\n              drawerWrapper.width(0);\n            }\n\n            if (options.mode === PUSH) {\n              drawerContainer.append(contentElement);\n            } else if (options.mode === OVERLAY) {\n              drawerContainer.after(contentElement);\n              $(document.body).prepend(drawerContainer);\n            }\n\n            element.append(drawerWrapper);\n          },\n          _setBodyOffset: function () {\n            var overlayMiniOffset = this.element.outerWidth();\n\n            if (this.leftPositioned) {\n              $(document.body).css(\"padding-left\", overlayMiniOffset);\n            } else {\n              $(document.body).css(\"padding-right\", overlayMiniOffset);\n            }\n          },\n          _initDrawerItems: function () {\n            var drawerItemsWrapper = this.drawerItemsWrapper;\n            var drawerItems = drawerItemsWrapper.find(\"[data-role='drawer-item']\");\n            var separatorItems = drawerItemsWrapper.find(\"[data-role='drawer-separator']\");\n            drawerItems.addClass(\"k-drawer-item\");\n            separatorItems.addClass(\"k-drawer-item k-drawer-separator\");\n\n            if (this._selectedItemIndex >= 0) {\n              drawerItems.removeClass(\"k-state-selected\");\n              drawerItems.eq(this._selectedItemIndex).addClass(\"k-state-selected\");\n            }\n\n            if (this.options.navigatable) {\n              drawerItems.attr(\"aria-selected\", false);\n            }\n          },\n          _mode: function () {\n            var options = this.options;\n            var drawerContainer = this.drawerContainer;\n            var overlayContainer;\n\n            if (options.mode == PUSH) {\n              drawerContainer.addClass('k-drawer-' + PUSH);\n            } else {\n              drawerContainer.addClass('k-drawer-' + OVERLAY);\n              overlayContainer = this.overlayContainer = $('<div class=\"k-overlay\"></div>');\n              overlayContainer.hide();\n              drawerContainer.prepend(overlayContainer);\n            }\n          },\n          _miniMode: function () {\n            var options = this.options;\n            var drawerContainer = this.drawerContainer;\n            var miniWidth = options.mini.width;\n            var miniTemplate = this._miniTemplate = options.mini.template && $(options.mini.template);\n            var drawerItemsWrapper = this.drawerItemsWrapper;\n            var drawerWrapper = this.drawerWrapper;\n            drawerContainer.addClass(\"k-drawer-mini\");\n\n            if (miniTemplate) {\n              drawerItemsWrapper.html(miniTemplate);\n            }\n\n            if (miniWidth) {\n              drawerWrapper.width(miniWidth);\n            }\n\n            this.minWidth = options.mini.width || this.drawerWrapper.width();\n          },\n          show: function () {\n            var drawerWrapper = this.drawerWrapper;\n            var drawerContainer = this.drawerContainer;\n            var options = this.options;\n            var isExpanded = drawerContainer.hasClass(\"k-drawer-expanded\");\n            var miniTemplate = this._miniTemplate;\n            var drawerElement = this.drawerElement;\n            var drawerItemsWrapper = this.drawerItemsWrapper;\n\n            if (!isExpanded) {\n              drawerContainer.addClass('k-drawer-expanded');\n              this.visible = true;\n            }\n\n            if (miniTemplate) {\n              drawerItemsWrapper.html(drawerElement);\n\n              this._initDrawerItems();\n\n              this._selectItem();\n            }\n\n            drawerWrapper.width(options.width);\n\n            if (options.mode === OVERLAY) {\n              this.overlayContainer.show();\n              this.visible = true;\n            }\n          },\n          hide: function () {\n            var that = this;\n            var drawerWrapper = that.drawerWrapper;\n            var drawerContainer = that.drawerContainer;\n            var options = this.options;\n            var drawerItemsWrapper = this.drawerItemsWrapper;\n            var miniTemplate = this._miniTemplate;\n            var miniWidth = options.mini && options.mini.width;\n\n            if (this._miniTemplate) {\n              drawerItemsWrapper.html(miniTemplate);\n\n              that._initDrawerItems();\n\n              this._selectItem();\n            }\n\n            if (options.mini) {\n              if (miniWidth) {\n                drawerWrapper.width(miniWidth);\n              } else {\n                drawerWrapper.width(\"\");\n              }\n            } else {\n              drawerWrapper.width(0);\n            }\n\n            if (this.visible) {\n              drawerContainer.removeClass('k-drawer-expanded');\n              this.visible = false;\n            }\n\n            if (options.mode === OVERLAY) {\n              this.overlayContainer.hide();\n            }\n          },\n          position: function (value) {\n            var that = this;\n            var options = that.options;\n            var position = value || options.position;\n            var drawerContainer = that.drawerContainer;\n\n            if (position == RIGHT) {\n              drawerContainer.removeClass('k-drawer-' + LEFT);\n              drawerContainer.addClass('k-drawer-' + RIGHT);\n            } else {\n              drawerContainer.removeClass('k-drawer-' + RIGHT);\n              drawerContainer.addClass('k-drawer-' + LEFT);\n            }\n\n            this.leftPositioned = position === LEFT;\n          },\n          _start: function (e) {\n            var that = this;\n            var options = this.options;\n            var drawerWrapper = this.drawerWrapper;\n            var drawerItemsWrapper = this.drawerItemsWrapper;\n            var userEvents = e.sender; // ignore non-horizontal swipes\n\n            if (Math.abs(e.x.velocity) < Math.abs(e.y.velocity) || kendo.triggeredByInput(e.event)) {\n              userEvents.cancel();\n              return;\n            }\n\n            if (this.drawerMini) {\n              drawerItemsWrapper.html(that.drawerElement);\n            }\n\n            drawerWrapper.css(\"transition\", \"none\");\n\n            if (options.mode != PUSH) {\n              this.overlayContainer.show();\n            }\n          },\n          _update: function (e) {\n            var options = this.options;\n            var mode = options.mode;\n\n            if (mode == PUSH) {\n              this._push(e);\n            } else {\n              this._overlay(e);\n            }\n          },\n          _end: function (e) {\n            var velocity = e.x.velocity;\n            var options = this.options;\n            var drawerWrapper = this.drawerWrapper;\n            var elementWidth = drawerWrapper.width();\n            var pastHalf = elementWidth > options.width / 2;\n            var velocityThreshold = 0.8;\n            var shouldShow;\n            drawerWrapper.css(\"transition\", \"all .3s ease-out\");\n\n            if (this.leftPositioned) {\n              shouldShow = velocity > -velocityThreshold && (velocity > velocityThreshold || pastHalf);\n            } else {\n              shouldShow = velocity < velocityThreshold && (velocity < -velocityThreshold || pastHalf);\n            }\n\n            if (shouldShow) {\n              if (this.trigger(\"show\", {\n                sender: this\n              })) {\n                e.preventDefault();\n                this.hide();\n              } else {\n                this.show();\n              }\n            } else {\n              if (this.trigger(\"hide\", {\n                sender: this\n              })) {\n                e.preventDefault();\n                this.show();\n              } else {\n                this.hide();\n              }\n            }\n          },\n          _overlay: function (moveEventArgs) {\n            var options = this.options;\n            var minWidth = options.mini && options.mini.width || this.minWidth || 0;\n            var drawerWrapper = this.drawerWrapper;\n            var elementWidth = drawerWrapper.width();\n            var limitedPosition;\n            var updatedPosition;\n            updatedPosition = elementWidth + (this.leftPositioned ? moveEventArgs.x.delta : -moveEventArgs.x.delta);\n            limitedPosition = Math.min(Math.max(updatedPosition, minWidth), options.width);\n            moveEventArgs.event.preventDefault();\n            moveEventArgs.event.stopPropagation();\n            drawerWrapper.width(limitedPosition);\n          },\n          _push: function (moveEventArgs) {\n            var options = this.options;\n            var minWidth = options.mini && options.mini.width || this.minWidth || 0;\n            var drawerWrapper = this.drawerWrapper;\n            var elementWidth = drawerWrapper.width();\n            var limitedPosition;\n            var updatedPosition;\n            updatedPosition = elementWidth + (this.leftPositioned ? moveEventArgs.x.delta : -moveEventArgs.x.delta);\n            limitedPosition = Math.min(Math.max(updatedPosition, minWidth), options.width);\n            moveEventArgs.event.preventDefault();\n            moveEventArgs.event.stopPropagation();\n            drawerWrapper.width(limitedPosition);\n          },\n          _selectItem: function (item) {\n            var selectedItemIndex;\n\n            if (item) {\n              item.addClass(\"k-state-selected\");\n              this.trigger(\"itemClick\", {\n                item: item,\n                sender: this\n              });\n              this._selectedItemIndex = item.index();\n              return;\n            }\n\n            selectedItemIndex = this._selectedItemIndex;\n\n            if (selectedItemIndex) {\n              this.drawerItemsWrapper.find(\"[data-role='drawer-item']\").eq(selectedItemIndex).addClass(\"k-state-selected\");\n            }\n          },\n          _itemClick: function (e) {\n            var that = this;\n            var item;\n            var items;\n\n            if ($(e.event.target).find(\".k-drawer-item\").length > 0) {\n              item = $(e.event.target).find(\".k-drawer-item\");\n            } else if ($(e.event.target).closest(\".k-drawer-item\").length > 0) {\n              item = $(e.event.target).closest(\".k-drawer-item\");\n            } else if ($(e.event.target).hasClass(\".k-drawer-item\")) {\n              item = $(e.event.target);\n            }\n\n            items = that.drawerItemsWrapper.find(\".k-drawer-item\").removeClass(\"k-state-selected\");\n\n            that._selectItem(item);\n\n            if (that.options.navigatable) {\n              items.attr(\"aria-selected\", false);\n              item.attr(\"aria-selected\", true);\n\n              that._setCurrent(item);\n            }\n          },\n          destroy: function () {\n            var options = this.options;\n\n            if (options.mode != PUSH) {\n              if (this.leftPositioned) {\n                $(document.body).css(\"padding-left\", 0);\n              } else {\n                $(document.body).css(\"padding-right\", 0);\n              }\n            }\n\n            Widget.fn.destroy.call(this);\n            this.userEvents.destroy();\n            kendo.destroy(this.element);\n            this.element = this.drawerWrapper = this.drawerElement = this.drawerContainer = this.drawerItemsWrapper = this._miniTemplate = null;\n          },\n          options: {\n            name: \"Drawer\",\n            autoCollapse: true,\n            position: LEFT,\n            mode: \"overlay\",\n            swipeToOpen: true,\n            width: 280,\n            mini: false,\n            navigatable: false,\n            template: \"\"\n          },\n          events: [HIDE, SHOW, ITEMCLICK]\n        });\n        kendo.ui.plugin(Drawer);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}