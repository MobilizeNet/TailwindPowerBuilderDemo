{"ast":null,"code":"import CategoricalChart from '../categorical-chart';\nimport LinePoint from './line-point';\nimport LineSegment from './line-segment';\nimport StepLineSegment from './step-line-segment';\nimport SplineSegment from './spline-segment';\nimport LineChartMixin from '../mixins/line-chart-mixin';\nimport ClipAnimationMixin from '../mixins/clip-animation-mixin';\nimport { ZERO, SMOOTH, STEP } from '../constants';\nimport { deepExtend, defined, isFunction } from '../../common';\n\nclass LineChart extends CategoricalChart {\n  render() {\n    super.render();\n    this.updateStackRange();\n    this.renderSegments();\n  }\n\n  pointType() {\n    return LinePoint;\n  }\n\n  createPoint(data, fields) {\n    const {\n      categoryIx,\n      category,\n      series,\n      seriesIx\n    } = fields;\n    const missingValues = this.seriesMissingValues(series);\n    let value = data.valueFields.value;\n\n    if (!defined(value) || value === null) {\n      if (missingValues === ZERO) {\n        value = 0;\n      } else {\n        return null;\n      }\n    }\n\n    let pointOptions = this.pointOptions(series, seriesIx);\n    pointOptions = this.evalPointOptions(pointOptions, value, category, categoryIx, series, seriesIx);\n    let color = data.fields.color || series.color;\n\n    if (isFunction(series.color)) {\n      color = pointOptions.color;\n    }\n\n    const point = new LinePoint(value, pointOptions);\n    point.color = color;\n    this.append(point);\n    return point;\n  }\n\n  plotRange(point) {\n    let plotValue = this.plotValue(point);\n\n    if (this.options.isStacked) {\n      const categoryIx = point.categoryIx;\n      const categoryPoints = this.categoryPoints[categoryIx];\n\n      for (let i = 0; i < categoryPoints.length; i++) {\n        const other = categoryPoints[i];\n\n        if (point === other) {\n          break;\n        }\n\n        plotValue += this.plotValue(other);\n\n        if (this.options.isStacked100) {\n          plotValue = Math.min(plotValue, 1);\n        }\n      }\n    }\n\n    return [plotValue, plotValue];\n  }\n\n  createSegment(linePoints, currentSeries, seriesIx) {\n    const style = currentSeries.style;\n    let pointType;\n\n    if (style === STEP) {\n      pointType = StepLineSegment;\n    } else if (style === SMOOTH) {\n      pointType = SplineSegment;\n    } else {\n      pointType = LineSegment;\n    }\n\n    return new pointType(linePoints, currentSeries, seriesIx);\n  }\n\n  animationPoints() {\n    const points = this.points;\n    const result = [];\n\n    for (let idx = 0; idx < points.length; idx++) {\n      result.push((points[idx] || {}).marker);\n    }\n\n    return result.concat(this._segments);\n  }\n\n  supportsPointInactiveOpacity() {\n    return false;\n  }\n\n}\n\ndeepExtend(LineChart.prototype, LineChartMixin, ClipAnimationMixin);\nexport default LineChart;","map":null,"metadata":{},"sourceType":"module"}