{"ast":null,"code":"import { Encodings } from './encodings/main';\n\nconst validate = (encoding, size, prefix) => value => {\n  try {\n    encoding.encode(prefix + value, size.width, size.height);\n  } catch (error) {\n    return {\n      valid: false,\n      error\n    };\n  }\n\n  return {\n    valid: true\n  };\n}; // A default size for encodings, so the validator can check only the value if no size is provided.\n\n\nconst fallbackSize = {\n  width: 500,\n  height: 100\n};\n\nfunction barcodeValidator(type, size = fallbackSize) {\n  if (!type) {\n    throw new Error(`Please specify barcode type to validate.`);\n  }\n\n  let resolvedType = type.toLowerCase();\n  let prefix = '';\n\n  if (resolvedType === 'upca') {\n    resolvedType = 'ean13';\n    prefix = '0';\n  } else if (resolvedType === 'upce') {\n    resolvedType = 'ean8';\n    prefix = '0';\n  }\n\n  if (!Encodings[resolvedType]) {\n    throw new Error(`Encoding '${type}' is not supported.`);\n  }\n\n  const encoding = new Encodings[resolvedType]();\n  return validate(encoding, size, prefix);\n}\n\nexport default barcodeValidator;","map":null,"metadata":{},"sourceType":"module"}