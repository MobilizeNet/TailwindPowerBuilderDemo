{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1477);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1060:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"jquery\");\n    /***/\n  },\n\n  /***/\n  1063:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.data\");\n    /***/\n  },\n\n  /***/\n  1477:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n    /* WEBPACK VAR INJECTION */\n\n\n    (function (jQuery) {\n      (function (f, define) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1063)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n      })(function () {\n        var __meta__ = {\n          // jshint ignore:line\n          id: \"tabstrip\",\n          name: \"TabStrip\",\n          category: \"web\",\n          description: \"The TabStrip widget displays a collection of tabs with associated tab content.\",\n          depends: [\"data\"],\n          features: [{\n            id: \"tabstrip-fx\",\n            name: \"Animation\",\n            description: \"Support for animation\",\n            depends: [\"fx\"]\n          }]\n        };\n\n        (function ($, undefined) {\n          var kendo = window.kendo,\n              ui = kendo.ui,\n              keys = kendo.keys,\n              map = $.map,\n              each = $.each,\n              trim = kendo.trim,\n              extend = $.extend,\n              isFunction = kendo.isFunction,\n              template = kendo.template,\n              outerWidth = kendo._outerWidth,\n              outerHeight = kendo._outerHeight,\n              Widget = ui.Widget,\n              excludedNodesRegExp = /^(a|div)$/i,\n              NS = \".kendoTabStrip\",\n              IMG = \"img\",\n              HREF = \"href\",\n              PREV = \"prev\",\n              NEXT = \"next\",\n              SHOW = \"show\",\n              LINK = \"k-link\",\n              LAST = \"k-last\",\n              CLICK = \"click\",\n              ERROR = \"error\",\n              EMPTY = \":empty\",\n              IMAGE = \"k-image\",\n              FIRST = \"k-first\",\n              SELECT = \"select\",\n              ACTIVATE = \"activate\",\n              CONTENT = \"k-tabstrip-content k-content\",\n              CONTENTURL = \"contentUrl\",\n              MOUSEENTER = \"mouseenter\",\n              MOUSELEAVE = \"mouseleave\",\n              CONTENTLOAD = \"contentLoad\",\n              DISABLEDSTATE = \"k-state-disabled\",\n              ACTIVESTATE = \"k-state-active\",\n              FOCUSEDSTATE = \"k-state-focused\",\n              HOVERSTATE = \"k-state-hover\",\n              TABONTOP = \"k-tab-on-top\",\n              NAVIGATABLEITEMS = \".k-item:not(.\" + DISABLEDSTATE + \")\",\n              KEYBOARDNAVIGATABLEITEMS = \".k-item\",\n              HOVERABLEITEMS = \".k-tabstrip-items > \" + NAVIGATABLEITEMS + \":not(.\" + ACTIVESTATE + \")\",\n              DEFAULTDISTANCE = 200,\n              templates = {\n            content: template(\"<div class='k-tabstrip-content k-content' #= contentAttributes(data) # tabindex='0'>#= content(item) #</div>\"),\n            itemWrapper: template(\"<#= tag(item) # class='k-link' #= contentUrl(item) # #= textAttributes(item) #>\" + \"#= image(item) ##= sprite(item) ##= text(item) #\" + \"</#= tag(item) #>\"),\n            item: template(\"<li class='#= wrapperCssClass(group, item) #' role='tab' #=item.active ? \\\"aria-selected='true'\\\" : ''#>\" + \"#= itemWrapper(data) #\" + \"</li>\"),\n            image: template(\"<img class='k-image' alt='' src='#= imageUrl #' />\"),\n            sprite: template(\"<span class='k-sprite #= spriteCssClass #'></span>\"),\n            empty: template(\"\")\n          },\n              rendering = {\n            wrapperCssClass: function (group, item) {\n              var result = [\"k-tabstrip-item\", \"k-item\"],\n                  index = item.index;\n\n              if (item.enabled === false) {\n                result.push(\"k-state-disabled\");\n              }\n\n              if (index === 0) {\n                result.push(\"k-first\");\n              }\n\n              if (index == group.length - 1) {\n                result.push(\"k-last\");\n              }\n\n              return result.join(\" \");\n            },\n            textAttributes: function (item) {\n              return item.url ? \" href='\" + item.url + \"'\" : \"\";\n            },\n            text: function (item) {\n              return item.encoded === false ? item.text : kendo.htmlEncode(item.text);\n            },\n            tag: function (item) {\n              return item.url ? \"a\" : \"span\";\n            },\n            contentAttributes: function (content) {\n              return content.active !== true ? \" style='display:none' aria-hidden='true' aria-expanded='false'\" : \"\";\n            },\n            content: function (item) {\n              return item.content ? item.content : item.contentUrl ? \"\" : \"&nbsp;\";\n            },\n            contentUrl: function (item) {\n              return item.contentUrl ? kendo.attr(\"content-url\") + '=\"' + item.contentUrl + '\"' : \"\";\n            }\n          };\n\n          function updateTabClasses(tabs) {\n            tabs.children(IMG).addClass(IMAGE);\n            tabs.children(\"a\").addClass(LINK).children(IMG).addClass(IMAGE);\n            tabs.filter(\"li[disabled]\").addClass(DISABLEDSTATE).attr(\"aria-disabled\", \"true\").prop(\"disabled\", false);\n            tabs.filter(\":not([class*=k-state])\").children(\"a\").filter(\":focus\").parent().addClass(ACTIVESTATE + \" \" + TABONTOP);\n            tabs.attr(\"role\", \"tab\");\n            tabs.filter(\".\" + ACTIVESTATE).attr(\"aria-selected\", true);\n            tabs.each(function () {\n              var item = $(this);\n\n              if (!item.children(\".\" + LINK).length) {\n                item.contents() // exclude groups, real links, templates and empty text nodes\n                .filter(function () {\n                  return !this.nodeName.match(excludedNodesRegExp) && !(this.nodeType == 3 && !trim(this.nodeValue));\n                }).wrapAll(\"<span UNSELECTABLE='on' class='\" + LINK + \"'/>\");\n              }\n            });\n          }\n\n          function updateFirstLast(tabGroup) {\n            var tabs = tabGroup.children(\".k-item\");\n            tabs.filter(\".k-first:not(:first-child)\").removeClass(FIRST);\n            tabs.filter(\".k-last:not(:last-child)\").removeClass(LAST);\n            tabs.filter(\":first-child\").addClass(FIRST);\n            tabs.filter(\":last-child\").addClass(LAST);\n          }\n\n          function scrollButtonHtml(buttonClass, iconClass) {\n            return \"<span class='k-button k-button-md k-rounded-md k-button-flat k-button-flat-base k-icon-button k-tabstrip-\" + buttonClass + \"' unselectable='on'><span class='k-button-icon k-icon \" + iconClass + \"'></span></span>\";\n          }\n\n          var TabStrip = Widget.extend({\n            init: function (element, options) {\n              var that = this,\n                  value;\n              Widget.fn.init.call(that, element, options);\n\n              that._animations(that.options);\n\n              options = that.options;\n              that._contentUrls = options.contentUrls || [];\n\n              that._wrapper();\n\n              that._isRtl = kendo.support.isRtl(that.wrapper);\n\n              that._tabindex();\n\n              that._updateClasses();\n\n              that._dataSource();\n\n              that.tabGroup.attr(\"role\", \"none\");\n              that.wrapper.attr(\"role\", \"tablist\");\n\n              if (options.dataSource) {\n                that.dataSource.fetch();\n              }\n\n              that._tabPosition();\n\n              that._scrollable();\n\n              that._processContentUrls();\n\n              that._attachEvents();\n\n              if (that.options.value) {\n                value = that.options.value;\n              }\n\n              that._initialActivate();\n\n              that.value(value);\n              kendo.notify(that);\n            },\n            events: [SELECT, ACTIVATE, SHOW, ERROR, CONTENTLOAD, \"change\", \"dataBinding\", \"dataBound\"],\n            options: {\n              name: \"TabStrip\",\n              dataEncodedField: \"\",\n              dataTextField: \"\",\n              dataContentField: \"\",\n              dataImageUrlField: \"\",\n              dataUrlField: \"\",\n              dataSpriteCssClass: \"\",\n              dataContentUrlField: \"\",\n              tabPosition: \"top\",\n              animation: {\n                open: {\n                  effects: \"expand:vertical fadeIn\",\n                  duration: 200\n                },\n                close: {\n                  // if close animation effects are defined, they will be used instead of open.reverse\n                  duration: 200\n                }\n              },\n              collapsible: false,\n              navigatable: true,\n              contentUrls: false,\n              scrollable: {\n                distance: DEFAULTDISTANCE\n              }\n            },\n            setDataSource: function (dataSource) {\n              var that = this;\n              that.options.dataSource = dataSource;\n\n              that._dataSource();\n\n              that.dataSource.fetch();\n            },\n            setOptions: function (options) {\n              var that = this,\n                  animation = that.options.animation;\n\n              that._animations(options);\n\n              if (options.contentUrls) {\n                that._contentUrls = options.contentUrls;\n              }\n\n              options.animation = extend(true, animation, options.animation);\n\n              if (options.navigatable) {\n                that.wrapper.on(\"keydown\" + NS, that._keyDownProxy);\n              } else {\n                that.wrapper.off(\"keydown\" + NS, that._keyDownProxy);\n              }\n\n              Widget.fn.setOptions.call(that, options);\n            },\n            activateTab: function (item) {\n              if (this.tabGroup.children(\"[data-animating]\").length) {\n                return;\n              }\n\n              item = this.tabGroup.find(item);\n              var that = this,\n                  animationSettings = that.options.animation,\n                  animation = animationSettings.open,\n                  close = extend({}, animationSettings.close),\n                  hasCloseAnimation = close && \"effects\" in close,\n                  neighbours = item.parent().children(),\n                  oldTab = neighbours.filter(\".\" + ACTIVESTATE),\n                  itemIndex = neighbours.index(item),\n                  isAnimationEnabled = animation && \"duration\" in animation && \"effects\" in animation;\n              close = extend(hasCloseAnimation ? close : extend({\n                reverse: true\n              }, animation), {\n                hide: true\n              }); // deactivate previously active tab\n\n              if (kendo.size(animation.effects)) {\n                oldTab.kendoRemoveClass(ACTIVESTATE, {\n                  duration: close.duration\n                });\n                item.kendoRemoveClass(HOVERSTATE, {\n                  duration: close.duration\n                });\n              } else {\n                oldTab.removeClass(ACTIVESTATE);\n                item.removeClass(HOVERSTATE);\n              } // handle content elements\n\n\n              var contentAnimators = that.contentAnimators;\n\n              if (that.inRequest) {\n                that.xhr.abort();\n                that.inRequest = false;\n              }\n\n              if (contentAnimators.length === 0) {\n                that.tabGroup.find(\".\" + TABONTOP).removeClass(TABONTOP);\n                item.addClass(TABONTOP) // change these directly to bring the tab on top.\n                .css(\"z-index\");\n                item.addClass(ACTIVESTATE);\n\n                that._current(item);\n\n                that.trigger(\"change\");\n\n                if (that._scrollableModeActive) {\n                  that._scrollTabsToItem(item);\n                }\n\n                return false;\n              }\n\n              var visibleContents = contentAnimators.filter(\".\" + ACTIVESTATE),\n                  contentHolder = that.contentHolder(itemIndex),\n                  contentElement = contentHolder.closest(\".k-content\");\n              that.tabsHeight = outerHeight(that.tabGroup) + parseInt(that.wrapper.css(\"border-top-width\"), 10) + parseInt(that.wrapper.css(\"border-bottom-width\"), 10);\n\n              if (contentHolder.length === 0) {\n                visibleContents.removeClass(ACTIVESTATE).attr(\"aria-hidden\", true).kendoStop(true, true).kendoAnimate(close);\n                return false;\n              }\n\n              item.attr(\"data-animating\", true);\n\n              var isAjaxContent = (item.children(\".\" + LINK).data(CONTENTURL) || that._contentUrls[itemIndex] || false) && contentHolder.is(EMPTY),\n                  showContentElement = function () {\n                oldTab.removeAttr(\"aria-selected\");\n                item.attr(\"aria-selected\", true);\n\n                that._current(item);\n\n                contentElement.addClass(ACTIVESTATE).removeAttr(\"aria-hidden\").kendoStop(true, true).attr(\"aria-expanded\", true).kendoAnimate(extend({\n                  init: function () {\n                    that.trigger(SHOW, {\n                      item: item[0],\n                      contentElement: contentHolder[0]\n                    });\n                    kendo.resize(contentHolder);\n                  }\n                }, animation, {\n                  complete: function () {\n                    item.removeAttr(\"data-animating\");\n                    that.trigger(ACTIVATE, {\n                      item: item[0],\n                      contentElement: contentHolder[0]\n                    });\n                    kendo.resize(contentHolder); // Force IE and Edge rendering to fix visual glitches telerik/kendo-ui-core#2777.\n\n                    if (isAnimationEnabled && (kendo.support.browser.msie || kendo.support.browser.edge)) {\n                      contentHolder.finish().animate({\n                        opacity: 0.9\n                      }, \"fast\", \"linear\", function () {\n                        contentHolder.finish().animate({\n                          opacity: 1\n                        }, \"fast\", \"linear\");\n                      });\n                    }\n                  }\n                }));\n              },\n                  showContent = function () {\n                if (!isAjaxContent) {\n                  showContentElement();\n                  that.trigger(\"change\");\n                } else {\n                  item.removeAttr(\"data-animating\");\n                  that.ajaxRequest(item, contentHolder, function () {\n                    item.attr(\"data-animating\", true);\n                    showContentElement();\n                    that.trigger(\"change\");\n                  });\n                }\n\n                if (that._scrollableModeActive) {\n                  that._scrollTabsToItem(item);\n                }\n              }; // See https://github.com/telerik/kendo-ui-core/issues/6660\n\n\n              var oldMinHeight = that.element.css('min-height');\n              that.element.css('min-height', that.element.outerHeight());\n              visibleContents.removeClass(ACTIVESTATE);\n              that.tabGroup.find(\".\" + TABONTOP).removeClass(TABONTOP);\n              item.addClass(TABONTOP) // change these directly to bring the tab on top.\n              .css(\"z-index\");\n\n              if (kendo.size(animation.effects)) {\n                item.kendoAddClass(ACTIVESTATE, {\n                  duration: animation.duration\n                });\n              } else {\n                item.addClass(ACTIVESTATE);\n              }\n\n              visibleContents.attr(\"aria-hidden\", true);\n              visibleContents.attr(\"aria-expanded\", false);\n\n              if (visibleContents.length) {\n                visibleContents.kendoStop(true, true).kendoAnimate(extend({\n                  complete: showContent\n                }, close));\n              } else {\n                showContent();\n              }\n\n              that.element.css('min-height', oldMinHeight);\n              return true;\n            },\n            ajaxRequest: function (element, content, complete, url) {\n              element = this.tabGroup.find(element);\n              var that = this,\n                  xhr = $.ajaxSettings.xhr,\n                  link = element.find(\".\" + LINK),\n                  data = {},\n                  halfWidth = element.width() / 2,\n                  fakeProgress = false,\n                  statusIcon = element.find(\".k-loading\").removeClass(\"k-complete\");\n\n              if (!statusIcon[0]) {\n                statusIcon = $(\"<span class='k-loading'/>\").prependTo(element);\n              }\n\n              var endState = halfWidth * 2 - statusIcon.width();\n\n              var oldProgressAnimation = function () {\n                statusIcon.animate({\n                  marginLeft: (parseInt(statusIcon.css(\"marginLeft\"), 10) || 0) < halfWidth ? endState : 0\n                }, 500, oldProgressAnimation);\n              };\n\n              if (kendo.support.browser.msie && kendo.support.browser.version < 10) {\n                setTimeout(oldProgressAnimation, 40);\n              }\n\n              url = url || link.data(CONTENTURL) || that._contentUrls[element.index()] || link.attr(HREF);\n              that.inRequest = true;\n              var ajaxOptions = {\n                type: \"GET\",\n                cache: false,\n                url: url,\n                dataType: \"html\",\n                data: data,\n                xhr: function () {\n                  var current = this,\n                      request = xhr(),\n                      event = current.progressUpload ? \"progressUpload\" : current.progress ? \"progress\" : false;\n\n                  if (request) {\n                    $.each([request, request.upload], function () {\n                      if (this.addEventListener) {\n                        this.addEventListener(\"progress\", function (evt) {\n                          if (event) {\n                            current[event](evt);\n                          }\n                        }, false);\n                      }\n                    });\n                  }\n\n                  current.noProgress = !(window.XMLHttpRequest && 'upload' in new XMLHttpRequest());\n                  return request;\n                },\n                progress: function (evt) {\n                  if (evt.lengthComputable) {\n                    var percent = parseInt(evt.loaded / evt.total * 100, 10) + \"%\";\n                    statusIcon.stop(true).addClass(\"k-progress\").css({\n                      \"width\": percent,\n                      \"marginLeft\": 0\n                    });\n                  }\n                },\n                error: function (xhr, status) {\n                  if (that.trigger(\"error\", {\n                    xhr: xhr,\n                    status: status\n                  })) {\n                    this.complete();\n                  }\n                },\n                stopProgress: function () {\n                  clearInterval(fakeProgress);\n                  statusIcon.stop(true).addClass(\"k-progress\")[0].style.cssText = \"\";\n                },\n                complete: function (xhr) {\n                  that.inRequest = false;\n\n                  if (this.noProgress) {\n                    setTimeout(this.stopProgress, 500);\n                  } else {\n                    this.stopProgress();\n                  }\n\n                  if (xhr.statusText == \"abort\") {\n                    statusIcon.remove();\n                  }\n                },\n                success: function (data) {\n                  statusIcon.addClass(\"k-complete\");\n\n                  try {\n                    var current = this,\n                        loaded = 10;\n\n                    if (current.noProgress) {\n                      statusIcon.width(loaded + \"%\");\n                      fakeProgress = setInterval(function () {\n                        current.progress({\n                          lengthComputable: true,\n                          loaded: Math.min(loaded, 100),\n                          total: 100\n                        });\n                        loaded += 10;\n                      }, 40);\n                    }\n\n                    that.angular(\"cleanup\", function () {\n                      return {\n                        elements: content.get()\n                      };\n                    });\n                    kendo.destroy(content);\n                    content.html(data);\n                  } catch (e) {\n                    var console = window.console;\n\n                    if (console && console.error) {\n                      console.error(e.name + \": \" + e.message + \" in \" + url);\n                    }\n\n                    this.error(this.xhr, \"error\");\n                  }\n\n                  if (complete) {\n                    complete.call(that, content);\n                  }\n\n                  that.angular(\"compile\", function () {\n                    return {\n                      elements: content.get()\n                    };\n                  });\n                  that.trigger(CONTENTLOAD, {\n                    item: element[0],\n                    contentElement: content[0]\n                  });\n                }\n              };\n\n              if (typeof url === \"object\") {\n                ajaxOptions = $.extend(true, {}, ajaxOptions, url);\n\n                if (isFunction(ajaxOptions.url)) {\n                  ajaxOptions.url = ajaxOptions.url();\n                }\n              }\n\n              that.xhr = $.ajax(ajaxOptions);\n            },\n            append: function (tab) {\n              var that = this,\n                  inserted = that._create(tab);\n\n              each(inserted.tabs, function (idx) {\n                var contents = inserted.contents[idx];\n                that.tabGroup.append(this);\n\n                if (that.options.tabPosition == \"bottom\") {\n                  that.tabWrapper.before(contents);\n                } else {\n                  that.wrapper.append(contents);\n                }\n\n                that.angular(\"compile\", function () {\n                  return {\n                    elements: [contents]\n                  };\n                });\n              });\n              updateFirstLast(that.tabGroup);\n\n              that._updateContentElements();\n\n              that.resize(true);\n              return that;\n            },\n            contentElement: function (itemIndex) {\n              if (isNaN(itemIndex - 0)) {\n                return undefined;\n              }\n\n              var contentElements = this.contentElements && this.contentElements[0] && !kendo.kineticScrollNeeded ? this.contentElements : this.contentAnimators;\n              var id = $(this.tabGroup.children()[itemIndex]).attr(\"aria-controls\");\n\n              if (contentElements) {\n                for (var i = 0, len = contentElements.length; i < len; i++) {\n                  if (contentElements.eq(i).closest(\".k-content\")[0].id == id) {\n                    return contentElements[i];\n                  }\n                }\n              }\n\n              return undefined;\n            },\n            contentHolder: function (itemIndex) {\n              var contentElement = $(this.contentElement(itemIndex)),\n                  scrollContainer = contentElement.children(\".km-scroll-container\");\n              return kendo.support.touch && scrollContainer[0] ? scrollContainer : contentElement;\n            },\n            deactivateTab: function (item) {\n              var that = this,\n                  animationSettings = that.options.animation,\n                  animation = animationSettings.open,\n                  close = extend({}, animationSettings.close),\n                  hasCloseAnimation = close && \"effects\" in close;\n              item = that.tabGroup.find(item);\n              close = extend(hasCloseAnimation ? close : extend({\n                reverse: true\n              }, animation), {\n                hide: true\n              });\n\n              if (kendo.size(animation.effects)) {\n                item.kendoRemoveClass(ACTIVESTATE, {\n                  duration: animation.duration\n                });\n              } else {\n                item.removeClass(ACTIVESTATE);\n              }\n\n              item.removeAttr(\"aria-selected\");\n              that.contentAnimators.filter(\".\" + ACTIVESTATE).kendoStop(true, true).kendoAnimate(close).removeClass(ACTIVESTATE).attr(\"aria-hidden\", true);\n            },\n            destroy: function () {\n              var that = this;\n              Widget.fn.destroy.call(that);\n\n              if (that._refreshHandler) {\n                that.dataSource.unbind(\"change\", that._refreshHandler);\n              }\n\n              that.wrapper.off(NS);\n              that.tabGroup.off(NS);\n\n              if (that._scrollableModeActive) {\n                that._scrollPrevButton.off().remove();\n\n                that._scrollNextButton.off().remove();\n              }\n\n              kendo.destroy(that.wrapper);\n            },\n            disable: function (element) {\n              this._toggleDisabled(element, false);\n\n              return this;\n            },\n            enable: function (element, state) {\n              this._toggleDisabled(element, state !== false);\n\n              return this;\n            },\n            insertAfter: function (tab, referenceTab) {\n              if ($(tab).is($(referenceTab))) {\n                referenceTab = this.tabGroup.find(referenceTab).prev();\n              } else {\n                referenceTab = this.tabGroup.find(referenceTab);\n              }\n\n              var that = this,\n                  inserted = that._create(tab),\n                  referenceContent = that.element.find(\"[id='\" + referenceTab.attr(\"aria-controls\") + \"']\");\n\n              each(inserted.tabs, function (idx) {\n                var contents = inserted.contents[idx];\n                var fromIndex = inserted.newTabsCreated ? that._contentUrls.length - (inserted.tabs.length - idx) : $(contents).index() - 1;\n                referenceTab.after(this);\n                referenceContent.after(contents);\n\n                that._moveUrlItem(fromIndex, $(this).index());\n\n                that.angular(\"compile\", function () {\n                  return {\n                    elements: [contents]\n                  };\n                });\n              });\n              updateFirstLast(that.tabGroup);\n\n              that._updateContentElements(inserted.newTabsCreated);\n\n              that.resize(true);\n              return that;\n            },\n            insertBefore: function (tab, referenceTab) {\n              if ($(tab).is($(referenceTab))) {\n                referenceTab = this.tabGroup.find(referenceTab).next();\n              } else {\n                referenceTab = this.tabGroup.find(referenceTab);\n              }\n\n              var that = this,\n                  inserted = that._create(tab),\n                  referenceContent = that.element.find(\"[id='\" + referenceTab.attr(\"aria-controls\") + \"']\");\n\n              each(inserted.tabs, function (idx) {\n                var contents = inserted.contents[idx];\n                var fromIndex = inserted.newTabsCreated ? that._contentUrls.length - (inserted.tabs.length - idx) : $(contents).index() - 1;\n                referenceTab.before(this);\n                referenceContent.before(contents);\n\n                that._moveUrlItem(fromIndex, $(this).index());\n\n                that.angular(\"compile\", function () {\n                  return {\n                    elements: [contents]\n                  };\n                });\n              });\n              updateFirstLast(that.tabGroup);\n\n              that._updateContentElements(inserted.newTabsCreated);\n\n              that.resize(true);\n              return that;\n            },\n            items: function () {\n              return this.tabGroup[0].children;\n            },\n            refresh: function (e) {\n              var that = this,\n                  options = that.options,\n                  encoded = kendo.getter(options.dataEncodedField),\n                  text = kendo.getter(options.dataTextField),\n                  content = kendo.getter(options.dataContentField),\n                  contentUrl = kendo.getter(options.dataContentUrlField),\n                  image = kendo.getter(options.dataImageUrlField),\n                  url = kendo.getter(options.dataUrlField),\n                  sprite = kendo.getter(options.dataSpriteCssClass),\n                  idx,\n                  tabs = [],\n                  tab,\n                  action,\n                  view = that.dataSource.view(),\n                  length;\n              e = e || {};\n              action = e.action;\n\n              if (action) {\n                view = e.items;\n              }\n\n              for (idx = 0, length = view.length; idx < length; idx++) {\n                tab = {\n                  text: text(view[idx])\n                };\n\n                if (options.dataEncodedField) {\n                  tab.encoded = encoded(view[idx]);\n                }\n\n                if (options.dataContentField) {\n                  tab.content = content(view[idx]);\n                }\n\n                if (options.dataContentUrlField) {\n                  tab.contentUrl = contentUrl(view[idx]);\n                }\n\n                if (options.dataUrlField) {\n                  tab.url = url(view[idx]);\n                }\n\n                if (options.dataImageUrlField) {\n                  tab.imageUrl = image(view[idx]);\n                }\n\n                if (options.dataSpriteCssClass) {\n                  tab.spriteCssClass = sprite(view[idx]);\n                }\n\n                tabs[idx] = tab;\n              }\n\n              if (e.action == \"add\") {\n                if (e.index < that.tabGroup.children().length) {\n                  that.insertBefore(tabs, that.tabGroup.children().eq(e.index));\n                } else {\n                  that.append(tabs);\n                }\n              } else if (e.action == \"remove\") {\n                for (idx = 0; idx < view.length; idx++) {\n                  that.remove(e.index);\n                }\n              } else if (e.action == \"itemchange\") {\n                idx = that.dataSource.view().indexOf(view[0]);\n\n                if (e.field === options.dataTextField) {\n                  that.tabGroup.children().eq(idx).find(\".k-link\").text(view[0].get(e.field));\n                }\n\n                if (e.field === options.dataUrlField) {\n                  that._contentUrls[idx] = view[0].get(e.field);\n                }\n              } else {\n                that.trigger(\"dataBinding\");\n                that.remove(\"li\");\n                that._contentUrls = [];\n                that.append(tabs);\n                that.trigger(\"dataBound\");\n              }\n            },\n            reload: function (element) {\n              element = this.tabGroup.find(element);\n              var that = this;\n              var contentUrls = that._contentUrls;\n              element.each(function () {\n                var item = $(this),\n                    contentUrl = item.find(\".\" + LINK).data(CONTENTURL) || contentUrls[item.index()],\n                    content = that.contentHolder(item.index());\n\n                if (contentUrl) {\n                  that.ajaxRequest(item, content, null, contentUrl);\n                }\n              });\n              return that;\n            },\n            remove: function (elements) {\n              var that = this;\n              var type = typeof elements;\n              var contents;\n\n              if (type === \"string\") {\n                elements = that.tabGroup.find(elements);\n              } else if (type === \"number\") {\n                elements = that.tabGroup.children().eq(elements);\n              }\n\n              contents = elements.map(function () {\n                var idx = $(this).index();\n                var content = that.contentElement(idx);\n                kendo.destroy(content);\n\n                that._removeUrlItem(idx);\n\n                return content;\n              });\n              elements.remove();\n              contents.empty();\n              contents.remove();\n\n              that._updateContentElements();\n\n              that.resize(true);\n              return that;\n            },\n            select: function (element) {\n              var that = this;\n\n              if (arguments.length === 0) {\n                return that.tabGroup.children(\"li.\" + ACTIVESTATE);\n              }\n\n              if (!isNaN(element)) {\n                element = that.tabGroup.children().get(element);\n              }\n\n              element = that.tabGroup.find(element);\n              $(element).each(function (index, item) {\n                item = $(item);\n\n                if (!item.hasClass(ACTIVESTATE) && !that.trigger(SELECT, {\n                  item: item[0],\n                  contentElement: that.contentHolder(item.index())[0]\n                })) {\n                  that.activateTab(item);\n                }\n              });\n              return that;\n            },\n            value: function (value) {\n              var that = this;\n\n              if (value !== undefined) {\n                if (value != that.value()) {\n                  that.tabGroup.children().each(function () {\n                    if (kendo.trim($(this).text()) == value) {\n                      that.select(this);\n                    }\n                  });\n                }\n              } else {\n                return that.select().text();\n              }\n            },\n            _active: function () {\n              var item = this.tabGroup.children().filter(\".\" + ACTIVESTATE);\n              item = item[0] ? item : this._endItem(\"first\");\n\n              if (item[0]) {\n                this._current(item);\n              }\n            },\n            _animations: function (options) {\n              if (options && \"animation\" in options && !options.animation) {\n                options.animation = {\n                  open: {\n                    effects: {}\n                  },\n                  close: {\n                    effects: {}\n                  }\n                }; // No animation\n              }\n            },\n            _appendUrlItem: function (url) {\n              this._contentUrls.push(url);\n            },\n            _attachEvents: function () {\n              var that = this,\n                  options = that.options;\n              that.wrapper.on(MOUSEENTER + NS + \" \" + MOUSELEAVE + NS, HOVERABLEITEMS, that._toggleHover).on(\"focus\" + NS, that._active.bind(that)).on(\"blur\" + NS, function () {\n                that._current(null);\n              });\n              that._keyDownProxy = that._keydown.bind(that);\n\n              if (options.navigatable) {\n                that.wrapper.on(\"keydown\" + NS, that._keyDownProxy);\n              }\n\n              that.tabGroup.on(CLICK + NS, \".k-state-disabled .k-link\", false).on(CLICK + NS, \" > \" + NAVIGATABLEITEMS, that._itemClick.bind(that));\n            },\n            _click: function (item) {\n              var that = this,\n                  link = item.find(\".\" + LINK),\n                  href = link.attr(HREF),\n                  collapse = that.options.collapsible,\n                  index = item.index(),\n                  contentHolder = that.contentHolder(index),\n                  prevent,\n                  isAnchor,\n                  neighbours = item.parent().children(),\n                  oldFocusedTab = neighbours.filter(\".\" + FOCUSEDSTATE);\n\n              if (item.closest(\".k-widget\")[0] != that.wrapper[0]) {\n                return;\n              }\n\n              if (item.is(\".\" + DISABLEDSTATE + (!collapse ? \",.\" + ACTIVESTATE : \"\"))) {\n                oldFocusedTab.removeClass(FOCUSEDSTATE);\n                that._focused = item;\n                item.addClass(FOCUSEDSTATE);\n\n                that._current(item);\n\n                if (that._scrollableModeActive) {\n                  that._scrollTabsToItem(item);\n                }\n\n                return true;\n              }\n\n              isAnchor = link.data(CONTENTURL) || that._contentUrls[index] || href && (href.charAt(href.length - 1) == \"#\" || href.indexOf(\"#\" + that.element[0].id + \"-\") != -1);\n              prevent = !href || isAnchor;\n\n              if (that.tabGroup.children(\"[data-animating]\").length) {\n                return prevent;\n              }\n\n              if (that.trigger(SELECT, {\n                item: item[0],\n                contentElement: contentHolder[0]\n              })) {\n                return true;\n              }\n\n              if (prevent === false) {\n                return;\n              }\n\n              if (collapse && item.is(\".\" + ACTIVESTATE)) {\n                that.deactivateTab(item);\n                return true;\n              }\n\n              if (that.activateTab(item)) {\n                prevent = true;\n              }\n\n              return prevent;\n            },\n            _create: function (tab) {\n              var that = this,\n                  tabs,\n                  contents,\n                  content,\n                  newTabsCreated = false;\n              tab = tab instanceof kendo.data.ObservableArray ? tab.toJSON() : tab;\n\n              if ($.isPlainObject(tab) || Array.isArray(tab)) {\n                tab = Array.isArray(tab) ? tab : [tab];\n                newTabsCreated = true;\n                tabs = map(tab, function (value, idx) {\n                  that._appendUrlItem(tab[idx].contentUrl || null);\n\n                  return $(TabStrip.renderItem({\n                    group: that.tabGroup,\n                    item: extend(value, {\n                      index: idx\n                    })\n                  }));\n                });\n                contents = map(tab, function (value, idx) {\n                  if (typeof value.content == \"string\" || value.contentUrl) {\n                    return $(TabStrip.renderContent({\n                      item: extend(value, {\n                        index: idx\n                      })\n                    }));\n                  }\n                });\n              } else {\n                if (typeof tab == \"string\" && tab[0] != \"<\") {\n                  tabs = that.element.find(tab);\n                } else {\n                  tabs = $(tab);\n                }\n\n                contents = $();\n                tabs.each(function () {\n                  if (/k-tabstrip-items/.test(this.parentNode.className)) {\n                    var element = that.element.find(\"[id='\" + this.getAttribute(\"aria-controls\") + \"']\");\n                    content = element;\n                  } else {\n                    content = $(\"<div class='\" + CONTENT + \"'/>\");\n                  }\n\n                  contents = contents.add(content);\n                });\n                updateTabClasses(tabs);\n              }\n\n              return {\n                tabs: tabs,\n                contents: contents,\n                newTabsCreated: newTabsCreated\n              };\n            },\n            _current: function (candidate) {\n              var that = this,\n                  focused = that._focused;\n\n              if (candidate === undefined) {\n                return focused;\n              }\n\n              if (focused) {\n                focused.removeClass(FOCUSEDSTATE);\n              }\n\n              if (candidate) {\n                if (!candidate.hasClass(ACTIVESTATE)) {\n                  candidate.addClass(FOCUSEDSTATE);\n                }\n\n                if (candidate[0].id) {\n                  that.element.attr(\"aria-activedescendant\", candidate[0].id);\n                }\n              }\n\n              that._focused = candidate;\n            },\n            _dataSource: function () {\n              var that = this;\n\n              if (that.dataSource && that._refreshHandler) {\n                that.dataSource.unbind(\"change\", that._refreshHandler);\n              } else {\n                that._refreshHandler = that.refresh.bind(that);\n              }\n\n              that.dataSource = kendo.data.DataSource.create(that.options.dataSource).bind(\"change\", that._refreshHandler);\n            },\n            _elementId: function (element, idx, tab) {\n              var elementId = element.attr(\"id\"),\n                  wrapperId = this.element.attr(\"id\"),\n                  guid = kendo.guid();\n\n              if (!elementId || elementId.indexOf(wrapperId + \"-\") > -1) {\n                var tabStripID = (wrapperId || guid) + \"-\";\n\n                if (tab) {\n                  tabStripID += \"tab-\";\n                }\n\n                return tabStripID + (idx + 1);\n              }\n\n              return elementId;\n            },\n            _endItem: function (action) {\n              return this.tabGroup.children(NAVIGATABLEITEMS)[action]();\n            },\n            _getItem: function (action) {\n              return this.tabGroup.children(KEYBOARDNAVIGATABLEITEMS)[action]();\n            },\n            _initialActivate: function () {\n              var that = this,\n                  selectedItems = that.tabGroup.children(\"li.\" + ACTIVESTATE),\n                  content = that.contentHolder(selectedItems.index());\n\n              if (selectedItems[0] && content.length > 0 && content[0].childNodes.length === 0) {\n                that.activateTab(selectedItems.eq(0));\n              }\n            },\n            _item: function (item, action) {\n              var endItem;\n\n              if (action === PREV) {\n                endItem = \"last\";\n              } else {\n                endItem = \"first\";\n              }\n\n              if (!item) {\n                return this._endItem(endItem);\n              }\n\n              item = item[action]();\n\n              if (!item[0]) {\n                item = this.tabGroup.children(KEYBOARDNAVIGATABLEITEMS)[endItem]();\n              }\n\n              if (item.hasClass(DISABLEDSTATE)) {\n                item.addClass(FOCUSEDSTATE);\n              }\n\n              if (item.hasClass(DISABLEDSTATE) || item.hasClass(ACTIVESTATE)) {\n                this._focused = item;\n              }\n\n              return item;\n            },\n            _itemClick: function (e) {\n              var that = this,\n                  wr = that.wrapper[0];\n\n              if (wr !== document.activeElement) {\n                var msie = kendo.support.browser.msie;\n\n                if (msie) {\n                  try {\n                    // does not scroll to the active element\n                    wr.setActive();\n                  } catch (j) {\n                    wr.focus();\n                  }\n                } else {\n                  wr.focus();\n                }\n              }\n\n              if (that._click($(e.currentTarget))) {\n                e.preventDefault();\n              }\n            },\n            _keydown: function (e) {\n              var that = this,\n                  key = e.keyCode,\n                  current = that._current(),\n                  rtl = that._isRtl,\n                  isHorizontal = /top|bottom/.test(that.options.tabPosition),\n                  action;\n\n              if (e.target != e.currentTarget || !current) {\n                return;\n              }\n\n              if (key === keys.DOWN && !isHorizontal) {\n                action = NEXT;\n              } else if (key === keys.UP && !isHorizontal) {\n                action = PREV;\n              } else if (key === keys.RIGHT && isHorizontal) {\n                action = rtl ? PREV : NEXT;\n              } else if (key === keys.LEFT && isHorizontal) {\n                action = rtl ? NEXT : PREV;\n              } else if (key == keys.ENTER || key == keys.SPACEBAR) {\n                that._click(current);\n\n                e.preventDefault();\n              } else if (key == keys.HOME) {\n                that._click(that._getItem(\"first\"));\n\n                e.preventDefault();\n                return;\n              } else if (key == keys.END) {\n                that._click(that._getItem(\"last\"));\n\n                e.preventDefault();\n                return;\n              }\n\n              if (action) {\n                that._click(that._item(current, action));\n\n                e.preventDefault();\n              }\n            },\n            _moveUrlItem: function (from, to) {\n              this._contentUrls.splice(to, 0, this._contentUrls.splice(from, 1)[0]);\n            },\n            _processContentUrls: function () {\n              var that = this;\n\n              if (that._contentUrls.length) {\n                that.tabGroup.children(\".k-item\").each(function (index, item) {\n                  var url = that._contentUrls[index];\n\n                  if (typeof url === 'string') {\n                    $(item).find(\">.\" + LINK).data(CONTENTURL, url);\n                  }\n                });\n              } else {\n                that._contentUrls.length = that.tabGroup.find(\"li.k-item\").length;\n              }\n            },\n            _removeUrlItem: function (index) {\n              this._contentUrls.splice(index, 1);\n            },\n            _resize: function () {\n              this._scrollable();\n            },\n            _scrollable: function () {\n              var that = this,\n                  options = that.options,\n                  wrapperOffsetWidth,\n                  tabGroupScrollWidth,\n                  scrollPrevButton,\n                  scrollNextButton;\n\n              if (that._scrollableAllowed()) {\n                that.wrapper.addClass(\"k-tabstrip-scrollable\");\n                wrapperOffsetWidth = that.wrapper[0].offsetWidth;\n                tabGroupScrollWidth = that.tabGroup[0].scrollWidth;\n\n                if (tabGroupScrollWidth > wrapperOffsetWidth && !that._scrollableModeActive) {\n                  that._nowScrollingTabs = false;\n                  that._isRtl = kendo.support.isRtl(that.element);\n                  var mouseDown = kendo.support.touch ? \"touchstart\" : \"mousedown\";\n                  var mouseUp = kendo.support.touch ? \"touchend\" : \"mouseup\";\n                  var browser = kendo.support.browser;\n                  var isRtlScrollDirection = that._isRtl && !browser.msie && !browser.edge;\n                  that.tabWrapper.prepend(scrollButtonHtml(\"prev\", \"k-i-arrow-60-left\"));\n                  that.tabWrapper.append(scrollButtonHtml(\"next\", \"k-i-arrow-60-right\"));\n                  scrollPrevButton = that._scrollPrevButton = that.tabWrapper.children(\".k-tabstrip-prev\");\n                  scrollNextButton = that._scrollNextButton = that.tabWrapper.children(\".k-tabstrip-next\");\n                  scrollPrevButton.on(mouseDown + NS, function () {\n                    that._nowScrollingTabs = true;\n\n                    that._scrollTabsByDelta(options.scrollable.distance * (isRtlScrollDirection ? 1 : -1));\n                  });\n                  scrollNextButton.on(mouseDown + NS, function () {\n                    that._nowScrollingTabs = true;\n\n                    that._scrollTabsByDelta(options.scrollable.distance * (isRtlScrollDirection ? -1 : 1));\n                  });\n                  scrollPrevButton.add(scrollNextButton).on(mouseUp + NS, function () {\n                    that._nowScrollingTabs = false;\n                  });\n                  that._scrollableModeActive = true;\n\n                  that._toggleScrollButtons();\n                } else if (that._scrollableModeActive && tabGroupScrollWidth <= wrapperOffsetWidth) {\n                  that._scrollableModeActive = false;\n                  that.wrapper.removeClass(\"k-tabstrip-scrollable\");\n\n                  that._scrollPrevButton.off().remove();\n\n                  that._scrollNextButton.off().remove();\n                } else if (!that._scrollableModeActive) {\n                  that.wrapper.removeClass(\"k-tabstrip-scrollable\");\n                } else {\n                  that._toggleScrollButtons();\n                }\n              }\n            },\n            _scrollableAllowed: function () {\n              var options = this.options;\n\n              if (options.scrollable && !options.scrollable.distance) {\n                options.scrollable = {\n                  distance: DEFAULTDISTANCE\n                };\n              }\n\n              return options.scrollable && !isNaN(options.scrollable.distance) && (options.tabPosition == \"top\" || options.tabPosition == \"bottom\");\n            },\n            _scrollTabsToItem: function (item) {\n              var that = this,\n                  tabGroup = that.tabGroup,\n                  currentScrollOffset = kendo.scrollLeft(tabGroup),\n                  itemWidth = outerWidth(item),\n                  itemOffset = that._isRtl ? item.position().left : item.position().left - tabGroup.children().first().position().left,\n                  tabGroupWidth = tabGroup[0].offsetWidth,\n                  browser = kendo.support.browser,\n                  itemPosition;\n\n              if (that._isRtl && (browser.mozilla || browser.webkit && browser.version >= 85)) {\n                currentScrollOffset = currentScrollOffset * -1;\n              }\n\n              if (that._isRtl) {\n                if (itemOffset < 0) {\n                  itemPosition = currentScrollOffset + itemOffset - (tabGroupWidth - currentScrollOffset);\n                } else if (itemOffset + itemWidth > tabGroupWidth) {\n                  itemPosition = currentScrollOffset + itemOffset - itemWidth;\n                }\n              } else {\n                if (currentScrollOffset + tabGroupWidth < itemOffset + itemWidth) {\n                  itemPosition = itemOffset + itemWidth - tabGroupWidth;\n                } else if (currentScrollOffset > itemOffset) {\n                  itemPosition = itemOffset;\n                }\n              }\n\n              tabGroup.finish().animate({\n                \"scrollLeft\": itemPosition\n              }, \"fast\", \"linear\", function () {\n                that._toggleScrollButtons();\n              });\n            },\n            _scrollTabsByDelta: function (delta) {\n              var that = this;\n              var tabGroup = that.tabGroup;\n              var scrLeft = kendo.scrollLeft(tabGroup);\n              var browser = kendo.support.browser;\n\n              if (that._isRtl && (browser.mozilla || browser.webkit && browser.version >= 85)) {\n                scrLeft = scrLeft * -1;\n              }\n\n              tabGroup.finish().animate({\n                \"scrollLeft\": scrLeft + delta\n              }, \"fast\", \"linear\", function () {\n                if (that._nowScrollingTabs && !jQuery.fx.off) {\n                  that._scrollTabsByDelta(delta);\n                } else {\n                  that._toggleScrollButtons();\n                }\n              });\n            },\n            _tabPosition: function () {\n              var that = this,\n                  tabPosition = that.options.tabPosition;\n              that.wrapper.addClass(\"k-floatwrap k-tabstrip-\" + tabPosition);\n\n              if (tabPosition == \"bottom\") {\n                that.tabWrapper.appendTo(that.wrapper);\n              }\n\n              if (tabPosition === \"left\" || tabPosition === \"right\") {\n                that.wrapper.attr(\"aria-orientation\", \"vertical\");\n              }\n\n              that.resize(true);\n            },\n            _toggleHover: function (e) {\n              $(e.currentTarget).toggleClass(HOVERSTATE, e.type == MOUSEENTER);\n            },\n            _toggleDisabled: function (element, enable) {\n              element = this.tabGroup.find(element);\n              element.each(function () {\n                $(this).toggleClass(DISABLEDSTATE, !enable).attr(\"aria-disabled\", !enable);\n              });\n            },\n            _toggleScrollButtons: function () {\n              var that = this,\n                  ul = that.tabGroup,\n                  scrollLeft = kendo.scrollLeft(ul);\n\n              that._scrollPrevButton.toggleClass('k-disabled', scrollLeft === 0);\n\n              that._scrollNextButton.toggleClass('k-disabled', scrollLeft === ul[0].scrollWidth - ul[0].offsetWidth);\n            },\n            _updateClasses: function () {\n              var that = this,\n                  tabs,\n                  activeItem,\n                  activeTab;\n              var isHorizontal = /top|bottom/.test(that.options.tabPosition);\n              that.wrapper.addClass(\"k-widget k-tabstrip\");\n\n              if (!that.tabGroup) {\n                that.tabGroup = that.wrapper.children(\"ul\");\n                that.tabGroup.wrap('<div />');\n                that.tabWrapper = that.tabGroup.parent();\n              }\n\n              if (!that.tabGroup[0]) {\n                that.tabGroup = $(\"<ul />\").prependTo(that.wrapper);\n                that.tabGroup.wrap('<div />');\n                that.tabWrapper = that.tabGroup.parent();\n              }\n\n              that.tabWrapper.addClass('k-tabstrip-items-wrapper');\n              that.tabWrapper.addClass(isHorizontal ? 'k-hstack' : 'k-vstack');\n              that.tabGroup.addClass('k-tabstrip-items k-reset');\n              tabs = that.tabGroup.find(\"li\").addClass(\"k-tabstrip-item k-item\");\n\n              if (tabs.length) {\n                activeItem = tabs.filter(\".\" + ACTIVESTATE).index();\n                activeTab = activeItem >= 0 ? activeItem : undefined;\n                that.tabGroup // Remove empty text nodes\n                .contents().filter(function () {\n                  return this.nodeType == 3 && !trim(this.nodeValue);\n                }).remove();\n              }\n\n              if (activeItem >= 0) {\n                tabs.eq(activeItem).addClass(TABONTOP);\n              }\n\n              that.contentElements = that.wrapper.children(\"div:not(.k-tabstrip-items-wrapper)\");\n              that.contentElements.addClass(CONTENT).eq(activeTab).addClass(ACTIVESTATE).css({\n                display: \"block\"\n              });\n\n              if (tabs.length) {\n                updateTabClasses(tabs);\n                updateFirstLast(that.tabGroup);\n\n                that._updateContentElements(true);\n              }\n            },\n            _updateContentElements: function (isInitialUpdate) {\n              var that = this,\n                  contentUrls = that._contentUrls,\n                  items = that.tabGroup.children(\".k-item\"),\n                  contentElements = that.wrapper.children(\"div:not(.k-tabstrip-items-wrapper)\"),\n                  _elementId = that._elementId.bind(that);\n\n              if (contentElements.length && items.length > contentElements.length) {\n                contentElements.each(function (idx) {\n                  // Generate an ID for each content element\n                  var contentId = _elementId($(this), idx),\n                      item = items.filter(\"[aria-controls=\" + (contentId || 0) + \"]\")[0],\n                      tabId;\n\n                  if (!item && isInitialUpdate) {\n                    // On initialization of the widget get the tab by its index\n                    item = items[idx];\n                  }\n\n                  if (item) {\n                    // set the tab aria-controls attribute to the content ID\n                    item.setAttribute(\"aria-controls\", contentId);\n                    tabId = item.id = _elementId($(item), idx, true);\n                    this.setAttribute(\"aria-labelledby\", tabId);\n                  } // set the get (possibly existing) ID on the content element\n\n\n                  this.setAttribute(\"id\", contentId);\n                });\n              } else {\n                items.each(function (idx) {\n                  var currentContent = contentElements.eq(idx),\n                      contentId = _elementId(currentContent, idx),\n                      tabId; // set the tab aria-controls attribute to the content ID\n\n\n                  this.setAttribute(\"aria-controls\", contentId);\n                  tabId = this.id = _elementId($(this), idx, true);\n\n                  if (!currentContent.length && contentUrls[idx]) {\n                    // Append content element in case contentUrl is used\n                    $(\"<div class='\" + CONTENT + \"'/>\").appendTo(that.wrapper).attr(\"id\", contentId);\n                  } else {\n                    // set the ID on the content element\n                    currentContent.attr(\"id\", contentId);\n\n                    if (!$(this).children(\".k-loading\")[0] && !contentUrls[idx]) {\n                      $(\"<span class='k-loading k-complete'/>\").prependTo(this);\n                    }\n                  }\n\n                  currentContent.attr(\"role\", \"tabpanel\");\n                  currentContent.attr(\"tabindex\", \"0\");\n                  currentContent.attr(\"aria-labelledby\", tabId);\n                  currentContent.filter(\":not(.\" + ACTIVESTATE + \")\").attr(\"aria-hidden\", true).attr(\"aria-expanded\", false);\n                  currentContent.filter(\".\" + ACTIVESTATE).attr(\"aria-expanded\", true);\n                });\n              }\n\n              that.contentElements = that.contentAnimators = that.wrapper.children(\"div:not(.k-tabstrip-items-wrapper)\"); // refresh the contents\n\n              that.tabsHeight = outerHeight(that.tabGroup) + parseInt(that.wrapper.css(\"border-top-width\"), 10) + parseInt(that.wrapper.css(\"border-bottom-width\"), 10);\n\n              if (kendo.kineticScrollNeeded && kendo.mobile.ui.Scroller) {\n                kendo.touchScroller(that.contentElements);\n                that.contentElements = that.contentElements.children(\".km-scroll-container\");\n              }\n            },\n            _wrapper: function () {\n              var that = this;\n\n              if (that.element.is(\"ul\")) {\n                that.wrapper = that.element.wrapAll(\"<div />\").parent();\n              } else {\n                that.wrapper = that.element;\n              }\n            }\n          }); // client-side rendering\n\n          extend(TabStrip, {\n            renderItem: function (options) {\n              options = extend({\n                tabStrip: {},\n                group: {}\n              }, options);\n              var empty = templates.empty,\n                  item = options.item;\n              return templates.item(extend(options, {\n                image: item.imageUrl ? templates.image : empty,\n                sprite: item.spriteCssClass ? templates.sprite : empty,\n                itemWrapper: templates.itemWrapper\n              }, rendering));\n            },\n            renderContent: function (options) {\n              return templates.content(extend(options, rendering));\n            }\n          });\n          kendo.ui.plugin(TabStrip);\n        })(window.kendo.jQuery);\n\n        return window.kendo;\n      }, __webpack_require__(3));\n      /* WEBPACK VAR INJECTION */\n\n    }).call(exports, __webpack_require__(1060));\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}