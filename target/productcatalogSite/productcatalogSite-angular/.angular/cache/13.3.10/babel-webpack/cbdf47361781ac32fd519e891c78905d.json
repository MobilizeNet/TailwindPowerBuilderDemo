{"ast":null,"code":"import { getTemplate } from '../../common';\nimport { hasValue } from '../utils';\nconst PieChartMixin = {\n  createLegendItem: function (value, point, options) {\n    const legendOptions = this.options.legend || {};\n    const labelsOptions = legendOptions.labels || {};\n    const inactiveItems = legendOptions.inactiveItems || {};\n    const inactiveItemsLabels = inactiveItems.labels || {};\n\n    if (options && options.visibleInLegend !== false) {\n      const pointVisible = options.visible !== false;\n      const labelTemplate = pointVisible ? getTemplate(labelsOptions) : getTemplate(inactiveItemsLabels) || getTemplate(labelsOptions);\n      let text = options.category;\n\n      if (labelTemplate) {\n        text = labelTemplate({\n          text: text,\n          series: options.series,\n          dataItem: options.dataItem,\n          percentage: options.percentage,\n          value: value\n        });\n      }\n\n      let itemLabelOptions, markerColor;\n\n      if (pointVisible) {\n        itemLabelOptions = {};\n        markerColor = point.color;\n      } else {\n        itemLabelOptions = {\n          color: inactiveItemsLabels.color,\n          font: inactiveItemsLabels.font\n        };\n        markerColor = (inactiveItems.markers || {}).color;\n      }\n\n      if (hasValue(text) && text !== \"\") {\n        this.legendItems.push({\n          active: pointVisible,\n          pointIndex: options.index,\n          text: text,\n          series: options.series,\n          markerColor: markerColor,\n          labels: itemLabelOptions\n        });\n      }\n    }\n  }\n};\nexport default PieChartMixin;","map":null,"metadata":{},"sourceType":"module"}