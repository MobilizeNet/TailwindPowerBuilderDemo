{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1739);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1664:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.dialog\");\n    /***/\n  },\n\n  /***/\n  1739:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1664)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            extend = $.extend,\n            isPlainObject = $.isPlainObject,\n            Class = kendo.Class;\n        var TaskBoardCommand = Class.extend({\n          init: function (options) {\n            this.options = options;\n            this.taskboard = options.taskboard;\n          },\n          _confirm: function (title, content, okText, cancel) {\n            var that = this,\n                taskboard = that.taskboard,\n                taskboardOptions = taskboard.options,\n                confirm;\n\n            if (isPlainObject(taskboardOptions.editable) && taskboardOptions.editable.confirmation === false) {\n              var fakePromise = $.Deferred();\n              fakePromise.resolve();\n              return fakePromise;\n            }\n\n            confirm = $(\"<div></div>\").kendoConfirm(extend({}, {\n              title: title,\n              content: content,\n              messages: {\n                okText: okText,\n                cancel: cancel\n              },\n              buttonLayout: \"normal\"\n            })).data(\"kendoConfirm\");\n            confirm.open();\n            setTimeout(function () {\n              confirm.element.trigger(\"focus\");\n            });\n            return confirm.result;\n          }\n        }); // Column commands\n\n        var AddColumnCommand = TaskBoardCommand.extend({\n          exec: function () {\n            var that = this,\n                taskboard = that.taskboard;\n\n            if (taskboard.trigger(\"editColumn\", {\n              column: null\n            })) {\n              return;\n            }\n\n            taskboard.columns().each(function (index, column) {\n              taskboard.enableByColumn(column, false);\n            });\n            taskboard.addColumn();\n          }\n        });\n        var EditColumnCommand = TaskBoardCommand.extend({\n          exec: function () {\n            var that = this,\n                options = that.options,\n                taskboard = that.taskboard;\n\n            if (taskboard.trigger(\"editColumn\", {\n              column: options.column\n            })) {\n              return;\n            }\n\n            taskboard.columns().each(function (index, column) {\n              taskboard.enableByColumn(column, false);\n            });\n            taskboard.editColumn(options.columnElement);\n          }\n        });\n        var DeleteColumnCommand = TaskBoardCommand.extend({\n          exec: function () {\n            var that = this,\n                options = that.options,\n                taskboard = that.taskboard,\n                taskboardOptions = taskboard.options,\n                messages = taskboardOptions.messages,\n                columnDS = taskboard.columnsDataSource;\n\n            var result = that._confirm(messages.deleteColumn, messages.deleteColumnConfirm, messages[\"delete\"], messages.cancel);\n\n            result.done(function () {\n              if (taskboard.trigger(\"deleteColumn\", {\n                column: options.column\n              })) {\n                taskboard.dataSource.cancelChanges();\n                return;\n              }\n\n              columnDS.remove(options.column);\n              columnDS.sync();\n            });\n          }\n        });\n        var SaveColumnCommand = TaskBoardCommand.extend({\n          exec: function () {\n            var that = this,\n                options = that.options,\n                taskboard = that.taskboard,\n                columnSettings = taskboard.options.columnSettings,\n                columnDS = taskboard.columnsDataSource,\n                column = options.column,\n                text = options.target.val();\n\n            if (taskboard.trigger(\"saveColumn\", {\n              column: options.column\n            })) {\n              taskboard.dataSource.cancelChanges();\n              return;\n            }\n\n            column.set(columnSettings.dataTextField, text);\n            columnDS.sync();\n          }\n        });\n        var CancelEditColumnCommand = TaskBoardCommand.extend({\n          exec: function () {\n            var that = this,\n                taskboard = that.taskboard,\n                columnDS = taskboard.columnsDataSource;\n            columnDS.cancelChanges();\n          }\n        }); //Move focus command\n\n        var MoveFocusCommand = TaskBoardCommand.extend({\n          exec: function () {\n            var that = this,\n                taskboard = that.taskboard,\n                options = that.options,\n                cardElement = options.cardElement,\n                columnElement = options.columnElement,\n                columns = taskboard.columns(),\n                currentColumnIndex = columnElement.index(),\n                direction = options.value,\n                columnIndex,\n                column;\n\n            switch (direction) {\n              case \"left\":\n                columnIndex = Math.max(0, currentColumnIndex - 1);\n                break;\n\n              case \"right\":\n                columnIndex = Math.min(columns.length - 1, currentColumnIndex + 1);\n                break;\n\n              default:\n                columnIndex = currentColumnIndex;\n                break;\n            }\n\n            that.columns = columns;\n            that.columnIndex = columnIndex;\n            that.column = column = taskboard._getColumnByElement(columns.eq(columnIndex));\n            that.cards = column.cards();\n\n            if (cardElement) {\n              that._moveFromCardFocus(direction, cardElement);\n            } else if (columnElement && direction === \"down\") {\n              that.cards.eq(0).trigger(\"focus\");\n            } else {\n              columns.eq(columnIndex).trigger(\"focus\");\n            }\n          },\n          _moveFromCardFocus: function (direction, cardElement) {\n            var that = this,\n                currentIndex = cardElement.index(),\n                focusCard,\n                index,\n                seekFocusableCard = false;\n\n            switch (direction) {\n              case \"up\":\n                index = currentIndex - 1;\n                break;\n\n              case \"down\":\n                index = currentIndex + 1;\n                break;\n\n              default:\n                seekFocusableCard = true;\n                index = currentIndex;\n                break;\n            }\n\n            focusCard = that.cards.eq(index);\n\n            if (!focusCard.length && seekFocusableCard) {\n              focusCard = that._getFocusableCard(index, direction);\n            }\n\n            if (index >= 0) {\n              focusCard.trigger(\"focus\");\n            } else {\n              that.options.columnElement.focus();\n            }\n          },\n          _getFocusableCard: function (index, direction) {\n            var that = this,\n                lastIndex = that.cards.length - 1,\n                focusable = that.cards.eq(Math.min(index, lastIndex));\n\n            if (focusable.length) {\n              return focusable;\n            }\n\n            if (that.columnIndex <= 0 || that.columnIndex >= that.columns.length - 1) {\n              return;\n            }\n\n            switch (direction) {\n              case \"left\":\n                that.columnIndex = Math.max(0, that.columnIndex - 1);\n                break;\n\n              case \"right\":\n                that.columnIndex = Math.min(that.columns.length - 1, that.columnIndex + 1);\n                break;\n            }\n\n            that.column = that.taskboard._getColumnByElement(that.columns.eq(that.columnIndex));\n            that.cards = that.column.cards();\n            return that._getFocusableCard(index, direction);\n          }\n        }); // Card commands\n\n        var TaskBoardBaseCardCommand = TaskBoardCommand.extend({\n          _updateOrder: function (column, currentIndex) {\n            var that = this,\n                taskboard = that.taskboard,\n                taskBoardOptions = taskboard.options,\n                dataOrderField = taskBoardOptions.dataOrderField,\n                options = that.options,\n                currentCard = options.card,\n                cardIndex = options.cardElement ? options.cardElement.index() : column.cards().length,\n                newIndex = currentIndex,\n                cards = column.cards().map(function (idx, card) {\n              return taskboard.dataItem(card);\n            }),\n                prevCard = cards[cardIndex - 1],\n                nextCard;\n            currentCard.set(dataOrderField, newIndex);\n\n            if (prevCard && prevCard.get(dataOrderField) >= currentCard.get(dataOrderField)) {\n              currentCard.set(dataOrderField, prevCard.get(dataOrderField) + 1);\n            }\n\n            for (var i = newIndex + 1; i < cards.length; i++) {\n              nextCard = cards[i];\n\n              if (nextCard.get(dataOrderField) <= currentCard.get(dataOrderField)) {\n                nextCard.set(dataOrderField, currentCard.get(dataOrderField) + 1);\n                currentCard = nextCard;\n              } else {\n                break;\n              }\n            }\n          }\n        });\n        var SelectCardCommand = TaskBoardCommand.extend({\n          exec: function () {\n            var that = this,\n                taskboard = that.taskboard,\n                options = that.options,\n                cardElement = options.cardElement;\n\n            taskboard._select(cardElement, true);\n\n            cardElement.focus();\n          }\n        });\n        var SaveChangesCommand = TaskBoardBaseCardCommand.extend({\n          exec: function () {\n            var that = this,\n                taskboard = that.taskboard,\n                taskBoardOptions = taskboard.options,\n                options = that.options,\n                receivedStatus = options.card.get(taskBoardOptions.dataStatusField),\n                targetColumn = taskboard._getColumn(receivedStatus),\n                activeElm = $(document.activeElement);\n\n            if (activeElm.length) {\n              activeElm.trigger(\"change\");\n            }\n\n            if (taskboard.pane && taskboard.pane.form && !taskboard.pane.form.validate()) {\n              return;\n            }\n\n            if (taskboard.trigger(\"saveCard\", {\n              card: options.card\n            })) {\n              taskboard.dataSource.cancelChanges();\n              return;\n            }\n\n            if (targetColumn && taskBoardOptions.dataOrderField) {\n              that._updateOrder(targetColumn, options.card.get(taskBoardOptions.dataOrderField));\n            }\n\n            taskboard.dataSource.sync().then(function () {\n              taskboard.columns().eq(0).trigger(\"focus\");\n            });\n          }\n        });\n        var DeleteCardCommand = TaskBoardCommand.extend({\n          exec: function () {\n            var that = this,\n                taskboard = that.taskboard,\n                messages = taskboard.options.messages,\n                options = that.options;\n\n            var result = that._confirm(messages.deleteCard, messages.deleteCardConfirm, messages[\"delete\"], messages.cancel);\n\n            result.done(function () {\n              if (taskboard.trigger(\"deleteCard\", {\n                card: options.card\n              })) {\n                taskboard.dataSource.cancelChanges();\n                return;\n              }\n\n              taskboard.dataSource.remove(options.card);\n              taskboard.dataSource.sync().then(function () {\n                taskboard.columns().eq(0).trigger(\"focus\");\n              });\n            }).fail(function () {\n              options.cardElement.trigger(\"focus\");\n            });\n          }\n        });\n        var MoveCardCommand = TaskBoardBaseCardCommand.extend({\n          exec: function () {\n            var that = this,\n                taskboard = that.taskboard,\n                taskBoardOptions = taskboard.options,\n                columnSettings = taskBoardOptions.columnSettings,\n                options = that.options,\n                receivedStatus = options.column.get(columnSettings.dataStatusField);\n            options.card.set(taskBoardOptions.dataStatusField, receivedStatus);\n\n            if (taskBoardOptions.dataOrderField) {\n              that._updateOrder(taskboard._getColumn(receivedStatus), options.newIndex);\n            }\n\n            taskboard.dataSource.sync();\n          }\n        });\n        var EditCardCommand = TaskBoardCommand.extend({\n          exec: function () {\n            var that = this,\n                taskboard = that.taskboard,\n                options = that.options;\n\n            if (taskboard.trigger(\"editCard\", {\n              card: options.card\n            })) {\n              return;\n            }\n\n            taskboard._openPane(extend({\n              pane: \"Edit\"\n            }, options));\n          }\n        });\n        var AddCardCommand = TaskBoardCommand.extend({\n          exec: function () {\n            var that = this,\n                taskboard = that.taskboard,\n                options = that.options;\n\n            if (taskboard.trigger(\"editCard\", {\n              card: null\n            })) {\n              return;\n            }\n\n            taskboard.dataSource.cancelChanges();\n\n            taskboard._openPane(extend({\n              pane: \"Create\"\n            }, options));\n          }\n        }); // Pane commands\n\n        var OpenPaneCommand = TaskBoardCommand.extend({\n          exec: function () {\n            var that = this,\n                options = that.options,\n                taskboard = that.taskboard;\n\n            taskboard._openPane({\n              pane: options.value,\n              card: options.card,\n              cardElement: options.cardElement,\n              column: options.column,\n              columnElement: options.columnElement\n            });\n          }\n        });\n        var ClosePaneCommand = TaskBoardCommand.extend({\n          exec: function () {\n            var that = this,\n                taskboard = that.taskboard;\n\n            taskboard._closePane();\n\n            taskboard.dataSource.cancelChanges();\n          }\n        }); // Search command\n\n        var SearchCommand = TaskBoardCommand.extend({\n          exec: function () {\n            var that = this,\n                value = that.options.value,\n                taskboard = that.taskboard,\n                taskboardOptions = taskboard.options,\n                searchOptions = taskboardOptions.search,\n                operator = searchOptions.operator,\n                fields = searchOptions && searchOptions.fields || [taskboardOptions.dataTitleField, taskboardOptions.dataDescriptionField],\n                filters;\n            filters = that._buildFilters(fields, operator, value);\n            taskboard.dataSource.filter(filters);\n          },\n          _buildFilters: function (fields, operator, value) {\n            var filters = fields.map(function (field) {\n              return {\n                field: field,\n                operator: operator,\n                value: value\n              };\n            });\n            return {\n              logic: \"or\",\n              filters: filters\n            };\n          }\n        });\n        extend(kendo.ui.taskboard, {\n          Command: TaskBoardCommand,\n          commands: {\n            AddColumnCommand: AddColumnCommand,\n            EditColumnCommand: EditColumnCommand,\n            DeleteColumnCommand: DeleteColumnCommand,\n            SaveColumnCommand: SaveColumnCommand,\n            CancelEditColumnCommand: CancelEditColumnCommand,\n            OpenPaneCommand: OpenPaneCommand,\n            ClosePaneCommand: ClosePaneCommand,\n            SelectCardCommand: SelectCardCommand,\n            MoveFocusCommand: MoveFocusCommand,\n            SaveChangesCommand: SaveChangesCommand,\n            DeleteCardCommand: DeleteCardCommand,\n            MoveCardCommand: MoveCardCommand,\n            EditCardCommand: EditCardCommand,\n            AddCardCommand: AddCardCommand,\n            SearchCommand: SearchCommand\n          }\n        });\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}