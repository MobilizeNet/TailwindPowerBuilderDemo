{"ast":null,"code":"import { geometry as g } from '@progress/kendo-drawing';\nimport { Class, setDefaultOptions, limitValue, rad, deg, deepExtend } from '../common';\nimport { Location } from './location';\nimport { datums } from './datums';\nlet math = Math,\n    atan = math.atan,\n    exp = math.exp,\n    pow = math.pow,\n    sin = math.sin,\n    log = math.log,\n    tan = math.tan,\n    Point = g.Point;\nlet PI = math.PI,\n    PI_DIV_2 = PI / 2,\n    PI_DIV_4 = PI / 4,\n    DEG_TO_RAD = PI / 180;\nlet WGS84 = datums.WGS84; // WGS 84 / World Mercator\n\nexport class Mercator extends Class {\n  constructor(options) {\n    super();\n    this.initProperties();\n\n    this._initOptions(options);\n  }\n\n  _initOptions(options) {\n    this.options = deepExtend({}, this.options, options);\n  }\n\n  initProperties() {\n    // super.initProperties();\n    deepExtend(this, {\n      MAX_LNG: 180,\n      MAX_LAT: 85.0840590501,\n      INVERSE_ITERATIONS: 15,\n      INVERSE_CONVERGENCE: 1e-12\n    });\n  }\n\n  forward(loc, clamp) {\n    let proj = this,\n        options = proj.options,\n        datum = options.datum,\n        r = datum.a,\n        lng0 = options.centralMeridian,\n        lat = limitValue(loc.lat, -proj.MAX_LAT, proj.MAX_LAT),\n        lng = clamp ? limitValue(loc.lng, -proj.MAX_LNG, proj.MAX_LNG) : loc.lng,\n        x = rad(lng - lng0) * r,\n        y = proj._projectLat(lat);\n\n    return new Point(x, y);\n  }\n\n  _projectLat(lat) {\n    let datum = this.options.datum,\n        ecc = datum.e,\n        r = datum.a,\n        y = rad(lat),\n        ts = tan(PI_DIV_4 + y / 2),\n        con = ecc * sin(y),\n        p = pow((1 - con) / (1 + con), ecc / 2); // See: http://en.wikipedia.org/wiki/Mercator_projection#Generalization_to_the_ellipsoid\n\n    return r * log(ts * p);\n  }\n\n  inverse(point, clamp) {\n    let proj = this,\n        options = proj.options,\n        datum = options.datum,\n        r = datum.a,\n        lng0 = options.centralMeridian,\n        lng = point.x / (DEG_TO_RAD * r) + lng0,\n        lat = limitValue(proj._inverseY(point.y), -proj.MAX_LAT, proj.MAX_LAT);\n\n    if (clamp) {\n      lng = limitValue(lng, -proj.MAX_LNG, proj.MAX_LNG);\n    }\n\n    return new Location(lat, lng);\n  }\n\n  _inverseY(y) {\n    let proj = this,\n        datum = proj.options.datum,\n        r = datum.a,\n        ecc = datum.e,\n        ecch = ecc / 2,\n        ts = exp(-y / r),\n        phi = PI_DIV_2 - 2 * atan(ts),\n        i;\n\n    for (i = 0; i <= proj.INVERSE_ITERATIONS; i++) {\n      let con = ecc * sin(phi),\n          p = pow((1 - con) / (1 + con), ecch),\n          dphi = PI_DIV_2 - 2 * atan(ts * p) - phi;\n      phi += dphi;\n\n      if (math.abs(dphi) <= proj.INVERSE_CONVERGENCE) {\n        break;\n      }\n    }\n\n    return deg(phi);\n  }\n\n}\nsetDefaultOptions(Mercator, {\n  centralMeridian: 0,\n  datum: WGS84\n}); // WGS 84 / Pseudo-Mercator\n// Used by Google Maps, Bing, OSM, etc.\n// Spherical projection of ellipsoidal coordinates.\n\nexport class SphericalMercator extends Mercator {\n  initProperties() {\n    super.initProperties();\n    deepExtend(this, {\n      MAX_LAT: 85.0511287798\n    });\n  }\n\n  _projectLat(lat) {\n    let r = this.options.datum.a,\n        y = rad(lat),\n        ts = tan(PI_DIV_4 + y / 2);\n    return r * log(ts);\n  }\n\n  _inverseY(y) {\n    let r = this.options.datum.a,\n        ts = exp(-y / r);\n    return deg(PI_DIV_2 - 2 * atan(ts));\n  }\n\n}\nexport class Equirectangular extends Class {\n  forward(loc) {\n    return new Point(loc.lng, loc.lat);\n  }\n\n  inverse(point) {\n    return new Location(point.y, point.x);\n  }\n\n} // This is the projected coordinate system used for rendering maps in Google Maps, OpenStreetMap, etc\n// Unit: metre\n// Geodetic CRS: WGS 84\n// Scope: Certain Web mapping and visualisation applications. It is not a recognised geodetic system: for that see ellipsoidal Mercator CRS code 3395 (WGS 84 / World Mercator).\n// Remarks: Uses spherical development of ellipsoidal coordinates. Relative to WGS 84 / World Mercator (CRS code 3395) errors of 0.7 percent in scale and differences in northing of up to 43km in the map (equivalent to 21km on the ground) may arise.\n// Area of use: World between 85.06째S and 85.06째N.\n// Coordinate system: Cartesian 2D CS. Axes: easting, northing (X,Y). Orientations: east, north. UoM: m.\n// https://epsg.io/3857\n\nexport class EPSG3857 extends Class {\n  constructor() {\n    super();\n    let crs = this,\n        proj = crs._proj = new SphericalMercator();\n    let c = this.c = 2 * PI * proj.options.datum.a; // transfrom matrix\n    // Scale circumference to 1, mirror Y and shift origin to top left\n\n    this._tm = g.transform().translate(0.5, 0.5).scale(1 / c, -1 / c); // Inverse transform matrix\n\n    this._itm = g.transform().scale(c, -c).translate(-0.5, -0.5);\n  } // Location <-> Point (screen coordinates for a given scale)\n\n\n  toPoint(loc, scale, clamp) {\n    let point = this._proj.forward(loc, clamp);\n\n    return point.transform(this._tm).scale(scale || 1);\n  }\n\n  toLocation(point, scale, clamp) {\n    let newPoint = point.clone().scale(1 / (scale || 1)).transform(this._itm);\n    return this._proj.inverse(newPoint, clamp);\n  }\n\n} // Unit: metre\n// Geodetic CRS: WGS 84\n// Scope: Very small scale mapping.\n// Remarks: Euro-centric view of world excluding polar areas.\n// Area of use: World between 80째S and 84째N.\n// Coordinate system: Cartesian 2D CS. Axes: easting, northing (E,N). Orientations: east, north. UoM: m.\n// https://epsg.io/3395\n\nexport class EPSG3395 extends Class {\n  constructor() {\n    super();\n    this._proj = new Mercator();\n  }\n\n  toPoint(loc) {\n    return this._proj.forward(loc);\n  }\n\n  toLocation(point) {\n    return this._proj.inverse(point);\n  }\n\n} // Unit: degree\n// Geodetic CRS: WGS 84\n// Scope: Horizontal component of 3D system. Used by the GPS satellite navigation system and for NATO military geodetic surveying.\n// Area of use: World.\n// Coordinate system: Ellipsoidal 2D CS. Axes: latitude, longitude. Orientations: north, east. UoM: degree\n// https://epsg.io/4326\n\nexport class EPSG4326 extends Class {\n  constructor() {\n    super();\n    this._proj = new Equirectangular();\n  }\n\n  toPoint(loc) {\n    return this._proj.forward(loc);\n  }\n\n  toLocation(point) {\n    return this._proj.inverse(point);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}