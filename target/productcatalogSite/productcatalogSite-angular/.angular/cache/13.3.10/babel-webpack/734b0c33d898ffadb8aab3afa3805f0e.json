{"ast":null,"code":"import toChartAxisRanges from './to-chart-axis-ranges';\nimport { X, Y } from '../../common/constants';\nimport { Class, deepExtend } from '../../common';\nimport { limitValue } from '../../drawing-utils'; // Limit the zoom rate between 1% and 90% per mousewheel event.\n// At zoom rates close to 100% the axis range quickly becomes 0.\n\nconst MIN_RATE = 0.01;\nconst MAX_RATE = 0.9;\nconst DEFAULT_RATE = 0.3;\n\nclass MousewheelZoom extends Class {\n  constructor(chart, options) {\n    super();\n    this.chart = chart;\n    this.options = deepExtend({\n      rate: DEFAULT_RATE\n    }, this.options, options);\n  }\n\n  updateRanges(delta, coords) {\n    const lock = (this.options.lock || \"\").toLowerCase();\n    const axisRanges = [];\n    const axes = this.chart._plotArea.axes;\n\n    for (let idx = 0; idx < axes.length; idx++) {\n      const axis = axes[idx];\n      const vertical = axis.options.vertical;\n\n      if (!(lock === X && !vertical) && !(lock === Y && vertical) && axis.zoomRange) {\n        const rate = limitValue(this.options.rate, MIN_RATE, MAX_RATE);\n        const range = axis.zoomRange(-delta * rate, coords);\n\n        if (range) {\n          axisRanges.push({\n            axis: axis,\n            range: range\n          });\n        }\n      }\n    }\n\n    this.axisRanges = axisRanges;\n    return toChartAxisRanges(axisRanges);\n  }\n\n  zoom() {\n    const axisRanges = this.axisRanges;\n    const plotArea = this.chart._plotArea;\n\n    if (axisRanges && axisRanges.length && plotArea.updateAxisOptions) {\n      for (let idx = 0; idx < axisRanges.length; idx++) {\n        const axisRange = axisRanges[idx];\n        plotArea.updateAxisOptions(axisRange.axis, axisRange.range);\n      }\n\n      plotArea.redraw(plotArea.panes);\n    }\n  }\n\n  destroy() {\n    delete this.chart;\n  }\n\n}\n\nexport default MousewheelZoom;","map":null,"metadata":{},"sourceType":"module"}