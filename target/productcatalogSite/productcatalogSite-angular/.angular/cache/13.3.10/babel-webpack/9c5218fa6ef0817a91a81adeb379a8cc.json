{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1271);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1051:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.core\");\n    /***/\n  },\n\n  /***/\n  1271:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1051), __webpack_require__(1272)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"filter\",\n        name: \"Filter\",\n        category: \"web\",\n        depends: [\"core\", \"buttongroup\"]\n      };\n      var editors = {\n        \"number\": \"<input id='#=id#' type='text' aria-label='#=field#' title='#=field#' data-#=ns#role='numerictextbox' data-#=ns#bind='value: value'/>\",\n        \"string\": \"<span class='k-textbox k-input k-input-md k-rounded-md k-input-solid'><input id='#=id#' type='text' aria-label='#=field#' title='#=field#' class='k-input-inner' data-#=ns#bind='value: value'/></span>\",\n        \"boolean\": \"<input id='#=id#' class='k-checkbox k-checkbox-md k-rounded-md' aria-label='#=field#' data-#=ns#role='checkbox' data-#=ns#bind='checked: value' type='checkbox'>\",\n        \"date\": \"<input id='#=id#' type='text' aria-label='#=field#' title='#=field#' data-#=ns#role='datepicker' data-#=ns#bind='value: value'/>\"\n      };\n      var defaultValues = {\n        \"number\": 0,\n        \"boolean\": false,\n        \"string\": \"\",\n        \"date\": \"\"\n      };\n      var operatorsTemplate = \"<select data-#=ns#bind='value: operator' title='#=operatorsLabel#' data-#=ns#role='dropdownlist'>\" + \"#for(var op in operators){#\" + \"<option value='#=op#'>#=operators[op].text || operators[op]#</option>\" + \"#}#\" + \"</select>\";\n      var logicTemplate = \"<div data-#=ns#bind='value: logic' data-#=ns#role='filterbuttongroup'>\" + \"#for(var op in operators){#\" + \"<span value='#=op#'>#=operators[op]#</span>\" + \"#}#\" + \"</div>\";\n      var mainContainer = \"<ul class='k-filter-container'>\" + \"<li class='k-filter-group-main'></li>\" + \"</ul>\";\n      var mainLogicTemplate = \"<div class='k-filter-toolbar'>\" + \"<div class='k-toolbar' id='#=uid#'>\" + \"<div class='k-filter-toolbar-item'>\" + logicTemplate + \"</div>\" + \"<div class='k-filter-toolbar-item'>\" + \"<button data-role='button' class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-icon-button' role='button' aria-disabled='false' title='#=addExpression#' aria-label='#=addExpression#' tabindex='0'>\" + \"<span class='k-button-icon k-icon k-i-filter-add-expression'>\" + \"</span>\" + \"</button>\" + \"</div>\" + \"<div class='k-filter-toolbar-item'>\" + \"<button data-role='button' class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-icon-button' role='button' aria-disabled='false' title='#=addGroup#' aria-label='#=addGroup#' tabindex='0'>\" + \"<span class='k-button-icon k-icon k-i-filter-add-group'>\" + \"</span>\" + \"</button>\" + \"</div>\" + \"<div class='k-filter-toolbar-item'>\" + \"<button data-role='button' class='k-button k-button-md k-rounded-md k-button-flat k-button-flat-base k-icon-button' role='button' title='#=close#' aria-label='#=close#' aria-disabled='false' tabindex='0'>\" + \"<span class='k-button-icon k-icon k-i-close'>\" + \"</span>\" + \"</button>\" + \"</div>\" + \"</div>\" + \"</div>\";\n      var logicItemTemplate = \"<li class='k-filter-item'>\" + \"<div class='k-filter-toolbar'>\" + \"<div class='k-toolbar'>\" + \"<div class='k-filter-toolbar-item'>\" + logicTemplate + \"</div>\" + \"<div class='k-filter-toolbar-item'>\" + \"<button data-role='button' class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-icon-button' role='button' title='#=addExpression#' aria-label='#=addExpression#' aria-disabled='false' tabindex='0'>\" + \"<span class='k-button-icon k-icon k-i-filter-add-expression'>\" + \"</span>\" + \"</button>\" + \"</div>\" + \"<div class='k-filter-toolbar-item'>\" + \"<button data-role='button' class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-icon-button' role='button' title='#=addGroup#' aria-label='#=addGroup#' aria-disabled='false' tabindex='0'>\" + \"<span class='k-button-icon k-icon k-i-filter-add-group'>\" + \"</span>\" + \"</button>\" + \"</div>\" + \"<div class='k-filter-toolbar-item'>\" + \"<button data-role='button' class='k-button k-button-md k-rounded-md k-button-flat k-button-flat-base k-icon-button' role='button' title='#=close#' aria-label='#=close#' aria-disabled='false' tabindex='0'>\" + \"<span class='k-button-icon k-icon k-i-close'>\" + \"</span>\" + \"</button>\" + \"</div>\" + \"</div>\" + \"</div>\" + \"</li>\";\n      var expressionItemTemplate = \"<li class='k-filter-item'>\" + \"<div class='k-filter-toolbar'>\" + \"<div class='k-toolbar' id='#=uid#'>\" + \"<div class='k-filter-toolbar-item k-filter-field'>\" + \"<select data-#=ns#bind='value: field' title='#=fieldsLabel#' class='k-filter-dropdown' data-auto-width='true' data-#=ns#role='dropdownlist'>\" + \"#for(var current in fields){#\" + \"<option value='#=fields[current].name#'>#=fields[current].label#</option>\" + \"#}#\" + \"</select>\" + \"</div>\" + \"<div class='k-filter-toolbar-item k-filter-operator'>\" + \"</div>\" + \"<div class='k-filter-toolbar-item k-filter-value'>\" + \"</div>\" + \"<div class='k-filter-toolbar-item'>\" + \"<button data-role='button' class='k-button k-button-md k-rounded-md k-button-flat k-button-flat-base k-icon-button' role='button' title='#=close#' aria-label='#=close#' aria-disabled='false' tabindex='0'>\" + \"<span class='k-button-icon k-icon k-i-close'>\" + \"</span>\" + \"</button>\" + \"</div>\" + \"</div>\" + \"</div>\" + \"</li>\";\n\n      (function ($) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            Widget = ui.Widget,\n            ButtonGroup = ui.ButtonGroup,\n            CHANGE = \"change\",\n            NS = \".kendoFilter\",\n            EQ = \"Is equal to\",\n            NEQ = \"Is not equal to\";\n        var FilterButtonGroup = ButtonGroup.extend({\n          init: function (element, options) {\n            var that = this;\n            ButtonGroup.fn.init.call(that, element, options);\n          },\n          options: {\n            name: \"FilterButtonGroup\"\n          },\n          value: function (value) {\n            if (value === undefined) {\n              return this._value;\n            }\n\n            this._value = value;\n            ButtonGroup.fn.select.call(this, this.wrapper.find(\"[value='\" + value + \"']\")[0]);\n            this.trigger(CHANGE);\n          },\n          select: function (button) {\n            if (button !== -1) {\n              this.value($(button).attr(\"value\"));\n            }\n          }\n        });\n        var Filter = Widget.extend({\n          init: function (element, options) {\n            var that = this;\n            var html;\n            Widget.fn.init.call(that, element, options);\n            that.element = $(element).addClass(\"k-widget k-filter\");\n            that.dataSource = options.dataSource;\n            that.operators = $.extend(that.options.operators, options.operators);\n\n            that._getFieldsInfo();\n\n            that._modelChangeHandler = that._modelChange.bind(that);\n\n            that._renderMain();\n\n            if (options.expression) {\n              that._addExpressionTree(that.filterModel);\n            }\n\n            that._renderApplyButton();\n\n            if (that.options.expressionPreview) {\n              if (!that._previewContainer) {\n                that._previewContainer = $('<div class=\"k-filter-preview\"></div>').insertAfter(that.element.children().eq(0));\n              }\n\n              html = that._createPreview(that.filterModel.toJSON());\n\n              that._previewContainer.html(html);\n            }\n\n            that._attachEvents();\n\n            that.hasCustomOperators();\n          },\n          events: [CHANGE],\n          options: {\n            name: \"Filter\",\n            dataSource: null,\n            expression: null,\n            applyButton: false,\n            fields: [],\n            mainLogic: \"and\",\n            messages: {\n              and: \"And\",\n              or: \"Or\",\n              apply: \"Apply\",\n              close: \"Close\",\n              addExpression: \"Add Expression\",\n              fields: \"Fields\",\n              operators: \"Operators\",\n              addGroup: \"Add Group\"\n            },\n            operators: {\n              string: {\n                eq: EQ,\n                neq: NEQ,\n                startswith: \"Starts with\",\n                contains: \"Contains\",\n                doesnotcontain: \"Does not contain\",\n                endswith: \"Ends with\",\n                isnull: \"Is null\",\n                isnotnull: \"Is not null\",\n                isempty: \"Is empty\",\n                isnotempty: \"Is not empty\",\n                isnullorempty: \"Has no value\",\n                isnotnullorempty: \"Has value\"\n              },\n              number: {\n                eq: EQ,\n                neq: NEQ,\n                gte: \"Is greater than or equal to\",\n                gt: \"Is greater than\",\n                lte: \"Is less than or equal to\",\n                lt: \"Is less than\",\n                isnull: \"Is null\",\n                isnotnull: \"Is not null\"\n              },\n              date: {\n                eq: EQ,\n                neq: NEQ,\n                gte: \"Is after or equal to\",\n                gt: \"Is after\",\n                lte: \"Is before or equal to\",\n                lt: \"Is before\",\n                isnull: \"Is null\",\n                isnotnull: \"Is not null\"\n              },\n              \"boolean\": {\n                eq: EQ,\n                neq: NEQ\n              }\n            }\n          },\n          applyFilter: function () {\n            var filter = this.filterModel.toJSON();\n\n            if (this._hasCustomOperators) {\n              this._mapOperators(filter);\n            }\n\n            if (this._hasFieldsFilter(filter.filters || [])) {\n              this._removeEmptyGroups(filter.filters);\n\n              this.dataSource.filter(filter);\n            } else {\n              this.dataSource.filter({});\n            }\n          },\n          destroy: function () {\n            this.element.off(NS);\n            kendo.destroy(this.element.find(\".k-filter-group-main\"));\n            this._previewContainer = null;\n            this._applyButton = null;\n            this._modelChangeHandler = null;\n            Widget.fn.destroy.call(this);\n          },\n          setOptions: function (options) {\n            kendo.deepExtend(this.options, options);\n            this.destroy();\n            this.element.empty();\n            this.init(this.element, this.options);\n          },\n          getOptions: function () {\n            var result = $.extend(true, {}, this.options);\n            delete result.dataSource;\n            result.expression = this.filterModel.toJSON();\n            return result;\n          },\n          _addExpressionTree: function (model) {\n            if (model.filters) {\n              var parent = this.element.find(\"[id=\" + model.uid + \"]\");\n\n              for (var i = 0; i < model.filters.length; i++) {\n                if (model.filters[i].logic) {\n                  this._addGroup(parent, model.filters[i]);\n                } else {\n                  this._addExpression(parent, model.filters[i]);\n                }\n\n                if (model.filters[i].filters) {\n                  this._addExpressionTree(model.filters[i]);\n                }\n              }\n            }\n          },\n          _attachEvents: function () {\n            var that = this;\n            that.element.on(\"click\" + NS, \"button.k-button\", function (e) {\n              e.preventDefault();\n              var button = $(e.currentTarget);\n              var icon = button.find(\"span\");\n              var command = (icon.length ? icon : button).attr(\"class\").split(\"-\").pop();\n\n              if (command == \"close\") {\n                that._removeExpression(button.closest(\".k-toolbar\"));\n              } else if (command == \"expression\") {\n                that._addExpression(button.closest(\".k-toolbar\"));\n              } else if (command == \"group\") {\n                that._addGroup(button.closest(\".k-toolbar\"));\n              } else if (command == \"apply\") {\n                that.applyFilter();\n              }\n            });\n          },\n          _addExpression: function (parentContainer, model) {\n            var that = this;\n            var parentUID = parentContainer.attr(\"id\");\n            var itemsContainer = parentContainer.closest(\".k-filter-toolbar\").next(\"ul.k-filter-lines\");\n            var field = model ? that._fields[model.field] : that._defaultField;\n            var expressionModel;\n            var itemHTML = \"\";\n\n            if (model) {\n              expressionModel = model;\n            } else {\n              expressionModel = findModel(that.filterModel, parentUID);\n\n              if (!expressionModel.filters) {\n                expressionModel.set(\"filters\", []);\n              }\n\n              expressionModel = that._addNewModel(expressionModel.filters, field);\n            }\n\n            if (!itemsContainer.length) {\n              itemsContainer = $(\"<ul class='k-filter-lines'></ul>\").appendTo(parentContainer.closest(\"li\"));\n            }\n\n            itemHTML = $(kendo.template(expressionItemTemplate)({\n              fields: that._fields,\n              operators: that.operators[field.type],\n              close: that.options.messages.close,\n              fieldsLabel: that.options.messages.fields,\n              uid: expressionModel.uid,\n              ns: kendo.ns\n            })).appendTo(itemsContainer);\n\n            that._addExpressionControls(itemHTML.find(\".k-toolbar\"), field, expressionModel);\n\n            if (!model) {\n              that._expressionChange();\n            }\n          },\n          _addExpressionControls: function (container, field, filterModel) {\n            var items = container.find(\".k-filter-toolbar-item\");\n            var operatorsContainer = items.eq(1);\n            var editorContainer = items.eq(2);\n            kendo.destroy(operatorsContainer);\n            kendo.destroy(editorContainer);\n            operatorsContainer.empty();\n            editorContainer.empty();\n\n            this._appendOperators(operatorsContainer, field);\n\n            this._appendEditor(editorContainer, field);\n\n            this._bindModel(container, filterModel);\n\n            this._showHideEditor(container, filterModel);\n          },\n          _appendOperators: function (container, field) {\n            $(kendo.template(operatorsTemplate)({\n              operators: field.operators && field.operators[field.type] ? field.operators[field.type] : this.operators[field.type],\n              operatorsLabel: this.options.messages.operators,\n              ns: kendo.ns\n            })).appendTo(container);\n          },\n          _appendEditor: function (container, field) {\n            if (kendo.isFunction(field.editor)) {\n              field.editor(container, $.extend(true, {}, {\n                field: field.name\n              }));\n            } else {\n              $(kendo.template(field.editor)({\n                ns: kendo.ns,\n                field: field.name,\n                id: kendo.guid()\n              })).appendTo(container);\n            }\n          },\n          _addNewModel: function (parent, field) {\n            var filterModel;\n            var type = field.type;\n            var operators = field.operators;\n            var operator;\n\n            if (!operators) {\n              operators = this.options.operators;\n            }\n\n            operator = Object.keys(operators[type])[0];\n            parent.push({\n              field: field.name\n            });\n            filterModel = parent[parent.length - 1];\n            filterModel.set(\"value\", field.defaultValue);\n            filterModel.set(\"operator\", operator);\n            return filterModel;\n          },\n          _addGroup: function (parent, model) {\n            var that = this;\n            var filterModel = that.filterModel;\n            var parentUID = parent.attr(\"id\");\n            var itemsContainer = parent.closest(\".k-filter-toolbar\").next(\"ul.k-filter-lines\");\n            var logicHTML;\n\n            if (model) {\n              filterModel = model;\n            } else {\n              filterModel = findModel(filterModel, parentUID);\n\n              if (!filterModel.filters) {\n                filterModel.set(\"filters\", []);\n              }\n\n              filterModel.filters.push({\n                logic: that.options.mainLogic\n              });\n              filterModel = filterModel.filters[filterModel.filters.length - 1];\n            }\n\n            if (!itemsContainer.length) {\n              itemsContainer = $(\"<ul class='k-filter-lines'></ul>\").appendTo(parent.closest(\"li\"));\n            }\n\n            logicHTML = $(kendo.template(logicItemTemplate)({\n              operators: {\n                and: that.options.messages.and,\n                or: that.options.messages.or\n              },\n              addExpression: that.options.messages.addExpression,\n              addGroup: that.options.messages.addGroup,\n              close: that.options.messages.close,\n              ns: kendo.ns\n            })).appendTo(itemsContainer);\n\n            that._bindModel(logicHTML.find(\".k-toolbar\"), filterModel);\n\n            if (!model) {\n              that._expressionChange();\n            }\n          },\n          _bindModel: function (container, model) {\n            container.attr(\"id\", model.uid);\n            model.bind(\"change\", this._modelChangeHandler);\n            kendo.bind(container, model);\n            container.parent().attr(kendo.attr(\"stop\"), true);\n          },\n          _createPreview: function (filter) {\n            var html = \"\";\n            var createdField = false;\n\n            var haveFields = this._hasFieldsFilter(filter.filters || []);\n\n            var childhtml = \"\";\n            var current;\n            var field;\n\n            if (!filter.filters || !filter.filters.length || !haveFields) {\n              return \"\";\n            }\n\n            html += '<span class=\"k-filter-preview-bracket\">(</span>';\n\n            for (var i = 0; i < filter.filters.length; i++) {\n              current = filter.filters[i];\n\n              if (current.filters) {\n                childhtml = this._createPreview(current);\n\n                if (childhtml) {\n                  if (createdField) {\n                    html += '<span class=\"k-filter-preview-operator\"> ' + filter.logic.toLocaleUpperCase() + ' </span>';\n                  }\n\n                  createdField = true;\n                }\n\n                html += childhtml;\n              }\n\n              if (current.field) {\n                field = this._fields[current.field];\n\n                if (createdField) {\n                  html += '<span class=\"k-filter-preview-operator\"> ' + filter.logic.toLocaleUpperCase() + ' </span>';\n                }\n\n                createdField = true;\n                html += '<span class=\"k-filter-preview-field\">' + field.label + '</span>';\n                html += '<span class=\"k-filter-preview-criteria\"> ' + this._getOperatorText(current.field, current.operator);\n\n                if (current.operator.indexOf(\"is\") < 0) {\n                  html += ' </span>';\n                  html += \"<span class='k-filter-preview-value'>'\" + kendo.htmlEncode(field.previewFormat ? kendo.toString(current.value, field.previewFormat) : current.value) + \"'</span>\";\n                } else {\n                  html += '</span>';\n                }\n              }\n            }\n\n            html += '<span class=\"k-filter-preview-bracket\">)</span>';\n            return html;\n          },\n          _expressionChange: function () {\n            var that = this;\n            var filter = that.filterModel.toJSON();\n            var html = \"\";\n\n            if (that.options.expressionPreview) {\n              html = that._createPreview(filter);\n\n              that._previewContainer.html(html);\n            }\n\n            that.trigger(CHANGE, {\n              expression: filter\n            });\n          },\n          _getOperatorText: function (field, operator) {\n            var type = this._fields[field].type;\n            var operators = this._fields[field].operators;\n\n            if (!operators) {\n              operators = this.options.operators;\n            }\n\n            return operators[type][operator].text || operators[type][operator];\n          },\n          _addField: function (fieldInfo, field) {\n            var that = this;\n            fieldInfo = $.extend(true, {}, {\n              name: fieldInfo.name || field,\n              editor: fieldInfo.editorTemplate || editors[fieldInfo.type || \"string\"],\n              defaultValue: fieldInfo.defaultValue || fieldInfo.defaultValue === false || fieldInfo.defaultValue === 0 ? fieldInfo.defaultValue : defaultValues[fieldInfo.type || \"string\"],\n              type: fieldInfo.type || \"string\",\n              label: fieldInfo.label || fieldInfo.name || field,\n              operators: fieldInfo.operators,\n              previewFormat: fieldInfo.previewFormat\n            });\n            that._fields[fieldInfo.name] = fieldInfo;\n\n            if (!that._defaultField) {\n              that._defaultField = fieldInfo;\n            }\n          },\n          _getFieldsInfo: function () {\n            var that = this;\n            var fieldsCollection = that.options.fields.length ? that.options.fields : (that.options.dataSource.options.schema.model || {}).fields;\n            var fieldInfo;\n            that._fields = {};\n\n            if (Array.isArray(fieldsCollection)) {\n              for (var i = 0; i < fieldsCollection.length; i++) {\n                fieldInfo = fieldsCollection[i];\n\n                that._addField(fieldInfo);\n              }\n            } else {\n              for (var field in fieldsCollection) {\n                fieldInfo = fieldsCollection[field];\n\n                that._addField(fieldInfo, field);\n              }\n            }\n          },\n          _hasFieldsFilter: function (filters, haveField) {\n            haveField = !!haveField;\n\n            for (var i = 0; i < filters.length; i++) {\n              if (filters[i].filters) {\n                haveField = this._hasFieldsFilter(filters[i].filters, haveField);\n              }\n\n              if (filters[i].field) {\n                return true;\n              }\n            }\n\n            return haveField;\n          },\n          _removeEmptyGroups: function (filters) {\n            if (!filters) {\n              return;\n            }\n\n            for (var i = filters.length - 1; i >= 0; i--) {\n              if (filters[i].logic && !filters[i].filters || filters[i].filters && !this._hasFieldsFilter(filters[i].filters)) {\n                filters.splice(i, 1);\n                continue;\n              }\n\n              if (filters[i].filters) {\n                this._removeEmptyGroups(filters[i].filters);\n              }\n            }\n          },\n          _modelChange: function (e) {\n            var that = this;\n            var container = that.element.find(\"[id=\" + e.sender.uid + \"]\");\n\n            that._showHideEditor(container, e.sender);\n\n            if (e.field !== \"field\") {\n              if (e.field !== \"filters\") {\n                that._expressionChange();\n              }\n\n              return;\n            }\n\n            var newField = e.sender.field;\n            var parent = e.sender.parent();\n            var field = that._fields[newField];\n\n            var filterModel = that._addNewModel(parent, field);\n\n            e.sender.unbind(\"change\", that._modelChangeHandler);\n            parent.remove(e.sender);\n\n            that._addExpressionControls(container, field, filterModel);\n\n            that._expressionChange();\n          },\n          _renderMain: function () {\n            var that = this;\n            $(mainContainer).appendTo(that.element);\n\n            if (that.options.expression) {\n              that.filterModel = kendo.observable(that.options.expression);\n            } else {\n              that.filterModel = kendo.observable({\n                logic: that.options.mainLogic\n              });\n            }\n\n            $(kendo.template(mainLogicTemplate)({\n              operators: {\n                and: that.options.messages.and,\n                or: that.options.messages.or\n              },\n              addExpression: that.options.messages.addExpression,\n              addGroup: that.options.messages.addGroup,\n              close: that.options.messages.close,\n              uid: that.filterModel.uid,\n              ns: kendo.ns\n            })).appendTo(that.element.find(\"li\").first());\n\n            that._bindModel(that.element.find(\".k-toolbar\").first(), that.filterModel);\n          },\n          _removeExpression: function (parent) {\n            var that = this;\n            var parentUID = parent.attr(\"id\");\n            var itemContainer = parent.closest(\"li\");\n            var isMain = itemContainer.hasClass(\"k-filter-group-main\");\n            var parentModel;\n            var model;\n\n            if (isMain) {\n              itemContainer = itemContainer.find(\".k-filter-lines\");\n\n              if (that.filterModel.filters) {\n                that.filterModel.filters.empty();\n                delete that.filterModel.filters;\n              }\n            } else {\n              model = findModel(that.filterModel, parentUID);\n              parentModel = model.parent();\n              model.unbind(\"change\", that._modelChangeHandler);\n              parentModel.remove(model);\n\n              if (!parentModel.length) {\n                delete parentModel.parent().filters;\n              }\n\n              if (!itemContainer.siblings().length) {\n                itemContainer = itemContainer.parent();\n              }\n            }\n\n            kendo.destroy(itemContainer);\n            itemContainer.remove();\n\n            that._expressionChange();\n          },\n          _renderApplyButton: function () {\n            var that = this;\n\n            if (!that.options.applyButton) {\n              return;\n            }\n\n            if (!that._applyButton) {\n              that._applyButton = $(kendo.format('<button type=\"button\" aria-label=\"{0}\" title=\"{0}\" class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-filter-apply\">{0}</button>', that.options.messages.apply)).appendTo(that.element);\n            }\n          },\n          _showHideEditor: function (container, model) {\n            if (model.logic) {\n              return;\n            }\n\n            var operator = model.operator;\n            var editorContainer = container.find(\".k-filter-toolbar-item\").eq(2);\n\n            if (operator == \"isnull\" || operator == \"isnotnull\" || operator == \"isempty\" || operator == \"isnotempty\" || operator == \"isnullorempty\" || operator == \"isnotnullorempty\") {\n              editorContainer.hide();\n            } else {\n              editorContainer.show();\n            }\n          },\n          _mapOperators: function (expression) {\n            var that = this;\n\n            if (expression.filters) {\n              expression.filters.forEach(function (filter) {\n                if (filter.filters) {\n                  that._mapOperators(filter);\n                } else {\n                  var operator;\n                  var field = that._fields[filter.field];\n                  var type = field.type;\n\n                  if (field.operators && field.operators[type][filter.operator]) {\n                    operator = field.operators[type][filter.operator];\n                  } else {\n                    operator = that.operators[type][filter.operator];\n                  }\n\n                  if (operator) {\n                    filter.operator = operator.handler || filter.operator;\n                  }\n                }\n              });\n            }\n          },\n          hasCustomOperators: function () {\n            var operators = $.extend(true, {}, this.operators);\n\n            for (var field in this._fields) {\n              operators = $.extend(true, {}, operators, this._fields[field].operators);\n            }\n\n            this._hasCustomOperators = findCustomOperators(operators);\n          }\n        });\n\n        function findCustomOperators(operators) {\n          for (var field in operators) {\n            var operator = operators[field];\n\n            if (operator.handler && typeof operator.handler === \"function\" || typeof operator === 'object' && operator !== null && findCustomOperators(operator)) {\n              return true;\n            }\n          }\n\n          return false;\n        }\n\n        function findModel(model, uid) {\n          if (model.uid === uid) {\n            return model;\n          }\n\n          if (model.filters) {\n            for (var i = 0; i < model.filters.length; i++) {\n              var temp = findModel(model.filters[i], uid);\n\n              if (temp) {\n                return temp;\n              }\n            }\n          }\n        }\n\n        ui.plugin(Filter);\n        ui.plugin(FilterButtonGroup);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1272:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.buttongroup\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}