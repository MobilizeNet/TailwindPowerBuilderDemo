{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1490);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1052:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.popup\");\n    /***/\n  },\n\n  /***/\n  1089:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.html.button\");\n    /***/\n  },\n\n  /***/\n  1194:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.dateinput\");\n    /***/\n  },\n\n  /***/\n  1490:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1052), __webpack_require__(1194), __webpack_require__(1089)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"timepicker\",\n        name: \"TimePicker\",\n        category: \"web\",\n        description: \"The TimePicker widget allows the end user to select a value from a list of predefined values or to type a new value.\",\n        depends: [\"popup\", \"html.button\"]\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            keys = kendo.keys,\n            html = kendo.html,\n            parse = kendo.parseDate,\n            activeElement = kendo._activeElement,\n            extractFormat = kendo._extractFormat,\n            support = kendo.support,\n            browser = support.browser,\n            ui = kendo.ui,\n            Widget = ui.Widget,\n            OPEN = \"open\",\n            CLOSE = \"close\",\n            CHANGE = \"change\",\n            ns = \".kendoTimePicker\",\n            CLICK = \"click\" + ns,\n            DISABLED = \"disabled\",\n            READONLY = \"readonly\",\n            LI = \"li\",\n            SPAN = \"<span></span>\",\n            FOCUSED = \"k-focus\",\n            HOVER = \"k-hover\",\n            HOVEREVENTS = \"mouseenter\" + ns + \" mouseleave\" + ns,\n            MOUSEDOWN = \"mousedown\" + ns,\n            MS_PER_MINUTE = 60000,\n            MS_PER_DAY = 86400000,\n            SELECTED = \"k-selected\",\n            STATEDISABLED = \"k-disabled\",\n            ARIA_SELECTED = \"aria-selected\",\n            ARIA_EXPANDED = \"aria-expanded\",\n            ARIA_HIDDEN = \"aria-hidden\",\n            ARIA_DISABLED = \"aria-disabled\",\n            ARIA_READONLY = \"aria-readonly\",\n            ARIA_ACTIVEDESCENDANT = \"aria-activedescendant\",\n            ID = \"id\",\n            isArray = Array.isArray,\n            extend = $.extend,\n            DATE = Date,\n            dateFormatRegExp = /d{1,2}|E{1,6}|e{1,6}|c{3,6}|c{1}|M{1,5}|L{1,5}|y{1,4}|H{1,2}|h{1,2}|k{1,2}|K{1,2}|m{1,2}|a{1,5}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|x{1,5}|X{1,5}|G{1,5}|q{1,5}|Q{1,5}|\"[^\"]*\"|'[^']*'/g,\n            LITERAL = \"literal\",\n            MONTH = \"month\",\n            HOUR = \"hour\",\n            ZONE = \"zone\",\n            WEEKDAY = \"weekday\",\n            QUARTER = \"quarter\",\n            DATE_FIELD_MAP = {\n          \"G\": \"era\",\n          \"y\": \"year\",\n          \"q\": QUARTER,\n          \"Q\": QUARTER,\n          \"M\": MONTH,\n          \"L\": MONTH,\n          \"d\": \"day\",\n          \"E\": WEEKDAY,\n          \"c\": WEEKDAY,\n          \"e\": WEEKDAY,\n          \"h\": HOUR,\n          \"H\": HOUR,\n          \"k\": HOUR,\n          \"K\": HOUR,\n          \"m\": \"minute\",\n          \"s\": \"second\",\n          \"a\": \"dayperiod\",\n          \"x\": ZONE,\n          \"X\": ZONE,\n          \"z\": ZONE,\n          \"Z\": ZONE\n        },\n            NAME_TYPES = {\n          month: {\n            type: \"months\",\n            minLength: 3,\n            standAlone: \"L\"\n          },\n          quarter: {\n            type: \"quarters\",\n            minLength: 3,\n            standAlone: \"q\"\n          },\n          weekday: {\n            type: \"days\",\n            minLength: {\n              E: 0,\n              c: 3,\n              e: 3\n            },\n            standAlone: \"c\"\n          },\n          dayperiod: {\n            type: \"dayPeriods\",\n            minLength: 0\n          },\n          era: {\n            type: \"eras\",\n            minLength: 0\n          }\n        },\n            TODAY = new DATE(),\n            MODERN_RENDERING_TEMPLATE = '<div tabindex=\"0\" class=\"k-timeselector #=mainSize#\">' + '<div class=\"k-time-header\">' + '<span class=\"k-title\"></span>' + '<button class=\"k-button #=buttonSize# k-rounded-md k-button-flat k-button-flat-base k-time-now\" title=\"Select now\" aria-label=\"Select now\"><span class=\"k-button-text\">#=messages.now#</span></button>' + '</div>' + '<div class=\"k-time-list-container\">' + '<span class=\"k-time-highlight\"></span>' + '</div>' + '</div>',\n            NEW_RENDERING_FOOTER = '<div class=\"k-time-footer k-action-buttons\">' + '<button class=\"k-button #=buttonSize# k-rounded-md k-button-solid k-button-solid-base k-time-cancel\" title=\"Cancel changes\" aria-label=\"Cancel changes\"><span class=\"k-button-text\">#=messages.cancel#</span></button>' + '<button class=\"k-time-accept k-button #=buttonSize# k-rounded-md k-button-solid k-button-solid-primary\" title=\"Set time\" aria-label=\"Set time\"><span class=\"k-button-text\">#=messages.set#</span></button>' + '</div>',\n            HIGHLIGHTCONTAINER = '<span class=\"k-time-highlight\"></span>';\n        TODAY = new Date(TODAY.getFullYear(), TODAY.getMonth(), TODAY.getDate(), 0, 0, 0);\n\n        var TimeView = function (options) {\n          var that = this,\n              id = options.id;\n          that.options = options;\n          that._dates = [];\n\n          that._createList(options.timeView && options.timeView.list === \"scroll\");\n\n          if (id) {\n            that._timeViewID = id + \"_timeview\";\n            that._optionID = id + \"_option_selected\";\n            that.ul.attr(ID, that._timeViewID);\n          }\n\n          that._heightHandler = that._height.bind(that);\n\n          that._popup();\n        };\n\n        TimeView.prototype = {\n          _createList: function (scroll) {\n            if (scroll) {\n              this._createScrollList();\n            } else {\n              this._createClassicRenderingList();\n            }\n          },\n          _createScrollList: function () {\n            var templateOptions = $.extend({}, this.options, {\n              mainSize: kendo.getValidCssClass(\"k-timeselector-\", \"size\", this.options.size || \"medium\"),\n              buttonSize: kendo.getValidCssClass(\"k-button-\", \"size\", this.options.size || \"medium\")\n            });\n            this.list = $(kendo.template(MODERN_RENDERING_TEMPLATE)(templateOptions)).on(MOUSEDOWN, preventDefault);\n\n            if (!this.options.omitPopup) {\n              this.list.append(kendo.template(NEW_RENDERING_FOOTER)(templateOptions));\n            }\n\n            this.ul = this.list.find(\".k-time-list-container\");\n            this.list.on(\"click\" + ns, \".k-time-header button.k-time-now\", this._nowClickHandler.bind(this));\n            this.list.on(\"click\" + ns, \".k-time-footer button.k-time-cancel\", this._cancelClickHandler.bind(this));\n            this.list.on(\"click\" + ns, \".k-time-footer button.k-time-accept\", this._setClickHandler.bind(this));\n            this.list.on(\"mouseover\" + ns, \".k-time-list-wrapper\", this._mouseOverHandler.bind(this));\n            this.list.on(\"keydown\" + ns, this._scrollerKeyDownHandler.bind(this));\n          },\n          _scrollerKeyDownHandler: function (e) {\n            var that = this,\n                key = e.keyCode,\n                list = $(e.currentTarget).find(\".k-time-list-wrapper.k-focus\"),\n                lists = that.list.find(\".k-time-list-wrapper\"),\n                length = lists.length,\n                index = lists.index(list),\n                isRtl = kendo.support.isRtl(that.wrapper),\n                itemHeight = getItemHeight(list.find(\".k-item:visible\").eq(0)),\n                container = list.find(\".k-time-container.k-content.k-scrollable\");\n\n            if (!list.length) {\n              return;\n            }\n\n            if (key == keys.RIGHT && !isRtl || key == keys.LEFT && isRtl) {\n              if (index + 1 < length) {\n                that._focusList(lists.eq(index + 1));\n              }\n            } else if (key == keys.LEFT && !isRtl || key == keys.RIGHT && isRtl) {\n              if (index - 1 >= 0) {\n                that._focusList(lists.eq(index - 1));\n              }\n            } else if (key == keys.UP) {\n              container.scrollTop(container.scrollTop() - itemHeight);\n              e.preventDefault();\n            } else if (key == keys.DOWN) {\n              container.scrollTop(container.scrollTop() + itemHeight);\n              e.preventDefault();\n            } else if (key === keys.ENTER) {\n              that._setClickHandler();\n            } else if (key === keys.ESC) {\n              that._cancelClickHandler();\n            }\n          },\n          _mouseOverHandler: function (e) {\n            this._focusList($(e.currentTarget));\n          },\n          _focusList: function (list) {\n            this.list.find(\".k-time-list-wrapper\").removeClass(FOCUSED);\n            list.addClass(FOCUSED);\n            this.list.trigger(\"focus\");\n            this._scrollTop = list.find('.k-scrollable').scrollTop();\n          },\n          _createClassicRenderingList: function () {\n            var that = this;\n            var listParent = $('<div class=\"k-list ' + kendo.getValidCssClass(\"k-list-\", \"size\", that.options.size) + '\"><ul tabindex=\"-1\" role=\"listbox\" aria-hidden=\"true\" unselectable=\"on\" class=\"k-list-ul\"/></div>');\n            that.ul = listParent.find(\"ul\").css({\n              overflow: support.kineticScrollNeeded ? \"\" : \"auto\"\n            }).on(CLICK, LI, that._click.bind(that)).on(\"mouseenter\" + ns, LI, function () {\n              $(this).addClass(HOVER);\n            }).on(\"mouseleave\" + ns, LI, function () {\n              $(this).removeClass(HOVER);\n            });\n            that.list = $(\"<div class='k-list-container k-list-scroller' unselectable='on'/>\").append(listParent).on(MOUSEDOWN, preventDefault);\n            that.template = kendo.template('<li tabindex=\"-1\" role=\"option\" class=\"k-list-item\" unselectable=\"on\"><span class=\"k-list-item-text\">#=data#</span></li>', {\n              useWithBlock: false\n            });\n          },\n          current: function (candidate) {\n            var that = this,\n                active = that.options.active;\n\n            if (candidate !== undefined) {\n              if (that._current) {\n                that._current.removeClass(SELECTED);\n\n                if (that._current && that._current.length) {\n                  that._current[0].removeAttribute(ID);\n\n                  that._current[0].removeAttribute(ARIA_SELECTED);\n                }\n              }\n\n              if (candidate) {\n                candidate = $(candidate).addClass(SELECTED).attr(ID, that._optionID).attr(ARIA_SELECTED, true);\n                that.scroll(candidate[0]);\n              }\n\n              that._current = candidate;\n\n              if (active) {\n                active(candidate);\n              }\n            } else {\n              return that._current;\n            }\n          },\n          _updateTitle: function () {\n            this.list.find(\".k-time-header > .k-title\").html(kendo.toString(this._value, this.options.format, this.options.culture));\n          },\n          applyValue: function (value) {\n            if (!value) {\n              return;\n            }\n\n            var is12hourFormat = includes(this.options.format.toLowerCase(), \"t\");\n            var hours = value.getHours();\n            var minutes = value.getMinutes();\n            var seconds = value.getSeconds();\n            var designator;\n            var indexAttr = kendo.attr('index');\n            var hoursList = this.ul.find('[' + indexAttr + '=\"1\"]');\n            var minutessList = this.ul.find('[' + indexAttr + '=\"2\"]');\n            var secondsList = this.ul.find('[' + indexAttr + '=\"3\"]');\n            var designatorList = this.ul.find('[' + indexAttr + '=\"4\"]');\n\n            if (is12hourFormat) {\n              if (hours >= 12) {\n                designator = \"PM\";\n\n                if (hours > 12) {\n                  hours -= 12;\n                }\n              } else {\n                designator = \"AM\";\n\n                if (hours === 0) {\n                  hours = 12;\n                }\n              }\n            }\n\n            this._internalScroll = true;\n\n            if (hoursList.length) {\n              this._scrollListToPosition(hoursList, hours);\n            }\n\n            if (minutessList.length) {\n              this._scrollListToPosition(minutessList, minutes);\n            }\n\n            if (secondsList.length) {\n              this._scrollListToPosition(secondsList, seconds);\n            }\n\n            if (designatorList.length) {\n              this._scrollListToPosition(designatorList, designator);\n            }\n\n            this._internalScroll = false;\n          },\n          _scrollListToPosition: function (list, value) {\n            var item = list.find('.k-item[data-value=\"' + pad(value) + '\"]');\n            var itemHeight = getItemHeight(item);\n            list.scrollTop(list.find(\".k-item:visible\").index(item) * itemHeight);\n          },\n          close: function () {\n            this.popup.close();\n          },\n          destroy: function () {\n            var that = this;\n            that.ul.off(ns);\n            that.list.off(ns);\n\n            if (this.popup) {\n              that.popup.destroy();\n            }\n          },\n          open: function () {\n            var that = this;\n            var popupHovered;\n\n            if (!that.ul[0].firstChild || that.ul.find(\"li\").length < 1) {\n              that.bind();\n            } // In some cases when the popup is opened resize is triggered which will cause it to close\n            // Setting the below flag will prevent this from happening\n            // Reference: https://github.com/telerik/kendo/pull/7553\n\n\n            popupHovered = that.popup._hovered;\n            that.popup._hovered = true;\n            that.popup.open();\n            setTimeout(function () {\n              that.popup._hovered = popupHovered;\n            }, 1);\n\n            if (that._current) {\n              that.scroll(that._current[0]);\n            }\n          },\n          dataBind: function (dates) {\n            var that = this,\n                options = that.options,\n                format = options.format,\n                toString = kendo.toString,\n                template = that.template,\n                length = dates.length,\n                idx = 0,\n                date,\n                html = \"\";\n\n            for (; idx < length; idx++) {\n              date = dates[idx];\n\n              if (isInRange(date, options.min, options.max)) {\n                html += template(toString(date, format, options.culture));\n              }\n            }\n\n            that._html(html);\n          },\n          refresh: function () {\n            var that = this,\n                options = that.options,\n                format = options.format,\n                offset = dst(),\n                ignoreDST = offset < 0,\n                value = kendo.parseDate(that._value),\n                parsedValue = value ? mergeDateAndTime(value, options.min) : mergeDateAndTime(new Date(), options.min),\n                min = options.min,\n                max = options.max,\n                msMin = getMilliseconds(min),\n                msMax = getMilliseconds(max),\n                msLastTime = getMilliseconds(lastTimeOption(options.interval)),\n                msInterval = options.interval * MS_PER_MINUTE,\n                toString = kendo.toString,\n                template = that.template,\n                start = options.useValueToRender ? parsedValue : new Date(+options.min),\n                startDate = new DATE(start),\n                msStart,\n                length,\n                html = \"\";\n\n            if (ignoreDST) {\n              length = (MS_PER_DAY + offset * MS_PER_MINUTE) / msInterval;\n            } else {\n              length = MS_PER_DAY / msInterval;\n            }\n\n            if (msMin != msMax || msLastTime === msMax) {\n              if (msMin > msMax) {\n                msMax += MS_PER_DAY;\n              }\n\n              length = (msMax - msMin) / msInterval + 1;\n            }\n\n            if (options.timeView && options.timeView.list === \"scroll\") {\n              html = that._createListContent(splitDateFormat(format));\n            } else {\n              that.getDatesInRange(msStart, msMax, startDate, max, msInterval, start).forEach(function (date) {\n                html += template(toString(date, format, options.culture));\n              });\n            }\n\n            that._html(html);\n          },\n          _showAllHiddenItems: function () {\n            var items = this.list.find('.k-time-container');\n            var length = items.length;\n            var item;\n\n            for (var i = 0; i < length; i++) {\n              item = $(items[i]);\n              item.find('.k-item:hidden').show();\n\n              this._updateListBottomOffset(item);\n            }\n          },\n          _updateListBottomOffset: function (list) {\n            var itemHeight = getItemHeight(list.find(\".k-item:visible\").eq(0));\n            var listHeight = list.outerHeight();\n            var bottomOffset = listHeight - itemHeight;\n            list.find(\".k-scrollable-placeholder\").css({\n              height: list.find(\"ul\").height() + bottomOffset\n            });\n          },\n          _updateHoursRange: function () {\n            var that = this;\n            var indexAttr = kendo.attr('index');\n            var hoursList = this.ul.find('[' + indexAttr + '=\"1\"]');\n            var minHours = this._minHours;\n            var maxHours = this._maxHours;\n            var is12hourFormat = includes(this.options.format.toLowerCase(), \"t\");\n            var useMax;\n            var useMin;\n\n            var selectedDesignator = this._findSelectedValue(this.ul.find('[' + indexAttr + '=\"4\"]'));\n\n            if (!hoursList.length) {\n              return;\n            }\n\n            if (is12hourFormat && selectedDesignator) {\n              if (selectedDesignator === \"AM\") {\n                if (minHours < 12) {\n                  useMin = true;\n                }\n\n                if (maxHours < 12) {\n                  useMax = true;\n                }\n              } else if (selectedDesignator === \"PM\") {\n                if (minHours > 12) {\n                  useMin = true;\n                  minHours -= 12;\n                }\n\n                if (maxHours > 12) {\n                  useMax = true;\n                  maxHours -= 12;\n                }\n              }\n\n              hoursList.find(\".k-item\").each(function (_, item) {\n                item = $(item);\n                var value = +item.attr(\"data-value\");\n\n                if (that._validateMin && useMin && value < minHours || that._validateMax && useMax && value > maxHours) {\n                  item.hide();\n                } else {\n                  item.show();\n                }\n              });\n            } else {\n              hoursList.find(\".k-item\").each(function (_, item) {\n                item = $(item);\n                var value = +item.attr(\"data-value\");\n\n                if (that._validateMin && value < minHours || that._validateMax && value > maxHours) {\n                  item.hide();\n                } else {\n                  item.show();\n                }\n              });\n            }\n\n            this._updateListBottomOffset(hoursList);\n          },\n          _updateMinutesRange: function () {\n            var that = this;\n            var indexAttr = kendo.attr('index');\n            var minutesList = this.ul.find('[' + indexAttr + '=\"2\"]');\n            var minHours = this._minHours;\n            var maxHours = this._maxHours;\n            var minMinutes = this._minMinutes;\n            var maxMinutes = this._maxMinutes;\n            var selectedHour = +this._findSelectedValue(this.ul.find('[' + indexAttr + '=\"1\"]'));\n            var is12hourFormat = includes(this.options.format.toLowerCase(), \"t\");\n\n            var selectedDesignator = this._findSelectedValue(this.ul.find('[' + indexAttr + '=\"4\"]'));\n\n            if (is12hourFormat && selectedDesignator === \"PM\") {\n              selectedHour += 12;\n            }\n\n            if (!minutesList.length) {\n              return;\n            }\n\n            minutesList.find(\".k-item\").each(function (_, item) {\n              item = $(item);\n              var value = +item.attr(\"data-value\");\n\n              if (that._validateMin && value < minMinutes && minHours && selectedHour === minHours || that._validateMax && value > maxMinutes && maxHours && selectedHour === maxHours) {\n                item.hide();\n              } else {\n                item.show();\n              }\n            });\n\n            this._updateListBottomOffset(minutesList);\n          },\n          _updateSecondsRange: function () {\n            var that = this;\n            var indexAttr = kendo.attr('index');\n            var secondsList = this.ul.find('[' + indexAttr + '=\"3\"]');\n            var minSeconds = this._minSeconds;\n            var maxSeconds = this._minSeconds;\n            var minMinutes = this._minMinutes;\n            var maxMinutes = this._maxMinutes;\n            var selectedMinutes = +this._findSelectedValue(this.ul.find('[' + indexAttr + '=\"2\"]'));\n\n            if (!secondsList.length) {\n              return;\n            }\n\n            secondsList.find(\".k-item\").each(function (_, item) {\n              item = $(item);\n              var value = +item.attr(\"data-value\");\n\n              if (that._validateMin && value < minSeconds && minMinutes && selectedMinutes === minMinutes || that._validateMax && value > maxSeconds && maxMinutes && selectedMinutes === maxMinutes) {\n                item.hide();\n              } else {\n                item.show();\n              }\n            });\n\n            this._updateListBottomOffset(secondsList);\n          },\n          _updateDesignatorRange: function () {\n            var minHours = this._minHours;\n            var maxHours = this._maxHours;\n            var indexAttr = kendo.attr('index');\n            var designatorList = this.ul.find('[' + indexAttr + '=\"4\"]');\n\n            if (!designatorList.length) {\n              return;\n            }\n\n            if (this._validateMin && minHours >= 12) {\n              designatorList.find('.k-item[data-value=\"AM\"]').hide();\n            } else {\n              designatorList.find('.k-item[data-value=\"AM\"]').show();\n            }\n\n            if (this._validateMax && maxHours < 12) {\n              designatorList.find('.k-item[data-value=\"PM\"]').hide();\n            } else {\n              designatorList.find('.k-item[data-value=\"PM\"]').show();\n            }\n          },\n          _updateRanges: function () {\n            if (!this.options.specifiedRange) {\n              return;\n            }\n\n            if (!this._currentlySelected) {\n              this._currentlySelected = new Date();\n            }\n\n            var max = this.options.max;\n            var min = this.options.min;\n\n            if (this.options.validateDate) {\n              if (max.getFullYear() === this._currentlySelected.getFullYear() && max.getMonth() === this._currentlySelected.getMonth() && max.getDate() === this._currentlySelected.getDate()) {\n                this._validateMax = true;\n              } else {\n                this._validateMax = false;\n              }\n\n              if (min.getFullYear() === this._currentlySelected.getFullYear() && min.getMonth() === this._currentlySelected.getMonth() && min.getDate() === this._currentlySelected.getDate()) {\n                this._validateMin = true;\n              } else {\n                this._validateMin = false;\n              }\n\n              if (!this._validateMax && !this._validateMin) {\n                this._showAllHiddenItems();\n\n                return;\n              }\n            } else {\n              this._validateMax = true;\n              this._validateMin = true;\n            }\n\n            this._minMinutes = min.getMinutes();\n            this._maxMinutes = max.getMinutes();\n            this._minHours = min.getHours();\n            this._maxHours = max.getHours();\n            this._minSeconds = min.getSeconds();\n            this._maxSeconds = max.getSeconds();\n\n            this._updateDesignatorRange();\n\n            this._updateHoursRange();\n\n            this._updateMinutesRange();\n\n            this._updateSecondsRange();\n          },\n          addTranslate: function () {\n            var lists = this.ul.find(\".k-time-container.k-content.k-scrollable\");\n            var length = lists.length;\n            var list;\n            var itemHeight;\n            var listHeight;\n            var topOffset;\n            var translate;\n            var bottomOffset;\n\n            for (var i = 0; i < length; i++) {\n              list = lists.eq(i);\n              itemHeight = getItemHeight(list.find(\".k-item:visible\").eq(0));\n              listHeight = list.outerHeight();\n              topOffset = (listHeight - itemHeight) / 2;\n              translate = \"translateY(\" + topOffset + \"px)\";\n              bottomOffset = listHeight - itemHeight;\n              list.find(\"ul\").css({\n                transform: translate,\n                \"-ms-transform\": translate\n              });\n              list.find(\".k-scrollable-placeholder\").css({\n                height: list.find(\"ul\").height() + bottomOffset\n              });\n              list.off(ns).on(\"click\" + ns, \".k-item\", this._itemClickHandler.bind(this)).on(\"scroll\" + ns, this._listScrollHandler.bind(this));\n            }\n          },\n          _nowClickHandler: function (e) {\n            e.preventDefault();\n            var now = new Date();\n            this.value(now);\n            this.options.change(kendo.toString(now, this.options.format, this.options.culture), true);\n          },\n          _cancelClickHandler: function (e) {\n            e.preventDefault();\n            this.value(this._value);\n            this.popup.close();\n          },\n          _setClickHandler: function (e) {\n            e.preventDefault();\n            this._value = new Date(this._currentlySelected);\n            this.options.change(kendo.toString(this._currentlySelected, this.options.format, this.options.culture), true);\n            this.popup.close();\n          },\n          _listScrollHandler: function (e) {\n            var that = this;\n            var itemHeight = getItemHeight($(e.currentTarget).find(\".k-item:visible\").eq(0));\n\n            if (that._internalScroll) {\n              return;\n            }\n\n            if (that._scrollingTimeout) {\n              clearTimeout(that._scrollingTimeout);\n            }\n\n            that._scrollingTimeout = setTimeout(function () {\n              if (e.currentTarget.scrollTop % itemHeight > 1) {\n                e.currentTarget.scrollTop += itemHeight - e.currentTarget.scrollTop % itemHeight;\n              }\n\n              that._scrollTop = e.currentTarget.scrollTop;\n\n              that._updateCurrentlySelected();\n\n              that._updateRanges();\n            }, 100);\n          },\n          _updateCurrentlySelected: function () {\n            var is12hourFormat = includes(this.options.format.toLowerCase(), \"t\");\n            var indexAttr = kendo.attr('index');\n            var hoursList = this.ul.find('[' + indexAttr + '=\"1\"]');\n            var minutesList = this.ul.find('[' + indexAttr + '=\"2\"]');\n            var secondsList = this.ul.find('[' + indexAttr + '=\"3\"]');\n            var designatorList = this.ul.find('[' + indexAttr + '=\"4\"]');\n            var selectedHour;\n            var selectedMinutes;\n            var selectedSeconds;\n            var selectedDesignator;\n\n            if (!this.ul.is(\":visible\")) {\n              return;\n            }\n\n            if (!this._currentlySelected) {\n              this._currentlySelected = this._value ? new Date(this._value) : new Date();\n            }\n\n            if (hoursList.length) {\n              selectedHour = +this._findSelectedValue(hoursList);\n            }\n\n            if (minutesList.length) {\n              selectedMinutes = +this._findSelectedValue(minutesList);\n            }\n\n            if (secondsList.length) {\n              selectedSeconds = +this._findSelectedValue(secondsList);\n            }\n\n            if (designatorList.length) {\n              selectedDesignator = this._findSelectedValue(designatorList);\n            }\n\n            if (is12hourFormat) {\n              if (selectedDesignator == \"PM\") {\n                selectedHour += 12;\n\n                if (selectedHour == 24) {\n                  selectedHour = 12;\n                }\n              }\n\n              if (selectedDesignator === \"AM\" && selectedHour === 12) {\n                selectedHour = 0;\n              }\n            }\n\n            if (selectedHour !== undefined) {\n              this._currentlySelected.setHours(selectedHour);\n            }\n\n            if (selectedMinutes !== undefined) {\n              this._currentlySelected.setMinutes(selectedMinutes);\n            }\n\n            if (selectedSeconds !== undefined) {\n              this._currentlySelected.setSeconds(selectedSeconds);\n            }\n          },\n          _findSelectedValue: function (list) {\n            var firstOccurence = firstItemIndex(list.scrollTop(), getItemHeight(list.find(\".k-item:visible\").eq(0)));\n            return list.find(\".k-item:visible\").eq(firstOccurence).attr(\"data-value\");\n          },\n          _itemClickHandler: function (e) {\n            var list = $(e.originalEvent.currentTarget);\n            var index = list.find(\".k-item:visible\").index($(e.currentTarget));\n            var itemHeight = getItemHeight(list.find(\".k-item:visible\").eq(0));\n            list.scrollTop(index * itemHeight);\n          },\n          getDatesInRange: function (msStart, msMax, startDate, max, msInterval, start) {\n            var result = [];\n\n            while (true) {\n              if (msMax && (getMilliseconds(start) >= msMax || startDate.getDate() != start.getDate())) {\n                msStart = getMilliseconds(start);\n\n                if (startDate < start) {\n                  msStart += MS_PER_DAY;\n                }\n\n                if (msStart > msMax) {\n                  start = new DATE(+max);\n                }\n\n                if (getMilliseconds(start) > 0) {\n                  result.push(new Date(start));\n                }\n\n                break;\n              }\n\n              if (startDate.getDate() != start.getDate()) {\n                break;\n              }\n\n              result.push(new Date(start));\n              start.setTime(start.getTime() + msInterval);\n\n              if (!msMax && this.options.maxSet) {\n                break;\n              }\n            }\n\n            return result;\n          },\n          _createListContent: function (parts) {\n            var length = parts.length;\n            var result = \"\";\n            var part;\n            var values;\n\n            for (var i = 0; i < length; i++) {\n              part = parts[i];\n\n              if (part.type === \"literal\") {\n                result += this._literalTemplate(part);\n              } else {\n                values = this._getValues(part, true);\n                result += this._itemTemplate(values.values, part, this.options.messages[part.type], values.index);\n              }\n            }\n\n            return result;\n          },\n          _itemTemplate: function (values, part, title, index) {\n            var result = \"\";\n            var length = values.length;\n            var indexAttr = kendo.attr('index');\n            result += '<div class=\"k-time-list-wrapper\" role=\"presentation\">' + '<span class=\"k-title\">' + (title || part.type) + '</span>' + '<div class=\"k-time-list\">' + '<div class=\"k-time-container k-content k-scrollable\" role=\"presentation\" ' + indexAttr + '=\"' + index + '\">' + '<ul class=\"k-reset\">';\n\n            for (var i = 0; i < length; i++) {\n              result += '<li class=\"k-item\" data-value=\"' + values[i] + '\">' + '<span>' + values[i] + '</span>' + '</li>';\n            }\n\n            result += '</ul>' + '<div class=\"k-scrollable-placeholder\"></div>' + '</div>' + '</div>' + '</div>';\n            return result;\n          },\n          _getValues: function (part, shouldPad) {\n            var result = [];\n            var index;\n            var start = 0;\n            var end;\n\n            if (part.type === \"hour\") {\n              start = part.hour12 ? 1 : 0;\n              index = 1;\n              end = part.hour12 ? 12 : 23;\n            } else if (part.type === \"minute\") {\n              index = 2;\n              end = 59;\n            } else if (part.type === \"second\") {\n              index = 3;\n              end = 59;\n            }\n\n            for (; start <= end; start++) {\n              result.push(shouldPad ? pad(start) : start);\n            }\n\n            return {\n              values: result,\n              index: index\n            };\n          },\n          _literalTemplate: function (part) {\n            var result = '<div class=\"k-time-separator\">' + (part.pattern === \" tt\" ? ':' : part.pattern) + '</div>';\n\n            if (part.pattern === \" tt\") {\n              result += this._itemTemplate([\"AM\", \"PM\"], part, \"AM/PM\", 4);\n            }\n\n            return result;\n          },\n          bind: function () {\n            var that = this,\n                dates = that.options.dates;\n\n            if (dates && dates[0]) {\n              that.dataBind(dates);\n            } else {\n              that.refresh();\n            }\n          },\n          _html: function (html) {\n            var that = this;\n\n            if (that.options.timeView && that.options.timeView.list === \"scroll\") {\n              html = HIGHLIGHTCONTAINER + html;\n              that.ul.html(html);\n            } else {\n              that.ul[0].innerHTML = html;\n              that.popup.unbind(OPEN, that._heightHandler);\n              that.popup.one(OPEN, that._heightHandler);\n              that.current(null);\n              that.select(that._value);\n            }\n          },\n          scroll: function (item) {\n            if (!item) {\n              return;\n            }\n\n            if (item.scrollIntoViewIfNeeded) {\n              item.scrollIntoViewIfNeeded();\n            } else {\n              scrollIntoViewIfNeeded(item);\n            }\n          },\n          select: function (li) {\n            var that = this,\n                options = that.options,\n                current = that._current,\n                selection;\n\n            if (li instanceof Date) {\n              li = kendo.toString(li, options.format, options.culture);\n            }\n\n            if (typeof li === \"string\") {\n              if (!current || current.text() !== li) {\n                li = $.grep(that.ul[0].childNodes, function (node) {\n                  return (node.textContent || node.innerText) == li;\n                });\n                li = li[0] ? li : null;\n              } else {\n                li = current;\n              }\n            }\n\n            selection = that._distinctSelection(li);\n            that.current(selection);\n          },\n          _distinctSelection: function (selection) {\n            var that = this,\n                currentValue,\n                selectionIndex;\n\n            if (selection && selection.length > 1) {\n              currentValue = getMilliseconds(that._value);\n              selectionIndex = $.inArray(currentValue, that._dates);\n              selection = that.ul.children()[selectionIndex];\n            }\n\n            return selection;\n          },\n          setOptions: function (options) {\n            var old = this.options;\n            options.min = parse(options.min);\n            options.max = parse(options.max);\n            this.options = extend(old, options, {\n              active: old.active,\n              change: old.change,\n              close: old.close,\n              open: old.open\n            });\n            this.bind();\n          },\n          toggle: function () {\n            var that = this;\n\n            if (that.popup.visible()) {\n              that.close();\n            } else {\n              that.open();\n            }\n          },\n          value: function (value) {\n            var that = this;\n            that._value = value;\n\n            if (that.ul[0].firstChild) {\n              if (that.options.timeView && that.options.timeView.list === \"scroll\") {\n                that.applyValue(value);\n              } else {\n                that.select(value);\n              }\n            }\n          },\n          _click: function (e) {\n            var that = this,\n                li = $(e.currentTarget),\n                date = li.text(),\n                dates = that.options.dates;\n\n            if (dates && dates.length > 0) {\n              date = dates[li.index()];\n            }\n\n            if (!e.isDefaultPrevented()) {\n              that.select(li);\n              that.options.change(date, true);\n              that.close();\n            }\n          },\n          _height: function () {\n            var that = this;\n            var list = that.list;\n            var parent = list.parent(\".k-animation-container\");\n            var height = that.options.height;\n\n            if (that.ul[0].children.length) {\n              list.add(parent).show().height(that.ul[0].scrollHeight > height ? height : \"auto\").hide();\n            }\n          },\n          _parse: function (value) {\n            var that = this,\n                options = that.options,\n                min = getMilliseconds(options.min) != getMilliseconds(TODAY) ? options.min : null,\n                max = getMilliseconds(options.max) != getMilliseconds(TODAY) ? options.max : null,\n                current = that._value || min || max || TODAY;\n\n            if (value instanceof DATE) {\n              return value;\n            }\n\n            value = parse(value, options.parseFormats, options.culture);\n\n            if (value) {\n              value = new DATE(current.getFullYear(), current.getMonth(), current.getDate(), value.getHours(), value.getMinutes(), value.getSeconds(), value.getMilliseconds());\n            }\n\n            return value;\n          },\n          _adjustListWidth: function () {\n            var list = this.list,\n                width = list[0].style.width,\n                wrapper = this.options.anchor,\n                computedStyle,\n                computedWidth,\n                outerWidth = kendo._outerWidth;\n\n            if (!list.data(\"width\") && width) {\n              return;\n            }\n\n            computedStyle = window.getComputedStyle ? window.getComputedStyle(wrapper[0], null) : 0;\n            computedWidth = computedStyle ? parseFloat(computedStyle.width) : outerWidth(wrapper);\n\n            if (computedStyle && (browser.mozilla || browser.msie)) {\n              // getComputedStyle returns different box in FF and IE.\n              computedWidth += parseFloat(computedStyle.paddingLeft) + parseFloat(computedStyle.paddingRight) + parseFloat(computedStyle.borderLeftWidth) + parseFloat(computedStyle.borderRightWidth);\n            }\n\n            width = computedWidth - (outerWidth(list) - list.width());\n            list.css({\n              fontFamily: wrapper.css(\"font-family\"),\n              width: width\n            }).data(\"width\", width);\n          },\n          _popup: function () {\n            var that = this,\n                list = that.list,\n                options = that.options,\n                anchor = options.anchor;\n\n            if (!this.options.omitPopup) {\n              that.popup = new ui.Popup(list, extend(options.popup, {\n                anchor: anchor,\n                open: options.open,\n                close: options.close,\n                animation: options.animation,\n                isRtl: support.isRtl(options.anchor),\n                activate: function () {\n                  if (that.options.timeView && that.options.timeView.list === \"scroll\") {\n                    that.addTranslate();\n\n                    if (that._value) {\n                      that.applyValue(that._value);\n                    } else {\n                      that._updateCurrentlySelected();\n                    }\n\n                    that._updateRanges();\n\n                    that._focusList(that.list.find(\".k-time-list-wrapper\").eq(0));\n                  }\n                }\n              }));\n            } else {\n              list.appendTo(options.timeDiv);\n            }\n          },\n          move: function (e) {\n            var that = this,\n                key = e.keyCode,\n                ul = that.ul[0],\n                current = that._current,\n                down = key === keys.DOWN;\n\n            if (key === keys.UP || down) {\n              if (e.altKey) {\n                that.toggle(down);\n                return;\n              } else if (down) {\n                current = current ? current[0].nextSibling : ul.firstChild;\n              } else {\n                current = current ? current[0].previousSibling : ul.lastChild;\n              }\n\n              if (current) {\n                that.select(current);\n              }\n\n              that.options.change(that._current.text());\n              e.preventDefault();\n            } else if (key === keys.ENTER || key === keys.TAB || key === keys.ESC) {\n              e.preventDefault();\n\n              if (current) {\n                that.options.change(current.text(), true);\n              }\n\n              that.close();\n            }\n          }\n        };\n\n        function dst() {\n          var today = new DATE(),\n              midnight = new DATE(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0),\n              noon = new DATE(today.getFullYear(), today.getMonth(), today.getDate(), 12, 0, 0);\n          return -1 * (midnight.getTimezoneOffset() - noon.getTimezoneOffset());\n        }\n\n        function getMilliseconds(date) {\n          return date.getHours() * 60 * MS_PER_MINUTE + date.getMinutes() * MS_PER_MINUTE + date.getSeconds() * 1000 + date.getMilliseconds();\n        }\n\n        function lastTimeOption(interval) {\n          var date = new Date(2100, 0, 1);\n          date.setMinutes(-interval);\n          return date;\n        }\n\n        function isInRange(value, min, max) {\n          var msMin = getMilliseconds(min),\n              msMax = getMilliseconds(max),\n              msValue;\n\n          if (!value || msMin == msMax) {\n            return true;\n          }\n\n          msValue = getMilliseconds(value);\n\n          if (msMin > msValue) {\n            msValue += MS_PER_DAY;\n          }\n\n          if (msMax < msMin) {\n            msMax += MS_PER_DAY;\n          }\n\n          return msValue >= msMin && msValue <= msMax;\n        }\n\n        TimeView.getMilliseconds = getMilliseconds;\n        kendo.TimeView = TimeView;\n        var TimePicker = Widget.extend({\n          init: function (element, options) {\n            var that = this,\n                ul,\n                timeView,\n                disabled;\n            options = options || {};\n            options.componentType = options.componentType || \"classic\";\n            Widget.fn.init.call(that, element, options);\n            element = that.element;\n            options = that.options;\n            options.min = parse(element.attr(\"min\")) || parse(options.min);\n            options.max = parse(element.attr(\"max\")) || parse(options.max);\n\n            if (+options.max != +TODAY || +options.min != +TODAY) {\n              this._specifiedRange = true;\n            }\n\n            normalize(options);\n            that._initialOptions = extend({}, options);\n\n            that._wrapper();\n\n            if (that.options.timeView && that.options.timeView.list === \"scroll\") {\n              that.options.height = null;\n            }\n\n            that.timeView = timeView = new TimeView(extend({}, options, {\n              id: element.attr(ID),\n              anchor: that.wrapper,\n              format: options.format,\n              change: function (value, trigger) {\n                if (trigger) {\n                  that._change(value);\n                } else {\n                  element.val(value);\n                }\n              },\n              open: function (e) {\n                if (that.options.timeView && that.options.timeView.list !== \"scroll\") {\n                  that.timeView._adjustListWidth();\n                } else {\n                  that.timeView._updateTitle();\n                }\n\n                if (that.trigger(OPEN)) {\n                  e.preventDefault();\n                } else {\n                  element.attr(ARIA_EXPANDED, true);\n                  ul.attr(ARIA_HIDDEN, false);\n\n                  if (timeView.current()) {\n                    element.attr(ARIA_ACTIVEDESCENDANT, timeView._optionID);\n                  }\n                }\n              },\n              close: function (e) {\n                if (that.trigger(CLOSE)) {\n                  e.preventDefault();\n                } else {\n                  element.attr(ARIA_EXPANDED, false);\n                  ul.attr(ARIA_HIDDEN, true);\n                  element[0].removeAttribute(ARIA_ACTIVEDESCENDANT);\n                }\n              },\n              active: function (current) {\n                if (element && element.length) {\n                  element[0].removeAttribute(ARIA_ACTIVEDESCENDANT);\n                }\n\n                if (current) {\n                  element.attr(ARIA_ACTIVEDESCENDANT, timeView._optionID);\n                }\n              },\n              specifiedRange: that._specifiedRange,\n              maxSet: +options.max != +TODAY\n            }));\n            ul = timeView.ul;\n\n            that._ariaLabel(ul);\n\n            that._icon();\n\n            that._reset();\n\n            try {\n              element[0].setAttribute(\"type\", \"text\");\n            } catch (e) {\n              element[0].type = \"text\";\n            }\n\n            element.addClass(\"k-input-inner\").attr({\n              \"role\": \"combobox\",\n              \"aria-expanded\": false,\n              \"aria-owns\": timeView._timeViewID,\n              \"autocomplete\": \"off\"\n            });\n            disabled = element.is(\"[disabled]\") || $(that.element).parents(\"fieldset\").is(':disabled');\n\n            if (disabled) {\n              that.enable(false);\n            } else {\n              that.readonly(element.is(\"[readonly]\"));\n            }\n\n            if (options.dateInput) {\n              var min = options.min;\n              var max = options.max;\n              var today = new DATE();\n\n              if (getMilliseconds(min) == getMilliseconds(max)) {\n                min = new DATE(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0);\n                max = new DATE(today.getFullYear(), today.getMonth(), today.getDate(), 24, 0, 0);\n              }\n\n              that._dateInput = new ui.DateInput(element, {\n                culture: options.culture,\n                format: options.format,\n                min: min,\n                max: max,\n                value: options.value,\n                interval: options.interval,\n                size: options.size,\n                fillMode: options.fillMode,\n                rounded: options.rounded\n              });\n            }\n\n            that._old = that._update(options.value || that.element.val());\n            that._oldText = element.val();\n\n            that._applyCssClasses();\n\n            kendo.notify(that);\n          },\n          options: {\n            name: \"TimePicker\",\n            min: TODAY,\n            max: TODAY,\n            format: \"\",\n            dates: [],\n            parseFormats: [],\n            value: null,\n            interval: 30,\n            height: 200,\n            animation: {},\n            dateInput: false,\n            messages: {\n              set: \"Set\",\n              cancel: \"Cancel\",\n              hour: \"hour\",\n              minute: \"minute\",\n              second: \"second\",\n              millisecond: \"millisecond\",\n              now: \"Now\"\n            },\n            componentType: \"classic\",\n            size: \"medium\",\n            fillMode: \"solid\",\n            rounded: \"medium\"\n          },\n          events: [OPEN, CLOSE, CHANGE],\n          componentTypes: {\n            \"classic\": {\n              timeView: {\n                list: \"list\"\n              }\n            },\n            \"modern\": {\n              timeView: {\n                list: \"scroll\"\n              }\n            }\n          },\n          setOptions: function (options) {\n            var that = this;\n            var value = that._value;\n            Widget.fn.setOptions.call(that, options);\n            options = that.options;\n\n            if (+options.max != +TODAY || +options.min != +TODAY) {\n              this._specifiedRange = true;\n            }\n\n            that._arrow.off(ns);\n\n            that._arrow.remove();\n\n            normalize(options);\n            that.timeView.setOptions(options);\n\n            that._icon();\n\n            that._editable(options);\n\n            if (value) {\n              that.element.val(kendo.toString(value, options.format, options.culture));\n            }\n          },\n          dataBind: function (dates) {\n            if (isArray(dates)) {\n              this.timeView.dataBind(dates);\n            }\n          },\n          _editable: function (options) {\n            var that = this,\n                disable = options.disable,\n                readonly = options.readonly,\n                arrow = that._arrow.off(ns),\n                element = that.element.off(ns),\n                wrapper = that.wrapper.off(ns);\n\n            if (that._dateInput) {\n              that._dateInput._unbindInput();\n            }\n\n            if (!readonly && !disable) {\n              wrapper.removeClass(STATEDISABLED).on(HOVEREVENTS, that._toggleHover);\n\n              if (element && element.length) {\n                element[0].removeAttribute(DISABLED);\n                element[0].removeAttribute(READONLY);\n              }\n\n              element.attr(ARIA_DISABLED, false).attr(ARIA_READONLY, false).on(\"keydown\" + ns, that._keydown.bind(that)).on(\"focusout\" + ns, that._blur.bind(that)).on(\"focus\" + ns, function () {\n                that.wrapper.addClass(FOCUSED);\n              });\n\n              if (that._dateInput) {\n                that._dateInput._bindInput();\n              }\n\n              arrow.on(CLICK, that._click.bind(that)).on(MOUSEDOWN, preventDefault);\n            } else {\n              wrapper.addClass(disable ? STATEDISABLED : \"\").removeClass(disable ? \"\" : STATEDISABLED);\n              element.attr(DISABLED, disable).attr(READONLY, readonly).attr(ARIA_DISABLED, disable).attr(ARIA_READONLY, readonly);\n            }\n          },\n          readonly: function (readonly) {\n            this._editable({\n              readonly: readonly === undefined ? true : readonly,\n              disable: false\n            });\n          },\n          enable: function (enable) {\n            this._editable({\n              readonly: false,\n              disable: !(enable = enable === undefined ? true : enable)\n            });\n          },\n          destroy: function () {\n            var that = this;\n            Widget.fn.destroy.call(that);\n            that.timeView.destroy();\n            that.element.off(ns);\n\n            that._arrow.off(ns);\n\n            that.wrapper.off(ns);\n\n            if (that._form) {\n              that._form.off(\"reset\", that._resetHandler);\n            }\n          },\n          close: function () {\n            this.timeView.close();\n          },\n          open: function () {\n            this.timeView.open();\n          },\n          min: function (value) {\n            if (value) {\n              this._specifiedRange = true;\n            }\n\n            return this._option(\"min\", value);\n          },\n          max: function (value) {\n            if (value && this.timeView) {\n              this._specifiedRange = true;\n              this.timeView.options.maxSet = true;\n            } else if (this.timeView) {\n              this.timeView.options.maxSet = false;\n            }\n\n            return this._option(\"max\", value);\n          },\n          value: function (value) {\n            var that = this;\n\n            if (value === undefined) {\n              return that._value;\n            }\n\n            that._old = that._update(value);\n\n            if (that._old === null) {\n              that.element.val(\"\");\n            }\n\n            that._oldText = that.element.val();\n          },\n          _blur: function () {\n            var that = this,\n                value = that.element.val();\n\n            if (!(that.options.timeView && that.options.timeView.list === \"scroll\")) {\n              that.close();\n            }\n\n            if (value !== that._oldText) {\n              that._change(value);\n            }\n\n            that.wrapper.removeClass(FOCUSED);\n          },\n          _click: function () {\n            var that = this,\n                element = that.element;\n            that.timeView.toggle();\n\n            if (!support.touch && element[0] !== activeElement()) {\n              element.trigger(\"focus\");\n            }\n          },\n          _change: function (value) {\n            var that = this,\n                oldValue = that.element.val(),\n                dateChanged;\n            value = that._update(value);\n            dateChanged = !kendo.calendar.isEqualDate(that._old, value);\n            var valueUpdated = dateChanged && !that._typing;\n            var textFormatted = oldValue !== that.element.val();\n\n            if (valueUpdated || textFormatted) {\n              that.element.trigger(CHANGE);\n            }\n\n            if (dateChanged) {\n              that._old = value;\n              that._oldText = that.element.val();\n              that.trigger(CHANGE);\n            }\n\n            that._typing = false;\n          },\n          _icon: function () {\n            var that = this,\n                element = that.element,\n                options = that.options,\n                arrow;\n            arrow = element.next(\"button.k-input-button\");\n\n            if (!arrow[0]) {\n              arrow = $(html.renderButton('<button unselectable=\"on\" tabindex=\"-1\" class=\"k-input-button\" aria-label=\"select\"></button>', {\n                icon: \"clock\",\n                size: options.size,\n                fillMode: options.fillMode,\n                shape: null,\n                rounded: null\n              })).insertAfter(element);\n            }\n\n            that._arrow = arrow.attr({\n              \"role\": \"button\",\n              \"aria-controls\": that.timeView._timeViewID\n            });\n          },\n          _keydown: function (e) {\n            var that = this,\n                key = e.keyCode,\n                timeView = that.timeView,\n                value = that.element.val();\n\n            if (timeView.popup.visible() || e.altKey) {\n              timeView.move(e);\n\n              if (that._dateInput && e.stopImmediatePropagation) {\n                e.stopImmediatePropagation();\n              }\n            } else if (key === keys.ENTER && value !== that._oldText) {\n              that._change(value);\n            } else {\n              that._typing = true;\n            }\n          },\n          _option: function (option, value) {\n            var that = this,\n                options = that.options;\n\n            if (value === undefined) {\n              return options[option];\n            }\n\n            value = that.timeView._parse(value);\n\n            if (!value) {\n              return;\n            }\n\n            value = new DATE(+value);\n            options[option] = value;\n            that.timeView.options[option] = value;\n            that.timeView.bind();\n          },\n          _toggleHover: function (e) {\n            $(e.currentTarget).toggleClass(HOVER, e.type === \"mouseenter\");\n          },\n          _update: function (value) {\n            var that = this,\n                options = that.options,\n                timeView = that.timeView,\n                date = timeView._parse(value);\n\n            if (!isInRange(date, options.min, options.max)) {\n              date = null;\n            }\n\n            that._value = date;\n            that._currentlySelected = date;\n\n            if (that._dateInput && date) {\n              that._dateInput.value(date || value);\n            } else {\n              that.element.val(kendo.toString(date || value, options.format, options.culture));\n            }\n\n            timeView.value(date);\n            return date;\n          },\n          _wrapper: function () {\n            var that = this,\n                element = that.element,\n                wrapper;\n            wrapper = element.parents(\".k-timepicker\");\n\n            if (!wrapper[0]) {\n              wrapper = element.wrap(SPAN).parent();\n            }\n\n            wrapper[0].style.cssText = element[0].style.cssText;\n            that.wrapper = wrapper.addClass(\"k-timepicker k-input\").addClass(element[0].className);\n            element.css({\n              height: element[0].style.height\n            });\n          },\n          _reset: function () {\n            var that = this,\n                element = that.element,\n                formId = element.attr(\"form\"),\n                form = formId ? $(\"#\" + formId) : element.closest(\"form\");\n\n            if (form[0]) {\n              that._resetHandler = function () {\n                that.value(element[0].defaultValue);\n                that.max(that._initialOptions.max);\n                that.min(that._initialOptions.min);\n              };\n\n              that._form = form.on(\"reset\", that._resetHandler);\n            }\n          }\n        });\n\n        function normalize(options) {\n          var parseFormats = options.parseFormats;\n          options.format = extractFormat(options.format || kendo.getCulture(options.culture).calendars.standard.patterns.t);\n          parseFormats = isArray(parseFormats) ? parseFormats : [parseFormats];\n          parseFormats.splice(0, 0, options.format);\n          options.parseFormats = parseFormats;\n        }\n\n        function preventDefault(e) {\n          e.preventDefault();\n        }\n\n        function mergeDateAndTime(date, time) {\n          return new Date(date.getFullYear(), date.getMonth(), date.getDate(), time.getHours(), time.getMinutes(), time.getSeconds(), time.getMilliseconds());\n        }\n\n        function datePattern(format, info) {\n          var calendar = info.calendar;\n          var result;\n\n          if (typeof format === \"string\") {\n            if (calendar.patterns[format]) {\n              result = calendar.patterns[format];\n            } else {\n              result = format;\n            }\n          }\n\n          if (!result) {\n            result = calendar.patterns.d;\n          }\n\n          return result;\n        }\n\n        function addLiteral(parts, value) {\n          var lastPart = parts[parts.length - 1];\n\n          if (lastPart && lastPart.type === \"LITERAL\") {\n            lastPart.pattern += value;\n          } else {\n            parts.push({\n              type: LITERAL,\n              pattern: value\n            });\n          }\n        }\n\n        function isHour12(pattern) {\n          return pattern === \"h\" || pattern === \"K\";\n        }\n\n        function dateNameType(formatLength) {\n          var nameType;\n\n          if (formatLength <= 3) {\n            nameType = \"abbreviated\";\n          } else if (formatLength === 4) {\n            nameType = \"wide\";\n          } else if (formatLength === 5) {\n            nameType = \"narrow\";\n          } else if (formatLength === 6) {\n            nameType = \"short\";\n          }\n\n          return nameType;\n        }\n\n        function startsWith(text, searchString, position) {\n          position = position || 0;\n          return text.indexOf(searchString, position) === position;\n        }\n\n        function includes(text, subStr) {\n          var returnValue = false;\n\n          if (text.indexOf(subStr) !== -1) {\n            returnValue = true;\n          }\n\n          return returnValue;\n        }\n\n        function splitDateFormat(format) {\n          var info = kendo.culture();\n          var pattern = datePattern(format, info);\n          var parts = [];\n          var lastIndex = dateFormatRegExp.lastIndex = 0;\n          var match = dateFormatRegExp.exec(pattern);\n          var specifier;\n          var type;\n          var part;\n          var names;\n          var minLength;\n          var patternLength;\n\n          while (match) {\n            var value = match[0];\n\n            if (lastIndex < match.index) {\n              addLiteral(parts, pattern.substring(lastIndex, match.index));\n            }\n\n            if (startsWith(value, '\"') || startsWith(value, \"'\")) {\n              addLiteral(parts, value);\n            } else {\n              specifier = value[0];\n              type = DATE_FIELD_MAP[specifier];\n              part = {\n                type: type,\n                pattern: value\n              };\n\n              if (type === \"hour\") {\n                part.hour12 = isHour12(value);\n              }\n\n              names = NAME_TYPES[type];\n\n              if (names) {\n                minLength = typeof names.minLength === \"number\" ? names.minLength : names.minLength[specifier];\n                patternLength = value.length;\n\n                if (patternLength >= minLength) {\n                  part.names = {\n                    type: names.type,\n                    nameType: dateNameType(patternLength),\n                    standAlone: names.standAlone === specifier\n                  };\n                }\n              }\n\n              parts.push(part);\n            }\n\n            lastIndex = dateFormatRegExp.lastIndex;\n            match = dateFormatRegExp.exec(pattern);\n          }\n\n          if (lastIndex < pattern.length) {\n            addLiteral(parts, pattern.substring(lastIndex));\n          }\n\n          return parts;\n        }\n\n        function pad(value, size) {\n          var s = String(value);\n\n          while (s.length < (size || 2)) {\n            s = \"0\" + s;\n          }\n\n          return s;\n        }\n\n        function firstItemIndex(scrollTop, itemHeight) {\n          return Math.max(Math.round(scrollTop / itemHeight), 0);\n        }\n\n        function getItemHeight(item) {\n          return item.length && item[0].getBoundingClientRect().height;\n        }\n\n        function scrollIntoViewIfNeeded(element, centerIfNeeded) {\n          function makeRange(start, length) {\n            return {\n              start: start,\n              length: length,\n              end: start + length\n            };\n          }\n\n          function coverRange(inner, outer) {\n            if (false === centerIfNeeded || outer.start < inner.end && inner.start < outer.end) {\n              return Math.min(inner.start, Math.max(outer.start, inner.end - outer.length));\n            }\n\n            return (inner.start + inner.end - outer.length) / 2;\n          }\n\n          function makePoint(x, y) {\n            return {\n              x: x,\n              y: y,\n              translate: function translate(dX, dY) {\n                return makePoint(x + dX, y + dY);\n              }\n            };\n          }\n\n          function absolute(elem, pt) {\n            while (elem) {\n              pt = pt.translate(elem.offsetLeft, elem.offsetTop);\n              elem = elem.offsetParent;\n            }\n\n            return pt;\n          }\n\n          var target = absolute(element, makePoint(0, 0)),\n              extent = makePoint(element.offsetWidth, element.offsetHeight),\n              elem = element.parentNode,\n              origin;\n\n          while (elem instanceof HTMLElement) {\n            origin = absolute(elem, makePoint(elem.clientLeft, elem.clientTop));\n            elem.scrollLeft = coverRange(makeRange(target.x - origin.x, extent.x), makeRange(elem.scrollLeft, elem.clientWidth));\n            elem.scrollTop = coverRange(makeRange(target.y - origin.y, extent.y), makeRange(elem.scrollTop, elem.clientHeight));\n            target = target.translate(-elem.scrollLeft, -elem.scrollTop);\n            elem = elem.parentNode;\n          }\n        }\n\n        kendo.cssProperties.registerPrefix(\"TimePicker\", \"k-input-\");\n        kendo.cssProperties.registerValues(\"TimePicker\", [{\n          prop: \"rounded\",\n          values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n        }]);\n        ui.plugin(TimePicker);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}