{"ast":null,"code":"var Dictionary = function () {\n  function Dictionary() {\n    this.myKeys = new Array();\n    this.myValues = new Array();\n    this.myDictionary = {};\n  }\n\n  Dictionary.prototype.add = function (key, value) {\n    if (this.myDictionary[key]) {\n      this.remove(key);\n    }\n\n    this.myDictionary[key] = value;\n    this.myKeys.push(key);\n    this.myValues.push(value);\n  };\n\n  Dictionary.prototype.remove = function (key) {\n    var index = this.myKeys.indexOf(key, 0);\n    this.myKeys.splice(index, 1);\n    this.myValues.splice(index, 1);\n    delete this.myDictionary[key];\n  };\n\n  Dictionary.prototype.keys = function () {\n    return this.myKeys;\n  };\n\n  Dictionary.prototype.values = function () {\n    return this.myValues;\n  };\n\n  Dictionary.prototype.value = function (key) {\n    return this.myDictionary[key];\n  };\n\n  Dictionary.prototype.containsKey = function (key) {\n    if (typeof this.myDictionary[key] === 'undefined') {\n      return false;\n    }\n\n    return true;\n  };\n\n  Dictionary.prototype.toLookup = function () {\n    return this;\n  };\n\n  Object.defineProperty(Dictionary.prototype, \"length\", {\n    get: function () {\n      return this.myValues.length;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Dictionary.prototype.replace = function (key, value) {\n    if (this.containsKey(key)) {\n      this.myDictionary[key] = value;\n    }\n  };\n\n  return Dictionary;\n}();\n\nexport { Dictionary }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGljdGlvbmFyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BcHBsaWNhdGlvbi9EaWN0aW9uYXJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9CQTtJQUVJO1FBQ0ksSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLEtBQUssRUFBVSxDQUFDO1FBQ2xDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxLQUFLLEVBQU8sQ0FBQztRQUNqQyxJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztJQUMzQixDQUFDO0lBTUQsd0JBQUcsR0FBSCxVQUFJLEdBQVcsRUFBRSxLQUFVO1FBRXZCLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUN4QixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3BCO1FBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDL0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVELDJCQUFNLEdBQU4sVUFBTyxHQUFXO1FBQ2QsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM3QixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDL0IsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCx5QkFBSSxHQUFKO1FBQ0ksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCwyQkFBTSxHQUFOO1FBQ0ksT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3pCLENBQUM7SUFFRCwwQkFBSyxHQUFMLFVBQU0sR0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQsZ0NBQVcsR0FBWCxVQUFZLEdBQVc7UUFDbkIsSUFBSSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEtBQUssV0FBVyxFQUFFO1lBQy9DLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELDZCQUFRLEdBQVI7UUFDSSxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQsc0JBQUksOEJBQU07YUFBVjtZQUNJLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7UUFDaEMsQ0FBQzs7O09BQUE7SUFFRCw0QkFBTyxHQUFQLFVBQVEsR0FBVyxFQUFFLEtBQVU7UUFDM0IsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO1NBQ2xDO0lBQ0wsQ0FBQztJQUNMLGlCQUFDO0FBQUQsQ0FBQyxBQTlERCxJQThEQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4qIENvcHlyaWdodCAoQykgTW9iaWxpemUuTmV0IDxpbmZvQG1vYmlsaXplLm5ldD4gLSBBbGwgUmlnaHRzIFJlc2VydmVkXHJcbipcclxuKiBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgTW9iaWxpemUgRnJhbWV3b3Jrcywgd2hpY2ggaXNcclxuKiBwcm9wcmlldGFyeSBhbmQgY29uZmlkZW50aWFsLlxyXG4qXHJcbiogTk9USUNFOiAgQWxsIGluZm9ybWF0aW9uIGNvbnRhaW5lZCBoZXJlaW4gaXMsIGFuZCByZW1haW5zXHJcbiogdGhlIHByb3BlcnR5IG9mIE1vYmlsaXplLk5ldCBDb3Jwb3JhdGlvbi5cclxuKiBUaGUgaW50ZWxsZWN0dWFsIGFuZCB0ZWNobmljYWwgY29uY2VwdHMgY29udGFpbmVkIGhlcmVpbiBhcmVcclxuKiBwcm9wcmlldGFyeSB0byBNb2JpbGl6ZS5OZXQgQ29ycG9yYXRpb24gYW5kIG1heSBiZSBjb3ZlcmVkXHJcbiogYnkgVS5TLiBQYXRlbnRzLCBhbmQgYXJlIHByb3RlY3RlZCBieSB0cmFkZSBzZWNyZXQgb3IgY29weXJpZ2h0IGxhdy5cclxuKiBEaXNzZW1pbmF0aW9uIG9mIHRoaXMgaW5mb3JtYXRpb24gb3IgcmVwcm9kdWN0aW9uIG9mIHRoaXMgbWF0ZXJpYWxcclxuKiBpcyBzdHJpY3RseSBmb3JiaWRkZW4gdW5sZXNzIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbiBpcyBvYnRhaW5lZFxyXG4qIGZyb20gTW9iaWxpemUuTmV0IENvcnBvcmF0aW9uLlxyXG4qXHJcbiogVGhpcyBmaWxlIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zIGRlZmluZWQgaW5cclxuKiBmaWxlICdMSUNFTlNFLnR4dCcsIHdoaWNoIGlzIHBhcnQgb2YgdGhpcyBzb3VyY2UgY29kZSBwYWNrYWdlLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuaW1wb3J0IHsgSURpY3Rpb25hcnkgfSBmcm9tICcuLi9Db250cmFjdCc7XHJcblxyXG5leHBvcnQgY2xhc3MgRGljdGlvbmFyeSBpbXBsZW1lbnRzIElEaWN0aW9uYXJ5IHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLm15S2V5cyA9IG5ldyBBcnJheTxzdHJpbmc+KCk7XHJcbiAgICAgICAgdGhpcy5teVZhbHVlcyA9IG5ldyBBcnJheTxhbnk+KCk7XHJcbiAgICAgICAgdGhpcy5teURpY3Rpb25hcnkgPSB7fTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IG15S2V5czogQXJyYXk8c3RyaW5nPjtcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgbXlWYWx1ZXM6IEFycmF5PGFueT47XHJcbiAgICBwcml2YXRlIG15RGljdGlvbmFyeTogYW55O1xyXG5cclxuICAgIGFkZChrZXk6IHN0cmluZywgdmFsdWU6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIC8vIHJlbW92ZSBpZiB0aGUga2V5IGFscmVhZHkgZXhpc3RzIHRvIGF2b2lkIGR1cGxpY2F0ZXMgaW4gdGhlIGFycmF5cyBvZiBrZXlzIGFuZCB2YWx1ZXNcclxuICAgICAgICBpZiAodGhpcy5teURpY3Rpb25hcnlba2V5XSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZShrZXkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm15RGljdGlvbmFyeVtrZXldID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5teUtleXMucHVzaChrZXkpO1xyXG4gICAgICAgIHRoaXMubXlWYWx1ZXMucHVzaCh2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlKGtleTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLm15S2V5cy5pbmRleE9mKGtleSwgMCk7XHJcbiAgICAgICAgdGhpcy5teUtleXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB0aGlzLm15VmFsdWVzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgZGVsZXRlIHRoaXMubXlEaWN0aW9uYXJ5W2tleV07XHJcbiAgICB9XHJcblxyXG4gICAga2V5cygpOiBzdHJpbmdbXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubXlLZXlzO1xyXG4gICAgfVxyXG5cclxuICAgIHZhbHVlcygpOiBhbnlbXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubXlWYWx1ZXM7XHJcbiAgICB9XHJcblxyXG4gICAgdmFsdWUoa2V5OiBzdHJpbmcpOiBhbnkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm15RGljdGlvbmFyeVtrZXldO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnRhaW5zS2V5KGtleTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLm15RGljdGlvbmFyeVtrZXldID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICB0b0xvb2t1cCgpOiBJRGljdGlvbmFyeSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGxlbmd0aCgpOiBhbnkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm15VmFsdWVzLmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICByZXBsYWNlKGtleTogc3RyaW5nLCB2YWx1ZTogYW55KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29udGFpbnNLZXkoa2V5KSkge1xyXG4gICAgICAgICAgICB0aGlzLm15RGljdGlvbmFyeVtrZXldID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==","map":null,"metadata":{},"sourceType":"module"}