{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1200);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1051:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.core\");\n    /***/\n  },\n\n  /***/\n  1052:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.popup\");\n    /***/\n  },\n\n  /***/\n  1095:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.textbox\");\n    /***/\n  },\n\n  /***/\n  1200:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1051), __webpack_require__(1052), __webpack_require__(1095)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"dialog\",\n        name: \"Dialog\",\n        category: \"web\",\n        // suite\n        description: \"The dialog widget is a modal popup that brings information to the user.\",\n        depends: [\"core\", \"popup\", \"textbox\"] // dependencies\n\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n            TabKeyTrap = kendo.ui.Popup.TabKeyTrap,\n            template = kendo.template,\n            keys = kendo.keys,\n            isFunction = kendo.isFunction,\n            NS = \"kendoWindow\",\n            KDIALOG = \".k-dialog\",\n            KWINDOW = \".k-window\",\n            KICONCLOSE = \".k-dialog-close\",\n            KCONTENTCLASS = \"k-window-content k-dialog-content\",\n            KCONTENTSELECTOR = \".k-window-content\",\n            KSCROLL = \"k-scroll\",\n            KTITLELESS = \"k-dialog-titleless\",\n            KDIALOGTITLE = \".k-dialog-title\",\n            KDIALOGTITLEBAR = \".k-dialog-titlebar\",\n            KBUTTONGROUP = \".k-dialog-buttongroup\",\n            // KACTIONS = \".k-actions\",\n        KBUTTON = \".k-button\",\n            KALERT = \"k-alert\",\n            KCONFIRM = \"k-confirm\",\n            KPROMPT = \"k-prompt\",\n            KTEXTBOX = \".k-input-inner\",\n            KOVERLAY = \".k-overlay\",\n            VISIBLE = \":visible\",\n            ZINDEX = \"zIndex\",\n            BODY = \"body\",\n            INITOPEN = \"initOpen\",\n            TOUCHSTART = \"touchstart\",\n            TOUCHMOVE = \"touchmove\",\n            OPEN = \"open\",\n            CLOSE = \"close\",\n            SHOW = \"show\",\n            HIDE = \"hide\",\n            SIZE = {\n          small: \"k-window-sm\",\n          medium: \"k-window-md\",\n          large: \"k-window-lg\"\n        },\n            HIDDEN = \"hidden\",\n            OVERFLOW = \"overflow\",\n            DATADOCOVERFLOWRULE = \"original-overflow-rule\",\n            DATAHTMLTAPYRULE = \"tap-y\",\n            messages = {\n          okText: \"OK\",\n          cancel: \"Cancel\",\n          promptInput: \"Input\"\n        },\n            ceil = Math.ceil,\n            templates,\n            overlaySelector = \":not(link,meta,script,style)\";\n\n        function defined(x) {\n          return typeof x != \"undefined\";\n        }\n\n        function constrain(value, low, high) {\n          return Math.max(Math.min(parseInt(value, 10), high === Infinity ? high : parseInt(high, 10)), parseInt(low, 10));\n        }\n\n        function buttonKeyTrigger(e) {\n          return e.keyCode == keys.ENTER || e.keyCode == keys.SPACEBAR;\n        }\n\n        var DialogBase = Widget.extend({\n          init: function (element, options) {\n            var that = this;\n            Widget.fn.init.call(that, element, options);\n\n            that._init(that.element, that.options);\n\n            kendo.notify(that);\n          },\n          _init: function (element, options) {\n            var that = this,\n                wrapper;\n            that._centerCallback = that._center.bind(that);\n            that.appendTo = $(BODY);\n\n            if (!defined(options.visible) || options.visible === null) {\n              options.visible = element.is(VISIBLE);\n            }\n\n            if (that.wrapperTemplate === undefined) {\n              that.wrapperTemplate = templates.wrapper;\n            }\n\n            that._createDialog();\n\n            wrapper = that.wrapper = element.closest(KDIALOG);\n\n            if (options._defaultFocus === undefined) {\n              that._defaultFocus = element[0];\n            }\n\n            that._tabindex(element);\n\n            that._dimensions();\n\n            this._tabKeyTrap = new TabKeyTrap(wrapper);\n\n            if (!that.options.visible) {\n              that.wrapper.hide();\n            } else {\n              that._triggerOpen();\n            }\n          },\n          setOptions: function (options) {\n            var that = this;\n            var sizeClass = that.options.size;\n            options = $.extend(that.options, options);\n            Widget.fn.setOptions.call(that, options);\n\n            if (options.title !== undefined) {\n              that.title(options.title);\n            }\n\n            if (options.content) {\n              kendo.destroy(that.element.children());\n              that.element.html(options.content);\n            }\n\n            if (options.actions) {\n              that.wrapper.children(KBUTTONGROUP).remove();\n\n              that._createActionbar(that.wrapper);\n            }\n\n            that.wrapper.show();\n\n            that._closable(that.wrapper);\n\n            that.wrapper.removeClass(SIZE[sizeClass]);\n\n            that._dimensions();\n\n            if (!options.visible) {\n              that.wrapper.hide();\n            } else {\n              that._triggerOpen();\n            }\n\n            if (typeof options.modal !== \"undefined\") {\n              var visible = that.options.visible !== false;\n\n              that._enableDocumentScrolling();\n\n              that._overlay(options.modal && visible);\n            }\n          },\n          _dimensions: function () {\n            var that = this,\n                wrapper = that.wrapper,\n                options = that.options,\n                width = options.width,\n                height = options.height,\n                sizeClass = options.size,\n                dimensions = [\"minWidth\", \"minHeight\", \"maxWidth\", \"maxHeight\"];\n\n            for (var i = 0; i < dimensions.length; i++) {\n              var value = options[dimensions[i]];\n\n              if (value && value != Infinity) {\n                wrapper.css(dimensions[i], value);\n              }\n            }\n\n            this._setElementMaxHeight();\n\n            if (width) {\n              if (width.toString().indexOf(\"%\") > 0) {\n                wrapper.width(width);\n              } else {\n                wrapper.outerWidth(constrain(width, options.minWidth, options.maxWidth));\n              }\n            }\n\n            if (height) {\n              if (height.toString().indexOf(\"%\") > 0) {\n                wrapper.height(height);\n              } else {\n                wrapper.outerHeight(constrain(height, options.minHeight, options.maxHeight));\n              }\n\n              this._setElementHeight();\n            }\n\n            if (sizeClass && SIZE[sizeClass]) {\n              wrapper.addClass(SIZE[sizeClass]);\n            }\n          },\n          _setElementMaxHeight: function () {\n            var that = this,\n                element = that.element,\n                maxHeight = that.options.maxHeight,\n                elementMaxHeight;\n\n            if (maxHeight != Infinity) {\n              elementMaxHeight = parseFloat(maxHeight, 10) - that._uiHeight();\n\n              if (elementMaxHeight > 0) {\n                element.css({\n                  maxHeight: ceil(elementMaxHeight) + \"px\"\n                });\n              }\n            }\n          },\n          _setElementHeight: function () {\n            var that = this,\n                element = that.element,\n                height = that.wrapper.outerHeight(true),\n                elementHeight = parseFloat(height, 10) - that._uiHeight();\n\n            if (elementHeight < 0) {\n              elementHeight = 0;\n            }\n\n            element.css({\n              height: ceil(elementHeight) + \"px\"\n            });\n\n            this._applyScrollClassName(element);\n          },\n          _applyScrollClassName: function (element) {\n            var hasScroll = element.get(0).scrollHeight > element.outerHeight();\n\n            if (hasScroll) {\n              element.addClass(KSCROLL);\n            } else {\n              element.removeClass(KSCROLL);\n            }\n          },\n          _uiHeight: function () {\n            var that = this,\n                wrapper = that.wrapper,\n                actionbar = wrapper.children(KBUTTONGROUP),\n                actionbarHeight = actionbar[0] && actionbar[0].offsetHeight || 0,\n                titlebar = wrapper.children(KDIALOGTITLEBAR),\n                titlebarHeight = titlebar[0] && titlebar[0].offsetHeight || 0;\n            return actionbarHeight + titlebarHeight;\n          },\n          _overlay: function (visible) {\n            var overlay = this.appendTo.children(KOVERLAY),\n                wrapper = this.wrapper;\n\n            if (!overlay.length) {\n              overlay = $(templates.overlay);\n            }\n\n            overlay.insertBefore(wrapper[0]).toggle(visible).css(ZINDEX, parseInt(wrapper.css(ZINDEX), 10) - 1);\n\n            if (visible) {\n              this._waiAriaOverlay();\n            } else {\n              this._removeWaiAriaOverlay();\n            }\n\n            if (this.options.modal.preventScroll) {\n              this._stopDocumentScrolling();\n            }\n\n            return overlay;\n          },\n          _waiAriaOverlay: function () {\n            var node = this.wrapper;\n            this._overlayedNodes = node.prevAll(overlaySelector).add(node.nextAll(overlaySelector)).each(function () {\n              var jthis = $(this);\n              jthis.data(\"ariaHidden\", jthis.attr(\"aria-hidden\"));\n              jthis.attr(\"aria-hidden\", \"true\");\n            });\n          },\n          _removeWaiAriaOverlay: function () {\n            return this._overlayedNodes && this._overlayedNodes.each(function () {\n              var node = $(this);\n              var hiddenValue = node.data(\"ariaHidden\");\n\n              if (hiddenValue) {\n                node.attr(\"aria-hidden\", hiddenValue);\n              } else {\n                node.removeAttr(\"aria-hidden\");\n              }\n            });\n          },\n          _closeClick: function (e) {\n            e.preventDefault();\n            this.close(false);\n          },\n          _closeKeyHandler: function (e) {\n            if (buttonKeyTrigger(e) || e.keyCode == keys.ESC) {\n              this.close(false);\n            }\n          },\n          _keydown: function (e) {\n            var that = this,\n                options = that.options,\n                keyCode = e.keyCode;\n\n            if (keyCode == keys.ESC && !that._closing && options.closable) {\n              that.close(false);\n            }\n          },\n          _createDialog: function () {\n            var that = this,\n                content = that.element,\n                options = that.options,\n                isRtl = kendo.support.isRtl(content),\n                titlebar = $(templates.titlebar(options)),\n                titleId = (content.id || kendo.guid()) + \"_title\",\n                wrapper = $(that.wrapperTemplate(options));\n            wrapper.toggleClass(\"k-rtl\", isRtl);\n            content.addClass(KCONTENTCLASS);\n            that.appendTo.append(wrapper);\n\n            if (options.title !== false) {\n              wrapper.append(titlebar);\n              titlebar.attr(\"id\", titleId);\n              wrapper.attr(\"aria-labelledby\", titleId);\n            } else {\n              wrapper.addClass(KTITLELESS);\n            }\n\n            that._closable(wrapper);\n\n            wrapper.append(content);\n\n            if (options.content) {\n              kendo.destroy(content.children());\n              content.html(options.content);\n            }\n\n            if (options.actions.length) {\n              that._createActionbar(wrapper);\n            }\n          },\n          _closable: function (wrapper) {\n            var that = this;\n            var options = that.options;\n            var titlebar = wrapper.children(KDIALOGTITLEBAR);\n            var titlebarActions = titlebar.find(\".k-window-actions\");\n            var closeAction = titlebarActions.length ? titlebarActions.find(\".k-dialog-close\") : wrapper.find(\".k-dialog-close\");\n            closeAction.remove();\n\n            if (options.closable !== false) {\n              if (options.title !== false && titlebarActions.length) {\n                titlebarActions.append(templates.close(options));\n              } else {\n                wrapper.prepend(templates.close(options));\n              }\n\n              wrapper.autoApplyNS(NS);\n              that.element.autoApplyNS(NS);\n              wrapper.find(KICONCLOSE).on(\"click\", that._closeClick.bind(that)).on(\"keydown\", that._closeKeyHandler.bind(that));\n              that.element.on(\"keydown\", that._keydown.bind(that));\n            }\n          },\n          _createActionbar: function (wrapper) {\n            var isStretchedLayout = this.options.buttonLayout === \"stretched\";\n            var buttonLayout = isStretchedLayout ? \"stretch\" : \"end\";\n            var actionbar = $(templates.actionbar({\n              buttonLayout: buttonLayout\n            }));\n\n            this._addButtons(actionbar);\n\n            wrapper.append(actionbar);\n          },\n          _addButtons: function (actionbar) {\n            var that = this,\n                actionClick = that._actionClick.bind(that),\n                actionKeyHandler = that._actionKeyHandler.bind(that),\n                actions = that.options.actions,\n                length = actions.length,\n                action,\n                text;\n\n            for (var i = 0; i < length; i++) {\n              action = actions[i];\n              text = that._mergeTextWithOptions(action);\n              $(templates.action(action)).autoApplyNS(NS).html(text).appendTo(actionbar).addClass(action.cssClass).data(\"action\", action.action).on(\"click\", actionClick).on(\"keydown\", actionKeyHandler);\n            }\n          },\n          _mergeTextWithOptions: function (action) {\n            var text = action.text;\n            return text ? template(text)(this.options) : \"\";\n          },\n          _tabindex: function (target) {\n            var that = this;\n            var wrapper = that.wrapper;\n            var closeBtn = wrapper.find(KICONCLOSE);\n            var actionButtons = wrapper.find(KBUTTONGROUP + \" \" + KBUTTON);\n\n            Widget.fn._tabindex.call(this, target);\n\n            var tabIndex = target.attr(\"tabindex\");\n            closeBtn.attr(\"tabIndex\", tabIndex);\n            actionButtons.attr(\"tabIndex\", tabIndex);\n          },\n          _actionClick: function (e) {\n            if (this.wrapper.is(VISIBLE)) {\n              this._runActionBtn(e.currentTarget);\n            }\n          },\n          _actionKeyHandler: function (e) {\n            if (buttonKeyTrigger(e)) {\n              e.preventDefault();\n\n              this._runActionBtn(e.currentTarget);\n            } else if (e.keyCode == keys.ESC) {\n              this.close(false);\n            }\n          },\n          _runActionBtn: function (target) {\n            var that = this;\n\n            if (that._closing) {\n              return;\n            }\n\n            var action = $(target).data(\"action\"),\n                preventClose = isFunction(action) && action({\n              sender: that\n            }) === false;\n\n            if (!preventClose) {\n              that.close(false);\n            }\n          },\n          _triggerOpen: function () {\n            var that = this;\n            var options = that.options;\n            var wrapper = that.wrapper;\n            that.toFront();\n\n            that._triggerInitOpen();\n\n            that.trigger(OPEN);\n\n            if (options.modal) {\n              that._overlay(wrapper.is(VISIBLE)).css({\n                opacity: 0.5\n              });\n\n              that._focusDialog();\n            }\n          },\n          open: function () {\n            var that = this,\n                wrapper = that.wrapper,\n                showOptions = this._animationOptions(OPEN),\n                options = that.options,\n                overlay,\n                otherModalsVisible;\n\n            this._triggerInitOpen();\n\n            if (!that.trigger(OPEN)) {\n              if (that._closing) {\n                wrapper.kendoStop(true, true);\n              }\n\n              that._closing = false;\n              that.toFront();\n              options.visible = true;\n\n              if (options.modal) {\n                otherModalsVisible = !!that._modals().length;\n                overlay = that._overlay(otherModalsVisible);\n                overlay.kendoStop(true, true);\n\n                if (showOptions.duration && kendo.effects.Fade && !otherModalsVisible) {\n                  var overlayFx = kendo.fx(overlay).fadeIn();\n                  overlayFx.duration(showOptions.duration || 0);\n                  overlayFx.endValue(0.5);\n                  overlayFx.play();\n                } else {\n                  overlay.css(\"opacity\", 0.5);\n                }\n\n                overlay.show();\n              }\n\n              wrapper.show().kendoStop().kendoAnimate({\n                effects: showOptions.effects,\n                duration: showOptions.duration,\n                complete: that._openAnimationEnd.bind(that)\n              });\n              wrapper.show();\n            }\n\n            return that;\n          },\n          _animationOptions: function (id) {\n            var animation = this.options.animation;\n            var basicAnimation = {\n              open: {\n                effects: {}\n              },\n              close: {\n                hide: true,\n                effects: {}\n              }\n            };\n            return animation && animation[id] || basicAnimation[id];\n          },\n          _openAnimationEnd: function () {\n            if (this.options.modal) {\n              this._focusDialog();\n            }\n\n            this.trigger(SHOW);\n          },\n          _triggerInitOpen: function () {\n            if (!defined(this._initOpenTriggered)) {\n              this._initOpenTriggered = true;\n              this.trigger(INITOPEN);\n            }\n          },\n          toFront: function () {\n            var that = this,\n                wrapper = that.wrapper,\n                zIndex = +wrapper.css(ZINDEX),\n                originalZIndex = zIndex;\n            that.center();\n            $(KWINDOW).each(function (i, element) {\n              var windowObject = $(element),\n                  zIndexNew = windowObject.css(ZINDEX);\n\n              if (!isNaN(zIndexNew)) {\n                zIndex = Math.max(+zIndexNew, zIndex);\n              }\n            });\n\n            if (!wrapper[0].style.zIndex || originalZIndex < zIndex) {\n              wrapper.css(ZINDEX, zIndex + 2);\n            }\n\n            that.element.find(\"> .k-overlay\").remove();\n            wrapper = null;\n            return that;\n          },\n          close: function (systemTriggered) {\n            if (!arguments.length) {\n              systemTriggered = true;\n            }\n\n            this._close(systemTriggered);\n\n            this._stopCenterOnResize();\n\n            return this;\n          },\n          _close: function (systemTriggered) {\n            var that = this,\n                wrapper = that.wrapper,\n                options = that.options,\n                showOptions = this._animationOptions(\"open\"),\n                hideOptions = this._animationOptions(\"close\");\n\n            if (wrapper.is(VISIBLE) && !that.trigger(CLOSE, {\n              userTriggered: !systemTriggered\n            })) {\n              if (that._closing) {\n                return;\n              }\n\n              that._closing = true;\n              options.visible = false;\n\n              this._removeOverlay();\n\n              wrapper.kendoStop().kendoAnimate({\n                effects: hideOptions.effects || showOptions.effects,\n                reverse: hideOptions.reverse === true,\n                duration: hideOptions.duration,\n                complete: this._closeAnimationEnd.bind(this)\n              });\n            }\n\n            return that;\n          },\n          center: function () {\n            this._center();\n\n            this._centerOnResize();\n          },\n          _center: function () {\n            var that = this,\n                wrapper = that.wrapper,\n                documentWindow = $(window),\n                scrollTop = 0,\n                scrollLeft = 0,\n                newLeft = scrollLeft + Math.max(0, (documentWindow.width() - wrapper.width()) / 2),\n                newTop = scrollTop + Math.max(0, (documentWindow.height() - wrapper.height() - parseInt(wrapper.css(\"paddingTop\"), 10)) / 2);\n            wrapper.css({\n              left: newLeft,\n              top: newTop\n            });\n            return that;\n          },\n          _centerOnResize: function () {\n            if (this._trackResize) {\n              return;\n            }\n\n            kendo.onResize(this._centerCallback);\n            this._trackResize = true;\n          },\n          _stopCenterOnResize: function () {\n            kendo.unbindResize(this._centerCallback);\n            this._trackResize = false;\n          },\n          _removeOverlay: function () {\n            var modals = this._modals();\n\n            var options = this.options;\n            var hideOverlay = options.modal && !modals.length;\n\n            if (hideOverlay) {\n              this._overlay(false).remove();\n\n              if (options.modal.preventScroll) {\n                this._enableDocumentScrolling();\n              }\n            } else if (modals.length) {\n              this._object(modals.last())._overlay(true);\n\n              if (options.modal.preventScroll) {\n                this._stopDocumentScrolling();\n              }\n            }\n          },\n          _stopDocumentScrolling: function () {\n            var that = this;\n            var $body = $(\"body\");\n\n            that._storeOverflowRule($body);\n\n            $body.css(OVERFLOW, HIDDEN);\n            var $html = $(\"html\");\n            var html = $html[0];\n\n            that._storeOverflowRule($html);\n\n            $html.css(OVERFLOW, HIDDEN); // prevent touch due to bug in ios\n\n            if (kendo.support.mobileOS.ios) {\n              html.addEventListener(TOUCHSTART, that._touchStart, {\n                passive: false\n              });\n              html.addEventListener(TOUCHMOVE, that._touchMove, {\n                passive: false\n              });\n            }\n          },\n          _touchStart: function (e) {\n            $(this).data(DATAHTMLTAPYRULE, e.changedTouches[0].pageY);\n          },\n          _touchMove: function (e) {\n            var target = e.target;\n            var $target = $(e.target);\n            var upScroll = e.changedTouches[0].pageY - $(this).data(DATAHTMLTAPYRULE) > 0;\n            var preventYScroll = $target.is(KCONTENTSELECTOR) && upScroll && $target.scrollTop() === 0 || !upScroll && $target.scrollTop() === target.scrollHeight - target.clientHeight;\n\n            if (!$target.is(KCONTENTSELECTOR) || preventYScroll) {\n              e.preventDefault();\n            }\n          },\n          _enableDocumentScrolling: function () {\n            var that = this;\n            var $body = $(document.body);\n            var $html = $(\"html\");\n            var html = $html[0];\n\n            that._restoreOverflowRule($body);\n\n            that._restoreOverflowRule($html);\n\n            if (kendo.support.mobileOS.ios) {\n              $html.removeData(DATAHTMLTAPYRULE);\n              html.removeEventListener(TOUCHSTART, that._touchStart, {\n                passive: false\n              });\n              html.removeEventListener(TOUCHMOVE, that._touchMove, {\n                passive: false\n              });\n            }\n          },\n          _storeOverflowRule: function ($element) {\n            if (this._isOverflowStored($element)) {\n              return;\n            }\n\n            var overflowRule = $element.get(0).style.overflow;\n\n            if (typeof overflowRule === \"string\") {\n              $element.data(DATADOCOVERFLOWRULE, overflowRule);\n            }\n          },\n          _isOverflowStored: function ($element) {\n            return typeof $element.data(DATADOCOVERFLOWRULE) === \"string\";\n          },\n          _restoreOverflowRule: function ($element) {\n            var overflowRule = $element.data(DATADOCOVERFLOWRULE);\n\n            if (overflowRule !== null && overflowRule !== undefined) {\n              $element.css(OVERFLOW, overflowRule);\n              $element.removeData(DATADOCOVERFLOWRULE);\n            } else {\n              $element.css(OVERFLOW, \"\");\n            }\n          },\n          _closeAnimationEnd: function () {\n            var that = this;\n            that._closing = false;\n            that.wrapper.hide().css(\"opacity\", \"\");\n            that.trigger(HIDE);\n\n            if (that.options.modal) {\n              var lastModal = that._object(that._modals().last());\n\n              if (lastModal) {\n                lastModal.toFront();\n              }\n            }\n          },\n          _modals: function () {\n            var that = this;\n            var zStack = $(KWINDOW).filter(function () {\n              var modal = that._object($(this));\n\n              return modal && modal.options && modal.options.modal && modal.options.visible && modal.options.appendTo === that.options.appendTo && !modal.containment && $(modal.element).is(VISIBLE);\n            }).sort(function (a, b) {\n              return +$(a).css(\"zIndex\") - +$(b).css(\"zIndex\");\n            });\n            that = null;\n            return zStack;\n          },\n          _object: function (element) {\n            var content = element.children(KCONTENTSELECTOR);\n            var widget = kendo.widgetInstance(content);\n\n            if (widget) {\n              return widget;\n            }\n\n            return undefined;\n          },\n          destroy: function () {\n            var that = this;\n\n            that._destroy();\n\n            Widget.fn.destroy.call(that);\n            kendo.destroy(that.wrapper);\n            that.wrapper.remove();\n            that.wrapper = that.element = $();\n          },\n          _destroy: function () {\n            var that = this;\n            var ns = \".\" + NS;\n            that.wrapper.off(ns);\n            that.element.off(ns);\n            that.wrapper.find(KICONCLOSE + \",\" + KBUTTONGROUP + \" > \" + KBUTTON).off(ns);\n\n            that._stopCenterOnResize();\n          },\n          title: function (html) {\n            var that = this,\n                wrapper = that.wrapper,\n                options = that.options,\n                titlebar = wrapper.children(KDIALOGTITLEBAR),\n                title = titlebar.children(KDIALOGTITLE),\n                encodedHtml = kendo.htmlEncode(html);\n\n            if (!arguments.length) {\n              return title.html();\n            }\n\n            if (html === false) {\n              titlebar.remove();\n              wrapper.addClass(KTITLELESS);\n            } else {\n              if (!titlebar.length) {\n                titlebar = $(templates.titlebar(options)).prependTo(wrapper);\n                title = titlebar.children(KDIALOGTITLE);\n                wrapper.removeClass(KTITLELESS);\n              }\n\n              title.html(encodedHtml);\n            }\n\n            that.options.title = encodedHtml;\n            return that;\n          },\n          content: function (html, data) {\n            var that = this,\n                content = that.wrapper.children(KCONTENTSELECTOR);\n\n            if (!defined(html)) {\n              return content.html();\n            }\n\n            this.angular(\"cleanup\", function () {\n              return {\n                elements: content.children()\n              };\n            });\n            kendo.destroy(content.children());\n            content.html(html);\n            this.angular(\"compile\", function () {\n              var a = [];\n\n              for (var i = content.length; --i >= 0;) {\n                a.push({\n                  dataItem: data\n                });\n              }\n\n              return {\n                elements: content.children(),\n                data: a\n              };\n            });\n            that.options.content = html;\n            return that;\n          },\n          _focusDialog: function () {\n            if (this._defaultFocus) {\n              this._focus(this._defaultFocus);\n            }\n\n            this._tabKeyTrap.trap();\n          },\n          _focus: function (node) {\n            if (node) {\n              node.focus();\n            }\n          },\n          events: [INITOPEN, OPEN, CLOSE, SHOW, HIDE],\n          options: {\n            title: \"\",\n            buttonLayout: \"stretched\",\n            actions: [],\n            modal: true,\n            size: \"auto\",\n            width: null,\n            height: null,\n            minWidth: 0,\n            minHeight: 0,\n            maxWidth: Infinity,\n            maxHeight: Infinity,\n            content: null,\n            visible: null,\n            appendTo: BODY,\n            closable: true\n          }\n        });\n        var Dialog = DialogBase.extend({\n          options: {\n            name: \"Dialog\",\n            messages: {\n              close: \"Close\"\n            }\n          }\n        });\n        kendo.ui.plugin(Dialog);\n        var PopupBox = DialogBase.extend({\n          _init: function (element, options) {\n            var that = this;\n            that.wrapperTemplate = templates.alertWrapper;\n            options._defaultFocus = null;\n\n            that._ensureContentId(element);\n\n            DialogBase.fn._init.call(that, element, options);\n\n            that.bind(HIDE, that.destroy.bind(that));\n\n            that._ariaDescribedBy();\n\n            that._initFocus();\n          },\n          _ensureContentId: function (element) {\n            var node = $(element);\n\n            if (!node.attr(\"id\")) {\n              node.attr(\"id\", kendo.guid() + \"_k-popup\");\n            }\n          },\n          _ariaDescribedBy: function () {\n            this.wrapper.attr(\"aria-describedby\", this.element.attr(\"id\"));\n          },\n          _initFocus: function () {\n            var o = this.options;\n            this._defaultFocus = this._chooseEntryFocus();\n\n            if (this._defaultFocus && o.visible && o.modal) {\n              this._focusDialog();\n            }\n          },\n          _chooseEntryFocus: function () {\n            return this.wrapper.find(KBUTTONGROUP + \" > \" + KBUTTON)[0];\n          },\n          options: {\n            title: window.location.host,\n            closable: false,\n            messages: messages\n          }\n        });\n        var Alert = PopupBox.extend({\n          _init: function (element, options) {\n            var that = this;\n\n            PopupBox.fn._init.call(that, element, options);\n\n            that.wrapper.addClass(KALERT);\n          },\n          options: {\n            name: \"Alert\",\n            modal: true,\n            actions: [{\n              text: \"#: messages.okText #\"\n            }]\n          }\n        });\n        kendo.ui.plugin(Alert);\n\n        var kendoAlert = function (text) {\n          return $(templates.alert).kendoAlert({\n            content: text\n          }).data(\"kendoAlert\").open();\n        };\n\n        var Confirm = PopupBox.extend({\n          _init: function (element, options) {\n            var that = this;\n\n            PopupBox.fn._init.call(that, element, options);\n\n            that.wrapper.addClass(KCONFIRM);\n            that.result = $.Deferred();\n          },\n          options: {\n            name: \"Confirm\",\n            modal: true,\n            actions: [{\n              text: \"#: messages.okText #\",\n              primary: true,\n              action: function (e) {\n                e.sender.result.resolve();\n              }\n            }, {\n              text: \"#: messages.cancel #\",\n              action: function (e) {\n                e.sender.result.reject();\n              }\n            }]\n          }\n        });\n        kendo.ui.plugin(Confirm);\n\n        var kendoConfirm = function (text) {\n          var confirmDialog = $(templates.confirm).kendoConfirm({\n            content: text\n          }).data(\"kendoConfirm\").open();\n          return confirmDialog.result;\n        };\n\n        var Prompt = PopupBox.extend({\n          _init: function (element, options) {\n            var that = this;\n\n            PopupBox.fn._init.call(that, element, options);\n\n            that.wrapper.addClass(KPROMPT);\n\n            that._createPrompt();\n\n            that.result = $.Deferred();\n          },\n          _createPrompt: function () {\n            var value = this.options.value,\n                promptContainer = $(templates.promptInputContainer(this.options)).insertAfter(this.element);\n            this.input = new kendo.ui.TextBox(promptContainer.find(\"input\"));\n\n            if (value) {\n              this.input.value(value);\n            }\n\n            this._defaultFocus = this._chooseEntryFocus();\n\n            this._focusDialog();\n          },\n          _chooseEntryFocus: function () {\n            return this.wrapper.find(KTEXTBOX)[0];\n          },\n          options: {\n            name: \"Prompt\",\n            modal: true,\n            value: \"\",\n            actions: [{\n              text: \"#: messages.okText #\",\n              primary: true,\n              action: function (e) {\n                var sender = e.sender,\n                    value = sender.input.value();\n                sender.result.resolve(value);\n              }\n            }, {\n              text: \"#: messages.cancel #\",\n              action: function (e) {\n                var sender = e.sender,\n                    value = sender.input.value();\n                e.sender.result.reject(value);\n              }\n            }]\n          }\n        });\n        kendo.ui.plugin(Prompt);\n\n        var kendoPrompt = function (text, value) {\n          var promptDialog = $(templates.prompt).kendoPrompt({\n            content: text,\n            value: value\n          }).data(\"kendoPrompt\").open();\n          return promptDialog.result;\n        };\n\n        templates = {\n          wrapper: template(\"<div class='k-widget k-window k-dialog' role='dialog'></div>\"),\n          action: template(\"<button type='button' class='k-button k-button-md k-rounded-md k-button-solid # if (data.primary) { # k-button-solid-primary # } else { # k-button-solid-base # } #' role='button'></button>\"),\n          titlebar: template(\"<div class='k-window-titlebar k-dialog-titlebar k-hstack'>\" + \"<span class='k-window-title k-dialog-title'>#: title #</span>\" + \"<div class='k-window-actions k-dialog-actions k-hstack'></div>\" + \"</div>\"),\n          close: template(\"<a role='button' href='\\\\#' class='k-button k-button-md k-rounded-md k-button-flat k-button-flat-base k-icon-button k-window-action k-dialog-action k-dialog-close' title='#: messages.close #' aria-label='#: messages.close #' tabindex='-1'>\" + \"<span class='k-button-icon k-icon k-i-close'></span></a>\"),\n          actionbar: template(\"<div class='k-dialog-buttongroup k-actions k-hstack k-justify-content-#: buttonLayout #' role='toolbar'></div>\"),\n          overlay: \"<div class='k-overlay'></div>\",\n          alertWrapper: template(\"<div class='k-widget k-window k-dialog' role='alertdialog'></div>\"),\n          alert: \"<div></div>\",\n          confirm: \"<div></div>\",\n          prompt: \"<div></div>\",\n          promptInputContainer: template(\"<div class='k-prompt-container'><input type='text' title='#: messages.promptInput #' aria-label='#: messages.promptInput #' /></div>\")\n        };\n        kendo.alert = kendoAlert;\n        kendo.confirm = kendoConfirm;\n        kendo.prompt = kendoPrompt;\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}