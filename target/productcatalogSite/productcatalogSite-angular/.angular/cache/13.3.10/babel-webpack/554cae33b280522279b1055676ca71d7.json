{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1109);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1051:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.core\");\n    /***/\n  },\n\n  /***/\n  1109:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n    /***********************************************************************\n    * WARNING: this file is auto-generated.  If you change it directly,\n    * your modifications will eventually be lost.  The source code is in\n    * `kendo-drawing` repository, you should make your changes there and\n    * run `src-modules/sync.sh` in this repository.\n    */\n\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1051)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"color\",\n        name: \"Color utils\",\n        category: \"framework\",\n        advanced: true,\n        description: \"Color utilities used across components\",\n        depends: [\"core\"]\n      };\n      /*jshint eqnull:true  */\n\n      window.kendo = window.kendo || {};\n      var Class = kendo.Class;\n      var support = kendo.support;\n      var namedColors = {\n        aliceblue: \"f0f8ff\",\n        antiquewhite: \"faebd7\",\n        aqua: \"00ffff\",\n        aquamarine: \"7fffd4\",\n        azure: \"f0ffff\",\n        beige: \"f5f5dc\",\n        bisque: \"ffe4c4\",\n        black: \"000000\",\n        blanchedalmond: \"ffebcd\",\n        blue: \"0000ff\",\n        blueviolet: \"8a2be2\",\n        brown: \"a52a2a\",\n        burlywood: \"deb887\",\n        cadetblue: \"5f9ea0\",\n        chartreuse: \"7fff00\",\n        chocolate: \"d2691e\",\n        coral: \"ff7f50\",\n        cornflowerblue: \"6495ed\",\n        cornsilk: \"fff8dc\",\n        crimson: \"dc143c\",\n        cyan: \"00ffff\",\n        darkblue: \"00008b\",\n        darkcyan: \"008b8b\",\n        darkgoldenrod: \"b8860b\",\n        darkgray: \"a9a9a9\",\n        darkgrey: \"a9a9a9\",\n        darkgreen: \"006400\",\n        darkkhaki: \"bdb76b\",\n        darkmagenta: \"8b008b\",\n        darkolivegreen: \"556b2f\",\n        darkorange: \"ff8c00\",\n        darkorchid: \"9932cc\",\n        darkred: \"8b0000\",\n        darksalmon: \"e9967a\",\n        darkseagreen: \"8fbc8f\",\n        darkslateblue: \"483d8b\",\n        darkslategray: \"2f4f4f\",\n        darkslategrey: \"2f4f4f\",\n        darkturquoise: \"00ced1\",\n        darkviolet: \"9400d3\",\n        deeppink: \"ff1493\",\n        deepskyblue: \"00bfff\",\n        dimgray: \"696969\",\n        dimgrey: \"696969\",\n        dodgerblue: \"1e90ff\",\n        firebrick: \"b22222\",\n        floralwhite: \"fffaf0\",\n        forestgreen: \"228b22\",\n        fuchsia: \"ff00ff\",\n        gainsboro: \"dcdcdc\",\n        ghostwhite: \"f8f8ff\",\n        gold: \"ffd700\",\n        goldenrod: \"daa520\",\n        gray: \"808080\",\n        grey: \"808080\",\n        green: \"008000\",\n        greenyellow: \"adff2f\",\n        honeydew: \"f0fff0\",\n        hotpink: \"ff69b4\",\n        indianred: \"cd5c5c\",\n        indigo: \"4b0082\",\n        ivory: \"fffff0\",\n        khaki: \"f0e68c\",\n        lavender: \"e6e6fa\",\n        lavenderblush: \"fff0f5\",\n        lawngreen: \"7cfc00\",\n        lemonchiffon: \"fffacd\",\n        lightblue: \"add8e6\",\n        lightcoral: \"f08080\",\n        lightcyan: \"e0ffff\",\n        lightgoldenrodyellow: \"fafad2\",\n        lightgray: \"d3d3d3\",\n        lightgrey: \"d3d3d3\",\n        lightgreen: \"90ee90\",\n        lightpink: \"ffb6c1\",\n        lightsalmon: \"ffa07a\",\n        lightseagreen: \"20b2aa\",\n        lightskyblue: \"87cefa\",\n        lightslategray: \"778899\",\n        lightslategrey: \"778899\",\n        lightsteelblue: \"b0c4de\",\n        lightyellow: \"ffffe0\",\n        lime: \"00ff00\",\n        limegreen: \"32cd32\",\n        linen: \"faf0e6\",\n        magenta: \"ff00ff\",\n        maroon: \"800000\",\n        mediumaquamarine: \"66cdaa\",\n        mediumblue: \"0000cd\",\n        mediumorchid: \"ba55d3\",\n        mediumpurple: \"9370d8\",\n        mediumseagreen: \"3cb371\",\n        mediumslateblue: \"7b68ee\",\n        mediumspringgreen: \"00fa9a\",\n        mediumturquoise: \"48d1cc\",\n        mediumvioletred: \"c71585\",\n        midnightblue: \"191970\",\n        mintcream: \"f5fffa\",\n        mistyrose: \"ffe4e1\",\n        moccasin: \"ffe4b5\",\n        navajowhite: \"ffdead\",\n        navy: \"000080\",\n        oldlace: \"fdf5e6\",\n        olive: \"808000\",\n        olivedrab: \"6b8e23\",\n        orange: \"ffa500\",\n        orangered: \"ff4500\",\n        orchid: \"da70d6\",\n        palegoldenrod: \"eee8aa\",\n        palegreen: \"98fb98\",\n        paleturquoise: \"afeeee\",\n        palevioletred: \"d87093\",\n        papayawhip: \"ffefd5\",\n        peachpuff: \"ffdab9\",\n        peru: \"cd853f\",\n        pink: \"ffc0cb\",\n        plum: \"dda0dd\",\n        powderblue: \"b0e0e6\",\n        purple: \"800080\",\n        red: \"ff0000\",\n        rosybrown: \"bc8f8f\",\n        royalblue: \"4169e1\",\n        saddlebrown: \"8b4513\",\n        salmon: \"fa8072\",\n        sandybrown: \"f4a460\",\n        seagreen: \"2e8b57\",\n        seashell: \"fff5ee\",\n        sienna: \"a0522d\",\n        silver: \"c0c0c0\",\n        skyblue: \"87ceeb\",\n        slateblue: \"6a5acd\",\n        slategray: \"708090\",\n        slategrey: \"708090\",\n        snow: \"fffafa\",\n        springgreen: \"00ff7f\",\n        steelblue: \"4682b4\",\n        tan: \"d2b48c\",\n        teal: \"008080\",\n        thistle: \"d8bfd8\",\n        tomato: \"ff6347\",\n        turquoise: \"40e0d0\",\n        violet: \"ee82ee\",\n        wheat: \"f5deb3\",\n        white: \"ffffff\",\n        whitesmoke: \"f5f5f5\",\n        yellow: \"ffff00\",\n        yellowgreen: \"9acd32\"\n      };\n      var browser = support.browser;\n\n      var matchNamedColor = function (color) {\n        var colorNames = Object.keys(namedColors);\n        colorNames.push(\"transparent\");\n        var regexp = new RegExp(\"^(\" + colorNames.join(\"|\") + \")(\\\\W|$)\", \"i\");\n\n        matchNamedColor = function (color) {\n          return regexp.exec(color);\n        };\n\n        return regexp.exec(color);\n      };\n\n      var BaseColor = Class.extend({\n        init: function () {},\n        toHSV: function () {\n          return this;\n        },\n        toRGB: function () {\n          return this;\n        },\n        toHex: function (options) {\n          return this.toBytes().toHex(options);\n        },\n        toBytes: function () {\n          return this;\n        },\n        toCss: function (options) {\n          return \"#\" + this.toHex(options);\n        },\n        toCssRgba: function () {\n          var rgb = this.toBytes();\n          return \"rgba(\" + rgb.r + \", \" + rgb.g + \", \" + rgb.b + \", \" + parseFloat(Number(this.a).toFixed(3)) + \")\";\n        },\n        toDisplay: function () {\n          if (browser.msie && browser.version < 9) {\n            return this.toCss(); // no RGBA support; does it support any opacity in colors?\n          }\n\n          return this.toCssRgba();\n        },\n        equals: function (c) {\n          return c === this || c !== null && this.toCssRgba() === parseColor(c).toCssRgba();\n        },\n        diff: function (other) {\n          if (other === null) {\n            return NaN;\n          }\n\n          var c1 = this.toBytes();\n          var c2 = other.toBytes();\n          return Math.sqrt(Math.pow((c1.r - c2.r) * 0.30, 2) + Math.pow((c1.g - c2.g) * 0.59, 2) + Math.pow((c1.b - c2.b) * 0.11, 2));\n        },\n        clone: function () {\n          var c = this.toBytes();\n\n          if (c === this) {\n            c = new Bytes(c.r, c.g, c.b, c.a);\n          }\n\n          return c;\n        }\n      });\n      var RGB = BaseColor.extend({\n        init: function (r, g, b, a) {\n          BaseColor.fn.init.call(this);\n          this.r = r;\n          this.g = g;\n          this.b = b;\n          this.a = a;\n        },\n        toHSV: function () {\n          var ref = this;\n          var r = ref.r;\n          var g = ref.g;\n          var b = ref.b;\n          var min = Math.min(r, g, b);\n          var max = Math.max(r, g, b);\n          var delta = max - min;\n          var v = max;\n          var h, s;\n\n          if (delta === 0) {\n            return new HSV(0, 0, v, this.a);\n          }\n\n          if (max !== 0) {\n            s = delta / max;\n\n            if (r === max) {\n              h = (g - b) / delta;\n            } else if (g === max) {\n              h = 2 + (b - r) / delta;\n            } else {\n              h = 4 + (r - g) / delta;\n            }\n\n            h *= 60;\n\n            if (h < 0) {\n              h += 360;\n            }\n          } else {\n            s = 0;\n            h = -1;\n          }\n\n          return new HSV(h, s, v, this.a);\n        },\n        toHSL: function () {\n          var ref = this;\n          var r = ref.r;\n          var g = ref.g;\n          var b = ref.b;\n          var max = Math.max(r, g, b);\n          var min = Math.min(r, g, b);\n          var h,\n              s,\n              l = (max + min) / 2;\n\n          if (max === min) {\n            h = s = 0;\n          } else {\n            var d = max - min;\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n            switch (max) {\n              case r:\n                h = (g - b) / d + (g < b ? 6 : 0);\n                break;\n\n              case g:\n                h = (b - r) / d + 2;\n                break;\n\n              case b:\n                h = (r - g) / d + 4;\n                break;\n\n              default:\n                break;\n            }\n          }\n\n          return new HSL(h * 60, s * 100, l * 100, this.a);\n        },\n        toBytes: function () {\n          return new Bytes(this.r * 255, this.g * 255, this.b * 255, this.a);\n        }\n      });\n      var Bytes = RGB.extend({\n        init: function (r, g, b, a) {\n          RGB.fn.init.call(this, Math.round(r), Math.round(g), Math.round(b), a);\n        },\n        toRGB: function () {\n          return new RGB(this.r / 255, this.g / 255, this.b / 255, this.a);\n        },\n        toHSV: function () {\n          return this.toRGB().toHSV();\n        },\n        toHSL: function () {\n          return this.toRGB().toHSL();\n        },\n        toHex: function (options) {\n          var value = hex(this.r, 2) + hex(this.g, 2) + hex(this.b, 2);\n\n          if (options && options.alpha) {\n            value += hex(Math.round(this.a * 255), 2);\n          }\n\n          return value;\n        },\n        toBytes: function () {\n          return this;\n        }\n      });\n\n      function hex(n, width, pad) {\n        if (pad === void 0) {\n          pad = \"0\";\n        }\n\n        var result = n.toString(16);\n\n        while (width > result.length) {\n          result = pad + result;\n        }\n\n        return result;\n      }\n\n      var HSV = BaseColor.extend({\n        init: function (h, s, v, a) {\n          BaseColor.fn.init.call(this);\n          this.h = h;\n          this.s = s;\n          this.v = v;\n          this.a = a;\n        },\n        toRGB: function () {\n          var ref = this;\n          var h = ref.h;\n          var s = ref.s;\n          var v = ref.v;\n          var r, g, b;\n\n          if (s === 0) {\n            r = g = b = v;\n          } else {\n            h /= 60;\n            var i = Math.floor(h);\n            var f = h - i;\n            var p = v * (1 - s);\n            var q = v * (1 - s * f);\n            var t = v * (1 - s * (1 - f));\n\n            switch (i) {\n              case 0:\n                r = v;\n                g = t;\n                b = p;\n                break;\n\n              case 1:\n                r = q;\n                g = v;\n                b = p;\n                break;\n\n              case 2:\n                r = p;\n                g = v;\n                b = t;\n                break;\n\n              case 3:\n                r = p;\n                g = q;\n                b = v;\n                break;\n\n              case 4:\n                r = t;\n                g = p;\n                b = v;\n                break;\n\n              default:\n                r = v;\n                g = p;\n                b = q;\n                break;\n            }\n          }\n\n          return new RGB(r, g, b, this.a);\n        },\n        toHSL: function () {\n          return this.toRGB().toHSL();\n        },\n        toBytes: function () {\n          return this.toRGB().toBytes();\n        }\n      });\n      var HSL = BaseColor.extend({\n        init: function (h, s, l, a) {\n          BaseColor.fn.init.call(this);\n          this.h = h;\n          this.s = s;\n          this.l = l;\n          this.a = a;\n        },\n        toRGB: function () {\n          var h = this.h / 360;\n          var s = this.s / 100;\n          var l = this.l / 100;\n          var r, g, b;\n\n          if (s === 0) {\n            r = g = b = l; // achromatic\n          } else {\n            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n            var p = 2 * l - q;\n            r = hue2rgb(p, q, h + 1 / 3);\n            g = hue2rgb(p, q, h);\n            b = hue2rgb(p, q, h - 1 / 3);\n          }\n\n          return new RGB(r, g, b, this.a);\n        },\n        toHSV: function () {\n          return this.toRGB().toHSV();\n        },\n        toBytes: function () {\n          return this.toRGB().toBytes();\n        }\n      });\n\n      function hue2rgb(p, q, s) {\n        var t = s;\n\n        if (t < 0) {\n          t += 1;\n        }\n\n        if (t > 1) {\n          t -= 1;\n        }\n\n        if (t < 1 / 6) {\n          return p + (q - p) * 6 * t;\n        }\n\n        if (t < 1 / 2) {\n          return q;\n        }\n\n        if (t < 2 / 3) {\n          return p + (q - p) * (2 / 3 - t) * 6;\n        }\n\n        return p;\n      }\n\n      function alphaFromHex(a) {\n        return parseFloat(parseFloat(parseInt(a, 16) / 255).toFixed(3));\n      }\n\n      function parseColor(value, safe) {\n        var m, ret;\n\n        if (value == null || value === \"none\") {\n          return null;\n        }\n\n        if (value instanceof BaseColor) {\n          return value;\n        }\n\n        var color = value.toLowerCase();\n\n        if (m = matchNamedColor(color)) {\n          if (m[1] === \"transparent\") {\n            color = new RGB(1, 1, 1, 0);\n          } else {\n            color = parseColor(namedColors[m[1]], safe);\n          }\n\n          color.match = [m[1]];\n          return color;\n        }\n\n        if (m = /^#?([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})\\b/i.exec(color)) {\n          ret = new Bytes(parseInt(m[1], 16), parseInt(m[2], 16), parseInt(m[3], 16), 1);\n        } else if (m = /^#?([0-9a-f])([0-9a-f])([0-9a-f])\\b/i.exec(color)) {\n          ret = new Bytes(parseInt(m[1] + m[1], 16), parseInt(m[2] + m[2], 16), parseInt(m[3] + m[3], 16), 1);\n        } else if (m = /^#?([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f])\\b/i.exec(color)) {\n          // Parse 4 digit hex color\n          ret = new Bytes(parseInt(m[1] + m[1], 16), parseInt(m[2] + m[2], 16), parseInt(m[3] + m[3], 16), alphaFromHex(m[4] + m[4]));\n        } else if (m = /^#?([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})\\b/i.exec(color)) {\n          // Parse 8 digit hex color\n          ret = new Bytes(parseInt(m[1], 16), parseInt(m[2], 16), parseInt(m[3], 16), alphaFromHex(m[4]));\n        } else if (m = /^rgb\\(\\s*([0-9]+)\\s*,\\s*([0-9]+)\\s*,\\s*([0-9]+)\\s*\\)/.exec(color)) {\n          ret = new Bytes(parseInt(m[1], 10), parseInt(m[2], 10), parseInt(m[3], 10), 1);\n        } else if (m = /^rgba\\(\\s*([0-9]+)\\s*,\\s*([0-9]+)\\s*,\\s*([0-9]+)\\s*,\\s*([0-9.]+)\\s*\\)/.exec(color)) {\n          ret = new Bytes(parseInt(m[1], 10), parseInt(m[2], 10), parseInt(m[3], 10), parseFloat(m[4]));\n        } else if (m = /^rgb\\(\\s*([0-9]*\\.?[0-9]+)%\\s*,\\s*([0-9]*\\.?[0-9]+)%\\s*,\\s*([0-9]*\\.?[0-9]+)%\\s*\\)/.exec(color)) {\n          ret = new RGB(parseFloat(m[1]) / 100, parseFloat(m[2]) / 100, parseFloat(m[3]) / 100, 1);\n        } else if (m = /^rgba\\(\\s*([0-9]*\\.?[0-9]+)%\\s*,\\s*([0-9]*\\.?[0-9]+)%\\s*,\\s*([0-9]*\\.?[0-9]+)%\\s*,\\s*([0-9.]+)\\s*\\)/.exec(color)) {\n          ret = new RGB(parseFloat(m[1]) / 100, parseFloat(m[2]) / 100, parseFloat(m[3]) / 100, parseFloat(m[4]));\n        }\n\n        if (ret) {\n          ret.match = m;\n        } else if (!safe) {\n          throw new Error(\"Cannot parse color: \" + color);\n        }\n\n        return ret;\n      }\n\n      var DARK_TRESHOLD = 180;\n      var Color = Class.extend({\n        init: function (value) {\n          var this$1 = this;\n\n          if (arguments.length === 1) {\n            var formats = Color.formats;\n            var resolvedColor = this.resolveColor(value);\n\n            for (var idx = 0; idx < formats.length; idx++) {\n              var formatRegex = formats[idx].re;\n              var processor = formats[idx].process;\n              var parts = formatRegex.exec(resolvedColor);\n\n              if (parts) {\n                var channels = processor(parts);\n                this$1.r = channels[0];\n                this$1.g = channels[1];\n                this$1.b = channels[2];\n              }\n            }\n          } else {\n            this.r = arguments[0];\n            this.g = arguments[1];\n            this.b = arguments[2];\n          }\n\n          this.r = this.normalizeByte(this.r);\n          this.g = this.normalizeByte(this.g);\n          this.b = this.normalizeByte(this.b);\n        },\n        toHex: function () {\n          var pad = this.padDigit;\n          var r = this.r.toString(16);\n          var g = this.g.toString(16);\n          var b = this.b.toString(16);\n          return \"#\" + pad(r) + pad(g) + pad(b);\n        },\n        resolveColor: function (value) {\n          var color = value || \"black\";\n\n          if (color.charAt(0) === \"#\") {\n            color = color.substr(1, 6);\n          }\n\n          color = color.replace(/ /g, \"\");\n          color = color.toLowerCase();\n          color = Color.namedColors[color] || color;\n          return color;\n        },\n        normalizeByte: function (value) {\n          if (value < 0 || isNaN(value)) {\n            return 0;\n          }\n\n          return value > 255 ? 255 : value;\n        },\n        padDigit: function (value) {\n          return value.length === 1 ? \"0\" + value : value;\n        },\n        brightness: function (value) {\n          var round = Math.round;\n          this.r = round(this.normalizeByte(this.r * value));\n          this.g = round(this.normalizeByte(this.g * value));\n          this.b = round(this.normalizeByte(this.b * value));\n          return this;\n        },\n        percBrightness: function () {\n          return Math.sqrt(0.241 * this.r * this.r + 0.691 * this.g * this.g + 0.068 * this.b * this.b);\n        },\n        isDark: function () {\n          return this.percBrightness() < DARK_TRESHOLD;\n        }\n      });\n\n      Color.fromBytes = function (r, g, b, a) {\n        return new Bytes(r, g, b, a != null ? a : 1);\n      };\n\n      Color.fromRGB = function (r, g, b, a) {\n        return new RGB(r, g, b, a != null ? a : 1);\n      };\n\n      Color.fromHSV = function (h, s, v, a) {\n        return new HSV(h, s, v, a != null ? a : 1);\n      };\n\n      Color.fromHSL = function (h, s, l, a) {\n        return new HSL(h, s, l, a != null ? a : 1);\n      };\n\n      Color.formats = [{\n        re: /^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/,\n        process: function (parts) {\n          return [parseInt(parts[1], 10), parseInt(parts[2], 10), parseInt(parts[3], 10)];\n        }\n      }, {\n        re: /^(\\w{2})(\\w{2})(\\w{2})$/,\n        process: function (parts) {\n          return [parseInt(parts[1], 16), parseInt(parts[2], 16), parseInt(parts[3], 16)];\n        }\n      }, {\n        re: /^(\\w{1})(\\w{1})(\\w{1})$/,\n        process: function (parts) {\n          return [parseInt(parts[1] + parts[1], 16), parseInt(parts[2] + parts[2], 16), parseInt(parts[3] + parts[3], 16)];\n        }\n      }];\n      Color.namedColors = namedColors;\n      kendo.deepExtend(kendo, {\n        parseColor: parseColor,\n        namedColors: namedColors,\n        Color: Color\n      });\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}