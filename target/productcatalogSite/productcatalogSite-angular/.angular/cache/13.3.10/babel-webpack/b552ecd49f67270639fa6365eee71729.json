{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1732);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  20:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.core\");\n    /***/\n  },\n\n  /***/\n  1036:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.menu\");\n    /***/\n  },\n\n  /***/\n  1712:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../util/main\");\n    /***/\n  },\n\n  /***/\n  1732:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(20), __webpack_require__(1036), __webpack_require__(1733), __webpack_require__(1712)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function (kendo) {\n        var $ = kendo.jQuery;\n        var CellRef = kendo.spreadsheet.CellRef;\n        var DOT = \".\";\n        var RESIZE_HANDLE_WIDTH = 7;\n        var EDIT_BUTTON_WIDTH = 20;\n        var ERROR = \"Error\";\n        var viewClassNames = {\n          view: \"k-spreadsheet-view\",\n          fixedContainer: \"k-spreadsheet-fixed-container\",\n          editContainer: \"k-spreadsheet-edit-container\",\n          scroller: \"k-spreadsheet-scroller\",\n          viewSize: \"k-spreadsheet-view-size\",\n          clipboard: \"k-spreadsheet-clipboard\",\n          cellEditor: \"k-spreadsheet-cell-editor\",\n          barEditor: \"k-spreadsheet-editor\",\n          topCorner: \"k-spreadsheet-top-corner\",\n          filterHeadersWrapper: \"k-filter-wrapper\",\n          filterRange: \"k-filter-range\",\n          filterButton: \"k-spreadsheet-filter\",\n          filterButtonSelected: \"k-selected\",\n          horizontalResize: \"k-horizontal-resize\",\n          verticalResize: \"k-vertical-resize\",\n          icon: \"k-icon\",\n          iconFilterDefault: \"k-i-arrow-60-down\",\n          sheetsBar: \"k-spreadsheet-sheets-bar\",\n          sheetsBarActive: \"k-spreadsheet-sheets-bar-active\",\n          sheetsBarInactive: \"k-spreadsheet-sheets-bar-inactive\",\n          cellContextMenu: \"k-spreadsheet-cell-context-menu\",\n          rowHeaderContextMenu: \"k-spreadsheet-row-header-context-menu\",\n          colHeaderContextMenu: \"k-spreadsheet-col-header-context-menu\",\n          drawingContextMenu: \"k-spreadsheet-drawing-context-menu\"\n        };\n        kendo.spreadsheet.messages.view = {\n          nameBox: \"Name Box\",\n          errors: {\n            openUnsupported: \"Unsupported format. Please select an .xlsx file.\",\n            shiftingNonblankCells: \"Cannot insert cells due to data loss possibility. Select another insert location or delete the data from the end of your worksheet.\",\n            insertColumnWhenRowIsSelected: \"Cannot insert column when all columns are selected.\",\n            insertRowWhenColumnIsSelected: \"Cannot insert row when all rows are selected.\",\n            filterRangeContainingMerges: \"Cannot create a filter within a range containing merges\",\n            sortRangeContainingMerges: \"Cannot sort a range containing merges\",\n            cantSortMultipleSelection: \"Cannot sort multiple selection\",\n            cantSortNullRef: \"Cannot sort empty selection\",\n            cantSortMixedCells: \"Cannot sort range containing cells of mixed shapes\",\n            validationError: \"The value that you entered violates the validation rules set on the cell.\",\n            cannotModifyDisabled: \"Cannot modify disabled cells.\",\n            insertRowBelowLastRow: \"Cannot insert row below the last row.\",\n            insertColAfterLastCol: \"Cannot insert column to the right of the last column.\"\n          },\n          tabs: {\n            home: \"Home\",\n            insert: \"Insert\",\n            data: \"Data\"\n          }\n        };\n        kendo.spreadsheet.messages.menus = {\n          \"cut\": \"Cut\",\n          \"copy\": \"Copy\",\n          \"paste\": \"Paste\",\n          \"merge\": \"Merge\",\n          \"unmerge\": \"Unmerge\",\n          \"delete\": \"Delete\",\n          \"hide\": \"Hide\",\n          \"unhide\": \"Unhide\",\n          \"bringToFront\": \"Bring to front\",\n          \"sendToBack\": \"Send to back\"\n        };\n\n        function selectElementContents(el) {\n          var sel = window.getSelection();\n          sel.removeAllRanges();\n          var range = document.createRange();\n          range.selectNodeContents(el);\n          sel.addRange(range);\n        }\n\n        function cellBefore(table, row) {\n          var cells = table.trs[row].children;\n          return cells[cells.length - 2];\n        }\n\n        function cellAbove(table, row) {\n          var prevRow = table.trs[row - 1];\n          var index = table.trs[row].children.length - 1;\n\n          if (prevRow && index >= 0) {\n            return prevRow.children[index];\n          }\n        }\n\n        function cellBorder(value) {\n          return (value.size || 1) + \"px solid \" + (value.color || \"#000\");\n        }\n\n        function asURL(link) {\n          if (!/:\\/\\//.test(link)) {\n            link = \"http://\" + link;\n          }\n\n          return link;\n        }\n\n        function drawCell(collection, cell, cls, showGrid) {\n          function maybeLink(el) {\n            var link = cell.link;\n\n            if (!link) {\n              if (typeof cell.value == \"object\") {\n                link = cell.value.link;\n              }\n            }\n\n            if (link) {\n              var style = {\n                textDecoration: \"none\"\n              };\n\n              if (cell.color) {\n                style.color = cell.color;\n              }\n\n              if (cell.underline) {\n                style.textDecoration = \"underline\";\n              }\n\n              return kendo.dom.element(\"a\", {\n                href: asURL(link),\n                style: style,\n                target: \"_blank\" // XXX: customizable?\n\n              }, el ? [el] : []);\n            }\n\n            return el;\n          }\n\n          var shouldDraw = cell.value != null || cell.validation != null && !cell.validation.value || // jshint ignore:line\n          cell.background || cell.merged || cell.comment;\n\n          if (!cls && !shouldDraw) {\n            return;\n          }\n\n          var style = {};\n          var background = cell.background;\n\n          if (background) {\n            var defaultBorder = background;\n\n            if (showGrid) {\n              // darken\n              defaultBorder = kendo.parseColor(defaultBorder).toHSV();\n              defaultBorder.v *= 0.9;\n              defaultBorder = defaultBorder.toCssRgba();\n            }\n\n            defaultBorder = cellBorder({\n              color: defaultBorder\n            });\n            style.outline = defaultBorder;\n          }\n\n          if (background) {\n            style.backgroundColor = background;\n          }\n\n          if (cell.color) {\n            style.color = cell.color;\n          }\n\n          if (cell.fontFamily) {\n            style.fontFamily = cell.fontFamily;\n          }\n\n          if (cell.underline) {\n            style.textDecoration = \"underline\";\n          }\n\n          if (cell.italic) {\n            style.fontStyle = \"italic\";\n          }\n\n          if (cell.textAlign) {\n            style.textAlign = cell.textAlign;\n          }\n\n          if (cell.bold) {\n            style.fontWeight = \"bold\";\n          }\n\n          if (cell.fontSize) {\n            style.fontSize = cell.fontSize + \"px\";\n          }\n\n          if (cell.wrap === true) {\n            style.whiteSpace = \"pre-wrap\";\n            style.overflowWrap = \"break-word\";\n            style.wordWrap = \"break-word\";\n          } else {\n            style.whiteSpace = \"pre\";\n            style.overflowWrap = \"normal\";\n            style.wordWrap = \"normal\";\n          }\n\n          style.left = cell.left + 1 + \"px\";\n          style.top = cell.top + 1 + \"px\";\n          style.width = cell.width - 1 + \"px\";\n          style.height = cell.height - 1 + \"px\";\n          var data = cell.value,\n              type = typeof data,\n              format = cell.format;\n\n          if (!format && type == \"number\" && data != Math.floor(data)) {\n            format = \"0.##############\";\n          }\n\n          if (format && data != null) {\n            // jshint ignore:line\n            data = kendo.spreadsheet.formatting.format(data, format);\n\n            if (data.__dataType) {\n              type = data.__dataType;\n            }\n          } else if (data !== null && data !== undefined) {\n            if (cell.html) {\n              data = kendo.dom.html(data);\n            } else {\n              data = kendo.dom.text(data);\n            }\n          }\n\n          if (!style.textAlign) {\n            switch (type) {\n              case \"number\":\n              case \"date\":\n              case \"percent\":\n              case \"currency\":\n                style.textAlign = \"right\";\n                break;\n\n              case \"boolean\":\n                style.textAlign = \"center\";\n                break;\n            }\n          } // defined in print.js\n\n\n          kendo.spreadsheet.draw.applyIndent(cell, style);\n          var classNames = [paneClassNames.cell];\n\n          if (cls) {\n            classNames.push(cls);\n          }\n\n          if (cell.enable === false) {\n            classNames.push(\"k-state-disabled\");\n          }\n\n          if (cell.merged) {\n            classNames.push(\"k-spreadsheet-merged-cell\");\n          }\n\n          if (cell.comment) {\n            classNames.push(\"k-spreadsheet-has-comment\");\n          }\n\n          var verticalAlign = cell.verticalAlign || \"bottom\";\n\n          if (verticalAlign && data) {\n            data = kendo.dom.element(\"div\", {\n              className: \"k-vertical-align-\" + verticalAlign\n            }, [maybeLink(data)]);\n          } else {\n            data = maybeLink(data);\n          }\n\n          var children = data ? [data] : [];\n          var properties = {\n            style: style\n          };\n          var validation = cell.validation;\n\n          if (validation && !validation.value) {\n            children.push(kendo.dom.element(\"span\", {\n              className: \"k-dirty\"\n            }));\n            classNames.push(\"k-dirty-cell\");\n            properties.title = validation.message;\n          }\n\n          properties.className = classNames.join(\" \");\n          var div = kendo.dom.element(\"div\", properties, children);\n          collection.push(div);\n          return div;\n        }\n\n        function addCell(table, row, cell) {\n          var style = {};\n\n          if (cell.background) {\n            style.backgroundColor = cell.background;\n          }\n\n          if (cell.color) {\n            style.color = cell.color;\n          }\n\n          if (cell.fontFamily) {\n            style.fontFamily = cell.fontFamily;\n          }\n\n          if (cell.underline) {\n            style.textDecoration = \"underline\";\n          }\n\n          if (cell.italic) {\n            style.fontStyle = \"italic\";\n          }\n\n          if (cell.textAlign) {\n            style.textAlign = cell.textAlign;\n          }\n\n          if (cell.verticalAlign) {\n            style.verticalAlign = cell.verticalAlign === \"center\" ? \"middle\" : cell.verticalAlign;\n          }\n\n          if (cell.bold) {\n            style.fontWeight = \"bold\";\n          }\n\n          if (cell.fontSize) {\n            style.fontSize = cell.fontSize + \"px\";\n          }\n\n          if (cell.wrap === true) {\n            style.whiteSpace = \"pre-wrap\";\n          }\n\n          if (cell.borderRight) {\n            style.borderRight = cellBorder(cell.borderRight);\n          } else if (cell.background) {\n            style.borderRightColor = cell.background;\n          }\n\n          if (cell.borderBottom) {\n            style.borderBottom = cellBorder(cell.borderBottom);\n          } else if (cell.background) {\n            style.borderBottomColor = cell.background;\n          }\n\n          var data = cell.value,\n              type = typeof data,\n              format = cell.format;\n\n          if (!format && type == \"number\" && data != Math.floor(data)) {\n            format = \"0.##############\";\n          }\n\n          if (format && data != null) {\n            // jshint ignore:line\n            data = kendo.spreadsheet.formatting.format(data, format);\n\n            if (data.__dataType) {\n              type = data.__dataType;\n            }\n          }\n\n          if (!style.textAlign) {\n            switch (type) {\n              case \"number\":\n              case \"date\":\n              case \"percent\":\n              case \"currency\":\n                style.textAlign = \"right\";\n                break;\n\n              case \"boolean\":\n                style.textAlign = \"center\";\n                break;\n            }\n          }\n\n          var className = null;\n\n          if (cell.enable === false) {\n            className = \"k-state-disabled\";\n          }\n\n          var td = table.addCell(row, data, style, className, cell.validation);\n          var border, sibling;\n\n          if (cell.borderLeft) {\n            sibling = cellBefore(table, row);\n            border = cellBorder(cell.borderLeft);\n\n            if (sibling && border) {\n              sibling.attr.style.borderRight = border;\n            }\n          } else if (cell.background) {\n            style.borderLeftColor = cell.background;\n          }\n\n          if (cell.borderTop) {\n            sibling = cellAbove(table, row);\n            border = cellBorder(cell.borderTop);\n\n            if (sibling && border) {\n              sibling.attr.style.borderBottom = border;\n            }\n          } else if (cell.background) {\n            style.borderTopColor = cell.background;\n          }\n\n          return td;\n        }\n\n        var HtmlTable = kendo.Class.extend({\n          init: function () {\n            this.cols = [];\n            this.trs = [];\n            this._height = 0;\n            this._width = 0;\n          },\n          addColumn: function (width) {\n            this._width += width;\n            var col = kendo.dom.element(\"col\", {\n              style: {\n                width: width + \"px\"\n              }\n            });\n            col.visible = width > 0;\n            this.cols.push(col);\n          },\n          addRow: function (height) {\n            var attr = null;\n            attr = {\n              style: {\n                height: height + \"px\"\n              }\n            };\n            this._height += height;\n            var tr = kendo.dom.element(\"tr\", attr);\n            tr.visible = height > 0;\n            this.trs.push(tr);\n          },\n          addCell: function (rowIndex, text, style, className, validation) {\n            if (text === null || text === undefined) {\n              text = \"\";\n            }\n\n            if (!(text instanceof kendo.dom.Node)) {\n              text = kendo.dom.text(text);\n            }\n\n            var children = [text];\n            var properties = {\n              style: style\n            };\n\n            if (validation && !validation.value) {\n              children.push(kendo.dom.element(\"span\", {\n                className: \"k-dirty\"\n              }));\n              className = (className || \"\") + (className ? \" \" : \"\") + \"k-dirty-cell\";\n              properties.title = validation.message;\n            }\n\n            if (className) {\n              properties.className = className;\n            }\n\n            var td = kendo.dom.element(\"td\", properties, children);\n            this.trs[rowIndex].children.push(td);\n            return td;\n          },\n          toDomTree: function (x, y, className) {\n            this.trs = this.trs.filter(function (tr) {\n              return tr.visible;\n            });\n            var offset = 0;\n            this.cols = this.cols.filter(function (col, ci) {\n              if (!col.visible) {\n                this.trs.forEach(function (tr) {\n                  tr.children.splice(ci - offset, 1);\n                });\n                offset++;\n              }\n\n              return col.visible;\n            }, this);\n            return kendo.dom.element(\"table\", {\n              style: {\n                left: x + \"px\",\n                top: y + \"px\",\n                height: this._height + \"px\",\n                width: this._width + \"px\"\n              },\n              className: className,\n              role: \"presentation\"\n            }, [kendo.dom.element(\"colgroup\", null, this.cols), kendo.dom.element(\"tbody\", null, this.trs)]);\n          }\n        });\n        var CELL_CONTEXT_MENU = '<ul class=\"#=classNames.cellContextMenu#\">' + '<li data-action=cut>#: messages.cut #</li>' + '<li data-action=copy>#: messages.copy #</li>' + '<li data-action=paste>#: messages.paste #</li>' + '<li class=\"k-separator\"></li>' + '<li data-action=merge>#: messages.merge #</li>' + '<li data-action=unmerge>#: messages.unmerge #</li>' + '</ul>';\n        var ROW_HEADER_CONTEXT_MENU = '<ul class=\"#=classNames.rowHeaderContextMenu#\">' + '<li data-action=cut>#: messages.cut #</li>' + '<li data-action=copy>#: messages.copy #</li>' + '<li data-action=paste>#: messages.paste #</li>' + '<li class=\"k-separator\"></li>' + '<li data-action=\"delete-row\">#: messages.delete #</li>' + '<li data-action=\"hide-row\">#: messages.hide #</li>' + '<li data-action=\"unhide-row\">#: messages.unhide #</li>' + '</ul>';\n        var COL_HEADER_CONTEXT_MENU = '<ul class=\"#=classNames.colHeaderContextMenu#\">' + '<li data-action=cut>#: messages.cut #</li>' + '<li data-action=copy>#: messages.copy #</li>' + '<li data-action=paste>#: messages.paste #</li>' + '<li class=\"k-separator\"></li>' + '<li data-action=\"delete-column\">#: messages.delete #</li>' + '<li data-action=\"hide-column\">#: messages.hide #</li>' + '<li data-action=\"unhide-column\">#: messages.unhide #</li>' + '</ul>';\n        var DRAWING_CONTEXT_MENU = '<ul class=\"#=classNames.drawingContextMenu#\">' + // '<li data-action=cut>#: messages.cut #</li>' +\n        // '<li data-action=copy>#: messages.copy #</li>' +\n        // '<li data-action=paste>#: messages.paste #</li>' +\n        // '<li class=\"k-separator\"></li>' +\n        '<li data-action=\"bring-to-front\">#: messages.bringToFront #</li>' + '<li data-action=\"send-to-back\">#: messages.sendToBack #</li>' + '<li class=\"k-separator\"></li>' + '<li data-action=\"delete-drawing\">#: messages.delete #</li>' + '</ul>';\n        kendo.spreadsheet.ContextMenu = kendo.ui.ContextMenu;\n        var VIEW_CONTENTS = kendo.template('<div class=\"#=classNames.view#\"><div class=\"#=classNames.fixedContainer#\"></div><div class=\"#=classNames.scroller#\"><div class=\"#=classNames.viewSize#\"></div></div>' + '<div tabindex=\"0\" class=\"#=classNames.clipboard#\" contenteditable=true></div><div class=\"#=classNames.cellEditor#\"></div></div><div class=\"#=classNames.sheetsBar#\"></div>' + CELL_CONTEXT_MENU + ROW_HEADER_CONTEXT_MENU + COL_HEADER_CONTEXT_MENU + DRAWING_CONTEXT_MENU);\n\n        function within(value, min, max) {\n          return value >= min && value <= max;\n        }\n\n        var View = kendo.Class.extend({\n          init: function (element, options) {\n            var classNames = View.classNames;\n            this.element = element;\n            this.options = $.extend(true, {\n              messages: kendo.spreadsheet.messages.view\n            }, this.options, options);\n\n            this._chrome();\n\n            this._dialogs = [];\n            element.append(VIEW_CONTENTS({\n              classNames: classNames,\n              messages: kendo.spreadsheet.messages.menus\n            }));\n\n            this._formulaInput();\n\n            this.wrapper = element.find(DOT + classNames.view);\n            this.container = element.find(DOT + classNames.fixedContainer)[0];\n            this.scroller = element.find(DOT + classNames.scroller)[0];\n            this.clipboard = element.find(DOT + classNames.clipboard);\n            this.viewSize = $(this.scroller.firstChild);\n            this.tree = new kendo.dom.Tree(this.container);\n            this.clipboardContents = new kendo.dom.Tree(this.clipboard[0]);\n            this.editor = new kendo.spreadsheet.SheetEditor(this);\n\n            this._sheetsbar();\n\n            var contextMenuConfig = {\n              target: element,\n              animation: false,\n              showOn: \"never\" // this is just an invalid event name to prevent the show\n\n            };\n            this.cellContextMenu = new kendo.spreadsheet.ContextMenu(element.find(DOT + classNames.cellContextMenu), contextMenuConfig);\n            this.colHeaderContextMenu = new kendo.spreadsheet.ContextMenu(element.find(DOT + classNames.colHeaderContextMenu), contextMenuConfig);\n            this.rowHeaderContextMenu = new kendo.spreadsheet.ContextMenu(element.find(DOT + classNames.rowHeaderContextMenu), contextMenuConfig);\n            this.drawingContextMenu = new kendo.spreadsheet.ContextMenu(element.find(DOT + classNames.drawingContextMenu), contextMenuConfig);\n          },\n          enableClipboard: function (enable) {\n            this.isClipboardDeactivated = !enable;\n\n            if (enable) {\n              this.clipboard.attr(\"contenteditable\", enable);\n            } else {\n              this.clipboard.removeAttr(\"contenteditable\");\n            }\n          },\n          _resize: function () {\n            var actionBar = $(this.formulaBar.element).parents(\".k-spreadsheet-action-bar\");\n            var outerHeight = kendo._outerHeight;\n            var tabstripHeight = this.tabstrip ? outerHeight(this.tabstrip.element) : 0;\n            var formulaBarHeight = actionBar ? outerHeight(actionBar) : 0;\n            var sheetsBarHeight = this.sheetsbar ? outerHeight(this.sheetsbar.element) : 0;\n            this.wrapper.height(this.element.height() - (tabstripHeight + formulaBarHeight + sheetsBarHeight));\n\n            if (this.tabstrip) {\n              this.tabstrip.quickAccessAdjust();\n            }\n          },\n          _chrome: function () {\n            var wrapper = $(\"<div class='k-spreadsheet-action-bar' />\").prependTo(this.element);\n            var nameEditor = $(\"<div class='k-spreadsheet-name-editor' />\").appendTo(wrapper);\n            this.nameEditor = new kendo.spreadsheet.NameEditor(nameEditor, this.options);\n            var formulaBar = $(\"<div />\").appendTo(wrapper);\n            this.formulaBar = new kendo.spreadsheet.FormulaBar(formulaBar);\n\n            if (this.options.toolbar) {\n              this._tabstrip();\n            }\n          },\n          _formulaInput: function () {\n            var editor = this.element.find(DOT + View.classNames.cellEditor);\n            this.formulaInput = new kendo.spreadsheet.FormulaInput(editor, {\n              autoScale: true\n            });\n          },\n          _sheetsbar: function () {\n            if (this.options.sheetsbar) {\n              var options = $.extend(true, {\n                openDialog: this.openDialog.bind(this)\n              }, this.options.sheetsbar);\n              this.sheetsbar = new kendo.spreadsheet.SheetsBar(this.element.find(DOT + View.classNames.sheetsBar), options);\n            }\n          },\n          _tabstrip: function () {\n            var messages = this.options.messages.tabs;\n            var options = $.extend(true, {\n              home: true,\n              insert: true,\n              data: true\n            }, this.options.toolbar);\n            var tabs = [];\n\n            if (this.tabstrip) {\n              this.tabstrip.destroy();\n              this.element.children(\".k-tabstrip\").remove();\n            }\n\n            for (var name in options) {\n              if (options[name] === true || options[name] instanceof Array) {\n                tabs.push({\n                  id: name,\n                  text: messages[name],\n                  content: \"\"\n                });\n              }\n            }\n\n            this.tabstrip = new kendo.spreadsheet.TabStrip($(\"<div />\").prependTo(this.element), {\n              animation: false,\n              dataTextField: \"text\",\n              dataContentField: \"content\",\n              dataSource: tabs,\n              toolbarOptions: options,\n              view: this\n            });\n            this.tabstrip.select(0);\n          },\n          _executeCommand: function (e) {\n            this._sheet.trigger(\"commandRequest\", e);\n          },\n          workbook: function (workbook) {\n            this._workbook = workbook;\n            workbook._view = this;\n            this.nameEditor._workbook = workbook;\n          },\n          sheet: function (sheet) {\n            this._sheet = sheet;\n          },\n          activeCellRectangle: function () {\n            return this.cellRectangle(this._sheet._viewActiveCell());\n          },\n          _rectangle: function (pane, ref) {\n            return pane._grid.boundingRectangle(ref.toRangeRef());\n          },\n          isColumnResizer: function (x, pane, col) {\n            // relative to content\n            x -= this._sheet._grid._headerWidth; // add scroll if pane is not frozen\n\n            if (!pane._grid.columns.frozen) {\n              x += this.scroller.scrollLeft;\n            }\n\n            col = this._sheet._grid._columns.locate(0, col, function (w) {\n              return Math.abs(x - w) <= RESIZE_HANDLE_WIDTH / 2;\n            });\n            return col !== null && !this._sheet.isHiddenColumn(col) ? col : null;\n          },\n          isRowResizer: function (y, pane, row) {\n            // relative to content\n            y -= this._sheet._grid._headerHeight; // add scroll if pane is not frozen\n\n            if (!pane._grid.rows.frozen) {\n              y += this.scroller.scrollTop;\n            }\n\n            row = this._sheet._grid._rows.locate(0, row, function (h) {\n              return Math.abs(y - h) <= RESIZE_HANDLE_WIDTH / 2;\n            });\n            return row !== null && !this._sheet.isHiddenRow(row) ? row : null;\n          },\n          isFilterIcon: function (x, y, pane, ref) {\n            var self = this;\n            var theGrid = pane._grid;\n            var scrollTop = theGrid.rows.frozen ? 0 : self.scroller.scrollTop;\n            var scrollLeft = theGrid.columns.frozen ? 0 : self.scroller.scrollLeft;\n            x -= self._sheet._grid._headerWidth - scrollLeft;\n            y -= self._sheet._grid._headerHeight - scrollTop;\n            return kendo.util.withExit(function (exit) {\n              self._sheet.forEachFilterHeader(ref, function (ref) {\n                var rect = self._rectangle(pane, ref);\n\n                if (pane.filterIconRect(rect).intersects(x, y)) {\n                  exit(true);\n                }\n              });\n            });\n          },\n          isAutoFill: function (x, y, pane) {\n            var selection = this._sheet.select();\n\n            if (selection.size > 1) {\n              return false;\n            }\n\n            x -= this._sheet._grid._headerWidth;\n            y -= this._sheet._grid._headerHeight;\n\n            if (!pane._grid.columns.frozen) {\n              x += this.scroller.scrollLeft;\n            }\n\n            if (!pane._grid.rows.frozen) {\n              y += this.scroller.scrollTop;\n            }\n\n            var rectangle = this._rectangle(pane, selection);\n\n            return Math.abs(rectangle.right - x) < 8 && Math.abs(rectangle.bottom - y) < 8;\n          },\n          isEditButton: function (x, y, pane) {\n            var ed = this._sheet.activeCellCustomEditor();\n\n            if (ed) {\n              var r = this.activeCellRectangle(); // XXX: hard-coded button width (20)\n\n              if (y >= r.top && y <= r.bottom) {\n                return pane._editorInLastColumn ? x < r.left && x >= r.left - EDIT_BUTTON_WIDTH : x > r.right && x <= r.right + EDIT_BUTTON_WIDTH;\n              }\n            }\n          },\n          drawingAt: function (x, y, pane) {\n            x -= this._sheet._grid._headerWidth;\n            y -= this._sheet._grid._headerHeight;\n\n            if (!pane._grid.columns.frozen) {\n              x += this.scroller.scrollLeft;\n            }\n\n            if (!pane._grid.rows.frozen) {\n              y += this.scroller.scrollTop;\n            }\n\n            var sheet = this._sheet;\n            var drawings = this._sheet._drawings;\n\n            for (var i = drawings.length; --i >= 0;) {\n              var d = drawings[i];\n              var box = sheet.drawingBoundingBox(d);\n\n              if (box.intersects(x, y)) {\n                return {\n                  drawing: d,\n                  // also include how far is the drawing's\n                  // top-left from the mouse position, as it's\n                  // not easy to compute some place else.\n                  drx: box.left - x,\n                  dry: box.top - y\n                };\n              }\n            }\n          },\n          objectAt: function (x, y, noDrawing) {\n            var grid = this._sheet._grid;\n            var object, pane;\n\n            if (x < 0 || y < 0 || x > this.scroller.clientWidth || y > this.scroller.clientHeight) {\n              object = {\n                type: \"outside\"\n              };\n            } else if (x < grid._headerWidth && y < grid._headerHeight) {\n              object = {\n                type: \"topcorner\"\n              };\n            } else {\n              pane = this.paneAt(x, y);\n\n              if (!pane) {\n                object = {\n                  type: \"outside\"\n                };\n              } else {\n                if (!noDrawing) {\n                  var drawing = this.drawingAt(x, y, pane);\n\n                  if (drawing) {\n                    return {\n                      type: \"drawing\",\n                      drawing: drawing.drawing,\n                      drx: drawing.drx,\n                      dry: drawing.dry,\n                      pane: pane,\n                      startX: x,\n                      startY: y\n                    };\n                  }\n                }\n\n                var row = pane._grid.rows.indexVisible(y, this.scroller.scrollTop);\n\n                var column = pane._grid.columns.indexVisible(x, this.scroller.scrollLeft);\n\n                var type = \"cell\";\n                var ref = new CellRef(row, column);\n\n                var selecting = this._sheet.selectionInProgress();\n\n                if (this.isAutoFill(x, y, pane)) {\n                  type = \"autofill\";\n                } else if (this.isFilterIcon(x, y, pane, ref)) {\n                  type = \"filtericon\";\n                } else if (!selecting && x < grid._headerWidth) {\n                  type = \"rowheader\";\n\n                  if ((row = this.isRowResizer(y, pane, row)) !== null) {\n                    ref = new CellRef(row, -Infinity);\n                    type = \"rowresizehandle\";\n                  }\n                } else if (!selecting && y < grid._headerHeight) {\n                  type = \"columnheader\";\n\n                  if ((column = this.isColumnResizer(x, pane, column)) !== null) {\n                    ref = new CellRef(-Infinity, column);\n                    type = \"columnresizehandle\";\n                  }\n                } else if (this.isEditButton(x, y, pane)) {\n                  type = \"editor\";\n                }\n\n                object = {\n                  type: type,\n                  ref: ref\n                };\n              }\n            }\n\n            object.pane = pane;\n            object.x = x;\n            object.y = y;\n            return object;\n          },\n          paneAt: function (x, y) {\n            return this.panes.filter(function paneLocationWithin(pane) {\n              var grid = pane._grid;\n              return within(y, grid.top, grid.bottom) && within(x, grid.left, grid.right);\n            })[0];\n          },\n          containingPane: function (cell) {\n            return this.panes.filter(function (pane) {\n              if (pane._grid.contains(cell)) {\n                return true;\n              }\n\n              return false;\n            })[0];\n          },\n          cellRectangle: function (cell) {\n            var theGrid = this.containingPane(cell)._grid;\n\n            var rectangle = this._sheet._grid.rectangle(cell);\n\n            return rectangle.offset(theGrid.headerWidth - (theGrid.columns.frozen ? 0 : this.scroller.scrollLeft), theGrid.headerHeight - (theGrid.rows.frozen ? 0 : this.scroller.scrollTop));\n          },\n          refresh: function (reason) {\n            var sheet = this._sheet;\n\n            if (this.tabstrip) {\n              this.tabstrip.refreshTools(sheet.range(sheet.activeCell()));\n            }\n\n            if (reason.sheetSelection && this.sheetsbar) {\n              this.sheetsbar.renderSheets(this._workbook.sheets(), this._workbook.sheetIndex(this._sheet));\n            }\n\n            this._resize(); //TODO: refresh sheets list on sheetSelection\n\n\n            this.viewSize[0].style.height = sheet._grid.totalHeight() + \"px\";\n            this.viewSize[0].style.width = sheet._grid.totalWidth() + \"px\";\n\n            if (reason.layout) {\n              var frozenColumns = sheet.frozenColumns();\n              var frozenRows = sheet.frozenRows(); // main or bottom or right pane\n\n              this.panes = [this._pane(frozenRows, frozenColumns)]; // left pane\n\n              if (frozenColumns > 0) {\n                this.panes.push(this._pane(frozenRows, 0, null, frozenColumns));\n              } // top pane\n\n\n              if (frozenRows > 0) {\n                this.panes.push(this._pane(0, frozenColumns, frozenRows, null));\n              } // left-top \"fixed\" pane\n\n\n              if (frozenRows > 0 && frozenColumns > 0) {\n                this.panes.push(this._pane(0, 0, frozenRows, frozenColumns));\n              }\n            }\n\n            if (reason.filter) {\n              this._destroyFilterMenu();\n            }\n\n            if (reason.activeCell) {\n              this._focus = sheet.activeCell().toRangeRef();\n            }\n          },\n          createFilterMenu: function (column) {\n            this._destroyFilterMenu();\n\n            var sheet = this._sheet;\n            var ref = sheet.filter().ref;\n            var range = new kendo.spreadsheet.Range(ref, sheet);\n            var element = $(\"<div />\").appendTo(this.element);\n            var options = {\n              column: column,\n              range: range\n            };\n            var filterMenu = new kendo.spreadsheet.FilterMenu(element, options);\n            this._filterMenu = filterMenu;\n            return filterMenu;\n          },\n          selectClipboardContents: function () {\n            if (!this.isClipboardDeactivated) {\n              this.clipboard.focus();\n              selectElementContents(this.clipboard[0]);\n            }\n          },\n          scrollIntoView: function (cell) {\n            var willScroll = false;\n\n            var theGrid = this.containingPane(cell)._grid;\n\n            var boundaries = theGrid.scrollBoundaries(cell);\n            var scroller = this.scroller;\n            var scrollTop = theGrid.rows.frozen ? 0 : scroller.scrollTop;\n            var scrollLeft = theGrid.columns.frozen ? 0 : scroller.scrollLeft;\n\n            if (boundaries.top < scrollTop) {\n              willScroll = true;\n              scroller.scrollTop = boundaries.scrollTop;\n            }\n\n            if (boundaries.bottom > scrollTop) {\n              willScroll = true;\n              scroller.scrollTop = boundaries.scrollBottom;\n            }\n\n            if (boundaries.left < scrollLeft) {\n              willScroll = true;\n              scroller.scrollLeft = boundaries.scrollLeft;\n            }\n\n            if (boundaries.right > scrollLeft) {\n              willScroll = true;\n              scroller.scrollLeft = boundaries.scrollRight;\n            }\n\n            return willScroll;\n          },\n          _destroyDialog: function () {\n            this._dialogs.pop();\n          },\n          openCustomEditor: function () {\n            var self = this;\n\n            var cell = self._sheet.activeCell().first();\n\n            var editor = self._sheet.activeCellCustomEditor();\n\n            var range = self._sheet.range(cell);\n\n            editor.edit({\n              range: range,\n              rect: self.activeCellRectangle(),\n              view: this,\n              validation: this._sheet.validation(cell),\n              callback: function (value, parse) {\n                self._executeCommand({\n                  command: \"EditCommand\",\n                  options: {\n                    operatingRange: range,\n                    editRange: range,\n                    property: parse ? \"input\" : \"value\",\n                    value: value\n                  }\n                });\n              }\n            });\n          },\n          openDialog: function (name, options) {\n            var sheet = this._sheet;\n            return sheet.withCultureDecimals(function () {\n              var dialog = kendo.spreadsheet.dialogs.create(name, options);\n\n              if (dialog) {\n                dialog.bind(\"action\", this._executeCommand.bind(this));\n                dialog.bind(\"deactivate\", this._destroyDialog.bind(this));\n\n                this._dialogs.push(dialog);\n\n                var ref = sheet.activeCell();\n                var range = new kendo.spreadsheet.Range(ref, sheet);\n                dialog.open(range);\n                return dialog;\n              }\n            }.bind(this));\n          },\n          showError: function (options, reopenEditor) {\n            var currentDialogs = this._dialogs;\n            var errorMessages = this.options.messages.errors;\n            var hasOpenedError = false;\n\n            if (currentDialogs.length > 0) {\n              currentDialogs.forEach(function (dialog) {\n                if (dialog.options && dialog.options.title === ERROR) {\n                  hasOpenedError = true;\n                }\n              });\n            }\n\n            if (hasOpenedError) {\n              return;\n            }\n\n            var focusButton = function (e) {\n              var cont = e.sender.dialog().element;\n              cont.find(\".k-button\").first().trigger(\"focus\");\n              cont.find(\".k-button, input\").on(\"keydown\", function (ev) {\n                if (ev.keyCode == kendo.keys.ESC) {\n                  e.sender.close();\n                }\n              });\n            };\n\n            var onClose = function (e) {\n              var dlg = e.sender;\n              this.selectClipboardContents();\n\n              if (dlg._retry && reopenEditor) {\n                reopenEditor();\n              }\n            }.bind(this);\n\n            if (kendo.spreadsheet.dialogs.registered(options.type)) {\n              var dialogOptions = {\n                close: onClose\n              };\n\n              if (options.type === \"validationError\") {\n                dialogOptions = $.extend(dialogOptions, {\n                  title: options.title || \"Error\",\n                  text: options.body ? options.body : errorMessages[options.type],\n                  activate: focusButton\n                });\n              }\n\n              this.openDialog(options.type, dialogOptions);\n            } else {\n              this.openDialog(\"message\", {\n                title: options.title || \"Error\",\n                text: options.body ? options.body : errorMessages[options.type],\n                activate: focusButton,\n                close: onClose\n              });\n            }\n          },\n          destroy: function () {\n            this._dialogs.forEach(function (dialog) {\n              dialog.destroy();\n            });\n\n            if (this.cellContextMenu) {\n              this.cellContextMenu.destroy();\n            }\n\n            this.rowHeaderContextMenu.destroy();\n            this.colHeaderContextMenu.destroy();\n            this.drawingContextMenu.destroy();\n            this.cellContextMenu = this.rowHeaderContextMenu = this.colHeaderContextMenu = this.drawingContextMenu = null;\n\n            if (this.tabstrip) {\n              this.tabstrip.destroy();\n              this.tabstrip = null;\n            }\n\n            this._destroyFilterMenu();\n          },\n          _destroyFilterMenu: function () {\n            if (this._filterMenu) {\n              this._filterMenu.destroy();\n\n              this._filterMenu = undefined;\n              this._filterMenuColumn = undefined;\n            }\n          },\n          render: function (reason) {\n            if (!this.element.is(\":visible\")) {\n              return;\n            }\n\n            var sheet = this._sheet;\n            var focus = sheet.focus();\n            var scrollbarSize = kendo.support.scrollbar();\n            var contentWidth = this.wrapper[0].clientWidth - scrollbarSize;\n            var contentHeight = this.wrapper[0].clientHeight - scrollbarSize;\n\n            if (focus && this.scrollIntoView(focus)) {\n              return;\n            }\n\n            var resizeDirection = !sheet.resizingInProgress() ? \"none\" : sheet.resizeHandlePosition().col === -Infinity ? \"column\" : \"row\";\n            this.wrapper.toggleClass(viewClassNames.editContainer, this.editor.isActive()).toggleClass(viewClassNames.horizontalResize, resizeDirection == \"row\").toggleClass(viewClassNames.verticalResize, resizeDirection == \"column\");\n            var grid = sheet._grid;\n            var content = [];\n            var args = {\n              scroller: this.scroller,\n              toplevelElements: content,\n              contentWidth: contentWidth,\n              contentHeight: contentHeight\n            };\n            this.panes.forEach(function (pane) {\n              content.push(pane.render(args));\n            });\n            var topCorner = kendo.dom.element(\"div\", {\n              style: {\n                width: grid._headerWidth + \"px\",\n                height: grid._headerHeight + \"px\"\n              },\n              className: View.classNames.topCorner\n            });\n            content.push(topCorner);\n\n            if (sheet.resizeHandlePosition() && sheet.resizeHintPosition()) {\n              content.push(this.renderResizeHint());\n            }\n\n            this.tree.render(content);\n            $(this.container).css({\n              width: contentWidth,\n              height: contentHeight\n            });\n\n            if (this.editor.isActive()) {\n              this.editor.toggleTooltip(this.activeCellRectangle());\n            } else if (!(reason.resize || reason.comment || sheet.selectionInProgress() || sheet.resizingInProgress() || sheet.draggingInProgress() || sheet.isInEditMode())) {\n              this.renderClipboardContents();\n            }\n          },\n          // this renders the big blue line during resizing\n          renderResizeHint: function () {\n            var sheet = this._sheet;\n            var ref = sheet.resizeHandlePosition();\n            var horizontal = ref.col !== -Infinity;\n            var style;\n\n            if (horizontal) {\n              style = {\n                height: this.scroller.clientHeight + \"px\",\n                width: RESIZE_HANDLE_WIDTH + \"px\",\n                left: sheet.resizeHintPosition().x + \"px\",\n                top: \"0px\"\n              };\n            } else {\n              style = {\n                height: RESIZE_HANDLE_WIDTH + \"px\",\n                width: this.scroller.clientWidth + \"px\",\n                top: sheet.resizeHintPosition().y + \"px\",\n                left: \"0px\"\n              };\n            }\n\n            var classNames = Pane.classNames;\n            return kendo.dom.element(\"div\", {\n              className: classNames.resizeHint + (!horizontal ? \" \" + classNames.resizeHintVertical : \"\"),\n              style: style\n            }, [kendo.dom.element(\"div\", {\n              className: classNames.resizeHintHandle\n            }), kendo.dom.element(\"div\", {\n              className: classNames.resizeHintMarker\n            })]);\n          },\n          renderClipboardContents: function () {\n            var sheet = this._sheet;\n            var grid = sheet._grid; // if (sheet._activeDrawing && sheet._activeDrawing.image) {\n            //     var url = this._workbook.imageUrl(sheet._activeDrawing.image);\n            //     var img = kendo.dom.element(\"img\", {\n            //         src: url,\n            //         style: {\n            //             width: sheet._activeDrawing.width + \"px\",\n            //             height: sheet._activeDrawing.height + \"px\"\n            //         }\n            //     });\n            //     this.clipboardContents.render([ img ]);\n            //     this.selectClipboardContents();\n            //     return;\n            // }\n\n            var selection = grid.normalize(sheet.select().toRangeRef());\n\n            var status = this._workbook.clipboard().canCopy();\n\n            if (status.canCopy === false && status.multiSelection) {\n              this.clipboardContents.render([]);\n              this.selectClipboardContents();\n              return;\n            }\n\n            selection = sheet.trim(selection);\n            var table = new HtmlTable();\n            var selectionView = grid.rangeDimensions(selection);\n            selectionView.rows.forEach(function (height) {\n              table.addRow(height);\n            });\n            selectionView.columns.forEach(function (width) {\n              table.addColumn(width);\n            });\n\n            var tmp = sheet._getMergedCells(selection);\n\n            var primaryMergedCells = tmp.primary;\n            var secondaryMergedCells = tmp.secondary;\n            sheet.forEach(selection, function (row, col, cell) {\n              var location = new CellRef(row, col).print();\n\n              if (!secondaryMergedCells[location]) {\n                var td = addCell(table, row - selection.topLeft.row, cell);\n                var mergedCell = primaryMergedCells[location];\n\n                if (mergedCell) {\n                  td.attr.colspan = mergedCell.width();\n                  td.attr.rowspan = mergedCell.height();\n                }\n              }\n            });\n\n            if (kendo.support.browser.msie) {\n              this.clipboard.empty();\n            }\n\n            this.clipboardContents.render([table.toDomTree(0, 0, \"kendo-clipboard-\" + this._workbook.clipboard()._uid)]);\n            this.selectClipboardContents();\n          },\n          _pane: function (row, column, rowCount, columnCount) {\n            var pane = new Pane(this._sheet, this._sheet._grid.pane({\n              row: row,\n              column: column,\n              rowCount: rowCount,\n              columnCount: columnCount\n            }));\n            pane.refresh(this.scroller.clientWidth, this.scroller.clientHeight);\n            return pane;\n          }\n        });\n        var paneClassNames = {\n          cell: \"k-spreadsheet-cell\",\n          vaxis: \"k-spreadsheet-vaxis\",\n          haxis: \"k-spreadsheet-haxis\",\n          vborder: \"k-spreadsheet-vborder\",\n          hborder: \"k-spreadsheet-hborder\",\n          rowHeader: \"k-spreadsheet-row-header\",\n          columnHeader: \"k-spreadsheet-column-header\",\n          pane: \"k-spreadsheet-pane\",\n          data: \"k-spreadsheet-data\",\n          mergedCell: \"k-spreadsheet-merged-cell\",\n          mergedCellsWrapper: \"k-merged-cells-wrapper\",\n          activeCell: \"k-spreadsheet-active-cell\",\n          selection: \"k-spreadsheet-selection\",\n          selectionWrapper: \"k-selection-wrapper\",\n          autoFillWrapper: \"k-auto-fill-wrapper\",\n          single: \"k-single\",\n          top: \"k-top\",\n          right: \"k-right\",\n          bottom: \"k-bottom\",\n          left: \"k-left\",\n          resizeHandle: \"k-resize-handle\",\n          columnResizeHandle: \"k-column-resize-handle\",\n          rowResizeHandle: \"k-row-resize-handle\",\n          resizeHint: \"k-resize-hint\",\n          resizeHintHandle: \"k-resize-hint-handle\",\n          resizeHintMarker: \"k-resize-hint-marker\",\n          resizeHintVertical: \"k-resize-hint-vertical\",\n          selectionHighlight: \"k-spreadsheet-selection-highlight\",\n          series: [\"k-series-a\", \"k-series-b\", \"k-series-c\", \"k-series-d\", \"k-series-e\", \"k-series-f\"]\n        };\n        var Pane = kendo.Class.extend({\n          init: function (sheet, grid) {\n            this._sheet = sheet;\n            this._grid = grid;\n          },\n          refresh: function (width, height) {\n            this._grid.refresh(width, height);\n          },\n          isVisible: function (scrollLeft, scrollTop, ref) {\n            return this._grid.view(scrollLeft, scrollTop).ref.intersects(ref);\n          },\n          render: function (args) {\n            var scroller = args.scroller;\n            var scrollLeft = scroller.scrollLeft;\n            var scrollTop = scroller.scrollTop;\n\n            if (scrollTop < 0) {\n              scrollTop = 0;\n            }\n\n            if (scrollLeft < 0) {\n              scrollLeft = 0;\n            }\n\n            var classNames = Pane.classNames;\n            var sheet = this._sheet;\n            var grid = this._grid;\n            var view = grid.view(scrollLeft, scrollTop);\n            this._currentView = view;\n            this._currentRect = this._rectangle(view.ref);\n            this._selectedHeaders = sheet.selectedHeaders();\n            var children = [];\n            children.push(this.renderData(args));\n\n            if (!sheet._activeDrawing) {\n              children.push(this.renderSelection(scroller));\n            }\n\n            children.push(this.renderAutoFill());\n            children.push(this.renderEditorSelection());\n            children.push(this.renderFilterHeaders());\n\n            if (grid.hasRowHeader) {\n              var rowHeader = kendo.dom.element(\"div\", {\n                className: classNames.rowHeader,\n                style: {\n                  width: grid.headerWidth + \"px\",\n                  top: view.rowOffset + \"px\"\n                }\n              });\n              children.push(rowHeader);\n              sheet.forEach(view.ref.leftColumn(), function (row) {\n                if (!sheet.isHiddenRow(row)) {\n                  var text = row + 1,\n                      height = sheet.rowHeight(row);\n                  rowHeader.children.push(kendo.dom.element(\"div\", {\n                    className: this.headerClassName(row, \"row\"),\n                    style: {\n                      width: grid.headerWidth + \"px\",\n                      height: height + \"px\"\n                    }\n                  }, [kendo.dom.element(\"div\", {\n                    className: \"k-vertical-align-center\"\n                  }, [kendo.dom.text(text + \"\")])]));\n                }\n              }.bind(this));\n            }\n\n            if (grid.hasColumnHeader) {\n              var columnHeader = kendo.dom.element(\"div\", {\n                className: classNames.columnHeader,\n                style: {\n                  top: \"0px\",\n                  left: view.columnOffset + \"px\",\n                  width: this._currentRect.width + \"px\",\n                  height: grid.headerHeight + \"px\"\n                }\n              });\n              children.push(columnHeader);\n              var left = 0;\n              sheet.forEach(view.ref.topRow(), function (row, col) {\n                if (!sheet.isHiddenColumn(col)) {\n                  var text = kendo.spreadsheet.Ref.display(null, Infinity, col),\n                      width = sheet.columnWidth(col);\n                  columnHeader.children.push(kendo.dom.element(\"div\", {\n                    className: this.headerClassName(col, \"col\"),\n                    style: {\n                      position: \"absolute\",\n                      left: left + \"px\",\n                      width: width + \"px\",\n                      height: grid.headerHeight + \"px\"\n                    }\n                  }, [kendo.dom.element(\"div\", {\n                    className: \"k-vertical-align-center\"\n                  }, [kendo.dom.text(text + \"\")])]));\n                  left += width;\n                }\n              }.bind(this));\n            }\n\n            if (sheet.resizeHandlePosition() && (grid.hasColumnHeader || grid.hasRowHeader)) {\n              if (!sheet.resizeHintPosition()) {\n                this.renderResizeHandle(children);\n              }\n            }\n\n            var paneClasses = [classNames.pane];\n\n            if (grid.hasColumnHeader) {\n              paneClasses.push(classNames.top);\n            }\n\n            if (grid.hasRowHeader) {\n              paneClasses.push(classNames.left);\n            }\n\n            return kendo.dom.element(\"div\", {\n              style: grid.style,\n              className: paneClasses.join(\" \")\n            }, children);\n          },\n          headerClassName: function (index, type) {\n            var selectedHeaders = this._selectedHeaders;\n            var itemSelection;\n            var allHeaders;\n\n            if (type === \"row\") {\n              itemSelection = selectedHeaders.rows[index];\n              allHeaders = selectedHeaders.allRows;\n            } else {\n              itemSelection = selectedHeaders.cols[index];\n              allHeaders = selectedHeaders.allCols;\n            }\n\n            var className = itemSelection || (selectedHeaders.all ? \"full\" : allHeaders ? \"partial\" : \"none\");\n\n            if (className) {\n              className = \"k-selection-\" + className;\n            }\n\n            return className;\n          },\n          renderData: function (args) {\n            var sheet = this._sheet;\n            var view = this._currentView;\n            var cont = kendo.dom.element(\"div\", {\n              className: Pane.classNames.data,\n              style: {\n                position: \"relative\",\n                left: view.columnOffset + \"px\",\n                top: view.rowOffset + \"px\"\n              }\n            });\n            var rect = this._currentRect;\n            var layout = kendo.spreadsheet.draw.doLayout(sheet, view.ref, {\n              forScreen: true\n            }),\n                prev;\n            var grid = this._grid;\n            var showGridLines = sheet._showGridLines;\n\n            if (showGridLines) {\n              // draw axis first\n              prev = null;\n              layout.xCoords.forEach(function (x) {\n                if (x !== prev) {\n                  prev = x;\n                  cont.children.push(kendo.dom.element(\"div\", {\n                    className: paneClassNames.vaxis,\n                    style: {\n                      left: x + \"px\",\n                      height: rect.height + \"px\",\n                      borderColor: sheet.gridLinesColor()\n                    }\n                  }));\n                }\n              });\n              prev = null;\n              layout.yCoords.forEach(function (y) {\n                if (y !== prev) {\n                  prev = y;\n                  cont.children.push(kendo.dom.element(\"div\", {\n                    className: paneClassNames.haxis,\n                    style: {\n                      top: y + \"px\",\n                      width: rect.width + \"px\",\n                      borderColor: sheet.gridLinesColor()\n                    }\n                  }));\n                }\n              });\n            }\n\n            var borders = kendo.spreadsheet.draw.Borders();\n            var activeCellRange = sheet.activeCell().toRangeRef();\n            var activeCell = activeCellRange.topLeft;\n            layout.cells.forEach(function (cell) {\n              var cls = null;\n              var absRow = cell.row + view.ref.topLeft.row;\n              var absCol = cell.col + view.ref.topLeft.col;\n\n              if (sheet._activeDrawing) {\n                var ref = sheet._activeDrawing.topLeftCell;\n\n                if (ref && ref.row == absRow && ref.col == absCol) {\n                  cls = \"k-spreadsheet-drawing-anchor-cell\";\n                }\n              } else if (absRow == activeCell.row && absCol == activeCell.col) {\n                // active cell.  normally we enter here only once.\n                cls = [Pane.classNames.activeCell].concat(this._activeFormulaColor(), this._directionClasses(activeCellRange));\n\n                if (sheet.singleCellSelection()) {\n                  cls.push(Pane.classNames.single);\n                }\n\n                cls = cls.join(\" \");\n              }\n\n              borders.add(cell);\n              drawCell(cont.children, cell, cls, showGridLines);\n\n              if (cell.comment && sheet._commentRef && absRow == sheet._commentRef.row && absCol == sheet._commentRef.col) {\n                var ttOffset = 4;\n                var left = cell.right + grid.left + view.columnOffset + ttOffset;\n                var style = {\n                  top: cell.top + grid.top + view.rowOffset + \"px\"\n                };\n\n                if (left + 200 > args.contentWidth) {\n                  style.right = args.contentWidth - grid.left - cell.left - view.columnOffset + ttOffset + \"px\";\n                } else {\n                  style.left = left + \"px\";\n                }\n\n                var div = kendo.dom.element(\"div\", {\n                  className: \"k-tooltip k-spreadsheet-cell-comment\",\n                  style: style\n                }, [kendo.dom.text(cell.comment)]);\n                args.toplevelElements.push(div);\n              }\n            }, this);\n            borders.vert.forEach(function (a) {\n              a.forEach(function (b) {\n                if (!b.rendered) {\n                  b.rendered = true;\n                  var style = {\n                    left: b.x + \"px\",\n                    top: b.top + \"px\",\n                    height: b.bottom - b.top + 1 + \"px\",\n                    borderWidth: b.size + \"px\",\n                    borderColor: b.color\n                  };\n\n                  if (b.size != 1) {\n                    style.transform = \"translateX(-\" + (b.size - 1) / 2 + \"px)\";\n                  }\n\n                  cont.children.push(kendo.dom.element(\"div\", {\n                    className: paneClassNames.vborder,\n                    style: style\n                  }));\n                }\n              });\n            });\n            borders.horiz.forEach(function (a) {\n              a.forEach(function (b) {\n                if (!b.rendered) {\n                  b.rendered = true;\n                  var style = {\n                    top: b.y + \"px\",\n                    left: b.left + \"px\",\n                    width: b.right - b.left + \"px\",\n                    borderWidth: b.size + \"px\",\n                    borderColor: b.color\n                  };\n\n                  if (b.size != 1) {\n                    style.transform = \"translateY(-\" + (b.size - 1) / 2 + \"px)\";\n                  }\n\n                  cont.children.push(kendo.dom.element(\"div\", {\n                    className: paneClassNames.hborder,\n                    style: style\n                  }));\n                }\n              });\n            });\n            this.renderDrawings(layout, cont.children);\n            return cont;\n          },\n          renderDrawings: function (layout, container) {\n            var sheet = this._sheet;\n            var workbook = sheet._workbook;\n            layout.drawings.forEach(function (d) {\n              var drawing = d.drawing;\n              var box = d.box;\n              var div = box.toDiv(\"k-spreadsheet-drawing\");\n\n              if (drawing.image) {\n                div.children.push(kendo.dom.element(\"div\", {\n                  className: \"k-spreadsheet-drawing-image\",\n                  style: {\n                    backgroundImage: \"url('\" + workbook.imageUrl(drawing.image) + \"')\",\n                    opacity: drawing.opacity\n                  }\n                }));\n              }\n\n              if (drawing === sheet._activeDrawing) {\n                div.attr.className += \" k-spreadsheet-active-drawing\";\n                drawingResizeHandles(div.children);\n              }\n\n              container.push(div);\n            });\n          },\n          renderResizeHandle: function (container) {\n            var sheet = this._sheet;\n            var ref = sheet.resizeHandlePosition();\n\n            var rectangle = this._rectangle(ref);\n\n            var classNames = [Pane.classNames.resizeHandle];\n            var style;\n\n            if (ref.col !== -Infinity) {\n              if (this._grid.rows._start > 0) {\n                return;\n              }\n\n              style = {\n                height: this._grid.headerHeight + \"px\",\n                width: RESIZE_HANDLE_WIDTH + \"px\",\n                left: rectangle.right - RESIZE_HANDLE_WIDTH / 2 + \"px\",\n                top: \"0px\"\n              };\n              classNames.push(viewClassNames.horizontalResize);\n            } else {\n              if (this._grid.columns._start > 0) {\n                return;\n              }\n\n              style = {\n                height: RESIZE_HANDLE_WIDTH + \"px\",\n                width: this._grid.headerWidth + \"px\",\n                top: rectangle.bottom - RESIZE_HANDLE_WIDTH / 2 + \"px\",\n                left: \"0px\"\n              };\n              classNames.push(viewClassNames.verticalResize);\n            }\n\n            container.push(kendo.dom.element(\"div\", {\n              className: classNames.join(\" \"),\n              style: style\n            }));\n          },\n          filterIconRect: function (rect) {\n            var BUTTON_SIZE = 16;\n            var BUTTON_OFFSET = 3;\n            return new kendo.spreadsheet.Rectangle(rect.right - BUTTON_SIZE - BUTTON_OFFSET, rect.top + BUTTON_OFFSET, BUTTON_SIZE, BUTTON_SIZE);\n          },\n          renderFilterHeaders: function () {\n            var sheet = this._sheet;\n            var children = [];\n            var classNames = View.classNames;\n            var filter = sheet.filter();\n\n            function icon(className) {\n              return kendo.dom.element(\"span\", {\n                className: classNames.icon + \" \" + className\n              });\n            }\n\n            function filterButton(classNames, position, index) {\n              var style = {\n                left: position.left + \"px\",\n                top: position.top + \"px\"\n              };\n              var filtered = filter && filter.columns.some(function (c) {\n                return c.index === index;\n              });\n              var classes = classNames.filterButton;\n\n              if (filtered) {\n                classes += \" \" + classNames.filterButtonSelected;\n              }\n\n              var button = kendo.dom.element(\"span\", {\n                className: classes,\n                style: style\n              }, [icon(classNames.iconFilterDefault)]);\n              return button;\n            }\n\n            if (filter) {\n              this._addDiv(children, filter.ref, classNames.filterRange);\n            }\n\n            sheet.forEachFilterHeader(this._currentView.ref, function (ref) {\n              var rect = this._rectangle(ref);\n\n              var position = this.filterIconRect(rect);\n\n              var column = this._sheet.filterColumn(ref);\n\n              var button = filterButton(classNames, position, column);\n              children.push(button);\n            }.bind(this));\n            return kendo.dom.element(\"div\", {\n              className: classNames.filterHeadersWrapper\n            }, children);\n          },\n          renderEditorSelection: function () {\n            var classNames = Pane.classNames;\n            var sheet = this._sheet;\n            var selections = [];\n\n            sheet._formulaSelections.forEach(function (range) {\n              var ref = range.ref;\n\n              if (ref === kendo.spreadsheet.NULLREF) {\n                return;\n              }\n\n              this._addDiv(selections, ref, classNames.selectionHighlight + \" \" + range.colorClass);\n            }.bind(this));\n\n            return kendo.dom.element(\"div\", {\n              className: classNames.selectionWrapper\n            }, selections);\n          },\n          renderSelection: function (scroller) {\n            var classNames = Pane.classNames;\n            var selections = [];\n            var selectionClasses = [classNames.selection];\n            var sheet = this._sheet;\n            var activeCell = sheet.activeCell().toRangeRef();\n            var selection = sheet.select();\n            selectionClasses = selectionClasses.concat(this._activeFormulaColor());\n\n            if (selection.size() === 1) {\n              selectionClasses.push(\"k-single-selection\");\n            }\n\n            if (this._sheet.autoFillPunch()) {\n              selectionClasses.push(\"k-dim-auto-fill-handle\");\n            }\n\n            selection.forEach(function (ref) {\n              if (ref !== kendo.spreadsheet.NULLREF) {\n                this._addDiv(selections, ref, selectionClasses.join(\" \"));\n              }\n            }.bind(this));\n\n            this._renderCustomEditorButton(selections, activeCell, scroller);\n\n            return kendo.dom.element(\"div\", {\n              className: classNames.selectionWrapper\n            }, selections);\n          },\n          renderAutoFill: function () {\n            var autoFillRectangle = [];\n\n            if (this._sheet.autoFillInProgress()) {\n              var autoFillRef = this._sheet.autoFillRef();\n\n              var punch = this._sheet.autoFillPunch();\n\n              var direction = this._sheet._autoFillDirection;\n\n              this._addDiv(autoFillRectangle, autoFillRef, \"k-auto-fill\");\n\n              if (punch) {\n                // collapsing, add overlay\n                this._addDiv(autoFillRectangle, punch, \"k-auto-fill-punch\");\n              } else if (direction !== undefined) {\n                // expanding - add hint\n                var ref, cssClass;\n\n                switch (direction) {\n                  case 0:\n                    ref = autoFillRef.bottomRight;\n                    cssClass = \"k-auto-fill-br-hint\";\n                    break;\n\n                  case 1:\n                    ref = autoFillRef.bottomRight;\n                    cssClass = \"k-auto-fill-br-hint\";\n                    break;\n\n                  case 2:\n                    ref = new CellRef(autoFillRef.topLeft.row, autoFillRef.bottomRight.col);\n                    cssClass = \"k-auto-fill-tr-hint\";\n                    break;\n\n                  case 3:\n                    ref = new CellRef(autoFillRef.bottomRight.row, autoFillRef.topLeft.col);\n                    cssClass = \"k-auto-fill-bl-hint\";\n                    break;\n                }\n\n                var rectangle = this._addDiv(autoFillRectangle, ref, cssClass);\n\n                if (rectangle) {\n                  var hint = kendo.dom.element(\"span\", {\n                    className: \"k-tooltip\"\n                  }, [kendo.dom.text(this._sheet._autoFillHint)]);\n                  rectangle.children.push(hint);\n                }\n              }\n            }\n\n            return kendo.dom.element(\"div\", {\n              className: Pane.classNames.autoFillWrapper\n            }, autoFillRectangle);\n          },\n          _addDiv: function (collection, ref, className) {\n            var view = this._currentView,\n                div;\n\n            if (view.ref.intersects(ref)) {\n              div = this._rectangle(ref).resize(1, 1).toDiv(className);\n              collection.push(div);\n            }\n\n            return div;\n          },\n          _renderCustomEditorButton: function (collection, ref, scroller) {\n            var self = this;\n            var sheet = self._sheet;\n            var view = self._currentView;\n            var columnCount = self._grid.columns._axis._count;\n            var ed = sheet.activeCellCustomEditor();\n\n            if (ed && view.ref.intersects(ref)) {\n              var rectangle = self._rectangle(ref);\n\n              sheet.forEach(ref.collapse(), function (row, col, cell) {\n                cell.left = rectangle.left;\n                cell.top = rectangle.top;\n                cell.width = rectangle.width;\n                cell.height = rectangle.height;\n                var btnClass = \"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-spreadsheet-editor-button\";\n\n                var isLastColumn = col == columnCount - 1 || self._buttonOutOfVisiblePane(row, col, scroller);\n\n                if (isLastColumn) {\n                  btnClass += \" k-spreadsheet-last-column\";\n                }\n\n                self._editorInLastColumn = isLastColumn;\n                var btn = kendo.dom.element(\"div\", {\n                  className: btnClass,\n                  style: {\n                    left: cell.left + (isLastColumn ? 0 : cell.width) + \"px\",\n                    top: cell.top + \"px\",\n                    height: cell.height + \"px\"\n                  }\n                });\n\n                if (ed.icon) {\n                  btn.children.push(kendo.dom.element(\"span\", {\n                    className: \"k-icon \" + ed.icon\n                  }));\n                }\n\n                collection.push(btn);\n              });\n            }\n          },\n          _activeFormulaColor: function () {\n            var activeFormulaSelection;\n            var colorClasses = [];\n\n            if (this._sheet.isInEditMode()) {\n              activeFormulaSelection = this._sheet._formulaSelections.filter(function (sel) {\n                return sel.active && sel.type == \"ref\";\n              })[0];\n\n              if (activeFormulaSelection) {\n                colorClasses.push(activeFormulaSelection.colorClass);\n              }\n            }\n\n            return colorClasses;\n          },\n          _directionClasses: function (cell) {\n            var cellClasses = [];\n            var classNames = Pane.classNames;\n            var view = this._currentView.ref;\n\n            if (!cell.move(0, -1).intersects(view)) {\n              cellClasses.push(classNames.left);\n            }\n\n            if (!cell.move(-1, 0).intersects(view)) {\n              cellClasses.push(classNames.top);\n            }\n\n            if (!cell.move(0, 1).intersects(view)) {\n              cellClasses.push(classNames.right);\n            }\n\n            if (!cell.move(1, 0).intersects(view)) {\n              cellClasses.push(classNames.bottom);\n            }\n\n            return cellClasses;\n          },\n          _rectangle: function (ref) {\n            return this._grid.boundingRectangle(ref.toRangeRef()).offset(-this._currentView.mergedCellLeft, -this._currentView.mergedCellTop);\n          },\n          _buttonOutOfVisiblePane: function (row, col, scroller) {\n            var self = this;\n            var theGrid = self._grid;\n            var sheet = self._sheet;\n\n            var ref = sheet.range(row, col)._ref;\n\n            var boundaries = theGrid.scrollBoundaries(ref);\n            var scrollLeft = theGrid.columns.frozen ? 0 : scroller.scrollLeft;\n\n            if (boundaries.right + EDIT_BUTTON_WIDTH > scrollLeft || col + 1 === sheet.frozenColumns()) {\n              return true;\n            }\n          }\n        });\n\n        function drawingResizeHandles(container) {\n          [\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\"].forEach(function (direction) {\n            container.push(kendo.dom.element(\"div\", {\n              \"className\": \"k-spreadsheet-drawing-handle \" + direction,\n              \"data-direction\": direction\n            }));\n          });\n        }\n\n        kendo.spreadsheet.View = View;\n        kendo.spreadsheet.Pane = Pane;\n        kendo.spreadsheet.drawCell = drawCell;\n        $.extend(true, View, {\n          classNames: viewClassNames\n        });\n        $.extend(true, Pane, {\n          classNames: paneClassNames\n        });\n      })(window.kendo);\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1733:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./sheetsbar\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}