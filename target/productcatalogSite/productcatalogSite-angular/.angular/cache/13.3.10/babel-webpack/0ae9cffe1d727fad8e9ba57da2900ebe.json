{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1674);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  6:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.combobox\");\n    /***/\n  },\n\n  /***/\n  1039:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.toolbar\");\n    /***/\n  },\n\n  /***/\n  1674:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1039), __webpack_require__(6), __webpack_require__(1675)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            extend = $.extend,\n            ACTION = \"action\",\n            KEYDOWN = \"keydown\",\n            CLICK = kendo.support.click,\n            CHANGE = \"change\",\n            ZOOMIN = \"zoomin\",\n            ZOOMOUT = \"zoomout\",\n            Item = kendo.toolbar.Item,\n            ToolBar = kendo.ui.ToolBar,\n            PREDEFINED_ZOOM_VALUES = {\n          auto: \"auto\",\n          actual: \"actual\",\n          fitToWidth: \"fitToWidth\",\n          fitToPage: \"fitToPage\"\n        },\n            styles = {\n          zoomOutIcon: \"k-i-zoom-out\",\n          zoomInIcon: \"k-i-zoom-in\",\n          zoomButtons: \"k-button-flat k-button-flat-base\",\n          zoomOverflowButtons: \"k-button-solid k-button-solid-base k-overflow-button\",\n          overflowHidden: \"k-overflow-hidden\"\n        };\n        var ZOOM_BUTTON_TEMPLATE = kendo.template('<a href=\"\\\\#\" aria-label=\"#=text#\" title=\"#=text#\" data-command=\"#=command#\" class=\"k-button k-button-md k-rounded-md # if(!showText) { # k-icon-button # } # #=className#\">' + '<span class=\"k-button-icon k-icon #= iconClass #\"></span> ' + '# if(showText) { #' + '<span class=\"k-button-text\">#= text #</span> ' + '# } #' + '</a>');\n        var ZOOM_COMBOBOX_TEMPLATE = kendo.template('<select title=\"#=zoomLevel#\" aria-label=\"#=zoomLevel#\">' + '#for(var zoomIndex in zoomLevels){#' + '# var zoomLevel = zoomLevels[zoomIndex]; #' + '<option value=\"#= zoomLevel.percent || (zoomLevel + \"%\") #\">${zoomLevel.text ? zoomLevel.text : zoomLevel + \"%\"}</option>' + '#}#' + '</select>');\n        var DefaultTools = {\n          pager: {\n            type: \"pager\",\n            overflow: \"never\",\n            command: \"PageChangeCommand\"\n          },\n          spacer: {\n            type: \"spacer\"\n          },\n          zoom: {\n            type: \"zoom\",\n            command: \"ZoomCommand\",\n            zoomInOut: true,\n            combobox: {\n              zoomLevels: [50, 100, 150, 200, 300, 400]\n            },\n            enable: false,\n            attributes: {\n              \"class\": \"k-button-group\"\n            }\n          },\n          toggleSelection: {\n            type: \"buttonGroup\",\n            attributes: {\n              \"class\": \"k-toggle-selection-group\"\n            },\n            buttons: [{\n              togglable: true,\n              text: \"Enable Selection\",\n              command: \"EnableSelectionCommand\",\n              icon: \"cursor\",\n              showText: \"overflow\",\n              name: \"toggleSelection\",\n              group: \"toggle-pan\"\n            }, {\n              togglable: true,\n              text: \"Enable Panning\",\n              command: \"EnablePanCommand\",\n              icon: \"hand\",\n              showText: \"overflow\",\n              name: \"togglePan\",\n              group: \"toggle-pan\",\n              selected: true\n            }]\n          },\n          spacer2: {\n            type: \"spacer\"\n          },\n          search: {\n            type: \"button\",\n            text: \"Search\",\n            command: \"OpenSearchCommand\",\n            icon: \"search\",\n            name: \"search\",\n            showText: \"overflow\",\n            enable: false\n          },\n          open: {\n            type: \"button\",\n            text: \"Open\",\n            showText: \"overflow\",\n            name: \"open\",\n            icon: \"folder-open\",\n            command: \"OpenCommand\"\n          },\n          download: {\n            type: \"button\",\n            text: \"Download\",\n            showText: \"overflow\",\n            name: \"download\",\n            icon: \"download\",\n            command: \"DownloadCommand\",\n            enable: false\n          },\n          print: {\n            type: \"button\",\n            text: \"Print\",\n            showText: \"overflow\",\n            name: \"print\",\n            icon: \"print\",\n            command: \"PrintCommand\",\n            enable: false\n          }\n        };\n        var AllTools = extend({}, DefaultTools, {\n          exportAs: {\n            type: \"button\",\n            text: \"Export\",\n            showText: \"overflow\",\n            name: \"exportAs\",\n            icon: \"image-export\",\n            command: \"ExportCommand\"\n          }\n        });\n        var ToolbarPager = Item.extend({\n          init: function (options, toolbar) {\n            var pagerElement = $(\"<div />\");\n            this.options = extend(true, options, toolbar.options.pager);\n            this.toolbar = toolbar;\n            this.toolbar.pager = new kendo.pdfviewer.Pager(pagerElement, extend({}, options, {\n              change: this._change.bind(this)\n            }));\n            this.element = pagerElement;\n            this.element.on(KEYDOWN, this._keydown.bind(this));\n            this.attributes();\n            this.addUidAttr();\n            this.addOverflowAttr();\n          },\n          _change: function (e) {\n            if (this.options.change && this.options.change(e.page)) {\n              return;\n            }\n\n            this.toolbar.action({\n              command: \"PageChangeCommand\",\n              options: {\n                value: e.page\n              }\n            });\n          },\n          _keydown: function (e) {\n            var that = this,\n                target = $(e.target),\n                keyCode = e.keyCode,\n                children = that.element.find(\":kendoFocusable\"),\n                targetIndex = children.index(target),\n                direction = e.shiftKey ? -1 : 1,\n                keys = kendo.keys;\n\n            if (keyCode === keys.TAB && children[targetIndex + direction]) {\n              children[targetIndex + direction].focus();\n              e.preventDefault();\n              e.stopPropagation();\n            } else if (keyCode === keys.RIGHT && children[targetIndex + 1]) {\n              children[targetIndex + 1].focus();\n              e.preventDefault();\n              e.stopPropagation();\n            } else if (keyCode === keys.LEFT && children[targetIndex - 1]) {\n              children[targetIndex - 1].focus();\n              e.preventDefault();\n              e.stopPropagation();\n            }\n          }\n        });\n        kendo.toolbar.registerComponent(\"pager\", ToolbarPager);\n\n        function appendZoomButtons(element, messages, isOverflow) {\n          var className = isOverflow ? styles.zoomOverflowButtons : styles.zoomButtons;\n          element.append(ZOOM_BUTTON_TEMPLATE({\n            text: messages.zoomOut,\n            command: ZOOMOUT,\n            iconClass: styles.zoomOutIcon,\n            showText: isOverflow,\n            className: className\n          }));\n          element.append(ZOOM_BUTTON_TEMPLATE({\n            text: messages.zoomIn,\n            command: ZOOMIN,\n            iconClass: styles.zoomInIcon,\n            showText: isOverflow,\n            className: className\n          }));\n        }\n\n        var ToolBarZoom = Item.extend({\n          init: function (options, toolbar) {\n            this._init(options, toolbar);\n\n            this.toolbar.zoom = this;\n\n            if (toolbar.options.scale) {\n              this._initValue = toolbar.options.scale * 100 + \"%\";\n            }\n\n            this._appendElements();\n\n            this._click = kendo.throttle(this._click.bind(this), 200);\n            this._keydown = kendo.throttle(this._keydown.bind(this), 200);\n            this.element.on(CLICK, \".k-button[data-command='zoomin'], .k-button[data-command='zoomout']\", this._click);\n            this.element.on(KEYDOWN, \".k-button[data-command='zoomin'], .k-button[data-command='zoomout']\", this._keydown);\n            this.attributes();\n            this.addUidAttr();\n            this.addOverflowAttr();\n            this.enable(options.enable);\n          },\n          _init: function (options, toolbar) {\n            var zoomElement = $(\"<div />\");\n            this.options = extend(true, options, {\n              messages: toolbar.options.messages.zoom\n            });\n            this.toolbar = toolbar;\n            this.element = zoomElement;\n          },\n          _appendElements: function () {\n            var options = this.options;\n\n            if (options.zoomInOut) {\n              appendZoomButtons(this.element, options.messages, false);\n            }\n\n            if (options.combobox) {\n              this._buildComboBox();\n            }\n          },\n          _buildComboBox: function () {\n            var that = this,\n                combobox,\n                messages = that.options.messages,\n                comboOptions = that.options.combobox,\n                zoomLevels = [{\n              percent: PREDEFINED_ZOOM_VALUES.auto,\n              text: messages.autoWidth\n            }, {\n              percent: PREDEFINED_ZOOM_VALUES.actual,\n              text: messages.actualWidth\n            }, {\n              percent: PREDEFINED_ZOOM_VALUES.fitToWidth,\n              text: messages.fitToWidth\n            }, {\n              percent: PREDEFINED_ZOOM_VALUES.fitToPage,\n              text: messages.fitToPage\n            }];\n            zoomLevels = zoomLevels.concat(comboOptions.zoomLevels);\n            combobox = $(ZOOM_COMBOBOX_TEMPLATE({\n              zoomLevels: zoomLevels,\n              zoomLevel: messages.zoomLevel\n            }));\n\n            if (!kendo.support.mobileOS) {\n              combobox = combobox.kendoComboBox(extend({\n                autoWidth: true,\n                clearButton: false,\n                value: that._initValue\n              }, comboOptions)).getKendoComboBox();\n              that.element.append(combobox.wrapper);\n              that.combobox = combobox;\n              that._currentValue = combobox.value();\n            } else {\n              that.element.append(combobox);\n            }\n\n            combobox.bind(CHANGE, kendo.throttle(that.change.bind(that), 300));\n          },\n          change: function (e) {\n            var value = e.sender ? e.sender.value() : e.target.value,\n                parsedValue;\n\n            if (value.toString().match(/^[0-9]+%?$/)) {\n              parsedValue = parseInt(value.replace('%', ''), 10) / 100;\n            } else if (!PREDEFINED_ZOOM_VALUES[value]) {\n              if (this.combobox) {\n                this.combobox.value(this._currentValue);\n              }\n\n              e.preventDefault();\n              return;\n            }\n\n            this._currentValue = value;\n            this.toolbar.action({\n              command: \"ZoomCommand\",\n              options: {\n                scale: parsedValue || value\n              }\n            });\n          },\n          _buttonCommand: function (target) {\n            var button = $(target).closest(\".k-button\"),\n                command = button.data(\"command\");\n            this.toolbar.action({\n              command: \"ZoomCommand\",\n              options: {\n                zoomIn: command === ZOOMIN,\n                zoomOut: command === ZOOMOUT,\n                updateComboBox: true\n              }\n            });\n          },\n          _click: function (e) {\n            this._buttonCommand(e.target);\n          },\n          _keydown: function (e) {\n            var target = e.target,\n                keyCode = e.keyCode,\n                keys = kendo.keys,\n                children = this.element.find(\":kendoFocusable\"),\n                targetIndex = children.index($(target));\n\n            if (keyCode === keys.ENTER) {\n              this._buttonCommand(target);\n\n              e.preventDefault();\n            } else if (keyCode === keys.RIGHT && children[targetIndex + 1]) {\n              children[targetIndex + 1].focus();\n              e.preventDefault();\n              e.stopPropagation();\n            } else if (keyCode === keys.LEFT && children[targetIndex - 1]) {\n              children[targetIndex - 1].focus();\n              e.preventDefault();\n              e.stopPropagation();\n            }\n          },\n          enable: function (value) {\n            var element = this.element;\n            element.find(\".k-button, select\").toggleClass(\"k-disabled\", !value);\n\n            if (this.combobox) {\n              this.combobox.enable(value);\n            }\n          },\n          destroy: function () {\n            if (this.combobox) {\n              this.combobox.destroy();\n            }\n          }\n        });\n        var ToolBarOverflowZoom = ToolBarZoom.extend({\n          _init: function (options, toolbar) {\n            var zoomElement = $(\"<li></li>\");\n            this.options = extend(true, options, {\n              messages: toolbar.options.messages.zoom\n            });\n            this.toolbar = toolbar;\n            this.element = zoomElement;\n          },\n          _appendElements: function () {\n            var options = this.options;\n\n            if (options.zoomInOut) {\n              appendZoomButtons(this.element, options.messages, true);\n            }\n          },\n          overflowHidden: function () {\n            this.element.addClass(styles.overflowHidden);\n          }\n        });\n        kendo.toolbar.registerComponent(\"zoom\", ToolBarZoom, ToolBarOverflowZoom);\n        var ViewerToolBar = ToolBar.extend({\n          init: function (element, options) {\n            var that = this;\n            var items = options.items && options.items.length ? options.items : Object.keys(DefaultTools);\n            that.options = options;\n            options.items = that._updateItems(items);\n            ToolBar.fn.init.call(that, element, options);\n            that.bind({\n              click: that._click,\n              toggle: that._click\n            });\n            options.viewer.bind({\n              update: that._update.bind(that)\n            });\n          },\n          events: [ACTION],\n          _updateItems: function (items) {\n            var that = this;\n            var messages = this.options.messages;\n            return items.map(function (tool) {\n              var isBuiltInTool = $.isPlainObject(tool) && Object.keys(tool).length === 1 && tool.name;\n              tool = isBuiltInTool ? tool.name : tool;\n              var toolOptions = $.isPlainObject(tool) ? tool : AllTools[tool];\n              var options;\n              var toolName = toolOptions.name;\n\n              if (toolOptions.type === \"buttonGroup\") {\n                toolOptions.buttons = that._updateItems(toolOptions.buttons);\n              } else if (toolOptions.type !== \"pager\") {\n                options = {\n                  name: toolName,\n                  attributes: {\n                    \"aria-label\": messages[toolName],\n                    \"title\": messages[toolName],\n                    \"data-command\": toolOptions.command\n                  },\n                  overflow: toolOptions.overflow,\n                  fillMode: \"flat\"\n                };\n              } else {\n                options = {\n                  overflow: \"never\"\n                };\n              }\n\n              if (toolOptions.text) {\n                options.text = messages[toolOptions.name] || toolOptions.text;\n              }\n\n              kendo.deepExtend(toolOptions, options);\n              return toolOptions;\n            });\n          },\n          _click: function (e) {\n            var command = $(e.target).data(\"command\");\n\n            if (!command) {\n              return;\n            }\n\n            this.action({\n              command: command,\n              options: e.options\n            });\n          },\n          _update: function (e) {\n            var pageOptions = {\n              page: e.page || 1,\n              total: e.total || 1\n            };\n\n            if (this.zoom) {\n              this.zoom.enable(!e.isBlank);\n\n              if (e.action === \"zoom\") {\n                this._updateZoomComboBox(e.zoom);\n              }\n            }\n\n            if ((e.action === \"pagechange\" || e.isBlank) && this.pager) {\n              this.pager.setOptions(pageOptions);\n            }\n\n            this.enable(this.wrapper.find(\".k-toggle-selection-group\"), !e.isBlank);\n            this.enable(this.wrapper.find(\"[data-command='OpenSearchCommand']\"), !e.isBlank);\n            this.enable(this.wrapper.find(\"[data-command='DownloadCommand']\"), !e.isBlank);\n            this.enable(this.wrapper.find(\"[data-command='PrintCommand']\"), !e.isBlank);\n          },\n          _updateZoomComboBox: function (value) {\n            var isPredefined = value === PREDEFINED_ZOOM_VALUES.auto || value === PREDEFINED_ZOOM_VALUES.actual || value === PREDEFINED_ZOOM_VALUES.fitToPage || value === PREDEFINED_ZOOM_VALUES.fitToWidth;\n\n            if (!isPredefined) {\n              value = Math.round(value * 100) + '%';\n            }\n\n            if (this.zoom && this.zoom.combobox) {\n              this.zoom._currentValue = value;\n              this.zoom.combobox.value(value);\n            }\n          },\n          action: function (args) {\n            this.trigger(ACTION, args);\n          },\n          destroy: function () {\n            if (this.pager) {\n              this.pager.destroy();\n            }\n\n            if (this.zoom) {\n              this.zoom.destroy();\n            }\n\n            ToolBar.fn.destroy.call(this);\n          }\n        });\n        extend(kendo.pdfviewer, {\n          Toolbar: ViewerToolBar,\n          DefaultTools: DefaultTools\n        });\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1675:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./pager\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}