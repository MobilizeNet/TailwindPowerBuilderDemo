{"ast":null,"code":"import acceptKey from './accept-key';\nimport toChartAxisRanges from './to-chart-axis-ranges';\nimport { X, Y } from '../../common/constants';\nimport { Class, deepExtend, elementStyles, elementOffset, defined } from '../../common';\n\nclass ZoomSelection extends Class {\n  constructor(chart, options) {\n    super();\n    this.chart = chart;\n    this.options = deepExtend({}, this.options, options);\n    this.createElement();\n  }\n\n  createElement() {\n    const marquee = this._marquee = document.createElement(\"div\");\n    marquee.className = \"k-marquee\";\n    const marqueeColor = document.createElement(\"div\");\n    marqueeColor.className = \"k-marquee-color\";\n    marquee.appendChild(marqueeColor);\n  }\n\n  removeElement() {\n    if (this._marquee.parentNode) {\n      this._marquee.parentNode.removeChild(this._marquee);\n    }\n  }\n\n  setStyles(styles) {\n    elementStyles(this._marquee, styles);\n  }\n\n  start(e) {\n    if (acceptKey(e, this.options.key)) {\n      const chart = this.chart;\n\n      const point = chart._eventCoordinates(e);\n\n      const zoomPane = this._zoomPane = chart._plotArea.paneByPoint(point);\n\n      const clipBox = zoomPane ? zoomPane.chartsBox().clone() : null;\n\n      if (zoomPane && clipBox) {\n        const offset = this._elementOffset();\n\n        clipBox.translate(offset.left, offset.top);\n        this._zoomPaneClipBox = clipBox;\n        document.body.appendChild(this._marquee);\n        this.setStyles({\n          left: e.pageX + 1,\n          top: e.pageY + 1,\n          width: 0,\n          height: 0\n        });\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  _elementOffset() {\n    const chartElement = this.chart.element;\n    const {\n      paddingLeft,\n      paddingTop\n    } = elementStyles(chartElement, [\"paddingLeft\", \"paddingTop\"]);\n    const offset = elementOffset(chartElement);\n    return {\n      left: paddingLeft + offset.left,\n      top: paddingTop + offset.top\n    };\n  }\n\n  move(e) {\n    const zoomPane = this._zoomPane;\n\n    if (zoomPane) {\n      this.setStyles(this._selectionPosition(e));\n    }\n  }\n\n  end(e) {\n    const zoomPane = this._zoomPane;\n\n    if (zoomPane) {\n      const elementOffset = this._elementOffset();\n\n      const selectionPosition = this._selectionPosition(e);\n\n      selectionPosition.left -= elementOffset.left;\n      selectionPosition.top -= elementOffset.top;\n      const start = {\n        x: selectionPosition.left,\n        y: selectionPosition.top\n      };\n      const end = {\n        x: selectionPosition.left + selectionPosition.width,\n        y: selectionPosition.top + selectionPosition.height\n      };\n\n      this._updateAxisRanges(start, end);\n\n      this.removeElement();\n      delete this._zoomPane;\n      return toChartAxisRanges(this.axisRanges);\n    }\n  }\n\n  zoom() {\n    const axisRanges = this.axisRanges;\n\n    if (axisRanges && axisRanges.length) {\n      const plotArea = this.chart._plotArea;\n\n      for (let idx = 0; idx < axisRanges.length; idx++) {\n        const axisRange = axisRanges[idx];\n        plotArea.updateAxisOptions(axisRange.axis, axisRange.range);\n      }\n\n      plotArea.redraw(plotArea.panes);\n    }\n  }\n\n  destroy() {\n    this.removeElement();\n    delete this._marquee;\n    delete this.chart;\n  }\n\n  _updateAxisRanges(start, end) {\n    const lock = (this.options.lock || \"\").toLowerCase();\n    const axisRanges = [];\n    const axes = this._zoomPane.axes;\n\n    for (let idx = 0; idx < axes.length; idx++) {\n      const axis = axes[idx];\n      const vertical = axis.options.vertical;\n\n      if (!(lock === X && !vertical) && !(lock === Y && vertical) && defined(axis.axisIndex)) {\n        const range = axis.pointsRange(start, end);\n\n        if (range) {\n          axisRanges.push({\n            axis: axis,\n            range: range\n          });\n        }\n      }\n    }\n\n    this.axisRanges = axisRanges;\n  }\n\n  _selectionPosition(e) {\n    const clipBox = this._zoomPaneClipBox;\n    const startLocation = {\n      x: e.x.startLocation,\n      y: e.y.startLocation\n    };\n    const {\n      x: {\n        location: pageX\n      },\n      y: {\n        location: pageY\n      }\n    } = e;\n    const lock = (this.options.lock || \"\").toLowerCase();\n    let left = Math.min(startLocation.x, pageX);\n    let top = Math.min(startLocation.y, pageY);\n    let width = Math.abs(startLocation.x - pageX);\n    let height = Math.abs(startLocation.y - pageY);\n\n    if (lock === X) {\n      left = clipBox.x1;\n      width = clipBox.width();\n    }\n\n    if (lock === Y) {\n      top = clipBox.y1;\n      height = clipBox.height();\n    }\n\n    if (pageX > clipBox.x2) {\n      width = clipBox.x2 - startLocation.x;\n    }\n\n    if (pageX < clipBox.x1) {\n      width = startLocation.x - clipBox.x1;\n    }\n\n    if (pageY > clipBox.y2) {\n      height = clipBox.y2 - startLocation.y;\n    }\n\n    if (pageY < clipBox.y1) {\n      height = startLocation.y - clipBox.y1;\n    }\n\n    return {\n      left: Math.max(left, clipBox.x1),\n      top: Math.max(top, clipBox.y1),\n      width: width,\n      height: height\n    };\n  }\n\n}\n\nZoomSelection.prototype.options = {\n  key: \"shift\",\n  lock: \"none\"\n};\nexport default ZoomSelection;","map":null,"metadata":{},"sourceType":"module"}