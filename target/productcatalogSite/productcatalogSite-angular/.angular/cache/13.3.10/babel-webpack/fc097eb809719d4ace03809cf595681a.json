{"ast":null,"code":"/**-----------------------------------------------------------------------------------------\n* Copyright © 2021 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport * as i0 from '@angular/core';\nimport { Directive, Input, HostBinding, forwardRef, Component, NgModule, EventEmitter, isDevMode, Output, ContentChild, ViewChild } from '@angular/core';\nimport { isDocumentAvailable, guid, hasObservers, KendoInput } from '@progress/kendo-angular-common';\nimport * as i1 from '@progress/kendo-angular-l10n';\nimport { ComponentMessages, LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { NgControl } from '@angular/forms';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport { Observable, Subscription } from 'rxjs';\n/**\n * @hidden\n */\n\nfunction FloatingLabelComponent_label_2_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"(\", ctx_r1.textFor(\"optional\"), \")\");\n  }\n}\n\nfunction FloatingLabelComponent_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"label\", 2);\n    i0.ɵɵtext(1);\n    i0.ɵɵtemplate(2, FloatingLabelComponent_label_2_span_2_Template, 2, 1, \"span\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.labelCssClass)(\"ngStyle\", ctx_r0.labelCssStyle)(\"for\", ctx_r0.id);\n    i0.ɵɵattribute(\"id\", ctx_r0.labelId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.text, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.optional);\n  }\n}\n\nconst _c2 = [\"*\"];\n\nfunction LabelComponent_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 3);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"(\", ctx_r0.textFor(\"optional\"), \")\");\n  }\n}\n\nconst isUploadComponent = component => component.wrapper && (component.wrapper.tagName === 'KENDO-UPLOAD' || component.wrapper.tagName === 'KENDO-FILESELECT');\n/**\n * @hidden\n */\n\n\nconst isInputElement = component => component instanceof HTMLElement;\n/**\n * @hidden\n */\n\n\nconst inputElementHasAttr = (element, attribute) => element.hasAttribute(attribute);\n/**\n * @hidden\n */\n\n\nconst getWrappedNativeInput = element => element.querySelector('kendo-label > input, kendo-label > textarea, kendo-label > select');\n/**\n * @hidden\n */\n\n\nconst getRootElement = element => {\n  if (!element) {\n    return null;\n  }\n\n  let rootElement = element;\n\n  while (rootElement.parentElement) {\n    rootElement = rootElement.parentElement;\n  }\n\n  return rootElement;\n};\n/**\n * Represents the [Kendo UI Label directive for Angular]({% slug overview_label %}).\n * The Label associates a focusable Angular component or an HTML element\n * with a `label` tag by using the `[for]` property binding.\n *\n * To associate a component by using the `label` element, either:\n * * Set the `[for]` property binding to a\n * [template reference variable]({{ site.data.urls.angular['templatesyntax'] }}#template-reference-variables--var-), or\n * * Set the `[for]` property binding to an `id` HTML string value.\n *\n * @example\n * ```ts\n * _@Component({\n * selector: 'my-app',\n * template: `\n *  <div class=\"row example-wrapper\" style=\"min-height: 450px;\">\n *    <div class=\"col-xs-12 col-md-6 example-col\">\n *      <label [for]=\"datepicker\">DatePicker: </label>\n *      <kendo-datepicker #datepicker></kendo-datepicker>\n *    </div>\n *\n *    <div class=\"col-xs-12 col-md-6 example-col\">\n *      <label for=\"input\">Input: </label>\n *      <input id=\"input\" />\n *    </div>\n *  </div>\n * `\n * })\n * class AppComponent { }\n * ```\n */\n\n\nlet LabelDirective = /*#__PURE__*/(() => {\n  class LabelDirective {\n    constructor(label, renderer, zone) {\n      this.label = label;\n      this.renderer = renderer;\n      this.zone = zone;\n      this.labelClass = true;\n\n      this.handleClick = () => {\n        const component = this.getFocusableComponent();\n\n        if (!component) {\n          return;\n        }\n\n        if (isUploadComponent(component)) {\n          component.fileSelect.nativeElement.click();\n        }\n\n        if (component.focus) {\n          component.focus();\n        }\n      };\n    }\n\n    get labelFor() {\n      if (typeof this.for === 'string') {\n        return this.for;\n      }\n\n      if (!isDocumentAvailable()) {\n        return null;\n      }\n\n      const component = this.getFocusableComponent() || {};\n\n      if (isInputElement(component) && !inputElementHasAttr(component, 'id')) {\n        this.renderer.setAttribute(component, 'id', `k-${guid()}`);\n      }\n\n      return component.focusableId || component.id || null;\n    }\n    /**\n     * @hidden\n     */\n\n\n    ngAfterViewInit() {\n      this.setAriaLabelledby();\n      this.zone.runOutsideAngular(() => this.clickListener = this.renderer.listen(this.label.nativeElement, 'click', this.handleClick));\n    }\n    /**\n     * @hidden\n     */\n\n\n    ngOnDestroy() {\n      if (this.clickListener) {\n        this.clickListener();\n      }\n    }\n    /**\n     * @hidden\n     */\n\n\n    setAriaLabelledby() {\n      if (!isDocumentAvailable()) {\n        return;\n      }\n\n      const component = this.getFocusableComponent();\n\n      if (component && component.focusableId) {\n        const rootElement = getRootElement(this.label.nativeElement);\n        const labelTarget = rootElement.querySelector(`#${component.focusableId}`);\n\n        if (!labelTarget) {\n          return;\n        }\n\n        const labelElement = this.label.nativeElement;\n        const id = labelElement.id || `k-${guid()}`;\n\n        if (!labelElement.getAttribute('id')) {\n          this.renderer.setAttribute(labelElement, 'id', id);\n        }\n\n        this.renderer.setAttribute(labelTarget, 'aria-labelledby', id);\n      }\n    }\n\n    getFocusableComponent() {\n      const target = this.for;\n      return target && target.focus !== undefined ? target : null;\n    }\n\n  }\n\n  LabelDirective.ɵfac = function LabelDirective_Factory(t) {\n    return new (t || LabelDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.NgZone));\n  };\n\n  LabelDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: LabelDirective,\n    selectors: [[\"label\", \"for\", \"\"]],\n    hostVars: 3,\n    hostBindings: function LabelDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"for\", ctx.labelFor);\n        i0.ɵɵclassProp(\"k-label\", ctx.labelClass);\n      }\n    },\n    inputs: {\n      for: \"for\"\n    }\n  });\n  return LabelDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @hidden\n */\n\n\nlet Messages = /*#__PURE__*/(() => {\n  class Messages extends ComponentMessages {}\n\n  Messages.ɵfac = /* @__PURE__ */function () {\n    let ɵMessages_BaseFactory;\n    return function Messages_Factory(t) {\n      return (ɵMessages_BaseFactory || (ɵMessages_BaseFactory = i0.ɵɵgetInheritedFactory(Messages)))(t || Messages);\n    };\n  }();\n\n  Messages.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: Messages,\n    selectors: [[\"kendo-label-messages-base\"]],\n    inputs: {\n      optional: \"optional\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return Messages;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @hidden\n */\n\n\nlet LocalizedMessagesDirective = /*#__PURE__*/(() => {\n  class LocalizedMessagesDirective extends Messages {\n    constructor(service) {\n      super();\n      this.service = service;\n    }\n\n  }\n\n  LocalizedMessagesDirective.ɵfac = function LocalizedMessagesDirective_Factory(t) {\n    return new (t || LocalizedMessagesDirective)(i0.ɵɵdirectiveInject(i1.LocalizationService));\n  };\n\n  LocalizedMessagesDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: LocalizedMessagesDirective,\n    selectors: [[\"\", \"kendoLabelLocalizedMessages\", \"\"], [\"\", \"kendoFloatingLabelLocalizedMessages\", \"\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: Messages,\n      useExisting: forwardRef(() => LocalizedMessagesDirective)\n    }]), i0.ɵɵInheritDefinitionFeature]\n  });\n  return LocalizedMessagesDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Custom component messages override default component messages\n * ([see example]({% slug label_globalization %}#toc-localization)).\n */\n\n\nlet CustomMessagesComponent = /*#__PURE__*/(() => {\n  class CustomMessagesComponent extends Messages {\n    constructor(service) {\n      super();\n      this.service = service;\n    }\n\n    get override() {\n      return true;\n    }\n\n  }\n\n  CustomMessagesComponent.ɵfac = function CustomMessagesComponent_Factory(t) {\n    return new (t || CustomMessagesComponent)(i0.ɵɵdirectiveInject(i1.LocalizationService));\n  };\n\n  CustomMessagesComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CustomMessagesComponent,\n    selectors: [[\"kendo-label-messages\"], [\"kendo-floatinglabel-messages\"]],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: Messages,\n      useExisting: forwardRef(() => CustomMessagesComponent)\n    }]), i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function CustomMessagesComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return CustomMessagesComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst SHARED_DIRECTIVES = [LocalizedMessagesDirective, CustomMessagesComponent];\n/**\n * @hidden\n */\n\nlet SharedDirectivesModule = /*#__PURE__*/(() => {\n  class SharedDirectivesModule {}\n\n  SharedDirectivesModule.ɵfac = function SharedDirectivesModule_Factory(t) {\n    return new (t || SharedDirectivesModule)();\n  };\n\n  SharedDirectivesModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: SharedDirectivesModule\n  });\n  SharedDirectivesModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return SharedDirectivesModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @hidden\n */\n\n\nconst packageMetadata = {\n  name: '@progress/kendo-angular-label',\n  productName: 'Kendo UI for Angular',\n  productCodes: ['KENDOUIANGULAR', 'KENDOUICOMPLETE'],\n  publishDate: 1650441139,\n  version: '',\n  licensingDocsUrl: 'https://www.telerik.com/kendo-angular-ui/my-license/?utm_medium=product&utm_source=kendoangular&utm_campaign=kendo-ui-angular-purchase-license-keys-warning'\n};\n/**\n * @hidden\n */\n\nclass FloatingLabelInputAdapter {\n  constructor(component, formControl) {\n    this.component = component;\n\n    const isObservableOrEventEmitter = event => event instanceof Observable || event instanceof EventEmitter;\n\n    if (isObservableOrEventEmitter(component.onFocus)) {\n      this.onFocus = component.onFocus;\n    }\n\n    if (isObservableOrEventEmitter(component.autoFillStart)) {\n      this.autoFillStart = component.autoFillStart;\n    }\n\n    if (isObservableOrEventEmitter(component.autoFillEnd)) {\n      this.autoFillEnd = component.autoFillEnd;\n    }\n\n    if (isObservableOrEventEmitter(component.onBlur)) {\n      this.onBlur = component.onBlur;\n    }\n\n    if (formControl) {\n      this.onValueChange = formControl.valueChanges;\n    } else if (component.onValueChange) {\n      this.onValueChange = component.onValueChange;\n    }\n  }\n\n  get focusableId() {\n    const component = this.component;\n\n    if ('focusableId' in component) {\n      return component.focusableId;\n    } else if ('id' in component) {\n      return component.id;\n    }\n\n    return \"\";\n  }\n\n  set focusableId(value) {\n    const component = this.component;\n\n    if ('focusableId' in component) {\n      component.focusableId = value;\n    } else if ('id' in component) {\n      component.id = value;\n    }\n  }\n\n}\n\nconst isFunction = x => Object.prototype.toString.call(x) === '[object Function]';\n/**\n * Represents the [Kendo UI FloatingLabel component for Angular]({% slug overview_floatinglabel %}).\n * Provides floating labels to `input` elements.\n *\n * The FloatingLabel supports both Template and Reactive Forms and\n * [can contain Kendo UI for Angular Input components such as `kendo-combobox` and `kendo-numerictextbox`,\n * or HTML Input elements with the `kendoTextBox` directive applied]({% slug overview_floatinglabel %}#toc-implementing-floating-labels).\n *\n * @example\n * ```ts\n *\n * _@Component({\n *   selector: 'my-app',\n *   template: `\n *     <kendo-floatinglabel text=\"First name\">\n *       <input [(ngModel)]=\"name\" kendoTextBox />\n *     </kendo-floatinglabel>\n *   `\n * })\n * class AppComponent {\n *     public name = 'John';\n * }\n *\n * ```\n */\n\n\nlet FloatingLabelComponent = /*#__PURE__*/(() => {\n  class FloatingLabelComponent {\n    constructor(elementRef, renderer, changeDetectorRef, localization) {\n      this.elementRef = elementRef;\n      this.renderer = renderer;\n      this.changeDetectorRef = changeDetectorRef;\n      this.localization = localization;\n      this.hostClasses = true;\n      /**\n       * Fires after the floating label position is changed.\n       */\n\n      this.positionChange = new EventEmitter();\n      /**\n       * @hidden\n       */\n\n      this.focused = false;\n      /**\n       * @hidden\n       */\n\n      this.empty = true;\n      /**\n       * @hidden\n       */\n\n      this.invalid = false;\n      /**\n       * @hidden\n       */\n\n      this.labelId = `k-${guid()}`;\n      this.autoFillStarted = false;\n      validatePackage(packageMetadata);\n      this.direction = localization.rtl ? 'rtl' : 'ltr';\n      this.renderer.removeAttribute(this.elementRef.nativeElement, \"id\");\n    }\n    /**\n     * Represents the current floating label position.\n     */\n\n\n    get labelPosition() {\n      if (!this.empty) {\n        return 'Out';\n      }\n\n      return this.focused ? 'Out' : 'In';\n    }\n\n    get focusedClass() {\n      return this.focused;\n    }\n\n    get invalidClass() {\n      return this.invalid;\n    }\n    /**\n     * @hidden\n     */\n\n\n    ngAfterContentInit() {\n      this.validateSetup();\n      const control = new FloatingLabelInputAdapter(this.kendoInput || this.formControl.valueAccessor, this.formControl);\n      this.addHandlers(control);\n      this.setLabelFor(control);\n    }\n\n    ngAfterViewInit() {\n      if (this.kendoInput) {\n        this.setAriaLabelledby(this.kendoInput);\n      }\n    }\n    /**\n     * @hidden\n     */\n\n\n    ngOnDestroy() {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n    }\n    /**\n     * @hidden\n     */\n\n\n    textFor(key) {\n      return this.localization.get(key);\n    }\n\n    subscribe(control, eventName, handler) {\n      if (control[eventName] instanceof EventEmitter) {\n        const subscription = control[eventName].subscribe(handler);\n\n        if (!this.subscription) {\n          this.subscription = subscription;\n        } else {\n          this.subscription.add(subscription);\n        }\n      }\n    }\n\n    updateState() {\n      const empty = value => {\n        // zero is not an empty value (e.g., NumericTextBox)\n        if (value === 0 || value === false) {\n          return false;\n        } // empty arrays are an empty value (e.g., MultiSelect)\n\n\n        if (Array.isArray(value) && !value.length) {\n          return true;\n        }\n\n        return !value;\n      };\n\n      const formControl = this.formControl;\n\n      if (formControl) {\n        const valueAccessor = formControl.valueAccessor;\n\n        if (isFunction(valueAccessor.isEmpty)) {\n          this.empty = valueAccessor.isEmpty();\n        } else {\n          this.empty = empty(formControl.value);\n        }\n\n        this.invalid = formControl.invalid && (formControl.touched || formControl.dirty);\n      } else {\n        this.empty = isFunction(this.kendoInput.isEmpty) ? this.kendoInput.isEmpty() : empty(this.kendoInput.value);\n      }\n\n      if (this.empty) {\n        this.renderer.addClass(this.elementRef.nativeElement, 'k-empty');\n      } else {\n        this.renderer.removeClass(this.elementRef.nativeElement, 'k-empty');\n      }\n\n      this.changeDetectorRef.markForCheck();\n    }\n\n    setAriaLabelledby(component) {\n      const componentId = component.focusableId || component.id;\n\n      if (componentId) {\n        const focusableElement = this.elementRef.nativeElement.querySelector(`#${componentId}`);\n        this.renderer.setAttribute(focusableElement, 'aria-labelledby', this.labelId);\n      }\n    }\n\n    setLabelFor(control) {\n      const controlId = control.focusableId || control.id;\n\n      if (this.id && controlId) {\n        // input wins\n        this.id = controlId;\n      } else if (this.id) {\n        control.focusableId = this.id;\n      } else if (controlId) {\n        this.id = controlId;\n      } else {\n        const id = `k-${guid()}`;\n        control.focusableId = id;\n        this.id = id;\n      }\n    }\n\n    handleAutofill(control) {\n      this.subscribe(control, 'autoFillStart', () => {\n        this.autoFillStarted = true;\n        this.renderer.removeClass(this.elementRef.nativeElement, 'k-empty');\n      });\n      this.subscribe(control, 'autoFillEnd', () => {\n        if (this.autoFillStarted) {\n          this.autoFillStarted = false;\n\n          if (this.empty) {\n            this.renderer.addClass(this.elementRef.nativeElement, 'k-empty');\n          }\n        }\n      });\n    }\n\n    addHandlers(control) {\n      const setFocus = isFocused => () => {\n        this.focused = isFocused;\n        this.updateState();\n\n        if (!this.empty) {\n          return;\n        }\n\n        if (hasObservers(this.positionChange)) {\n          this.positionChange.emit(isFocused ? 'Out' : 'In');\n        }\n      };\n\n      this.subscribe(control, 'onFocus', setFocus(true));\n      this.subscribe(control, 'onBlur', setFocus(false));\n      this.handleAutofill(control);\n\n      const updateState = () => this.updateState();\n\n      updateState();\n      this.subscribe(control, 'onValueChange', updateState);\n    }\n\n    validateSetup() {\n      if (!this.formControl && !this.kendoInput) {\n        if (isDevMode()) {\n          throw new Error(\"The FloatingLabelComponent requires a Kendo Input component\" + \" or a forms-bound component to function properly.\");\n        }\n\n        return;\n      }\n    }\n\n  }\n\n  FloatingLabelComponent.ɵfac = function FloatingLabelComponent_Factory(t) {\n    return new (t || FloatingLabelComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.LocalizationService));\n  };\n\n  FloatingLabelComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: FloatingLabelComponent,\n    selectors: [[\"kendo-floatinglabel\"]],\n    contentQueries: function FloatingLabelComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, KendoInput, 5);\n        i0.ɵɵcontentQuery(dirIndex, NgControl, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.kendoInput = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.formControl = _t.first);\n      }\n    },\n    hostVars: 7,\n    hostBindings: function FloatingLabelComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"dir\", ctx.direction);\n        i0.ɵɵclassProp(\"k-floating-label-container\", ctx.hostClasses)(\"k-focus\", ctx.focusedClass)(\"k-state-invalid\", ctx.invalidClass);\n      }\n    },\n    inputs: {\n      labelCssStyle: \"labelCssStyle\",\n      labelCssClass: \"labelCssClass\",\n      id: \"id\",\n      text: \"text\",\n      optional: \"optional\"\n    },\n    outputs: {\n      positionChange: \"positionChange\"\n    },\n    exportAs: [\"kendoFloatingLabel\"],\n    features: [i0.ɵɵProvidersFeature([LocalizationService, {\n      provide: L10N_PREFIX,\n      useValue: 'kendo.floatinglabel'\n    }])],\n    ngContentSelectors: _c2,\n    decls: 3,\n    vars: 1,\n    consts: function () {\n      let i18n_0;\n\n      if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n        /**\n         * @desc The text for the optional segment of a FloatingLabel component\n         * @meaning kendo.floatinglabel.optional\n         */\n        const MSG_C__USERS_JBARRIT_DESKTOP_PBDEMOS_MIGRATION_TW_MIGRATEDSOLUTION_PRODUCTCATALOGSITE_PRODUCTCATALOGSITE_ANGULAR_NODE_MODULES__PROGRESS_KENDO_ANGULAR_LABEL_FESM2015_KENDO_ANGULAR_LABEL_JS_1 = goog.getMsg(\"Optional\");\n        i18n_0 = MSG_C__USERS_JBARRIT_DESKTOP_PBDEMOS_MIGRATION_TW_MIGRATEDSOLUTION_PRODUCTCATALOGSITE_PRODUCTCATALOGSITE_ANGULAR_NODE_MODULES__PROGRESS_KENDO_ANGULAR_LABEL_FESM2015_KENDO_ANGULAR_LABEL_JS_1;\n      } else {\n        i18n_0 = $localize`:kendo.floatinglabel.optional|The text for the optional segment of a FloatingLabel component:Optional`;\n      }\n\n      return [[\"kendoFloatingLabelLocalizedMessages\", \"\", \"optional\", i18n_0], [\"class\", \"k-label\", 3, \"ngClass\", \"ngStyle\", \"for\", 4, \"ngIf\"], [1, \"k-label\", 3, \"ngClass\", \"ngStyle\", \"for\"], [\"class\", \"k-label-optional\", 4, \"ngIf\"], [1, \"k-label-optional\"]];\n    },\n    template: function FloatingLabelComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementContainer(0, 0);\n        i0.ɵɵprojection(1);\n        i0.ɵɵtemplate(2, FloatingLabelComponent_label_2_Template, 3, 6, \"label\", 1);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.text);\n      }\n    },\n    directives: [LocalizedMessagesDirective, i3.NgIf, i3.NgClass, i3.NgStyle],\n    encapsulation: 2\n  });\n  return FloatingLabelComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst COMPONENT_DIRECTIVES$1 = [FloatingLabelComponent];\n/**\n * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})\n * definition for the TextBox directive.\n *\n * @example\n *\n * ```ts-no-run\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, FloatingLabelModule], // import FloatingLabel module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\n\nlet FloatingLabelModule = /*#__PURE__*/(() => {\n  class FloatingLabelModule {}\n\n  FloatingLabelModule.ɵfac = function FloatingLabelModule_Factory(t) {\n    return new (t || FloatingLabelModule)();\n  };\n\n  FloatingLabelModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: FloatingLabelModule\n  });\n  FloatingLabelModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, SharedDirectivesModule], SharedDirectivesModule]\n  });\n  return FloatingLabelModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Represents the [Kendo UI Label component for Angular]({% slug label_basic %}).\n *\n * Associates a label with input elements or components.\n *\n * @example\n * ```ts\n *\n * _@Component({\n *   selector: 'my-app',\n *   template: `\n *     <kendo-label [for]=\"input\" text=\"First name\">\n *       <input [(ngModel)]=\"name\" kendoTextBox #input />\n *     </kendo-label>\n *   `\n * })\n * class AppComponent {\n *     public name = 'John';\n * }\n *\n * ```\n */\n\n\nlet LabelComponent = /*#__PURE__*/(() => {\n  class LabelComponent {\n    constructor(elementRef, renderer, localization) {\n      this.elementRef = elementRef;\n      this.renderer = renderer;\n      this.localization = localization;\n      this.subscriptions = new Subscription();\n      validatePackage(packageMetadata);\n      this.direction = localization.rtl ? 'rtl' : 'ltr';\n      this.renderer.removeAttribute(this.elementRef.nativeElement, 'id');\n    }\n    /**\n     * @hidden\n     */\n\n\n    ngAfterContentInit() {\n      if (this.for) {\n        this.control = this.for;\n        return;\n      }\n\n      const wrappedNativeInput = getWrappedNativeInput(this.elementRef.nativeElement);\n\n      if (wrappedNativeInput) {\n        if (!wrappedNativeInput.hasAttribute('id')) {\n          this.renderer.setAttribute(wrappedNativeInput, 'id', `k-${guid()}`);\n        }\n\n        this.control = wrappedNativeInput;\n        return;\n      }\n\n      this.control = this.kendoInput;\n    }\n    /**\n     * @hidden\n     */\n\n\n    ngOnInit() {\n      this.subscriptions.add(this.localization.changes.subscribe(({\n        rtl\n      }) => {\n        this.direction = rtl ? 'rtl' : 'ltr';\n      }));\n    }\n    /**\n     * @hidden\n     */\n\n\n    ngAfterViewInit() {\n      this.labelDirective.setAriaLabelledby();\n    }\n    /**\n     * @hidden\n     */\n\n\n    ngOnDestroy() {\n      if (this.subscriptions) {\n        this.subscriptions.unsubscribe();\n      }\n    }\n    /**\n     * @hidden\n     */\n\n\n    textFor(key) {\n      return this.localization.get(key);\n    }\n\n  }\n\n  LabelComponent.ɵfac = function LabelComponent_Factory(t) {\n    return new (t || LabelComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.LocalizationService));\n  };\n\n  LabelComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: LabelComponent,\n    selectors: [[\"kendo-label\"]],\n    contentQueries: function LabelComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, KendoInput, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.kendoInput = _t.first);\n      }\n    },\n    viewQuery: function LabelComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(LabelDirective, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.labelDirective = _t.first);\n      }\n    },\n    hostVars: 1,\n    hostBindings: function LabelComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"dir\", ctx.direction);\n      }\n    },\n    inputs: {\n      text: \"text\",\n      for: \"for\",\n      optional: \"optional\"\n    },\n    exportAs: [\"kendoLabel\"],\n    features: [i0.ɵɵProvidersFeature([LocalizationService, {\n      provide: L10N_PREFIX,\n      useValue: 'kendo.label'\n    }])],\n    ngContentSelectors: _c2,\n    decls: 5,\n    vars: 5,\n    consts: function () {\n      let i18n_3;\n\n      if (typeof ngI18nClosureMode !== \"undefined\" && ngI18nClosureMode) {\n        /**\n         * @desc The text for the optional segment of a Label component\n         * @meaning kendo.label.optional\n         */\n        const MSG_C__USERS_JBARRIT_DESKTOP_PBDEMOS_MIGRATION_TW_MIGRATEDSOLUTION_PRODUCTCATALOGSITE_PRODUCTCATALOGSITE_ANGULAR_NODE_MODULES__PROGRESS_KENDO_ANGULAR_LABEL_FESM2015_KENDO_ANGULAR_LABEL_JS_4 = goog.getMsg(\"Optional\");\n        i18n_3 = MSG_C__USERS_JBARRIT_DESKTOP_PBDEMOS_MIGRATION_TW_MIGRATEDSOLUTION_PRODUCTCATALOGSITE_PRODUCTCATALOGSITE_ANGULAR_NODE_MODULES__PROGRESS_KENDO_ANGULAR_LABEL_FESM2015_KENDO_ANGULAR_LABEL_JS_4;\n      } else {\n        i18n_3 = $localize`:kendo.label.optional|The text for the optional segment of a Label component:Optional`;\n      }\n\n      return [[\"kendoLabelLocalizedMessages\", \"\", \"optional\", i18n_3], [3, \"for\"], [\"class\", \"k-label-optional\", 4, \"ngIf\"], [1, \"k-label-optional\"]];\n    },\n    template: function LabelComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementContainer(0, 0);\n        i0.ɵɵelementStart(1, \"label\", 1);\n        i0.ɵɵtext(2);\n        i0.ɵɵtemplate(3, LabelComponent_span_3_Template, 2, 1, \"span\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵprojection(4);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassProp(\"k-label-empty\", !ctx.text);\n        i0.ɵɵproperty(\"for\", ctx.control);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate1(\" \", ctx.text, \"\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.optional);\n      }\n    },\n    directives: [LocalizedMessagesDirective, LabelDirective, i3.NgIf],\n    encapsulation: 2\n  });\n  return LabelComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst COMPONENT_DIRECTIVES = [LabelDirective, LabelComponent];\n/**\n * The exported package module.\n *\n * The package exports:\n * - `LabelDirective`&mdash;The Label directive class.\n * - `LabelComponent`&mdash;The Label component class\n * - `FLoatingLabel`&mdash;The FloatingLabel component class.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the Label module\n * import { LabelModule } from '@progress/kendo-angular-label';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, LabelModule], // import Label module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\n\nlet LabelModule = /*#__PURE__*/(() => {\n  class LabelModule {}\n\n  LabelModule.ɵfac = function LabelModule_Factory(t) {\n    return new (t || LabelModule)();\n  };\n\n  LabelModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: LabelModule\n  });\n  LabelModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, SharedDirectivesModule], FloatingLabelModule, SharedDirectivesModule]\n  });\n  return LabelModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CustomMessagesComponent, FloatingLabelComponent, FloatingLabelModule, LabelComponent, LabelDirective, LabelModule, LocalizedMessagesDirective, SharedDirectivesModule };","map":null,"metadata":{},"sourceType":"module"}