{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1195);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1051:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.core\");\n    /***/\n  },\n\n  /***/\n  1195:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1051), __webpack_require__(1196), __webpack_require__(1197)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"daterangepicker\",\n        name: \"DateRangePicker\",\n        category: \"web\",\n        description: \"Date range picker.\",\n        depends: [\"core\", \"multiviewcalendar\", \"datepicker\"]\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            keys = kendo.keys,\n            Widget = ui.Widget,\n            MONTH = \"month\",\n            OPEN = \"open\",\n            CLOSE = \"close\",\n            CHANGE = \"change\",\n            DIV = \"<div />\",\n            MIN = \"min\",\n            MAX = \"max\",\n            template = kendo.template,\n            extend = $.extend,\n            ID = \"id\",\n            support = kendo.support,\n            mobileOS = support.mobileOS,\n            SELECTED = \"k-state-selected\",\n            ARIA_EXPANDED = \"aria-expanded\",\n            ARIA_DISABLED = \"aria-disabled\",\n            STATEDISABLED = \"k-disabled\",\n            DISABLED = \"disabled\",\n            READONLY = \"readonly\",\n            ARIA_HIDDEN = \"aria-hidden\",\n            ns = \".kendoDateRangePicker\",\n            CLICK = \"click\" + ns,\n            MOUSEDOWN = \"mousedown\" + ns,\n            UP = support.mouseAndTouchPresent ? kendo.applyEventMap(\"up\", ns.slice(1)) : CLICK,\n            parse = kendo.parseDate;\n\n        var DateRangeView = function (options) {\n          kendo.DateView.call(this, options);\n        };\n\n        DateRangeView.prototype = Object.create(kendo.DateView.prototype);\n\n        function preventDefault(e) {\n          e.preventDefault();\n        }\n\n        DateRangeView.prototype._calendar = function () {\n          var that = this;\n          var calendar = that.calendar;\n          var options = that.options;\n          var div;\n\n          if (!calendar) {\n            div = $(DIV).attr(ID, kendo.guid()).appendTo(that.popup.element);\n            that.calendar = calendar = new ui.MultiViewCalendar(div);\n\n            that._setOptions(options);\n\n            calendar.navigate(that._value || that._current, options.start);\n            that._range = that._range || options.range || {};\n            div.on(MOUSEDOWN, preventDefault).on(CLICK, \"td:has(.k-link)\", that._click.bind(that));\n            that.calendar.selectRange(that._range);\n          }\n        };\n\n        DateRangeView.prototype._setOptions = function (options) {\n          this.calendar.setOptions({\n            focusOnNav: false,\n            change: options.change,\n            culture: options.culture,\n            dates: options.dates,\n            depth: options.depth,\n            footer: options.footer,\n            format: options.format,\n            selectable: options.selectable,\n            max: options.max,\n            min: options.min,\n            month: options.month,\n            weekNumber: options.weekNumber,\n            start: options.start,\n            disableDates: options.disableDates,\n            range: options.range\n          });\n        };\n\n        DateRangeView.prototype.range = function (range) {\n          this._range = range;\n\n          if (this.calendar) {\n            if (!range.start && !range.end) {\n              this.calendar.selectRange(range);\n              this.calendar.rangeSelectable.clear(true);\n            } else {\n              this.calendar.selectRange(range);\n            }\n          }\n        };\n\n        DateRangeView.prototype.move = function (e) {\n          var that = this;\n          var key = e.keyCode;\n          var calendar = that.calendar;\n          var selectIsClicked = e.ctrlKey && key == keys.DOWN || key == keys.ENTER;\n          var handled = false;\n\n          if (e.altKey) {\n            if (key == keys.DOWN) {\n              that.open();\n              e.preventDefault();\n              handled = true;\n            } else if (key == keys.UP) {\n              that.close();\n              e.preventDefault();\n              handled = true;\n            }\n          } else if (that.popup.visible()) {\n            if (key == keys.ESC || selectIsClicked && calendar._cell.hasClass(SELECTED)) {\n              that.close();\n              e.preventDefault();\n              return true;\n            }\n\n            that._current = calendar._move(e, true);\n            handled = true;\n          }\n\n          return handled;\n        };\n\n        DateRangeView.prototype._click = function (e) {\n          if (mobileOS.ios || mobileOS.android && (mobileOS.browser == \"firefox\" || mobileOS.browser == \"chrome\")) {\n            if (this._range && this._range.end) {\n              this.close();\n            }\n          } else if (this._range && this._range.end && e.currentTarget.className.indexOf(\"k-range-end\") !== -1) {\n            this.close();\n          }\n        };\n\n        kendo.DateRangeView = DateRangeView;\n        var DateRangePicker = Widget.extend({\n          init: function (element, options) {\n            var that = this;\n            var div;\n            var disabled;\n            Widget.fn.init.call(that, element, options);\n            element = that.element;\n            options = that.options;\n            options.disableDates = kendo.calendar.disabled(options.disableDates);\n            options.min = parse(element.attr(\"min\")) || parse(options.min);\n            options.max = parse(element.attr(\"max\")) || parse(options.max);\n            that._initialOptions = extend({}, options);\n\n            that._buildHTML();\n\n            that._range = that.options.range;\n            that._changeTriggered = false;\n            that.dateView = new DateRangeView(extend({}, options, {\n              id: element.attr(ID),\n              anchor: that.wrapper,\n              views: 2,\n              selectable: \"range\",\n              range: that._range,\n              change: function () {\n                var range = this.selectRange();\n                that.range(range);\n                that.trigger(CHANGE);\n                that._changeTriggered = true;\n\n                that._startDateInput.trigger(CHANGE);\n\n                that._endDateInput.trigger(CHANGE);\n\n                that._changeTriggered = false;\n              },\n              close: function (e) {\n                if (that.trigger(CLOSE)) {\n                  e.preventDefault();\n                } else {\n                  that.wrapper.attr(ARIA_EXPANDED, false);\n                  div.attr(ARIA_HIDDEN, true);\n                }\n              },\n              open: function (e) {\n                if (that.trigger(OPEN)) {\n                  e.preventDefault();\n                } else {\n                  that.wrapper.attr(ARIA_EXPANDED, true);\n                  div.attr(ARIA_HIDDEN, false);\n\n                  that._updateARIA();\n                }\n              }\n            }));\n            div = that.dateView.div;\n            that._ariaTemplate = template(this.options.ARIATemplate).bind(that);\n\n            that._reset();\n\n            that.wrapper.attr({\n              role: \"combobox\",\n              \"aria-expanded\": false,\n              \"aria-owns\": that.dateView._dateViewID,\n              \"autocomplete\": \"off\"\n            });\n\n            that._inputs.on(UP + ns, that._click.bind(that)).on(\"keydown\" + ns, that._keydown.bind(that));\n\n            that._initializeDateInputs();\n\n            disabled = element.is(\"[disabled]\");\n\n            if (disabled) {\n              that.enable(false);\n            } else {\n              that.readonly(element.is(\"[readonly]\"));\n            }\n          },\n          options: {\n            name: \"DateRangePicker\",\n            labels: true,\n            footer: \"\",\n            format: \"\",\n            culture: \"\",\n            min: new Date(1900, 0, 1),\n            max: new Date(2099, 11, 31),\n            start: MONTH,\n            depth: MONTH,\n            animation: {},\n            month: {},\n            startField: \"\",\n            endField: \"\",\n            dates: [],\n            disableDates: null,\n            range: null,\n            ARIATemplate: 'Current focused #=data.valueType# is #=data.text#',\n            weekNumber: false,\n            messages: {\n              startLabel: \"Start\",\n              endLabel: \"End\"\n            },\n            size: \"medium\",\n            fillMode: \"solid\",\n            rounded: \"medium\"\n          },\n          events: [OPEN, CLOSE, CHANGE],\n          setOptions: function (options) {\n            var that = this;\n            Widget.fn.setOptions.call(that, options);\n            options = that.options;\n            options.min = parse(options.min);\n            options.max = parse(options.max);\n\n            that._inputs.off(ns);\n\n            this._initializeDateInputs();\n\n            that.dateView.setOptions(options);\n            that._range = options.range;\n          },\n          _click: function () {\n            var that = this;\n\n            if (!that._preventInputAction && !that.dateView.popup.visible()) {\n              that.dateView.open();\n            }\n          },\n          _keydown: function (e) {\n            var that = this,\n                dateView = that.dateView,\n                handled = false;\n\n            if (that._preventInputAction) {\n              e.stopImmediatePropagation();\n              return;\n            }\n\n            handled = dateView.move(e);\n\n            that._updateARIA(dateView._current);\n\n            if (handled && e.stopImmediatePropagation) {\n              e.stopImmediatePropagation();\n            }\n          },\n          _updateARIA: function (date) {\n            var that = this;\n            var calendar = that.dateView.calendar;\n\n            if (that.element && that.element.length) {\n              that._inputs.removeAttr(\"aria-describedby\");\n            }\n\n            if (calendar) {\n              if (date && !calendar._dateInViews(date)) {\n                calendar.navigate(date);\n              }\n\n              if ($.contains(that.element[0], document.activeElement)) {\n                $(document.activeElement).attr(\"aria-describedby\", calendar._updateAria(that._ariaTemplate, date));\n              }\n            }\n          },\n          _startChange: function (e) {\n            var that = this;\n            var input = e.sender;\n            var startValue = input.value();\n\n            var endValue = that._endDateInput.value();\n\n            if (that.options.disableDates(startValue)) {\n              e.sender.value(null);\n              startValue = null;\n            }\n\n            that.range({\n              start: startValue,\n              end: endValue\n            });\n\n            if (!that._changeTriggered) {\n              that.trigger(CHANGE);\n            }\n          },\n          _endChange: function (e) {\n            var that = this;\n            var input = e.sender;\n            var endValue = input.value();\n\n            var startValue = that._startDateInput.value();\n\n            if (that.options.disableDates(endValue)) {\n              e.sender.value(null);\n              endValue = null;\n            }\n\n            that.range({\n              start: startValue,\n              end: endValue\n            });\n\n            if (!that._changeTriggered) {\n              that.trigger(CHANGE);\n            }\n          },\n          _initializeDateInputs: function () {\n            var that = this;\n            var options = that.options;\n            var range = options.range || {};\n            var inputOptions = {\n              footer: options.footer,\n              format: options.format,\n              culture: options.culture,\n              min: options.min,\n              max: options.max,\n              start: options.start,\n              startField: options.startField,\n              endField: options.endField,\n              depth: options.depth,\n              animation: options.animation,\n              month: options.month,\n              dates: options.dates,\n              disableDates: options.disableDates,\n              ARIATemplate: options.ARIATemplate,\n              weekNumber: options.weekNumber,\n              size: options.size,\n              fillMode: options.fillMode,\n              rounded: options.rounded\n            };\n\n            if (that._startDateInput) {\n              that._startDateInput.destroy();\n\n              that._endDateInput.destroy();\n\n              that.wrapper.empty();\n\n              that._buildHTML();\n\n              that._inputs.on(UP + ns, that._click.bind(that)).on(\"keydown\" + ns, that._keydown.bind(that));\n            }\n\n            that._startDateInput = that._startInput.kendoDateInput(extend(true, inputOptions, {\n              value: range.start\n            })).getKendoDateInput();\n            that._endDateInput = that._endInput.kendoDateInput(extend(true, inputOptions, {\n              value: range.end\n            })).getKendoDateInput();\n            that._startChangeHandler = that._startChange.bind(that);\n\n            that._startDateInput.bind(CHANGE, that._startChangeHandler);\n\n            that._endChangeHandler = that._endChange.bind(that);\n\n            that._endDateInput.bind(CHANGE, that._endChangeHandler);\n          },\n          _buildHTML: function () {\n            var that = this;\n            var element = that.element;\n            var id;\n\n            if (!that.wrapper) {\n              that.wrapper = element.addClass(\"k-daterangepicker\");\n            }\n\n            if (that.options.labels) {\n              id = kendo.guid();\n              $('<span class=\"k-floating-label-container\"><input id=\"' + id + '\"/><label for=\"' + id + '\" class=\"k-label\">' + that.options.messages.startLabel + '</label></span>').appendTo(that.wrapper);\n              id = kendo.guid();\n              $('<span>&nbsp;</span><span class=\"k-floating-label-container\"><input id=\"' + id + '\"/><label for=\"' + id + '\" class=\"k-label\">' + that.options.messages.endLabel + '</label></span>').appendTo(that.wrapper);\n            } else {\n              $('<input/><span>&nbsp;</span><input/>').appendTo(that.wrapper);\n            }\n\n            that._startInput = that.wrapper.find(\"input\").eq(0);\n            that._endInput = that.wrapper.find(\"input\").eq(1);\n\n            if (that.options.startField !== \"\") {\n              that._startInput.attr(kendo.attr(\"bind\"), \"value: \" + that.options.startField);\n\n              that._startInput.attr(\"name\", that.options.startField);\n            }\n\n            if (that.options.endField !== \"\") {\n              that._endInput.attr(kendo.attr(\"bind\"), \"value: \" + that.options.endField);\n\n              that._endInput.attr(\"name\", that.options.endField);\n            }\n\n            that._inputs = that._startInput.add(that._endInput);\n          },\n          _option: function (option, value) {\n            var that = this,\n                options = that.options;\n\n            if (value === undefined) {\n              return options[option];\n            }\n\n            value = parse(value, options.parseFormats, options.culture);\n\n            if (!value) {\n              return;\n            }\n\n            options[option] = new Date(+value);\n            that.dateView[option](value);\n          },\n          _reset: function () {\n            var that = this,\n                element = that.element,\n                formId = element.attr(\"form\"),\n                form = formId ? $(\"#\" + formId) : element.closest(\"form\");\n\n            if (form[0]) {\n              that._resetHandler = function () {\n                that.max(that._initialOptions.max);\n                that.min(that._initialOptions.min);\n              };\n\n              that._form = form.on(\"reset\", that._resetHandler);\n            }\n          },\n          _editable: function (options) {\n            var that = this,\n                inputs = that._inputs,\n                readonly = options.readonly,\n                disable = options.disable;\n\n            if (!readonly && !disable) {\n              that.wrapper.removeClass(STATEDISABLED);\n              $.each(inputs, function (key, item) {\n                item.removeAttribute(DISABLED);\n                item.removeAttribute(READONLY);\n              });\n              inputs.attr(ARIA_DISABLED, false);\n              that._preventInputAction = false;\n            } else {\n              that.wrapper.addClass(disable ? STATEDISABLED : \"\").removeClass(disable ? \"\" : STATEDISABLED);\n              inputs.attr(DISABLED, disable).attr(READONLY, readonly).attr(ARIA_DISABLED, disable);\n              that._preventInputAction = true;\n            }\n          },\n          destroy: function () {\n            var that = this;\n\n            if (that._startDateInput) {\n              that._startDateInput.unbind(CHANGE, that._startChangeHandler);\n\n              that._startDateInput.destroy();\n\n              that._startChangeHandler = null;\n            }\n\n            if (that._endDateInput) {\n              that._endDateInput.unbind(CHANGE, that._endChangeHandler);\n\n              that._endDateInput.destroy();\n\n              that._endChangeHandler = null;\n            }\n\n            if (that._form) {\n              that._form.off(\"reset\", that._resetHandler);\n            }\n\n            that._inputs.off(ns);\n\n            that._inputs = null;\n            that.dateView.destroy();\n            that.element.off(ns);\n            Widget.fn.destroy.call(that);\n          },\n          range: function (range) {\n            var that = this;\n\n            if (range === undefined) {\n              return that._range;\n            }\n\n            that._range = range;\n            that.dateView.range({\n              start: null,\n              end: null\n            });\n\n            if (!range) {\n              that._startDateInput.value(null);\n\n              that._endDateInput.value(null);\n            }\n\n            that._startDateInput.value(range.start ? range.start : null);\n\n            that._endDateInput.value(range.end ? range.end : null);\n\n            if (range.start && !range.end) {\n              that.dateView.range({\n                start: range.start,\n                end: null\n              });\n            } else if (range.start && range.end && +range.start <= +range.end) {\n              that.dateView.range({\n                start: range.start,\n                end: range.end\n              });\n            }\n          },\n          open: function () {\n            this.dateView.open();\n          },\n          close: function () {\n            this.dateView.close();\n          },\n          min: function (value) {\n            return this._option(MIN, value);\n          },\n          max: function (value) {\n            return this._option(MAX, value);\n          },\n          readonly: function (readonly) {\n            this._startDateInput.readonly(readonly);\n\n            this._endDateInput.readonly(readonly);\n\n            this._editable({\n              readonly: readonly === undefined ? true : readonly,\n              disable: false\n            });\n          },\n          enable: function (enable) {\n            this._startDateInput.enable(enable);\n\n            this._endDateInput.enable(enable);\n\n            if (!enable) {\n              this.close();\n            }\n\n            this._editable({\n              readonly: false,\n              disable: !(enable = enable === undefined ? true : enable)\n            });\n          }\n        });\n        kendo.ui.plugin(DateRangePicker);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1196:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.multiviewcalendar\");\n    /***/\n  },\n\n  /***/\n  1197:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.datepicker\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}