{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1692);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  8:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.validator\");\n    /***/\n  },\n\n  /***/\n  20:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.core\");\n    /***/\n  },\n\n  /***/\n  1665:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.binder\");\n    /***/\n  },\n\n  /***/\n  1692:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(20), __webpack_require__(1665), __webpack_require__(8)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function (kendo) {\n        /* jshint eqnull:true */\n\n        /* jshint latedef: false */\n\n        /* jshint multistr: true */\n        var $ = kendo.jQuery;\n        var ObservableObject = kendo.data.ObservableObject;\n        var MESSAGES = kendo.spreadsheet.messages.dialogs = {\n          apply: \"Apply\",\n          save: \"Save\",\n          cancel: \"Cancel\",\n          remove: \"Remove\",\n          retry: \"Retry\",\n          revert: \"Revert\",\n          okText: \"OK\",\n          formatCellsDialog: {\n            title: \"Format\",\n            categories: {\n              number: \"Number\",\n              currency: \"Currency\",\n              date: \"Date\"\n            }\n          },\n          fontFamilyDialog: {\n            title: \"Font\"\n          },\n          fontSizeDialog: {\n            title: \"Font size\"\n          },\n          bordersDialog: {\n            title: \"Borders\"\n          },\n          alignmentDialog: {\n            title: \"Alignment\",\n            buttons: {\n              justtifyLeft: \"Align left\",\n              justifyCenter: \"Center\",\n              justifyRight: \"Align right\",\n              justifyFull: \"Justify\",\n              alignTop: \"Align top\",\n              alignMiddle: \"Align middle\",\n              alignBottom: \"Align bottom\"\n            }\n          },\n          mergeDialog: {\n            title: \"Merge cells\",\n            buttons: {\n              mergeCells: \"Merge all\",\n              mergeHorizontally: \"Merge horizontally\",\n              mergeVertically: \"Merge vertically\",\n              unmerge: \"Unmerge\"\n            }\n          },\n          freezeDialog: {\n            title: \"Freeze panes\",\n            buttons: {\n              freezePanes: \"Freeze panes\",\n              freezeRows: \"Freeze rows\",\n              freezeColumns: \"Freeze columns\",\n              unfreeze: \"Unfreeze panes\"\n            }\n          },\n          confirmationDialog: {\n            text: \"Are you sure you want to remove this sheet?\",\n            title: \"Sheet remove\"\n          },\n          validationDialog: {\n            title: \"Data Validation\",\n            hintMessage: \"Please enter a valid {0} value {1}.\",\n            hintTitle: \"Validation {0}\",\n            criteria: {\n              any: \"Any value\",\n              number: \"Number\",\n              text: \"Text\",\n              date: \"Date\",\n              custom: \"Custom Formula\",\n              list: \"List\"\n            },\n            comparers: {\n              greaterThan: \"greater than\",\n              lessThan: \"less than\",\n              between: \"between\",\n              notBetween: \"not between\",\n              equalTo: \"equal to\",\n              notEqualTo: \"not equal to\",\n              greaterThanOrEqualTo: \"greater than or equal to\",\n              lessThanOrEqualTo: \"less than or equal to\"\n            },\n            comparerMessages: {\n              greaterThan: \"greater than {0}\",\n              lessThan: \"less than {0}\",\n              between: \"between {0} and {1}\",\n              notBetween: \"not between {0} and {1}\",\n              equalTo: \"equal to {0}\",\n              notEqualTo: \"not equal to {0}\",\n              greaterThanOrEqualTo: \"greater than or equal to {0}\",\n              lessThanOrEqualTo: \"less than or equal to {0}\",\n              custom: \"that satisfies the formula: {0}\"\n            },\n            labels: {\n              criteria: \"Criteria\",\n              comparer: \"Comparer\",\n              min: \"Min\",\n              max: \"Max\",\n              value: \"Value\",\n              start: \"Start\",\n              end: \"End\",\n              onInvalidData: \"On invalid data\",\n              rejectInput: \"Reject input\",\n              showWarning: \"Show warning\",\n              showHint: \"Show hint\",\n              hintTitle: \"Hint title\",\n              hintMessage: \"Hint message\",\n              ignoreBlank: \"Ignore blank\",\n              showListButton: \"Display button to show list\",\n              showCalendarButton: \"Display button to show calendar\"\n            },\n            placeholders: {\n              typeTitle: \"Type title\",\n              typeMessage: \"Type message\"\n            }\n          },\n          exportAsDialog: {\n            title: \"Export...\",\n            defaultFileName: \"Workbook\",\n            xlsx: {\n              description: \"Excel Workbook (.xlsx)\"\n            },\n            pdf: {\n              description: \"Portable Document Format (.pdf)\",\n              area: {\n                workbook: \"Entire Workbook\",\n                sheet: \"Active Sheet\",\n                selection: \"Selection\"\n              },\n              paper: {\n                a2: \"A2 (420 mm × 594 mm)\",\n                a3: \"A3 (297 mm x 420 mm)\",\n                a4: \"A4 (210 mm x 297 mm)\",\n                a5: \"A5 (148 mm x 210 mm)\",\n                b3: \"B3 (353 mm × 500 mm)\",\n                b4: \"B4 (250 mm x 353 mm)\",\n                b5: \"B5 (176 mm x 250 mm)\",\n                folio: 'Folio (8.5\" x 13\")',\n                legal: 'Legal (8.5\" x 14\")',\n                letter: 'Letter (8.5\" x 11\")',\n                tabloid: 'Tabloid (11\" x 17\")',\n                executive: 'Executive (7.25\" x 10.5\")'\n              },\n              margin: {\n                normal: \"Normal\",\n                narrow: \"Narrow\",\n                wide: \"Wide\"\n              }\n            },\n            labels: {\n              scale: \"Scale\",\n              fit: \"Fit to page\",\n              fileName: \"File name\",\n              saveAsType: \"Save as type\",\n              exportArea: \"Export\",\n              paperSize: \"Paper size\",\n              margins: \"Margins\",\n              orientation: \"Orientation\",\n              print: \"Print\",\n              guidelines: \"Guidelines\",\n              center: \"Center\",\n              horizontally: \"Horizontally\",\n              vertically: \"Vertically\"\n            }\n          },\n          modifyMergedDialog: {\n            errorMessage: \"Cannot change part of a merged cell.\"\n          },\n          rangeDisabledDialog: {\n            errorMessage: \"Destination range contains disabled cells.\"\n          },\n          intersectsArrayDialog: {\n            errorMessage: \"You cannot alter part of an array\"\n          },\n          incompatibleRangesDialog: {\n            errorMessage: \"Incompatible ranges\"\n          },\n          noFillDirectionDialog: {\n            errorMessage: \"Cannot determine fill direction\"\n          },\n          duplicateSheetNameDialog: {\n            errorMessage: \"Duplicate sheet name\"\n          },\n          overflowDialog: {\n            errorMessage: \"Cannot paste, because the copy area and the paste area are not the same size and shape.\"\n          },\n          useKeyboardDialog: {\n            title: \"Copying and pasting\",\n            errorMessage: \"These actions cannot be invoked through the menu. Please use the keyboard shortcuts instead:\",\n            labels: {\n              forCopy: \"for copy\",\n              forCut: \"for cut\",\n              forPaste: \"for paste\"\n            }\n          },\n          unsupportedSelectionDialog: {\n            errorMessage: \"That action cannot be performed on multiple selection.\"\n          },\n          linkDialog: {\n            title: \"Hyperlink\",\n            labels: {\n              text: \"Text\",\n              url: \"Address\",\n              removeLink: \"Remove link\"\n            }\n          },\n          insertCommentDialog: {\n            title: \"Insert comment\",\n            labels: {\n              comment: \"Comment\",\n              removeComment: \"Remove comment\"\n            }\n          },\n          insertImageDialog: {\n            title: \"Insert image\",\n            info: \"Drag an image here, or click to select\",\n            typeError: \"Please select a JPEG, PNG or GIF image\"\n          }\n        };\n        var registry = {};\n        kendo.spreadsheet.dialogs = {\n          register: function (name, dialogClass) {\n            registry[name] = dialogClass;\n          },\n          registered: function (name) {\n            return !!registry[name];\n          },\n          create: function (name, options) {\n            var dialogClass = registry[name];\n\n            if (dialogClass) {\n              return new dialogClass(options);\n            }\n          }\n        };\n        var SpreadsheetDialog = kendo.spreadsheet.SpreadsheetDialog = kendo.Observable.extend({\n          init: function (options) {\n            kendo.Observable.fn.init.call(this, options);\n            this.options = translate($.extend(true, {}, this.options, options));\n            this.bind(this.events, options);\n          },\n          events: [\"close\", \"activate\"],\n          options: {\n            autoFocus: true\n          },\n          dialog: function () {\n            if (!this._dialog) {\n              var options = {\n                autoFocus: false,\n                scrollable: false,\n                resizable: false,\n                modal: true,\n                visible: false,\n                width: this.options.width || 320,\n                title: this.options.title,\n                open: function () {\n                  this.center();\n                },\n                close: this._onDialogClose.bind(this),\n                activate: this._onDialogActivate.bind(this),\n                deactivate: this._onDialogDeactivate.bind(this)\n              };\n              this._dialog = $(\"<div class='k-spreadsheet-window k-action-window k-popup-edit-form' />\").addClass(this.options.className || \"\").append(kendo.template(this.options.template)({\n                messages: kendo.spreadsheet.messages.dialogs || MESSAGES,\n                ns: kendo.ns,\n                // this is for ImportErrorDialog.  ugly that\n                // we need this line here, but I couldn't\n                // figure out a better way\n                errors: this.options.errors\n              })).kendoWindow(options).data(\"kendoWindow\");\n            }\n\n            return this._dialog;\n          },\n          _onDialogClose: function () {\n            this.trigger(\"close\", {\n              action: this._action\n            });\n          },\n          _onDialogActivate: function () {\n            this.trigger(\"activate\");\n          },\n          _onDialogDeactivate: function () {\n            this.trigger(\"deactivate\");\n            this.destroy();\n          },\n          destroy: function () {\n            if (this._dialog) {\n              this._dialog.destroy();\n\n              this._dialog = null;\n            }\n          },\n          open: function () {\n            this.dialog().open();\n            this.dialog().element.find(\".k-button-solid-primary\").trigger(\"focus\");\n          },\n          apply: function () {\n            this.close();\n          },\n          close: function () {\n            this._action = \"close\";\n            this.dialog().close();\n          }\n        });\n\n        function formattedValue(value, format) {\n          return kendo.spreadsheet.formatting.text(value, format);\n        }\n\n        var FormatCellsViewModel = kendo.spreadsheet.FormatCellsViewModel = ObservableObject.extend({\n          init: function (options) {\n            ObservableObject.fn.init.call(this, options);\n            this.useCategory(this.category);\n          },\n          useCategory: function (category) {\n            var type = category && category.type || \"number\";\n            var formatCurrency = type == \"currency\";\n            this.category = category;\n            this.set(\"showCurrencyFilter\", formatCurrency && this.currencies.length > 1);\n\n            if (!formatCurrency) {\n              this.set(\"formats\", this.allFormats[type + \"Formats\"]);\n            } else {\n              this.currency(this.currencies[0]);\n            }\n\n            this.useFirstFormat();\n          },\n          useFirstFormat: function () {\n            if (this.formats.length) {\n              this.set(\"format\", this.formats[0].value);\n            }\n          },\n          currency: function (currency) {\n            if (currency !== undefined) {\n              this._currency = currency;\n              var info = currency.value;\n              var formats = [{\n                currency: info,\n                decimals: true\n              }, {\n                currency: info,\n                decimals: true,\n                iso: true\n              }, {\n                currency: info,\n                decimals: false\n              }];\n              formats = formats.map(function (format) {\n                format = FormatCellsViewModel.convert.currency(format);\n                return {\n                  value: format,\n                  name: formattedValue(1000, format)\n                };\n              });\n              this.set(\"formats\", formats);\n              this.useFirstFormat();\n            }\n\n            return this._currency || this.currencies[0];\n          },\n          categoryFilter: function (category) {\n            if (category !== undefined) {\n              this.useCategory(category);\n            }\n\n            return this.category;\n          },\n          preview: function () {\n            var format = this.get(\"format\");\n            var value = this.value || 0;\n\n            if (format && format.length) {\n              return formattedValue(value, format);\n            } else {\n              return value;\n            }\n          }\n        });\n        FormatCellsViewModel.convert = {\n          currency: function (options) {\n            function repeat(token, n) {\n              return new Array(n + 1).join(token);\n            } // convert culture info to spreadsheet format\n\n\n            var info = options.currency;\n            var format = info.pattern[1];\n\n            if (options.decimals) {\n              format = format.replace(/n/g, \"n\" + info[\".\"] + repeat(\"0\", info.decimals));\n            }\n\n            if (options.iso) {\n              format = '\"' + info.abbr + '\" ' + format.replace(/\\s*\\$\\s*/g, \"\");\n            } else {\n              format = format.replace(/\\$/g, JSON.stringify(info.symbol));\n            }\n\n            format = format.replace(/n/g, \"?\");\n            return format;\n          },\n          date: function (format) {\n            if (/T|Z/.test(format)) {\n              return \"\";\n            }\n\n            return format.toLowerCase().replace(/tt/g, \"AM/PM\").replace(/'/g, '\"');\n          }\n        };\n\n        function uniqueBy(field, array) {\n          var result = [];\n          var values = [];\n\n          for (var i = 0; i < array.length; i++) {\n            if ($.inArray(array[i][field], values) == -1) {\n              result.push(array[i]);\n              values.push(array[i][field]);\n            }\n          }\n\n          return result;\n        }\n\n        var FormatCellsDialog = SpreadsheetDialog.extend({\n          init: function (options) {\n            var messages = kendo.spreadsheet.messages.dialogs.formatCellsDialog || MESSAGES;\n            var defaultOptions = {\n              title: messages.title,\n              categories: [{\n                type: \"number\",\n                name: messages.categories.number\n              }, {\n                type: \"currency\",\n                name: messages.categories.currency\n              }, {\n                type: \"date\",\n                name: messages.categories.date\n              }]\n            };\n            SpreadsheetDialog.fn.init.call(this, $.extend(defaultOptions, options));\n\n            this._generateFormats();\n          },\n          options: {\n            className: \"k-spreadsheet-format-cells\",\n            template: \"<div class='k-edit-form-container'>\" + \"<div class='k-root-tabs' data-#:ns#role='tabstrip' \" + \"data-#:ns#text-field='name' \" + \"data-#:ns#bind='source: categories, value: categoryFilter' \" + \"data-#:ns#animation='false'></div>\" + \"<div class='k-spreadsheet-preview' data-#:ns#bind='text: preview'></div>\" + \"<script type='text/x-kendo-template' id='format-item-template'>\" + \"\\\\#: data.name \\\\#\" + \"</script>\" + \"<select data-#:ns#role='dropdownlist' class='k-format-filter' \" + \"data-#:ns#text-field='description' \" + \"data-#:ns#value-field='value.name' \" + \"data-#:ns#bind='visible: showCurrencyFilter, value: currency, source: currencies'></select>\" + \"<ul data-#:ns#role='staticlist' tabindex='0' \" + \"id='formats-list' \" + \"aria-label='formats list' \" + \"class='k-list k-reset' \" + \"data-#:ns#template='format-item-template' \" + \"data-#:ns#value-primitive='true' \" + \"data-#:ns#value-field='value' \" + \"data-#:ns#bind='source: formats, value: format'></ul>\" + \"<div class='k-action-buttons'>\" + \"<button class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary' data-#:ns#bind='click: apply'><span class='k-button-text'>#: messages.apply #</span></button>\" + \"<button class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-base' data-#:ns#bind='click: close'><span class='k-button-text'>#: messages.cancel #</span></button>\" + \"</div>\" + \"</div>\"\n          },\n          _generateFormats: function () {\n            var options = this.options;\n\n            if (!options.currencies) {\n              options.currencies = FormatCellsDialog.currenciesFrom(kendo.cultures);\n            }\n\n            if (!options.numberFormats) {\n              options.numberFormats = [{\n                value: \"#.00%\",\n                name: \"100.00%\"\n              }, {\n                value: \"#%\",\n                name: \"100%\"\n              }, {\n                value: \"#.00\",\n                name: \"1024.00\"\n              }, {\n                value: \"#,###.00\",\n                name: \"1,024.00\"\n              }];\n            }\n\n            if (!options.dateFormats) {\n              var calendarPatterns = kendo.cultures.current.calendars.standard.patterns;\n              options.dateFormats = uniqueBy(\"value\", $.map(calendarPatterns, function (format) {\n                format = FormatCellsViewModel.convert.date(format);\n\n                if (!format) {\n                  return;\n                }\n\n                return {\n                  value: format,\n                  name: formattedValue(34567.7678, format)\n                };\n              }));\n            }\n          },\n          open: function (range) {\n            var options = this.options;\n            var value = range.value();\n            var categories = options.categories.slice(0);\n            var element;\n            this.viewModel = new FormatCellsViewModel({\n              currencies: options.currencies.slice(0),\n              allFormats: {\n                numberFormats: options.numberFormats.slice(0),\n                dateFormats: options.dateFormats.slice(0)\n              },\n              categories: categories,\n              format: range.format(),\n              category: value instanceof Date ? categories[2] : categories[0],\n              apply: this.apply.bind(this),\n              close: this.close.bind(this),\n              value: value\n            });\n            SpreadsheetDialog.fn.open.call(this);\n            element = this.dialog().element;\n            kendo.bind(element, this.viewModel);\n            var currencyFilter = element.find(\"select.k-format-filter\").data(\"kendoDropDownList\");\n\n            if (options.currencies.length > 10) {\n              currencyFilter.setOptions({\n                filter: \"contains\"\n              });\n            }\n\n            element.find(kendo.roleSelector(\"staticlist\")).parent().addClass(\"k-list-wrapper\");\n            element.find(\".k-tabstrip-item\").attr(\"aria-controls\", \"formats-list\");\n          },\n          apply: function () {\n            var format = this.viewModel.format;\n            SpreadsheetDialog.fn.apply.call(this);\n            this.trigger(\"action\", {\n              command: \"PropertyChangeCommand\",\n              options: {\n                property: \"format\",\n                value: format\n              }\n            });\n          }\n        });\n\n        FormatCellsDialog.currenciesFrom = function (cultures) {\n          return uniqueBy(\"description\", $.map(cultures, function (culture, name) {\n            if (!/-/.test(name)) {\n              return;\n            }\n\n            var currency = culture.numberFormat.currency;\n            var description = kendo.format(\"{0} ({1}, {2})\", currency.name, currency.abbr, currency.symbol);\n            return {\n              description: description,\n              value: currency\n            };\n          }));\n        };\n\n        kendo.spreadsheet.dialogs.register(\"formatCells\", FormatCellsDialog);\n        kendo.spreadsheet.dialogs.FormatCellsDialog = FormatCellsDialog;\n        var MessageDialog = SpreadsheetDialog.extend({\n          options: {\n            className: \"k-spreadsheet-message\",\n            title: \"\",\n            messageId: \"\",\n            text: \"\",\n            template: \"<div class='k-spreadsheet-message-content' data-#:ns#bind='text: text'></div>\" + \"<div class='k-action-buttons'>\" + \"<button class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary' data-#:ns#bind='click: close'>\" + \"<span class='k-button-text'>#= messages.okText #</span>\" + \"</button>\" + \"</div>\"\n          },\n          open: function () {\n            SpreadsheetDialog.fn.open.call(this);\n            var options = this.options;\n            var text = options.text;\n\n            if (options.messageId) {\n              text = kendo.getter(options.messageId, true)(kendo.spreadsheet.messages.dialogs);\n            }\n\n            kendo.bind(this.dialog().element, {\n              text: text,\n              close: this.close.bind(this)\n            });\n          }\n        });\n        kendo.spreadsheet.dialogs.register(\"message\", MessageDialog);\n        var ConfirmationDialog = SpreadsheetDialog.extend({\n          init: function (options) {\n            var messages = kendo.spreadsheet.messages.dialogs.confirmationDialog || MESSAGES;\n            var defaultOptions = {\n              title: messages.title,\n              text: messages.text\n            };\n            SpreadsheetDialog.fn.init.call(this, $.extend(defaultOptions, options));\n          },\n          options: {\n            className: \"k-spreadsheet-message\",\n            messageId: \"\",\n            template: \"<div class='k-spreadsheet-message-content' data-#:ns#bind='text: text'></div>\" + \"<div class='k-action-buttons'>\" + \"<button class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary' data-#:ns#bind='click: confirm'>\" + \"<span class='k-button-text'>#= messages.okText #</span>\" + \"</button>\" + \"<button class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-base' data-#:ns#bind='click: cancel'>\" + \"<span class='k-button-text'>#= messages.cancel #</span>\" + \"</button>\" + \"</div>\"\n          },\n          open: function () {\n            SpreadsheetDialog.fn.open.call(this);\n            var options = this.options;\n            var text = options.text;\n\n            if (options.messageId) {\n              text = kendo.getter(options.messageId, true)(kendo.spreadsheet.messages.dialogs);\n            }\n\n            kendo.bind(this.dialog().element, {\n              text: text,\n              confirm: this.confirm.bind(this),\n              cancel: this.close.bind(this)\n            });\n          },\n          isConfirmed: function () {\n            return this._confirmed;\n          },\n          confirm: function () {\n            this._confirmed = true;\n            this.close();\n          }\n        });\n        kendo.spreadsheet.dialogs.register(\"confirmation\", ConfirmationDialog);\n        var ValidationErrorDialog = SpreadsheetDialog.extend({\n          options: {\n            className: \"k-spreadsheet-message\",\n            title: \"\",\n            messageId: \"\",\n            text: \"\",\n            template: \"<div class='k-spreadsheet-message-content' data-#:ns#bind='text: text'></div>\" + \"<div class='k-action-buttons'>\" + \"<button class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary' data-#:ns#bind='click: retry'>\" + \"<span class='k-button-text'>#= messages.retry #</span>\" + \"</button>\" + \"<button class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-base' data-#:ns#bind='click: cancel'>\" + \"<span class='k-button-text'>#= messages.cancel #</span>\" + \"</button>\" + \"</div>\"\n          },\n          open: function () {\n            SpreadsheetDialog.fn.open.call(this);\n            var options = this.options;\n            var text = options.text;\n\n            if (options.messageId) {\n              text = kendo.getter(options.messageId, true)(kendo.spreadsheet.messages.dialogs);\n            }\n\n            kendo.bind(this.dialog().element, {\n              text: text,\n              retry: this.retry.bind(this),\n              cancel: this.close.bind(this)\n            });\n          },\n          retry: function () {\n            this._retry = true;\n            this.close();\n          }\n        });\n        kendo.spreadsheet.dialogs.register(\"validationError\", ValidationErrorDialog);\n        var FontFamilyDialog = SpreadsheetDialog.extend({\n          init: function (options) {\n            var messages = kendo.spreadsheet.messages.dialogs.fontFamilyDialog || MESSAGES;\n            SpreadsheetDialog.fn.init.call(this, $.extend({\n              title: messages.title\n            }, options));\n\n            this._list();\n          },\n          options: {\n            template: \"<ul class='k-list k-reset'></ul>\"\n          },\n          _list: function () {\n            var ul = this.dialog().element.find(\"ul\");\n            var fonts = this.options.fonts;\n            var defaultFont = this.options.defaultFont;\n            this.list = new kendo.ui.StaticList(ul, {\n              dataSource: new kendo.data.DataSource({\n                data: fonts\n              }),\n              template: \"#: data #\",\n              value: defaultFont,\n              change: this.apply.bind(this)\n            });\n            this.list.dataSource.fetch();\n          },\n          apply: function (e) {\n            SpreadsheetDialog.fn.apply.call(this);\n            this.trigger(\"action\", {\n              command: \"PropertyChangeCommand\",\n              options: {\n                property: \"fontFamily\",\n                value: e.sender.value()[0]\n              }\n            });\n          }\n        });\n        kendo.spreadsheet.dialogs.register(\"fontFamily\", FontFamilyDialog);\n        var FontSizeDialog = SpreadsheetDialog.extend({\n          init: function (options) {\n            var messages = kendo.spreadsheet.messages.dialogs.fontSizeDialog || MESSAGES;\n            SpreadsheetDialog.fn.init.call(this, $.extend({\n              title: messages.title\n            }, options));\n\n            this._list();\n          },\n          options: {\n            template: \"<ul class='k-list k-reset'></ul>\"\n          },\n          _list: function () {\n            var ul = this.dialog().element.find(\"ul\");\n            var sizes = this.options.sizes;\n            var defaultSize = this.options.defaultSize;\n            this.list = new kendo.ui.StaticList(ul, {\n              dataSource: new kendo.data.DataSource({\n                data: sizes\n              }),\n              template: \"#: data #\",\n              value: defaultSize,\n              change: this.apply.bind(this)\n            });\n            this.list.dataSource.fetch();\n          },\n          apply: function (e) {\n            SpreadsheetDialog.fn.apply.call(this);\n            this.trigger(\"action\", {\n              command: \"PropertyChangeCommand\",\n              options: {\n                property: \"fontSize\",\n                value: kendo.parseInt(e.sender.value()[0])\n              }\n            });\n          }\n        });\n        kendo.spreadsheet.dialogs.register(\"fontSize\", FontSizeDialog);\n        var BordersDialog = SpreadsheetDialog.extend({\n          init: function (options) {\n            var messages = kendo.spreadsheet.messages.dialogs.bordersDialog || MESSAGES;\n            SpreadsheetDialog.fn.init.call(this, $.extend({\n              title: messages.title\n            }, options));\n            this.element = this.dialog().element;\n\n            this._borderPalette();\n\n            this.viewModel = kendo.observable({\n              apply: this.apply.bind(this),\n              close: this.close.bind(this)\n            });\n            kendo.bind(this.element.find(\".k-action-buttons\"), this.viewModel);\n          },\n          options: {\n            width: 177,\n            template: \"<div></div>\" + \"<div class='k-action-buttons'>\" + \"<button class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary' data-#:ns#bind='click: apply'><span class='k-button-text'>#: messages.apply #</span></button>\" + \"<button class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-base' data-#:ns#bind='click: close'><span class='k-button-text'>#: messages.cancel #</span></button>\" + \"</div>\"\n          },\n          apply: function () {\n            SpreadsheetDialog.fn.apply.call(this);\n            var state = this.value();\n            this.trigger(\"action\", {\n              command: \"BorderChangeCommand\",\n              options: {\n                border: state.type,\n                style: {\n                  size: 1,\n                  color: state.color\n                }\n              }\n            });\n          },\n          _borderPalette: function () {\n            var element = this.dialog().element.find(\"div\").first();\n            this.borderPalette = new kendo.spreadsheet.BorderPalette(element, {\n              change: this.value.bind(this)\n            });\n          },\n          value: function (state) {\n            if (state === undefined) {\n              return this._state;\n            } else {\n              this._state = state;\n            }\n          }\n        });\n        kendo.spreadsheet.dialogs.register(\"borders\", BordersDialog);\n        var ColorChooser = SpreadsheetDialog.extend({\n          init: function (options) {\n            SpreadsheetDialog.fn.init.call(this, options);\n            this.element = this.dialog().element;\n            this.property = options.property;\n            this.options.title = options.title;\n            this.viewModel = kendo.observable({\n              apply: this.apply.bind(this),\n              close: this.close.bind(this)\n            });\n            kendo.bind(this.element.find(\".k-action-buttons\"), this.viewModel);\n          },\n          options: {\n            template: \"<div></div>\" + \"<div class='k-action-buttons'>\" + \"<button class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary' data-#:ns#bind='click: apply'><span class='k-button-text'>#: messages.apply #</span></button>\" + \"<button class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-base' data-#:ns#bind='click: close'><span class='k-button-text'>#: messages.cancel #</span></button>\" + \"</div>\"\n          },\n          apply: function () {\n            SpreadsheetDialog.fn.apply.call(this);\n            this.trigger(\"action\", {\n              command: \"PropertyChangeCommand\",\n              options: {\n                property: this.property,\n                value: this.value()\n              }\n            });\n          },\n          value: function (e) {\n            if (e === undefined) {\n              return this._value;\n            } else {\n              this._value = e.value;\n            }\n          }\n        });\n        var ColorPickerDialog = ColorChooser.extend({\n          init: function (options) {\n            options.width = 177;\n            ColorChooser.fn.init.call(this, options);\n\n            this._colorPalette();\n          },\n          _colorPalette: function () {\n            var element = this.dialog().element.find(\"div\").first();\n            this.colorPalette = element.kendoColorPalette({\n              palette: [//metro palette\n              \"#ffffff\", \"#000000\", \"#d6ecff\", \"#4e5b6f\", \"#7fd13b\", \"#ea157a\", \"#feb80a\", \"#00addc\", \"#738ac8\", \"#1ab39f\", \"#f2f2f2\", \"#7f7f7f\", \"#a7d6ff\", \"#d9dde4\", \"#e5f5d7\", \"#fad0e4\", \"#fef0cd\", \"#c5f2ff\", \"#e2e7f4\", \"#c9f7f1\", \"#d8d8d8\", \"#595959\", \"#60b5ff\", \"#b3bcca\", \"#cbecb0\", \"#f6a1c9\", \"#fee29c\", \"#8be6ff\", \"#c7d0e9\", \"#94efe3\", \"#bfbfbf\", \"#3f3f3f\", \"#007dea\", \"#8d9baf\", \"#b2e389\", \"#f272af\", \"#fed46b\", \"#51d9ff\", \"#aab8de\", \"#5fe7d5\", \"#a5a5a5\", \"#262626\", \"#003e75\", \"#3a4453\", \"#5ea226\", \"#af0f5b\", \"#c58c00\", \"#0081a5\", \"#425ea9\", \"#138677\", \"#7f7f7f\", \"#0c0c0c\", \"#00192e\", \"#272d37\", \"#3f6c19\", \"#750a3d\", \"#835d00\", \"#00566e\", \"#2c3f71\", \"#0c594f\"],\n              change: this.value.bind(this)\n            }).data(\"kendoColorPalette\");\n          }\n        });\n        kendo.spreadsheet.dialogs.register(\"colorPicker\", ColorPickerDialog);\n        var CustomColorDialog = ColorChooser.extend({\n          init: function (options) {\n            options.width = 268;\n            ColorChooser.fn.init.call(this, options);\n            this.dialog().setOptions({\n              animation: false\n            });\n            this.dialog().one(\"activate\", this._colorPicker.bind(this));\n          },\n          _colorPicker: function () {\n            var element = this.dialog().element.find(\"div\").first();\n            this.colorPicker = element.kendoFlatColorPicker({\n              change: this.value.bind(this)\n            }).data(\"kendoFlatColorPicker\");\n          }\n        });\n        kendo.spreadsheet.dialogs.register(\"customColor\", CustomColorDialog);\n        var AlignmentDialog = SpreadsheetDialog.extend({\n          init: function (options) {\n            var messages = kendo.spreadsheet.messages.dialogs.alignmentDialog || MESSAGES;\n            var defaultOptions = {\n              title: messages.title,\n              buttons: [{\n                property: \"textAlign\",\n                value: \"left\",\n                iconClass: \"align-left\",\n                text: messages.buttons.justtifyLeft\n              }, {\n                property: \"textAlign\",\n                value: \"center\",\n                iconClass: \"align-center\",\n                text: messages.buttons.justifyCenter\n              }, {\n                property: \"textAlign\",\n                value: \"right\",\n                iconClass: \"align-right\",\n                text: messages.buttons.justifyRight\n              }, {\n                property: \"textAlign\",\n                value: \"justify\",\n                iconClass: \"align-justify\",\n                text: messages.buttons.justifyFull\n              }, {\n                property: \"verticalAlign\",\n                value: \"top\",\n                iconClass: \"align-top\",\n                text: messages.buttons.alignTop\n              }, {\n                property: \"verticalAlign\",\n                value: \"center\",\n                iconClass: \"align-middle\",\n                text: messages.buttons.alignMiddle\n              }, {\n                property: \"verticalAlign\",\n                value: \"bottom\",\n                iconClass: \"align-bottom\",\n                text: messages.buttons.alignBottom\n              }]\n            };\n            SpreadsheetDialog.fn.init.call(this, $.extend(defaultOptions, options));\n\n            this._list();\n          },\n          options: {\n            template: \"<ul class='k-list k-reset'></ul>\"\n          },\n          _list: function () {\n            var ul = this.dialog().element.find(\"ul\");\n            this.list = new kendo.ui.StaticList(ul, {\n              dataSource: new kendo.data.DataSource({\n                data: this.options.buttons\n              }),\n              template: \"<a role='button' title='#=text#' data-property='#=property#' data-value='#=value#'>\" + \"<span class='k-icon k-i-#=iconClass#'></span>\" + \"#=text#\" + \"</a>\",\n              change: this.apply.bind(this)\n            });\n            this.list.dataSource.fetch();\n          },\n          apply: function (e) {\n            var dataItem = e.sender.value()[0];\n            SpreadsheetDialog.fn.apply.call(this);\n            this.trigger(\"action\", {\n              command: \"PropertyChangeCommand\",\n              options: {\n                property: dataItem.property,\n                value: dataItem.value\n              }\n            });\n          }\n        });\n        kendo.spreadsheet.dialogs.register(\"alignment\", AlignmentDialog);\n        var MergeDialog = SpreadsheetDialog.extend({\n          init: function (options) {\n            var messages = kendo.spreadsheet.messages.dialogs.mergeDialog || MESSAGES;\n            var defaultOptions = {\n              title: messages.title,\n              buttons: [{\n                value: \"cells\",\n                iconClass: \"cells-merge\",\n                text: messages.buttons.mergeCells\n              }, {\n                value: \"horizontally\",\n                iconClass: \"cells-merge-horizontally\",\n                text: messages.buttons.mergeHorizontally\n              }, {\n                value: \"vertically\",\n                iconClass: \"cells-merge-vertically\",\n                text: messages.buttons.mergeVertically\n              }, {\n                value: \"unmerge\",\n                iconClass: \"table-unmerge\",\n                text: messages.buttons.unmerge\n              }]\n            };\n            SpreadsheetDialog.fn.init.call(this, $.extend(defaultOptions, options));\n\n            this._list();\n          },\n          options: {\n            template: \"<ul class='k-list k-reset'></ul>\"\n          },\n          _list: function () {\n            var ul = this.dialog().element.find(\"ul\");\n            this.list = new kendo.ui.StaticList(ul, {\n              dataSource: new kendo.data.DataSource({\n                data: this.options.buttons\n              }),\n              template: \"<a role='button' title='#=text#' data-value='#=value#'>\" + \"<span class='k-icon k-icon k-i-#=iconClass#'></span>#=text#\" + \"</a>\",\n              change: this.apply.bind(this)\n            });\n            this.list.dataSource.fetch();\n          },\n          apply: function (e) {\n            var dataItem = e.sender.value()[0];\n            SpreadsheetDialog.fn.apply.call(this);\n            this.trigger(\"action\", {\n              command: \"MergeCellCommand\",\n              options: {\n                value: dataItem.value\n              }\n            });\n          }\n        });\n        kendo.spreadsheet.dialogs.register(\"merge\", MergeDialog);\n        var FreezeDialog = SpreadsheetDialog.extend({\n          init: function (options) {\n            var messages = kendo.spreadsheet.messages.dialogs.freezeDialog || MESSAGES;\n            var defaultOptions = {\n              title: messages.title,\n              buttons: [{\n                value: \"panes\",\n                iconClass: \"pane-freeze\",\n                text: messages.buttons.freezePanes\n              }, {\n                value: \"rows\",\n                iconClass: \"row-freeze\",\n                text: messages.buttons.freezeRows\n              }, {\n                value: \"columns\",\n                iconClass: \"column-freeze\",\n                text: messages.buttons.freezeColumns\n              }, {\n                value: \"unfreeze\",\n                iconClass: \"table-unmerge\",\n                text: messages.buttons.unfreeze\n              }]\n            };\n            SpreadsheetDialog.fn.init.call(this, $.extend(defaultOptions, options));\n\n            this._list();\n          },\n          options: {\n            template: \"<ul class='k-list k-reset'></ul>\"\n          },\n          _list: function () {\n            var ul = this.dialog().element.find(\"ul\");\n            this.list = new kendo.ui.StaticList(ul, {\n              dataSource: new kendo.data.DataSource({\n                data: this.options.buttons\n              }),\n              template: \"<a role='button' title='#=text#' data-value='#=value#'>\" + \"<span class='k-icon k-icon k-i-#=iconClass#'></span>#=text#\" + \"</a>\",\n              change: this.apply.bind(this)\n            });\n            this.list.dataSource.fetch();\n          },\n          apply: function (e) {\n            var dataItem = e.sender.value()[0];\n            SpreadsheetDialog.fn.apply.call(this);\n            this.trigger(\"action\", {\n              command: \"FreezePanesCommand\",\n              options: {\n                value: dataItem.value\n              }\n            });\n          }\n        });\n        kendo.spreadsheet.dialogs.register(\"freeze\", FreezeDialog);\n        var ValidationViewModel = kendo.spreadsheet.ValidationCellsViewModel = ObservableObject.extend({\n          init: function (options) {\n            ObservableObject.fn.init.call(this, options);\n            this.bind(\"change\", function (e) {\n              if (e.field === \"criterion\") {\n                this.reset();\n\n                if (this.criterion === \"custom\" || this.criterion === \"list\") {\n                  this.setHintMessageTemplate();\n                }\n              }\n\n              if (e.field === \"comparer\") {\n                this.setHintMessageTemplate();\n              }\n\n              if ((e.field == \"hintMessage\" || e.field == \"hintTitle\") && !this._mute) {\n                this.shouldBuild = false;\n              }\n\n              if ((e.field == \"from\" || e.field == \"to\" || e.field == \"hintMessageTemplate\" || e.field == \"type\") && this.shouldBuild) {\n                this.buildMessages();\n              }\n            }.bind(this));\n            this.reset();\n          },\n          buildMessages: function () {\n            this._mute = true;\n            this.set(\"hintTitle\", this.hintTitleTemplate ? kendo.format(this.hintTitleTemplate, this.type) : \"\");\n            this.set(\"hintMessage\", this.hintMessageTemplate ? kendo.format(this.hintMessageTemplate, this.from, this.to) : \"\");\n            this._mute = false;\n          },\n          reset: function () {\n            this.setComparers();\n            this.set(\"comparer\", this.comparers[0].type);\n            this.set(\"from\", null);\n            this.set(\"to\", null);\n            this.set(\"useCustomMessages\", false);\n            this.shouldBuild = true;\n            this.hintTitleTemplate = this.defaultHintTitle;\n            this.buildMessages();\n          },\n          //TODO: refactor\n          setComparers: function () {\n            var all = this.defaultComparers;\n            var comparers = [];\n\n            if (this.criterion === \"text\") {\n              var text_comparers = [\"equalTo\", \"notEqualTo\"];\n\n              for (var idx = 0; idx < all.length; idx++) {\n                if (text_comparers[0] == all[idx].type) {\n                  comparers.push(all[idx]);\n                  text_comparers.shift();\n                }\n              }\n            } else {\n              comparers = all.slice();\n            }\n\n            this.set(\"comparers\", comparers);\n          },\n          setHintMessageTemplate: function () {\n            if (this.criterion !== \"custom\" && this.criterion !== \"list\") {\n              this.set(\"hintMessageTemplate\", kendo.format(this.defaultHintMessage, this.criterion, this.comparerMessages[this.comparer]));\n            } else {\n              this.set(\"hintMessageTemplate\", \"\");\n              this.set(\"hintMessage\", \"\");\n            }\n          },\n          isAny: function () {\n            return this.get(\"criterion\") === \"any\";\n          },\n          isNumber: function () {\n            return this.get(\"criterion\") === \"number\";\n          },\n          showToForNumber: function () {\n            return this.showTo() && this.isNumber();\n          },\n          showToForDate: function () {\n            return this.showTo() && this.isDate();\n          },\n          isText: function () {\n            return this.get(\"criterion\") === \"text\";\n          },\n          isDate: function () {\n            return this.get(\"criterion\") === \"date\";\n          },\n          isList: function () {\n            return this.get(\"criterion\") === \"list\";\n          },\n          isCustom: function () {\n            return this.get(\"criterion\") === \"custom\";\n          },\n          showRemove: function () {\n            return this.get(\"hasValidation\");\n          },\n          showTo: function () {\n            return this.get(\"comparer\") == \"between\" || this.get(\"comparer\") == \"notBetween\";\n          },\n          update: function (validation) {\n            this.set(\"hasValidation\", !!validation);\n\n            if (validation) {\n              this.fromValidationObject(validation);\n            }\n          },\n          fromValidationObject: function (validation) {\n            this.set(\"criterion\", validation.dataType);\n            this.set(\"comparer\", validation.comparerType);\n            this.set(\"from\", validation.from);\n            this.set(\"to\", validation.to);\n            this.set(\"type\", validation.type);\n            this.set(\"ignoreBlank\", validation.allowNulls);\n            this.set(\"showButton\", validation.showButton);\n\n            if (validation.messageTemplate || validation.titleTemplate) {\n              this.hintMessageTemplate = validation.messageTemplate;\n              this.hintMessage = validation.messageTemplate;\n              this.hintTitleTemplate = validation.titleTemplate;\n              this.hintTitle = validation.titleTemplate;\n              this.useCustomMessages = true;\n              this.buildMessages();\n            } else {\n              this.useCustomMessages = false;\n            }\n          },\n          toValidationObject: function () {\n            if (this.criterion === \"any\") {\n              return null;\n            }\n\n            var options = {\n              type: this.type,\n              dataType: this.criterion,\n              comparerType: this.comparer,\n              from: this.from,\n              to: this.to,\n              allowNulls: this.ignoreBlank,\n              showButton: this.showButton\n            };\n\n            if (this.useCustomMessages) {\n              options.messageTemplate = this.shouldBuild ? this.hintMessageTemplate : this.hintMessage;\n              options.titleTemplate = this.hintTitle;\n            }\n\n            return options;\n          }\n        });\n        var ValidationDialog = SpreadsheetDialog.extend({\n          init: function (options) {\n            var messages = kendo.spreadsheet.messages.dialogs.validationDialog || MESSAGES;\n            var defaultOptions = {\n              title: messages.title,\n              hintMessage: messages.hintMessage,\n              hintTitle: messages.hintTitle,\n              criteria: [{\n                type: \"any\",\n                name: messages.criteria.any\n              }, {\n                type: \"number\",\n                name: messages.criteria.number\n              }, {\n                type: \"text\",\n                name: messages.criteria.text\n              }, {\n                type: \"date\",\n                name: messages.criteria.date\n              }, {\n                type: \"custom\",\n                name: messages.criteria.custom\n              }, {\n                type: \"list\",\n                name: messages.criteria.list\n              }],\n              comparers: [{\n                type: \"greaterThan\",\n                name: messages.comparers.greaterThan\n              }, {\n                type: \"lessThan\",\n                name: messages.comparers.lessThan\n              }, {\n                type: \"between\",\n                name: messages.comparers.between\n              }, {\n                type: \"notBetween\",\n                name: messages.comparers.notBetween\n              }, {\n                type: \"equalTo\",\n                name: messages.comparers.equalTo\n              }, {\n                type: \"notEqualTo\",\n                name: messages.comparers.notEqualTo\n              }, {\n                type: \"greaterThanOrEqualTo\",\n                name: messages.comparers.greaterThanOrEqualTo\n              }, {\n                type: \"lessThanOrEqualTo\",\n                name: messages.comparers.lessThanOrEqualTo\n              }],\n              comparerMessages: messages.comparerMessages\n            };\n            SpreadsheetDialog.fn.init.call(this, $.extend(defaultOptions, options));\n          },\n          options: {\n            width: 450,\n            criterion: \"any\",\n            type: \"reject\",\n            ignoreBlank: true,\n            showButton: true,\n            useCustomMessages: false,\n            errorTemplate: '<div class=\"k-tooltip k-tooltip-error k-validator-tooltip\">' + '<span class=\"k-tooltip-icon k-icon k-i-warning\"></span>' + '<span class=\"k-tooltip-content\">#= message #</span>' + '<span class=\"k-callout k-callout-n\"></span>' + '</div>',\n            template: '<div class=\"k-edit-form-container\">' + '<div class=\"k-edit-label\"><label for=\"criteria\">#: messages.validationDialog.labels.criteria #:</label></div>' + '<div class=\"k-edit-field\">' + '<select id=\"criteria\" data-#:ns#role=\"dropdownlist\" ' + 'title=\"#: messages.validationDialog.labels.criteria #\"' + 'data-#:ns#text-field=\"name\" ' + 'data-#:ns#value-field=\"type\" ' + 'data-#:ns#bind=\"value: criterion, source: criteria\"></select>' + '</div>' + '<div data-#:ns#bind=\"visible: isNumber\">' + '<div class=\"k-edit-label\"><label for=\"number-comparer\">#: messages.validationDialog.labels.comparer #:</label></div>' + '<div class=\"k-edit-field\">' + '<select id=\"number-comparer\" data-#:ns#role=\"dropdownlist\" ' + 'title=\"#: messages.validationDialog.labels.comparer #\"' + 'data-#:ns#text-field=\"name\" ' + 'data-#:ns#value-field=\"type\" ' + 'data-#:ns#bind=\"value: comparer, source: comparers\"></select>' + '</div>' + '<div class=\"k-edit-label\"><label for=\"comparer-min\">#: messages.validationDialog.labels.min #:</label></div>' + '<div class=\"k-edit-field\">' + '<span class=\"k-textbox k-input k-input-md k-rounded-md k-input-solid\"><input id=\"comparer-min\" name=\"#: messages.validationDialog.labels.min #\" title=\"#: messages.validationDialog.labels.min #\" placeholder=\"e.g. 10\" class=\"k-input-inner\" data-#:ns#bind=\"value: from, enabled: isNumber\" required=\"required\" /></span>' + '</div>' + '<div data-#:ns#bind=\"visible: showTo\">' + '<div class=\"k-edit-label\"><label for=\"comparer-max\">#: messages.validationDialog.labels.max #:</label></div>' + '<div class=\"k-edit-field\">' + '<span class=\"k-textbox k-input k-input-md k-rounded-md k-input-solid\"><input id=\"comparer-max\" name=\"#: messages.validationDialog.labels.max #\" title=\"#: messages.validationDialog.labels.max #\" placeholder=\"e.g. 100\" class=\"k-input-inner\" data-#:ns#bind=\"value: to, enabled: showToForNumber\" required=\"required\" /></span>' + '</div>' + '</div>' + '</div>' + '<div data-#:ns#bind=\"visible: isText\">' + '<div class=\"k-edit-label\"><label for=\"text-comparer\">#: messages.validationDialog.labels.comparer #:</label></div>' + '<div class=\"k-edit-field\">' + '<select id=\"text-comparer\" data-#:ns#role=\"dropdownlist\" ' + 'title=\"#: messages.validationDialog.labels.comparer #\"' + 'data-#:ns#text-field=\"name\" ' + 'data-#:ns#value-field=\"type\" ' + 'data-#:ns#bind=\"value: comparer, source: comparers\"></select>' + '</div>' + '<div class=\"k-edit-label\"><label for=\"text-comparer-value\">#: messages.validationDialog.labels.value #:</label></div>' + '<div class=\"k-edit-field\">' + '<span class=\"k-textbox k-input k-input-md k-rounded-md k-input-solid\"><input id=\"text-comparer-value\" name=\"#: messages.validationDialog.labels.value #\" title=\"#: messages.validationDialog.labels.value #\" class=\"k-input-inner\" data-#:ns#bind=\"value: from, enabled: isText\" required=\"required\" /></span>' + '</div>' + '</div>' + '<div data-#:ns#bind=\"visible: isDate\">' + '<div class=\"k-edit-label\"><label for=\"date-comparer\">#: messages.validationDialog.labels.comparer #:</label></div>' + '<div class=\"k-edit-field\">' + '<select id=\"date-comparer\" data-#:ns#role=\"dropdownlist\" ' + 'title=\"#: messages.validationDialog.labels.comparer #\"' + 'data-#:ns#text-field=\"name\" ' + 'data-#:ns#value-field=\"type\" ' + 'data-#:ns#bind=\"value: comparer, source: comparers\"></select>' + '</div>' + '<div class=\"k-edit-label\"><label for=\"date-comparer-start\">#: messages.validationDialog.labels.start #:</label></div>' + '<div class=\"k-edit-field\">' + '<span class=\"k-textbox k-input k-input-md k-rounded-md k-input-solid\"><input id=\"date-comparer-start\" name=\"#: messages.validationDialog.labels.start #\" title=\"#: messages.validationDialog.labels.start #\" class=\"k-input-inner\" data-#:ns#bind=\"value: from, enabled: isDate\" required=\"required\" /></span>' + '</div>' + '<div data-#:ns#bind=\"visible: showTo\">' + '<div class=\"k-edit-label\"><label for=\"date-comparer-end\">#: messages.validationDialog.labels.end #:</label></div>' + '<div class=\"k-edit-field\">' + '<span class=\"k-textbox k-input k-input-md k-rounded-md k-input-solid\"><input id=\"date-comparer-end\" name=\"#: messages.validationDialog.labels.end #\" title=\"#: messages.validationDialog.labels.end #\" class=\"k-input-inner\" data-#:ns#bind=\"value: to, enabled: showToForDate\" required=\"required\" /></span>' + '</div>' + '</div>' + '</div>' + '<div data-#:ns#bind=\"visible: isCustom\">' + '<div class=\"k-edit-label\"><label for=\"custom-comparer-value\">#: messages.validationDialog.labels.value #:</label></div>' + '<div class=\"k-edit-field\">' + '<span class=\"k-textbox k-input k-input-md k-rounded-md k-input-solid\"><input id=\"custom-comparer-value\" name=\"#: messages.validationDialog.labels.value #\" title=\"#: messages.validationDialog.labels.value #\" class=\"k-input-inner\" data-#:ns#bind=\"value: from, enabled: isCustom\" required=\"required\" /></span>' + '</div>' + '</div>' + '<div data-#:ns#bind=\"visible: isList\">' + '<div class=\"k-edit-label\"><label for=\"list-comparer-value\">#: messages.validationDialog.labels.value #:</label></div>' + '<div class=\"k-edit-field\">' + '<span class=\"k-textbox k-input k-input-md k-rounded-md k-input-solid\"><input id=\"list-comparer-value\" name=\"#: messages.validationDialog.labels.value #\" title=\"#: messages.validationDialog.labels.value #\" class=\"k-input-inner\" data-#:ns#bind=\"value: from, enabled: isList\" required=\"required\" /></span>' + '</div>' + '</div>' + '<div data-#:ns#bind=\"visible: isList\">' + '<div class=\"k-edit-field\">' + '<input type=\"checkbox\" name=\"showButton\" id=\"listShowButton\" class=\"k-checkbox k-checkbox-md k-rounded-md\" data-#:ns#bind=\"checked: showButton\"/>' + '<label for=\"listShowButton\" class=\"k-checkbox-label\">' + ' #: messages.validationDialog.labels.showListButton #' + '</label>' + '</div>' + \"</div>\" + '<div data-#:ns#bind=\"visible: isDate\">' + '<div class=\"k-edit-field\">' + '<input type=\"checkbox\" name=\"showButton\" id=\"dateShowButton\" class=\"k-checkbox k-checkbox-md k-rounded-md\" data-#:ns#bind=\"checked: showButton\"/>' + '<label for=\"dateShowButton\" class=\"k-checkbox-label\">' + ' #: messages.validationDialog.labels.showCalendarButton #' + '</label>' + '</div>' + \"</div>\" + '<div data-#:ns#bind=\"invisible: isAny\">' + '<div class=\"k-edit-field\">' + '<input type=\"checkbox\" title=\"#: messages.validationDialog.labels.ignoreBlank #\" name=\"ignoreBlank\" id=\"ignoreBlank\" class=\"k-checkbox k-checkbox-md k-rounded-md\" data-#:ns#bind=\"checked: ignoreBlank\"/>' + '<label for=\"ignoreBlank\" class=\"k-checkbox-label\">' + ' #: messages.validationDialog.labels.ignoreBlank #' + '</label>' + '</div>' + '</div>' + '<div data-#:ns#bind=\"invisible: isAny\">' + '<div class=\"k-hr\"></div>' + '<div class=\"k-edit-label\"><label>#: messages.validationDialog.labels.onInvalidData #:</label></div>' + '<div class=\"k-edit-field\">' + '<input type=\"radio\" title=\"#: messages.validationDialog.labels.rejectInput #\" id=\"validationTypeReject\" name=\"validationType\" value=\"reject\" data-#:ns#bind=\"checked: type\" class=\"k-radio k-radio-md\" />' + '<label for=\"validationTypeReject\" class=\"k-radio-label\">' + \"#: messages.validationDialog.labels.rejectInput #\" + '</label> ' + '<input type=\"radio\" title=\"#: messages.validationDialog.labels.showWarning #\" id=\"validationTypeWarning\"  name=\"validationType\" value=\"warning\" data-#:ns#bind=\"checked: type\" class=\"k-radio k-radio-md\" />' + '<label for=\"validationTypeWarning\" class=\"k-radio-label\">' + \"#: messages.validationDialog.labels.showWarning #\" + '</label>' + '</div>' + '</div>' + '<div data-#:ns#bind=\"invisible: isAny\" class=\"hint-wrapper\">' + '<div class=\"k-edit-field\">' + '<input type=\"checkbox\" title=\"#: messages.validationDialog.labels.showHint #\" name=\"useCustomMessages\" id=\"useCustomMessages\" class=\"k-checkbox k-checkbox-md k-rounded-md\" data-#:ns#bind=\"checked: useCustomMessages\" />' + '<label class=\"k-checkbox-label\" for=\"useCustomMessages\">' + ' #: messages.validationDialog.labels.showHint #' + '</label>' + '</div>' + '<div data-#:ns#bind=\"visible: useCustomMessages\">' + '<div class=\"k-edit-label\"><label for=\"hint-title\">#: messages.validationDialog.labels.hintTitle #:</label></div>' + '<div class=\"k-edit-field\">' + '<span class=\"k-textbox k-input k-input-md k-rounded-md k-input-solid\"><input id=\"hint-title\" name=\"hint-title\" class=\"k-input-inner\" title=\"#: messages.validationDialog.labels.hintTitle #\" placeholder=\"#: messages.validationDialog.placeholders.typeTitle #\" data-#:ns#bind=\"value: hintTitle\" /></span>' + '</div>' + '<div class=\"k-edit-label\"><label for=\"hint-message\">#: messages.validationDialog.labels.hintMessage #:</label></div>' + '<div class=\"k-edit-field\">' + '<span class=\"k-textbox k-input k-input-md k-rounded-md k-input-solid\"><input id=\"hint-message\" class=\"k-input-inner\" title=\"#: messages.validationDialog.labels.hintMessage #\" placeholder=\"#: messages.validationDialog.placeholders.typeMessage #\" data-#:ns#bind=\"value: hintMessage\" /></span>' + '</div>' + '</div>' + '</div>' + '<div class=\"k-action-buttons\">' + '<button class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base\" data-#:ns#bind=\"visible: showRemove, click: remove\"><span class=\"k-button-text\">#: messages.remove #</span></button>' + '<button class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary\" data-#:ns#bind=\"click: apply\"><span class=\"k-button-text\">#: messages.apply #</span></button>' + '<button class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base\" data-#:ns#bind=\"click: close\"><span class=\"k-button-text\">#: messages.cancel #</span></button>' + \"</div>\" + \"</div>\"\n          },\n          open: function (range) {\n            var options = this.options;\n            var element;\n            this.viewModel = new ValidationViewModel({\n              type: options.type,\n              defaultHintMessage: options.hintMessage,\n              defaultHintTitle: options.hintTitle,\n              defaultComparers: options.comparers.slice(0),\n              comparerMessages: options.comparerMessages,\n              criteria: options.criteria.slice(0),\n              criterion: options.criterion,\n              ignoreBlank: options.ignoreBlank,\n              showButton: options.showButton,\n              apply: this.apply.bind(this),\n              close: this.close.bind(this),\n              remove: this.remove.bind(this)\n            });\n            this.viewModel.update(range.validation());\n            SpreadsheetDialog.fn.open.call(this);\n            element = this.dialog().element;\n\n            if (this.validatable) {\n              this.validatable.destroy();\n            }\n\n            kendo.bind(element, this.viewModel);\n            this.validatable = new kendo.ui.Validator(element.find(\".k-edit-form-container\"), {\n              validateOnBlur: false,\n              errorTemplate: this.options.errorTemplate || undefined\n            });\n          },\n          apply: function () {\n            if (this.validatable.validate()) {\n              SpreadsheetDialog.fn.apply.call(this);\n              this.trigger(\"action\", {\n                command: \"EditValidationCommand\",\n                options: {\n                  value: this.viewModel.toValidationObject()\n                }\n              });\n            }\n          },\n          remove: function () {\n            this.viewModel.set(\"criterion\", \"any\");\n            this.apply();\n          }\n        });\n        kendo.spreadsheet.dialogs.register(\"validation\", ValidationDialog);\n        kendo.spreadsheet.dialogs.ValidationDialog = ValidationDialog;\n\n        function PDF_PAPER_SIZE(size) {\n          return {\n            value: size,\n            text: TEXT(\"exportAsDialog.pdf.paper.\" + size)\n          };\n        }\n\n        var ExportAsDialog = SpreadsheetDialog.extend({\n          init: function (options) {\n            SpreadsheetDialog.fn.init.call(this, options);\n            options = this.options;\n            this.viewModel = kendo.observable({\n              title: options.title,\n              name: options.name,\n              extension: options.extension,\n              fileFormats: options.fileFormats,\n              excel: options.excelExport,\n              pdf: {\n                proxyURL: options.pdfExport.proxyURL,\n                forceProxy: options.pdfExport.forceProxy,\n                title: options.pdfExport.title,\n                author: options.pdfExport.author,\n                autoPrint: options.pdfExport.autoPrint,\n                subject: options.pdfExport.subject,\n                keywords: options.pdfExport.keywords,\n                creator: options.pdfExport.creator,\n                date: options.pdfExport.date,\n                fitWidth: options.pdf.fitWidth,\n                area: options.pdf.area,\n                areas: options.pdf.areas,\n                paperSize: options.pdf.paperSize,\n                paperSizes: options.pdf.paperSizes,\n                margin: options.pdf.margin,\n                margins: options.pdf.margins,\n                landscape: options.pdf.landscape,\n                guidelines: options.pdf.guidelines,\n                hCenter: options.pdf.hCenter,\n                vCenter: options.pdf.vCenter\n              },\n              apply: this.apply.bind(this),\n              close: this.close.bind(this)\n            });\n            var dialog = this.dialog();\n            this.viewModel.bind(\"change\", function (e) {\n              if (e.field === \"extension\") {\n                this.set(\"showPdfOptions\", this.extension === \".pdf\" ? true : false);\n                dialog.center();\n              }\n            });\n            kendo.bind(dialog.element, this.viewModel);\n          },\n          options: {\n            title: TEXT(\"exportAsDialog.title\", \"Export...\"),\n            name: TEXT(\"exportAsDialog.defaultFileName\", \"Workbook\"),\n            extension: \".xlsx\",\n            fileFormats: [{\n              description: TEXT(\"exportAsDialog.xlsx.description\", \"Excel Workbook (.xlsx)\"),\n              extension: \".xlsx\"\n            }, {\n              description: TEXT(\"exportAsDialog.pdf.description\", \"Portable Document Format (.pdf)\"),\n              extension: \".pdf\"\n            }],\n            pdf: {\n              fitWidth: true,\n              area: \"workbook\",\n              areas: [{\n                area: \"workbook\",\n                text: TEXT(\"exportAsDialog.pdf.area.workbook\", \"Entire Workbook\")\n              }, {\n                area: \"sheet\",\n                text: TEXT(\"exportAsDialog.pdf.area.sheet\", \"Active Sheet\")\n              }, {\n                area: \"selection\",\n                text: TEXT(\"exportAsDialog.pdf.area.selection\", \"Selection\")\n              }],\n              paperSize: \"a4\",\n              paperSizes: [\"a2\", \"a3\", \"a4\", \"a5\", \"b3\", \"b4\", \"b5\", \"folio\", \"legal\", \"letter\", \"tabloid\", \"executive\"].map(PDF_PAPER_SIZE),\n              margin: {\n                bottom: \"0.75in\",\n                left: \"0.7in\",\n                right: \"0.7in\",\n                top: \"0.75in\"\n              },\n              margins: [{\n                value: {\n                  bottom: \"0.75in\",\n                  left: \"0.7in\",\n                  right: \"0.7in\",\n                  top: \"0.75in\"\n                },\n                text: TEXT(\"exportAsDialog.pdf.margin.normal\", \"Normal\")\n              }, {\n                value: {\n                  bottom: \"0.75in\",\n                  left: \"0.25in\",\n                  right: \"0.25in\",\n                  top: \"0.75in\"\n                },\n                text: TEXT(\"exportAsDialog.pdf.margin.narrow\", \"Narrow\")\n              }, {\n                value: {\n                  bottom: \"1in\",\n                  left: \"1in\",\n                  right: \"1in\",\n                  top: \"1in\"\n                },\n                text: TEXT(\"exportAsDialog.pdf.margin.wide\", \"Wide\")\n              }],\n              landscape: true,\n              guidelines: true,\n              hCenter: true,\n              vCenter: true\n            },\n            width: 520,\n            template: \"<div class='k-edit-label'><label id='name-label'>#: messages.exportAsDialog.labels.fileName #:</label></div>\" + \"<div class='k-edit-field'>\" + \"<span class='k-textbox k-input k-input-md k-rounded-md k-input-solid'><input aria-labelledby='name-label' class='k-input-inner' data-#:ns#bind='value: name' /></span>\" + \"</div>\" + \"<div >\" + \"<div class='k-edit-label'><label id='file-format-label'>#: messages.exportAsDialog.labels.saveAsType #:</label></div>\" + \"<div class='k-edit-field'>\" + \"<select aria-labelledby='file-format-label' data-#:ns#role='dropdownlist' class='k-file-format' \" + \"data-#:ns#text-field='description' \" + \"data-#:ns#value-field='extension' \" + \"data-#:ns#bind='value: extension, source: fileFormats'></select>\" + \"</div>\" + \"</div>\" + \"<div class='k-export-config' data-#:ns#bind='visible: showPdfOptions'>\" + \"<hr class='k-hr' />\" + \"<div class='k-edit-label'><label id='export-area-label'>#: messages.exportAsDialog.labels.exportArea #:</label></div>\" + \"<div class='k-edit-field'>\" + \"<select aria-labelledby='export-area-label' data-#:ns#role='dropdownlist' class='k-file-format' \" + \"data-#:ns#text-field='text' \" + \"data-#:ns#value-field='area' \" + \"data-#:ns#bind='value: pdf.area, source: pdf.areas'></select>\" + \"</div>\" + \"<div class='k-edit-label'><label id='paper-size-label'>#: messages.exportAsDialog.labels.paperSize#:</label></div>\" + \"<div class='k-edit-field'>\" + \"<select aria-labelledby='paper-size-label' data-#:ns#role='dropdownlist' class='k-file-format' \" + \"data-#:ns#text-field='text' \" + \"data-#:ns#value-field='value' \" + \"data-#:ns#bind='value: pdf.paperSize, source: pdf.paperSizes'></select>\" + \"</div>\" + \"<div class='k-edit-label'><label id='margins-label'>#: messages.exportAsDialog.labels.margins #:</label></div>\" + \"<div class='k-edit-field'>\" + \"<select aria-labelledby='margins-label' data-#:ns#role='dropdownlist' class='k-file-format' \" + \"data-#:ns#value-primitive='true'\" + \"data-#:ns#text-field='text' \" + \"data-#:ns#value-field='value' \" + \"data-#:ns#bind='value: pdf.margin, source: pdf.margins'></select>\" + \"</div>\" + \"<div class='k-edit-label'><label>#: messages.exportAsDialog.labels.orientation #:</label></div>\" + \"<div class='k-edit-field'>\" + \"<div class='k-button-group'>\" + \"<input type='radio' id='k-orientation-portrait' aria-label='orientation portrait' name='orientation' data-#:ns#type='boolean' data-#:ns#bind='checked: pdf.landscape' value='false' />\" + \"<label class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-icon-button k-group-start k-orientation-button' for='k-orientation-portrait'><span class='k-button-icon k-icon k-i-page-portrait'></span></label>\" + \"<input type='radio' id='k-orientation-landscape' aria-label='orientation landscape' name='orientation' data-#:ns#type='boolean' data-#:ns#bind='checked: pdf.landscape' value='true' />\" + \"<label class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-icon-button k-group-end k-orientation-button' for='k-orientation-landscape'><span class='k-button-icon k-icon k-i-page-landscape'></span></label>\" + \"</div>\" + \"</div>\" + \"<div class='k-edit-label'><label>#: messages.exportAsDialog.labels.print #:</label></div>\" + \"<div class='k-edit-field'>\" + \"<input class='k-checkbox k-checkbox-md k-rounded-md' id='guidelines' type='checkbox' data-#:ns#bind='checked: pdf.guidelines'/><label class='k-checkbox-label' for='guidelines'>#: messages.exportAsDialog.labels.guidelines#</label>\" + \"</div>\" + \"<div class='k-edit-label'><label>#: messages.exportAsDialog.labels.scale #:</label></div>\" + \"<div class='k-edit-field'>\" + \"<input class='k-checkbox k-checkbox-md k-rounded-md' id='fitWidth' type='checkbox' data-#:ns#bind='checked: pdf.fitWidth'/><label class='k-checkbox-label' for='fitWidth'>#: messages.exportAsDialog.labels.fit #</label>\" + \"</div>\" + \"<div class='k-edit-label'><label>#: messages.exportAsDialog.labels.center #:</label></div>\" + \"<div class='k-edit-field'>\" + \"<input class='k-checkbox k-checkbox-md k-rounded-md' id='hCenter' type='checkbox' data-#:ns#bind='checked: pdf.hCenter'/><label class='k-checkbox-label' for='hCenter'>#: messages.exportAsDialog.labels.horizontally #</label>\" + \"<input class='k-checkbox k-checkbox-md k-rounded-md' id='vCenter' type='checkbox' data-#:ns#bind='checked: pdf.vCenter'/><label class='k-checkbox-label' for='vCenter'>#: messages.exportAsDialog.labels.vertically #</label>\" + \"</div>\" + \"<div class='k-page-orientation'>\" + \"<span class='k-icon k-i-page-portrait' data-#:ns#bind='invisible: pdf.landscape'></span>\" + \"<span class='k-icon k-i-page-landscape' data-#:ns#bind='visible: pdf.landscape'></span>\" + \"</div>\" + \"</div>\" + \"<div class='k-action-buttons'>\" + \"<button class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary' data-#:ns#bind='click: apply'><span class='k-button-text'>#: messages.save #</span></button>\" + \"<button class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-base' data-#:ns#bind='click: close'><span class='k-button-text'>#: messages.cancel #</span></button>\" + \"</div>\"\n          },\n          apply: function () {\n            SpreadsheetDialog.fn.apply.call(this);\n            this.trigger(\"action\", {\n              command: \"SaveAsCommand\",\n              options: this.viewModel\n            });\n          }\n        });\n        kendo.spreadsheet.dialogs.register(\"exportAs\", ExportAsDialog);\n\n        function basicErrorDialog(id, msg) {\n          kendo.spreadsheet.dialogs.register(id, MessageDialog.extend({\n            options: {\n              messageId: msg\n            }\n          }));\n        }\n\n        basicErrorDialog(\"modifyMerged\", \"modifyMergedDialog.errorMessage\");\n        basicErrorDialog(\"rangeDisabled\", \"rangeDisabledDialog.errorMessage\");\n        basicErrorDialog(\"intersectsArray\", \"intersectsArrayDialog.errorMessage\");\n        basicErrorDialog(\"overflow\", \"overflowDialog.errorMessage\");\n        basicErrorDialog(\"unsupportedSelection\", \"unsupportedSelectionDialog.errorMessage\");\n        basicErrorDialog(\"incompatibleRanges\", \"incompatibleRangesDialog.errorMessage\");\n        basicErrorDialog(\"noFillDirection\", \"noFillDirectionDialog.errorMessage\");\n        basicErrorDialog(\"duplicateSheetName\", \"duplicateSheetNameDialog.errorMessage\");\n        var ImportErrorDialog = MessageDialog.extend({\n          options: {\n            width: 640,\n            title: \"Errors in import\",\n            template: \"<div class='k-spreadsheet-message-content k-spreadsheet-import-errors'>\" + \"<div class='k--header-message'>We encountered #= errors.length # errors while reading this file.  Please be aware that some formulas might be missing, or contain invalid results.</div>\" + \"<div class='k--errors'>\" + \"<table>\" + \"<thead>\" + \"<tr><th>Context</th><th>Error message</th></tr>\" + \"</thead>\" + \"# for (var i = 0; i < errors.length; ++i) { #\" + \"# var err = errors[i]; #\" + \"<tr><td>#: err.context #</td><td>#: err.error #</td></tr>\" + \"# } #\" + \"</table>\" + \"</div>\" + \"</div>\" + \"<div class='k-action-buttons'>\" + \"<button class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary' data-#:ns#bind='click: close'>\" + \"<span class='k-button-text'>#: messages.okText #</span>\" + \"</button>\" + \"</div>\"\n          }\n        });\n        kendo.spreadsheet.dialogs.register(\"importError\", ImportErrorDialog);\n        var UseKeyboardDialog = MessageDialog.extend({\n          options: {\n            title: TEXT(\"useKeyboardDialog.title\", \"Copying and pasting\"),\n            template: \"#: messages.useKeyboardDialog.errorMessage #\" + \"<div>Ctrl+C #: messages.useKeyboardDialog.labels.forCopy #</div>\" + \"<div>Ctrl+X #: messages.useKeyboardDialog.labels.forCut #</div>\" + \"<div>Ctrl+V #: messages.useKeyboardDialog.labels.forPaste #</div>\" + '<div class=\"k-action-buttons\">' + \"<button class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary' data-#:ns#bind='click: close'>\" + \"<span class='k-button-text'>#= messages.okText #</span>\" + \"</button>\" + \"</div>\"\n          }\n        });\n        kendo.spreadsheet.dialogs.register(\"useKeyboard\", UseKeyboardDialog);\n        var HyperlinkDialog = SpreadsheetDialog.extend({\n          options: {\n            title: TEXT(\"linkDialog.title\", \"Hyperlink\"),\n            template: \"<div class='k-edit-label'><label id='url-label'>#: messages.linkDialog.labels.url #:</label></div>\" + \"<div class='k-edit-field'><span class='k-textbox k-input k-input-md k-rounded-md k-input-solid'><input class='k-input-inner' data-#:ns#bind='value: url' title='#: messages.linkDialog.labels.url #' aria-labelledby='url-label'/></span></div>\" + \"<div class='k-action-buttons'>\" + (\"<button class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-left' data-#:ns#bind='click: remove'><span class='k-button-text'>#= messages.linkDialog.labels.removeLink #</span></button>\" + \"<button class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary' data-#:ns#bind='click: apply'><span class='k-button-text'>#= messages.okText #</span></button>\" + \"<button class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-base' data-#:ns#bind='click: cancel'><span class='k-button-text'>#= messages.cancel #</span></button>\") + \"</div>\",\n            autoFocus: false\n          },\n          open: function (range) {\n            var self = this;\n            SpreadsheetDialog.fn.open.apply(self, arguments);\n            var element = self.dialog().element;\n            var model = kendo.observable({\n              url: range.link(),\n              apply: function () {\n                if (!/\\S/.test(model.url)) {\n                  model.url = null;\n                }\n\n                self.trigger(\"action\", {\n                  command: \"HyperlinkCommand\",\n                  options: {\n                    link: model.url\n                  }\n                });\n                self.close();\n              },\n              remove: function () {\n                model.url = null;\n                model.apply();\n              },\n              cancel: self.close.bind(self)\n            });\n            kendo.bind(element, model); // it would be nice if we could easily handle that in one\n            // place for all dialogs, but it doesn't seem easily\n            // doable.\n\n            element.find(\"input\").trigger(\"focus\").on(\"keydown\", function (ev) {\n              if (ev.keyCode == 13\n              /*ENTER*/\n              ) {\n                model.url = $(this).val(); // there won't be a \"change\" event and the model wouldn't update :-\\\n\n                ev.stopPropagation();\n                ev.preventDefault();\n                model.apply();\n              } else if (ev.keyCode == 27\n              /*ESC*/\n              ) {\n                ev.stopPropagation();\n                ev.preventDefault();\n                model.cancel();\n              }\n            });\n          }\n        });\n        kendo.spreadsheet.dialogs.register(\"hyperlink\", HyperlinkDialog);\n        var InsertCommentDialog = SpreadsheetDialog.extend({\n          options: {\n            className: \"k-spreadsheet-insert-comment\",\n            template: \"\\\n\t<div class='k-edit-label'><label id='comment-label'>#: messages.insertCommentDialog.labels.comment #:</label></div>\\\n\t<div class='k-edit-field'><span class='k-input k-textarea k-input-solid k-input-md k-rounded-md'><textarea aria-labelledby='comment-label' rows='5' class='k-input-inner' data-#:ns#bind='value: comment'></textarea></span></div>\\\n\t<div class='k-action-buttons'>\\\n\t  <button class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-left' data-#:ns#bind='click: remove'><span class='k-button-text'>#: messages.insertCommentDialog.labels.removeComment #</span></button>\\\n\t  <button class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary' data-#:ns#bind='click: apply'><span class='k-button-text'>#: messages.okText #</span></button>\\\n\t  <button class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-base' data-#:ns#bind='click: cancel'><span class='k-button-text'>#= messages.cancel #</span></button>\\\n\t</div>\\\n\t\",\n            title: TEXT(\"insertCommentDialog.title\", \"Insert comment\"),\n            autoFocus: false,\n            width: 450\n          },\n          open: function (range) {\n            var self = this;\n            SpreadsheetDialog.fn.open.apply(self, arguments);\n            var element = self.dialog().element;\n            var model = kendo.observable({\n              comment: range.comment(),\n              apply: function () {\n                if (!/\\S/.test(model.comment)) {\n                  model.comment = null;\n                }\n\n                self.trigger(\"action\", {\n                  command: \"InsertCommentCommand\",\n                  options: {\n                    value: model.comment\n                  }\n                });\n                self.close();\n              },\n              remove: function () {\n                model.comment = null;\n                model.apply();\n              },\n              cancel: self.close.bind(self)\n            });\n            kendo.bind(element, model);\n            element.find(\"textarea\").trigger(\"focus\");\n          }\n        });\n        kendo.spreadsheet.dialogs.register(\"insertComment\", InsertCommentDialog);\n        var InsertImageDialog = SpreadsheetDialog.extend({\n          options: {\n            template: \"\\\n\t<div class='k-spreadsheet-insert-image-dialog'>\\\n\t  <label data-#:ns#bind='style: { background-image: imageUrl },\\\n\t                    css: { k-spreadsheet-has-image: hasImage, k-hover: isHovered },\\\n\t                    events: { dragenter: dragEnter, dragover: stopEvent, dragleave: dragLeave, drop: drop }'>\\\n\t    <div data-#:ns#bind='text: info'></div>\\\n\t    <input type='file' data-#:ns#bind='events: { change: change }'\\\n\t           accept='image/png, image/jpeg, image/gif' />\\\n\t  </label>\\\n\t</div>\\\n\t<div class='k-action-buttons'>\\\n\t  <button class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary' data-#:ns#bind='enabled: okEnabled, click: apply'><span class='k-button-text'>#: messages.okText #</span></button>\\\n\t  <button class='k-button k-button-md k-rounded-md k-button-solid k-button-solid-base' data-#:ns#bind='click: cancel'><span class='k-button-text'>#= messages.cancel #</span></button>\\\n\t</div>\",\n            title: TEXT(\"insertImageDialog.title\", \"Insert image\"),\n            width: \"auto\"\n          },\n          open: function () {\n            var self = this;\n            SpreadsheetDialog.fn.open.apply(self, arguments);\n            var element = self.dialog().element;\n            var model = kendo.observable({\n              okEnabled: false,\n              info: kendo.spreadsheet.messages.dialogs.insertImageDialog.info,\n              imageUrl: \"\",\n              hasImage: false,\n              isHovered: false,\n              _url: null,\n              _image: null,\n              apply: function () {\n                window.URL.revokeObjectURL(model._url);\n                self.trigger(\"action\", {\n                  command: \"InsertImageCommand\",\n                  options: {\n                    blob: model._image,\n                    width: model._width,\n                    height: model._height\n                  }\n                });\n                self.close();\n              },\n              cancel: self.close.bind(self),\n              stopEvent: function (ev) {\n                ev.stopPropagation();\n                ev.preventDefault();\n              },\n              drop: function (ev) {\n                model.stopEvent(ev);\n                model.selectFile(ev.originalEvent.dataTransfer.files);\n                model.set(\"isHovered\", false);\n              },\n              dragEnter: function (ev) {\n                model.stopEvent(ev);\n                model.set(\"isHovered\", true);\n              },\n              dragLeave: function (ev) {\n                model.stopEvent(ev);\n                model.set(\"isHovered\", false);\n              },\n              change: function (ev) {\n                model.selectFile(ev.target.files);\n              },\n              selectFile: function (files) {\n                var image;\n\n                for (var i = 0; i < files.length; ++i) {\n                  if (/^image\\//i.test(files[i].type)) {\n                    image = files[i];\n                    break;\n                  }\n                }\n\n                if (model._url) {\n                  window.URL.revokeObjectURL(model._url);\n                }\n\n                if (image) {\n                  model._image = image;\n                  model._url = window.URL.createObjectURL(image);\n                  var img = new Image();\n                  img.src = model._url;\n\n                  img.onload = function () {\n                    model._width = img.width;\n                    model._height = img.height;\n                    model.set(\"info\", kendo.spreadsheet.messages.dialogs.insertImageDialog.info);\n                    model.set(\"okEnabled\", true);\n                    model.set(\"imageUrl\", \"url('\" + model._url + \"')\");\n                    model.set(\"hasImage\", true);\n                  };\n                } else {\n                  model._image = null;\n                  model.set(\"info\", kendo.spreadsheet.messages.dialogs.insertImageDialog.typeError);\n                  model.set(\"okEnabled\", false);\n                  model.set(\"imageUrl\", \"\");\n                  model.set(\"hasImage\", false);\n                }\n              }\n            });\n            kendo.bind(element, model);\n          }\n        });\n        kendo.spreadsheet.dialogs.register(\"insertImage\", InsertImageDialog);\n\n        function Localizable(path, def) {\n          this.path = path.split(\".\");\n          this.def = def;\n        }\n\n        Localizable.prototype.trans = function () {\n          var msg = kendo.spreadsheet.messages.dialogs;\n\n          for (var i = 0; i < this.path.length; ++i) {\n            msg = msg[this.path[i]];\n\n            if (!msg) {\n              return this.def;\n            }\n          }\n\n          return msg;\n        };\n\n        function TEXT(path, def) {\n          return new Localizable(path, def);\n        }\n\n        function translate(thing) {\n          if (thing instanceof Localizable) {\n            return thing.trans();\n          } else if (Array.isArray(thing)) {\n            return thing.map(translate);\n          } else if (thing != null && typeof thing == \"object\") {\n            return Object.keys(thing).reduce(function (ret, key) {\n              ret[key] = translate(thing[key]);\n              return ret;\n            }, {});\n          }\n\n          return thing;\n        }\n      })(window.kendo);\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}