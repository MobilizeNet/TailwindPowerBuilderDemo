{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1386);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1080:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.mobile.scroller\");\n    /***/\n  },\n\n  /***/\n  1386:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1080), __webpack_require__(1387), __webpack_require__(1388), __webpack_require__(1389), __webpack_require__(1390), __webpack_require__(1391), __webpack_require__(1392), __webpack_require__(1393)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"pdfviewer\",\n        name: \"PDFViewer\",\n        category: \"web\",\n        description: \"PDFViewer to display pdfs in the browser\",\n        depends: [\"core\", \"window\", \"dialog\", \"toolbar\", \"mobile.scroller\", \"upload\", \"combobox\", \"drawing\", \"binder\", \"dropdownlist\", \"numerictextbox\"]\n      };\n\n      (function ($, undefined) {\n        var NS = \".kendoPDFViewer\",\n            kendo = window.kendo,\n            ui = kendo.ui,\n            extend = $.extend,\n            drawing = kendo.drawing,\n            keys = $.extend({\n          PLUS: 187,\n          MINUS: 189,\n          ZERO: 48,\n          NUMPAD_ZERO: 96\n        }, kendo.keys),\n            Page,\n            Widget = ui.Widget,\n            progress = kendo.ui.progress,\n            SCROLL = \"scroll\",\n            RENDER = \"render\",\n            OPEN = \"open\",\n            ERROR = \"error\",\n            FOCUS = \"focus\" + NS,\n            KEYDOWN = \"keydown\" + NS,\n            MOUSEWHEEL = \"DOMMouseScroll\" + NS + \" mousewheel\" + NS,\n            UPDATE = \"update\",\n            ZOOM_SCALE = 1.25,\n            PAGE_CHANGE = \"pagechange\",\n            ZOOMSTART = \"zoomStart\",\n            ZOOMEND = \"zoomEnd\",\n            ZOOMCOMMAND = \"ZoomCommand\",\n            WHITECOLOR = \"#ffffff\",\n            TABINDEX = \"tabindex\",\n            PROCESSORS = {\n          pdfjs: \"pdfjs\",\n          dpl: \"dpl\"\n        },\n            styles = {\n          viewer: \"k-pdf-viewer k-widget\",\n          scroller: \"k-canvas k-list-scroller\",\n          enableTextSelection: \"k-enable-text-select\",\n          enablePanning: \"k-enable-panning\",\n          highlightClass: \"k-search-highlight\",\n          charClass: \"k-text-char\"\n        };\n        var PDFViewer = Widget.extend({\n          init: function (element, options) {\n            var that = this;\n            Widget.fn.init.call(that, element, kendo.deepExtend({}, this.options, options));\n\n            that._wrapper();\n\n            if (that.options.toolbar) {\n              that._renderToolbar();\n            }\n\n            that._initProcessor(options || {});\n\n            that._renderPageContainer();\n\n            that._loadDocument();\n\n            that._tabindex();\n\n            kendo.notify(that, kendo.ui);\n          },\n          events: [RENDER, OPEN, ERROR, ZOOMSTART, ZOOMEND],\n          options: {\n            name: \"PDFViewer\",\n            view: {\n              type: \"canvas\"\n            },\n            pdfjsProcessing: {\n              file: null\n            },\n            dplProcessing: {\n              read: {\n                url: null,\n                type: \"GET\",\n                dataType: \"json\",\n                pageField: \"pageNumber\"\n              },\n              upload: {\n                url: null,\n                saveField: \"file\"\n              },\n              download: {\n                url: null\n              },\n              loadOnDemand: false\n            },\n            toolbar: {\n              items: []\n            },\n            width: 1000,\n            height: 1200,\n            page: 1,\n            defaultPageSize: {\n              width: 794,\n              height: 1123\n            },\n            scale: null,\n            zoomMin: 0.5,\n            zoomMax: 4,\n            zoomRate: 0.25,\n            messages: {\n              defaultFileName: \"Document\",\n              toolbar: {\n                zoom: {\n                  zoomLevel: \"zoom level\",\n                  zoomOut: \"Zoom Out\",\n                  zoomIn: \"Zoom In\",\n                  actualWidth: \"Actual Width\",\n                  autoWidth: \"Automatic Width\",\n                  fitToWidth: \"Fit to Width\",\n                  fitToPage: \"Fit to Page\"\n                },\n                open: \"Open\",\n                exportAs: \"Export\",\n                download: \"Download\",\n                pager: {\n                  first: \"Go to the first page\",\n                  previous: \"Go to the previous page\",\n                  next: \"Go to the next page\",\n                  last: \"Go to the last page\",\n                  of: \" of {0} \",\n                  page: \"page\",\n                  pages: \"pages\"\n                },\n                print: \"Print\",\n                toggleSelection: \"Enable Selection\",\n                togglePan: \"Enable Panning\",\n                search: \"Search\"\n              },\n              errorMessages: {\n                notSupported: \"Only pdf files allowed.\",\n                parseError: \"PDF file fails to process.\",\n                notFound: \"File is not found.\",\n                popupBlocked: \"Popup is blocked.\"\n              },\n              dialogs: {\n                exportAsDialog: {\n                  title: \"Export...\",\n                  defaultFileName: \"Document\",\n                  pdf: \"Portable Document Format (.pdf)\",\n                  png: \"Portable Network Graphics (.png)\",\n                  svg: \"Scalable Vector Graphics (.svg)\",\n                  labels: {\n                    fileName: \"File name\",\n                    saveAsType: \"Save as\",\n                    page: \"Page\"\n                  }\n                },\n                okText: \"OK\",\n                save: \"Save\",\n                cancel: \"Cancel\",\n                search: {\n                  inputLabel: \"Search Text\",\n                  matchCase: \"Match Case\",\n                  next: \"Next Match\",\n                  previous: \"Previous Match\",\n                  close: \"Close\",\n                  of: \"of\"\n                }\n              }\n            }\n          },\n          _wrapper: function () {\n            var that = this,\n                options = that.options;\n            that.wrapper = that.element;\n            that.wrapper.width(options.width).height(options.height).addClass(styles.viewer).on(FOCUS, that._focus.bind(that)).on(KEYDOWN, that._keydown.bind(that));\n            that._allowResize = that.options.scale === null;\n            that._autoZoomScale = ZOOM_SCALE;\n            that.zoomScale = that.options.scale || that._autoZoomScale;\n            that._resizeHandler = kendo.onResize(function () {\n              that.resize();\n            });\n            that._pageNum = that.options.page;\n          },\n          _focus: function (e) {\n            if (this.toolbar) {\n              this.toolbar.wrapper.trigger(\"focus\");\n            } else {\n              this.pageContainer.trigger(\"focus\");\n            }\n\n            e.preventDefault();\n          },\n          _keydown: function (e) {\n            var plusShortcuts = [keys.PLUS, keys.NUMPAD_PLUS],\n                minusShortcuts = [keys.MINUS, keys.NUMPAD_MINUS],\n                zeroShortcuts = [keys.ZERO, keys.NUMPAD_ZERO],\n                shouldExecute = false,\n                args = {\n              command: ZOOMCOMMAND,\n              options: {\n                updateComboBox: true\n              }\n            };\n\n            if (!e.ctrlKey || this._blankPage || this.processingLib === PROCESSORS.dpl) {\n              return;\n            }\n\n            if (plusShortcuts.includes(e.keyCode)) {\n              args.options.zoomIn = true;\n              shouldExecute = true;\n            } else if (minusShortcuts.includes(e.keyCode)) {\n              args.options.zoomOut = true;\n              shouldExecute = true;\n            } else if (zeroShortcuts.includes(e.keyCode)) {\n              args.options.scale = ZOOM_SCALE;\n              shouldExecute = true;\n            }\n\n            if (shouldExecute) {\n              this.execute(args);\n              e.preventDefault();\n            }\n          },\n          _initProcessor: function (options) {\n            var that = this,\n                processingOptions;\n            processingOptions = options.dplProcessing ? that.options.dplProcessing : that.options.pdfjsProcessing;\n            that.processingLib = options.dplProcessing ? PROCESSORS.dpl : PROCESSORS.pdfjs;\n            that.processor = new kendo.pdfviewer[that.processingLib].processor(processingOptions, that);\n            Page = kendo.pdfviewer[that.processingLib].Page;\n          },\n          _renderToolbar: function () {\n            var that = this,\n                options = that.options;\n            var toolbarOptions = {\n              pager: {\n                messages: options.messages.toolbar.pager\n              },\n              scale: options.scale,\n              resizable: true,\n              items: options.toolbar.items,\n              width: options.width,\n              action: that.execute.bind(that),\n              messages: options.messages.toolbar,\n              viewer: this\n            };\n            var toolbarElement = $(\"<div />\");\n            toolbarElement.appendTo(that.element);\n            that.toolbar = new kendo.pdfviewer.Toolbar(toolbarElement, toolbarOptions);\n          },\n          _initErrorDialog: function (options) {\n            var that = this;\n\n            if (!that._errorDialog) {\n              options = extend(options, {\n                messages: that.options.messages\n              });\n              var dialogInstance = new kendo.pdfviewer.dialogs.ErrorDialog(options);\n              that._errorDialog = dialogInstance._dialog;\n            }\n\n            return that._errorDialog;\n          },\n          _renderPageContainer: function () {\n            var that = this;\n\n            if (!that.pageContainer) {\n              that.pageContainer = $(\"<div />\");\n              that.pageContainer.addClass(styles.scroller);\n              that.pageContainer.attr(TABINDEX, 0);\n              that.wrapper.append(that.pageContainer);\n            }\n          },\n          _triggerError: function (options) {\n            var dialog = this._initErrorDialog();\n\n            extend(options, {\n              dialog: dialog\n            });\n\n            if (this.pageContainer) {\n              progress(this.pageContainer, false);\n            }\n\n            if (this.trigger(ERROR, options)) {\n              return;\n            }\n\n            dialog.open().content(options.message);\n          },\n          _renderPages: function () {\n            var that = this,\n                document = that.document,\n                pagesData;\n            that.pages = [];\n\n            if (!document || !document.total) {\n              that._renderBlankPage();\n\n              return;\n            }\n\n            pagesData = document.pages;\n\n            for (var i = 1; i <= document.total; i++) {\n              var viewerPage,\n                  pageData = {\n                processor: that.processor,\n                number: i\n              };\n\n              if (pagesData && pagesData.length) {\n                pageData = extend(pageData, pagesData[i - 1]);\n              }\n\n              viewerPage = new Page(pageData, that);\n              that.pages.push(viewerPage);\n              that.pageContainer.append(viewerPage.element);\n            }\n\n            that._attachContainerEvents();\n\n            that._getVisiblePagesCount();\n          },\n          _renderBlankPage: function () {\n            this._blankPage = new Page(this.options.defaultPageSize, this);\n            this.pageContainer.append(this._blankPage.element);\n            this.trigger(UPDATE, {\n              isBlank: true\n            });\n          },\n          _resize: function () {\n            var that = this,\n                containerWidth,\n                ratio;\n\n            if (!that._allowResize) {\n              return;\n            }\n\n            if (!that.pages || !that.pages.length) {\n              if (that._blankPage) {\n                ratio = containerWidth / that._blankPage.element.width();\n\n                that._blankPage.resize(ratio);\n              }\n\n              return;\n            }\n\n            if (that.toolbar) {\n              that.toolbar.resize(true);\n            }\n\n            if (that._resizeHandler) {\n              clearTimeout(that._resizeHandler);\n            }\n\n            that._resizeHandler = setTimeout(that._resizePages.bind(that), 100);\n          },\n          _resizePages: function () {\n            var that = this,\n                containerWidth = that.pageContainer[0].clientWidth,\n                ratio = 0;\n            that.pages.forEach(function (page) {\n              var currentRatio = containerWidth / page.element.width();\n\n              if (currentRatio > ratio) {\n                ratio = currentRatio;\n              }\n            });\n\n            if (that._autoFit) {\n              that.zoom(that._autoFit, true);\n              return;\n            }\n\n            ratio = Math.min(Math.max(ratio, that.options.zoomMin), ZOOM_SCALE);\n\n            if (ratio != that.zoomScale) {\n              that.zoom(ratio, true);\n              that.zoomScale = ratio;\n              that._allowResize = true;\n            }\n          },\n          _attachContainerEvents: function () {\n            var that = this;\n            that._wheel = kendo.throttle(that._wheel.bind(that), 300);\n\n            if (that.processingLib !== PROCESSORS.dpl) {\n              that.pageContainer.on(MOUSEWHEEL, function (e) {\n                if (!e.ctrlKey) {\n                  return;\n                }\n\n                if (document.activeElement !== that.pageContainer[0]) {\n                  that.pageContainer.trigger(\"focus\");\n                }\n\n                that._wheel(e);\n\n                e.preventDefault();\n              });\n            }\n\n            that._scroller = new kendo.mobile.ui.Scroller(that.pageContainer, {\n              zoom: false,\n              elastic: true\n            });\n\n            that._scroller.scrollElement.addClass(styles.enablePanning);\n\n            that._scroller.bind(SCROLL, that._scroll.bind(this));\n          },\n          _scroll: function (e) {\n            var that = this,\n                containerScrollHeight = that.pageContainer[0].scrollHeight,\n                containerHeight = that.pageContainer.height(),\n                containerScrollTop = e.scrollTop,\n                containerOffsetTop = that.pageContainer.offset().top,\n                total = that.pages.length,\n                pageNum = that._pageNum,\n                pageIndex = pageNum - 1,\n                pageToLoadNum = pageNum,\n                pageToLoad,\n                currentPage,\n                currentPageTop,\n                currentPageHeight,\n                previousPage,\n                prevPageTop,\n                prevPageHeight,\n                scrollDirection = containerScrollTop - that._prevScrollTop > 0 ? 1 : -1;\n\n            if (that._preventScroll || !total) {\n              that._preventScroll = false;\n              return;\n            }\n\n            that._scrollingStarted = true;\n            currentPage = that.pages[pageIndex];\n            currentPageTop = currentPage.element.offset().top - containerOffsetTop;\n            currentPageHeight = currentPage.element.height();\n\n            if (scrollDirection == -1 && that.pages[pageIndex + scrollDirection]) {\n              previousPage = that.pages[pageIndex - that._visiblePagesCount] || that.pages[pageIndex + scrollDirection];\n              prevPageTop = previousPage.element.offset().top - containerOffsetTop;\n              prevPageHeight = previousPage.element.height();\n            }\n\n            if (Math.abs(containerScrollTop - (that._prevScrollTop || 0)) > containerHeight * that.zoomScale) {\n              pageToLoadNum = Math.floor(containerScrollTop * (1 / (containerScrollHeight / total))) + 1;\n            } else if (currentPageTop < 0 && Math.abs(currentPageTop) >= currentPageHeight / 2 && scrollDirection === 1) {\n              pageToLoadNum++;\n            } else if (previousPage && Math.abs(prevPageTop) <= prevPageHeight / 2) {\n              pageToLoadNum--;\n            }\n\n            if (pageNum !== pageToLoadNum && pageToLoadNum >= 1 && pageToLoadNum <= total) {\n              pageToLoad = that.pages[pageToLoadNum - 1].element;\n\n              if (pageToLoad.offset().top > containerHeight) {\n                return;\n              }\n\n              that._pageNum = pageToLoadNum;\n\n              that._loadVisiblePages();\n\n              that.trigger(UPDATE, {\n                action: PAGE_CHANGE,\n                page: pageToLoadNum,\n                total: total\n              });\n            }\n\n            that._prevScrollTop = containerScrollTop;\n          },\n          _wheel: function (e) {\n            var originalEvent = e.originalEvent,\n                delta = originalEvent.wheelDelta ? -originalEvent.wheelDelta : originalEvent.detail,\n                zoomIn = delta < 0;\n            this.execute({\n              command: ZOOMCOMMAND,\n              options: {\n                zoomIn: zoomIn,\n                zoomOut: !zoomIn,\n                updateComboBox: true\n              }\n            });\n            e.preventDefault();\n          },\n          zoom: function (scale, preventComboBoxChange) {\n            var that = this;\n\n            if (!scale) {\n              return that.zoomScale;\n            }\n\n            return that.execute({\n              command: ZOOMCOMMAND,\n              options: {\n                scale: scale,\n                updateComboBox: !preventComboBoxChange\n              }\n            });\n          },\n          execute: function (options) {\n            var commandOptions = extend({\n              viewer: this\n            }, options.options);\n            var command = new kendo.pdfviewer[options.command](commandOptions);\n            return command.exec();\n          },\n          _loadDocument: function () {\n            var that = this;\n            var page = that.options.page;\n            progress(that.pageContainer, true);\n            that.processor.fetchDocument().done(function (document) {\n              that._clearPages();\n\n              that.document = document;\n\n              that._renderPages();\n\n              that.resize(true);\n\n              if (document) {\n                page = page >= 1 && page <= document.total ? page : 1;\n                that.activatePage(page);\n              }\n\n              progress(that.pageContainer, false);\n            });\n          },\n          loadPage: function (number) {\n            var page = this.pages && this.pages[number - 1];\n\n            if (page) {\n              return page.load(this.zoomScale);\n            }\n          },\n          activatePage: function (number) {\n            var page = this.pages && this.pages[number - 1],\n                scroller = this._scroller,\n                scrollerTopPosition,\n                scrollerTopOffset,\n                pageTopOffset,\n                pageMargin;\n\n            if (!page) {\n              return;\n            }\n\n            scrollerTopPosition = scroller.scrollTop;\n            scrollerTopOffset = scroller.element.offset().top;\n            pageTopOffset = page.element.offset().top;\n            pageMargin = !this._autoFit ? parseInt(page.element.css(\"marginTop\"), 10) : 0;\n            this._pageNum = number;\n\n            this._loadVisiblePages();\n\n            this._preventScroll = true;\n\n            this._scroller.scrollTo(0, -scrollerTopPosition - pageTopOffset + scrollerTopOffset + pageMargin);\n\n            this.trigger(UPDATE, {\n              action: PAGE_CHANGE,\n              page: number,\n              total: this.pages.length\n            });\n          },\n          _getVisiblePagesCount: function () {\n            var that = this,\n                loadedPagesHeight = 0,\n                updatedVisiblePagesCount = 0,\n                containerHeight = that.pageContainer[0].clientHeight,\n                index = 0;\n\n            while (loadedPagesHeight <= containerHeight && index < that.pages.length) {\n              loadedPagesHeight += that.pages[index].element.height();\n              updatedVisiblePagesCount++;\n              index++;\n            }\n\n            that._visiblePagesCount = updatedVisiblePagesCount;\n          },\n          _loadVisiblePages: function () {\n            var pagesCount = this.pages && this.pages.length,\n                minVisiblePageNum = Math.max(this._pageNum - this._visiblePagesCount, 1),\n                maxVisiblePageNum = Math.min(this._pageNum + this._visiblePagesCount, pagesCount);\n            this._visiblePages = this.pages.slice(minVisiblePageNum - 1, maxVisiblePageNum);\n\n            for (var i = minVisiblePageNum; i <= maxVisiblePageNum; i++) {\n              this.loadPage(i);\n            }\n          },\n          _loadAllPages: function () {\n            var pagesCount = this.pages && this.pages.length;\n            var promises = [];\n\n            for (var i = 0; i <= pagesCount; i++) {\n              promises.push(this.loadPage(i));\n            }\n\n            return promises;\n          },\n          fromFile: function (file) {\n            this.zoomScale = this.options.scale || ZOOM_SCALE;\n            this.zoom(this.zoomScale, true);\n            this.trigger(UPDATE, {\n              action: \"zoom\",\n              zoom: this.options.scale || \"auto\"\n            });\n\n            this.processor._updateDocument(file);\n\n            this._loadDocument();\n          },\n          exportImage: function (options) {\n            var that = this;\n            var pageNumber = options.page;\n            var page = that.pages[pageNumber - 1] || that._blankPage;\n            var rootGroup = new drawing.Group();\n            page.load();\n            var background = kendo.drawing.Path.fromRect(new kendo.geometry.Rect([0, 0], [page.width, page.height]), {\n              fill: {\n                color: WHITECOLOR\n              },\n              stroke: null\n            });\n            progress(that.pageContainer, true);\n            rootGroup.append(background, page.group);\n            drawing.exportImage(rootGroup).done(function (data) {\n              progress(that.pageContainer, false);\n              kendo.saveAs({\n                dataURI: data,\n                fileName: options.fileName,\n                proxyURL: options.proxyURL || \"\",\n                forceProxy: options.forceProxy,\n                proxyTarget: options.proxyTarget\n              });\n            });\n          },\n          exportSVG: function (options) {\n            var that = this;\n            var pageNumber = options.page;\n            var page = that.pages[pageNumber - 1] || that._blankPage;\n            progress(that.pageContainer, true);\n            page.load();\n            drawing.exportSVG(page.group).done(function (data) {\n              progress(that.pageContainer, false);\n              kendo.saveAs({\n                dataURI: data,\n                fileName: options.fileName,\n                proxyURL: options.proxyURL || \"\",\n                forceProxy: options.forceProxy,\n                proxyTarget: options.proxyTarget\n              });\n            });\n          },\n          setOptions: function (options) {\n            var that = this;\n\n            if (options.pdfjsProcessing || options.dplProcessing) {\n              that._initProcessor(options || {});\n            }\n\n            options = $.extend(that.options, options);\n            Widget.fn.setOptions.call(that, options);\n\n            if (options.page) {\n              that._pageNum = options.page;\n              that.activatePage(options.page);\n            }\n\n            if (options.width) {\n              that.element.width(options.width);\n            }\n\n            if (options.height) {\n              that.element.height(options.height);\n            }\n          },\n          destroy: function () {\n            if (this._resizeHandler) {\n              kendo.unbindResize(this._resizeHandler);\n            } //destroy nested components\n\n\n            if (this._errorDialog) {\n              this._errorDialog.destroy();\n            }\n\n            if (this._saveDialog) {\n              this._saveDialog.destroy();\n            }\n\n            if (this._upload) {\n              this._upload.destroy();\n            }\n\n            if (this.toolbar) {\n              this.toolbar.unbind();\n              this.toolbar.destroy();\n              this.toolbar = null;\n            }\n\n            if (this.pages && this.pages.length) {\n              this.pages.forEach(function (page) {\n                page.destroy();\n              });\n              this.pages = [];\n            }\n\n            if (this._scroller) {\n              this._scroller.unbind();\n\n              this._scroller.destroy();\n            }\n\n            this.pageContainer.off(NS);\n            Widget.fn.destroy.call(this);\n          },\n          _clearPages: function () {\n            this.pages = [];\n            this.document = null;\n            this._pageNum = 1;\n            this.pageContainer.off(NS);\n            this.pageContainer.empty();\n\n            if (this._scroller) {\n              this._scroller.reset();\n\n              this._scroller.unbind();\n\n              this._scroller.destroy();\n            }\n          },\n          _toggleSelection: function (enable) {\n            var that = this;\n\n            if (enable === undefined) {\n              enable = true;\n            }\n\n            that._scroller.userEvents._shouldNotMove = enable;\n\n            that._scroller.scrollElement.toggleClass(styles.enableTextSelection, enable);\n\n            that._scroller.scrollElement.toggleClass(styles.enablePanning, !enable);\n          },\n          _initSearchDOM: function () {\n            var that = this;\n            var promise = new Promise(function (resolve) {\n              Promise.all(that._loadAllPages()).then(function () {\n                that._searchDOM = new kendo.pdfviewer.SearchDOM({\n                  target: that._getTextLayers(),\n                  highlightClass: styles.highlightClass,\n                  charClass: styles.charClass\n                });\n                resolve();\n              });\n            });\n            return promise;\n          },\n          _getTextLayers: function () {\n            return this.pages.map(function (page) {\n              return page.textLayer;\n            });\n          }\n        });\n        ui.plugin(PDFViewer);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1387:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./pdfviewer/processors/pdfjs-processor\");\n    /***/\n  },\n\n  /***/\n  1388:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./pdfviewer/processors/dpl-processor\");\n    /***/\n  },\n\n  /***/\n  1389:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./pdfviewer/toolbar\");\n    /***/\n  },\n\n  /***/\n  1390:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./pdfviewer/page\");\n    /***/\n  },\n\n  /***/\n  1391:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./pdfviewer/search\");\n    /***/\n  },\n\n  /***/\n  1392:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./pdfviewer/dialogs\");\n    /***/\n  },\n\n  /***/\n  1393:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./pdfviewer/commands\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}