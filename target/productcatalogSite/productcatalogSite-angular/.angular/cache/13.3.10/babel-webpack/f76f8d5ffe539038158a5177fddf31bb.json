{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(21);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  20:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.core\");\n    /***/\n  },\n\n  /***/\n  21:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(20)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function ($, undefined) {\n        var kendo = window.kendo;\n        var Widget = kendo.ui.Widget;\n        var extend = $.extend;\n        var DOT = \".\";\n        var NS = \".kendoChat\";\n        var DATA_K_BUTTON_NAME = \"kButtonName\";\n        var SCROLL_LEFT_NAME = \"chatToolbarScrollLeft\";\n        var SCROLL_RIGHT_NAME = \"chatToolbarScrollRight\";\n        var VISIBLE = \":visible\";\n        var DEFAULT_ANIMATION = {\n          effects: \"expand:vertical\",\n          duration: 200\n        };\n        var NO_ANIMATION = {\n          expand: {\n            show: true\n          },\n          collapse: {\n            hide: true\n          }\n        };\n        var toolbarStyles = {\n          button: \"k-button\",\n          buttonDefaults: \"k-button-md k-rounded-md k-button-solid k-button-solid-base\",\n          buttonList: \"k-button-list\",\n          scrollButton: \"k-scroll-button\",\n          scrollButtonLeft: \"k-scroll-button-left\",\n          scrollButtonRight: \"k-scroll-button-right\",\n          scrollButtonLeftIcon: \"k-icon k-i-arrow-chevron-left\",\n          scrollButtonRightIcon: \"k-icon k-i-arrow-chevron-right\",\n          iconButton: \"k-icon-button\"\n        };\n        var ChatToolBar = Widget.extend({\n          init: function (element, options) {\n            options = extend({}, options, {\n              name: \"ChatToolbar\"\n            });\n            var toolbarOptions = options.toolbar;\n            var buttonsDefined = toolbarOptions.buttons && toolbarOptions.buttons.length;\n            Widget.fn.init.call(this, element, options);\n\n            if (buttonsDefined) {\n              this._createButtonList();\n            }\n\n            if (buttonsDefined && toolbarOptions.scrollable && this.buttonsWidth() > this.element.width()) {\n              this._initScrolling();\n            }\n\n            this._setupAnimation();\n\n            if (buttonsDefined && toolbarOptions.toggleable) {\n              this.toggle(true);\n            }\n\n            this.element.on(\"click\" + NS, this._onClick.bind(this));\n          },\n          events: [\"click\"],\n          destroy: function () {\n            Widget.fn.destroy.call(this);\n            this.element.off(NS);\n            this.element.empty();\n          },\n          _createButtonList: function () {\n            var that = this;\n            var styles = ChatToolBar.styles;\n            var buttons = that.options.toolbar.buttons;\n            var buttonList = $(\"<div class='\" + styles.buttonList + \"'></div>\");\n\n            for (var i = 0; i < buttons.length; i++) {\n              var button = that._createButton(buttons[i]);\n\n              buttonList.append(button);\n            }\n\n            buttonList.appendTo(this.element);\n            this.buttonList = buttonList;\n          },\n          _createButton: function (btnOptions) {\n            var styles = ChatToolBar.styles;\n            var buttonElm = $(\"<button>\");\n\n            if (typeof btnOptions === \"string\") {\n              btnOptions = {\n                name: btnOptions\n              };\n            }\n\n            buttonElm.attr(btnOptions.attr || {}).attr(\"title\", btnOptions.text || btnOptions.name).attr(\"aria-label\", btnOptions.text || btnOptions.name).attr(\"type\", \"button\").addClass(btnOptions.name).data(DATA_K_BUTTON_NAME, btnOptions.name).addClass(styles.button).addClass(styles.buttonDefaults);\n\n            if (btnOptions.iconClass) {\n              buttonElm.addClass(styles.iconButton);\n              buttonElm.prepend(\"<span class='k-button-icon \" + btnOptions.iconClass + \"'></span>\");\n            }\n\n            return buttonElm;\n          },\n          _onClick: function (ev) {\n            var styles = ChatToolBar.styles;\n            var target = $(ev.target).closest(DOT + styles.button);\n\n            if (target.is(DOT + styles.scrollButton) && !this._scrolling) {\n              this._scroll(target.data(DATA_K_BUTTON_NAME));\n            }\n\n            if (target.data(DATA_K_BUTTON_NAME)) {\n              this.trigger(\"click\", {\n                button: target[0],\n                name: target.data(DATA_K_BUTTON_NAME),\n                originalEvent: ev\n              });\n            }\n          },\n          _initScrolling: function () {\n            var styles = ChatToolBar.styles;\n            this.scrollButtonLeft = this._createButton({\n              name: SCROLL_LEFT_NAME,\n              iconClass: styles.scrollButtonLeftIcon,\n              attr: {\n                \"class\": styles.scrollButton + \" \" + styles.scrollButtonLeft\n              }\n            });\n            this.scrollButtonRight = this._createButton({\n              name: SCROLL_RIGHT_NAME,\n              iconClass: styles.scrollButtonRightIcon,\n              attr: {\n                \"class\": styles.scrollButton + \" \" + styles.scrollButtonRight\n              }\n            });\n            this.element.prepend(this.scrollButtonLeft);\n            this.element.append(this.scrollButtonRight);\n\n            this._refreshScrollButtons();\n\n            this.element.on(\"keydown\" + NS, this._refreshScrollButtons.bind(this));\n          },\n          _scroll: function (commandName) {\n            var that = this;\n            var buttonWidth = that.buttonWidth();\n            var maxScrollSize = this.maxScrollSize();\n            var scrollAmmount = commandName === SCROLL_LEFT_NAME ? buttonWidth * -1 : buttonWidth;\n            var currentScroll = this.currentScrollLeft();\n            var scrollValue = currentScroll + scrollAmmount;\n            scrollValue = Math.min(Math.max(scrollValue, 0), maxScrollSize);\n\n            if (commandName !== SCROLL_LEFT_NAME && commandName !== SCROLL_RIGHT_NAME) {\n              return;\n            }\n\n            kendo.scrollLeft(that.buttonList, scrollValue);\n\n            that._refreshScrollButtons(scrollValue);\n          },\n          _refreshScrollButtons: function (value) {\n            var maxScrollSize = this.maxScrollSize();\n            var currentScrollLeft = value === undefined || isNaN(parseInt(value, 10)) ? this.currentScrollLeft() : value;\n\n            if (!this.scrollButtonLeft && !this.scrollButtonRight) {\n              return;\n            }\n\n            this.scrollButtonLeft.toggle(currentScrollLeft !== 0);\n            this.scrollButtonRight.toggle(currentScrollLeft !== maxScrollSize);\n          },\n          _setupAnimation: function () {\n            var animation = this.options.toolbar.animation;\n            var defaultExpandAnimation = extend({}, DEFAULT_ANIMATION);\n            var defaultCollapseAnimation = extend({\n              reverse: true,\n              hide: true\n            }, DEFAULT_ANIMATION);\n\n            if (animation === false) {\n              animation = extend(true, {}, NO_ANIMATION);\n            } else {\n              animation = extend(true, {\n                expand: defaultExpandAnimation,\n                collapse: defaultCollapseAnimation\n              }, animation);\n            }\n\n            this.options.toolbar.animation = animation;\n          },\n          _animationComplete: function () {\n            this._refreshScrollButtons();\n          },\n          currentScrollLeft: function () {\n            return Math.round(kendo.scrollLeft(this.buttonList));\n          },\n          maxScrollSize: function () {\n            return Math.round(this.buttonList[0].scrollWidth - this.buttonList[0].clientWidth);\n          },\n          buttons: function () {\n            var styles = ChatToolBar.styles;\n            return this.buttonList ? this.buttonList.children(DOT + styles.button) : null;\n          },\n          buttonWidth: function () {\n            return Math.round(this.buttons().last().outerWidth(true));\n          },\n          buttonsWidth: function () {\n            var width = 0;\n\n            if (this.buttons()) {\n              width = this.buttonWidth() * this.buttons().length;\n            }\n\n            return width;\n          },\n          toggle: function (skipAnimation) {\n            var animation = this.options.toolbar.animation;\n\n            if (skipAnimation) {\n              animation = extend(true, {}, NO_ANIMATION);\n            }\n\n            animation.expand.complete = this._animationComplete.bind(this);\n            animation.collapse.complete = this._animationComplete.bind(this);\n\n            if (this.element.is(VISIBLE)) {\n              this.element.kendoStop().kendoAnimate(animation.collapse);\n            } else {\n              this.element.kendoStop().kendoAnimate(animation.expand);\n            }\n          }\n        });\n        extend(true, ChatToolBar, {\n          styles: toolbarStyles\n        });\n        extend(kendo.chat, {\n          ChatToolBar: ChatToolBar\n        });\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}