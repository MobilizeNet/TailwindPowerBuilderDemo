{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1083);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1051:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.core\");\n    /***/\n  },\n\n  /***/\n  1083:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1051)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"badge\",\n        name: \"Badge\",\n        category: \"web\",\n        // suite\n        description: \"The Badge decorates avatars, navigation menus, or other components in the application when visual notification is needed\",\n        depends: [\"core\"] // dependencies\n\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo;\n        var Widget = kendo.ui.Widget;\n        var ui = kendo.ui;\n        var HIDDEN = 'k-hidden';\n        var iconTemplate = '<span class=\\'k-badge-icon k-icon k-i-#= icon #\\'></span>';\n        var svgIconTemplate = '<span class=\\'k-badge-icon k-svg-icon\\'>#= icon #</span>';\n        var Badge = Widget.extend({\n          init: function (element, options) {\n            var that = this;\n            Widget.fn.init.call(that, element, options);\n\n            that._content();\n\n            that._appearance();\n\n            kendo.notify(that);\n          },\n          destroy: function () {\n            var that = this;\n            Widget.fn.destroy.call(that);\n          },\n          options: {\n            name: 'Badge',\n            cutoutBorder: false,\n            data: {},\n            fill: 'solid',\n            icon: '',\n            max: Infinity,\n            position: 'inline',\n            align: '',\n            sizes: {\n              'small': 'sm',\n              'medium': 'md',\n              'large': 'lg'\n            },\n            size: 'medium',\n            shape: 'rounded',\n            template: null,\n            text: '',\n            themeColor: 'secondary',\n            visible: true,\n            _classNames: []\n          },\n          _content: function () {\n            var that = this;\n            var text = that.options.text;\n            var template = that.options.template;\n            var data = that.options.data;\n            var icon = that.options.icon; // Order of precedence\n            // 1) template\n            // 2) icon\n            // 3) text\n            // 4) content\n\n            if (template !== null) {\n              that._text = text;\n              that._template = kendo.template(template).bind(that);\n              that.element.html(that._template(data));\n              return;\n            }\n\n            if (icon !== '') {\n              that.icon(icon);\n              return;\n            }\n\n            if (text !== '') {\n              that.text(text);\n              return;\n            }\n\n            that.text(that.element.html());\n          },\n          _appearance: function () {\n            var that = this;\n            that._themeColor = that.options.themeColor;\n            that._shape = that.options.shape;\n            that._sizes = that.options.sizes;\n            that._size = that.options.size;\n            that._fill = that.options.fill;\n            that._cutoutBorder = that.options.cutoutBorder;\n            that._align = that.options.align;\n            that._position = that.options.position;\n            that._visible = that.options.visible;\n\n            that._updateClassNames();\n          },\n          _updateClassNames: function () {\n            var that = this;\n            var classNames = ['k-badge'];\n            var keepClassNames = that.options._classNames;\n            var themeColor = that._themeColor;\n            var shape = that._shape;\n            var sizes = that._sizes;\n            var size = that._size;\n            var sizeAbbr = sizes[size] === undefined ? size : sizes[size];\n            var fill = that._fill;\n            var cutoutBorder = that._cutoutBorder;\n            var align = that._align;\n            var position = that._position;\n            var visible = that._visible; // Remove all class names\n\n            that.element.removeClass(function (index, className) {\n              if (className.indexOf('k-') === 0 && keepClassNames.indexOf(className) === -1) {\n                that.element.removeClass(className);\n              }\n            }); // Fill\n\n            if (typeof fill === 'string' && fill !== '') {\n              classNames.push('k-badge-' + fill);\n            } // Color\n\n\n            if (typeof themeColor === 'string' && themeColor !== '') {\n              classNames.push('k-badge-' + themeColor);\n            } // Size\n\n\n            if (typeof size === 'string' && size !== '') {\n              classNames.push('k-badge-' + sizeAbbr);\n            } // Shape\n\n\n            if (typeof shape === 'string' && shape !== '') {\n              classNames.push('k-badge-' + shape);\n            } // Cutout border\n\n\n            if (typeof cutoutBorder === 'boolean' && cutoutBorder === true) {\n              classNames.push('k-badge-border-cutout');\n            } // Position\n\n\n            if (typeof position === 'string' && position !== '') {\n              classNames.push('k-badge-' + position);\n            } // Align\n\n\n            if (typeof position === 'string' && position !== '' && position !== 'inline' && typeof align === 'string' && align.split(' ').length == 2) {\n              classNames.push('k-' + align.replace(' ', '-'));\n            } // Visibility\n\n\n            if (visible === false) {\n              classNames.push(HIDDEN);\n            } // Apply classnames\n\n\n            that.element.addClass(classNames.join(' '));\n          },\n          setOptions: function (options) {\n            var that = this;\n            that.element.removeClass(function (index, className) {\n              if (className.indexOf('k-') >= 0) {\n                that.element.removeClass(className);\n              }\n            });\n            Widget.fn.setOptions.call(that, options);\n\n            that._content();\n\n            that._appearance();\n          },\n          text: function (text) {\n            var that = this;\n            var max = that.options.max; // handle badge.text()\n\n            if (arguments.length === 0 || text === undefined) {\n              return that._text;\n            }\n\n            that._text = text; // handle badge.text(true|false|null)\n\n            if (text === true || text === false || text === null) {\n              that.element.html('');\n              return;\n            } // handle badge.text('string')\n\n\n            if (typeof text === 'string') {\n              that.element.html(text);\n              return;\n            } // handle badge.text(1)\n\n\n            if (typeof text === 'number') {\n              if (text > max) {\n                that.element.html(max + '+');\n              } else {\n                that.element.html(text);\n              }\n\n              return;\n            } // handle other objects\n\n\n            if (typeof text === 'object' && 'toString' in text) {\n              that.element.html(text.toString());\n              return;\n            }\n          },\n          icon: function (icon) {\n            var that = this;\n            var iconTemplateFunction; // handle badge.icon()\n\n            if (arguments.length === 0 || icon === undefined) {\n              return that._icon;\n            }\n\n            that._icon = icon; // Handle badge.icon(<SVG />)\n\n            if (icon.indexOf('<svg') === 0) {\n              iconTemplateFunction = kendo.template(svgIconTemplate);\n              that.element.html(iconTemplateFunction({\n                icon: icon\n              }));\n              return;\n            } // Handle badge.icon(ICON_NAME)\n\n\n            iconTemplateFunction = kendo.template(iconTemplate);\n            that.element.html(iconTemplateFunction({\n              icon: icon\n            }));\n          },\n          themeColor: function (color) {\n            var that = this; // handle badge.color()\n\n            if (arguments.length === 0 || color === undefined) {\n              return that._themeColor;\n            }\n\n            that._themeColor = color;\n\n            that._updateClassNames();\n          },\n          shape: function (shape) {\n            var that = this; // handle badge.shape()\n\n            if (arguments.length === 0 || shape === undefined) {\n              return that._shape;\n            }\n\n            that._shape = shape;\n\n            that._updateClassNames();\n          },\n          hide: function () {\n            var that = this;\n            that._visible = false;\n\n            that._updateClassNames();\n          },\n          show: function () {\n            var that = this;\n            that._visible = true;\n\n            that._updateClassNames();\n          }\n        });\n        ui.plugin(Badge);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}