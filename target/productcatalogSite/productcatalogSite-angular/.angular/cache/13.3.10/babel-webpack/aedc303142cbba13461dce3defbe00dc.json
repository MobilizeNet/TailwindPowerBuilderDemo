{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1149);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1057:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.drawing\");\n    /***/\n  },\n\n  /***/\n  1138:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.dataviz.core\");\n    /***/\n  },\n\n  /***/\n  1149:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1138), __webpack_require__(1057)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"dataviz.barcode\",\n        name: \"Barcode\",\n        category: \"dataviz\",\n        description: \"Barcode widget\",\n        depends: [\"dataviz.core\"]\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n            extend = $.extend,\n            deepExtend = kendo.deepExtend,\n            inArray = $.inArray,\n            isPlainObject = $.isPlainObject,\n            draw = kendo.drawing,\n            geom = kendo.geometry,\n            util = kendo.drawing.util,\n            defined = util.defined,\n            dataviz = kendo.dataviz,\n            Box2D = dataviz.Box2D,\n            TextBox = dataviz.TextBox,\n            DEFAULT_WIDTH = 300,\n            DEFAULT_HEIGHT = 100,\n            DEFAULT_QUIETZONE_LENGTH = 10,\n            numberRegex = /^\\d+$/,\n            alphanumericRegex = /^[a-z0-9]+$/i,\n            InvalidCharacterErrorTemplate = \"Character '{0}' is not valid for symbology {1}\";\n\n        function getNext(value, index, count) {\n          return value.substring(index, index + count);\n        }\n\n        var Encoding = kendo.Class.extend({\n          init: function (options) {\n            this.setOptions(options);\n          },\n          setOptions: function (options) {\n            var that = this;\n            that.options = extend({}, that.options, options);\n            that.quietZoneLength = that.options.addQuietZone ? 2 * that.options.quietZoneLength : 0;\n          },\n          encode: function (value, width, height) {\n            var that = this;\n\n            if (defined(value)) {\n              value += '';\n            }\n\n            that.initValue(value, width, height);\n\n            if (that.options.addQuietZone) {\n              that.addQuietZone();\n            }\n\n            that.addData();\n\n            if (that.options.addQuietZone) {\n              that.addQuietZone();\n            }\n\n            return {\n              baseUnit: that.baseUnit,\n              pattern: that.pattern\n            };\n          },\n          options: {\n            quietZoneLength: DEFAULT_QUIETZONE_LENGTH,\n            addQuietZone: true,\n            addCheckSum: true\n          },\n          initValue: function () {},\n          addQuietZone: function () {\n            this.pattern.push(this.options.quietZoneLength || DEFAULT_QUIETZONE_LENGTH);\n          },\n          addData: function () {},\n          invalidCharacterError: function (character) {\n            throw new Error(kendo.format(InvalidCharacterErrorTemplate, character, this.name));\n          }\n        });\n        var encodings = {};\n        var code39Base = Encoding.extend({\n          minBaseUnitLength: 0.7,\n          addData: function () {\n            var that = this,\n                value = that.value;\n            that.addStart();\n\n            for (var idx = 0; idx < value.length; idx++) {\n              that.addCharacter(value.charAt(idx));\n            }\n\n            if (that.options.addCheckSum) {\n              that.pushCheckSum();\n            }\n\n            that.addStop();\n            that.prepareValues();\n          },\n          addCharacter: function (character) {\n            var that = this,\n                charData = that.characterMap[character];\n\n            if (!charData) {\n              that.invalidCharacterError(character);\n            }\n\n            that.addBase(charData);\n          },\n          addBase: function () {}\n        });\n        var code39ExtendedBase = {\n          addCharacter: function (character) {\n            var that = this;\n\n            if (that.characterMap[character]) {\n              that.addBase(that.characterMap[character]);\n            } else if (character.charCodeAt(0) > 127) {\n              that.invalidCharacterError(character);\n            } else {\n              that.addExtended(character.charCodeAt(0));\n            }\n          },\n          addExtended: function (code) {\n            var that = this,\n                patterns;\n\n            for (var i = 0; i < that.extendedMappings.length; i++) {\n              if (patterns = that.extendedMappings[i].call(that, code)) {\n                for (var j = 0; j < patterns.length; j++) {\n                  that.addBase(patterns[j]);\n                }\n\n                that.dataLength += patterns.length - 1;\n                return;\n              }\n            }\n          },\n          extendedMappings: [function (code) {\n            if (97 <= code && code <= 122) {\n              var that = this;\n              return [that.characterMap[that.shiftCharacters[0]], that.characterMap[String.fromCharCode(code - 32)]];\n            }\n          }, function (code) {\n            if (33 <= code && code <= 58) {\n              var that = this;\n              return [that.characterMap[that.shiftCharacters[1]], that.characterMap[String.fromCharCode(code + 32)]];\n            }\n          }, function (code) {\n            if (1 <= code && code <= 26) {\n              var that = this;\n              return [that.characterMap[that.shiftCharacters[2]], that.characterMap[String.fromCharCode(code + 64)]];\n            }\n          }, function (code) {\n            var that = this,\n                result,\n                dataCharacter;\n\n            if (!that.specialAsciiCodes[code]) {\n              dataCharacter = Math.floor(code / 32) * 6 + (code - 27) % 32 + 64;\n              result = [that.characterMap[that.shiftCharacters[3]], that.characterMap[String.fromCharCode(dataCharacter)]];\n            } else {\n              result = [];\n\n              for (var i = 0; i < that.specialAsciiCodes[code].length; i++) {\n                result.push(that.characterMap[that.shiftCharacters[3]]);\n                result.push(that.characterMap[that.specialAsciiCodes[code][i]]);\n              }\n            }\n\n            return result;\n          }],\n          specialAsciiCodes: {\n            \"0\": [\"U\"],\n            \"64\": [\"V\"],\n            \"96\": [\"W\"],\n            \"127\": [\"T\", \"X\", \"Y\", \"Z\"]\n          },\n          shiftValuesAsciiCodes: {\n            \"39\": 36,\n            \"40\": 47,\n            \"41\": 43,\n            \"42\": 37\n          },\n          characterMap: {\n            \"+\": false,\n            \"/\": false,\n            \"$\": false,\n            \"%\": false\n          },\n          shiftCharacters: [\"SHIFT0\", \"SHIFT1\", \"SHIFT2\", \"SHIFT3\"]\n        };\n        encodings.code39 = code39Base.extend({\n          name: \"Code 39\",\n          checkSumMod: 43,\n          minRatio: 2.5,\n          maxRatio: 3,\n          gapWidth: 1,\n          splitCharacter: \"|\",\n          initValue: function (value, width, height) {\n            var that = this;\n            that.width = width;\n            that.height = height;\n            that.value = value;\n            that.dataLength = value.length;\n            that.pattern = [];\n            that.patternString = \"\";\n          },\n          prepareValues: function () {\n            var that = this,\n                baseUnit,\n                minBaseUnit = that.minBaseUnitLength,\n                ratio = that.maxRatio,\n                minRatio = that.minRatio,\n                minHeight = Math.max(0.15 * that.width, 24);\n\n            if (that.height < minHeight) {\n              throw new Error(\"Insufficient Height. The minimum height for value: \" + that.value + \" is: \" + minHeight);\n            }\n\n            while ((baseUnit = that.getBaseUnit(ratio)) < minBaseUnit && ratio > minRatio) {\n              ratio = parseFloat((ratio - 0.1).toFixed(1));\n            }\n\n            if (baseUnit < minBaseUnit) {\n              var minWidth = Math.ceil(that.getBaseWidth(minRatio) * minBaseUnit);\n              throw new Error(\"Insufficient width. The minimum width for value: \" + that.value + \" is: \" + minWidth);\n            }\n\n            that.ratio = ratio;\n            that.baseUnit = baseUnit;\n            that.patternString = that.patternString.substring(0, that.patternString.length - 1);\n            that.pattern = that.pattern.concat(that.patternString.replace(/ratio/g, ratio).split(that.splitCharacter));\n          },\n          getBaseUnit: function (ratio) {\n            return this.width / this.getBaseWidth(ratio);\n          },\n          getBaseWidth: function (ratio) {\n            var that = this,\n                characterLength = 3 * (ratio + 2);\n            return that.quietZoneLength + characterLength * (that.dataLength + 2) + that.gapWidth * (that.dataLength + 1);\n          },\n          addStart: function () {\n            var that = this;\n            that.addPattern(that.characterMap.START.pattern);\n            that.addCharacterGap();\n          },\n          addBase: function (character) {\n            this.addPattern(character.pattern);\n            this.addCharacterGap();\n          },\n          addStop: function () {\n            this.addPattern(this.characterMap.START.pattern);\n          },\n          addPattern: function (pattern) {\n            for (var i = 0; i < pattern.length; i++) {\n              this.patternString += this.patternMappings[pattern.charAt(i)];\n            }\n          },\n          addCharacterGap: function () {\n            var that = this;\n            that.patternString += that.gapWidth + that.splitCharacter;\n          },\n          patternMappings: {\n            \"b\": \"1|\",\n            \"w\": \"1|\",\n            \"B\": \"ratio|\",\n            \"W\": \"ratio|\"\n          },\n          characterMap: {\n            \"0\": {\n              \"pattern\": \"bwbWBwBwb\",\n              \"value\": 0\n            },\n            \"1\": {\n              \"pattern\": \"BwbWbwbwB\",\n              \"value\": 1\n            },\n            \"2\": {\n              \"pattern\": \"bwBWbwbwB\",\n              \"value\": 2\n            },\n            \"3\": {\n              \"pattern\": \"BwBWbwbwb\",\n              \"value\": 3\n            },\n            \"4\": {\n              \"pattern\": \"bwbWBwbwB\",\n              \"value\": 4\n            },\n            \"5\": {\n              \"pattern\": \"BwbWBwbwb\",\n              \"value\": 5\n            },\n            \"6\": {\n              \"pattern\": \"bwBWBwbwb\",\n              \"value\": 6\n            },\n            \"7\": {\n              \"pattern\": \"bwbWbwBwB\",\n              \"value\": 7\n            },\n            \"8\": {\n              \"pattern\": \"BwbWbwBwb\",\n              \"value\": 8\n            },\n            \"9\": {\n              \"pattern\": \"bwBWbwBwb\",\n              \"value\": 9\n            },\n            \"A\": {\n              \"pattern\": \"BwbwbWbwB\",\n              \"value\": 10\n            },\n            \"B\": {\n              \"pattern\": \"bwBwbWbwB\",\n              \"value\": 11\n            },\n            \"C\": {\n              \"pattern\": \"BwBwbWbwb\",\n              \"value\": 12\n            },\n            \"D\": {\n              \"pattern\": \"bwbwBWbwB\",\n              \"value\": 13\n            },\n            \"E\": {\n              \"pattern\": \"BwbwBWbwb\",\n              \"value\": 14\n            },\n            \"F\": {\n              \"pattern\": \"bwBwBWbwb\",\n              \"value\": 15\n            },\n            \"G\": {\n              \"pattern\": \"bwbwbWBwB\",\n              \"value\": 16\n            },\n            \"H\": {\n              \"pattern\": \"BwbwbWBwb\",\n              \"value\": 17\n            },\n            \"I\": {\n              \"pattern\": \"bwBwbWBwb\",\n              \"value\": 18\n            },\n            \"J\": {\n              \"pattern\": \"bwbwBWBwb\",\n              \"value\": 19\n            },\n            \"K\": {\n              \"pattern\": \"BwbwbwbWB\",\n              \"value\": 20\n            },\n            \"L\": {\n              \"pattern\": \"bwBwbwbWB\",\n              \"value\": 21\n            },\n            \"M\": {\n              \"pattern\": \"BwBwbwbWb\",\n              \"value\": 22\n            },\n            \"N\": {\n              \"pattern\": \"bwbwBwbWB\",\n              \"value\": 23\n            },\n            \"O\": {\n              \"pattern\": \"BwbwBwbWb\",\n              \"value\": 24\n            },\n            \"P\": {\n              \"pattern\": \"bwBwBwbWb\",\n              \"value\": 25\n            },\n            \"Q\": {\n              \"pattern\": \"bwbwbwBWB\",\n              \"value\": 26\n            },\n            \"R\": {\n              \"pattern\": \"BwbwbwBWb\",\n              \"value\": 27\n            },\n            \"S\": {\n              \"pattern\": \"bwBwbwBWb\",\n              \"value\": 28\n            },\n            \"T\": {\n              \"pattern\": \"bwbwBwBWb\",\n              \"value\": 29\n            },\n            \"U\": {\n              \"pattern\": \"BWbwbwbwB\",\n              \"value\": 30\n            },\n            \"V\": {\n              \"pattern\": \"bWBwbwbwB\",\n              \"value\": 31\n            },\n            \"W\": {\n              \"pattern\": \"BWBwbwbwb\",\n              \"value\": 32\n            },\n            \"X\": {\n              \"pattern\": \"bWbwBwbwB\",\n              \"value\": 33\n            },\n            \"Y\": {\n              \"pattern\": \"BWbwBwbwb\",\n              \"value\": 34\n            },\n            \"Z\": {\n              \"pattern\": \"bWBwBwbwb\",\n              \"value\": 35\n            },\n            \"-\": {\n              \"pattern\": \"bWbwbwBwB\",\n              \"value\": 36\n            },\n            \".\": {\n              \"pattern\": \"BWbwbwBwb\",\n              \"value\": 37\n            },\n            \" \": {\n              \"pattern\": \"bWBwbwBwb\",\n              \"value\": 38\n            },\n            \"$\": {\n              \"pattern\": \"bWbWbWbwb\",\n              \"value\": 39\n            },\n            \"/\": {\n              \"pattern\": \"bWbWbwbWb\",\n              \"value\": 40\n            },\n            \"+\": {\n              \"pattern\": \"bWbwbWbWb\",\n              \"value\": 41\n            },\n            \"%\": {\n              \"pattern\": \"bwbWbWbWb\",\n              \"value\": 42\n            },\n            START: {\n              pattern: \"bWbwBwBwb\"\n            }\n          },\n          options: {\n            addCheckSum: false\n          }\n        });\n        encodings.code39extended = encodings.code39.extend(deepExtend({}, code39ExtendedBase, {\n          name: \"Code 39 extended\",\n          characterMap: {\n            SHIFT0: {\n              \"pattern\": \"bWbwbWbWb\",\n              \"value\": 41\n            },\n            SHIFT1: {\n              \"pattern\": \"bWbWbwbWb\",\n              \"value\": 40\n            },\n            SHIFT2: {\n              \"pattern\": \"bWbWbWbwb\",\n              \"value\": 39\n            },\n            SHIFT3: {\n              \"pattern\": \"bwbWbWbWb\",\n              \"value\": 42\n            }\n          }\n        }));\n        encodings.code93 = code39Base.extend({\n          name: \"Code 93\",\n          cCheckSumTotal: 20,\n          kCheckSumTotal: 15,\n          checkSumMod: 47,\n          initValue: function (value, width, height) {\n            var that = this;\n            that.value = value;\n            that.width = width;\n            that.height = height;\n            that.pattern = [];\n            that.values = [];\n            that.dataLength = value.length;\n          },\n          prepareValues: function () {\n            var that = this,\n                minHeight = Math.max(0.15 * that.width, 24);\n\n            if (that.height < minHeight) {\n              throw new Error(\"Insufficient Height\");\n            }\n\n            that.setBaseUnit();\n\n            if (that.baseUnit < that.minBaseUnitLength) {\n              throw new Error(\"Insufficient Width\");\n            }\n          },\n          setBaseUnit: function () {\n            var that = this,\n                checkSumLength = 2;\n            that.baseUnit = that.width / (9 * (that.dataLength + 2 + checkSumLength) + that.quietZoneLength + 1);\n          },\n          addStart: function () {\n            var pattern = this.characterMap.START.pattern;\n            this.addPattern(pattern);\n          },\n          addStop: function () {\n            var that = this;\n            that.addStart();\n            that.pattern.push(that.characterMap.TERMINATION_BAR);\n          },\n          addBase: function (charData) {\n            this.addPattern(charData.pattern);\n            this.values.push(charData.value);\n          },\n          pushCheckSum: function () {\n            var that = this,\n                checkValues = that._getCheckValues(),\n                charData;\n\n            that.checksum = checkValues.join(\"\");\n\n            for (var i = 0; i < checkValues.length; i++) {\n              charData = that.characterMap[that._findCharacterByValue(checkValues[i])];\n              that.addPattern(charData.pattern);\n            }\n          },\n          _getCheckValues: function () {\n            var that = this,\n                values = that.values,\n                length = values.length,\n                wightedSum = 0,\n                cValue,\n                kValue,\n                idx;\n\n            for (idx = length - 1; idx >= 0; idx--) {\n              wightedSum += that.weightedValue(values[idx], length - idx, that.cCheckSumTotal);\n            }\n\n            cValue = wightedSum % that.checkSumMod;\n            wightedSum = that.weightedValue(cValue, 1, that.kCheckSumTotal);\n\n            for (idx = length - 1; idx >= 0; idx--) {\n              wightedSum += that.weightedValue(values[idx], length - idx + 1, that.kCheckSumTotal);\n            }\n\n            kValue = wightedSum % that.checkSumMod;\n            return [cValue, kValue];\n          },\n          _findCharacterByValue: function (value) {\n            for (var character in this.characterMap) {\n              if (this.characterMap[character].value === value) {\n                return character;\n              }\n            }\n          },\n          weightedValue: function (value, index, total) {\n            return (index % total || total) * value;\n          },\n          addPattern: function (pattern) {\n            var value;\n\n            for (var i = 0; i < pattern.length; i++) {\n              value = parseInt(pattern.charAt(i), 10);\n              this.pattern.push(value);\n            }\n          },\n          characterMap: {\n            \"0\": {\n              \"pattern\": \"131112\",\n              \"value\": 0\n            },\n            \"1\": {\n              \"pattern\": \"111213\",\n              \"value\": 1\n            },\n            \"2\": {\n              \"pattern\": \"111312\",\n              \"value\": 2\n            },\n            \"3\": {\n              \"pattern\": \"111411\",\n              \"value\": 3\n            },\n            \"4\": {\n              \"pattern\": \"121113\",\n              \"value\": 4\n            },\n            \"5\": {\n              \"pattern\": \"121212\",\n              \"value\": 5\n            },\n            \"6\": {\n              \"pattern\": \"121311\",\n              \"value\": 6\n            },\n            \"7\": {\n              \"pattern\": \"111114\",\n              \"value\": 7\n            },\n            \"8\": {\n              \"pattern\": \"131211\",\n              \"value\": 8\n            },\n            \"9\": {\n              \"pattern\": \"141111\",\n              \"value\": 9\n            },\n            \"A\": {\n              \"pattern\": \"211113\",\n              \"value\": 10\n            },\n            \"B\": {\n              \"pattern\": \"211212\",\n              \"value\": 11\n            },\n            \"C\": {\n              \"pattern\": \"211311\",\n              \"value\": 12\n            },\n            \"D\": {\n              \"pattern\": \"221112\",\n              \"value\": 13\n            },\n            \"E\": {\n              \"pattern\": \"221211\",\n              \"value\": 14\n            },\n            \"F\": {\n              \"pattern\": \"231111\",\n              \"value\": 15\n            },\n            \"G\": {\n              \"pattern\": \"112113\",\n              \"value\": 16\n            },\n            \"H\": {\n              \"pattern\": \"112212\",\n              \"value\": 17\n            },\n            \"I\": {\n              \"pattern\": \"112311\",\n              \"value\": 18\n            },\n            \"J\": {\n              \"pattern\": \"122112\",\n              \"value\": 19\n            },\n            \"K\": {\n              \"pattern\": \"132111\",\n              \"value\": 20\n            },\n            \"L\": {\n              \"pattern\": \"111123\",\n              \"value\": 21\n            },\n            \"M\": {\n              \"pattern\": \"111222\",\n              \"value\": 22\n            },\n            \"N\": {\n              \"pattern\": \"111321\",\n              \"value\": 23\n            },\n            \"O\": {\n              \"pattern\": \"121122\",\n              \"value\": 24\n            },\n            \"P\": {\n              \"pattern\": \"131121\",\n              \"value\": 25\n            },\n            \"Q\": {\n              \"pattern\": \"212112\",\n              \"value\": 26\n            },\n            \"R\": {\n              \"pattern\": \"212211\",\n              \"value\": 27\n            },\n            \"S\": {\n              \"pattern\": \"211122\",\n              \"value\": 28\n            },\n            \"T\": {\n              \"pattern\": \"211221\",\n              \"value\": 29\n            },\n            \"U\": {\n              \"pattern\": \"221121\",\n              \"value\": 30\n            },\n            \"V\": {\n              \"pattern\": \"222111\",\n              \"value\": 31\n            },\n            \"W\": {\n              \"pattern\": \"112122\",\n              \"value\": 32\n            },\n            \"X\": {\n              \"pattern\": \"112221\",\n              \"value\": 33\n            },\n            \"Y\": {\n              \"pattern\": \"122121\",\n              \"value\": 34\n            },\n            \"Z\": {\n              \"pattern\": \"123111\",\n              \"value\": 35\n            },\n            \"-\": {\n              \"pattern\": \"121131\",\n              \"value\": 36\n            },\n            \".\": {\n              \"pattern\": \"311112\",\n              \"value\": 37\n            },\n            \" \": {\n              \"pattern\": \"311211\",\n              \"value\": 38\n            },\n            \"$\": {\n              \"pattern\": \"321111\",\n              \"value\": 39\n            },\n            \"/\": {\n              \"pattern\": \"112131\",\n              \"value\": 40\n            },\n            \"+\": {\n              \"pattern\": \"113121\",\n              \"value\": 41\n            },\n            \"%\": {\n              \"pattern\": \"211131\",\n              \"value\": 42\n            },\n            SHIFT0: {\n              \"pattern\": \"122211\",\n              \"value\": 46\n            },\n            SHIFT1: {\n              \"pattern\": \"311121\",\n              \"value\": 45\n            },\n            SHIFT2: {\n              \"pattern\": \"121221\",\n              \"value\": 43\n            },\n            SHIFT3: {\n              \"pattern\": \"312111\",\n              \"value\": 44\n            },\n            START: {\n              \"pattern\": \"111141\"\n            },\n            TERMINATION_BAR: \"1\"\n          }\n        });\n        encodings.code93extended = encodings.code93.extend(deepExtend({}, code39ExtendedBase, {\n          name: \"Code 93 extended\",\n          pushCheckSum: function () {\n            var that = this,\n                checkValues = that._getCheckValues(),\n                value;\n\n            that.checksum = checkValues.join(\"\");\n\n            for (var i = 0; i < checkValues.length; i++) {\n              value = checkValues[i];\n\n              if (that.shiftValuesAsciiCodes[value]) {\n                that.addExtended(that.shiftValuesAsciiCodes[value]);\n              } else {\n                that.addPattern(that.characterMap[that._findCharacterByValue(value)].pattern);\n              }\n            }\n          }\n        }));\n        var state128 = kendo.Class.extend({\n          init: function (encoding) {\n            this.encoding = encoding;\n          },\n          addStart: function () {},\n          is: function () {},\n          move: function () {},\n          pushState: function () {}\n        });\n        var state128AB = state128.extend({\n          FNC4: \"FNC4\",\n          init: function (encoding, states) {\n            var that = this;\n            that.encoding = encoding;\n            that.states = states;\n\n            that._initMoves(states);\n          },\n          addStart: function () {\n            this.encoding.addPattern(this.START);\n          },\n          is: function (value, index) {\n            var code = value.charCodeAt(index);\n            return this.isCode(code);\n          },\n          move: function (encodingState) {\n            var that = this,\n                idx = 0;\n\n            while (!that._moves[idx].call(that, encodingState) && idx < that._moves.length) {\n              idx++;\n            }\n          },\n          pushState: function (encodingState) {\n            var that = this,\n                states = that.states,\n                value = encodingState.value,\n                maxLength = value.length,\n                code;\n\n            if (inArray(\"C\", states) >= 0) {\n              var numberMatch = value.substr(encodingState.index).match(/\\d{4,}/g);\n\n              if (numberMatch) {\n                maxLength = value.indexOf(numberMatch[0], encodingState.index);\n              }\n            }\n\n            while ((code = encodingState.value.charCodeAt(encodingState.index)) >= 0 && that.isCode(code) && encodingState.index < maxLength) {\n              that.encoding.addPattern(that.getValue(code));\n              encodingState.index++;\n            }\n          },\n          _initMoves: function (states) {\n            var that = this;\n            that._moves = [];\n\n            if (inArray(that.FNC4, states) >= 0) {\n              that._moves.push(that._moveFNC);\n            }\n\n            if (inArray(that.shiftKey, states) >= 0) {\n              that._moves.push(that._shiftState);\n            }\n\n            that._moves.push(that._moveState);\n          },\n          _moveFNC: function (encodingState) {\n            if (encodingState.fnc) {\n              encodingState.fnc = false;\n              return encodingState.previousState == this.key;\n            }\n          },\n          _shiftState: function (encodingState) {\n            var that = this;\n\n            if (encodingState.previousState == that.shiftKey && (encodingState.index + 1 >= encodingState.value.length || that.encoding[that.shiftKey].is(encodingState.value, encodingState.index + 1))) {\n              that.encoding.addPattern(that.SHIFT);\n              encodingState.shifted = true;\n              return true;\n            }\n          },\n          _moveState: function () {\n            this.encoding.addPattern(this.MOVE);\n            return true;\n          },\n          SHIFT: 98\n        });\n        var states128 = {};\n        states128.A = state128AB.extend({\n          key: \"A\",\n          shiftKey: \"B\",\n          isCode: function (code) {\n            return 0 <= code && code < 96;\n          },\n          getValue: function (code) {\n            if (code < 32) {\n              return code + 64;\n            }\n\n            return code - 32;\n          },\n          MOVE: 101,\n          START: 103\n        });\n        states128.B = state128AB.extend({\n          key: \"B\",\n          shiftKey: \"A\",\n          isCode: function (code) {\n            return 32 <= code && code < 128;\n          },\n          getValue: function (code) {\n            return code - 32;\n          },\n          MOVE: 100,\n          START: 104\n        });\n        states128.C = state128.extend({\n          key: \"C\",\n          addStart: function () {\n            this.encoding.addPattern(this.START);\n          },\n          is: function (value, index) {\n            var next4 = getNext(value, index, 4);\n            return (index + 4 <= value.length || value.length == 2) && numberRegex.test(next4);\n          },\n          move: function () {\n            this.encoding.addPattern(this.MOVE);\n          },\n          pushState: function (encodingState) {\n            var code;\n\n            while ((code = getNext(encodingState.value, encodingState.index, 2)) && numberRegex.test(code) && code.length == 2) {\n              this.encoding.addPattern(parseInt(code, 10));\n              encodingState.index += 2;\n            }\n          },\n          getValue: function (code) {\n            return code;\n          },\n          MOVE: 99,\n          START: 105\n        });\n        states128.FNC4 = state128.extend({\n          key: \"FNC4\",\n          dependentStates: [\"A\", \"B\"],\n          init: function (encoding, states) {\n            this.encoding = encoding;\n\n            this._initSubStates(states);\n          },\n          addStart: function (encodingState) {\n            var code = encodingState.value.charCodeAt(0) - 128,\n                subState = this._getSubState(code);\n\n            this.encoding[subState].addStart();\n          },\n          is: function (value, index) {\n            var code = value.charCodeAt(index);\n            return this.isCode(code);\n          },\n          isCode: function (code) {\n            return 128 <= code && code < 256;\n          },\n          pushState: function (encodingState) {\n            var that = this,\n                subState = that._initSubState(encodingState),\n                encoding = that.encoding,\n                length = subState.value.length;\n\n            encodingState.index += length;\n\n            if (length < 3) {\n              var code;\n\n              for (; subState.index < length; subState.index++) {\n                code = subState.value.charCodeAt(subState.index);\n                subState.state = that._getSubState(code);\n\n                if (subState.previousState != subState.state) {\n                  subState.previousState = subState.state;\n                  encoding[subState.state].move(subState);\n                }\n\n                encoding.addPattern(encoding[subState.state].MOVE);\n                encoding.addPattern(encoding[subState.state].getValue(code));\n              }\n            } else {\n              if (subState.state != subState.previousState) {\n                encoding[subState.state].move(subState);\n              }\n\n              that._pushStart(subState);\n\n              encoding.pushData(subState, that.subStates);\n\n              if (encodingState.index < encodingState.value.length) {\n                that._pushStart(subState);\n              }\n            }\n\n            encodingState.fnc = true;\n            encodingState.state = subState.state;\n          },\n          _pushStart: function (subState) {\n            var that = this;\n            that.encoding.addPattern(that.encoding[subState.state].MOVE);\n            that.encoding.addPattern(that.encoding[subState.state].MOVE);\n          },\n          _initSubState: function (encodingState) {\n            var that = this,\n                subState = {\n              value: that._getAll(encodingState.value, encodingState.index),\n              index: 0\n            };\n            subState.state = that._getSubState(subState.value.charCodeAt(0));\n            subState.previousState = encodingState.previousState == that.key ? subState.state : encodingState.previousState;\n            return subState;\n          },\n          _initSubStates: function (states) {\n            var that = this;\n            that.subStates = [];\n\n            for (var i = 0; i < states.length; i++) {\n              if (inArray(states[i], that.dependentStates) >= 0) {\n                that.subStates.push(states[i]);\n              }\n            }\n          },\n          _getSubState: function (code) {\n            var that = this;\n\n            for (var i = 0; i < that.subStates.length; i++) {\n              if (that.encoding[that.subStates[i]].isCode(code)) {\n                return that.subStates[i];\n              }\n            }\n          },\n          _getAll: function (value, index) {\n            var code,\n                result = \"\";\n\n            while ((code = value.charCodeAt(index++)) && this.isCode(code)) {\n              result += String.fromCharCode(code - 128);\n            }\n\n            return result;\n          }\n        });\n        states128.FNC1 = state128.extend({\n          key: \"FNC1\",\n          startState: \"C\",\n          dependentStates: [\"C\", \"B\"],\n          startAI: \"(\",\n          endAI: \")\",\n          init: function (encoding, states) {\n            this.encoding = encoding;\n            this.states = states;\n          },\n          addStart: function () {\n            this.encoding[this.startState].addStart();\n          },\n          is: function () {\n            return inArray(this.key, this.states) >= 0;\n          },\n          pushState: function (encodingState) {\n            var that = this,\n                encoding = that.encoding,\n                value = encodingState.value.replace(/\\s/g, \"\"),\n                regexSeparators = new RegExp(\"[\" + that.startAI + that.endAI + \"]\", \"g\"),\n                index = encodingState.index,\n                subState = {\n              state: that.startState\n            },\n                current,\n                nextStart,\n                separatorLength;\n            encoding.addPattern(that.START);\n\n            while (true) {\n              subState.index = 0;\n              separatorLength = value.charAt(index) === that.startAI ? 2 : 0;\n              current = separatorLength > 0 ? that.getBySeparator(value, index) : that.getByLength(value, index);\n\n              if (current.ai.length) {\n                nextStart = index + separatorLength + current.id.length + current.ai.length;\n              } else {\n                nextStart = value.indexOf(that.startAI, index + 1);\n\n                if (nextStart < 0) {\n                  if (index + current.ai.max + current.id.length + separatorLength < value.length) {\n                    throw new Error(\"Separators are required after variable length identifiers\");\n                  }\n\n                  nextStart = value.length;\n                }\n              }\n\n              subState.value = value.substring(index, nextStart).replace(regexSeparators, \"\");\n              that.validate(current, subState.value);\n              encoding.pushData(subState, that.dependentStates);\n\n              if (nextStart >= value.length) {\n                break;\n              }\n\n              index = nextStart;\n\n              if (subState.state != that.startState) {\n                encoding[that.startState].move(subState);\n                subState.state = that.startState;\n              }\n\n              if (!current.ai.length) {\n                encoding.addPattern(that.START);\n              }\n            }\n\n            encodingState.index = encodingState.value.length;\n          },\n          validate: function (current, value) {\n            var code = value.substr(current.id.length),\n                ai = current.ai;\n\n            if (!ai.type && !numberRegex.test(code)) {\n              throw new Error(\"Application identifier \" + current.id + \" is numeric only but contains non numeric character(s).\");\n            }\n\n            if (ai.type == \"alphanumeric\" && !alphanumericRegex.test(code)) {\n              throw new Error(\"Application identifier \" + current.id + \" is alphanumeric only but contains non alphanumeric character(s).\");\n            }\n\n            if (ai.length && ai.length !== code.length) {\n              throw new Error(\"Application identifier \" + current.id + \" must be \" + ai.length + \" characters long.\");\n            }\n\n            if (ai.min && ai.min > code.length) {\n              throw new Error(\"Application identifier \" + current.id + \" must be at least \" + ai.min + \" characters long.\");\n            }\n\n            if (ai.max && ai.max < code.length) {\n              throw new Error(\"Application identifier \" + current.id + \" must be at most \" + ai.max + \" characters long.\");\n            }\n          },\n          getByLength: function (value, index) {\n            var that = this,\n                id,\n                ai;\n\n            for (var i = 2; i <= 4; i++) {\n              id = getNext(value, index, i);\n              ai = that.getAI(id) || that.getAI(id.substring(0, id.length - 1));\n\n              if (ai) {\n                return {\n                  id: id,\n                  ai: ai\n                };\n              }\n            }\n\n            that.unsupportedAIError(id);\n          },\n          unsupportedAIError: function (id) {\n            throw new Error(kendo.format(\"'{0}' is not a supported Application Identifier\"), id);\n          },\n          getBySeparator: function (value, index) {\n            var that = this,\n                start = value.indexOf(that.startAI, index),\n                end = value.indexOf(that.endAI, start),\n                id = value.substring(start + 1, end),\n                ai = that.getAI(id) || that.getAI(id.substr(id.length - 1));\n\n            if (!ai) {\n              that.unsupportedAIError(id);\n            }\n\n            return {\n              ai: ai,\n              id: id\n            };\n          },\n          getAI: function (id) {\n            var ai = this.applicationIdentifiers,\n                multiKey = ai.multiKey;\n\n            if (ai[id]) {\n              return ai[id];\n            }\n\n            for (var i = 0; i < multiKey.length; i++) {\n              if (multiKey[i].ids && inArray(id, multiKey[i].ids) >= 0) {\n                return multiKey[i].type;\n              } else if (multiKey[i].ranges) {\n                var ranges = multiKey[i].ranges;\n\n                for (var j = 0; j < ranges.length; j++) {\n                  if (ranges[j][0] <= id && id <= ranges[j][1]) {\n                    return multiKey[i].type;\n                  }\n                }\n              }\n            }\n          },\n          applicationIdentifiers: {\n            \"22\": {\n              max: 29,\n              type: \"alphanumeric\"\n            },\n            \"402\": {\n              length: 17\n            },\n            \"7004\": {\n              max: 4,\n              type: \"alphanumeric\"\n            },\n            \"242\": {\n              max: 6,\n              type: \"alphanumeric\"\n            },\n            \"8020\": {\n              max: 25,\n              type: \"alphanumeric\"\n            },\n            \"703\": {\n              min: 3,\n              max: 30,\n              type: \"alphanumeric\"\n            },\n            \"8008\": {\n              min: 8,\n              max: 12,\n              type: \"alphanumeric\"\n            },\n            \"253\": {\n              min: 13,\n              max: 17,\n              type: \"alphanumeric\"\n            },\n            \"8003\": {\n              min: 14,\n              max: 30,\n              type: \"alphanumeric\"\n            },\n            multiKey: [{\n              ids: [\"15\", \"17\", \"8005\", \"8100\"],\n              ranges: [[11, 13], [310, 316], [320, 336], [340, 369]],\n              type: {\n                length: 6\n              }\n            }, {\n              ids: [\"240\", \"241\", \"250\", \"251\", \"400\", \"401\", \"403\", \"7002\", \"8004\", \"8007\", \"8110\"],\n              ranges: [[90 - 99]],\n              type: {\n                max: 30,\n                type: \"alphanumeric\"\n              }\n            }, {\n              ids: [\"7001\"],\n              ranges: [[410, 414]],\n              type: {\n                length: 13\n              }\n            }, {\n              ids: [\"10\", \"21\", \"254\", \"420\", \"8002\"],\n              type: {\n                max: 20,\n                type: \"alphanumeric\"\n              }\n            }, {\n              ids: [\"00\", \"8006\", \"8017\", \"8018\"],\n              type: {\n                length: 18\n              }\n            }, {\n              ids: [\"01\", \"02\", \"8001\"],\n              type: {\n                length: 14\n              }\n            }, {\n              ids: [\"422\"],\n              ranges: [[424, 426]],\n              type: {\n                length: 3\n              }\n            }, {\n              ids: [\"20\", \"8102\"],\n              type: {\n                length: 2\n              }\n            }, {\n              ids: [\"30\", \"37\"],\n              type: {\n                max: 8,\n                type: \"alphanumeric\"\n              }\n            }, {\n              ids: [\"390\", \"392\"],\n              type: {\n                max: 15,\n                type: \"alphanumeric\"\n              }\n            }, {\n              ids: [\"421\", \"423\"],\n              type: {\n                min: 3,\n                max: 15,\n                type: \"alphanumeric\"\n              }\n            }, {\n              ids: [\"391\", \"393\"],\n              type: {\n                min: 3,\n                max: 18,\n                type: \"alphanumeric\"\n              }\n            }, {\n              ids: [\"7003\", \"8101\"],\n              type: {\n                length: 10\n              }\n            }]\n          },\n          START: 102\n        });\n        var code128Base = Encoding.extend({\n          init: function (options) {\n            Encoding.fn.init.call(this, options);\n\n            this._initStates();\n          },\n          _initStates: function () {\n            var that = this;\n\n            for (var i = 0; i < that.states.length; i++) {\n              that[that.states[i]] = new states128[that.states[i]](that, that.states);\n            }\n          },\n          initValue: function (value, width, height) {\n            var that = this;\n            that.pattern = [];\n            that.value = value;\n            that.width = width;\n            that.height = height;\n            that.checkSum = 0;\n            that.totalUnits = 0;\n            that.index = 0;\n            that.position = 1;\n          },\n          addData: function () {\n            var that = this,\n                encodingState = {\n              value: that.value,\n              index: 0,\n              state: \"\"\n            };\n\n            if (that.value.length === 0) {\n              return;\n            }\n\n            encodingState.state = encodingState.previousState = that.getNextState(encodingState, that.states);\n            that.addStart(encodingState);\n            that.pushData(encodingState, that.states);\n            that.addCheckSum();\n            that.addStop();\n            that.setBaseUnit();\n          },\n          pushData: function (encodingState, states) {\n            var that = this;\n\n            while (true) {\n              that[encodingState.state].pushState(encodingState);\n\n              if (encodingState.index >= encodingState.value.length) {\n                break;\n              }\n\n              if (!encodingState.shifted) {\n                encodingState.previousState = encodingState.state;\n                encodingState.state = that.getNextState(encodingState, states);\n                that[encodingState.state].move(encodingState);\n              } else {\n                var temp = encodingState.state;\n                encodingState.state = encodingState.previousState;\n                encodingState.previousState = temp;\n                encodingState.shifted = false;\n              }\n            }\n          },\n          addStart: function (encodingState) {\n            this[encodingState.state].addStart(encodingState);\n            this.position = 1;\n          },\n          addCheckSum: function () {\n            var that = this;\n            that.checksum = that.checkSum % 103;\n            that.addPattern(that.checksum);\n          },\n          addStop: function () {\n            this.addPattern(this.STOP);\n          },\n          setBaseUnit: function () {\n            var that = this;\n            that.baseUnit = that.width / (that.totalUnits + that.quietZoneLength);\n          },\n          addPattern: function (code) {\n            var that = this,\n                pattern = that.characterMap[code].toString(),\n                value;\n\n            for (var i = 0; i < pattern.length; i++) {\n              value = parseInt(pattern.charAt(i), 10);\n              that.pattern.push(value);\n              that.totalUnits += value;\n            }\n\n            that.checkSum += code * that.position++;\n          },\n          getNextState: function (encodingState, states) {\n            for (var i = 0; i < states.length; i++) {\n              if (this[states[i]].is(encodingState.value, encodingState.index)) {\n                return states[i];\n              }\n            }\n\n            this.invalidCharacterError(encodingState.value.charAt(encodingState.index));\n          },\n          characterMap: [212222, 222122, 222221, 121223, 121322, 131222, 122213, 122312, 132212, 221213, 221312, 231212, 112232, 122132, 122231, 113222, 123122, 123221, 223211, 221132, 221231, 213212, 223112, 312131, 311222, 321122, 321221, 312212, 322112, 322211, 212123, 212321, 232121, 111323, 131123, 131321, 112313, 132113, 132311, 211313, 231113, 231311, 112133, 112331, 132131, 113123, 113321, 133121, 313121, 211331, 231131, 213113, 213311, 213131, 311123, 311321, 331121, 312113, 312311, 332111, 314111, 221411, 431111, 111224, 111422, 121124, 121421, 141122, 141221, 112214, 112412, 122114, 122411, 142112, 142211, 241211, 221114, 413111, 241112, 134111, 111242, 121142, 121241, 114212, 124112, 124211, 411212, 421112, 421211, 212141, 214121, 412121, 111143, 111341, 131141, 114113, 114311, 411113, 411311, 113141, 114131, 311141, 411131, 211412, 211214, 211232, 2331112],\n          STOP: 106\n        });\n        encodings.code128a = code128Base.extend({\n          name: \"Code 128 A\",\n          states: [\"A\"]\n        });\n        encodings.code128b = code128Base.extend({\n          name: \"Code 128 B\",\n          states: [\"B\"]\n        });\n        encodings.code128c = code128Base.extend({\n          name: \"Code 128 C\",\n          states: [\"C\"]\n        });\n        encodings.code128 = code128Base.extend({\n          name: \"Code 128\",\n          states: [\"C\", \"B\", \"A\", \"FNC4\"]\n        });\n        encodings[\"gs1-128\"] = code128Base.extend({\n          name: \"Code GS1-128\",\n          states: [\"FNC1\", \"C\", \"B\"]\n        });\n        var msiBase = Encoding.extend({\n          initValue: function (value, width) {\n            var that = this;\n            that.pattern = [];\n            that.value = value;\n            that.checkSumLength = 0;\n            that.width = width;\n          },\n          setBaseUnit: function () {\n            var that = this,\n                startStopLength = 7;\n            that.baseUnit = that.width / (12 * (that.value.length + that.checkSumLength) + that.quietZoneLength + startStopLength);\n          },\n          addData: function () {\n            var that = this,\n                value = that.value;\n            that.addPattern(that.START);\n\n            for (var i = 0; i < value.length; i++) {\n              that.addCharacter(value.charAt(i));\n            }\n\n            if (that.options.addCheckSum) {\n              that.addCheckSum();\n            }\n\n            that.addPattern(that.STOP);\n            that.setBaseUnit();\n          },\n          addCharacter: function (character) {\n            var that = this,\n                pattern = that.characterMap[character];\n\n            if (!pattern) {\n              that.invalidCharacterError(character);\n            }\n\n            that.addPattern(pattern);\n          },\n          addPattern: function (pattern) {\n            for (var i = 0; i < pattern.length; i++) {\n              this.pattern.push(parseInt(pattern.charAt(i), 10));\n            }\n          },\n          addCheckSum: function () {\n            var that = this,\n                checkSumFunction = that.checkSums[that.checkSumType],\n                checkValues;\n            checkValues = checkSumFunction.call(that.checkSums, that.value);\n            that.checksum = checkValues.join(\"\");\n\n            for (var i = 0; i < checkValues.length; i++) {\n              that.checkSumLength++;\n              that.addPattern(that.characterMap[checkValues[i]]);\n            }\n          },\n          checkSums: {\n            Modulo10: function (value) {\n              var checkValues = [0, \"\"],\n                  odd = value.length % 2,\n                  idx,\n                  evenSum,\n                  oddSum;\n\n              for (idx = 0; idx < value.length; idx++) {\n                checkValues[(idx + odd) % 2] += parseInt(value.charAt(idx), 10);\n              }\n\n              oddSum = checkValues[0];\n              evenSum = (checkValues[1] * 2).toString();\n\n              for (idx = 0; idx < evenSum.length; idx++) {\n                oddSum += parseInt(evenSum.charAt(idx), 10);\n              }\n\n              return [(10 - oddSum % 10) % 10];\n            },\n            Modulo11: function (value) {\n              var weightedSum = 0,\n                  mod = 11,\n                  length = value.length,\n                  weight,\n                  checkValue;\n\n              for (var i = 0; i < length; i++) {\n                weight = ((length - i) % 6 || 6) + 1;\n                weightedSum += weight * value.charAt(i);\n              }\n\n              checkValue = (mod - weightedSum % mod) % mod;\n\n              if (checkValue != 10) {\n                return [checkValue];\n              }\n\n              return [1, 0];\n            },\n            Modulo11Modulo10: function (value) {\n              var checkValues = this.Modulo11(value),\n                  mod11Value;\n              mod11Value = value + checkValues[0];\n              return checkValues.concat(this.Modulo10(mod11Value));\n            },\n            Modulo10Modulo10: function (value) {\n              var checkValues = this.Modulo10(value),\n                  mod10Value;\n              mod10Value = value + checkValues[0];\n              return checkValues.concat(this.Modulo10(mod10Value));\n            }\n          },\n          characterMap: [\"12121212\", \"12121221\", \"12122112\", \"12122121\", \"12211212\", \"12211221\", \"12212112\", \"12212121\", \"21121212\", \"21121221\"],\n          START: \"21\",\n          STOP: \"121\",\n          checkSumType: \"\"\n        });\n        encodings.msimod10 = msiBase.extend({\n          name: \"MSI Modulo10\",\n          checkSumType: \"Modulo10\"\n        });\n        encodings.msimod11 = msiBase.extend({\n          name: \"MSI Modulo11\",\n          checkSumType: \"Modulo11\"\n        });\n        encodings.msimod1110 = msiBase.extend({\n          name: \"MSI Modulo11 Modulo10\",\n          checkSumType: \"Modulo11Modulo10\"\n        });\n        encodings.msimod1010 = msiBase.extend({\n          name: \"MSI Modulo10 Modulo10\",\n          checkSumType: \"Modulo10Modulo10\"\n        });\n        encodings.code11 = Encoding.extend({\n          name: \"Code 11\",\n          cCheckSumTotal: 10,\n          kCheckSumTotal: 9,\n          kCheckSumMinLength: 10,\n          checkSumMod: 11,\n          DASH_VALUE: 10,\n          DASH: \"-\",\n          START: \"112211\",\n          STOP: \"11221\",\n          initValue: function (value, width) {\n            var that = this;\n            that.pattern = [];\n            that.value = value;\n            that.width = width;\n            that.totalUnits = 0;\n          },\n          addData: function () {\n            var that = this;\n            var value = that.value;\n            that.addPattern(that.START);\n\n            for (var i = 0; i < value.length; i++) {\n              that.addCharacter(value.charAt(i));\n            }\n\n            if (that.options.addCheckSum) {\n              that.addCheckSum();\n            }\n\n            that.addPattern(that.STOP);\n            that.setBaseUnit();\n          },\n          setBaseUnit: function () {\n            var that = this;\n            that.baseUnit = that.width / (that.totalUnits + that.quietZoneLength);\n          },\n          addCheckSum: function () {\n            var that = this,\n                value = that.value,\n                length = value.length,\n                cValue;\n            cValue = that.getWeightedSum(value, length, that.cCheckSumTotal) % that.checkSumMod;\n            that.checksum = cValue + \"\";\n            that.addPattern(that.characterMap[cValue]);\n            length++;\n\n            if (length >= that.kCheckSumMinLength) {\n              var kValue = (cValue + that.getWeightedSum(value, length, that.kCheckSumTotal)) % that.checkSumMod;\n              that.checksum += kValue;\n              that.addPattern(that.characterMap[kValue]);\n            }\n          },\n          getWeightedSum: function (value, length, total) {\n            var weightedSum = 0;\n\n            for (var i = 0; i < value.length; i++) {\n              weightedSum += this.weightedValue(this.getValue(value.charAt(i)), length, i, total);\n            }\n\n            return weightedSum;\n          },\n          weightedValue: function (value, length, index, total) {\n            var weight = (length - index) % total || total;\n            return weight * value;\n          },\n          getValue: function (character) {\n            var that = this;\n\n            if (!isNaN(character)) {\n              return parseInt(character, 10);\n            } else if (character !== that.DASH) {\n              that.invalidCharacterError(character);\n            }\n\n            return that.DASH_VALUE;\n          },\n          addCharacter: function (character) {\n            var that = this,\n                value = that.getValue(character),\n                pattern = that.characterMap[value];\n            that.addPattern(pattern);\n          },\n          addPattern: function (pattern) {\n            var value;\n\n            for (var i = 0; i < pattern.length; i++) {\n              value = parseInt(pattern.charAt(i), 10);\n              this.pattern.push(value);\n              this.totalUnits += value;\n            }\n          },\n          characterMap: [\"111121\", \"211121\", \"121121\", \"221111\", \"112121\", \"212111\", \"122111\", \"111221\", \"211211\", \"211111\", \"112111\"],\n          options: {\n            addCheckSum: true\n          }\n        });\n        encodings.postnet = Encoding.extend({\n          name: \"Postnet\",\n          START: \"2\",\n          VALID_CODE_LENGTHS: [5, 9, 11],\n          DIGIT_SEPARATOR: \"-\",\n          initValue: function (value, width, height) {\n            var that = this;\n            that.height = height;\n            that.width = width;\n            that.baseHeight = height / 2;\n            that.value = value.replace(new RegExp(that.DIGIT_SEPARATOR, \"g\"), \"\");\n            that.pattern = [];\n            that.validate(that.value);\n            that.checkSum = 0;\n            that.setBaseUnit();\n          },\n          addData: function () {\n            var that = this,\n                value = that.value;\n            that.addPattern(that.START);\n\n            for (var i = 0; i < value.length; i++) {\n              that.addCharacter(value.charAt(i));\n            }\n\n            if (that.options.addCheckSum) {\n              that.addCheckSum();\n            }\n\n            that.addPattern(that.START);\n            that.pattern.pop();\n          },\n          addCharacter: function (character) {\n            var that = this,\n                pattern = that.characterMap[character];\n            that.checkSum += parseInt(character, 10);\n            that.addPattern(pattern);\n          },\n          addCheckSum: function () {\n            var that = this;\n            that.checksum = (10 - that.checkSum % 10) % 10;\n            that.addCharacter(that.checksum);\n          },\n          setBaseUnit: function () {\n            var that = this,\n                startStopLength = 3;\n            that.baseUnit = that.width / ((that.value.length + 1) * 10 + startStopLength + that.quietZoneLength);\n          },\n          validate: function (value) {\n            var that = this;\n\n            if (!numberRegex.test(value)) {\n              that.invalidCharacterError(value.match(/[^0-9]/)[0]);\n            }\n\n            if (inArray(value.length, that.VALID_CODE_LENGTHS) < 0) {\n              throw new Error(\"Invalid value length. Valid lengths for the Postnet symbology are \" + that.VALID_CODE_LENGTHS.join(\",\"));\n            }\n          },\n          addPattern: function (pattern) {\n            var that = this,\n                y1;\n\n            for (var i = 0; i < pattern.length; i++) {\n              y1 = that.height - that.baseHeight * pattern.charAt(i);\n              that.pattern.push({\n                width: 1,\n                y1: y1,\n                y2: that.height\n              });\n              that.pattern.push(1);\n            }\n          },\n          characterMap: [\"22111\", \"11122\", \"11212\", \"11221\", \"12112\", \"12121\", \"12211\", \"21112\", \"21121\", \"21211\"]\n        });\n        encodings.ean13 = Encoding.extend({\n          initValue: function (value, width, height) {\n            value += \"\";\n\n            if (value.length != 12 || /\\D/.test(value)) {\n              throw new Error('The value of the \"EAN13\" encoding should be 12 symbols');\n            }\n\n            var that = this;\n            that.pattern = [];\n            that.options.height = height;\n            that.baseUnit = width / (95 + that.quietZoneLength);\n            that.value = value;\n            that.checksum = that.calculateChecksum();\n            that.leftKey = value[0];\n            that.leftPart = value.substr(1, 6);\n            that.rightPart = value.substr(7) + that.checksum;\n          },\n          addData: function () {\n            var that = this;\n            that.addPieces(that.characterMap.start);\n            that.addSide(that.leftPart, that.leftKey);\n            that.addPieces(that.characterMap.middle);\n            that.addSide(that.rightPart);\n            that.addPieces(that.characterMap.start);\n          },\n          addSide: function (leftPart, key) {\n            var that = this;\n\n            for (var i = 0; i < leftPart.length; i++) {\n              if (key && parseInt(that.keyTable[key].charAt(i), 10)) {\n                that.addPieces(Array.prototype.slice.call(that.characterMap.digits[leftPart.charAt(i)]).reverse(), true);\n              } else {\n                that.addPieces(that.characterMap.digits[leftPart.charAt(i)], true);\n              }\n            }\n          },\n          addPieces: function (arrToAdd, limitedHeight) {\n            var that = this;\n\n            for (var i = 0; i < arrToAdd.length; i++) {\n              if (limitedHeight) {\n                that.pattern.push({\n                  y1: 0,\n                  y2: that.options.height * 0.95,\n                  width: arrToAdd[i]\n                });\n              } else {\n                that.pattern.push(arrToAdd[i]);\n              }\n            }\n          },\n          calculateChecksum: function () {\n            var odd = 0,\n                even = 0,\n                value = this.value.split(\"\").reverse().join(\"\");\n\n            for (var i = 0; i < value.length; i++) {\n              if (i % 2) {\n                even += parseInt(value.charAt(i), 10);\n              } else {\n                odd += parseInt(value.charAt(i), 10);\n              }\n            }\n\n            var checksum = (10 - (3 * odd + even) % 10) % 10;\n            return checksum;\n          },\n          keyTable: ['000000', '001011', '001101', '001110', '010011', '011001', '011100', '010101', '010110', '011010'],\n          characterMap: {\n            digits: [[3, 2, 1, 1], [2, 2, 2, 1], [2, 1, 2, 2], [1, 4, 1, 1], [1, 1, 3, 2], [1, 2, 3, 1], [1, 1, 1, 4], [1, 3, 1, 2], [1, 2, 1, 3], [3, 1, 1, 2]],\n            start: [1, 1, 1],\n            middle: [1, 1, 1, 1, 1]\n          }\n        });\n        encodings.ean8 = encodings.ean13.extend({\n          initValue: function (value, width, height) {\n            var that = this;\n\n            if (value.length != 7 || /\\D/.test(value)) {\n              throw new Error('Invalid value provided');\n            }\n\n            that.value = value;\n            that.options.height = height;\n            that.checksum = that.calculateChecksum(that.value);\n            that.leftPart = that.value.substr(0, 4);\n            that.rightPart = that.value.substr(4) + that.checksum;\n            that.pattern = [];\n            that.baseUnit = width / (67 + that.quietZoneLength);\n          }\n        });\n        var Barcode = Widget.extend({\n          init: function (element, options) {\n            var that = this;\n            Widget.fn.init.call(that, element, options);\n            that.element = $(element);\n            that.wrapper = that.element;\n            that.element.addClass(\"k-barcode\").css(\"display\", \"block\");\n            that.surfaceWrap = $(\"<div />\").css(\"position\", \"relative\").appendTo(this.element);\n            that.surface = draw.Surface.create(that.surfaceWrap, {\n              type: that.options.renderAs\n            });\n\n            that._setOptions(options);\n\n            if (options && defined(options.value)) {\n              that.redraw();\n            }\n          },\n          setOptions: function (options) {\n            this._setOptions(options);\n\n            this.redraw();\n          },\n          redraw: function () {\n            var size = this._getSize();\n\n            this.surface.clear();\n            this.surface.setSize({\n              width: size.width,\n              height: size.height\n            });\n            this.createVisual();\n            this.surface.draw(this.visual);\n          },\n          getSize: function () {\n            return kendo.dimensions(this.element);\n          },\n          _resize: function () {\n            this.redraw();\n          },\n          createVisual: function () {\n            this.visual = this._render();\n          },\n          _render: function () {\n            var that = this,\n                options = that.options,\n                value = options.value,\n                textOptions = options.text,\n                textMargin = dataviz.getSpacing(textOptions.margin),\n                size = that._getSize(),\n                border = options.border || {},\n                encoding = that.encoding,\n                contentBox = new Box2D(0, 0, size.width, size.height).unpad(border.width).unpad(options.padding),\n                barHeight = contentBox.height(),\n                result,\n                textToDisplay,\n                textHeight;\n\n            var visual = new draw.Group();\n            that.contentBox = contentBox;\n            visual.append(that._getBackground(size));\n\n            if (textOptions.visible) {\n              textHeight = draw.util.measureText(value, {\n                font: textOptions.font\n              }).height;\n              barHeight -= textHeight + textMargin.top + textMargin.bottom;\n            }\n\n            result = encoding.encode(value, contentBox.width(), barHeight);\n\n            if (textOptions.visible) {\n              textToDisplay = value;\n\n              if (options.checksum && defined(encoding.checksum)) {\n                textToDisplay += \" \" + encoding.checksum;\n              }\n\n              visual.append(that._getText(textToDisplay));\n            }\n\n            that.barHeight = barHeight;\n            this._bandsGroup = this._getBands(result.pattern, result.baseUnit);\n            visual.append(this._bandsGroup);\n            return visual;\n          },\n          exportVisual: function () {\n            return this._render();\n          },\n          _getSize: function () {\n            var that = this,\n                element = that.element,\n                size = new geom.Size(DEFAULT_WIDTH, DEFAULT_HEIGHT);\n\n            if (element.width() > 0) {\n              size.width = element.width();\n            }\n\n            if (element.height() > 0) {\n              size.height = element.height();\n            }\n\n            if (that.options.width) {\n              size.width = that.options.width;\n            }\n\n            if (that.options.height) {\n              size.height = that.options.height;\n            }\n\n            return size;\n          },\n          value: function (value) {\n            var that = this;\n\n            if (!defined(value)) {\n              return that.options.value;\n            }\n\n            that.options.value = value + '';\n            that.redraw();\n          },\n          _getBands: function (pattern, baseUnit) {\n            var that = this,\n                contentBox = that.contentBox,\n                position = contentBox.x1,\n                step,\n                item;\n            var group = new draw.Group();\n\n            for (var i = 0; i < pattern.length; i++) {\n              item = isPlainObject(pattern[i]) ? pattern[i] : {\n                width: pattern[i],\n                y1: 0,\n                y2: that.barHeight\n              };\n              step = item.width * baseUnit;\n\n              if (i % 2) {\n                var rect = geom.Rect.fromPoints(new geom.Point(position, item.y1 + contentBox.y1), new geom.Point(position + step, item.y2 + contentBox.y1));\n                var path = draw.Path.fromRect(rect, {\n                  fill: {\n                    color: that.options.color\n                  },\n                  stroke: null\n                });\n                group.append(path);\n              }\n\n              position += step;\n            }\n\n            return group;\n          },\n          _getBackground: function (size) {\n            var that = this,\n                options = that.options,\n                border = options.border || {};\n            var box = new Box2D(0, 0, size.width, size.height).unpad(border.width / 2);\n            var path = draw.Path.fromRect(box.toRect(), {\n              fill: {\n                color: options.background\n              },\n              stroke: {\n                color: border.width ? border.color : \"\",\n                width: border.width,\n                dashType: border.dashType\n              }\n            });\n            return path;\n          },\n          _getText: function (value) {\n            var that = this,\n                textOptions = that.options.text,\n                text = that._textbox = new TextBox(value, {\n              font: textOptions.font,\n              color: textOptions.color,\n              align: \"center\",\n              vAlign: \"bottom\",\n              margin: textOptions.margin\n            });\n            text.reflow(that.contentBox);\n            text.renderVisual();\n            return text.visual;\n          },\n          _setOptions: function (options) {\n            var that = this;\n            that.type = (options.type || that.options.type).toLowerCase();\n\n            if (that.type == \"upca\") {\n              //extend instead\n              that.type = \"ean13\";\n              options.value = '0' + options.value;\n            }\n\n            if (that.type == \"upce\") {\n              that.type = \"ean8\";\n              options.value = '0' + options.value;\n            }\n\n            if (!encodings[that.type]) {\n              throw new Error('Encoding ' + that.type + 'is not supported.');\n            }\n\n            that.encoding = new encodings[that.type]();\n            that.options = extend(true, that.options, options);\n          },\n          options: {\n            name: \"Barcode\",\n            renderAs: \"svg\",\n            value: \"\",\n            type: \"code39\",\n            checksum: false,\n            width: 0,\n            height: 0,\n            color: \"black\",\n            background: \"white\",\n            text: {\n              visible: true,\n              font: \"16px Consolas, Monaco, Sans Mono, monospace, sans-serif\",\n              color: \"black\",\n              margin: {\n                top: 0,\n                bottom: 0,\n                left: 0,\n                right: 0\n              }\n            },\n            border: {\n              width: 0,\n              dashType: \"solid\",\n              color: \"black\"\n            },\n            padding: {\n              top: 0,\n              bottom: 0,\n              left: 0,\n              right: 0\n            }\n          }\n        });\n        dataviz.ExportMixin.extend(Barcode.fn);\n        dataviz.ui.plugin(Barcode);\n        kendo.deepExtend(dataviz, {\n          encodings: encodings,\n          Encoding: Encoding\n        });\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}