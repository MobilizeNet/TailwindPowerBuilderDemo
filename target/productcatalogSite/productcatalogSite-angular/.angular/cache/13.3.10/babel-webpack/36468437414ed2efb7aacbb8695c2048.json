{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1662);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1045:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.upload\");\n    /***/\n  },\n\n  /***/\n  1662:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1045)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            extend = $.extend,\n            parseJSON = JSON.parse,\n            progress = kendo.ui.progress,\n            Class = kendo.Class,\n            OPEN = \"open\",\n            ZOOMSTART = \"zoomStart\",\n            ZOOMEND = \"zoomEnd\";\n        var Command = Class.extend({\n          init: function (options) {\n            this.options = options;\n            this.viewer = options.viewer;\n            this.errorMessages = this.viewer.options.messages.errorMessages;\n          }\n        });\n        var OpenCommand = Command.extend({\n          init: function (options) {\n            Command.fn.init.call(this, options);\n            this.upload = this.viewer.processor.upload;\n          },\n          exec: function () {\n            (this.viewer._upload || this._initUpload()).element.click();\n          },\n          _initUpload: function () {\n            var uploadOptions = {\n              select: this._onSelect.bind(this),\n              success: this._onSuccess.bind(this),\n              error: this._onError.bind(this),\n              complete: this._onComplete.bind(this),\n              showFileList: false,\n              multiple: false,\n              validation: {\n                allowedExtensions: [\".pdf\"]\n              }\n            };\n\n            if (this.upload) {\n              extend(uploadOptions, {\n                async: {\n                  saveUrl: this.upload.url,\n                  autoUpload: true,\n                  saveField: this.upload.saveField\n                }\n              });\n            }\n\n            var upload = $('<input name=\"files\" accept=\".pdf\" type=\"file\" />').kendoUpload(uploadOptions).getKendoUpload();\n            this.viewer._upload = upload;\n            return upload;\n          },\n          _onComplete: function () {\n            progress(this.viewer.pageContainer, false);\n          },\n          _onSuccess: function (e) {\n            var json = parseJSON(e.response);\n\n            if ($.isPlainObject(json)) {\n              this.viewer.processor.fromJSON(json);\n            } else {\n              this.viewer._triggerError({\n                error: json,\n                message: this.errorMessages.parseError\n              });\n            }\n          },\n          _onError: function (e) {\n            this.viewer._triggerError({\n              error: e.XMLHttpRequest.responseText,\n              message: this.errorMessages.notSupported\n            });\n          },\n          _onSelect: function (e) {\n            var that = this;\n            var fileToUpload = e.files[0];\n            progress(that.viewer.pageContainer, true);\n\n            if (that.viewer.trigger(OPEN, {\n              file: fileToUpload\n            }) || that.upload) {\n              return;\n            } else if (fileToUpload.extension.toLowerCase() !== \".pdf\") {\n              that.viewer._triggerError({\n                error: fileToUpload,\n                message: that.errorMessages.notSupported\n              });\n\n              return;\n            }\n\n            var reader = new FileReader();\n\n            reader.onload = function (e) {\n              var document = e.target.result;\n              that.viewer.fromFile(document);\n            };\n\n            reader.onerror = function () {\n              that.viewer._triggerError({\n                error: fileToUpload,\n                message: that.errorMessages.parseError\n              });\n            };\n\n            reader.readAsArrayBuffer(fileToUpload.rawFile);\n          }\n        });\n        var PageChangeCommand = Command.extend({\n          exec: function () {\n            var pageNumber = this.options.value;\n            this.viewer.activatePage(pageNumber);\n          }\n        });\n        var DownloadCommand = Command.extend({\n          exec: function () {\n            if (!this.viewer.document) {\n              this.viewer._triggerError({\n                message: this.errorMessages.notFound\n              });\n\n              return;\n            }\n\n            var fileName = this.viewer.document.info && this.viewer.document.info.title || this.viewer.options.messages.defaultFileName;\n            this.viewer.processor.downloadFile(fileName);\n          }\n        });\n        var ExportCommand = Command.extend({\n          init: function (options) {\n            options = $.extend(options, this.options);\n            Command.fn.init.call(this, options);\n          },\n          exec: function () {\n            var dialog = this.viewer._saveDialog || this._initDialog();\n\n            dialog._updateModel({\n              pagesCount: this.viewer.document && this.viewer.document.total || 1,\n              page: this.viewer.options.page\n            });\n\n            dialog.open();\n          },\n          apply: function (viewModel) {\n            var extension = viewModel.extension;\n\n            if (extension === \".png\") {\n              this.viewer.exportImage(viewModel);\n            } else if (extension === \".svg\") {\n              this.viewer.exportSVG(viewModel);\n            }\n          },\n          _initDialog: function () {\n            this.viewer._saveDialog = new kendo.pdfviewer.dialogs.ExportAsDialog({\n              apply: this.apply.bind(this),\n              pagesCount: this.viewer.document && this.viewer.document.total || 1,\n              messages: this.viewer.options.messages\n            });\n            return this.viewer._saveDialog;\n          }\n        });\n        var EnableSelectionCommand = Command.extend({\n          exec: function () {\n            var that = this,\n                viewer = that.viewer;\n\n            viewer._toggleSelection(true);\n          }\n        });\n        var EnablePanCommand = Command.extend({\n          exec: function () {\n            var that = this,\n                viewer = that.viewer;\n\n            viewer._toggleSelection(false);\n          }\n        });\n        var OpenSearchCommand = Command.extend({\n          init: function (options) {\n            var that = this;\n            that.viewer = options.viewer;\n\n            if (!that.viewer.searchDialog) {\n              that.viewer.searchDialog = new kendo.pdfviewer.dialogs.SearchDialog({\n                position: {\n                  top: that.viewer.pageContainer.offset().top,\n                  left: that.viewer.pageContainer.offset().left\n                },\n                messages: that.viewer.options.messages.dialogs.search,\n                open: that._open.bind(that),\n                next: that._next.bind(that),\n                prev: that._prev.bind(that),\n                close: that._close.bind(that)\n              });\n            }\n\n            Command.fn.init.call(that, options);\n          },\n          exec: function () {\n            var that = this;\n            that.viewer.searchDialog.open();\n          },\n          _open: function () {\n            var that = this;\n            that.changeHandler = that._change.bind(that);\n            that.zoomStartHandler = that._closeDialog.bind(that);\n            that.openFileHandler = that._closeDialog.bind(that);\n\n            if (!that.viewer._searchDOM) {\n              that.viewer._initSearchDOM();\n\n              that.viewer.searchDialog.searchModel.bind(\"change\", that.changeHandler);\n              that.viewer.bind(\"zoomStart\", that.zoomStartHandler);\n              that.viewer.bind(\"open\", that.openFileHandler);\n            }\n          },\n          _close: function () {\n            var that = this;\n            var searchEngine = that.viewer._searchDOM;\n            that.viewer.searchDialog.searchModel.unbind(\"change\", that.changeHandler);\n            that.viewer.unbind(\"zoomStart\", that.zoomStartHandler);\n            that.viewer.unbind(\"open\", that.openFileHandler);\n            searchEngine.destroy();\n            delete that.viewer._searchDOM;\n\n            that._updateSearchModel();\n          },\n          _change: function (ev) {\n            var that = this;\n            var searchEngine = that.viewer._searchDOM;\n            var field = ev.field;\n            var model = that.viewer.searchDialog.searchModel;\n            var value = model[field];\n\n            if (!searchEngine) {\n              return;\n            }\n\n            switch (field) {\n              case \"searchText\":\n                searchEngine.search(value, model.matchCase);\n\n                that._updateSearchModel();\n\n                break;\n\n              case \"matchCase\":\n                searchEngine.search(model.searchText, value);\n\n                that._updateSearchModel();\n\n                break;\n\n              default:\n                break;\n            }\n          },\n          _next: function () {\n            var that = this;\n            var searchEngine = that.viewer._searchDOM;\n\n            if (searchEngine.matches && searchEngine.matches.length) {\n              searchEngine.nextMatch();\n\n              that._updateSearchModel();\n            }\n          },\n          _prev: function () {\n            var that = this;\n            var searchEngine = that.viewer._searchDOM;\n\n            if (searchEngine.matches && searchEngine.matches.length) {\n              searchEngine.previousMatch();\n\n              that._updateSearchModel();\n            }\n          },\n          _updateSearchModel: function () {\n            var that = this;\n            var searchEngine = that.viewer._searchDOM;\n            var model = that.viewer.searchDialog.searchModel;\n\n            if (searchEngine) {\n              model.set(\"matches\", searchEngine.matches.length);\n              model.set(\"matchIndex\", searchEngine.getMarkedIndex());\n\n              that._scrollToMark();\n            } else {\n              model.set(\"searchText\", \"\");\n              model.set(\"matches\", 0);\n              model.set(\"matchIndex\", 0);\n              model.set(\"matchCase\", false);\n            }\n          },\n          _scrollToMark: function () {\n            var that = this;\n            var searchEngine = that.viewer._searchDOM;\n            var marked = searchEngine.getFirstMarked();\n            var scroller = that.viewer._scroller;\n            var position;\n\n            if (!marked.length) {\n              return;\n            }\n\n            position = marked.offset().top - scroller.scrollElement.offset().top - 100;\n            scroller.scrollTo(scroller.scrollLeft, position * -1);\n          },\n          _closeDialog: function () {\n            var that = this;\n            that.viewer.searchDialog.dialog.close();\n          }\n        });\n        var ZoomCommand = Command.extend({\n          exec: function () {\n            var that = this,\n                options = that.options,\n                viewer = that.viewer,\n                scale = options.scale,\n                loadedPagesHeight = 0,\n                page = that.viewer._pageNum,\n                containerHeight = viewer.pageContainer[0].clientHeight,\n                updatedVisiblePagesCount = 1,\n                renderTasks = [];\n\n            if (viewer.processingLib === \"dpl\") {\n              return;\n            }\n\n            scale = that._calculateZoom();\n\n            var updateViewer = function () {\n              var scroller = that.viewer._scroller,\n                  scrollingStarted = viewer._scrollingStarted;\n\n              if (scroller && scroller.scrollTop > scroller.scrollHeight()) {\n                scroller._resize();\n              }\n\n              if (!scrollingStarted) {\n                viewer.activatePage(page);\n                viewer._scrollingStarted = false;\n              }\n            };\n\n            if (!scale) {\n              return;\n            }\n\n            viewer.zoomScale = scale;\n            viewer._scrollingStarted = false;\n\n            if (viewer.pages) {\n              viewer.pages.forEach(function (page) {\n                var pageHeight;\n\n                if (viewer._visiblePages.indexOf(page) !== -1 && page.loaded) {\n                  renderTasks.push(page.render(scale));\n                  pageHeight = page._page.getViewport({\n                    scale: scale\n                  }).height;\n                } else {\n                  page.resize(scale);\n                  pageHeight = page.element.height();\n                }\n\n                loadedPagesHeight += pageHeight;\n\n                if (loadedPagesHeight <= containerHeight) {\n                  updatedVisiblePagesCount++;\n                }\n              });\n\n              if (viewer._visiblePagesCount != updatedVisiblePagesCount) {\n                viewer._visiblePagesCount = updatedVisiblePagesCount;\n\n                viewer._loadVisiblePages();\n              }\n            }\n\n            Promise.all(renderTasks).then(function () {\n              updateViewer();\n\n              that._triggerZoomEnd(scale);\n            }).catch(function () {\n              // jshint ignore:line\n              updateViewer();\n\n              that._triggerZoomEnd(scale);\n            });\n          },\n          _calculateZoom: function () {\n            var options = this.options,\n                viewer = this.viewer,\n                viewerOptions = viewer.options,\n                pageContainer = viewer.pageContainer,\n                visibleCanvas = viewer._visiblePages && viewer._visiblePages[0].canvas,\n                scale = options.scale,\n                scaleValue = scale,\n                preventZoom;\n            viewer._allowResize = false;\n            viewer._autoFit = false;\n\n            if (options.zoomIn) {\n              scaleValue = scale = viewer.zoomScale + viewerOptions.zoomRate;\n            } else if (options.zoomOut) {\n              scaleValue = scale = viewer.zoomScale - viewerOptions.zoomRate;\n            } else if (scale === \"auto\") {\n              viewer._allowResize = true;\n              scaleValue = viewer._autoZoomScale;\n            } else if (scale === \"actual\") {\n              scaleValue = 1;\n            } else if (scale === \"fitToWidth\") {\n              viewer._allowResize = true;\n              viewer._autoFit = \"fitToWidth\";\n              scaleValue = pageContainer.width() / (visibleCanvas.width / viewer.zoomScale);\n            } else if (scale === \"fitToPage\") {\n              viewer._allowResize = true;\n              viewer._autoFit = \"fitToPage\";\n              scaleValue = pageContainer.height() / (visibleCanvas.height / viewer.zoomScale);\n            }\n\n            preventZoom = scale < viewerOptions.zoomMin || scale > viewerOptions.zoomMax;\n\n            if (preventZoom || viewer.trigger(ZOOMSTART, {\n              scale: scale\n            })) {\n              return;\n            }\n\n            if (options.updateComboBox && viewer.toolbar) {\n              viewer.toolbar._updateZoomComboBox(scale);\n            }\n\n            return scaleValue;\n          },\n          _triggerZoomEnd: function (scale) {\n            var that = this,\n                viewer = that.viewer;\n            viewer.trigger(ZOOMEND, {\n              scale: scale\n            });\n          }\n        });\n        var PrintCommand = Command.extend({\n          init: function (options) {\n            Command.fn.init.call(this, options);\n          },\n          exec: function () {\n            var that = this;\n\n            if (!that.viewer.document) {\n              that.viewer._triggerError({\n                message: this.errorMessages.notFound\n              });\n\n              return;\n            }\n\n            progress(that.viewer.pageContainer, true);\n\n            that._renderPrintContainer();\n\n            that._loadAllPages().then(that.processAfterRender.bind(that));\n          },\n          _renderPrintContainer: function () {\n            this.printContainer = $(\"<div></div>\");\n          },\n          _loadAllPages: function () {\n            var that = this;\n            var pages = that.viewer.pages;\n            var loadPromises = [];\n            var renderPromises = [];\n            var promise = $.Deferred();\n            that._originalScale = that.viewer.zoom();\n\n            function getRenderPromise(page) {\n              renderPromises.push(page._renderPromise);\n            }\n\n            for (var i = 0; i < pages.length; i++) {\n              loadPromises.push(pages[i].load(3, true).then(getRenderPromise));\n            }\n\n            Promise.all(loadPromises).then(function () {\n              promise.resolve(renderPromises);\n            });\n            return promise;\n          },\n          processAfterRender: function (renderPromises) {\n            var that = this;\n            Promise.all(renderPromises).then(function () {\n              that._renderPrintPages();\n\n              setTimeout(function () {\n                that._printDocument();\n\n                that.viewer.zoom(that._originalScale);\n                progress(that.viewer.pageContainer, false);\n                delete that._originalScale;\n              }, 0);\n            });\n          },\n          _renderPrintPages: function () {\n            var pages = this.viewer.pages;\n\n            for (var i = 0; i < pages.length; i++) {\n              this._renderPrintImage(pages[i]);\n            }\n          },\n          _renderPrintImage: function (page) {\n            var canvas = page.canvas;\n            var div = $(\"<div></div>\");\n            var img = \"<img src='\" + canvas.toDataURL() + \"' width='\" + page.width + \"px' height='\" + page.height + \"px' />\";\n            div.append(img);\n            this.printContainer.append(div);\n          },\n          _printDocument: function () {\n            var that = this;\n            var pages = that.viewer.pages;\n            var width = pages[0].width;\n            var height = pages[0].height;\n            var myWindow = window.open('', '', 'innerWidth=' + width + ',innerHeight=' + height + 'location=no,titlebar=no,toolbar=no');\n            var browser = kendo.support.browser;\n\n            if (!myWindow) {\n              that.viewer._triggerError({\n                message: that.errorMessages.popupBlocked\n              });\n\n              return;\n            }\n\n            myWindow.document.write(that.printContainer.html());\n            myWindow.document.close();\n            myWindow.focus();\n            myWindow.print();\n\n            if (!browser.chrome || browser.chromiumEdge) {\n              myWindow.close();\n            } else {\n              $(myWindow.document).find(\"body\").on(\"mousemove\", function () {\n                myWindow.close();\n              });\n            }\n          }\n        });\n        extend(kendo.pdfviewer, {\n          OpenCommand: OpenCommand,\n          PageChangeCommand: PageChangeCommand,\n          DownloadCommand: DownloadCommand,\n          EnableSelectionCommand: EnableSelectionCommand,\n          EnablePanCommand: EnablePanCommand,\n          ExportCommand: ExportCommand,\n          PrintCommand: PrintCommand,\n          OpenSearchCommand: OpenSearchCommand,\n          ZoomCommand: ZoomCommand\n        });\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}