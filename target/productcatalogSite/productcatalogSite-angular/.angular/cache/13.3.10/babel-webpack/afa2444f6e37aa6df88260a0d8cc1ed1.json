{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1513);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1051:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.core\");\n    /***/\n  },\n\n  /***/\n  1114:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.binder\");\n    /***/\n  },\n\n  /***/\n  1132:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.fx\");\n    /***/\n  },\n\n  /***/\n  1513:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1051), __webpack_require__(1114), __webpack_require__(1132)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"view\",\n        name: \"View\",\n        category: \"framework\",\n        description: \"The View class instantiates and handles the events of a certain screen from the application.\",\n        depends: [\"core\", \"binder\", \"fx\"],\n        hidden: false\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            attr = kendo.attr,\n            ui = kendo.ui,\n            attrValue = kendo.attrValue,\n            directiveSelector = kendo.directiveSelector,\n            Observable = kendo.Observable,\n            Widget = kendo.ui.Widget,\n            roleSelector = kendo.roleSelector,\n            SCRIPT = \"SCRIPT\",\n            INIT = \"init\",\n            TRANSITION_START = \"transitionStart\",\n            TRANSITION_END = \"transitionEnd\",\n            SHOW = \"show\",\n            HIDE = \"hide\",\n            ATTACH = \"attach\",\n            DETACH = \"detach\",\n            sizzleErrorRegExp = /unrecognized expression/;\n        var bodyRegExp = /<body[^>]*>(([\\u000a\\u000d\\u2028\\u2029]|.)*)<\\/body>/i;\n        var LOAD_START = \"loadStart\";\n        var LOAD_COMPLETE = \"loadComplete\";\n        var SHOW_START = \"showStart\";\n        var SAME_VIEW_REQUESTED = \"sameViewRequested\";\n        var VIEW_SHOW = \"viewShow\";\n        var VIEW_TYPE_DETERMINED = \"viewTypeDetermined\";\n        var AFTER = \"after\";\n        var classNames = {\n          content: \"k-content\",\n          view: \"k-view\",\n          stretchedView: \"k-stretched-view\",\n          widget: \"k-widget\",\n          header: \"k-header\",\n          footer: \"k-footer\"\n        };\n        var View = kendo.ui.Widget.extend({\n          init: function (content, options) {\n            var that = this;\n            options = options || {};\n            that.id = kendo.guid();\n            Observable.fn.init.call(that);\n            this.options = $.extend({}, this.options, options);\n            that.content = content;\n\n            if (that.options.renderOnInit) {\n              Widget.fn.init.call(that, that._createElement(), options);\n            }\n\n            if (that.options.wrapInSections) {\n              that._renderSections();\n            }\n\n            that.tagName = options.tagName || \"div\";\n            that.model = options.model;\n            that._wrap = options.wrap !== false;\n            this._evalTemplate = options.evalTemplate || false;\n            this._useWithBlock = options.useWithBlock;\n            that._fragments = {};\n            that.bind([INIT, SHOW, HIDE, TRANSITION_START, TRANSITION_END], options);\n          },\n          options: {\n            name: \"View\",\n            renderOnInit: false,\n            wrapInSections: false,\n            detachOnHide: true,\n            detachOnDestroy: true\n          },\n          render: function (container) {\n            var that = this,\n                notInitialized = !that.element; // The order below matters - kendo.bind should happen when the element is in the DOM, and show should be triggered after init.\n\n            if (notInitialized) {\n              that.element = that._createElement();\n            }\n\n            if (container) {\n              $(container).append(that.element);\n            }\n\n            if (notInitialized) {\n              kendo.bind(that.element, that.model);\n              that.trigger(INIT);\n            }\n\n            if (container) {\n              that._eachFragment(ATTACH);\n\n              that.trigger(SHOW);\n            }\n\n            return that.element;\n          },\n          clone: function () {\n            return new ViewClone(this);\n          },\n          triggerBeforeShow: function () {\n            return true;\n          },\n          triggerBeforeHide: function () {\n            return true;\n          },\n          showStart: function () {\n            var that = this;\n            var element = that.render();\n\n            if (element) {\n              element.css(\"display\", \"\");\n            }\n\n            this.trigger(SHOW_START, {\n              view: this\n            });\n          },\n          showEnd: function () {},\n          hideEnd: function () {\n            this.hide();\n          },\n          beforeTransition: function (type) {\n            this.trigger(TRANSITION_START, {\n              type: type\n            });\n          },\n          afterTransition: function (type) {\n            this.trigger(TRANSITION_END, {\n              type: type\n            });\n          },\n          hide: function () {\n            if (this.options.detachOnHide) {\n              this._eachFragment(DETACH);\n\n              $(this.element).detach();\n            }\n\n            this.trigger(HIDE);\n          },\n          destroy: function () {\n            var that = this;\n            var element = that.element;\n\n            if (element) {\n              Widget.fn.destroy.call(that);\n              kendo.unbind(element);\n              kendo.destroy(element);\n\n              if (that.options.detachOnDestroy) {\n                element.remove();\n              }\n            }\n          },\n          // ported from mobile view\n          purge: function () {\n            var that = this;\n            that.destroy();\n            $(that.element).add(that.content).add(that.wrapper).off().remove();\n          },\n          fragments: function (fragments) {\n            $.extend(this._fragments, fragments);\n          },\n          _eachFragment: function (methodName) {\n            for (var placeholder in this._fragments) {\n              this._fragments[placeholder][methodName](this, placeholder);\n            }\n          },\n          _createElement: function () {\n            var that = this,\n                wrapper = \"<\" + that.tagName + \">\",\n                element,\n                content;\n\n            try {\n              content = $(document.getElementById(that.content) || that.content); // support passing id without #\n\n              if (content[0].tagName === SCRIPT) {\n                content = content.html();\n              }\n            } catch (e) {\n              if (sizzleErrorRegExp.test(e.message)) {\n                content = that.content;\n              }\n            }\n\n            if (typeof content === \"string\") {\n              content = content.replace(/^\\s+|\\s+$/g, '');\n\n              if (that._evalTemplate) {\n                content = kendo.template(content, {\n                  useWithBlock: that._useWithBlock\n                })(that.model || {});\n              }\n\n              element = $(wrapper).append(content); // drop the wrapper if asked - this seems like the easiest (although not very intuitive) way to avoid messing up templates with questionable content, like this one for instance:\n              // <script id=\"my-template\">\n              // foo\n              // <span> Span </span>\n              // </script>\n\n              if (!that._wrap) {\n                element = element.contents();\n              }\n            } else {\n              element = content;\n\n              if (that._evalTemplate) {\n                var result = $(kendo.template($(\"<div />\").append(element.clone(true)).html(), {\n                  useWithBlock: that._useWithBlock\n                })(that.model || {})); // template uses DOM\n\n                if ($.contains(document, element[0])) {\n                  element.replaceWith(result);\n                }\n\n                element = result;\n              }\n\n              if (that._wrap) {\n                element = element.wrapAll(wrapper).parent();\n              }\n            }\n\n            return element;\n          },\n          _renderSections: function () {\n            var that = this;\n\n            if (that.options.wrapInSections) {\n              that._wrapper();\n\n              that._createContent();\n\n              that._createHeader();\n\n              that._createFooter();\n            }\n          },\n          _wrapper: function () {\n            var that = this;\n            var content = that.content;\n\n            if (content.is(roleSelector(\"view\"))) {\n              that.wrapper = that.content;\n            } else {\n              that.wrapper = content.wrap('<div data-' + kendo.ns + 'stretch=\"true\" data-' + kendo.ns + 'role=\"view\" data-' + kendo.ns + 'init-widgets=\"false\"></div>').parent();\n            }\n\n            var wrapper = that.wrapper;\n            wrapper.attr(\"id\", that.id);\n            wrapper.addClass(classNames.view);\n            wrapper.addClass(classNames.widget);\n            wrapper.attr(\"role\", \"view\");\n          },\n          _createContent: function () {\n            var that = this;\n            var wrapper = $(that.wrapper);\n            var contentSelector = roleSelector(\"content\");\n\n            if (!wrapper.children(contentSelector)[0]) {\n              var ccontentElements = wrapper.children().filter(function () {\n                var child = $(this);\n\n                if (!child.is(roleSelector(\"header\")) && !child.is(roleSelector(\"footer\"))) {\n                  return child;\n                }\n              });\n              ccontentElements.wrap(\"<div \" + attr(\"role\") + '=\"content\"></div>');\n            } // use contentElement instead of content as view.content can be a string\n\n\n            this.contentElement = wrapper.children(roleSelector(\"content\"));\n            this.contentElement.addClass(classNames.stretchedView).addClass(classNames.content);\n          },\n          _createHeader: function () {\n            var that = this;\n            var wrapper = that.wrapper;\n            this.header = wrapper.children(roleSelector(\"header\")).addClass(classNames.header);\n          },\n          _createFooter: function () {\n            var that = this;\n            var wrapper = that.wrapper;\n            this.footer = wrapper.children(roleSelector(\"footer\")).addClass(classNames.footer);\n          }\n        });\n        var ViewClone = kendo.Class.extend({\n          init: function (view) {\n            $.extend(this, {\n              element: view.element.clone(true),\n              transition: view.transition,\n              id: view.id\n            });\n            view.element.parent().append(this.element);\n          },\n          hideEnd: function () {\n            this.element.remove();\n          },\n          beforeTransition: $.noop,\n          afterTransition: $.noop\n        });\n        var Layout = View.extend({\n          init: function (content, options) {\n            View.fn.init.call(this, content, options);\n            this.containers = {};\n          },\n          container: function (selector) {\n            var container = this.containers[selector];\n\n            if (!container) {\n              container = this._createContainer(selector);\n              this.containers[selector] = container;\n            }\n\n            return container;\n          },\n          showIn: function (selector, view, transition) {\n            this.container(selector).show(view, transition);\n          },\n          _createContainer: function (selector) {\n            var root = this.render(),\n                element = root.find(selector),\n                container;\n\n            if (!element.length && root.is(selector)) {\n              if (root.is(selector)) {\n                element = root;\n              } else {\n                throw new Error(\"can't find a container with the specified \" + selector + \" selector\");\n              }\n            }\n\n            container = new ViewContainer(element);\n            container.bind(\"accepted\", function (e) {\n              e.view.render(element);\n            });\n            return container;\n          }\n        });\n        var Fragment = View.extend({\n          attach: function (view, placeholder) {\n            view.element.find(placeholder).replaceWith(this.render());\n          },\n          detach: function () {}\n        });\n        var transitionRegExp = /^(\\w+)(:(\\w+))?( (\\w+))?$/;\n\n        function parseTransition(transition) {\n          if (!transition) {\n            return {};\n          }\n\n          var matches = transition.match(transitionRegExp) || [];\n          return {\n            type: matches[1],\n            direction: matches[3],\n            reverse: matches[5] === \"reverse\"\n          };\n        }\n\n        var ViewContainer = Observable.extend({\n          init: function (container) {\n            Observable.fn.init.call(this);\n            this.container = container;\n            this.history = [];\n            this.view = null;\n            this.running = false;\n          },\n          after: function () {\n            this.running = false;\n            this.trigger(\"complete\", {\n              view: this.view\n            });\n            this.trigger(\"after\");\n          },\n          end: function () {\n            this.view.showEnd();\n            this.previous.hideEnd();\n            this.after();\n          },\n          show: function (view, transition, locationID) {\n            if (!view.triggerBeforeShow() || this.view && !this.view.triggerBeforeHide()) {\n              this.trigger(\"after\");\n              return false;\n            }\n\n            locationID = locationID || view.id;\n            var that = this,\n                current = view === that.view ? view.clone() : that.view,\n                history = that.history,\n                previousEntry = history[history.length - 2] || {},\n                back = previousEntry.id === locationID,\n                // If explicit transition is set, it will be with highest priority\n            // Next we will try using the history record transition or the view transition configuration\n            theTransition = transition || (back ? history[history.length - 1].transition : view.transition),\n                transitionData = parseTransition(theTransition);\n\n            if (that.running) {\n              that.effect.stop();\n            }\n\n            if (theTransition === \"none\") {\n              theTransition = null;\n            }\n\n            that.trigger(\"accepted\", {\n              view: view\n            });\n            that.view = view;\n            that.previous = current;\n            that.running = true;\n\n            if (!back) {\n              history.push({\n                id: locationID,\n                transition: theTransition\n              });\n            } else {\n              history.pop();\n            }\n\n            if (!current) {\n              view.showStart();\n              view.showEnd();\n              that.after();\n              return true;\n            }\n\n            if (!theTransition || !kendo.effects.enabled) {\n              view.showStart();\n              that.end();\n            } else {\n              // hide the view element before init/show - prevents blinks on iPad\n              // the replace effect will remove this class\n              view.element.addClass(\"k-fx-hidden\");\n              view.showStart(); // do not reverse the explicit transition\n\n              if (back && !transition) {\n                transitionData.reverse = !transitionData.reverse;\n              }\n\n              that.effect = kendo.fx(view.element).replace(current.element, transitionData.type).beforeTransition(function () {\n                view.beforeTransition(\"show\");\n                current.beforeTransition(\"hide\");\n              }).afterTransition(function () {\n                view.afterTransition(\"show\");\n                current.afterTransition(\"hide\");\n              }).direction(transitionData.direction).setReverse(transitionData.reverse);\n              that.effect.run().then(function () {\n                that.end();\n              });\n            }\n\n            return true;\n          },\n          destroy: function () {\n            var that = this;\n            var view = that.view;\n\n            if (view && view.destroy) {\n              view.destroy();\n            }\n          }\n        });\n        var ViewEngine = Observable.extend({\n          init: function (options) {\n            var that = this,\n                views,\n                container;\n            Observable.fn.init.call(that);\n            that.options = options;\n            $.extend(that, options);\n            that.sandbox = $(\"<div />\");\n            container = that.container;\n            views = that._hideViews(container);\n            that.rootView = views.first();\n            that.layouts = {};\n            that.viewContainer = new kendo.ViewContainer(that.container);\n            that.viewContainer.bind(\"accepted\", function (e) {\n              e.view.params = that.params;\n            });\n            that.viewContainer.bind(\"complete\", function (e) {\n              that.trigger(VIEW_SHOW, {\n                view: e.view\n              });\n            });\n            that.viewContainer.bind(AFTER, function () {\n              that.trigger(AFTER);\n            });\n            this.bind(this.events, options);\n          },\n          events: [SHOW_START, AFTER, VIEW_SHOW, LOAD_START, LOAD_COMPLETE, SAME_VIEW_REQUESTED, VIEW_TYPE_DETERMINED],\n          destroy: function () {\n            var that = this;\n            var viewContainer = that.viewContainer;\n            kendo.destroy(that.container);\n\n            for (var id in that.layouts) {\n              this.layouts[id].destroy();\n            }\n\n            if (viewContainer) {\n              viewContainer.destroy();\n            }\n          },\n          view: function () {\n            return this.viewContainer.view;\n          },\n          showView: function (url, transition, params) {\n            url = url.replace(new RegExp(\"^\" + this.remoteViewURLPrefix), \"\");\n\n            if (url === \"\" && this.remoteViewURLPrefix) {\n              url = \"/\";\n            }\n\n            if (url.replace(/^#/, \"\") === this.url) {\n              this.trigger(SAME_VIEW_REQUESTED);\n              return false;\n            }\n\n            this.trigger(SHOW_START);\n\n            var that = this,\n                element = that._findViewElement(url),\n                view = kendo.widgetInstance(element);\n\n            that.url = url.replace(/^#/, \"\");\n            that.params = params;\n\n            if (view && view.reload) {\n              view.purge();\n              element = [];\n            }\n\n            this.trigger(VIEW_TYPE_DETERMINED, {\n              remote: element.length === 0,\n              url: url\n            });\n\n            if (element[0]) {\n              if (!view) {\n                view = that._createView(element);\n              }\n\n              return that.viewContainer.show(view, transition, url);\n            } else {\n              return true;\n            }\n          },\n          append: function (html, url) {\n            var sandbox = this.sandbox,\n                urlPath = (url || \"\").split(\"?\")[0],\n                container = this.container,\n                views,\n                view;\n\n            if (bodyRegExp.test(html)) {\n              html = RegExp.$1;\n            }\n\n            sandbox[0].innerHTML = html;\n            container.append(sandbox.children(\"script, style\"));\n            views = this._hideViews(sandbox);\n            view = views.first(); // Generic HTML content found as remote view - no remote view markers\n\n            if (!view.length) {\n              views = view = sandbox.wrapInner(\"<div data-role=view />\").children(); // one element\n            }\n\n            if (urlPath) {\n              view.hide().attr(attr(\"url\"), urlPath);\n            }\n\n            container.append(views);\n            return this._createView(view);\n          },\n          _locate: function (selectors) {\n            return this.$angular ? directiveSelector(selectors) : roleSelector(selectors);\n          },\n          _findViewElement: function (url) {\n            var element,\n                urlPath = url.split(\"?\")[0];\n\n            if (!urlPath) {\n              return this.rootView;\n            }\n\n            element = this.container.children(\"[\" + attr(\"url\") + \"='\" + urlPath + \"']\"); // do not try to search for \"#/foo/bar\" id, jQuery throws error\n\n            if (!element[0] && urlPath.indexOf(\"/\") === -1) {\n              element = this.container.children(urlPath.charAt(0) === \"#\" ? urlPath : \"#\" + urlPath);\n            }\n\n            if (!element[0]) {\n              element = this._findViewElementById(url);\n            }\n\n            return element;\n          },\n          _findViewElementById: function (id) {\n            var element = this.container.children(\"[id='\" + id + \"']\");\n            return element;\n          },\n          _createView: function (element) {\n            //return this._createMobileView(element);\n            return this._createSpaView(element);\n          },\n          _createMobileView: function (element) {\n            return kendo.initWidget(element, {\n              defaultTransition: this.transition,\n              loader: this.loader,\n              container: this.container,\n              getLayout: this.getLayoutProxy,\n              modelScope: this.modelScope,\n              reload: attrValue(element, \"reload\")\n            }, ui.roles);\n          },\n          _createSpaView: function (element) {\n            var viewOptions = (this.options || {}).viewOptions || {};\n            return new kendo.View(element, {\n              renderOnInit: viewOptions.renderOnInit,\n              wrap: viewOptions.wrap || false,\n              wrapInSections: viewOptions.wrapInSections,\n              detachOnHide: viewOptions.detachOnHide,\n              detachOnDestroy: viewOptions.detachOnDestroy\n            });\n          },\n          _hideViews: function (container) {\n            return container.children(this._locate(\"view\")).hide();\n          }\n        });\n        kendo.ViewEngine = ViewEngine;\n        kendo.ViewContainer = ViewContainer;\n        kendo.Fragment = Fragment;\n        kendo.Layout = Layout;\n        kendo.View = View;\n        kendo.ViewClone = ViewClone;\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}