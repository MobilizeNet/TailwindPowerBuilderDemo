{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Model } from '../../Core';\nimport { ErrorCodes, ExceptionHandlerClass } from '../../System/Aop';\n\nvar ModelV5 = function (_super) {\n  __extends(ModelV5, _super);\n\n  function ModelV5(id, projection) {\n    var _this = _super.call(this, id) || this;\n\n    _this.___init(id, projection);\n\n    return _this;\n  }\n\n  ModelV5_1 = ModelV5;\n  Object.defineProperty(ModelV5.prototype, \"UniqueID\", {\n    get: function () {\n      return this.id;\n    },\n    set: function (value) {\n      this.id = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  ModelV5.prototype.___init = function (id, projection) {\n    this.id = id;\n    this.references = {};\n    this.referencedBy = {};\n\n    if (projection) {\n      this.references = projection.References ? projection.References : {};\n      this.mapperId = projection.MapperId;\n      this.eventChanges = projection.EventChanges ? projection.EventChanges : {};\n      this.stylePivot = projection.Style ? projection.Style : {};\n    }\n\n    this.addProperties(projection);\n  };\n\n  ModelV5.prototype.addReferencedBy = function (modelId, name) {\n    this.referencedBy[modelId] = name;\n  };\n\n  ModelV5.prototype.removeReference = function (name) {\n    delete this.references[name];\n    delete this[name];\n  };\n\n  ModelV5.prototype.applyOnProperties = function (item, fn) {\n    for (var prop in item) {\n      if (item.hasOwnProperty(prop) && ModelV5_1.myInternalProperties.indexOf(prop) === -1) {\n        fn.call(this, prop);\n      } else if (prop === ModelV5_1.myInternalProperties[2]) {\n        this.applyReferencesDeltas(item);\n      }\n    }\n  };\n\n  ModelV5.prototype.applyReferencesDeltas = function (projection) {\n    for (var ref in projection.References) {\n      if (projection.References.hasOwnProperty(ref)) {\n        this.references[ref] = projection.References[ref];\n      }\n    }\n  };\n\n  ModelV5.prototype.addProperties = function (obj) {\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key) && ModelV5_1.myInternalProperties.indexOf(key) === -1) {\n        this[key] = obj[key];\n      }\n    }\n  };\n\n  var ModelV5_1;\n  ModelV5.myInternalProperties = ['Id', 'MapperId', 'References', 'EventChanges', '_internalProperties', 'childrenToNotify', 'onModelChange', '_isTempModel', '_pointers', 'Style'];\n  ModelV5 = ModelV5_1 = __decorate([ExceptionHandlerClass(ErrorCodes.ClientCore), __metadata(\"design:paramtypes\", [String, Object])], ModelV5);\n  return ModelV5;\n}(Model);\n\nexport { ModelV5 }; //# sourceMappingURL=data:application/json;base64,","map":null,"metadata":{},"sourceType":"module"}