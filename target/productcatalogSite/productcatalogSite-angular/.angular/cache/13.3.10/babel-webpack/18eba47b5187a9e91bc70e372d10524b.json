{"ast":null,"code":"import { Code39Base } from './code39';\nconst extend = Object.assign;\nexport class Code93 extends Code39Base {\n  initProperties() {\n    super.initProperties();\n    extend(this, {\n      name: \"Code 93\",\n      cCheckSumTotal: 20,\n      kCheckSumTotal: 15,\n      checkSumMod: 47,\n      characterMap: {\n        \"0\": {\n          \"pattern\": \"131112\",\n          \"value\": 0\n        },\n        \"1\": {\n          \"pattern\": \"111213\",\n          \"value\": 1\n        },\n        \"2\": {\n          \"pattern\": \"111312\",\n          \"value\": 2\n        },\n        \"3\": {\n          \"pattern\": \"111411\",\n          \"value\": 3\n        },\n        \"4\": {\n          \"pattern\": \"121113\",\n          \"value\": 4\n        },\n        \"5\": {\n          \"pattern\": \"121212\",\n          \"value\": 5\n        },\n        \"6\": {\n          \"pattern\": \"121311\",\n          \"value\": 6\n        },\n        \"7\": {\n          \"pattern\": \"111114\",\n          \"value\": 7\n        },\n        \"8\": {\n          \"pattern\": \"131211\",\n          \"value\": 8\n        },\n        \"9\": {\n          \"pattern\": \"141111\",\n          \"value\": 9\n        },\n        \"A\": {\n          \"pattern\": \"211113\",\n          \"value\": 10\n        },\n        \"B\": {\n          \"pattern\": \"211212\",\n          \"value\": 11\n        },\n        \"C\": {\n          \"pattern\": \"211311\",\n          \"value\": 12\n        },\n        \"D\": {\n          \"pattern\": \"221112\",\n          \"value\": 13\n        },\n        \"E\": {\n          \"pattern\": \"221211\",\n          \"value\": 14\n        },\n        \"F\": {\n          \"pattern\": \"231111\",\n          \"value\": 15\n        },\n        \"G\": {\n          \"pattern\": \"112113\",\n          \"value\": 16\n        },\n        \"H\": {\n          \"pattern\": \"112212\",\n          \"value\": 17\n        },\n        \"I\": {\n          \"pattern\": \"112311\",\n          \"value\": 18\n        },\n        \"J\": {\n          \"pattern\": \"122112\",\n          \"value\": 19\n        },\n        \"K\": {\n          \"pattern\": \"132111\",\n          \"value\": 20\n        },\n        \"L\": {\n          \"pattern\": \"111123\",\n          \"value\": 21\n        },\n        \"M\": {\n          \"pattern\": \"111222\",\n          \"value\": 22\n        },\n        \"N\": {\n          \"pattern\": \"111321\",\n          \"value\": 23\n        },\n        \"O\": {\n          \"pattern\": \"121122\",\n          \"value\": 24\n        },\n        \"P\": {\n          \"pattern\": \"131121\",\n          \"value\": 25\n        },\n        \"Q\": {\n          \"pattern\": \"212112\",\n          \"value\": 26\n        },\n        \"R\": {\n          \"pattern\": \"212211\",\n          \"value\": 27\n        },\n        \"S\": {\n          \"pattern\": \"211122\",\n          \"value\": 28\n        },\n        \"T\": {\n          \"pattern\": \"211221\",\n          \"value\": 29\n        },\n        \"U\": {\n          \"pattern\": \"221121\",\n          \"value\": 30\n        },\n        \"V\": {\n          \"pattern\": \"222111\",\n          \"value\": 31\n        },\n        \"W\": {\n          \"pattern\": \"112122\",\n          \"value\": 32\n        },\n        \"X\": {\n          \"pattern\": \"112221\",\n          \"value\": 33\n        },\n        \"Y\": {\n          \"pattern\": \"122121\",\n          \"value\": 34\n        },\n        \"Z\": {\n          \"pattern\": \"123111\",\n          \"value\": 35\n        },\n        \"-\": {\n          \"pattern\": \"121131\",\n          \"value\": 36\n        },\n        \".\": {\n          \"pattern\": \"311112\",\n          \"value\": 37\n        },\n        \" \": {\n          \"pattern\": \"311211\",\n          \"value\": 38\n        },\n        \"$\": {\n          \"pattern\": \"321111\",\n          \"value\": 39\n        },\n        \"/\": {\n          \"pattern\": \"112131\",\n          \"value\": 40\n        },\n        \"+\": {\n          \"pattern\": \"113121\",\n          \"value\": 41\n        },\n        \"%\": {\n          \"pattern\": \"211131\",\n          \"value\": 42\n        },\n        SHIFT0: {\n          \"pattern\": \"122211\",\n          \"value\": 46\n        },\n        SHIFT1: {\n          \"pattern\": \"311121\",\n          \"value\": 45\n        },\n        SHIFT2: {\n          \"pattern\": \"121221\",\n          \"value\": 43\n        },\n        SHIFT3: {\n          \"pattern\": \"312111\",\n          \"value\": 44\n        },\n        START: {\n          \"pattern\": \"111141\"\n        },\n        TERMINATION_BAR: \"1\"\n      }\n    });\n  }\n\n  initValue(value, width, height) {\n    this.value = value;\n    this.width = width;\n    this.height = height;\n    this.pattern = [];\n    this.values = [];\n    this.dataLength = value.length;\n  }\n\n  prepareValues() {\n    let minHeight = Math.ceil(Math.max(0.15 * this.width, 24));\n\n    if (this.height < minHeight) {\n      throw new Error(`Insufficient height for Code93 encoding: the current height is ${this.height}px, the minimum required height is ${minHeight}px.`);\n    }\n\n    this.setBaseUnit();\n\n    if (this.baseUnit < this.minBaseUnitLength) {\n      const minWidth = Math.ceil(this.minBaseUnitLength * (this.width / this.baseUnit));\n      throw new Error(`Insufficient width for Code93 encoding: the current width is ${this.width}px and the minimum required width for value \"${this.value}\" is ${minWidth}px.`);\n    }\n  }\n\n  setBaseUnit() {\n    const checkSumLength = 2;\n    this.baseUnit = this.width / (9 * (this.dataLength + 2 + checkSumLength) + this.quietZoneLength + 1);\n  }\n\n  addStart() {\n    let pattern = this.characterMap.START.pattern;\n    this.addPattern(pattern);\n  }\n\n  addStop() {\n    this.addStart();\n    this.pattern.push(this.characterMap.TERMINATION_BAR);\n  }\n\n  addBase(charData) {\n    this.addPattern(charData.pattern);\n    this.values.push(charData.value);\n  }\n\n  pushCheckSum() {\n    const checkValues = this._getCheckValues();\n\n    let charData;\n    this.checksum = checkValues.join(\"\");\n\n    for (let i = 0; i < checkValues.length; i++) {\n      charData = this.characterMap[this._findCharacterByValue(checkValues[i])];\n      this.addPattern(charData.pattern);\n    }\n  }\n\n  _getCheckValues() {\n    const values = this.values;\n    const length = values.length;\n    let wightedSum = 0;\n    let cValue;\n    let kValue;\n    let idx;\n\n    for (idx = length - 1; idx >= 0; idx--) {\n      wightedSum += this.weightedValue(values[idx], length - idx, this.cCheckSumTotal);\n    }\n\n    cValue = wightedSum % this.checkSumMod;\n    wightedSum = this.weightedValue(cValue, 1, this.kCheckSumTotal);\n\n    for (idx = length - 1; idx >= 0; idx--) {\n      wightedSum += this.weightedValue(values[idx], length - idx + 1, this.kCheckSumTotal);\n    }\n\n    kValue = wightedSum % this.checkSumMod;\n    return [cValue, kValue];\n  }\n\n  _findCharacterByValue(value) {\n    for (let character in this.characterMap) {\n      if (this.characterMap[character].value === value) {\n        return character;\n      }\n    }\n  }\n\n  weightedValue(value, index, total) {\n    return (index % total || total) * value;\n  }\n\n  addPattern(pattern) {\n    let value;\n\n    for (let i = 0; i < pattern.length; i++) {\n      value = parseInt(pattern.charAt(i), 10);\n      this.pattern.push(value);\n    }\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}