{"ast":null,"code":"import deepExtend from './deep-extend';\nconst TRIGGER = 'trigger';\n\nclass InstanceObserver {\n  constructor(observer, handlers) {\n    this.observer = observer;\n    this.handlerMap = deepExtend({}, this.handlerMap, handlers);\n  }\n\n  trigger(name, args) {\n    const {\n      observer,\n      handlerMap\n    } = this;\n    let isDefaultPrevented;\n\n    if (handlerMap[name]) {\n      isDefaultPrevented = this.callObserver(handlerMap[name], args);\n    } else if (observer[TRIGGER]) {\n      isDefaultPrevented = this.callObserver(TRIGGER, name, args);\n    }\n\n    return isDefaultPrevented;\n  }\n\n  callObserver(fnName, ...args) {\n    return this.observer[fnName].apply(this.observer, args);\n  }\n\n  requiresHandlers(names) {\n    if (this.observer.requiresHandlers) {\n      return this.observer.requiresHandlers(names);\n    }\n\n    for (let idx = 0; idx < names.length; idx++) {\n      if (this.handlerMap[names[idx]]) {\n        return true;\n      }\n    }\n  }\n\n}\n\nexport default InstanceObserver;","map":null,"metadata":{},"sourceType":"module"}