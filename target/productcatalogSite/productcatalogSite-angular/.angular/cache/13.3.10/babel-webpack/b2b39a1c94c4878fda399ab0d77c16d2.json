{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1514);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1060:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"jquery\");\n    /***/\n  },\n\n  /***/\n  1063:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.data\");\n    /***/\n  },\n\n  /***/\n  1514:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n    /* WEBPACK VAR INJECTION */\n\n\n    (function (jQuery) {\n      (function (f, define) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1063)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n      })(function () {\n        var __meta__ = {\n          // jshint ignore:line\n          id: \"virtuallist\",\n          name: \"VirtualList\",\n          category: \"framework\",\n          depends: [\"data\"],\n          hidden: true\n        };\n\n        (function ($, undefined) {\n          var kendo = window.kendo,\n              ui = kendo.ui,\n              Widget = ui.Widget,\n              DataBoundWidget = ui.DataBoundWidget,\n              percentageUnitsRegex = /^\\d+(\\.\\d+)?%$/i,\n              LIST_CONTENT = \"k-list-content k-virtual-content\",\n              TABLE_CONTENT = \"k-table-body k-table-scroller\",\n              HEADER = \"k-list-group-sticky-header\",\n              LIST_ITEM = \"k-list-item\",\n              TABLE_ITEM = \"k-table-row\",\n              HEIGHTCONTAINER = \"k-height-container\",\n              GROUPITEM = \"k-list-item-group-label\",\n              LIST_UL = \"k-list-ul\",\n              TABLE_LIST = \"k-table-list\",\n              SELECTED = \"k-selected\",\n              FOCUSED = \"k-focus\",\n              HOVER = \"k-hover\",\n              CHANGE = \"change\",\n              CLICK = \"click\",\n              LISTBOUND = \"listBound\",\n              ITEMCHANGE = \"itemChange\",\n              ACTIVATE = \"activate\",\n              DEACTIVATE = \"deactivate\",\n              GROUP_ROW_SEL = \".k-table-group-row\",\n              VIRTUAL_LIST_NS = \".VirtualList\";\n\n          function lastFrom(array) {\n            return array[array.length - 1];\n          }\n\n          function toArray(value) {\n            return value instanceof Array ? value : [value];\n          }\n\n          function isPrimitive(dataItem) {\n            return typeof dataItem === \"string\" || typeof dataItem === \"number\" || typeof dataItem === \"boolean\";\n          }\n\n          function getItemCount(screenHeight, listScreens, itemHeight) {\n            return Math.ceil(screenHeight * listScreens / itemHeight);\n          }\n\n          function appendChild(parent, className, tagName) {\n            var element = document.createElement(tagName || \"div\");\n\n            if (className) {\n              element.className = className;\n            }\n\n            parent.appendChild(element);\n            return element;\n          }\n\n          function getDefaultItemHeight(listSize) {\n            var mockList = $('<div class=\"k-list ' + listSize + ' k-virtual-list\">' + '<div class=\"k-list-content k-virtual-content\">' + '<ul class=\"k-list-ul\">' + '<li class=\"k-list-item\">' + '<span class=\"k-list-item-text\">test</span>' + '</li>' + '</ul>' + '</div>' + '</div>');\n            var lineHeight;\n            mockList.css({\n              position: \"absolute\",\n              left: \"-200000px\",\n              visibility: \"hidden\"\n            });\n            mockList.appendTo(document.body);\n            lineHeight = parseFloat(kendo.getComputedStyles(mockList.find(\".k-list-item\")[0], [\"height\"]).height);\n            mockList.remove();\n            return lineHeight;\n          }\n\n          function bufferSizes(screenHeight, listScreens, opposite) {\n            //in pixels\n            return {\n              down: screenHeight * opposite,\n              up: screenHeight * (listScreens - 1 - opposite)\n            };\n          }\n\n          function listValidator(options, screenHeight) {\n            var downThreshold = (options.listScreens - 1 - options.threshold) * screenHeight;\n            var upThreshold = options.threshold * screenHeight;\n            return function (list, scrollTop, lastScrollTop) {\n              if (scrollTop > lastScrollTop) {\n                return scrollTop - list.top < downThreshold;\n              } else {\n                return list.top === 0 || scrollTop - list.top > upThreshold;\n              }\n            };\n          }\n\n          function scrollCallback(element, callback) {\n            return function (force) {\n              return callback(element.scrollTop, force);\n            };\n          }\n\n          function syncList(reorder) {\n            return function (list, force) {\n              reorder(list.items, list.index, force);\n              return list;\n            };\n          }\n\n          function position(element, y) {\n            element.style.webkitTransform = 'translateY(' + y + \"px)\";\n            element.style.transform = 'translateY(' + y + \"px)\";\n          }\n\n          function map2(callback, templates) {\n            return function (arr1, arr2) {\n              for (var i = 0, len = arr1.length; i < len; i++) {\n                callback(arr1[i], arr2[i], templates);\n\n                if (arr2[i].item) {\n                  this.trigger(ITEMCHANGE, {\n                    item: $(arr1[i]),\n                    data: arr2[i].item,\n                    ns: kendo.ui\n                  });\n                }\n              }\n            };\n          }\n\n          function reshift(items, diff) {\n            var range;\n\n            if (diff > 0) {\n              // down\n              range = items.splice(0, diff);\n              items.push.apply(items, range);\n            } else {\n              // up\n              range = items.splice(diff, -diff);\n              items.unshift.apply(items, range);\n            }\n\n            return range;\n          }\n\n          function render(element, data, templates) {\n            var itemTemplate = templates.template,\n                hasColumns = this.options.columns && this.options.columns.length,\n                altRow = data.index % 2 === 1 ? \"k-table-alt-row\" : \"\";\n            element = $(element);\n\n            if (!data.item) {\n              itemTemplate = templates.placeholderTemplate;\n            }\n\n            if (data.index === 0 && this.header && data.group) {\n              this.header.html(templates.fixedGroupTemplate(data.group));\n            }\n\n            this.angular(\"cleanup\", function () {\n              return {\n                elements: [element]\n              };\n            });\n            element.attr(\"data-uid\", data.item ? data.item.uid : \"\").attr(\"data-offset-index\", data.index);\n\n            if (hasColumns && data.item) {\n              if (altRow.length > 0) {\n                element.addClass(altRow);\n              } else {\n                element.removeClass(\"k-table-alt-row\");\n              }\n\n              element.html(renderColumns(this.options, data.item, templates));\n            } else {\n              element.find(\".\" + GROUPITEM).remove();\n              element.find(\".k-list-item-text\").html(itemTemplate(data.item || {}));\n            }\n\n            element.toggleClass(FOCUSED, data.current);\n            element.toggleClass(SELECTED, data.selected);\n            element.toggleClass(\"k-first\", data.newGroup);\n            element.toggleClass(\"k-last\", data.isLastGroupedItem);\n            element.toggleClass(\"k-loading-item\", !data.item);\n\n            if (data.index !== 0 && data.newGroup) {\n              if (hasColumns) {\n                $('<span class=\"k-table-td k-table-group-td\"><span>' + templates.groupTemplate(data.group) + '</span></span>').appendTo(element);\n              } else {\n                $(\"<div class=\" + GROUPITEM + \"></div>\").appendTo(element).html(templates.groupTemplate(data.group));\n              }\n            } else if (data.group && hasColumns) {\n              element.append($('<span class=\"k-table-td k-table-spacer-td\"></span>'));\n            }\n\n            if (data.top !== undefined) {\n              position(element[0], data.top);\n            }\n\n            this.angular(\"compile\", function () {\n              return {\n                elements: [element],\n                data: [{\n                  dataItem: data.item,\n                  group: data.group,\n                  newGroup: data.newGroup\n                }]\n              };\n            });\n          }\n\n          function renderColumns(options, dataItem, templates) {\n            var item = \"\";\n\n            for (var i = 0; i < options.columns.length; i++) {\n              var currentWidth = options.columns[i].width;\n              var currentWidthInt = parseInt(currentWidth, 10);\n              var widthStyle = '';\n\n              if (currentWidth) {\n                widthStyle += \"style='width:\";\n                widthStyle += currentWidthInt;\n                widthStyle += percentageUnitsRegex.test(currentWidth) ? \"%\" : \"px\";\n                widthStyle += \";'\";\n              }\n\n              item += \"<span class='k-table-td' \" + widthStyle + \">\";\n              item += templates[\"column\" + i](dataItem);\n              item += \"</span>\";\n            }\n\n            return item;\n          }\n\n          function mapChangedItems(selected, itemsToMatch) {\n            var itemsLength = itemsToMatch.length;\n            var selectedLength = selected.length;\n            var dataItem;\n            var found;\n            var i, j;\n            var changed = [];\n            var unchanged = [];\n\n            if (selectedLength) {\n              for (i = 0; i < selectedLength; i++) {\n                dataItem = selected[i];\n                found = false;\n\n                for (j = 0; j < itemsLength; j++) {\n                  if (dataItem === itemsToMatch[j]) {\n                    found = true;\n                    changed.push({\n                      index: i,\n                      item: dataItem\n                    });\n                    break;\n                  }\n                }\n\n                if (!found) {\n                  unchanged.push(dataItem);\n                }\n              }\n            }\n\n            return {\n              changed: changed,\n              unchanged: unchanged\n            };\n          }\n\n          function isActivePromise(promise) {\n            return promise && promise.state() !== \"resolved\";\n          }\n\n          var VirtualList = DataBoundWidget.extend({\n            init: function (element, options) {\n              var that = this,\n                  contentClasses = options.columns && options.columns.length ? TABLE_CONTENT : LIST_CONTENT;\n              that.bound(false);\n              that._fetching = false;\n              Widget.fn.init.call(that, element, options);\n\n              if (!that.options.itemHeight) {\n                that.options.itemHeight = getDefaultItemHeight(options.listSize);\n              }\n\n              options = that.options;\n              that.element.attr(\"role\", \"listbox\");\n              that.content = that.wrapper = that.element.wrap(\"<div unselectable='on' class='\" + contentClasses + \"'></div>\").parent();\n\n              if (that.options.columns && that.options.columns.length) {\n                var thead = that.element.closest(\".k-data-table\").find('.k-table-thead');\n                var row = $('<tr class=\"k-table-group-row\">' + '<th class=\"k-table-th\" colspan=\"' + that.options.columns.length + '\"></th>' + '</tr>');\n                thead.append(row);\n                that.header = row.find(\".k-table-th\");\n                that.element.addClass(TABLE_LIST + \" k-virtual-table\");\n              } else {\n                that.header = that.content.before(\"<div class='\" + HEADER + \"'></div>\").prev();\n                that.element.addClass(LIST_UL);\n              }\n\n              if (options.ariaLabel) {\n                this.element.attr(\"aria-label\", options.ariaLabel);\n              } else if (options.ariaLabelledBy) {\n                this.element.attr(\"aria-labelledby\", options.ariaLabelledBy);\n              }\n\n              that.element.on(\"mouseenter\" + VIRTUAL_LIST_NS, \"li:not(.k-loading-item)\", function () {\n                $(this).addClass(HOVER);\n              }).on(\"mouseleave\" + VIRTUAL_LIST_NS, \"li\", function () {\n                $(this).removeClass(HOVER);\n              });\n              that._values = toArray(that.options.value);\n              that._selectedDataItems = [];\n              that._selectedIndexes = [];\n              that._rangesList = {};\n              that._promisesList = [];\n              that._optionID = kendo.guid();\n\n              that._templates();\n\n              that.setDataSource(options.dataSource);\n              that.content.on(\"scroll\" + VIRTUAL_LIST_NS, kendo.throttle(function () {\n                that._renderItems();\n\n                that._triggerListBound();\n              }, options.delay));\n\n              that._selectable();\n            },\n            options: {\n              name: \"VirtualList\",\n              autoBind: true,\n              delay: 100,\n              height: null,\n              listScreens: 4,\n              threshold: 0.5,\n              itemHeight: null,\n              oppositeBuffer: 1,\n              type: \"flat\",\n              selectable: false,\n              value: [],\n              dataValueField: null,\n              template: \"#:data#\",\n              placeholderTemplate: \"loading...\",\n              groupTemplate: \"#:data#\",\n              fixedGroupTemplate: \"#:data#\",\n              mapValueTo: \"index\",\n              valueMapper: null,\n              ariaLabel: null,\n              ariaLabelledBy: null\n            },\n            events: [CHANGE, CLICK, LISTBOUND, ITEMCHANGE, ACTIVATE, DEACTIVATE],\n            setOptions: function (options) {\n              var itemClass = this.options.columns && this.options.columns.length ? TABLE_ITEM : LIST_ITEM;\n              Widget.fn.setOptions.call(this, options);\n\n              if (this._selectProxy && this.options.selectable === false) {\n                this.element.off(CLICK, \".\" + itemClass, this._selectProxy);\n              } else if (!this._selectProxy && this.options.selectable) {\n                this._selectable();\n              }\n\n              this._templates();\n\n              this.refresh();\n            },\n            items: function () {\n              return $(this._items);\n            },\n            destroy: function () {\n              this.wrapper.off(VIRTUAL_LIST_NS);\n              this.dataSource.unbind(CHANGE, this._refreshHandler);\n              Widget.fn.destroy.call(this);\n            },\n            setDataSource: function (source) {\n              var that = this;\n              var dataSource = source || {};\n              var value;\n              dataSource = Array.isArray(dataSource) ? {\n                data: dataSource\n              } : dataSource;\n              dataSource = kendo.data.DataSource.create(dataSource);\n\n              if (that.dataSource) {\n                that.dataSource.unbind(CHANGE, that._refreshHandler);\n\n                that._clean();\n\n                that.bound(false);\n                that._deferValueSet = true;\n                value = that.value();\n                that.value([]);\n                that.mute(function () {\n                  that.value(value);\n                });\n              } else {\n                that._refreshHandler = that.refresh.bind(that);\n              }\n\n              that.dataSource = dataSource.bind(CHANGE, that._refreshHandler);\n              that.setDSFilter(dataSource.filter());\n\n              if (dataSource.view().length !== 0) {\n                that.refresh();\n              } else if (that.options.autoBind) {\n                dataSource.fetch();\n              }\n            },\n            skip: function () {\n              return this.dataSource.currentRangeStart();\n            },\n            _triggerListBound: function () {\n              var that = this;\n              var skip = that.skip();\n\n              if (that.bound() && !that._selectingValue && that._skip !== skip) {\n                that._skip = skip;\n                that.trigger(LISTBOUND);\n              }\n            },\n            _getValues: function (dataItems) {\n              var getter = this._valueGetter;\n              return $.map(dataItems, function (dataItem) {\n                return getter(dataItem);\n              });\n            },\n            _highlightSelectedItems: function () {\n              for (var i = 0; i < this._selectedDataItems.length; i++) {\n                var item = this._getElementByDataItem(this._selectedDataItems[i]);\n\n                if (item.length) {\n                  item.addClass(SELECTED);\n                }\n              }\n            },\n            refresh: function (e) {\n              var that = this;\n              var action = e && e.action;\n              var isItemChange = action === \"itemchange\";\n              var filtered = this.isFiltered();\n              var result;\n\n              if (that._mute) {\n                return;\n              }\n\n              that._deferValueSet = false;\n\n              if (!that._fetching) {\n                if (filtered) {\n                  that.focus(0);\n                }\n\n                that._createList();\n\n                if (!action && that._values.length && !filtered && !that.options.skipUpdateOnBind && !that._emptySearch) {\n                  that._selectingValue = true;\n                  that.bound(true);\n                  that.value(that._values, true).done(function () {\n                    that._selectingValue = false;\n\n                    that._triggerListBound();\n                  });\n                } else {\n                  that.bound(true);\n\n                  that._highlightSelectedItems();\n\n                  that._triggerListBound();\n                }\n              } else {\n                if (that._renderItems) {\n                  that._renderItems(true);\n                }\n\n                that._triggerListBound();\n              }\n\n              if (isItemChange || action === \"remove\") {\n                result = mapChangedItems(that._selectedDataItems, e.items);\n\n                if (result.changed.length) {\n                  if (isItemChange) {\n                    that.trigger(\"selectedItemChange\", {\n                      items: result.changed\n                    });\n                  } else {\n                    that.value(that._getValues(result.unchanged));\n                  }\n                }\n              }\n\n              that._fetching = false;\n            },\n            removeAt: function (position) {\n              var value = this._values.splice(position, 1)[0];\n\n              return {\n                position: position,\n                dataItem: this._removeSelectedDataItem(value)\n              };\n            },\n            _removeSelectedDataItem: function (value) {\n              var that = this,\n                  valueGetter = that._valueGetter;\n\n              for (var idx in that._selectedDataItems) {\n                if (valueGetter(that._selectedDataItems[idx]) === value) {\n                  that._selectedIndexes.splice(idx, 1);\n\n                  return that._selectedDataItems.splice(idx, 1)[0];\n                }\n              }\n            },\n            setValue: function (value) {\n              this._values = toArray(value);\n            },\n            value: function (value, _forcePrefetch) {\n              var that = this;\n\n              if (value === undefined) {\n                return that._values.slice();\n              }\n\n              if (value === null) {\n                value = [];\n              }\n\n              value = toArray(value);\n\n              if (!that._valueDeferred || that._valueDeferred.state() === \"resolved\") {\n                that._valueDeferred = $.Deferred();\n              }\n\n              var shouldClear = that.options.selectable === \"multiple\" && that.select().length && value.length;\n\n              if (shouldClear || !value.length) {\n                that.select(-1);\n              }\n\n              that._values = value;\n\n              if (that.bound() && !that._mute && !that._deferValueSet || _forcePrefetch) {\n                that._prefetchByValue(value);\n              }\n\n              return that._valueDeferred;\n            },\n            _checkValuesOrder: function (value) {\n              if (this._removedAddedIndexes && this._removedAddedIndexes.length === value.length) {\n                var newValue = this._removedAddedIndexes.slice();\n\n                this._removedAddedIndexes = null;\n                return newValue;\n              }\n\n              return value;\n            },\n            _prefetchByValue: function (value) {\n              var that = this,\n                  dataView = that._dataView,\n                  valueGetter = that._valueGetter,\n                  mapValueTo = that.options.mapValueTo,\n                  item,\n                  match = false,\n                  forSelection = []; //try to find the items in the loaded data\n\n              for (var i = 0; i < value.length; i++) {\n                for (var idx = 0; idx < dataView.length; idx++) {\n                  item = dataView[idx].item;\n\n                  if (item) {\n                    match = isPrimitive(item) ? value[i] === item : value[i] === valueGetter(item);\n\n                    if (match) {\n                      forSelection.push(dataView[idx].index);\n                    }\n                  }\n                }\n              }\n\n              if (forSelection.length === value.length) {\n                that._values = [];\n                that.select(forSelection);\n                return;\n              } //prefetch the items\n\n\n              if (typeof that.options.valueMapper === \"function\") {\n                that.options.valueMapper({\n                  value: this.options.selectable === \"multiple\" ? value : value[0],\n                  success: function (response) {\n                    if (mapValueTo === \"index\") {\n                      that.mapValueToIndex(response);\n                    } else if (mapValueTo === \"dataItem\") {\n                      that.mapValueToDataItem(response);\n                    }\n                  }\n                });\n              } else {\n                if (!that.value()[0]) {\n                  that.select([-1]);\n                } else {\n                  that._selectingValue = false;\n\n                  that._triggerListBound();\n                }\n              }\n            },\n            mapValueToIndex: function (indexes) {\n              if (indexes === undefined || indexes === -1 || indexes === null) {\n                indexes = [];\n              } else {\n                indexes = toArray(indexes);\n              }\n\n              if (!indexes.length) {\n                indexes = [-1];\n              } else {\n                var removed = this._deselect([]).removed;\n\n                if (removed.length) {\n                  this._triggerChange(removed, []);\n                }\n              }\n\n              this.select(indexes);\n            },\n            mapValueToDataItem: function (dataItems) {\n              var removed, added;\n\n              if (dataItems === undefined || dataItems === null) {\n                dataItems = [];\n              } else {\n                dataItems = toArray(dataItems);\n              }\n\n              if (!dataItems.length) {\n                this.select([-1]);\n              } else {\n                removed = $.map(this._selectedDataItems, function (item, index) {\n                  return {\n                    index: index,\n                    dataItem: item\n                  };\n                });\n                added = $.map(dataItems, function (item, index) {\n                  return {\n                    index: index,\n                    dataItem: item\n                  };\n                });\n                this._selectedDataItems = dataItems;\n                this._selectedIndexes = [];\n\n                for (var i = 0; i < this._selectedDataItems.length; i++) {\n                  var item = this._getElementByDataItem(this._selectedDataItems[i]);\n\n                  this._selectedIndexes.push(this._getIndecies(item)[0]);\n\n                  item.addClass(SELECTED);\n                }\n\n                this._triggerChange(removed, added);\n\n                if (this._valueDeferred) {\n                  this._valueDeferred.resolve();\n                }\n              }\n            },\n            deferredRange: function (index) {\n              var dataSource = this.dataSource;\n              var take = this.itemCount;\n              var ranges = this._rangesList;\n              var result = $.Deferred();\n              var defs = [];\n              var low = Math.floor(index / take) * take;\n              var high = Math.ceil(index / take) * take;\n              var pages = high === low ? [high] : [low, high];\n              $.each(pages, function (_, skip) {\n                var end = skip + take;\n                var existingRange = ranges[skip];\n                var deferred;\n\n                if (!existingRange || existingRange.end !== end) {\n                  deferred = $.Deferred();\n                  ranges[skip] = {\n                    end: end,\n                    deferred: deferred\n                  };\n\n                  dataSource._multiplePrefetch(skip, take, function () {\n                    deferred.resolve();\n                  });\n                } else {\n                  deferred = existingRange.deferred;\n                }\n\n                defs.push(deferred);\n              });\n              $.when.apply($, defs).then(function () {\n                result.resolve();\n              });\n              return result;\n            },\n            prefetch: function (indexes) {\n              var that = this,\n                  take = this.itemCount,\n                  isEmptyList = !that._promisesList.length;\n\n              if (!isActivePromise(that._activeDeferred)) {\n                that._activeDeferred = $.Deferred();\n                that._promisesList = [];\n              }\n\n              $.each(indexes, function (_, index) {\n                that._promisesList.push(that.deferredRange(that._getSkip(index, take)));\n              });\n\n              if (isEmptyList) {\n                $.when.apply($, that._promisesList).done(function () {\n                  that._promisesList = [];\n\n                  that._activeDeferred.resolve();\n                });\n              }\n\n              return that._activeDeferred;\n            },\n            _findDataItem: function (view, index) {\n              var group; //find in grouped view\n\n              if (this.options.type === \"group\") {\n                for (var i = 0; i < view.length; i++) {\n                  group = view[i].items;\n\n                  if (group.length <= index) {\n                    index = index - group.length;\n                  } else {\n                    return group[index];\n                  }\n                }\n              } //find in flat view\n\n\n              return view[index];\n            },\n            _getRange: function (skip, take) {\n              return this.dataSource._findRange(skip, Math.min(skip + take, this.dataSource.total()));\n            },\n            dataItemByIndex: function (index) {\n              var that = this;\n              var take = that.itemCount;\n\n              var skip = that._getSkip(index, take);\n\n              var view = this._getRange(skip, take); //should not return item if data is not loaded\n\n\n              if (!that._getRange(skip, take).length) {\n                return null;\n              }\n\n              if (that.options.type === \"group\") {\n                kendo.ui.progress($(that.wrapper), true);\n                that.mute(function () {\n                  that.dataSource.range(skip, take, function () {\n                    kendo.ui.progress($(that.wrapper), false);\n                  });\n                  view = that.dataSource.view();\n                });\n              }\n\n              return that._findDataItem(view, [index - skip]);\n            },\n            selectedDataItems: function () {\n              return this._selectedDataItems.slice();\n            },\n            scrollWith: function (value) {\n              this.content.scrollTop(this.content.scrollTop() + value);\n            },\n            scrollTo: function (y) {\n              this.content.scrollTop(y); //works only if the element is visible\n            },\n            scrollToIndex: function (index) {\n              this.scrollTo(index * this.options.itemHeight);\n            },\n            focus: function (candidate) {\n              var element,\n                  index,\n                  data,\n                  current,\n                  itemHeight = this.options.itemHeight,\n                  id = this._optionID,\n                  triggerEvent = true;\n\n              if (candidate === undefined) {\n                current = this.element.find(\".\" + FOCUSED);\n                return current.length ? current : null;\n              }\n\n              if (typeof candidate === \"function\") {\n                data = this.dataSource.flatView();\n\n                for (var idx = 0; idx < data.length; idx++) {\n                  if (candidate(data[idx])) {\n                    candidate = idx;\n                    break;\n                  }\n                }\n              }\n\n              if (candidate instanceof Array) {\n                candidate = lastFrom(candidate);\n              }\n\n              if (isNaN(candidate)) {\n                element = $(candidate);\n                index = parseInt($(element).attr(\"data-offset-index\"), 10);\n              } else {\n                index = candidate;\n                element = this._getElementByIndex(index);\n              }\n\n              if (index === -1) {\n                this.element.find(\".\" + FOCUSED).removeClass(FOCUSED);\n                this._focusedIndex = undefined;\n                return;\n              }\n\n              if (element.length) {\n                /*focus rendered item*/\n                if (element.hasClass(FOCUSED)) {\n                  triggerEvent = false;\n                }\n\n                if (this._focusedIndex !== undefined) {\n                  current = this._getElementByIndex(this._focusedIndex);\n                  current.removeClass(FOCUSED).removeAttr(\"id\");\n\n                  if (triggerEvent) {\n                    this.trigger(DEACTIVATE);\n                  }\n                }\n\n                this._focusedIndex = index;\n                element.addClass(FOCUSED).attr(\"id\", id);\n\n                var position = this._getElementLocation(index);\n\n                if (position === \"top\") {\n                  this.scrollTo(index * itemHeight);\n                } else if (position === \"bottom\") {\n                  this.scrollTo(index * itemHeight + itemHeight - this._screenHeight);\n                } else if (position === \"outScreen\") {\n                  this.scrollTo(index * itemHeight);\n                }\n\n                if (triggerEvent) {\n                  this.trigger(ACTIVATE);\n                }\n              } else {\n                /*focus non rendered item*/\n                this._focusedIndex = index;\n                this.items().removeClass(FOCUSED);\n                this.scrollToIndex(index);\n              }\n            },\n            focusIndex: function () {\n              return this._focusedIndex;\n            },\n            focusFirst: function () {\n              this.scrollTo(0);\n              this.focus(0);\n            },\n            focusLast: function () {\n              var lastIndex = this.dataSource.total();\n              this.scrollTo(this.heightContainer.offsetHeight);\n              this.focus(lastIndex - 1);\n            },\n            focusPrev: function () {\n              var index = this._focusedIndex;\n              var current;\n\n              if (!isNaN(index) && index > 0) {\n                index -= 1;\n                this.focus(index);\n                current = this.focus();\n\n                if (current && current.hasClass(\"k-loading-item\")) {\n                  index += 1;\n                  this.focus(index);\n                }\n\n                return index;\n              } else {\n                index = this.dataSource.total() - 1;\n                this.focus(index);\n                return index;\n              }\n            },\n            focusNext: function () {\n              var index = this._focusedIndex;\n              var lastIndex = this.dataSource.total() - 1;\n              var current;\n\n              if (!isNaN(index) && index < lastIndex) {\n                index += 1;\n                this.focus(index);\n                current = this.focus();\n\n                if (current && current.hasClass(\"k-loading-item\")) {\n                  index -= 1;\n                  this.focus(index);\n                }\n\n                return index;\n              } else {\n                index = 0;\n                this.focus(index);\n                return index;\n              }\n            },\n            _triggerChange: function (removed, added) {\n              removed = removed || [];\n              added = added || [];\n\n              if (removed.length || added.length) {\n                this.trigger(CHANGE, {\n                  removed: removed,\n                  added: added\n                });\n              }\n            },\n            select: function (candidate) {\n              var that = this,\n                  indices,\n                  initialIndices,\n                  singleSelection = that.options.selectable !== \"multiple\",\n                  prefetchStarted = isActivePromise(that._activeDeferred),\n                  filtered = this.isFiltered(),\n                  isAlreadySelected,\n                  deferred,\n                  result,\n                  removed = [];\n\n              if (candidate === undefined) {\n                return that._selectedIndexes.slice();\n              }\n\n              if (!that._selectDeferred || that._selectDeferred.state() === \"resolved\") {\n                that._selectDeferred = $.Deferred();\n              }\n\n              indices = that._getIndecies(candidate);\n              isAlreadySelected = singleSelection && !filtered && lastFrom(indices) === lastFrom(this._selectedIndexes);\n              removed = that._deselectCurrentValues(indices);\n\n              if (removed.length || !indices.length || isAlreadySelected) {\n                that._triggerChange(removed);\n\n                if (that._valueDeferred) {\n                  that._valueDeferred.resolve().promise();\n                }\n\n                return that._selectDeferred.resolve().promise();\n              }\n\n              if (indices.length === 1 && indices[0] === -1) {\n                indices = [];\n              }\n\n              initialIndices = indices;\n              result = that._deselect(indices);\n              removed = result.removed;\n              indices = result.indices;\n\n              if (singleSelection) {\n                prefetchStarted = false;\n\n                if (indices.length) {\n                  indices = [lastFrom(indices)];\n                }\n              }\n\n              var done = function () {\n                var added = that._select(indices);\n\n                if (initialIndices.length === indices.length || singleSelection) {\n                  that.focus(indices);\n                }\n\n                that._triggerChange(removed, added);\n\n                if (that._valueDeferred) {\n                  that._valueDeferred.resolve();\n                }\n\n                that._selectDeferred.resolve();\n              };\n\n              deferred = that.prefetch(indices);\n\n              if (!prefetchStarted) {\n                if (deferred) {\n                  deferred.done(done);\n                } else {\n                  done();\n                }\n              }\n\n              return that._selectDeferred.promise();\n            },\n            bound: function (bound) {\n              if (bound === undefined) {\n                return this._listCreated;\n              }\n\n              this._listCreated = bound;\n            },\n            mute: function (callback) {\n              this._mute = true;\n              callback();\n              this._mute = false;\n            },\n            setDSFilter: function (filter) {\n              this._lastDSFilter = $.extend({}, filter);\n            },\n            isFiltered: function () {\n              if (!this._lastDSFilter) {\n                this.setDSFilter(this.dataSource.filter());\n              }\n\n              return !kendo.data.Query.compareFilters(this.dataSource.filter(), this._lastDSFilter);\n            },\n            skipUpdate: $.noop,\n            _getElementByIndex: function (index) {\n              return this.items().filter(function (idx, element) {\n                return index === parseInt($(element).attr(\"data-offset-index\"), 10);\n              });\n            },\n            _getElementByDataItem: function (dataItem) {\n              var dataView = this._dataView,\n                  valueGetter = this._valueGetter,\n                  element,\n                  match;\n\n              for (var i = 0; i < dataView.length; i++) {\n                match = dataView[i].item && isPrimitive(dataView[i].item) ? dataView[i].item === dataItem : dataView[i].item && dataItem && valueGetter(dataView[i].item) == valueGetter(dataItem);\n\n                if (match) {\n                  element = dataView[i];\n                  break;\n                }\n              }\n\n              return element ? this._getElementByIndex(element.index) : $();\n            },\n            _clean: function () {\n              this.result = undefined;\n              this._lastScrollTop = undefined;\n              this._skip = undefined;\n              $(this.heightContainer).remove();\n              this.heightContainer = undefined;\n              this.element.empty();\n            },\n            _height: function () {\n              var hasData = !!this.dataSource.view().length,\n                  height = this.options.height,\n                  itemHeight = this.options.itemHeight,\n                  total = this.dataSource.total();\n\n              if (!hasData) {\n                height = 0;\n              } else if (height / itemHeight > total) {\n                height = total * itemHeight;\n              }\n\n              return height;\n            },\n            setScreenHeight: function () {\n              var height = this._height();\n\n              this.content.height(height);\n              this._screenHeight = height;\n            },\n            screenHeight: function () {\n              return this._screenHeight;\n            },\n            _getElementLocation: function (index) {\n              var scrollTop = this.content.scrollTop(),\n                  screenHeight = this._screenHeight,\n                  itemHeight = this.options.itemHeight,\n                  yPosition = index * itemHeight,\n                  yDownPostion = yPosition + itemHeight,\n                  screenEnd = scrollTop + screenHeight,\n                  position;\n\n              if (yPosition === scrollTop - itemHeight || yDownPostion > scrollTop && yPosition < scrollTop) {\n                position = \"top\";\n              } else if (yPosition === screenEnd || yPosition < screenEnd && screenEnd < yDownPostion) {\n                position = \"bottom\";\n              } else if (yPosition >= scrollTop && yPosition <= scrollTop + (screenHeight - itemHeight)) {\n                position = \"inScreen\";\n              } else {\n                position = \"outScreen\";\n              }\n\n              return position;\n            },\n            _templates: function () {\n              var options = this.options;\n              var templates = {\n                template: options.template,\n                placeholderTemplate: options.placeholderTemplate,\n                groupTemplate: options.groupTemplate,\n                fixedGroupTemplate: options.fixedGroupTemplate\n              };\n\n              if (options.columns) {\n                for (var i = 0; i < options.columns.length; i++) {\n                  var currentColumn = options.columns[i];\n                  var templateText = currentColumn.field ? currentColumn.field.toString() : \"text\";\n                  templates[\"column\" + i] = currentColumn.template || \"#: \" + templateText + \"#\";\n                }\n              }\n\n              for (var key in templates) {\n                if (typeof templates[key] !== \"function\") {\n                  templates[key] = kendo.template(templates[key] || \"\");\n                }\n              }\n\n              this.templates = templates;\n            },\n            _generateItems: function (element, count) {\n              var items = [],\n                  item,\n                  text,\n                  itemHeight = this.options.itemHeight + \"px\",\n                  itemClass = this.options.columns && this.options.columns.length ? TABLE_ITEM : LIST_ITEM;\n\n              while (count-- > 0) {\n                text = document.createElement(\"span\");\n                text.className = \"k-list-item-text\";\n                item = document.createElement(\"li\");\n                item.tabIndex = -1;\n                item.className = itemClass;\n                item.setAttribute(\"role\", \"option\");\n                item.style.height = itemHeight;\n                item.style.minHeight = itemHeight;\n                item.appendChild(text);\n                element.appendChild(item);\n                items.push(item);\n              }\n\n              return items;\n            },\n            _saveInitialRanges: function () {\n              var ranges = this.dataSource._ranges;\n              var deferred = $.Deferred();\n              deferred.resolve();\n              this._rangesList = {};\n\n              for (var i = 0; i < ranges.length; i++) {\n                this._rangesList[ranges[i].start] = {\n                  end: ranges[i].end,\n                  deferred: deferred\n                };\n              }\n            },\n            _createList: function () {\n              var that = this,\n                  content = that.content.get(0),\n                  options = that.options,\n                  dataSource = that.dataSource;\n\n              if (that.bound()) {\n                that._clean();\n              }\n\n              that._saveInitialRanges();\n\n              that._buildValueGetter();\n\n              that.setScreenHeight();\n              that.itemCount = getItemCount(that._screenHeight, options.listScreens, options.itemHeight);\n\n              if (that.itemCount > dataSource.total()) {\n                that.itemCount = dataSource.total();\n              }\n\n              that._items = that._generateItems(that.element[0], that.itemCount);\n\n              that._setHeight(options.itemHeight * dataSource.total());\n\n              that.options.type = (dataSource.group() || []).length ? \"group\" : \"flat\";\n\n              if (that.options.type === \"flat\") {\n                if (that.header.closest(GROUP_ROW_SEL).length) {\n                  that.header.closest(GROUP_ROW_SEL).hide();\n                } else {\n                  that.header.hide();\n                }\n              } else {\n                if (that.header.closest(GROUP_ROW_SEL).length) {\n                  that.header.closest(GROUP_ROW_SEL).show();\n                } else {\n                  that.header.show();\n                }\n              }\n\n              that.getter = that._getter(function () {\n                that._renderItems(true);\n              });\n\n              that._onScroll = function (scrollTop, force) {\n                var getList = that._listItems(that.getter);\n\n                return that._fixedHeader(scrollTop, getList(scrollTop, force));\n              };\n\n              that._renderItems = that._whenChanged(scrollCallback(content, that._onScroll), syncList(that._reorderList(that._items, render.bind(that))));\n\n              that._renderItems();\n\n              that._calculateGroupPadding(that._screenHeight);\n\n              that._calculateColumnsHeaderPadding();\n            },\n            _setHeight: function (height) {\n              var currentHeight,\n                  heightContainer = this.heightContainer;\n\n              if (!heightContainer) {\n                heightContainer = this.heightContainer = appendChild(this.content[0], HEIGHTCONTAINER);\n              } else {\n                currentHeight = heightContainer.offsetHeight;\n              }\n\n              if (height !== currentHeight) {\n                heightContainer.innerHTML = \"\";\n\n                while (height > 0) {\n                  var padHeight = Math.min(height, 250000); //IE workaround, should not create elements with height larger than 250000px\n\n                  appendChild(heightContainer).style.height = padHeight + \"px\";\n                  height -= padHeight;\n                }\n              }\n            },\n            _getter: function () {\n              var lastRequestedRange = null,\n                  dataSource = this.dataSource,\n                  lastRangeStart = dataSource.skip(),\n                  type = this.options.type,\n                  pageSize = this.itemCount,\n                  flatGroups = {};\n\n              if (dataSource.pageSize() < pageSize) {\n                this.mute(function () {\n                  dataSource.pageSize(pageSize);\n                });\n              }\n\n              return function (index, rangeStart) {\n                var that = this;\n\n                if (!dataSource.inRange(rangeStart, pageSize)) {\n                  if (lastRequestedRange !== rangeStart) {\n                    lastRequestedRange = rangeStart;\n                    lastRangeStart = rangeStart;\n\n                    if (that._getterDeferred) {\n                      that._getterDeferred.reject();\n                    }\n\n                    that._getterDeferred = that.deferredRange(rangeStart);\n\n                    that._getterDeferred.then(function () {\n                      var firstItemIndex = that._indexConstraint(that.content[0].scrollTop);\n\n                      that._getterDeferred = null;\n\n                      if (rangeStart <= firstItemIndex && firstItemIndex <= rangeStart + pageSize) {\n                        that._fetching = true;\n                        dataSource.range(rangeStart, pageSize);\n                      }\n                    });\n                  }\n\n                  return null;\n                } else {\n                  if (lastRangeStart !== rangeStart) {\n                    this.mute(function () {\n                      dataSource.range(rangeStart, pageSize);\n                      lastRangeStart = rangeStart;\n                    });\n                  }\n\n                  var result;\n\n                  if (type === \"group\") {\n                    //grouped list\n                    if (!flatGroups[rangeStart]) {\n                      var flatGroup = flatGroups[rangeStart] = [];\n                      var groups = dataSource.view();\n\n                      for (var i = 0, len = groups.length; i < len; i++) {\n                        var group = groups[i];\n\n                        for (var j = 0, groupLength = group.items.length; j < groupLength; j++) {\n                          flatGroup.push({\n                            item: group.items[j],\n                            group: group.value\n                          });\n                        }\n                      }\n                    }\n\n                    result = flatGroups[rangeStart][index - rangeStart];\n                  } else {\n                    //flat list\n                    result = dataSource.view()[index - rangeStart];\n                  }\n\n                  return result;\n                }\n              };\n            },\n            _fixedHeader: function (scrollTop, list) {\n              var group = this.currentVisibleGroup,\n                  itemHeight = this.options.itemHeight,\n                  firstVisibleDataItemIndex = Math.floor((scrollTop - list.top) / itemHeight),\n                  firstVisibleDataItem = list.items[firstVisibleDataItemIndex];\n\n              if (firstVisibleDataItem && firstVisibleDataItem.item) {\n                var firstVisibleGroup = firstVisibleDataItem.group;\n\n                if (firstVisibleGroup !== group) {\n                  var fixedGroupText = firstVisibleGroup || \"\";\n                  this.header.html(this.templates.fixedGroupTemplate(fixedGroupText));\n                  this.currentVisibleGroup = firstVisibleGroup;\n                }\n              }\n\n              return list;\n            },\n            _itemMapper: function (item, index, value) {\n              var listType = this.options.type,\n                  itemHeight = this.options.itemHeight,\n                  currentIndex = this._focusedIndex,\n                  selected = false,\n                  current = false,\n                  newGroup = false,\n                  group = null,\n                  match = false,\n                  valueGetter = this._valueGetter;\n\n              if (listType === \"group\") {\n                if (item) {\n                  newGroup = index === 0 || this._currentGroup !== false && this._currentGroup !== item.group;\n                  this._currentGroup = item.group;\n                }\n\n                group = item ? item.group : null;\n                item = item ? item.item : null;\n              }\n\n              if (this.options.mapValueTo === \"dataItem\" && this._selectedDataItems.length && item) {\n                for (var i = 0; i < this._selectedDataItems.length; i++) {\n                  match = valueGetter(this._selectedDataItems[i]) === valueGetter(item);\n\n                  if (match) {\n                    selected = true;\n                    break;\n                  }\n                }\n              } else if (!this.isFiltered() && value.length && item) {\n                for (var j = 0; j < value.length; j++) {\n                  match = isPrimitive(item) ? value[j] === item : value[j] === valueGetter(item);\n\n                  if (match) {\n                    value.splice(j, 1);\n                    selected = true;\n                    break;\n                  }\n                }\n              }\n\n              if (currentIndex === index) {\n                current = true;\n              }\n\n              return {\n                item: item ? item : null,\n                group: group,\n                newGroup: newGroup,\n                selected: selected,\n                current: current,\n                index: index,\n                top: index * itemHeight\n              };\n            },\n            _range: function (index) {\n              var itemCount = this.itemCount,\n                  value = this._values.slice(),\n                  items = [],\n                  item;\n\n              this._view = {};\n              this._currentGroup = false;\n\n              for (var i = index, length = index + itemCount; i < length; i++) {\n                item = this._itemMapper(this.getter(i, index), i, value);\n\n                if (items[items.length - 1]) {\n                  items[items.length - 1].isLastGroupedItem = item.newGroup;\n                }\n\n                items.push(item);\n                this._view[item.index] = item;\n              }\n\n              this._dataView = items;\n              return items;\n            },\n            _getDataItemsCollection: function (scrollTop, lastScrollTop) {\n              var items = this._range(this._listIndex(scrollTop, lastScrollTop));\n\n              return {\n                index: items.length ? items[0].index : 0,\n                top: items.length ? items[0].top : 0,\n                items: items\n              };\n            },\n            _listItems: function () {\n              var screenHeight = this._screenHeight,\n                  options = this.options;\n              var theValidator = listValidator(options, screenHeight);\n              return function (value, force) {\n                var result = this.result,\n                    lastScrollTop = this._lastScrollTop;\n\n                if (force || !result || !theValidator(result, value, lastScrollTop)) {\n                  result = this._getDataItemsCollection(value, lastScrollTop);\n                }\n\n                this._lastScrollTop = value;\n                this.result = result;\n                return result;\n              }.bind(this);\n            },\n            _whenChanged: function (getter, callback) {\n              var current;\n              return function (force) {\n                var theNew = getter(force);\n\n                if (theNew !== current) {\n                  current = theNew;\n                  callback(theNew, force);\n                }\n              };\n            },\n            _reorderList: function (list, reorder) {\n              var that = this;\n              var length = list.length;\n              var currentOffset = -Infinity;\n              reorder = map2(reorder, this.templates).bind(this);\n              return function (list2, offset, force) {\n                var diff = offset - currentOffset;\n                var range, range2;\n\n                if (force || Math.abs(diff) >= length) {\n                  // full reorder\n                  range = list;\n                  range2 = list2;\n                } else {\n                  // partial reorder\n                  range = reshift(list, diff);\n                  range2 = diff > 0 ? list2.slice(-diff) : list2.slice(0, -diff);\n                }\n\n                reorder(range, range2, that.bound());\n                currentOffset = offset;\n              };\n            },\n            _bufferSizes: function () {\n              var options = this.options;\n              return bufferSizes(this._screenHeight, options.listScreens, options.oppositeBuffer);\n            },\n            _indexConstraint: function (position) {\n              var itemCount = this.itemCount,\n                  itemHeight = this.options.itemHeight,\n                  total = this.dataSource.total();\n              return Math.min(Math.max(total - itemCount, 0), Math.max(0, Math.floor(position / itemHeight)));\n            },\n            _listIndex: function (scrollTop, lastScrollTop) {\n              var buffers = this._bufferSizes(),\n                  position;\n\n              position = scrollTop - (scrollTop > lastScrollTop ? buffers.down : buffers.up);\n              return this._indexConstraint(position);\n            },\n            _selectable: function () {\n              var itemClass = this.options.columns && this.options.columns.length ? TABLE_ITEM : LIST_ITEM;\n\n              if (this.options.selectable) {\n                this._selectProxy = this._clickHandler.bind(this);\n                this.element.on(CLICK + VIRTUAL_LIST_NS, \".\" + itemClass, this._selectProxy);\n              }\n            },\n            getElementIndex: function (element) {\n              if (!(element instanceof jQuery)) {\n                return undefined;\n              }\n\n              return parseInt(element.attr(\"data-offset-index\"), 10);\n            },\n            _getIndecies: function (candidate) {\n              var result = [],\n                  data;\n\n              if (typeof candidate === \"function\") {\n                data = this.dataSource.flatView();\n\n                for (var idx = 0; idx < data.length; idx++) {\n                  if (candidate(data[idx])) {\n                    result.push(idx);\n                    break;\n                  }\n                }\n              }\n\n              if (typeof candidate === \"number\") {\n                result.push(candidate);\n              }\n\n              var elementIndex = this.getElementIndex(candidate);\n\n              if (!isNaN(elementIndex)) {\n                result.push(elementIndex);\n              }\n\n              if (candidate instanceof Array) {\n                result = candidate;\n              }\n\n              return result;\n            },\n            _deselect: function (indices) {\n              var removed = [],\n                  selectedIndex,\n                  dataItem,\n                  selectedIndexes = this._selectedIndexes,\n                  selectedDataItems = this._selectedDataItems,\n                  position = 0,\n                  selectable = this.options.selectable,\n                  removedindexesCounter = 0,\n                  valueGetter = this._valueGetter,\n                  item,\n                  match,\n                  result = null;\n              indices = indices.slice();\n\n              if (selectable === true || !indices.length) {\n                //deselect everything\n                for (var idx = 0; idx < selectedIndexes.length; idx++) {\n                  if (selectedIndexes[idx] !== undefined) {\n                    this._getElementByIndex(selectedIndexes[idx]).removeClass(SELECTED);\n                  } else if (selectedDataItems[idx]) {\n                    this._getElementByDataItem(selectedDataItems[idx]).removeClass(SELECTED);\n                  }\n\n                  removed.push({\n                    index: selectedIndexes[idx],\n                    position: idx,\n                    dataItem: selectedDataItems[idx]\n                  });\n                }\n\n                this._values = [];\n                this._selectedDataItems = [];\n                this._selectedIndexes = [];\n              } else if (selectable === \"multiple\") {\n                for (var i = 0; i < indices.length; i++) {\n                  result = null;\n                  position = $.inArray(indices[i], selectedIndexes);\n                  dataItem = this.dataItemByIndex(indices[i]);\n\n                  if (position === -1 && dataItem) {\n                    for (var j = 0; j < selectedDataItems.length; j++) {\n                      match = isPrimitive(dataItem) ? selectedDataItems[j] === dataItem : valueGetter(selectedDataItems[j]) === valueGetter(dataItem);\n\n                      if (match) {\n                        item = this._getElementByIndex(indices[i]);\n                        result = this._deselectSingleItem(item, j, indices[i], removedindexesCounter);\n                      }\n                    }\n                  } else {\n                    selectedIndex = selectedIndexes[position];\n\n                    if (selectedIndex !== undefined) {\n                      item = this._getElementByIndex(selectedIndex);\n                      result = this._deselectSingleItem(item, position, selectedIndex, removedindexesCounter);\n                    }\n                  }\n\n                  if (result) {\n                    indices.splice(i, 1);\n                    removed.push(result);\n                    removedindexesCounter++;\n                    i--;\n                  }\n                }\n              }\n\n              return {\n                indices: indices,\n                removed: removed\n              };\n            },\n            _deselectSingleItem: function (item, position, selectedIndex, removedindexesCounter) {\n              var dataItem;\n\n              if (!item.hasClass(SELECTED)) {\n                return;\n              }\n\n              item.removeClass(SELECTED);\n\n              this._values.splice(position, 1);\n\n              this._selectedIndexes.splice(position, 1);\n\n              dataItem = this._selectedDataItems.splice(position, 1)[0];\n              return {\n                index: selectedIndex,\n                position: position + removedindexesCounter,\n                dataItem: dataItem\n              };\n            },\n            _deselectCurrentValues: function (indices) {\n              var children = this.element[0].children;\n              var value, index, position;\n              var values = this._values;\n              var removed = [];\n              var idx = 0;\n              var j;\n\n              if (this.options.selectable !== \"multiple\" || !this.isFiltered()) {\n                return [];\n              }\n\n              if (indices[0] === -1) {\n                $(children).removeClass(SELECTED);\n                removed = $.map(this._selectedDataItems.slice(0), function (dataItem, idx) {\n                  return {\n                    dataItem: dataItem,\n                    position: idx\n                  };\n                });\n                this._selectedIndexes = [];\n                this._selectedDataItems = [];\n                this._values = [];\n                return removed;\n              }\n\n              for (; idx < indices.length; idx++) {\n                position = -1;\n                index = indices[idx];\n\n                if (this.dataItemByIndex(index)) {\n                  value = this._valueGetter(this.dataItemByIndex(index));\n                }\n\n                for (j = 0; j < values.length; j++) {\n                  if (value == values[j]) {\n                    position = j;\n                    break;\n                  }\n                }\n\n                if (position > -1) {\n                  removed.push(this.removeAt(position));\n                  $(children[index]).removeClass(SELECTED);\n                }\n              }\n\n              return removed;\n            },\n            _getSkip: function (index, take) {\n              var page = index < take ? 1 : Math.floor(index / take) + 1;\n              return (page - 1) * take;\n            },\n            _select: function (indexes) {\n              var that = this,\n                  singleSelection = this.options.selectable !== \"multiple\",\n                  dataSource = this.dataSource,\n                  dataItem,\n                  oldSkip,\n                  take = this.itemCount,\n                  valueGetter = this._valueGetter,\n                  added = [];\n\n              if (singleSelection) {\n                that._selectedIndexes = [];\n                that._selectedDataItems = [];\n                that._values = [];\n              }\n\n              oldSkip = dataSource.skip();\n              $.each(indexes, function (_, index) {\n                var skip = that._getSkip(index, take);\n\n                that.mute(function () {\n                  dataSource.range(skip, take); //switch the range to get the dataItem\n\n                  dataItem = that._findDataItem(dataSource.view(), [index - skip]);\n\n                  that._selectedIndexes.push(index);\n\n                  that._selectedDataItems.push(dataItem);\n\n                  that._values.push(isPrimitive(dataItem) ? dataItem : valueGetter(dataItem));\n\n                  added.push({\n                    index: index,\n                    dataItem: dataItem\n                  });\n\n                  that._getElementByIndex(index).addClass(SELECTED);\n\n                  dataSource.range(oldSkip, take); //switch back the range\n                });\n              });\n              that._values = that._checkValuesOrder(that._values);\n              return added;\n            },\n            _clickHandler: function (e) {\n              var item = $(e.currentTarget);\n\n              if (!e.isDefaultPrevented() && item.attr(\"data-uid\")) {\n                this.trigger(CLICK, {\n                  item: item\n                });\n              }\n            },\n            _buildValueGetter: function () {\n              this._valueGetter = kendo.getter(this.options.dataValueField);\n            },\n            _calculateGroupPadding: function (height) {\n              var firstItem = this.items().first(),\n                  groupHeader = this.header,\n                  padding = 0;\n\n              if (groupHeader[0] && groupHeader[0].style.display !== \"none\") {\n                if (height !== \"auto\") {\n                  padding = kendo.support.scrollbar();\n                }\n\n                padding += parseFloat(firstItem.css(\"border-right-width\"), 10) + parseFloat(firstItem.children(\".k-group\").css(\"right\"), 10);\n                groupHeader.css(\"padding-right\", padding);\n              }\n            },\n            _calculateColumnsHeaderPadding: function () {\n              if (this.options.columns && this.options.columns.length) {\n                var isRtl = kendo.support.isRtl(this.wrapper);\n                var scrollbar = kendo.support.scrollbar();\n                var columnsHeader = this.content.parent().parent().find(\".k-table-header\");\n                var total = this.dataSource.total();\n                columnsHeader.css(isRtl ? \"padding-left\" : \"padding-right\", total ? scrollbar : 0);\n              }\n            }\n          });\n          kendo.ui.VirtualList = VirtualList;\n          kendo.ui.plugin(VirtualList);\n        })(window.kendo.jQuery);\n\n        return window.kendo;\n      }, __webpack_require__(3));\n      /* WEBPACK VAR INJECTION */\n\n    }).call(exports, __webpack_require__(1060));\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}