{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1655);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  20:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.core\");\n    /***/\n  },\n\n  /***/\n  1060:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"jquery\");\n    /***/\n  },\n\n  /***/\n  1655:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n    /* WEBPACK VAR INJECTION */\n\n\n    (function (jQuery) {\n      (function (f, define) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(20)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n      })(function () {\n        (function ($, undefined) {\n          var kendo = window.kendo,\n              keys = kendo.keys,\n              extend = $.extend,\n              NS = \".kendoOrgChartView\",\n              BLUR = \"blur\",\n              CLICK = \"click\",\n              COLLAPSE = \"collapse\",\n              EXPAND = \"expand\",\n              FOCUS = \"focus\",\n              KEYDOWN = \"keydown\",\n              MENU = \"menu\",\n              SELECT = \"select\",\n              DOT = \".\",\n              SPACE = \" \",\n              COMMA = \",\",\n              HASH = \"#\",\n              STRING = \"string\",\n              TABINDEX = \"tabindex\",\n              ID = \"id\",\n              UID = \"uid\",\n              PX = \"px\",\n              PLUS = \"plus\",\n              MINUS = \"minus\",\n              ARIA_OWNS = \"aria-owns\",\n              ARIA_SELECTED = \"aria-selected\";\n          var ORGCHART_STYLES = {\n            wrapper: \"k-orgchart\",\n            container: \"k-orgchart-container\",\n            line: \"k-orgchart-line\",\n            lineVertical: \"k-orgchart-line-v\",\n            lineHorizontal: \"k-orgchart-line-h\",\n            lineVerticalTop: \"k-orgchart-line-v-top\",\n            group: \"k-orgchart-group\",\n            groupVertical: \"k-orgchart-group-v\",\n            groupHorizontal: \"k-orgchart-group-h\",\n            nodesGroup: \"k-orgchart-node-group\",\n            nodesGroupContainer: \"k-orgchart-node-group-container\",\n            nodeContainer: \"k-orgchart-node-container\",\n            node: \"k-orgchart-node\",\n            card: \"k-orgchart-card\",\n            cardMenu: \"k-orgchart-card-menu\",\n            button: \"k-orgchart-button\",\n            focused: \"k-state-focus\",\n            plusIcon: \"k-i-plus\",\n            menuItem: \"k-item\",\n            avatarPreview: \"k-orgchart-avatar-preview\",\n            update: \"k-orgchart-update\",\n            cancel: \"k-orgchart-cancel\",\n            vstack: \"k-vstack\",\n            hstack: \"k-hstack\"\n          };\n          var ROOT_TEMPLATE = '<div role=\"tree\" aria-orientation=\"horizontal\" aria-label=\"#: label #\" class=\"k-orgchart-group k-orgchart-level-1 k-pos-absolute k-hstack k-justify-content-center\"></div>';\n          var GROUP_TEMPLATE = '<div role=\"group\" id=\"#: guid #\" class=\"k-orgchart-level-#: level # k-orgchart-group k-pos-absolute k-justify-content-around\"></div>';\n          var NODE_GROUP_CONTAINER = '<div role=\"treeitem\" ' + '# if(data.hasChildren && data.guid) { #' + 'aria-owns=\"#: guid #\" ' + '# if(!!data.expanded) { #' + 'aria-expanded=\"true\" ' + '# } else { #' + 'aria-expanded=\"false\" ' + '# } #' + '# } #' + 'aria-keyshortcuts=\"Enter\" aria-level=\"#: level #\" aria-selected=\"false\" class=\"k-orgchart-node-group-container\">';\n          var NODE_CONTAINER = '<div class=\"k-orgchart-node-container k-justify-content-around\" style=\"width:100%\"></div>';\n          var NODE_CONTAINER_GROUPED = '<div role=\"group\" class=\"k-orgchart-node-container k-justify-content-around k-hstack\" style=\"width:100%\"></div>';\n          var ITEM_TEMPLATE = '<div class=\"k-orgchart-node k-vstack k-align-items-center\"></div>';\n          var BUTTON_TEMPLATE = '<button aria-label=\"#: label #\" tabindex=\"-1\" class=\"k-orgchart-button k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-icon-button\">' + '<span class=\"k-button-icon k-icon k-i-#: buttonSign #\"></span>' + '</button>';\n          var CARD_TEMPLATE = '<div class=\"k-card-body k-hstack\" style=\"border-color:#: color #\">' + '# if(!!data.avatar) { #' + '<div class=\"k-avatar k-avatar-solid-primary k-avatar-solid k-avatar-lg k-rounded-full\">' + '<span class=\"k-avatar-image\">' + '<img alt=\"#: name #\" src=\"#: avatar #\">' + '</span>' + '</div>' + '# } #' + '<div class=\"k-vstack k-card-title-wrap\">' + '<div class=\"k-card-title k-text-ellipsis\">#: name #</div>' + '# if(data.title) { #' + '<span class=\"k-spacer\"></span>' + '<div class=\"k-card-subtitle k-text-ellipsis\">#: title #</div>' + '# } #' + '</div>' + '# if(editable) { #' + '<span class=\"k-spacer\"></span>' + '<div class=\"k-card-body-actions\">' + '<button class=\"k-button k-button-md k-rounded-md k-button-flat k-button-flat-base k-icon-button k-orgchart-card-menu\" role=\"button\" aria-label=\"#: menuLabel #\" tabindex=\"-1\">' + '<span class=\"k-button-icon k-icon k-i-more-vertical\"></span>' + '</button>' + '</div>' + '# } #' + '</div>';\n          var CARD_WRAPPER = '<div role=\"treeitem\" data-uid=\"#: uid #\" ' + '# if(data.hasChildren && data.guid) { #' + 'aria-owns=\"#: guid #\" ' + '# if(!!data.expanded) { #' + 'aria-expanded=\"true\" ' + '# } else { #' + 'aria-expanded=\"false\" ' + '# } #' + '# } #' + 'class=\"k-orgchart-card k-card ' + '# if(!!data.cssClass) { #' + '#: data.cssClass #' + '# } #' + '\" aria-keyshortcuts=\"Enter\" aria-level=\"#: level #\" aria-selected=\"false\">' + '</div>';\n          var GROUPED_CARD_WRAPPER = '<div role=\"treeitem\" data-uid=\"#: uid #\" aria-level=\"#: level #\" aria-selected=\"false\" aria-keyshortcuts=\"Enter\" ' + 'class=\"k-orgchart-card k-card ' + '# if(!!data.cssClass) { #' + '#: data.cssClass #' + '# } #' + '\"></div>';\n          var View = kendo.Observable.extend({\n            init: function (element, options) {\n              this.element = element;\n              this.options = options || {};\n              kendo.Observable.fn.init.call(this);\n\n              this._attachEvents();\n            },\n            events: [COLLAPSE, EXPAND, SELECT, MENU],\n            destroy: function () {\n              kendo.ui.Widget.fn.destroy.call(this);\n              this.element.off(NS);\n            },\n            collapse: function () {\n              return false;\n            },\n            expand: function () {\n              return false;\n            },\n            jqueryGroupElement: function (group) {\n              if (!group) {\n                return;\n              }\n\n              var jQueryElement = this._processItem(group);\n\n              if (!jQueryElement.hasClass(ORGCHART_STYLES.nodesGroupContainer)) {\n                jQueryElement = jQueryElement.closest(DOT + ORGCHART_STYLES.nodesGroupContainer);\n              }\n\n              return jQueryElement && jQueryElement.length ? jQueryElement : null;\n            },\n            jqueryItemElement: function (item) {\n              if (!item) {\n                return;\n              }\n\n              var jQueryElement = this._processItem(item);\n\n              if (!jQueryElement.hasClass(ORGCHART_STYLES.card)) {\n                jQueryElement = jQueryElement.closest(DOT + ORGCHART_STYLES.card);\n              }\n\n              return jQueryElement && jQueryElement.length ? jQueryElement : null;\n            },\n            refresh: function () {\n              this._cacheFocused();\n\n              this._clearContent();\n\n              this._generateItemsTree();\n\n              this._calculateLevels();\n\n              this._render();\n            },\n            select: function (item) {\n              var $item = this._getToSelect(item),\n                  previousSelection = this.element.find(\"[tabindex=0]\");\n\n              if (!$item) {\n                return;\n              }\n\n              previousSelection.removeAttr(TABINDEX).removeClass(ORGCHART_STYLES.focused).attr(ARIA_SELECTED, false);\n              $item.attr(TABINDEX, \"0\").addClass(ORGCHART_STYLES.focused).trigger(\"focus\").attr(ARIA_SELECTED, true);\n            },\n            _attachEvents: function () {\n              var itemsSelector = DOT + ORGCHART_STYLES.card + COMMA + DOT + ORGCHART_STYLES.nodesGroupContainer;\n              this.element.on(KEYDOWN + NS, itemsSelector, this._onKeyDown.bind(this)).on(CLICK + NS, itemsSelector, this._onSelect.bind(this)).on(CLICK + NS, DOT + ORGCHART_STYLES.button, this._onButtonClick.bind(this)).on(FOCUS + NS, itemsSelector, this._onFocus.bind(this)).on(BLUR + NS, DOT + ORGCHART_STYLES.focused, this._onBlur.bind(this));\n            },\n            _cacheFocused: function () {\n              var focusableItem = this.element.find(\"[tabindex='0']\"),\n                  focusableDataItem = this._dataItems(focusableItem);\n\n              if (!focusableItem.length || !focusableDataItem || !focusableDataItem.length || !!this._idTabIndex) {\n                return;\n              }\n\n              this._idTabIndex = focusableDataItem[0].get(ID);\n\n              if (focusableItem.hasClass(ORGCHART_STYLES.focused)) {\n                this._shouldRestoreSelection = true;\n              } else {\n                this._shouldRestoreSelection = false;\n              }\n            },\n            _calculateDimensions: function () {\n              var itemElement = this.element.find(DOT + this._selector).first();\n\n              if (!this._buttonHeight) {\n                this._buttonHeight = this.element.find(DOT + ORGCHART_STYLES.button).first().outerHeight();\n              }\n\n              if (!this._spacing) {\n                this._spacing = this.element.find(DOT + ORGCHART_STYLES.lineVertical).first().outerHeight();\n              }\n\n              if (!this._itemWidth) {\n                this._itemWidth = this._calculateItemWidth();\n              }\n\n              if (!this._itemHeight) {\n                this._itemHeight = itemElement.outerHeight(true);\n              }\n            },\n            _calculateItemWidth: function () {\n              return false;\n            },\n            _calculateLevel: function () {\n              return false;\n            },\n            _calculateLevels: function () {\n              return false;\n            },\n            _clearContent: function () {\n              this.element.empty();\n            },\n            _dataItem: function (item) {\n              var $item = this.jqueryItemElement(item);\n\n              if (!$item || !$item.data(UID)) {\n                return;\n              }\n\n              return this.dataSource.getByUid($item.data(UID));\n            },\n            _dataItems: function () {\n              return false;\n            },\n            _generateItemsTree: function () {\n              return false;\n            },\n            _getToSelect: function () {\n              return false;\n            },\n            _groupIsVertical: function () {\n              return false;\n            },\n            _keyCollapse: function () {\n              return false;\n            },\n            _keyExpand: function () {\n              return false;\n            },\n            _keyNext: function () {\n              return false;\n            },\n            _keyPrev: function () {\n              return false;\n            },\n            _keyEnter: function () {\n              return false;\n            },\n            _keyEscape: function () {\n              return false;\n            },\n            _keyEnd: function () {\n              var target = this.element.find(DOT + ORGCHART_STYLES.card).last(),\n                  previous = this.element.find(\"[tabindex=0]\");\n\n              if (previous[0] === target[0]) {\n                return;\n              }\n\n              this.trigger(SELECT, {\n                item: target,\n                dataItems: [this._dataItem(target)]\n              });\n            },\n            _keyHome: function () {\n              var target = this.element.find(DOT + ORGCHART_STYLES.card).first(),\n                  previous = this.element.find(\"[tabindex=0]\");\n\n              if (previous[0] === target[0]) {\n                return;\n              }\n\n              this.trigger(SELECT, {\n                item: target,\n                dataItems: [this._dataItem(target)]\n              });\n            },\n            _onBlur: function () {\n              this.element.find(DOT + ORGCHART_STYLES.focused).removeClass(ORGCHART_STYLES.focused);\n            },\n            _onKeyDown: function (e) {\n              var key = e.keyCode,\n                  focused = this.element.find(\"[tabindex=0]\"),\n                  isRtl = kendo.support.isRtl(this.element),\n                  nextKey = isRtl ? [keys.LEFT] : [keys.RIGHT],\n                  prevKey = isRtl ? [keys.RIGHT] : [keys.LEFT],\n                  expandKey = keys.DOWN,\n                  collapseKey = keys.UP,\n                  groupIsVertical;\n\n              if (!focused) {\n                return;\n              }\n\n              groupIsVertical = this._groupIsVertical(focused);\n\n              if (groupIsVertical) {\n                nextKey.push(keys.DOWN);\n                prevKey.push(keys.UP);\n              }\n\n              if (key === keys.HOME) {\n                this._keyHome();\n              } else if (key === keys.END) {\n                this._keyEnd();\n              } else if (nextKey.indexOf(key) > -1) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                this._keyNext(focused);\n              } else if (prevKey.indexOf(key) > -1) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                this._keyPrev(focused);\n              } else if (key === expandKey) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                this._keyExpand(focused);\n              } else if (key === collapseKey) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                this._keyCollapse(focused);\n              } else if (key === keys.ENTER) {\n                this._keyEnter(focused);\n              } else if (key === keys.ESC) {\n                this._keyEscape(focused);\n              }\n            },\n            _onButtonClick: function (e) {\n              var that = this,\n                  target = $(e.currentTarget),\n                  shouldExpand = target.find(DOT + ORGCHART_STYLES.plusIcon).length > 0 ? true : false,\n                  el = target.siblings(DOT + this._selector),\n                  items = this._dataItems(el),\n                  i;\n\n              if (shouldExpand) {\n                if (that.trigger(EXPAND, {\n                  item: el,\n                  dataItems: items\n                })) {\n                  return;\n                }\n              } else {\n                if (that.trigger(COLLAPSE, {\n                  item: el,\n                  dataItems: items\n                })) {\n                  return;\n                }\n              }\n\n              for (i = 0; i < items.length; i++) {\n                that.dataSource.toggleChildren(items[i], shouldExpand).then(this.refresh.bind(this));\n              }\n            },\n            _onFocus: function () {\n              return false;\n            },\n            _onSelect: function () {\n              return false;\n            },\n            _orientation: function () {\n              return false;\n            },\n            _processItem: function (el) {\n              var jQueryElement; // Substitute with kendo.type() when merged and taken from master\n\n              if ($.type(el) === STRING) {\n                jQueryElement = this.element.find(el);\n              } else if (kendo.isElement(el)) {\n                jQueryElement = $(el);\n              } else if (el instanceof jQuery) {\n                jQueryElement = el;\n              }\n\n              return jQueryElement;\n            },\n            _render: function () {\n              var items = this._itemsTree,\n                  root = $(kendo.template(ROOT_TEMPLATE)({\n                label: this.options.messages.label\n              })),\n                  wrapperContainer = this.element,\n                  total = this._total,\n                  widgetPadding = wrapperContainer.closest(DOT + ORGCHART_STYLES.wrapper).css(\"padding-left\"),\n                  totalWidth;\n              wrapperContainer.append(root);\n\n              this._renderGroup(root, items, 1, this._total, 0);\n\n              totalWidth = total * this._itemWidth + (total - 1) * this._spacing;\n              root.width(totalWidth);\n              wrapperContainer.width(totalWidth + Number(widgetPadding.split(PX)[0]));\n\n              this._setHeight();\n\n              this._restoreSelection();\n            },\n            _renderNode: function (cardWrapperTemplate, contentTemplate, item, level, guid) {\n              var messages = this.options.messages,\n                  borderColors = this.options.cardsColors || kendo.getSeriesColors(),\n                  node = $(ITEM_TEMPLATE),\n                  content,\n                  cardWrapper;\n              cardWrapper = $(cardWrapperTemplate(extend(true, {}, item, {\n                menuLabel: messages.menuLabel,\n                level: level,\n                guid: guid,\n                editable: !!this.options.editable,\n                color: borderColors[level - 1] || borderColors[0]\n              })));\n\n              if (item.attributes) {\n                cardWrapper.attr(JSON.parse(JSON.stringify(item.attributes)));\n              }\n\n              content = $(contentTemplate(extend(true, {}, item, {\n                menuLabel: messages.menuLabel,\n                level: level,\n                guid: guid,\n                editable: !!this.options.editable,\n                color: borderColors[level - 1] || borderColors[0]\n              })));\n              cardWrapper.append(content);\n              node.append(cardWrapper);\n              return node;\n            },\n            _renderGroup: function () {\n              return false;\n            },\n            _restoreSelection: function () {\n              var toFocusItem, toFocus;\n\n              if (!this._idTabIndex) {\n                toFocus = this.element.find(DOT + this._selector).first();\n                toFocus.attr(TABINDEX, \"0\");\n              } else {\n                toFocusItem = this.dataSource.get(this._idTabIndex);\n                toFocus = toFocusItem ? this._getToFocus(toFocusItem) : this.element.find(DOT + this._selector).first();\n                toFocus.attr(TABINDEX, \"0\");\n                this._idTabIndex = null;\n              }\n\n              if (this._shouldRestoreSelection) {\n                this._shouldRestoreSelection = false;\n                this._preventTriggerSelect = true;\n                toFocus.trigger(\"focus\");\n                toFocus.addClass(ORGCHART_STYLES.focused);\n              }\n            },\n            _setHeight: function () {\n              var selector = this._selector,\n                  elements = this.element.find(DOT + ORGCHART_STYLES.button + COMMA + DOT + selector),\n                  min = Number.MAX_VALUE,\n                  max = 0,\n                  buttonHeight;\n\n              this._calculateDimensions();\n\n              buttonHeight = this._buttonHeight;\n              this.element.find(DOT + ORGCHART_STYLES.lineVerticalTop).height(this._spacing + buttonHeight / 2);\n              elements.each(function (i, el) {\n                var top = $(el).offset().top,\n                    bottom = top + $(el).outerHeight(true);\n\n                if (top < min) {\n                  min = top;\n                }\n\n                if (bottom > max) {\n                  max = bottom;\n                }\n              });\n              this.element.height(max - min);\n            }\n          });\n          var SingleView = View.extend({\n            init: function (element, options) {\n              View.fn.init.call(this, element, options);\n              this._selector = ORGCHART_STYLES.card;\n            },\n            collapse: function (item) {\n              var $item = this.jqueryItemElement(item);\n\n              if (!$item) {\n                return;\n              }\n\n              this.dataSource.toggleChildren(this._dataItem($item), false).then(this.refresh.bind(this));\n            },\n            expand: function (item) {\n              var $item = this.jqueryItemElement(item);\n\n              if (!$item) {\n                return;\n              }\n\n              this.dataSource.toggleChildren(this._dataItem($item), true).then(this.refresh.bind(this));\n            },\n            _calculateItemWidth: function () {\n              return this.element.find(DOT + this._selector).first().outerWidth(true);\n            },\n            _calculateLevel: function (items, level) {\n              var itemsLength = items.length,\n                  maxColumnsPerLevel = this._maxColumnsPerLevel,\n                  nestedChildren = false,\n                  shouldReset = false,\n                  previousMax,\n                  i,\n                  item;\n\n              if (!maxColumnsPerLevel[level] || maxColumnsPerLevel[level] < itemsLength) {\n                previousMax = maxColumnsPerLevel[level];\n                shouldReset = true;\n                maxColumnsPerLevel[level] = itemsLength;\n              }\n\n              for (i = 0; i < itemsLength; i++) {\n                item = items[i];\n\n                if (item.hasChildren) {\n                  nestedChildren = true;\n\n                  if (item.expanded) {\n                    this._calculateLevel(item.children, level + 1);\n                  }\n                }\n              }\n\n              if (!nestedChildren && shouldReset && level > 0) {\n                shouldReset = false;\n                maxColumnsPerLevel[level] = previousMax || 1;\n              }\n            },\n            _calculateLevels: function () {\n              var items = this._itemsTree,\n                  maxColumnsPerLevel = this._maxColumnsPerLevel = [],\n                  total = 1,\n                  i;\n\n              this._calculateLevel(items, 0);\n\n              for (i = 0; i < maxColumnsPerLevel.length; i++) {\n                total = total * maxColumnsPerLevel[i];\n              }\n\n              this._total = total;\n            },\n            _dataItems: function (container) {\n              var item = this.dataSource.getByUid(container.data(UID));\n\n              if (item) {\n                return [item];\n              } else {\n                return null;\n              }\n            },\n            _generateItemsTree: function () {\n              this._itemsTree = this.dataSource.itemsTree();\n            },\n            _getToFocus: function (item) {\n              return this.element.find(\"[data-uid='\" + item.get(UID) + \"']\");\n            },\n            _getToSelect: function (el) {\n              return this.jqueryItemElement(el);\n            },\n            _groupIsVertical: function (focused) {\n              var itemGroup = focused.closest(DOT + ORGCHART_STYLES.group);\n              return itemGroup.hasClass(ORGCHART_STYLES.groupVertical);\n            },\n            _keyCollapse: function (focused) {\n              var dataItem = this._dataItem(focused),\n                  parentUid,\n                  parentItem;\n\n              if (dataItem.expanded) {\n                if (!this.trigger(COLLAPSE, {\n                  item: focused,\n                  dataItems: [dataItem]\n                })) {\n                  this.collapse(focused);\n                }\n              } else if (dataItem.parentId) {\n                parentUid = this.dataSource.get(dataItem.parentId).get(UID);\n                parentItem = this.element.find(\"[data-uid='\" + parentUid + \"']\");\n                this.trigger(SELECT, {\n                  item: parentItem,\n                  dataItems: [this._dataItem(parentItem)]\n                });\n              }\n            },\n            _keyEnter: function (focused) {\n              if (focused.find(DOT + ORGCHART_STYLES.cardMenu).length > 0) {\n                this.trigger(MENU, focused);\n              }\n            },\n            _keyExpand: function (focused) {\n              var dataItem = this._dataItem(focused),\n                  ownedGroup = this.element.find(HASH + focused.attr(ARIA_OWNS)),\n                  childItem;\n\n              if (!dataItem.hasChildren) {\n                return;\n              }\n\n              if (!dataItem.expanded) {\n                if (!this.trigger(EXPAND, {\n                  item: focused,\n                  dataItems: [dataItem]\n                })) {\n                  this.expand(focused);\n                }\n              } else {\n                childItem = ownedGroup.find(DOT + this._selector).first();\n                this.trigger(SELECT, {\n                  item: childItem,\n                  dataItems: [this._dataItem(childItem)]\n                });\n              }\n            },\n            _keyNext: function (focused) {\n              var dataItem = this._dataItem(focused),\n                  next = focused.parent().next(DOT + ORGCHART_STYLES.node).find(DOT + ORGCHART_STYLES.card),\n                  ownedGroup = this.element.find(HASH + focused.attr(ARIA_OWNS));\n\n              if (!next.length && dataItem.hasChildren && dataItem.expanded) {\n                next = ownedGroup.find(DOT + ORGCHART_STYLES.card).first();\n              }\n\n              if (next.length === 0 || next.hasClass(ORGCHART_STYLES.focused)) {\n                return;\n              }\n\n              this.trigger(SELECT, {\n                item: next,\n                dataItems: [this._dataItem(next)]\n              });\n            },\n            _keyPrev: function (focused) {\n              var dataItem = this._dataItem(focused),\n                  prev = focused.parent().prev(DOT + ORGCHART_STYLES.node).find(DOT + ORGCHART_STYLES.card),\n                  parentUid;\n\n              if (!prev.length && dataItem.parentId) {\n                parentUid = this.dataSource.get(dataItem.parentId).get(UID);\n                prev = this.element.find(\"[data-uid='\" + parentUid + \"']\");\n              }\n\n              if (prev.length === 0 || prev.hasClass(ORGCHART_STYLES.focused)) {\n                return;\n              }\n\n              this.trigger(SELECT, {\n                item: prev,\n                dataItems: [this._dataItem(prev)]\n              });\n            },\n            _onFocus: function (e) {\n              var currentTarget = $(e.currentTarget),\n                  target = $(e.target);\n\n              if (this._preventTriggerSelect) {\n                e.stopPropagation();\n                this._preventTriggerSelect = false;\n                return;\n              }\n\n              if (target.hasClass(ORGCHART_STYLES.cardMenu)) {\n                if (target.closest(\"[tabindex='0']\").length > 0) {\n                  e.stopPropagation();\n                  return;\n                } else {\n                  this._preventTriggerSelect = true;\n                }\n              }\n\n              if (!currentTarget.hasClass(ORGCHART_STYLES.card)) {\n                currentTarget = currentTarget.closest(DOT + ORGCHART_STYLES.card);\n              }\n\n              if (!currentTarget.hasClass(ORGCHART_STYLES.focused)) {\n                this.trigger(SELECT, {\n                  item: currentTarget,\n                  dataItems: [this._dataItem(currentTarget)]\n                });\n              }\n            },\n            _onSelect: function (e) {\n              var target = $(e.currentTarget),\n                  item = target.hasClass(ORGCHART_STYLES.card) ? target : target.closest(DOT + ORGCHART_STYLES.card),\n                  menuButtonTarget = $(e.target).hasClass(ORGCHART_STYLES.cardMenu) ? $(e.target) : $(e.target).closest(DOT + ORGCHART_STYLES.cardMenu);\n\n              if (menuButtonTarget.length > 0) {\n                return;\n              }\n\n              if (!target.hasClass(ORGCHART_STYLES.focused)) {\n                this.trigger(SELECT, {\n                  item: item,\n                  dataItems: [this._dataItem(item)]\n                });\n              }\n            },\n            _orientation: function (group, level, vertical) {\n              var vLine = $(\"<div>\").addClass(ORGCHART_STYLES.line + SPACE + ORGCHART_STYLES.lineVertical);\n\n              if (vertical && level > 1) {\n                group.addClass(ORGCHART_STYLES.groupVertical + SPACE + ORGCHART_STYLES.vstack);\n                group.find(DOT + ORGCHART_STYLES.nodeContainer).addClass(ORGCHART_STYLES.vstack);\n\n                if (group.find(DOT + ORGCHART_STYLES.button).length === 0 || group.find(DOT + ORGCHART_STYLES.card).length === 1) {\n                  group.find(DOT + ORGCHART_STYLES.card).before(vLine.clone());\n                  group.find(DOT + ORGCHART_STYLES.node).first().find(DOT + ORGCHART_STYLES.lineVertical).addClass(ORGCHART_STYLES.lineVerticalTop);\n                } else if (level > 1) {\n                  group.find(DOT + ORGCHART_STYLES.card).first().before(vLine.clone());\n                }\n              } else {\n                group.addClass(ORGCHART_STYLES.groupHorizontal + SPACE + ORGCHART_STYLES.hstack);\n                group.find(DOT + ORGCHART_STYLES.nodeContainer).addClass(ORGCHART_STYLES.hstack);\n\n                if (level > 1) {\n                  group.find(DOT + ORGCHART_STYLES.card).before(vLine.clone().addClass(ORGCHART_STYLES.lineVerticalTop));\n                }\n              }\n            },\n            _renderGroup: function (group, items, level, parentColumns, parentLeft) {\n              var vertical = true,\n                  nodeContainer;\n              nodeContainer = $(NODE_CONTAINER);\n              group.append(nodeContainer);\n              vertical = this._renderInner(nodeContainer, items, level, parentColumns, parentLeft);\n\n              this._orientation(group, level, vertical);\n            },\n            _renderInner: function (nodeContainer, items, level, parentColumns, parentLeft) {\n              var buttonTemplate = kendo.template(BUTTON_TEMPLATE),\n                  cardWrapperTemplate = kendo.template(CARD_WRAPPER),\n                  numberOfColumns = parentColumns / items.length,\n                  vertical = true,\n                  vLine = $(\"<div>\").addClass(ORGCHART_STYLES.line + SPACE + ORGCHART_STYLES.lineVertical),\n                  hLine = $(\"<div>\").addClass(ORGCHART_STYLES.line + SPACE + ORGCHART_STYLES.lineHorizontal),\n                  messages = this.options.messages,\n                  i,\n                  item,\n                  guid,\n                  node,\n                  button,\n                  innerGroup,\n                  itemWidth,\n                  spacing,\n                  contentTemplate;\n\n              if (!this.options.template) {\n                contentTemplate = kendo.template(CARD_TEMPLATE);\n              } else if (typeof this.options.template === \"function\") {\n                contentTemplate = this.options.template;\n              } else {\n                contentTemplate = kendo.template(this.options.template);\n              }\n\n              for (i = 0; i < items.length; i++) {\n                item = items[i];\n                guid = kendo.guid();\n                node = this._renderNode(cardWrapperTemplate, contentTemplate, item, level, guid);\n\n                if (item.hasChildren) {\n                  node.append(vLine.clone());\n                  button = $(buttonTemplate({\n                    buttonSign: item.expanded ? MINUS : PLUS,\n                    label: item.expanded ? messages.collapse : messages.expand\n                  }));\n                  node.append(button);\n                }\n\n                nodeContainer.append(node);\n\n                this._calculateDimensions();\n\n                itemWidth = this._itemWidth;\n                spacing = this._spacing;\n\n                if (item.hasChildren) {\n                  vertical = false;\n\n                  if (item.expanded) {\n                    innerGroup = this._renderInnerGroup(item, numberOfColumns, parentLeft, i, level, guid);\n                  }\n                }\n\n                if (!!innerGroup && innerGroup.hasClass(ORGCHART_STYLES.groupHorizontal) && item.expanded && !!item.children && item.children.length > 1) {\n                  button.after(hLine.clone().css({\n                    width: (numberOfColumns - numberOfColumns / item.children.length) * (itemWidth + spacing) + PX,\n                    \"margin-top\": this._buttonHeight / -2 + PX\n                  }));\n                }\n              }\n\n              if (numberOfColumns > 1 && !vertical) {\n                nodeContainer.find(DOT + ORGCHART_STYLES.node).width((numberOfColumns - 1) * (spacing + itemWidth));\n              }\n\n              return vertical;\n            },\n            _renderInnerGroup: function (item, numberOfColumns, parentLeft, i, level, guid) {\n              var itemWidth = this._itemWidth,\n                  spacing = this._spacing,\n                  width = numberOfColumns * itemWidth + (numberOfColumns - 1) * spacing,\n                  left = i * numberOfColumns * itemWidth + parentLeft,\n                  groupTemplate = kendo.template(GROUP_TEMPLATE),\n                  offsetDirection = kendo.support.isRtl(this.element) ? \"right\" : \"left\",\n                  top = level * (this._itemHeight + this._buttonHeight + spacing) + spacing * (level - 1) - this._buttonHeight / 2,\n                  innerGroup;\n\n              if (i > 0) {\n                left += i * numberOfColumns * spacing;\n              }\n\n              innerGroup = $(groupTemplate({\n                guid: guid,\n                level: level + 1\n              }));\n              innerGroup.css({\n                width: width + PX,\n                top: top + PX\n              });\n              innerGroup.css(offsetDirection, left + PX);\n              this.element.append(innerGroup);\n\n              this._renderGroup(innerGroup, item.children, level + 1, numberOfColumns, left);\n\n              return innerGroup;\n            }\n          });\n          var GroupedView = View.extend({\n            init: function (element, options) {\n              View.fn.init.call(this, element, options);\n              this._selector = ORGCHART_STYLES.nodesGroupContainer;\n            },\n            collapse: function (group) {\n              var $group = this.jqueryGroupElement(group),\n                  dataItems,\n                  i;\n\n              if (!$group) {\n                return;\n              }\n\n              dataItems = this._dataItems($group);\n\n              for (i = 0; i < dataItems.length; i++) {\n                this.dataSource.toggleChildren(dataItems[i], false).then(this.refresh.bind(this));\n              }\n            },\n            expand: function (group) {\n              var $group = this.jqueryGroupElement(group),\n                  dataItems,\n                  i;\n\n              if (!$group) {\n                return;\n              }\n\n              dataItems = this._dataItems($group);\n\n              for (i = 0; i < dataItems.length; i++) {\n                this.dataSource.toggleChildren(dataItems[i], true).then(this.refresh.bind(this));\n              }\n            },\n            _dataItems: function (container) {\n              var ds = this.dataSource,\n                  dataItems = [],\n                  items,\n                  item,\n                  current;\n\n              if (container.hasClass(ORGCHART_STYLES.card)) {\n                item = ds.getByUid(container.data(UID));\n\n                if (item) {\n                  dataItems.push(item);\n                }\n              } else if (container.hasClass(ORGCHART_STYLES.nodesGroupContainer)) {\n                this._groupFocused = true;\n                items = container.find(DOT + ORGCHART_STYLES.card);\n                items.each(function (i, item) {\n                  current = ds.getByUid(item.getAttribute(\"data-uid\"));\n\n                  if (current) {\n                    dataItems.push(current);\n                  }\n                });\n              }\n\n              return dataItems;\n            },\n            _calculateItemWidth: function () {\n              var itemElement = this.element.find(DOT + this._selector).first(),\n                  cardWidth = this.element.find(DOT + ORGCHART_STYLES.card).first().outerWidth(true),\n                  padding = Number(itemElement.css(\"padding-left\").split(PX)[0]),\n                  border = Number(itemElement.css(\"border-left\").split(PX)[0]);\n              return cardWidth + 2 * padding + 2 * border;\n            },\n            _calculateLevel: function (groups, level) {\n              var groupsLength = groups.length,\n                  nestedChildren = false,\n                  maxColumns = 0,\n                  currentLength,\n                  i,\n                  group;\n              this._maxColumnsPerLevel[level] = this._maxColumnsPerLevel[level] || 0;\n              this._maxGroups[level] = this._maxGroups[level] || 0;\n\n              for (i = 0; i < groupsLength; i++) {\n                group = groups[i];\n                currentLength = group.items.length;\n\n                if (currentLength > maxColumns) {\n                  maxColumns = currentLength;\n                }\n\n                group = groups[i];\n\n                if (group.hasChildren) {\n                  nestedChildren = true;\n\n                  if (group.expanded) {\n                    this._calculateLevel(group.children, level + 1);\n                  }\n                }\n              }\n\n              if (groupsLength > this._maxGroups[level]) {\n                this._maxGroups[level] = groupsLength;\n              }\n\n              if (!nestedChildren) {\n                maxColumns = 1;\n              }\n\n              if (maxColumns > this._maxColumnsPerLevel[level]) {\n                this._maxColumnsPerLevel[level] = maxColumns;\n              }\n            },\n            _calculateLevels: function () {\n              var items = this._itemsTree,\n                  maxColumnsPerLevel = this._maxColumnsPerLevel = [],\n                  maxGroups = this._maxGroups = [],\n                  total = 1,\n                  i,\n                  currentTotal;\n\n              this._calculateLevel(items, 0);\n\n              for (i = maxColumnsPerLevel.length - 1; i >= 0; i--) {\n                currentTotal = maxColumnsPerLevel[i] * maxGroups[i];\n\n                if (total > maxColumnsPerLevel[i]) {\n                  total = total * maxGroups[i];\n                } else if (total < currentTotal) {\n                  total = currentTotal;\n                }\n              }\n\n              this._total = total;\n            },\n            _generateItemsTree: function () {\n              this._itemsTree = this.dataSource.groupedItemsTree(this.options.groupField);\n            },\n            _getToFocus: function (item) {\n              if (!this._groupFocused) {\n                return this.element.find(\"[data-uid='\" + item.get(UID) + \"']\");\n              } else {\n                this._groupFocused = false;\n                return this.element.find(\"[data-uid='\" + item.get(UID) + \"']\").closest(DOT + ORGCHART_STYLES.nodesGroupContainer);\n              }\n            },\n            _getToSelect: function (el) {\n              var item = this.jqueryItemElement(el);\n              return item || this.jqueryGroupElement(el);\n            },\n            _groupIsVertical: function (focused) {\n              var itemGroup = focused.closest(DOT + ORGCHART_STYLES.nodeContainer);\n              return itemGroup.hasClass(ORGCHART_STYLES.vstack);\n            },\n            _keyCollapse: function (focused) {\n              var dataItems = [],\n                  parentUid,\n                  expanded;\n              dataItems = this._dataItems(focused);\n              expanded = dataItems.some(function (item) {\n                return item.expanded;\n              });\n\n              if (expanded) {\n                if (focused.hasClass(ORGCHART_STYLES.card)) {\n                  focused = focused.closest(DOT + ORGCHART_STYLES.nodesGroupContainer);\n                  dataItems = this._dataItems(focused);\n                }\n\n                if (!this.trigger(COLLAPSE, {\n                  item: focused,\n                  dataItems: dataItems\n                })) {\n                  this.collapse(focused);\n                }\n              } else if (dataItems[0].parentId) {\n                parentUid = this.dataSource.get(dataItems[0].parentId).get(UID);\n                this.trigger(SELECT, {\n                  item: this.element.find(\"[data-uid='\" + parentUid + \"']\").closest(DOT + this._selector),\n                  dataItems: dataItems\n                });\n              }\n            },\n            _keyEnter: function (focused) {\n              var toSelect,\n                  dataItems = [];\n\n              if (focused.hasClass(ORGCHART_STYLES.card) && focused.find(DOT + ORGCHART_STYLES.cardMenu).length > 0) {\n                this.trigger(MENU, focused);\n              } else {\n                toSelect = focused.find(DOT + ORGCHART_STYLES.card).first();\n                dataItems = this._dataItems(toSelect);\n                this.trigger(SELECT, {\n                  item: toSelect,\n                  dataItems: dataItems\n                });\n              }\n            },\n            _keyEscape: function (focused) {\n              if (!focused.hasClass(ORGCHART_STYLES.card)) {\n                return;\n              }\n\n              var group = focused.closest(DOT + ORGCHART_STYLES.nodesGroupContainer),\n                  dataItems = this._dataItems(group);\n\n              this.trigger(SELECT, {\n                item: group,\n                dataItems: dataItems\n              });\n            },\n            _keyExpand: function (focused) {\n              var ownedGroupId = focused.attr(ARIA_OWNS) || focused.closest(DOT + this._selector).attr(ARIA_OWNS),\n                  ownedGroup = this.element.find(HASH + ownedGroupId),\n                  dataItems = this._dataItems(focused),\n                  hasChildren,\n                  expanded,\n                  item;\n\n              hasChildren = dataItems.some(function (item) {\n                return item.hasChildren;\n              });\n\n              if (!hasChildren) {\n                return;\n              }\n\n              expanded = dataItems.some(function (item) {\n                return item.expanded;\n              });\n\n              if (!expanded) {\n                if (focused.hasClass(ORGCHART_STYLES.card)) {\n                  focused = focused.closest(DOT + ORGCHART_STYLES.nodesGroupContainer);\n                  dataItems = this._dataItems(focused);\n                }\n\n                if (!this.trigger(EXPAND, {\n                  item: focused,\n                  dataItems: dataItems\n                })) {\n                  this.expand(focused);\n                }\n              } else {\n                item = ownedGroup.find(DOT + this._selector).first();\n                this.trigger(SELECT, {\n                  item: item,\n                  dataItems: this._dataItems(item)\n                });\n              }\n            },\n            _keyNext: function (focused) {\n              var ownedGroup = this.element.find(HASH + focused.attr(ARIA_OWNS)),\n                  dataItems = this._dataItems(focused),\n                  hasChildren = dataItems.some(function (item) {\n                return item.hasChildren;\n              }),\n                  expanded = dataItems.some(function (item) {\n                return item.expanded;\n              }),\n                  next;\n\n              if (focused.hasClass(ORGCHART_STYLES.card)) {\n                next = focused.parent().next(DOT + ORGCHART_STYLES.node).find(DOT + ORGCHART_STYLES.card);\n              } else {\n                next = focused.parent().next(DOT + ORGCHART_STYLES.nodesGroup).find(DOT + ORGCHART_STYLES.nodesGroupContainer);\n              }\n\n              if (!next.length && hasChildren && expanded) {\n                next = ownedGroup.find(DOT + this._selector).first();\n              }\n\n              if (next.length === 0) {\n                return;\n              }\n\n              this.trigger(SELECT, {\n                item: next,\n                dataItems: this._dataItems(next)\n              });\n            },\n            _keyPrev: function (focused) {\n              var dataItems = this._dataItems(focused),\n                  parentUid,\n                  prev;\n\n              if (focused.hasClass(ORGCHART_STYLES.card)) {\n                prev = focused.parent().prev(DOT + ORGCHART_STYLES.node).find(DOT + ORGCHART_STYLES.card);\n              } else {\n                prev = focused.parent().prev(DOT + ORGCHART_STYLES.nodesGroup).find(DOT + ORGCHART_STYLES.nodesGroupContainer);\n              }\n\n              if (!prev.length && dataItems[0].parentId) {\n                parentUid = this.dataSource.get(dataItems[0].parentId).get(UID);\n                prev = this.element.find(\"[data-uid='\" + parentUid + \"']\").closest(DOT + this._selector);\n              }\n\n              if (prev.length === 0) {\n                return;\n              }\n\n              this.trigger(SELECT, {\n                item: prev,\n                dataItems: this._dataItems(prev)\n              });\n            },\n            _onFocus: function (e) {\n              var target = $(e.target),\n                  items,\n                  current;\n\n              if (this._preventTriggerSelect) {\n                e.stopPropagation();\n                this._preventTriggerSelect = false;\n                return;\n              }\n\n              if (target.hasClass(ORGCHART_STYLES.cardMenu)) {\n                if (target.closest(\"[tabindex='0']\").length > 0) {\n                  e.stopPropagation();\n                  return;\n                } else {\n                  this._preventTriggerSelect = true;\n                }\n              }\n\n              if (!target.hasClass(ORGCHART_STYLES.card) && !target.hasClass(ORGCHART_STYLES.nodesGroupContainer)) {\n                current = target.closest(DOT + ORGCHART_STYLES.card);\n\n                if (!current.length) {\n                  current = target.closest(DOT + ORGCHART_STYLES.nodesGroupContainer);\n                }\n\n                target = current;\n              }\n\n              if (target.length === 0) {\n                return;\n              }\n\n              items = this._dataItems(target);\n\n              if (!target.hasClass(ORGCHART_STYLES.focused)) {\n                e.stopPropagation();\n                this.trigger(SELECT, {\n                  item: target,\n                  dataItems: items\n                });\n              }\n            },\n            _onSelect: function (e) {\n              var target = $(e.target),\n                  previousSelection = this.element.find(\"[tabindex=0]\"),\n                  items,\n                  current;\n\n              if (!target.hasClass(ORGCHART_STYLES.card) && !target.hasClass(ORGCHART_STYLES.nodesGroupContainer)) {\n                current = target.closest(DOT + ORGCHART_STYLES.card);\n\n                if (!current.length) {\n                  current = target.closest(DOT + ORGCHART_STYLES.nodesGroupContainer);\n                }\n\n                target = current;\n              }\n\n              if (target.length === 0 || previousSelection[0] === target[0]) {\n                return;\n              }\n\n              items = this._dataItems(target);\n              this.trigger(SELECT, {\n                item: target,\n                dataItems: items\n              });\n            },\n            _orientation: function (group, level, vertical) {\n              var vLine = $(\"<div>\").addClass(ORGCHART_STYLES.line + SPACE + ORGCHART_STYLES.lineVertical + SPACE + ORGCHART_STYLES.lineVerticalTop);\n              group.addClass(ORGCHART_STYLES.hstack);\n\n              if (level > 1) {\n                group.find(DOT + ORGCHART_STYLES.nodesGroupContainer).before(vLine.clone());\n              }\n\n              if (vertical && level > 1) {\n                group.find(DOT + ORGCHART_STYLES.nodeContainer).removeClass(ORGCHART_STYLES.hstack);\n                group.find(DOT + ORGCHART_STYLES.nodeContainer).addClass(ORGCHART_STYLES.vstack);\n              } else {\n                group.addClass(ORGCHART_STYLES.groupHorizontal);\n              }\n            },\n            _renderChildren: function (item, index, numberOfColumns, level, nodesGroup, parentLeft, guid) {\n              var buttonTemplate = kendo.template(BUTTON_TEMPLATE),\n                  groupTemplate = kendo.template(GROUP_TEMPLATE),\n                  vLine = $(\"<div>\").addClass(ORGCHART_STYLES.line + SPACE + ORGCHART_STYLES.lineVertical),\n                  hLine = $(\"<div>\").addClass(ORGCHART_STYLES.line + SPACE + ORGCHART_STYLES.lineHorizontal),\n                  messages = this.options.messages,\n                  vertical = true,\n                  offsetDirection = kendo.support.isRtl(this.element) ? \"right\" : \"left\",\n                  innerGroup,\n                  button,\n                  left,\n                  top,\n                  width,\n                  nodesGroupWidth,\n                  spacing;\n\n              if (item.hasChildren) {\n                vertical = false;\n                nodesGroup.append(vLine.clone());\n                button = $(buttonTemplate({\n                  buttonSign: item.expanded ? MINUS : PLUS,\n                  label: item.expanded ? messages.collapse : messages.expand\n                }));\n                nodesGroup.append(button);\n\n                this._calculateDimensions();\n\n                nodesGroupWidth = this._itemWidth;\n                spacing = this._spacing;\n\n                if (item.expanded) {\n                  width = nodesGroupWidth * numberOfColumns + (numberOfColumns - 1) * spacing;\n                  left = index * numberOfColumns * nodesGroupWidth + parentLeft;\n                  top = level * (this._itemHeight + this._buttonHeight + spacing) + spacing * (level - 1) - this._buttonHeight / 2;\n\n                  if (index > 0) {\n                    left += index * numberOfColumns * spacing;\n                  }\n\n                  innerGroup = $(groupTemplate({\n                    guid: guid,\n                    level: level + 1\n                  }));\n                  innerGroup.css({\n                    width: width + PX,\n                    top: top + PX\n                  });\n                  innerGroup.css(offsetDirection, left + PX);\n                  this.element.append(innerGroup);\n\n                  this._renderGroup(innerGroup, item.children, level + 1, numberOfColumns, left);\n                }\n              }\n\n              if (!!innerGroup && item.expanded && !!item.children && item.children.length > 1) {\n                button.after(hLine.clone().css({\n                  width: (numberOfColumns - numberOfColumns / item.children.length) * (nodesGroupWidth + spacing) + PX,\n                  \"margin-top\": this._buttonHeight / -2 + PX\n                }));\n              }\n\n              return vertical;\n            },\n            _renderGroup: function (group, items, level, parentColumns, parentLeft) {\n              var vertical = true,\n                  numberOfColumns = parentColumns / items.length,\n                  nodeContainer,\n                  nodesGroup,\n                  i,\n                  guid,\n                  currentVertical,\n                  item;\n\n              for (i = 0; i < items.length; i++) {\n                guid = kendo.guid();\n                item = items[i];\n                nodeContainer = this._renderNodesContainer(group, extend(true, {}, item, {\n                  guid: guid,\n                  level: level\n                }));\n                nodesGroup = nodeContainer.closest(DOT + ORGCHART_STYLES.nodesGroup);\n\n                this._renderItems(nodeContainer, item.items, level, guid);\n\n                currentVertical = this._renderChildren(item, i, numberOfColumns, level, nodesGroup, parentLeft, guid);\n\n                if (vertical) {\n                  vertical = currentVertical;\n                }\n              }\n\n              var width = this._itemWidth * numberOfColumns + (numberOfColumns - 1) * this._spacing;\n              group.find(DOT + ORGCHART_STYLES.nodesGroup).width(width);\n\n              this._orientation(group, level, vertical);\n            },\n            _renderItems: function (nodeContainer, items, level, guid) {\n              var cardWrapperTemplate = kendo.template(GROUPED_CARD_WRAPPER),\n                  i,\n                  item,\n                  node,\n                  contentTemplate;\n\n              if (!this.options.template) {\n                contentTemplate = kendo.template(CARD_TEMPLATE);\n              } else if (typeof this.options.template === \"function\") {\n                contentTemplate = this.options.template;\n              } else {\n                contentTemplate = kendo.template(this.options.template);\n              }\n\n              for (i = 0; i < items.length; i++) {\n                item = items[i];\n                node = this._renderNode(cardWrapperTemplate, contentTemplate, item, level, guid);\n                nodeContainer.append(node);\n              }\n            },\n            _renderNodesContainer: function (group, data) {\n              var nodeGroupContainerTemplate = kendo.template(NODE_GROUP_CONTAINER),\n                  nodeGroup = $('<div class=\"k-orgchart-node-group k-align-items-center k-vstack\">'),\n                  nodeContainer = $(NODE_CONTAINER_GROUPED),\n                  nodeGroupContainer = $(nodeGroupContainerTemplate(data)),\n                  groupHeaderTemplate;\n\n              if (typeof this.options.groupHeaderTemplate === \"function\") {\n                groupHeaderTemplate = this.options.groupHeaderTemplate;\n              } else {\n                groupHeaderTemplate = kendo.template(this.options.groupHeaderTemplate);\n              }\n\n              nodeGroupContainer.append(groupHeaderTemplate({\n                value: data.value,\n                field: data.field\n              }));\n              nodeGroupContainer.append(nodeContainer);\n              nodeGroup.append(nodeGroupContainer);\n              group.append(nodeGroup);\n              return nodeContainer;\n            }\n          });\n          kendo.orgChart = {\n            View: View,\n            SingleView: SingleView,\n            GroupedView: GroupedView\n          };\n        })(window.kendo.jQuery);\n\n        return window.kendo;\n      }, __webpack_require__(3));\n      /* WEBPACK VAR INJECTION */\n\n    }).call(exports, __webpack_require__(1060));\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}