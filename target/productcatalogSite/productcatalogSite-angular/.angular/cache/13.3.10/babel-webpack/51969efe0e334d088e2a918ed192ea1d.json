{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1014);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  902:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../../kendo.draganddrop\");\n    /***/\n  },\n\n  /***/\n  982:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../main\");\n    /***/\n  },\n\n  /***/\n  1011:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./resizing-utils\");\n    /***/\n  },\n\n  /***/\n  1014:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(982), __webpack_require__(902), __webpack_require__(1011)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function (kendo, undefined) {\n        var $ = kendo.jQuery;\n        var extend = $.extend;\n        var noop = $.noop;\n        var Editor = kendo.ui.editor;\n        var Class = kendo.Class;\n        var Draggable = kendo.ui.Draggable;\n        var Observable = kendo.Observable;\n        var getScrollBarWidth = Editor.ResizingUtils.getScrollBarWidth;\n        var outerWidth = kendo._outerWidth;\n        var outerHeight = kendo._outerHeight;\n        var NS = \".kendoEditorElementResizeHandle\";\n        var RESIZE_HANDLE_CLASS = \"k-element-resize-handle\";\n        var DRAG_START = \"dragStart\";\n        var DRAG = \"drag\";\n        var DRAG_END = \"dragEnd\";\n        var HALF_INSIDE = \"halfInside\";\n        var MOUSE_OVER = \"mouseover\";\n        var MOUSE_OUT = \"mouseout\";\n        var BODY = \"body\";\n        var TABLE = \"table\";\n        var EAST = \"east\";\n        var NORTH = \"north\";\n        var NORTHEAST = \"northeast\";\n        var NORTHWEST = \"northwest\";\n        var SOUTH = \"south\";\n        var SOUTHEAST = \"southeast\";\n        var SOUTHWEST = \"southwest\";\n        var WEST = \"west\";\n        var DOT = \".\";\n        var ElementResizeHandle = Observable.extend({\n          init: function (options) {\n            var that = this;\n            Observable.fn.init.call(that);\n            that.options = extend({}, that.options, options);\n            that.element = $(that.options.template).appendTo(that.options.appendTo)[0];\n\n            that._attachEventHandlers();\n\n            that._addStyles();\n\n            that._initDraggable();\n\n            that._initPositioningStrategy();\n\n            that._initDraggingStrategy();\n\n            $(that.element).data(TABLE, that.options.resizableElement);\n          },\n          destroy: function () {\n            var that = this;\n            $(that.element).off(NS).remove();\n            that.element = null;\n\n            that._destroyDraggable();\n\n            that.unbind();\n          },\n          options: {\n            appendTo: null,\n            direction: SOUTHEAST,\n            resizableElement: null,\n            rtl: false,\n            template: \"<div class='k-element-resize-handle-wrapper' unselectable='on' contenteditable='false'>\" + \"<div class='\" + RESIZE_HANDLE_CLASS + \"'></div>\" + \"</div>\"\n          },\n          events: [DRAG_START, DRAG, DRAG_END, MOUSE_OVER, MOUSE_OUT],\n          show: function () {\n            this._setPosition();\n          },\n          _setPosition: function () {\n            var that = this;\n\n            var position = that._positioningStrategy.getPosition();\n\n            $(that.element).css({\n              top: position.top,\n              left: position.left,\n              position: \"absolute\"\n            });\n          },\n          _attachEventHandlers: function () {\n            var that = this;\n            $(that.element).on(MOUSE_OVER + NS, that._onMouseOver.bind(that)).on(MOUSE_OUT + NS, that._onMouseOut.bind(that));\n          },\n          _onMouseOver: function () {\n            this.trigger(MOUSE_OVER);\n          },\n          _onMouseOut: function () {\n            this.trigger(MOUSE_OUT);\n          },\n          _addStyles: function () {\n            var that = this;\n            $(that.element).children(DOT + RESIZE_HANDLE_CLASS).addClass(\"k-resize-\" + that.options.direction);\n          },\n          _initPositioningStrategy: function () {\n            var that = this;\n            var options = that.options;\n            that._positioningStrategy = HandlePositioningStrategy.create({\n              name: options.direction,\n              handle: that.element,\n              resizableElement: options.resizableElement,\n              rootElement: options.rootElement,\n              rtl: options.rtl\n            });\n          },\n          _initDraggable: function () {\n            var that = this;\n            var element = that.element;\n\n            if (that._draggable || !element) {\n              return;\n            }\n\n            that._draggable = new Draggable(element, {\n              dragstart: that._onDragStart.bind(that),\n              drag: that._onDrag.bind(that),\n              dragend: that._onDragEnd.bind(that)\n            });\n          },\n          _onDragStart: function () {\n            this.trigger(DRAG_START);\n          },\n          _onDrag: function (e) {\n            var that = this;\n            that.trigger(DRAG, that._draggingStrategy.adjustDragDelta({\n              deltaX: e.x.delta,\n              deltaY: e.y.delta,\n              initialDeltaX: e.x.initialDelta,\n              initialDeltaY: e.y.initialDelta\n            }));\n          },\n          _onDragEnd: function () {\n            this.trigger(DRAG_END);\n          },\n          _destroyDraggable: function () {\n            var that = this;\n\n            if (that._draggable) {\n              that._draggable.destroy();\n\n              that._draggable = null;\n            }\n          },\n          _initDraggingStrategy: function () {\n            var that = this;\n            that._draggingStrategy = HandleDraggingStrategy.create({\n              name: that.options.direction\n            });\n          }\n        });\n        var StrategyFactory = Class.extend({\n          init: function () {\n            this._items = [];\n          },\n          register: function (name, type) {\n            this._items.push({\n              name: name,\n              type: type\n            });\n          },\n          create: function (options) {\n            var items = this._items;\n            var itemsLength = items.length;\n            var name = options.name ? options.name.toLowerCase() : \"\";\n            var match;\n            var item;\n            var i;\n\n            for (i = 0; i < itemsLength; i++) {\n              item = items[i];\n\n              if (item.name.toLowerCase() === name) {\n                match = item;\n                break;\n              }\n            }\n\n            if (match) {\n              return new match.type(options);\n            }\n          }\n        });\n        var PositioningStrategyFactory = StrategyFactory.extend({});\n        PositioningStrategyFactory.current = new PositioningStrategyFactory();\n        var HandlePositioningStrategy = Class.extend({\n          init: function (options) {\n            var that = this;\n            that.options = extend({}, that.options, options);\n          },\n          options: {\n            handle: null,\n            offset: HALF_INSIDE,\n            resizableElement: null,\n            rootElement: null,\n            rtl: false\n          },\n          getPosition: function () {\n            var that = this;\n            var position = that.calculatePosition();\n            var handleOffsetPosition = that.applyHandleOffset(position);\n            var scrollOffsetPosition = that.applyScrollOffset(handleOffsetPosition);\n            return scrollOffsetPosition;\n          },\n          calculatePosition: noop,\n          applyHandleOffset: function (position) {\n            var options = this.options;\n            var handle = $(options.handle);\n\n            if (options.offset === HALF_INSIDE) {\n              return {\n                top: position.top - outerHeight(handle) / 2,\n                left: position.left - outerWidth(handle) / 2\n              };\n            }\n\n            return position;\n          },\n          applyScrollOffset: function (position) {\n            var options = this.options;\n            var rootElement = $(options.rootElement);\n            var scrollBarWidth = options.rtl ? getScrollBarWidth(rootElement[0]) : 0;\n            var browser = kendo.support.browser;\n            var rootLeft;\n\n            if (!rootElement.is(BODY)) {\n              rootLeft = kendo.scrollLeft(rootElement) || 0;\n\n              if (options.rtl && (browser.mozilla || browser.webkit && browser.version >= 85)) {\n                rootLeft = rootLeft * -1;\n              }\n\n              return {\n                top: position.top + (rootElement.scrollTop() || 0),\n                left: position.left + rootLeft - scrollBarWidth\n              };\n            }\n\n            return position;\n          }\n        });\n\n        HandlePositioningStrategy.create = function (options) {\n          return PositioningStrategyFactory.current.create(options);\n        };\n\n        var EastPositioningStrategy = HandlePositioningStrategy.extend({\n          calculatePosition: function () {\n            var resizableElement = $(this.options.resizableElement);\n            var offset = resizableElement.position();\n            var marginLeft = parseInt(resizableElement.css(\"marginLeft\"), 10);\n            return {\n              top: offset.top + outerHeight(resizableElement) / 2,\n              left: offset.left + outerWidth(resizableElement) + marginLeft\n            };\n          }\n        });\n        PositioningStrategyFactory.current.register(EAST, EastPositioningStrategy);\n        var NorthPositioningStrategy = HandlePositioningStrategy.extend({\n          calculatePosition: function () {\n            var resizableElement = $(this.options.resizableElement);\n            var offset = resizableElement.position();\n            var marginLeft = parseInt(resizableElement.css(\"marginLeft\"), 10);\n            return {\n              top: offset.top,\n              left: offset.left + outerWidth(resizableElement) / 2 + marginLeft\n            };\n          }\n        });\n        PositioningStrategyFactory.current.register(NORTH, NorthPositioningStrategy);\n        var NortheastPositioningStrategy = HandlePositioningStrategy.extend({\n          calculatePosition: function () {\n            var resizableElement = $(this.options.resizableElement);\n            var offset = resizableElement.position();\n            var marginLeft = parseInt(resizableElement.css(\"marginLeft\"), 10);\n            return {\n              top: offset.top,\n              left: offset.left + outerWidth(resizableElement) + marginLeft\n            };\n          }\n        });\n        PositioningStrategyFactory.current.register(NORTHEAST, NortheastPositioningStrategy);\n        var NorthwestPositioningStrategy = HandlePositioningStrategy.extend({\n          calculatePosition: function () {\n            var resizableElement = $(this.options.resizableElement);\n            var offset = resizableElement.position();\n            var marginLeft = parseInt(resizableElement.css(\"marginLeft\"), 10);\n            return {\n              top: offset.top,\n              left: offset.left + marginLeft\n            };\n          }\n        });\n        PositioningStrategyFactory.current.register(NORTHWEST, NorthwestPositioningStrategy);\n        var SouthPositioningStrategy = HandlePositioningStrategy.extend({\n          calculatePosition: function () {\n            var resizableElement = $(this.options.resizableElement);\n            var offset = resizableElement.position();\n            var marginLeft = parseInt(resizableElement.css(\"marginLeft\"), 10);\n            return {\n              top: offset.top + outerHeight(resizableElement),\n              left: offset.left + outerWidth(resizableElement) / 2 + marginLeft\n            };\n          }\n        });\n        PositioningStrategyFactory.current.register(SOUTH, SouthPositioningStrategy);\n        var SoutheastPositioningStrategy = HandlePositioningStrategy.extend({\n          calculatePosition: function () {\n            var resizableElement = $(this.options.resizableElement);\n            var offset = resizableElement.position();\n            var marginLeft = parseInt(resizableElement.css(\"marginLeft\"), 10);\n            return {\n              top: offset.top + outerHeight(resizableElement),\n              left: offset.left + outerWidth(resizableElement) + marginLeft\n            };\n          }\n        });\n        PositioningStrategyFactory.current.register(SOUTHEAST, SoutheastPositioningStrategy);\n        var SouthwestPositioningStrategy = HandlePositioningStrategy.extend({\n          calculatePosition: function () {\n            var resizableElement = $(this.options.resizableElement);\n            var offset = resizableElement.position();\n            var marginLeft = parseInt(resizableElement.css(\"marginLeft\"), 10);\n            return {\n              top: offset.top + outerHeight(resizableElement),\n              left: offset.left + marginLeft\n            };\n          }\n        });\n        PositioningStrategyFactory.current.register(SOUTHWEST, SouthwestPositioningStrategy);\n        var WestPositioningStrategy = HandlePositioningStrategy.extend({\n          calculatePosition: function () {\n            var resizableElement = $(this.options.resizableElement);\n            var offset = resizableElement.position();\n            var marginLeft = parseInt(resizableElement.css(\"marginLeft\"), 10);\n            return {\n              top: offset.top + outerHeight(resizableElement) / 2,\n              left: offset.left + marginLeft\n            };\n          }\n        });\n        PositioningStrategyFactory.current.register(WEST, WestPositioningStrategy);\n        var DraggingStrategyFactory = StrategyFactory.extend({});\n        DraggingStrategyFactory.current = new DraggingStrategyFactory();\n        var HandleDraggingStrategy = Class.extend({\n          init: function (options) {\n            var that = this;\n            that.options = extend({}, that.options, options);\n          },\n          options: {\n            deltaX: {\n              adjustment: null,\n              modifier: null\n            },\n            deltaY: {\n              adjustment: null,\n              modifier: null\n            }\n          },\n          adjustDragDelta: function (deltas) {\n            var options = this.options;\n            var xAxisAdjustment = options.deltaX.adjustment * options.deltaX.modifier;\n            var yAxisAdjustment = options.deltaY.adjustment * options.deltaY.modifier;\n            return {\n              deltaX: deltas.deltaX * xAxisAdjustment,\n              deltaY: deltas.deltaY * yAxisAdjustment,\n              initialDeltaX: deltas.initialDeltaX * xAxisAdjustment,\n              initialDeltaY: deltas.initialDeltaY * yAxisAdjustment\n            };\n          }\n        });\n\n        HandleDraggingStrategy.create = function (options) {\n          return DraggingStrategyFactory.current.create(options);\n        };\n\n        var HorizontalDraggingStrategy = HandleDraggingStrategy.extend({\n          options: {\n            deltaX: {\n              adjustment: 1,\n              modifier: 1\n            },\n            deltaY: {\n              adjustment: 0,\n              modifier: 0\n            }\n          }\n        });\n        var EastDraggingStrategy = HorizontalDraggingStrategy.extend({\n          options: {\n            deltaX: {\n              modifier: 1\n            }\n          }\n        });\n        DraggingStrategyFactory.current.register(EAST, EastDraggingStrategy);\n        var WestDraggingStrategy = HorizontalDraggingStrategy.extend({\n          options: {\n            deltaX: {\n              modifier: -1\n            }\n          }\n        });\n        DraggingStrategyFactory.current.register(WEST, WestDraggingStrategy);\n        var VerticalDraggingStrategy = HandleDraggingStrategy.extend({\n          options: {\n            deltaX: {\n              adjustment: 0,\n              modifier: 0\n            },\n            deltaY: {\n              adjustment: 1,\n              modifier: 1\n            }\n          }\n        });\n        var NorthDraggingStrategy = VerticalDraggingStrategy.extend({\n          options: {\n            deltaY: {\n              modifier: -1\n            }\n          }\n        });\n        DraggingStrategyFactory.current.register(NORTH, NorthDraggingStrategy);\n        var SouthDraggingStrategy = VerticalDraggingStrategy.extend({\n          options: {\n            deltaY: {\n              modifier: 1\n            }\n          }\n        });\n        DraggingStrategyFactory.current.register(SOUTH, SouthDraggingStrategy);\n        var HorizontalAndVerticalDraggingStrategy = HandleDraggingStrategy.extend({\n          options: {\n            deltaX: {\n              adjustment: 1,\n              modifier: 1\n            },\n            deltaY: {\n              adjustment: 1,\n              modifier: 1\n            }\n          }\n        });\n        var NorthEastDraggingStrategy = HorizontalAndVerticalDraggingStrategy.extend({\n          options: {\n            deltaX: {\n              modifier: 1\n            },\n            deltaY: {\n              modifier: -1\n            }\n          }\n        });\n        DraggingStrategyFactory.current.register(NORTHEAST, NorthEastDraggingStrategy);\n        var NorthWestDraggingStrategy = HorizontalAndVerticalDraggingStrategy.extend({\n          options: {\n            deltaX: {\n              modifier: -1\n            },\n            deltaY: {\n              modifier: -1\n            }\n          }\n        });\n        DraggingStrategyFactory.current.register(NORTHWEST, NorthWestDraggingStrategy);\n        var SouthEastDraggingStrategy = HorizontalAndVerticalDraggingStrategy.extend({\n          options: {\n            deltaX: {\n              modifier: 1\n            },\n            deltaY: {\n              modifier: 1\n            }\n          }\n        });\n        DraggingStrategyFactory.current.register(SOUTHEAST, SouthEastDraggingStrategy);\n        var SouthWestDraggingStrategy = HorizontalAndVerticalDraggingStrategy.extend({\n          options: {\n            deltaX: {\n              modifier: -1\n            },\n            deltaY: {\n              modifier: 1\n            }\n          }\n        });\n        DraggingStrategyFactory.current.register(SOUTHWEST, SouthWestDraggingStrategy);\n        extend(Editor, {\n          ElementResizeHandle: ElementResizeHandle\n        });\n      })(window.kendo);\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}