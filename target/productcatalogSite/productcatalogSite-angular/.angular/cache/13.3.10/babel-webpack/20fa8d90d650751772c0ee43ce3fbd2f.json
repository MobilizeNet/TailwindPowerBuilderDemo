{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1371);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1051:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.core\");\n    /***/\n  },\n\n  /***/\n  1092:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.selectable\");\n    /***/\n  },\n\n  /***/\n  1193:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.calendar\");\n    /***/\n  },\n\n  /***/\n  1371:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1051), __webpack_require__(1092), __webpack_require__(1193)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"multiviewcalendar\",\n        name: \"MultiViewCalendar\",\n        category: \"web\",\n        description: \"Multi-view calendar.\",\n        depends: [\"core\", \"selectable\", \"calendar\"]\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            calendar = kendo.calendar,\n            support = kendo.support,\n            isInRange = calendar.isInRange,\n            toDateObject = calendar.toDateObject,\n            createDate = calendar.createDate,\n            isEqualDate = calendar.isEqualDate,\n            getToday = calendar.getToday,\n            keys = kendo.keys,\n            ui = kendo.ui,\n            Widget = ui.Widget,\n            Selectable = ui.Selectable,\n            template = kendo.template,\n            mobileOS = support.mobileOS,\n            ns = \".kendoMultiViewCalendar\",\n            CLICK = \"click\",\n            KEYDOWN = \"keydown\",\n            ID = \"id\",\n            MIN = \"min\",\n            MONTH = \"month\",\n            DOT = \".\",\n            CENTURY = \"century\",\n            DECADE = \"decade\",\n            CHANGE = \"change\",\n            NAVIGATE = \"navigate\",\n            VALUE = \"value\",\n            FOCUSED = \"k-state-focused\",\n            SELECTED = \"k-state-selected\",\n            MID = \"k-range-mid\",\n            SPLITEND = \"k-range-split-end\",\n            SPLITSTART = \"k-range-split-start\",\n            START = \"k-range-start\",\n            END = \"k-range-end\",\n            HOVER = \"k-state-hover\",\n            DISABLED = \"k-state-disabled\",\n            TODAY = \"k-nav-today\",\n            OTHERMONTH = \"k-other-month\",\n            OUTOFRANGE = \"k-out-of-range\",\n            CELLSELECTOR = \"td:has(.k-link):not(.\" + OUTOFRANGE + \")\",\n            CELLSELECTORVALID = \"td:has(.k-link):not(.\" + DISABLED + \"):not(.\" + OUTOFRANGE + \")\",\n            BLUR = \"blur\",\n            FOCUS = \"focus\",\n            MOUSEENTER = support.touch ? \"touchstart\" : \"mouseenter\",\n            MOUSELEAVE_NS = support.touch ? \"touchend\" + ns + \" touchmove\" + ns : \"mouseleave\" + ns,\n            PREVARROW = \"_prevArrow\",\n            NEXTARROW = \"_nextArrow\",\n            ARIA_SELECTED = \"aria-selected\",\n            INPUTSELECTOR = \"input,a,textarea,.k-multiselect-wrap,select,button,.k-button>span,.k-button>img,span.k-icon.k-i-arrow-60-down,span.k-icon.k-i-arrow-60-up\",\n            ARIA_DISABLED = \"aria-disabled\",\n            ARIA_LABEL = \"aria-label\",\n            DATE = Date,\n            views = {\n          month: 0,\n          year: 1,\n          decade: 2,\n          century: 3\n        };\n        var RangeSelectable = Widget.extend({\n          init: function (element, options) {\n            var that = this;\n            Widget.fn.init.call(that, element, options);\n            that.calendar = options.calendar;\n            that.userEvents = new kendo.UserEvents(that.element, {\n              global: true,\n              allowSelection: true,\n              filter: that.options.filter,\n              tap: that._tap.bind(that),\n              touchAction: \"none\"\n            });\n          },\n          events: [CHANGE],\n          options: {\n            name: \"RangeSelectable\",\n            filter: \">*\",\n            inputSelectors: INPUTSELECTOR,\n            multiple: false,\n            dragToSelect: true,\n            relatedTarget: $.noop\n          },\n          destroy: function () {\n            var that = this;\n            Widget.fn.destroy.call(that);\n            that.userEvents.destroy();\n            that.calendar = null;\n            that._lastActive = that.element = that.userEvents = that._start = that._end = null;\n          },\n          _allowSelection: function (target) {\n            if ($(target).is(this.options.inputSelectors)) {\n              this.userEvents.cancel();\n              return false;\n            }\n\n            return true;\n          },\n          start: function (element) {\n            if (element === undefined) {\n              return this._start;\n            }\n\n            element.addClass(START + \" \" + SELECTED);\n            this._start = element;\n          },\n          end: function (element) {\n            if (element === undefined) {\n              return this._start;\n            }\n\n            element.addClass(END + \" \" + SELECTED);\n            this._end = element;\n          },\n          mid: function (elements) {\n            var tables = this.element.find(\"table.k-month\");\n            elements.addClass(MID);\n            tables.each(function () {\n              var that = $(this);\n              var lastCell = that.find(CELLSELECTORVALID).last();\n              var firstCell = that.find(CELLSELECTORVALID).first();\n\n              if (lastCell.hasClass(MID)) {\n                lastCell.addClass(SPLITEND);\n              }\n\n              if (firstCell.hasClass(MID)) {\n                firstCell.addClass(SPLITSTART);\n              }\n            });\n          },\n          clear: function (clearVariables) {\n            this.element.find(CELLSELECTOR).removeClass(END + \" \" + SELECTED + \" \" + START + \" \" + MID + \" \" + SPLITEND + \" \" + SPLITSTART);\n\n            if (clearVariables) {\n              this._start = this._end = null;\n            }\n          },\n          selectFrom: function (start) {\n            var that = this;\n            var items;\n            var startIdx;\n            items = that.element.find(CELLSELECTOR);\n            startIdx = $.inArray($(start)[0], items);\n            that.clear();\n            that.start(start);\n            items = items.filter(function (index) {\n              return index > startIdx;\n            });\n            that.mid(items);\n          },\n          selectTo: function (end) {\n            var that = this;\n            var items;\n            var endIdx;\n            items = that.element.find(CELLSELECTOR);\n            endIdx = $.inArray($(end)[0], items);\n            that.clear();\n            items = items.filter(function (index) {\n              return index < endIdx;\n            });\n            that.mid(items);\n            that.end($(end));\n          },\n          range: function (start, end) {\n            var that = this;\n            var items;\n            var startIdx;\n            var endIdx;\n            var temp;\n\n            if (start === undefined) {\n              return {\n                start: that._start,\n                end: that._end\n              };\n            }\n\n            items = that.element.find(CELLSELECTOR);\n            startIdx = $.inArray($(start)[0], items);\n            endIdx = $.inArray($(end)[0], items);\n\n            if (endIdx == -1) {\n              endIdx = items.length;\n            }\n\n            if (startIdx > endIdx) {\n              temp = end;\n              end = start;\n              start = temp;\n              temp = startIdx;\n              startIdx = endIdx;\n              endIdx = temp;\n            }\n\n            that.clear();\n            start.addClass(START + \" \" + SELECTED);\n            that._start = start;\n            items = items.filter(function (index) {\n              return index > startIdx && index < endIdx;\n            });\n            that.mid(items);\n\n            if (end) {\n              that.end($(end));\n            } else {\n              that._useEnd = true;\n            }\n          },\n          change: function () {\n            this.trigger(CHANGE);\n          },\n          _clearFlags: function () {\n            this._useStart = this._useEnd = false;\n          },\n          _tap: function (e) {\n            var target = $(e.target),\n                range = this.calendar.selectRange() || {},\n                start = range.start,\n                end = range.end,\n                that = this,\n                currentDate = toDateObject($(target).find(\"a\")),\n                items,\n                startIdx,\n                endIdx;\n            that._lastActive = target;\n\n            if (!start || +start > +currentDate) {\n              that.clear(true);\n              that.start(target);\n\n              that._clearFlags();\n\n              that.trigger(CHANGE);\n              return;\n            }\n\n            if (start && !end) {\n              items = that.element.find(CELLSELECTOR);\n              startIdx = $.inArray($(that._start)[0], items);\n              endIdx = $.inArray($(target)[0], items);\n\n              if (start) {\n                that._useStart = true;\n              }\n\n              items = items.filter(function (index) {\n                return index > startIdx && index < endIdx;\n              });\n              that.mid(items);\n              that.end($(target));\n              that.trigger(CHANGE);\n\n              that._clearFlags();\n\n              return;\n            }\n\n            if (start && end) {\n              if (target.hasClass(MID)) {\n                if (!that._toggling) {\n                  that.range(target, that._end);\n                } else {\n                  that.range(that._start, target);\n                }\n\n                that._toggling = !that._toggling;\n                that.trigger(CHANGE);\n\n                that._clearFlags();\n\n                return;\n              }\n\n              that._toggling = false;\n              that._end = null;\n              that.clear();\n              that.start(target);\n              that.trigger(CHANGE);\n\n              that._clearFlags();\n            }\n          }\n        });\n        var MultiViewCalendar = Widget.extend({\n          init: function (element, options) {\n            var that = this;\n            var id;\n            var culture;\n            Widget.fn.init.call(that, element, options);\n            element = that.wrapper = that.element;\n            options = that.options;\n            that.options.disableDates = calendar.disabled(that.options.disableDates);\n            culture = kendo.getCulture(options.culture);\n            options.format = kendo._extractFormat(options.format || culture.calendars.standard.patterns.d);\n\n            that._templates();\n\n            that._header();\n\n            that._wrapper();\n\n            id = element.addClass(\"k-widget k-calendar k-calendar-range\" + (options.weekNumber ? \" k-week-number\" : \"\")).on(KEYDOWN + ns, \"table.k-content\", that._move.bind(that)).on(BLUR + ns, \"table\", that._blur.bind(that)).on(CLICK + ns, CELLSELECTORVALID, function (e) {\n              var link = e.currentTarget.firstChild;\n\n              if (link.href.indexOf(\"#\") != -1) {\n                e.preventDefault();\n              }\n\n              that._click($(link));\n            }).on(MOUSEENTER + ns, CELLSELECTORVALID, that._mouseEnter.bind(that)).on(MOUSELEAVE_NS, CELLSELECTORVALID, function () {\n              $(this).removeClass(HOVER);\n            }).attr(ID);\n\n            if (id) {\n              that._cellID = id + \"_cell_selected\";\n            }\n\n            that._calendarWidth = that.element.width();\n            that._range = options.range;\n\n            that._initViews({\n              viewName: options.start,\n              value: options.value\n            });\n\n            that._selectable();\n\n            that._footer(that.footer);\n\n            that._selectDates = [];\n            that.value(options.value);\n\n            if (options.selectable == \"multiple\") {\n              that._selectDates = options.selectDates.length ? options.selectDates : that._selectDates;\n\n              that._restoreSelection();\n            }\n\n            if (options.selectable == \"range\") {\n              that.selectRange(that._range);\n            }\n\n            kendo.notify(that);\n          },\n          options: {\n            name: \"MultiViewCalendar\",\n            value: null,\n            min: new DATE(1900, 0, 1),\n            max: new DATE(2099, 11, 31),\n            dates: [],\n            disableDates: null,\n            culture: \"\",\n            footer: \"\",\n            format: \"\",\n            month: {},\n            range: {\n              start: null,\n              end: null\n            },\n            weekNumber: false,\n            views: 2,\n            showViewHeader: false,\n            selectable: \"single\",\n            selectDates: [],\n            start: MONTH,\n            depth: MONTH,\n            messages: {\n              weekColumnHeader: \"\"\n            }\n          },\n          events: [CHANGE, NAVIGATE],\n          setOptions: function (options) {\n            var that = this;\n            calendar.normalize(options);\n            options.disableDates = calendar.disabled(options.disableDates);\n            Widget.fn.setOptions.call(that, options);\n\n            that._selectable();\n\n            that._templates();\n\n            that._footer(that.footer);\n\n            for (var i = 0; i < that._views.length; i++) {\n              that._views[i].off(ns).remove();\n            }\n\n            that._initViews({\n              viewName: options.start,\n              value: options.value\n            });\n\n            that._range = options.range || {\n              start: null,\n              end: null\n            };\n\n            that._restoreSelection();\n          },\n          destroy: function () {\n            var that = this;\n            that._cell = null;\n            that._currentView = null;\n            that._current = null;\n\n            if (that._views) {\n              for (var i = 0; i < that._views.length; i++) {\n                that._views[i].off(ns).remove();\n              }\n            }\n\n            that.element.off(ns);\n\n            if (that.header) {\n              that.header.off(ns);\n              that._title = null;\n              that.header = null;\n            }\n\n            if (that.selectable) {\n              that.selectable.destroy();\n              that.selectable = null;\n            }\n\n            if (that.rangeSelectable) {\n              that.rangeSelectable.destroy();\n              that.rangeSelectable = null;\n            }\n\n            if (that._today) {\n              kendo.destroy(that._today.off(ns));\n            }\n\n            that._views = null;\n            Widget.fn.destroy.call(that);\n          },\n          current: function () {\n            return this._current;\n          },\n          focus: function () {\n            var table;\n\n            if (this._cell) {\n              this._cell.closest(\"table\").trigger(\"focus\");\n            } else if (this._current && this._dateInViews(this._current)) {\n              this._cell = this._cellByDate(this._current);\n\n              this._cell.closest(\"table\").trigger(\"focus\");\n            } else {\n              table = this.element.find(\"table\").first().trigger(\"focus\");\n              this._cell = table.find(CELLSELECTORVALID).first();\n              this._current = toDateObject(this._cell.find(\"a\"));\n            }\n\n            this._cell.addClass(FOCUSED);\n          },\n          min: function (value) {\n            return this._option(MIN, value);\n          },\n          max: function (value) {\n            return this._option(\"max\", value);\n          },\n          view: function () {\n            return this._currentView;\n          },\n          navigateToPast: function () {\n            this._navigate(PREVARROW, -1);\n          },\n          navigateToFuture: function () {\n            this._navigate(NEXTARROW, 1);\n          },\n          navigateUp: function () {\n            var that = this,\n                index = that._index;\n\n            if (that._title.hasClass(DISABLED)) {\n              return;\n            }\n\n            that.navigate(that._current, ++index);\n          },\n          navigateDown: function (value) {\n            var that = this,\n                index = that._index,\n                depth = that.options.depth;\n\n            if (!value) {\n              return;\n            }\n\n            if (index === views[depth]) {\n              if (!isEqualDate(that._value, that._current) || !isEqualDate(that._value, value)) {\n                that.value(value);\n                that.trigger(CHANGE);\n              }\n\n              return;\n            }\n\n            that.navigate(value, --index);\n          },\n          navigate: function (value, view) {\n            view = isNaN(view) ? calendar.views[calendar.viewsEnum[view]] : calendar.views[view];\n            var that = this;\n            var options = that.options;\n            var min = options.min;\n            var max = options.max;\n\n            if (!value) {\n              that._current = value = new DATE(+calendar.restrictValue(value, min, max));\n            } else {\n              that._current = value;\n            }\n\n            if (view === undefined) {\n              view = that._currentView;\n            }\n\n            that._currentView = view;\n\n            for (var i = 0; i < that._views.length; i++) {\n              that._views[i].off(ns).remove();\n            }\n\n            that._initViews({\n              viewName: view.name,\n              value: value\n            });\n\n            that._restoreSelection();\n          },\n          _updateHeader: function () {\n            var that = this;\n            var view = that._currentView;\n            var title = that._title;\n            var value = that._firstViewValue;\n            var options = that.options;\n\n            var visibleRange = that._visibleRange();\n\n            var culture = options.culture;\n            var min = options.min;\n            var max = options.max;\n            var lastDate;\n            var disabled;\n            var prevDisabled;\n            var nextDisabled;\n\n            if (view.name === DECADE || view.name === CENTURY) {\n              lastDate = shiftDate(value, view.name, options.views - 1);\n\n              if (!isInRange(lastDate, min, max)) {\n                lastDate = max;\n              }\n\n              title.html(view.first(value).getFullYear() + \" - \" + view.last(lastDate).getFullYear());\n            } else {\n              title.html(view.title(value, min, max, culture) + \" - \" + view.title(shiftDate(value, view.name, options.views - 1), min, max, culture));\n            }\n\n            disabled = view.name === CENTURY;\n            title.toggleClass(DISABLED, disabled).attr(ARIA_DISABLED, disabled);\n            prevDisabled = view.compare(visibleRange.start, that.options.min) < 1;\n            nextDisabled = view.compare(visibleRange.end, that.options.max) > -1;\n\n            if (prevDisabled && nextDisabled) {\n              if (that._navContainer) {\n                that._navContainer.remove();\n\n                that._navContainer = null;\n              }\n            } else {\n              if (!that._navContainer) {\n                that._navContainer = $('<span class=\"k-calendar-nav k-hstack\">' + '<a href=\"#\" role=\"button\" class=\"k-button k-button-md k-rounded-md k-button-flat k-button-flat-base k-icon-button k-prev-view\" ' + ARIA_LABEL + '=\"Previous\"><span class=\"k-button-icon k-icon k-i-arrow-60-left\"></span></a>' + '<a href=\"#\" role=\"button\" class=\"k-button k-button-md k-rounded-md k-button-flat k-button-flat-base k-icon-button k-next-view\" ' + ARIA_LABEL + '=\"Next\"><span class=\"k-button-icon k-icon k-i-arrow-60-right\"></span></a>' + '</span>').appendTo(that.header);\n                that[PREVARROW] = that._navContainer.find(\".k-prev-view\");\n                that[NEXTARROW] = that._navContainer.find(\".k-next-view\");\n              }\n\n              that[PREVARROW].toggleClass(DISABLED, prevDisabled).attr(ARIA_DISABLED, prevDisabled);\n\n              if (that[PREVARROW].hasClass(DISABLED)) {\n                that[PREVARROW].removeClass(HOVER);\n              }\n\n              that[NEXTARROW].toggleClass(DISABLED, nextDisabled).attr(ARIA_DISABLED, nextDisabled);\n\n              if (that[NEXTARROW].hasClass(DISABLED)) {\n                that[NEXTARROW].removeClass(HOVER);\n              }\n            }\n          },\n          _mouseEnter: function (e) {\n            var that = this;\n            var cell = $(e.currentTarget);\n            var range;\n            var items;\n            var startIdx;\n            var endIdx;\n            cell.addClass(HOVER);\n\n            if (that.rangeSelectable && that._currentView.name === \"month\") {\n              range = that.selectRange();\n\n              if (range.start && !range.end) {\n                if (that._dateInViews(that.selectRange().start)) {\n                  items = that.element.find(that.rangeSelectable.options.filter);\n                  startIdx = $.inArray($(that.rangeSelectable._start)[0], items);\n                  endIdx = $.inArray($(cell)[0], items);\n\n                  if (startIdx > endIdx) {\n                    return;\n                  }\n\n                  that.rangeSelectable.range(that.rangeSelectable._start, cell);\n                } else if (+toDateObject(that.element.find(CELLSELECTOR).first().find(\"a\")) > +range.start) {\n                  that.rangeSelectable.selectTo(cell);\n                }\n\n                that.rangeSelectable._end = null;\n              }\n            }\n          },\n          _move: function (e, preventFocus) {\n            var that = this;\n            var options = that.options;\n            var key = e.keyCode;\n            var index = that._index;\n            var min = options.min;\n            var max = options.max;\n            var focusedCell = that.element.find(DOT + FOCUSED);\n            var table = focusedCell.closest(\"table\");\n            var currentValue = new DATE(+(that._current || toDateObject(focusedCell.find(\"a\"))));\n            var isRtl = kendo.support.isRtl(that.wrapper);\n            var navigate = false;\n            var value, prevent, method, cell, lastActive, cellIndex;\n\n            if (key == keys.RIGHT && !isRtl || key == keys.LEFT && isRtl) {\n              value = 1;\n              prevent = true;\n            } else if (key == keys.LEFT && !isRtl || key == keys.RIGHT && isRtl) {\n              value = -1;\n              prevent = true;\n            } else if (key == keys.UP) {\n              value = index === 0 ? -7 : -4;\n              prevent = true;\n            } else if (key == keys.DOWN) {\n              value = index === 0 ? 7 : 4;\n              prevent = true;\n            } else if (key == keys.SPACEBAR) {\n              value = 0;\n              prevent = true;\n            } else if (key == keys.HOME) {\n              prevent = true;\n              cell = table.find(CELLSELECTORVALID).eq(0);\n\n              if (cell.hasClass(FOCUSED)) {\n                table = table.prev();\n\n                if (table.length) {\n                  that._focusCell(table.find(CELLSELECTORVALID).eq(0));\n                } else {\n                  navigate = that[PREVARROW] && !that[PREVARROW].hasClass(DISABLED);\n\n                  that._navigate(PREVARROW, -1, preventFocus);\n\n                  that._focusCell(that.element.find(\"table\").first().find(CELLSELECTORVALID).first());\n                }\n              } else {\n                that._focusCell(cell);\n              }\n            } else if (key == keys.END) {\n              prevent = true;\n              cell = table.find(CELLSELECTORVALID).last();\n\n              if (cell.hasClass(FOCUSED)) {\n                table = table.next();\n\n                if (table.length) {\n                  that._focusCell(table.find(CELLSELECTORVALID).last());\n                } else {\n                  navigate = that[NEXTARROW] && !that[NEXTARROW].hasClass(DISABLED);\n\n                  that._navigate(NEXTARROW, 1, preventFocus);\n\n                  that._focusCell(that.element.find(\"table\").last().find(CELLSELECTORVALID).last());\n                }\n              } else {\n                that._focusCell(cell);\n              }\n            }\n\n            if (e.ctrlKey || e.metaKey) {\n              if (key == keys.RIGHT && !isRtl || key == keys.LEFT && isRtl) {\n                navigate = that[NEXTARROW] && !that[NEXTARROW].hasClass(DISABLED);\n\n                that._navigate(NEXTARROW, 1, preventFocus);\n\n                prevent = true;\n              } else if (key == keys.LEFT && !isRtl || key == keys.RIGHT && isRtl) {\n                navigate = that[PREVARROW] && !that[PREVARROW].hasClass(DISABLED);\n\n                that._navigate(PREVARROW, -1, preventFocus);\n\n                prevent = true;\n              } else if (key == keys.UP) {\n                navigate = !that._title.hasClass(DISABLED);\n                that.navigateUp();\n\n                that._focusCell(that._cellByDate(that._current), !preventFocus);\n\n                prevent = true;\n              } else if (key == keys.DOWN) {\n                if (that._currentView.name === \"month\") {\n                  that.value(currentValue);\n                } else {\n                  that.navigateDown(currentValue);\n\n                  that._focusCell(that._cellByDate(that._current), !preventFocus);\n\n                  navigate = true;\n                }\n\n                prevent = true;\n              } else if (key == keys.ENTER || key == keys.SPACEBAR) {\n                if (options.selectable === \"multiple\") {\n                  that._toggleSelection(e);\n                }\n              }\n            } else if (e.shiftKey && options.selectable !== \"single\") {\n              if (value !== undefined || method) {\n                if (!method) {\n                  that._currentView.setDate(currentValue, value);\n                }\n\n                if (that._currentView.name !== \"month\") {\n                  return;\n                }\n\n                if (options.disableDates(currentValue)) {\n                  currentValue = that._nextNavigatable(currentValue, value);\n                }\n\n                min = createDate(min.getFullYear(), min.getMonth(), min.getDate());\n\n                if (isInRange(currentValue, min, max)) {\n                  if (!that._dateInViews(currentValue)) {\n                    if (value > 0) {\n                      navigate = that[NEXTARROW] && !that[NEXTARROW].hasClass(DISABLED);\n\n                      that._navigate(NEXTARROW, 1, preventFocus);\n                    } else {\n                      navigate = that[PREVARROW] && !that[PREVARROW].hasClass(DISABLED);\n\n                      that._navigate(PREVARROW, -1, preventFocus);\n                    }\n                  }\n\n                  cell = that._cellByDate(currentValue);\n                  that._current = currentValue;\n\n                  if (that.selectable) {\n                    that._selectRange(toDateObject((that.selectable._lastActive || focusedCell).find(\"a\")), currentValue);\n\n                    if (!that.selectable._lastActive) {\n                      that.selectable._lastActive = focusedCell;\n                    }\n\n                    that.trigger(CHANGE);\n\n                    that._focusCell(cell);\n                  }\n\n                  if (that.rangeSelectable) {\n                    lastActive = toDateObject((that.rangeSelectable._lastActive || focusedCell).find(\"a\"));\n\n                    if (!that._dateInViews(lastActive)) {\n                      if (+lastActive > +currentValue) {\n                        that.rangeSelectable._end = that.rangeSelectable._lastActive;\n                        that.rangeSelectable.selectFrom(cell);\n                      } else {\n                        that.rangeSelectable.selectTo(cell);\n                      }\n                    } else {\n                      if (that.rangeSelectable._end && that.rangeSelectable._end.is(DOT + FOCUSED)) {\n                        that.rangeSelectable._lastActive = that.rangeSelectable._start;\n                      } else {\n                        that.rangeSelectable._lastActive = that._cellByDate(lastActive);\n                      }\n\n                      that.rangeSelectable.range(that.rangeSelectable._lastActive, cell);\n                    }\n\n                    that.rangeSelectable.change();\n\n                    that._focusCell(cell);\n                  }\n                }\n              }\n            } else {\n              if (key == keys.ENTER || key == keys.SPACEBAR) {\n                if (that._currentView.name === \"month\") {\n                  if (that.selectable) {\n                    that.selectable._lastActive = that._cellByDate(currentValue);\n                  }\n\n                  that.value(currentValue);\n\n                  if (that.rangeSelectable) {\n                    that.rangeSelectable.change();\n                  }\n                } else {\n                  that._click($(that._cell[0].firstChild), preventFocus);\n                }\n\n                prevent = true;\n              } else if (key == keys.PAGEUP || key == keys.PAGEDOWN) {\n                prevent = true;\n                cellIndex = table.find(CELLSELECTORVALID).index(focusedCell);\n                table = key == keys.PAGEUP ? table.prev() : table.next();\n\n                if (!table.length) {\n                  if (key == keys.PAGEUP) {\n                    navigate = that[PREVARROW] && !that[PREVARROW].hasClass(DISABLED);\n                    that.navigateToPast();\n                    table = that.element.find(\"table\").first();\n                  } else {\n                    navigate = that[NEXTARROW] && !that[NEXTARROW].hasClass(DISABLED);\n                    that.navigateToFuture();\n                    table = that.element.find(\"table\").last();\n                  }\n                }\n\n                cell = table.find(CELLSELECTORVALID).eq(cellIndex);\n\n                if (cell.length) {\n                  that._focusCell(cell);\n                } else {\n                  that._focusCell(table.find(CELLSELECTORVALID).last());\n                }\n              }\n\n              if (value || method) {\n                if (!method) {\n                  that._currentView.setDate(currentValue, value);\n                }\n\n                min = createDate(min.getFullYear(), min.getMonth(), min.getDate());\n\n                if (isInRange(currentValue, min, max)) {\n                  if (that.selectable && options.disableDates(currentValue)) {\n                    currentValue = that._nextNavigatable(currentValue, value);\n                  }\n\n                  if (!that._dateInViews(currentValue)) {\n                    if (value > 0) {\n                      navigate = that[NEXTARROW] && !that[NEXTARROW].hasClass(DISABLED);\n\n                      that._navigate(NEXTARROW, 1, preventFocus);\n                    } else {\n                      navigate = that[PREVARROW] && !that[PREVARROW].hasClass(DISABLED);\n\n                      that._navigate(NEXTARROW, -1, preventFocus);\n                    }\n                  }\n\n                  cell = that._cellByDate(currentValue);\n                  that._current = currentValue;\n\n                  that._focusCell(cell, !preventFocus);\n                }\n              }\n            }\n\n            if (navigate) {\n              that.trigger(NAVIGATE);\n            }\n\n            if (prevent) {\n              e.preventDefault();\n            }\n\n            return that._current;\n          },\n          _visualizeSelectedDatesInView: function () {\n            var that = this;\n            var selectedDates = {};\n            var cells;\n            $.each(that._selectDates, function (index, value) {\n              selectedDates[kendo.calendar.views[0].toDateString(value)] = value;\n            });\n            that.selectable.clear();\n            cells = that.element.find(\"table\").find(CELLSELECTOR).filter(function (index, element) {\n              return selectedDates[$(element.firstChild).attr(kendo.attr(VALUE))];\n            });\n\n            if (cells.length > 0) {\n              that.selectable._selectElement(cells, true);\n            }\n          },\n          _nextNavigatable: function (currentValue, value) {\n            var that = this;\n            var disabled = true;\n            var view = that._currentView;\n            var min = that.options.min;\n            var max = that.options.max;\n            var isDisabled = that.options.disableDates;\n            var navigatableDate = new Date(currentValue.getTime());\n            view.setDate(navigatableDate, -value);\n\n            while (disabled) {\n              view.setDate(currentValue, value);\n\n              if (!isInRange(currentValue, min, max)) {\n                currentValue = navigatableDate;\n                break;\n              }\n\n              disabled = isDisabled(currentValue);\n            }\n\n            return currentValue;\n          },\n          _toggleSelection: function (event) {\n            var that = this;\n            that.selectable._lastActive = $(that._cell[0]);\n\n            if ($(that._cell[0]).hasClass(SELECTED)) {\n              that.selectable._unselect($(that._cell[0]));\n\n              that.selectable.trigger(CHANGE, {\n                event: event\n              });\n            } else {\n              that.selectable.value($(that._cell[0]), {\n                event: event\n              });\n            }\n          },\n          _option: function (option, value) {\n            var that = this;\n            var options = that.options;\n            var currentValue = that._value || that._current;\n            var isBigger;\n\n            if (value === undefined) {\n              return options[option];\n            }\n\n            value = kendo.parseDate(value, options.format, options.culture);\n\n            if (!value) {\n              return;\n            }\n\n            options[option] = new DATE(+value);\n\n            if (option === MIN) {\n              isBigger = value > currentValue;\n            } else {\n              isBigger = currentValue > value;\n            }\n\n            if (isBigger) {\n              that._value = null;\n            }\n\n            that.navigate(that._value);\n\n            that._toggle();\n          },\n          _cellByDate: function (value) {\n            if (value instanceof Date) {\n              value = this._currentView.toDateString(value);\n            }\n\n            return this.element.find(\"table\").find(\"td:not(.\" + OTHERMONTH + \")\").filter(function () {\n              return $(this.firstChild).attr(kendo.attr(VALUE)) === value;\n            });\n          },\n          _selectable: function () {\n            var that = this;\n            var selectable = that.options.selectable;\n\n            if (that.selectable) {\n              that.selectable.destroy();\n              that.selectable = null;\n            }\n\n            if (that.rangeSelectable) {\n              that.rangeSelectable.destroy();\n              that.rangeSelectable = null;\n            }\n\n            if (selectable.toLowerCase() === \"range\") {\n              that.rangeSelectable = new RangeSelectable(that.wrapper, {\n                calendar: that,\n                filter: \"table.k-month \" + CELLSELECTORVALID,\n                change: that._rangeSelection.bind(that)\n              });\n            } else {\n              that.selectable = new Selectable(that.wrapper, {\n                aria: true,\n                dragToSelect: false,\n                inputSelectors: \"input,textarea,.k-multiselect-wrap,select,button,.k-button>span,.k-button>img,span.k-icon.k-i-arrow-60-down,span.k-icon.k-i-arrow-60-up\",\n                multiple: Selectable.parseOptions(selectable).multiple,\n                filter: \"table.k-content \" + CELLSELECTORVALID,\n                change: that._selection.bind(that),\n                relatedTarget: that._onRelatedTarget.bind(that),\n                unselect: that._unselecting.bind(that)\n              });\n            }\n          },\n          _onRelatedTarget: function (target) {\n            var that = this;\n\n            if (that.selectable.options.multiple && target.is(CELLSELECTORVALID) && target.length > 1) {\n              that._focusCell(target.first(), true);\n            }\n          },\n          _getFirstViewDate: function (currentView) {\n            var that = this;\n            var options = that.options;\n            var ranges = [];\n            var start;\n            var end;\n            var current = new Date(+that._current);\n            var i;\n\n            for (i = 0; i < options.views; i++) {\n              start = currentView.first(current);\n              end = currentView.last(current);\n\n              if (+end > +options.max) {\n                if (+start <= +options.max) {\n                  ranges.push({\n                    start: start,\n                    end: new Date(+options.max)\n                  });\n                }\n\n                break;\n              }\n\n              ranges.push({\n                start: start,\n                end: end\n              });\n              current = new Date(+shiftDate(end, currentView.name, 1));\n            }\n\n            current = new Date(+that._current);\n\n            for (i = 0; i < options.views; i++) {\n              start = currentView.first(current);\n              end = currentView.last(current);\n\n              if (+start < +options.min) {\n                if (+end >= +options.min) {\n                  ranges.push({\n                    start: new Date(+options.min),\n                    end: end\n                  });\n                }\n\n                break;\n              }\n\n              ranges.push({\n                start: start,\n                end: end\n              });\n              current = new Date(+shiftDate(start, currentView.name, -1));\n            }\n\n            start = ranges[0].start;\n\n            for (i = 0; i < options.views + 1; i++) {\n              if (!ranges[i]) {\n                break;\n              }\n\n              if (+start > +ranges[i].start) {\n                start = ranges[i].start;\n              }\n            }\n\n            return new Date(+start);\n          },\n          _canRenderNextView: function (viewDate) {\n            var fullYear = viewDate.getFullYear();\n            var month = viewDate.getMonth();\n            var date = viewDate.getDate();\n            var max = this.options.max;\n            var maxYear = max.getFullYear();\n            var maxMonth = max.getMonth();\n\n            if (fullYear < maxYear) {\n              return true;\n            }\n\n            if (fullYear === maxYear && month < maxMonth) {\n              return true;\n            }\n\n            if (fullYear === maxYear && month === maxMonth && date < max.getDate()) {\n              return true;\n            }\n\n            if (fullYear === maxYear && month === maxMonth && date === max.getDate()) {\n              return true;\n            }\n\n            return false;\n          },\n          _initViews: function (viewOptions) {\n            var that = this;\n            var options = that.options;\n            var index = calendar.viewsEnum[viewOptions.viewName];\n            var currentView = calendar.views[index];\n            var viewDate;\n            that._current = new DATE(+calendar.restrictValue(viewOptions.value, options.min, options.max));\n            that._views = [];\n            that._index = index;\n            viewDate = that._getFirstViewDate(currentView);\n            viewDate.setDate(1);\n            that._firstViewValue = new Date(+viewDate);\n\n            for (var i = 0; i < options.views; i++) {\n              viewDate = i ? shiftDate(viewDate, currentView.name, 1) : viewDate;\n              viewDate.setDate(1);\n\n              if (!that._canRenderNextView(viewDate)) {\n                break;\n              }\n\n              that._table = $(currentView.content($.extend({\n                min: options.min,\n                max: options.max,\n                date: viewDate,\n                url: options.url,\n                dates: options.dates,\n                format: options.format,\n                culture: options.culture,\n                disableDates: options.disableDates,\n                showHeader: options.showViewHeader,\n                isWeekColumnVisible: options.weekNumber,\n                otherMonth: options.otherMonth,\n                messages: options.messages,\n                contentClasses: \"k-content\"\n              }, that[currentView.name])));\n\n              that._table.appendTo(that.tablesWrapper).addClass(\"k-\" + currentView.name);\n\n              that._views.push(that._table);\n            } // that.wrapper.width(visibleViews * that._calendarWidth);\n\n\n            that._currentView = currentView;\n            that.tablesWrapper.attr(\"class\", \"k-calendar-view k-calendar-\" + currentView.name + \"view k-hstack k-align-items-start k-justify-content-center\");\n\n            that._updateHeader();\n          },\n          _rangeSelection: function (e) {\n            var that = this;\n            var range = e.sender.range();\n            var useEnd = e.sender._useEnd;\n            var useStart = e.sender._useStart;\n            var initialRange = that.selectRange() || {};\n            var start;\n            var end;\n\n            if (range.start) {\n              start = toDateObject(range.start.find(\"a\"));\n            }\n\n            if (range.end) {\n              end = toDateObject(range.end.find(\"a\"));\n            }\n\n            that._range = {\n              start: useStart ? initialRange.start : start,\n              end: useEnd ? initialRange.end : end\n            };\n\n            if (!that._preventChange) {\n              that.trigger(CHANGE);\n            }\n          },\n          _selection: function (e) {\n            var that = this;\n            var selectElements = e.sender.value();\n            var domEvent = e.event;\n            var currentTarget = $(domEvent && domEvent.currentTarget);\n            var isCell = currentTarget.is(\"td\");\n            var currentValue;\n\n            if (that.options.selectable === \"single\") {\n              that._validateValue(selectElements[0] ? toDateObject(selectElements.first().find(\"a\")) : e.sender._lastActive ? toDateObject(e.sender._lastActive.find(\"a\")) : that.value());\n            }\n\n            if (that.options.selectable == \"multiple\") {\n              if (isCell) {\n                currentValue = toDateObject(currentTarget.find(\"a\"));\n              }\n\n              if (domEvent && domEvent.ctrlKey) {\n                if (isCell) {\n                  if (currentTarget.hasClass(SELECTED)) {\n                    that._selectDates.push(currentValue);\n                  } else {\n                    that._deselect(currentValue);\n                  }\n                } else {\n                  that.element.find(\"table \" + CELLSELECTORVALID).each(function (index, element) {\n                    var value = toDateObject($(element).find(\"a\"));\n\n                    that._deselect(value);\n                  });\n\n                  that._addSelectedCellsToArray();\n                }\n              } else if (domEvent && domEvent.shiftKey) {\n                that._selectRange(toDateObject(e.sender._lastActive ? e.sender._lastActive.find(\"a\") : selectElements.first().find(\"a\")), currentValue);\n              } else if (isCell) {\n                that._selectDates = [];\n\n                that._selectDates.push(currentValue);\n              } else {\n                that._selectDates = [];\n\n                that._addSelectedCellsToArray();\n              }\n            }\n\n            if (!that._preventChange) {\n              that.trigger(CHANGE);\n            }\n          },\n          _addSelectedCellsToArray: function () {\n            var that = this;\n            that.selectable.value().each(function (index, item) {\n              var date = toDateObject($(item.firstChild));\n\n              if (!that.options.disableDates(date)) {\n                that._selectDates.push(date);\n              }\n            });\n          },\n          _deselect: function (date) {\n            var that = this;\n\n            var currentDateIndex = that._selectDates.map(Number).indexOf(+date);\n\n            if (currentDateIndex != -1) {\n              that._selectDates.splice(currentDateIndex, 1);\n            }\n          },\n          _unselecting: function (e) {\n            var that = this;\n            var element = e.element;\n\n            if (that.options.selectable === \"single\" && !mobileOS && element.hasClass(FOCUSED)) {\n              e.preventDefault();\n            }\n          },\n          _visibleRange: function () {\n            var tables = this.element.find(\".k-calendar-view table\");\n            var firstDateInView = toDateObject(tables.first().find(CELLSELECTOR).first().find(\"a\"));\n            var lastDateInView = toDateObject(tables.last().find(CELLSELECTOR).last().find(\"a\"));\n            return {\n              start: firstDateInView,\n              end: lastDateInView\n            };\n          },\n          _dateInViews: function (date) {\n            var that = this;\n            var tables = that.element.find(\".k-calendar-view table\");\n            var firstDateInView = toDateObject(tables.first().find(CELLSELECTOR).first().find(\"a\"));\n            var lastDateInView = toDateObject(tables.last().find(CELLSELECTOR).last().find(\"a\"));\n            date = new Date(date.toDateString());\n            return +date <= +lastDateInView && +date >= +firstDateInView;\n          },\n          _fillRange: function (start, end) {\n            var that = this;\n            var daysDifference;\n            that._selectDates = [];\n            daysDifference = daysBetweenTwoDates(start, end);\n            addDaysToArray(that._selectDates, daysDifference, start, that.options.disableDates);\n          },\n          _selectRange: function (start, end) {\n            var that = this;\n            var current;\n\n            if (+end < +start) {\n              current = end;\n              end = start;\n              start = current;\n            }\n\n            that._fillRange(start, end);\n\n            that._visualizeSelectedDatesInView();\n          },\n          _header: function () {\n            var that = this;\n            var element = that.element;\n            var buttons;\n            var header = element.find(\".k-calendar-header\");\n\n            if (!header.length) {\n              header = $('<div class=\"k-calendar-header k-hstack\">' + '<a href=\"#\" role=\"button\" class=\"k-calendar-title k-title k-button k-button-md k-rounded-md k-button-flat k-button-flat-base\" aria-live=\"assertive\" aria-atomic=\"true\"></a>' + '<span class=\"k-spacer\"></span>' + '<span class=\"k-calendar-nav k-hstack\">' + '<a href=\"#\" role=\"button\" class=\"k-button k-button-md k-rounded-md k-button-flat k-button-flat-base k-icon-button k-prev-view\" ' + ARIA_LABEL + '=\"Previous\"><span class=\"k-button-icon k-icon k-i-arrow-60-left\"></span></a>' + '<a href=\"#\" role=\"button\" class=\"k-button k-button-md k-rounded-md k-button-flat k-button-flat-base k-icon-button k-next-view\" ' + ARIA_LABEL + '=\"Next\"><span class=\"k-button-icon k-icon k-i-arrow-60-right\"></span></a>' + '</span>' + '</div>').prependTo(element);\n            }\n\n            that.header = header;\n            header.on(MOUSEENTER + ns + \" \" + MOUSELEAVE_NS + \" \" + FOCUS + ns + \" \" + BLUR + ns, \".k-button\", mousetoggle).on(\"click\", function () {\n              return false;\n            }).on(CLICK + ns, \".k-button.k-calendar-title\", function () {\n              that.navigateUp();\n\n              that._focusCell(that._cellByDate(that._current), true);\n\n              that.trigger(NAVIGATE);\n            }).on(CLICK + ns, \".k-button.k-prev-view\", function (e) {\n              e.preventDefault();\n              that.navigateToPast();\n              that.trigger(NAVIGATE);\n            }).on(CLICK + ns, \".k-button.k-next-view\", function (e) {\n              e.preventDefault();\n              that.navigateToFuture();\n              that.trigger(NAVIGATE);\n            });\n            buttons = header.find(\".k-button\");\n            that._title = buttons.filter(\".k-calendar-title\");\n            that._navContainer = header.find(\".k-calendar-nav\");\n            that[PREVARROW] = buttons.filter(\".k-prev-view\");\n            that[NEXTARROW] = buttons.filter(\".k-next-view\");\n          },\n          _wrapper: function () {\n            this.tablesWrapper = $('<div class=\"k-calendar-view\" />').insertAfter(this.element[0].firstChild);\n          },\n          _templates: function () {\n            var that = this;\n            var options = that.options;\n            var month = options.month;\n            var content = month.content;\n            var weekNumber = month.weekNumber;\n            var empty = month.empty;\n            that.month = {\n              content: template('<td class=\"#=data.cssClass#\" role=\"gridcell\"><a tabindex=\"-1\" class=\"k-link#=data.linkClass#\" href=\"#=data.url#\" ' + kendo.attr(VALUE) + '=\"#=data.dateString#\" title=\"#=data.title#\">' + (content || \"#=data.value#\") + '</a></td>', {\n                useWithBlock: !!content\n              }),\n              empty: template('<td role=\"gridcell\"' + (empty ? '>' : ' class=\"k-calendar-td k-out-of-range\">') + (empty || \"<a class='k-link'></a>\") + \"</td>\", {\n                useWithBlock: !!empty\n              }),\n              weekNumber: template('<td class=\"k-calenar-td k-alt\">' + (weekNumber || \"#= data.weekNumber #\") + \"</td>\", {\n                useWithBlock: !!weekNumber\n              })\n            };\n          },\n          _footer: function () {\n            var that = this;\n            var options = that.options;\n            var template = options.footer !== false ? kendo.template(that.options.footer || '#= kendo.toString(data,\"D\",\"' + options.culture + '\") #', {\n              useWithBlock: false\n            }) : null;\n            var today = getToday();\n            var element = that.element;\n            var footer = element.find(\".k-footer\");\n\n            if (!template) {\n              that._toggle(false);\n\n              footer.hide();\n              return;\n            }\n\n            if (!footer[0]) {\n              footer = $('<div class=\"k-footer\"><a href=\"#\" class=\"k-link k-nav-today\"></a></div>').appendTo(element);\n            }\n\n            that._today = footer.show().find(\".k-link\").html(template(today)).attr(\"title\", kendo.toString(today, \"D\", that.options.culture));\n\n            that._toggle();\n          },\n          _navigate: function (arrow, modifier, preventFocus) {\n            var that = this;\n            var index = that._index + 1;\n            var currentValue = new DATE(+that._current);\n            var originaValue = new DATE(+that._current);\n            var offset;\n            arrow = that[arrow];\n            offset = that._cellByDate(currentValue).closest(\"table\").index();\n\n            if (modifier > 0) {\n              offset = 1 - offset;\n            } else {\n              offset = offset + 1;\n            }\n\n            if (!arrow || !arrow.hasClass(DISABLED)) {\n              if (index > 3) {\n                currentValue.setFullYear(currentValue.getFullYear() + 100 * (modifier * offset));\n              } else {\n                calendar.views[index].setDate(currentValue, modifier * offset);\n              }\n\n              that.navigate(currentValue);\n\n              if (that._dateInViews(originaValue)) {\n                that._focusCell(that._cellByDate(originaValue), !preventFocus);\n\n                that._current = originaValue;\n              } else {\n                if (index > 3) {\n                  originaValue.setFullYear(originaValue.getFullYear() + 100 * modifier);\n                } else {\n                  calendar.views[index].setDate(originaValue, modifier);\n                }\n\n                that._focusCell(that._cellByDate(originaValue), !preventFocus);\n\n                that._current = originaValue;\n              }\n            }\n          },\n          _toggle: function (toggle) {\n            var that = this;\n            var options = that.options;\n            var isTodayDisabled = options.selectable !== \"range\" && that.options.disableDates(getToday());\n            var link = that._today;\n\n            if (toggle === undefined) {\n              toggle = isInRange(getToday(), options.min, options.max);\n            }\n\n            if (link) {\n              link.off(CLICK + ns);\n\n              if (toggle && !isTodayDisabled) {\n                link.addClass(TODAY).removeClass(DISABLED).on(CLICK + ns, that._todayClick.bind(that));\n              } else {\n                link.removeClass(TODAY).addClass(DISABLED).on(CLICK + ns, function prevent(e) {\n                  e.preventDefault();\n                });\n              }\n            }\n          },\n          _click: function (link, preventFocus) {\n            var that = this;\n            var options = that.options;\n            var currentValue = new Date(+that._current);\n            var value = toDateObject(link);\n            kendo.date.adjustDST(value, 0);\n\n            that._currentView.setDate(currentValue, value);\n\n            that._current = value;\n\n            if (that._currentView.name !== options.depth) {\n              that.navigateDown(calendar.restrictValue(currentValue, options.min, options.max));\n\n              that._focusCell(that._cellByDate(that._current), !preventFocus);\n\n              that.trigger(NAVIGATE);\n            } else {\n              that._focusCell(link.closest(\"td\"), !preventFocus);\n            }\n          },\n          _blur: function () {\n            var that = this;\n\n            if (that._cell) {\n              that._cell.removeClass(FOCUSED);\n            }\n          },\n          _focus: function (e) {\n            var that = this;\n            var table = $(e.currentTarget);\n            var cell = that._cell;\n\n            if (!cell || !$.contains(table[0], cell[0])) {\n              cell = table.find(CELLSELECTORVALID).first();\n            }\n\n            that._focusCell(cell);\n          },\n          _focusCell: function (cell, focusTable) {\n            var that = this;\n            var cellId = that._cellID;\n            var table = cell.closest(\"table\");\n\n            if (that._cell && that._cell.length) {\n              that._cell[0].removeAttribute(ARIA_SELECTED);\n\n              that._cell[0].removeAttribute(ARIA_LABEL);\n\n              that._cell.removeClass(FOCUSED);\n\n              that._cell[0].removeAttribute(ID);\n\n              that._cell.closest(\"table\")[0].removeAttribute(\"aria-activedescendant\");\n            }\n\n            that._cell = cell;\n\n            if (focusTable) {\n              table.trigger(\"focus\");\n            }\n\n            if (cellId) {\n              cell.attr(ID, cellId);\n              table.attr(\"aria-activedescendant\", cellId);\n            }\n\n            cell.attr(ARIA_SELECTED, true).addClass(FOCUSED);\n\n            if (cell.length && that._currentView.name == \"month\") {\n              that._current = toDateObject(cell.find(\"a\"));\n            }\n          },\n          _todayClick: function (e) {\n            var that = this;\n            var disabled = that.options.disableDates;\n            var today = getToday();\n            var navigate = false;\n            e.preventDefault();\n\n            if (disabled(today)) {\n              return;\n            }\n\n            that._value = today;\n\n            if (that.options.selectable === \"multiple\") {\n              that._selectDates = [today];\n            }\n\n            if (that.options.selectable === \"range\") {\n              that.rangeSelectable.clear(true);\n              that._range = {\n                start: today,\n                end: null\n              };\n            }\n\n            if (that._currentView.name != \"month\" || !that._dateInViews(today)) {\n              navigate = true;\n            }\n\n            that.navigate(today, that.options.depth);\n\n            if (that.options.selectable === \"single\") {\n              that.selectable._lastActive = null;\n            }\n\n            if (navigate) {\n              that.trigger(NAVIGATE);\n            }\n\n            that.trigger(CHANGE);\n          },\n          _validateValue: function (value) {\n            var that = this;\n            var options = that.options;\n            var min = options.min;\n            var max = options.max;\n            value = kendo.parseDate(value, options.format, options.culture);\n\n            if (value !== null) {\n              value = new DATE(+value);\n\n              if (!isInRange(value, min, max)) {\n                value = null;\n              }\n            }\n\n            if (value === null || !that.options.disableDates(new Date(+value))) {\n              that._value = value;\n            } else if (that._value === undefined) {\n              that._value = null;\n            }\n\n            return that._value;\n          },\n          _updateAria: function (ariaTemplate, date) {\n            var that = this;\n\n            var cell = that._cellByDate(date || that.current());\n\n            var valueType = that.view().valueType();\n            var current = date || that.current();\n            var text;\n\n            that._focusCell(cell);\n\n            if (valueType === \"month\") {\n              text = kendo.toString(current, \"MMMM\");\n            } else if (valueType === \"date\") {\n              text = kendo.toString(current, \"D\");\n            } else {\n              text = cell.text();\n            }\n\n            cell.attr(\"aria-label\", ariaTemplate({\n              current: current,\n              valueType: valueType,\n              text: text\n            }));\n            return cell.attr(\"id\");\n          },\n          clearSelection: function () {\n            var that = this;\n\n            if (that.selectable) {\n              that.element.find(DOT + SELECTED).removeClass(SELECTED);\n            }\n\n            if (that.rangeSelectable) {\n              that.rangeSelectable.clear(true);\n            }\n          },\n          _restoreSelection: function () {\n            var that = this;\n            var range;\n            var selectable = that.options.selectable;\n\n            if (that._currentView.name !== that.options.depth) {\n              return;\n            }\n\n            that._preventChange = true;\n\n            if (selectable === \"range\") {\n              range = that.selectRange();\n\n              if (!range || !range.start) {\n                that._preventChange = false;\n                return;\n              }\n\n              that.selectRange(range);\n            }\n\n            if (selectable === \"single\" && that.value()) {\n              that.selectable.value(that._cellByDate(that.value()));\n            }\n\n            if (selectable === \"multiple\") {\n              that._visualizeSelectedDatesInView();\n            }\n\n            that._preventChange = false;\n          },\n          value: function (value) {\n            var that = this;\n            var cell;\n\n            if (value === undefined) {\n              return that._value;\n            }\n\n            value = that._validateValue(value);\n            that.clearSelection();\n\n            if (value && !that._dateInViews(value)) {\n              that.navigate(value);\n            }\n\n            if (value !== null && that._currentView.name === MONTH) {\n              cell = that._cellByDate(value);\n\n              if (that.selectable) {\n                that.selectable.value(cell);\n              }\n\n              if (that.rangeSelectable) {\n                that.rangeSelectable.start(cell);\n                that.rangeSelectable._lastActive = cell;\n              }\n            }\n          },\n          selectDates: function (dates) {\n            var that = this;\n            var validSelectedDates;\n            var datesUnique;\n\n            if (dates === undefined) {\n              return that._selectDates;\n            }\n\n            datesUnique = dates.map(function (date) {\n              return date.getTime();\n            }).filter(function (date, position, array) {\n              return array.indexOf(date) === position;\n            }).map(function (time) {\n              return new Date(time);\n            });\n            validSelectedDates = $.grep(datesUnique, function (value) {\n              if (value) {\n                return +that._validateValue(new Date(value.setHours(0, 0, 0, 0))) === +value;\n              }\n            });\n            that._selectDates = validSelectedDates.length > 0 ? validSelectedDates : datesUnique.length === 0 ? datesUnique : that._selectDates;\n\n            that._visualizeSelectedDatesInView();\n          },\n          selectRange: function (range) {\n            var that = this;\n            var startInRange;\n            var endInRange;\n            var visibleRange;\n\n            if (range === undefined) {\n              return that._range;\n            }\n\n            that._range = range;\n\n            if (!range.start) {\n              return;\n            }\n\n            visibleRange = that._visibleRange();\n            startInRange = that._dateInViews(range.start);\n            endInRange = range.end && that._dateInViews(range.end);\n\n            if (!startInRange && endInRange) {\n              that.rangeSelectable.selectTo(that._cellByDate(range.end));\n            }\n\n            if (startInRange && endInRange) {\n              that.rangeSelectable.range(that._cellByDate(range.start), that._cellByDate(range.end));\n            }\n\n            if (range.end && startInRange && !endInRange) {\n              that.rangeSelectable.selectFrom(that._cellByDate(range.start));\n            }\n\n            if (!range.end && startInRange) {\n              that.rangeSelectable.start(that._cellByDate(range.start));\n            }\n\n            if (+visibleRange.start > +range.start && +visibleRange.end < +range.end) {\n              that.rangeSelectable.mid(that.element.find(CELLSELECTORVALID));\n            }\n          }\n        });\n        kendo.ui.plugin(MultiViewCalendar);\n\n        function mousetoggle(e) {\n          var disabled = $(this).hasClass(\"k-state-disabled\");\n\n          if (!disabled) {\n            $(this).toggleClass(HOVER, MOUSEENTER.indexOf(e.type) > -1 || e.type == FOCUS);\n          }\n        }\n\n        function addDaysToArray(array, numberOfDays, fromDate, disableDates) {\n          for (var i = 0; i <= numberOfDays; i++) {\n            var nextDay = new Date(fromDate.getTime());\n            nextDay = new Date(nextDay.setDate(nextDay.getDate() + i));\n\n            if (!disableDates(nextDay)) {\n              array.push(nextDay);\n            }\n          }\n        }\n\n        function daysBetweenTwoDates(startDate, endDate) {\n          if (+endDate < +startDate) {\n            var temp = +startDate;\n            calendar.views[0].setDate(startDate, endDate);\n            calendar.views[0].setDate(endDate, new Date(temp));\n          }\n\n          var fromDateUTC = Date.UTC(startDate.getFullYear(), startDate.getMonth(), startDate.getDate());\n          var endDateUTC = Date.UTC(endDate.getFullYear(), endDate.getMonth(), endDate.getDate());\n          return Math.ceil((+endDateUTC - +fromDateUTC) / kendo.date.MS_PER_DAY);\n        }\n\n        function shiftDate(value, dimension, numberOfViews) {\n          var current;\n\n          if (dimension === \"month\") {\n            current = new DATE(value.getFullYear(), value.getMonth() + numberOfViews, value.getDate());\n            current.setFullYear(value.getFullYear());\n\n            if (Math.abs(current.getMonth() - value.getMonth()) > numberOfViews || numberOfViews > 10) {\n              current.setMonth(value.getMonth() + numberOfViews);\n              current = calendar.views[0].last(current);\n            }\n\n            return current;\n          } else if (dimension === \"year\") {\n            current = new DATE(1, value.getMonth(), value.getDate());\n            current.setFullYear(value.getFullYear() + numberOfViews);\n\n            if (Math.abs(current.getFullYear() - value.getFullYear()) > numberOfViews) {\n              current = new DATE(1, value.getMonth(), 1);\n              current.setFullYear(value.getFullYear() + numberOfViews);\n              current = calendar.views[1].last(current);\n            }\n\n            return current;\n          } else if (dimension === \"decade\") {\n            current = new DATE(1, value.getMonth(), value.getDate());\n            current.setFullYear(value.getFullYear() + 10 * numberOfViews);\n\n            if (Math.abs(current.getFullYear() - value.getFullYear()) > 10 * numberOfViews) {\n              current = new DATE(1, value.getMonth(), 1);\n              current.setFullYear(value.getFullYear() + 10 * numberOfViews);\n              current = calendar.views[2].last(current);\n            }\n\n            return current;\n          } else if (dimension === \"century\") {\n            current = new DATE(1, value.getMonth(), value.getDate());\n            current.setFullYear(value.getFullYear() + 100 * numberOfViews);\n\n            if (Math.abs(current.getFullYear() - value.getFullYear()) > 100 * numberOfViews) {\n              current = new DATE(1, value.getMonth(), 1);\n              current.setFullYear(value.getFullYear() + 100 * numberOfViews);\n              current = calendar.views[3].last(current);\n            }\n\n            return current;\n          }\n        }\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}