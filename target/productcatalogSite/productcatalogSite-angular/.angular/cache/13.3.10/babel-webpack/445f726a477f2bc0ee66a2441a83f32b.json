{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(918);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  918:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(919)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function ($) {\n        var kendo = window.kendo;\n        var Widget = kendo.ui.Widget;\n        var dataviz = kendo.dataviz;\n        var LinearGauge = dataviz.LinearGauge;\n        var RadialGauge = dataviz.RadialGauge;\n        var ArcGauge = dataviz.ArcGauge;\n        var CircularGauge = dataviz.CircularGauge;\n        var draw = kendo.drawing;\n\n        function themeOptions(options) {\n          var themes = dataviz.ui.themes || {};\n          var themeName = options.theme || \"\";\n          var lowerName = themeName.toLowerCase();\n\n          if (dataviz.SASS_THEMES.indexOf(lowerName) != -1) {\n            return dataviz.autoTheme().gauge;\n          }\n\n          return (themes[themeName] || themes[lowerName] || {}).gauge;\n        }\n\n        var Gauge = Widget.extend({\n          init: function (element, userOptions) {\n            kendo.destroy(element);\n            $(element).empty();\n            Widget.fn.init.call(this, element);\n            this.options = kendo.deepExtend(this.options, userOptions);\n            this.wrapper = this.element;\n\n            this._createInstance();\n\n            this.element.addClass('k-gauge');\n            kendo.notify(this, dataviz.ui);\n          },\n          options: {\n            theme: \"default\",\n            renderAs: \"\",\n            pointer: {},\n            scale: {},\n            gaugeArea: {\n              background: \"\"\n            },\n            transitions: true\n          },\n          setOptions: function (options) {\n            this._instance.setOptions(options, themeOptions(options));\n\n            this._copyFields();\n          },\n          redraw: function () {\n            this._instance.redraw();\n\n            this._copyFields();\n          },\n          destroy: function () {\n            Widget.fn.destroy.call(this);\n\n            this._instance.destroy();\n          },\n          _createInstance: function () {\n            var gaugeType = this._gaugeType();\n\n            this._instance = new gaugeType(this.element[0], this.options, themeOptions(this.options));\n\n            this._copyFields();\n          },\n          _copyFields: function () {\n            this._originalOptions = this._instance._originalOptions;\n            this.options = this._instance.options;\n            this.surface = this._instance.surface;\n            this.bbox = this._instance.bbox;\n            this.gaugeArea = this._instance.gaugeArea;\n            this.pointers = this._instance.pointers;\n            this.scale = this._instance.scale;\n          },\n          _resize: function () {\n            this._instance.resize();\n          }\n        });\n        var proxyMembers = [\"getSize\", \"value\", \"allValues\", \"exportVisual\"];\n\n        function createProxyMember(name) {\n          Gauge.fn[name] = function () {\n            return this._instance[name].apply(this._instance, arguments);\n          };\n        }\n\n        for (var idx = 0; idx < proxyMembers.length; idx++) {\n          createProxyMember(proxyMembers[idx]);\n        }\n\n        dataviz.ExportMixin.extend(Gauge.fn);\n        var RadialGaugeWidget = Gauge.extend({\n          options: {\n            name: \"RadialGauge\"\n          },\n          _gaugeType: function () {\n            return RadialGauge;\n          }\n        });\n        var LinearGaugeWidget = Gauge.extend({\n          options: {\n            name: \"LinearGauge\",\n            scale: {\n              vertical: true\n            }\n          },\n          _gaugeType: function () {\n            return LinearGauge;\n          }\n        });\n        var ArcGaugeWidget = Gauge.extend({\n          init: function (element, userOptions) {\n            Gauge.fn.init.call(this, element, userOptions);\n            this.element.css('position', 'relative');\n            this.element.addClass('k-arcgauge');\n\n            this._centerTemplate();\n          },\n          options: {\n            name: \"ArcGauge\"\n          },\n          setOptions: function (options) {\n            Gauge.fn.setOptions.call(this, options);\n\n            this._centerTemplate();\n          },\n          redraw: function () {\n            Gauge.fn.redraw.call(this);\n\n            this._centerTemplate();\n          },\n          value: function (value) {\n            var instance = this._instance;\n\n            if (arguments.length === 0) {\n              return instance.value();\n            }\n\n            instance.value(value);\n\n            this._centerTemplate();\n          },\n          destroy: function () {\n            Gauge.fn.destroy.call(this);\n            delete this._centerElement;\n          },\n          exportVisual: function () {\n            if (this._centerElement) {\n              return false;\n            }\n\n            return Gauge.fn.exportVisual.call(this);\n          },\n          _resize: function () {\n            this._instance.resize();\n\n            this._centerTemplate();\n          },\n          _centerTemplate: function () {\n            if (this.options.centerTemplate) {\n              var template = kendo.template(this.options.centerTemplate);\n              var instance = this._instance;\n\n              var centerElement = this._getCenterElement();\n\n              centerElement.html(template({\n                color: instance.currentColor(),\n                value: instance.value()\n              }));\n              var position = instance.centerLabelPosition(centerElement.width(), centerElement.height());\n              centerElement.css(position);\n            } else if (this._centerElement) {\n              this._centerElement.remove();\n\n              this._centerElement = null;\n            }\n          },\n          _getCenterElement: function () {\n            var centerElement = this._centerElement;\n\n            if (!centerElement) {\n              centerElement = this._centerElement = $('<div></div>').addClass('k-arcgauge-label');\n              this.element.append(centerElement);\n            }\n\n            return centerElement;\n          },\n          _gaugeType: function () {\n            return ArcGauge;\n          }\n        });\n        var CircularGaugeWidget = ArcGaugeWidget.extend({\n          options: {\n            name: \"CircularGauge\"\n          },\n          _gaugeType: function () {\n            return CircularGauge;\n          }\n        });\n\n        function createExportMethod(name) {\n          ArcGaugeWidget.fn[name] = function (options) {\n            var gauge = this;\n            var method = draw[name];\n\n            if (!gauge._centerElement) {\n              return method(gauge.exportVisual(), options);\n            }\n\n            return draw.drawDOM(gauge.element).then(function (visual) {\n              return method(visual, options);\n            });\n          };\n        }\n\n        var exportMethods = ['exportSVG', 'exportImage', 'exportPDF'];\n\n        for (idx = 0; idx < exportMethods.length; idx++) {\n          createExportMethod(exportMethods[idx]);\n        }\n\n        dataviz.ui.plugin(LinearGaugeWidget);\n        dataviz.ui.plugin(RadialGaugeWidget);\n        dataviz.ui.plugin(ArcGaugeWidget);\n        dataviz.ui.plugin(CircularGaugeWidget);\n        kendo.deepExtend(dataviz, {\n          Gauge: Gauge,\n          LinearGauge: LinearGaugeWidget,\n          RadialGauge: RadialGaugeWidget,\n          ArcGauge: ArcGaugeWidget,\n          CircularGauge: CircularGaugeWidget\n        });\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  919:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo-gauges\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}