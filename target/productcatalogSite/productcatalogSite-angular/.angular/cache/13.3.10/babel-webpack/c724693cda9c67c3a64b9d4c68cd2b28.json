{"ast":null,"code":"import { deepExtend, addClass, keys, setDefaultOptions } from '../common';\nimport { Observable } from './scroller/observable';\nimport { proxy, on, off, setDefaultEvents, convertToHtml } from './utils';\nconst PAN = \"pan\";\nconst directionsMap = {\n  up: {\n    className: \"k-navigator-n\",\n    iconClass: \"k-i-caret-alt-up\"\n  },\n  down: {\n    className: \"k-navigator-s\",\n    iconClass: \"k-i-caret-alt-down\"\n  },\n  right: {\n    className: \"k-navigator-e\",\n    iconClass: \"k-i-caret-alt-right\"\n  },\n  left: {\n    className: \"k-navigator-w\",\n    iconClass: \"k-i-caret-alt-left\"\n  }\n};\n\nfunction createButton(direction) {\n  const html = '<button class=\"k-button k-button-square k-rounded-full k-button-flat k-button-flat-base k-icon-button ' + directionsMap[direction].className + '\" aria-label=\"move ' + direction + '\">' + '<span class=\"k-icon ' + directionsMap[direction].iconClass + '\" />' + '</button>';\n  return convertToHtml(html);\n}\n\nexport class Navigator extends Observable {\n  constructor(element, options) {\n    super();\n    this.element = element;\n\n    this._initOptions(options);\n\n    const navigateUpButton = createButton(\"up\");\n    const navigateRightlButton = createButton(\"right\");\n    const navigateDownButton = createButton(\"down\");\n    const navigateLeftButton = createButton(\"left\");\n    this.element.appendChild(navigateUpButton);\n    this.element.appendChild(navigateRightlButton);\n    this.element.appendChild(navigateDownButton);\n    this.element.appendChild(navigateLeftButton);\n    addClass(this.element, 'k-widget k-navigator');\n    on(this.element, \"click\", \".k-button\", proxy(this._click, this));\n    let parentElement = this.element.parentNode.closest(\"[data-role]\");\n    this._keyroot = parentElement ? parentElement : this.element;\n\n    this._tabindex(this._keyroot);\n\n    this._keydownHandler = proxy(this._keydown, this);\n    on(this._keyroot, \"keydown\", this._keydownHandler);\n  }\n\n  destroy() {\n    this.dispose();\n  } // originates from the kendo.jquery version\n\n\n  dispose() {\n    off(this._keyroot, \"keydown\", this._keydownHandler);\n  }\n\n  _tabindex(target) {\n    const targetElement = target || this.wrapper || this.element;\n    let element = this.element,\n        TABINDEX = \"tabindex\",\n        tabindex = targetElement.getAttribute(TABINDEX) || element.getAttribute(TABINDEX);\n    element.removeAttribute(TABINDEX);\n    targetElement.setAttribute(TABINDEX, !isNaN(tabindex) ? tabindex : 0);\n  }\n\n  _initOptions(options) {\n    this.options = deepExtend({}, this.options, options);\n  }\n\n  _pan(x, y) {\n    let panStep = this.options.panStep;\n    this.trigger(PAN, {\n      x: x * panStep,\n      y: y * panStep\n    });\n  }\n\n  _click(e) {\n    let x = 0;\n    let y = 0;\n    let button = e.currentTarget;\n\n    if (button.matches('.k-navigator-n')) {\n      y = 1;\n    } else if (button.matches('.k-navigator-s')) {\n      y = -1;\n    } else if (button.matches('.k-navigator-e')) {\n      x = 1;\n    } else if (button.matches('.k-navigator-w')) {\n      x = -1;\n    }\n\n    this._pan(x, y);\n\n    e.preventDefault();\n  }\n  /* eslint-disable indent */\n\n\n  _keydown(e) {\n    switch (e.which) {\n      case keys.UP:\n        this._pan(0, 1);\n\n        e.preventDefault();\n        break;\n\n      case keys.DOWN:\n        this._pan(0, -1);\n\n        e.preventDefault();\n        break;\n\n      case keys.RIGHT:\n        this._pan(1, 0);\n\n        e.preventDefault();\n        break;\n\n      case keys.LEFT:\n        this._pan(-1, 0);\n\n        e.preventDefault();\n        break;\n\n      default:\n        break;\n    }\n  }\n  /* eslint-enable indent */\n\n\n}\nsetDefaultOptions(Navigator, {\n  name: 'Navigator',\n  panStep: 1\n});\nsetDefaultEvents(Navigator, [PAN]);","map":null,"metadata":{},"sourceType":"module"}