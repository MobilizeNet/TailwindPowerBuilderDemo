{"ast":null,"code":"import RadialScale from '../radial/radial-scale';\nimport { setDefaultOptions } from '../../common';\n\nclass ArcScale extends RadialScale {\n  rangeSegments() {\n    const {\n      min,\n      max,\n      rangePlaceholderColor,\n      rangeLineCap\n    } = this.options;\n    return [{\n      from: min,\n      to: max,\n      color: rangePlaceholderColor,\n      lineCap: rangeLineCap\n    }];\n  }\n\n  hasRanges() {\n    return true;\n  }\n\n  placeholderRangeAngle(angle) {\n    const geometry = this.ranges.children[0].geometry();\n\n    if (this.options.reverse) {\n      geometry.setEndAngle(angle);\n    } else {\n      geometry.setStartAngle(angle);\n    }\n  }\n\n  addRange(from, to, options) {\n    const reverse = this.options.reverse;\n    const startAngle = this.slotAngle(reverse ? to : from);\n    const endAngle = this.slotAngle(reverse ? from : to);\n    const range = this.createRange(startAngle, endAngle, this.getRangeRadius(), options);\n    this.ranges.append(range);\n    return range;\n  }\n\n}\n\nsetDefaultOptions(ArcScale, {\n  min: 0,\n  max: 100,\n  majorTicks: {\n    visible: false\n  },\n  minorTicks: {\n    visible: false\n  },\n  labels: {\n    visible: false\n  },\n  startAngle: 0,\n  endAngle: 180,\n  rangeLineCap: 'round'\n});\nexport default ArcScale;","map":null,"metadata":{},"sourceType":"module"}