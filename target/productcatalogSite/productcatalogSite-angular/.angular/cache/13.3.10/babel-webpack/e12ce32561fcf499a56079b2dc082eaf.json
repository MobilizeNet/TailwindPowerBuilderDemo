{"ast":null,"code":"import { Encoding } from './encoding';\nconst extend = Object.assign;\nexport class MsiBase extends Encoding {\n  initProperties() {\n    super.initProperties();\n    extend(this, {\n      characterMap: [\"12121212\", \"12121221\", \"12122112\", \"12122121\", \"12211212\", \"12211221\", \"12212112\", \"12212121\", \"21121212\", \"21121221\"],\n      START: \"21\",\n      STOP: \"121\",\n      checkSumType: \"\",\n      checkSums: checkSums\n    });\n  }\n\n  initValue(value, width) {\n    this.pattern = [];\n    this.value = value;\n    this.checkSumLength = 0;\n    this.width = width;\n  }\n\n  setBaseUnit() {\n    const startStopLength = 7;\n    this.baseUnit = this.width / (12 * (this.value.length + this.checkSumLength) + this.quietZoneLength + startStopLength);\n  }\n\n  addData() {\n    const value = this.value;\n    this.addPattern(this.START);\n\n    for (let i = 0; i < value.length; i++) {\n      this.addCharacter(value.charAt(i));\n    }\n\n    if (this.options.addCheckSum) {\n      this.addCheckSum();\n    }\n\n    this.addPattern(this.STOP);\n    this.setBaseUnit();\n  }\n\n  addCharacter(character) {\n    const pattern = this.characterMap[character];\n\n    if (!pattern) {\n      this.invalidCharacterError(character);\n    }\n\n    this.addPattern(pattern);\n  }\n\n  addPattern(pattern) {\n    for (let i = 0; i < pattern.length; i++) {\n      this.pattern.push(parseInt(pattern.charAt(i), 10));\n    }\n  }\n\n  addCheckSum() {\n    const checkSumFunction = this.checkSums[this.checkSumType];\n    const checkValues = checkSumFunction.call(this.checkSums, this.value);\n    this.checksum = checkValues.join(\"\");\n\n    for (let i = 0; i < checkValues.length; i++) {\n      this.checkSumLength++;\n      this.addPattern(this.characterMap[checkValues[i]]);\n    }\n  }\n\n}\nexport class MsiMod10 extends MsiBase {\n  initProperties() {\n    super.initProperties();\n    extend(this, {\n      name: \"MSI Modulo10\",\n      checkSumType: \"Modulo10\"\n    });\n  }\n\n}\nexport class MsiMod11 extends MsiBase {\n  initProperties() {\n    super.initProperties();\n    extend(this, {\n      name: \"MSI Modulo11\",\n      checkSumType: \"Modulo11\"\n    });\n  }\n\n}\nexport class MsiMod1010 extends MsiBase {\n  initProperties() {\n    super.initProperties();\n    extend(this, {\n      name: \"MSI Modulo10 Modulo10\",\n      checkSumType: \"Modulo10Modulo10\"\n    });\n  }\n\n}\nexport class MsiMod1110 extends MsiBase {\n  initProperties() {\n    super.initProperties();\n    extend(this, {\n      name: \"MSI Modulo11 Modulo10\",\n      checkSumType: \"Modulo11Modulo10\"\n    });\n  }\n\n}\nconst checkSums = {\n  Modulo10(value) {\n    let checkValues = [0, \"\"],\n        odd = value.length % 2,\n        idx,\n        evenSum,\n        oddSum;\n\n    for (idx = 0; idx < value.length; idx++) {\n      checkValues[(idx + odd) % 2] += parseInt(value.charAt(idx), 10);\n    }\n\n    oddSum = checkValues[0];\n    evenSum = (checkValues[1] * 2).toString();\n\n    for (idx = 0; idx < evenSum.length; idx++) {\n      oddSum += parseInt(evenSum.charAt(idx), 10);\n    }\n\n    return [(10 - oddSum % 10) % 10];\n  },\n\n  Modulo11(value) {\n    let weightedSum = 0,\n        mod = 11,\n        length = value.length,\n        weight,\n        checkValue;\n\n    for (let i = 0; i < length; i++) {\n      weight = ((length - i) % 6 || 6) + 1;\n      weightedSum += weight * value.charAt(i);\n    }\n\n    checkValue = (mod - weightedSum % mod) % mod;\n\n    if (checkValue !== 10) {\n      return [checkValue];\n    }\n\n    return [1, 0];\n  },\n\n  Modulo11Modulo10(value) {\n    let checkValues = this.Modulo11(value),\n        mod11Value;\n    mod11Value = value + checkValues[0];\n    return checkValues.concat(this.Modulo10(mod11Value));\n  },\n\n  Modulo10Modulo10(value) {\n    let checkValues = this.Modulo10(value),\n        mod10Value;\n    mod10Value = value + checkValues[0];\n    return checkValues.concat(this.Modulo10(mod10Value));\n  }\n\n};","map":null,"metadata":{},"sourceType":"module"}