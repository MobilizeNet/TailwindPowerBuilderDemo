{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { ActionModel, Dictionary, Inject } from '../Application';\nimport { Constants, Events, RequestType } from '../Contract';\nimport { RequestConfig } from '../Server';\nimport { ErrorCodes, ExceptionHandlerClass } from '../System/Aop';\nimport { Commands } from './Command';\nimport { WindowType } from './Command/WindowType';\n\nvar ViewManager = function () {\n  function ViewManager(inject) {\n    if (inject === void 0) {\n      inject = null;\n    }\n\n    this.inject = inject || Inject.Instance;\n    this.viewResolver = this.inject.resolve(Constants.ViewResolver);\n    this.views = new Dictionary();\n    this.pendingViews = new Dictionary();\n    this.commands = new Dictionary();\n    this.action = this.inject.resolve(Constants.Action);\n    this.modalFactory = this.inject.resolve(Constants.ModalFactory);\n    this.event = this.inject.resolve(Constants.EventAggregator);\n    this.initializeCommand();\n  }\n\n  ViewManager.prototype.createView = function (model, items, views) {\n    var _this = this;\n\n    if (items && views) {\n      this.viewResolver.resolve(model, function (view) {\n        views.push(view);\n\n        _this.viewCreated(view);\n\n        if (views.length === items.length) {\n          items.forEach(function (c) {\n            return views.filter(function (d) {\n              return d.model.UniqueID === c;\n            }).forEach(function (v) {\n              return _this.viewLoad(v, views);\n            });\n          });\n        }\n      });\n    } else {\n      this.viewResolver.resolve(model, function (view) {\n        return _this.viewCreated(view);\n      });\n    }\n  };\n\n  ViewManager.prototype.viewLoad = function (view, views) {\n    if (view.isPendingLoad(view, views)) {\n      this.pendingViews.add(view.model.UniqueID, view);\n    } else {\n      view.load();\n    }\n  };\n\n  ViewManager.prototype.removePendingView = function (viewId) {\n    var view = this.pendingViews.value(viewId);\n\n    if (view) {\n      this.pendingViews.remove(viewId);\n    }\n  };\n\n  ViewManager.prototype.getPendingViews = function () {\n    return this.pendingViews;\n  };\n\n  ViewManager.prototype.viewCreated = function (view) {\n    this.views.add(view.model.UniqueID, view);\n  };\n\n  ViewManager.prototype.deleteView = function (viewId) {\n    var view = this.views.value(viewId);\n\n    if (view) {\n      view.close();\n      this.views.remove(viewId);\n    }\n  };\n\n  ViewManager.prototype.setTopView = function (viewId) {\n    var view = this.views.value(viewId);\n\n    if (view) {\n      view.focus();\n    }\n  };\n\n  ViewManager.prototype.getView = function (model) {\n    var uniqueId = model.UniqueID;\n    return this.views.value(uniqueId);\n  };\n\n  ViewManager.prototype.removeViews = function (data) {\n    if (data.RemovedViews) {\n      for (var _i = 0, _a = data.RemovedViews; _i < _a.length; _i++) {\n        var removed = _a[_i];\n        this.deleteView(removed);\n      }\n    }\n  };\n\n  ViewManager.prototype.execute = function (command) {\n    if (this.commands.value(command.name)) {\n      this.commands.value(command.name)(command);\n    }\n  };\n\n  ViewManager.prototype.hasCommand = function (command) {\n    return command && this.commands && this.commands.containsKey(command.name);\n  };\n\n  ViewManager.prototype.registerCommand = function (name, fn) {\n    this.commands.add(name, fn);\n  };\n\n  ViewManager.prototype.registerModal = function (modal) {\n    this.modalFactory.register(modal);\n  };\n\n  ViewManager.prototype.init = function (views, models) {\n    this.models = models;\n    this.loadFirstViews(views);\n  };\n\n  ViewManager.prototype.loadFirstViews = function (views) {\n    if (views && views.LoadedViews) {\n      var orderViews = [];\n\n      for (var _i = 0, _a = views.LoadedViews; _i < _a.length; _i++) {\n        var current = _a[_i];\n        var model = this.models.getModel(current.UniqueID);\n\n        if (this.isModalView(current.UniqueID, views.ModalViews)) {\n          model.IsModalView = true;\n        }\n\n        this.createView(model, views.LoadedViews.map(function (c) {\n          return c.UniqueID;\n        }), orderViews);\n      }\n    }\n  };\n\n  ViewManager.prototype.loadDeltas = function (viewDeltas) {\n    this.removeViews(viewDeltas);\n    this.loadNewViews(viewDeltas.NewViews, viewDeltas.ModalViews);\n    this.setFocus(viewDeltas.CurrentFocusedControl);\n    this.setTopView(viewDeltas.NewTopView);\n  };\n\n  ViewManager.prototype.createViews = function (viewIds) {\n    throw new Error('WebMap 5 function not implemented in WebMap 4');\n  };\n\n  ViewManager.prototype.updateViews = function (viewIds) {\n    throw new Error('WebMap 5 function not implemented in WebMap 4');\n  };\n\n  ViewManager.prototype.startEditControlHandler = function (command) {\n    var control = this.models.getModel(command.myControlId);\n\n    if (control) {\n      control.startEditing = true;\n    }\n  };\n\n  ViewManager.prototype.initializeCommand = function () {\n    var _this = this;\n\n    this.registerCommand(Commands.CloseCommand, function (command) {\n      return _this.closeHandler(command);\n    });\n    this.registerCommand(Commands.ClientCloseCommand, function (command) {\n      return _this.clientCloseHandler(command);\n    });\n    this.registerCommand(Commands.SendCommand, function (command) {\n      return _this.sendHandler(command);\n    });\n    this.registerCommand(Commands.InputBoxActionCommand, function (command) {\n      return _this.inputBoxActionHandler(command);\n    });\n    this.registerCommand(Commands.ModalCommand, function (command) {\n      return _this.modalHandler(command);\n    });\n    this.registerCommand(Commands.ModalActionCommand, function (command) {\n      return _this.modalActionHandler(command);\n    });\n    this.registerCommand(Commands.ModalActionButtonCommand, function (command) {\n      return _this.modalActionButtonHandler(command);\n    });\n    this.registerCommand(Commands.KeyPressCommand, function (command) {\n      return _this.keyPressHandler(command);\n    });\n    this.registerCommand(Commands.PrintActionCommand, function (command) {\n      return _this.printActionHandler(command);\n    });\n    this.registerCommand(Commands.MessageBox, function (command) {\n      return _this.messageBoxHandler(command);\n    });\n    this.registerCommand(Commands.MsgBox, function (command) {\n      return _this.msgBoxHandler(command);\n    });\n    this.registerCommand(Commands.OpenView, function (command) {\n      return _this.openViewHandler(command);\n    });\n    this.registerCommand(Commands.CloseView, function (command) {\n      return _this.closeViewHandler(command);\n    });\n    this.registerCommand(Commands.InputBox, function (command) {\n      return _this.inputBoxHandler(command);\n    });\n    this.registerCommand(Commands.ChangeFocusControlCommand, function (command) {\n      return _this.changefocusControlHandler(command);\n    });\n    this.registerCommand(Commands.StartEditCommand, function (command) {\n      return _this.startEditControlHandler(command);\n    });\n    this.registerCommand(Commands.ChangeMenuCommand, function (command) {\n      return _this.changeMenuHandler(command);\n    });\n    this.registerCommand(Commands.ChangeMenuStateCommand, function (command) {\n      return _this.changeMenuStateHandler(command);\n    });\n    this.registerCommand(Commands.ChangeStatusCommand, function (command) {\n      return _this.changeStatusHandler(command);\n    });\n    this.registerCommand(Commands.FileExplorer, function (command) {\n      return _this.fileExplorerHandler(command);\n    });\n    this.registerCommand(Commands.FileExplorerInput, function (command) {\n      return _this.fileExplorerHandler(command);\n    });\n    this.registerCommand(Commands.RefreshApplicationMenu, function (command) {\n      return _this.refreshApplicationMenuHandler(command);\n    });\n    this.registerCommand(Commands.QuitCurrentApplication, function (command) {\n      return _this.quitCurrentApplication(command);\n    });\n    this.registerCommand(Commands.PrintScreenCommand, function (command) {\n      return _this.printScreenHandler(command);\n    });\n    this.registerCommand(Commands.ContextMenuCommand, function (command) {\n      return _this.contextMenuHandler(command);\n    });\n    this.registerCommand(Commands.DisposeWindowCommand, function (command) {\n      return _this.diposeWindowHandler(command);\n    });\n    this.registerCommand(Commands.SetTextToDataManagerCommand, function (command) {\n      return _this.setTextToDataManagerHandler(command);\n    });\n    this.registerCommand(Commands.CloseWindowByTimerCommand, function (command) {\n      return _this.closeWindowByTimerHandler(command);\n    });\n    this.registerCommand(Commands.ServerVersionCommand, function (command) {\n      return _this.registerVersion(command);\n    });\n    this.registerCommand(Commands.ArrangeWindowCommand, function (command) {\n      return _this.arrangeWindowHandler(command);\n    });\n    this.registerCommand(Commands.PopMenuCommand, function (command) {\n      return _this.popMenuHandler(command);\n    });\n    this.registerCommand(Commands.OpenExternalLinkCommand, function (command) {\n      return _this.openExternalLinkHandler(command);\n    });\n\n    if (this.onRegisterCommand) {\n      this.onRegisterCommand();\n    }\n  };\n\n  ViewManager.prototype.diposeWindowHandler = function (disposeWindow) {\n    var modelResolver = this.inject.resolve(Constants.ModelResolver);\n    modelResolver.resolveRemoved([disposeWindow.windowId]);\n    this.event.publish('disposeView', disposeWindow.windowId);\n  };\n\n  ViewManager.prototype.changeMenuStateHandler = function (command) {\n    var parent = this.models.getModel(command.parentWindow);\n    var toolBarVisible = command.toolBarVisible;\n    parent = parent.ParentWindow ? this.models.getModel(parent.ParentWindow) : parent;\n\n    if (parent.Menu) {\n      parent.toolbarVisibleInternal = toolBarVisible;\n    }\n  };\n\n  ViewManager.prototype.changeMenuHandler = function (command) {\n    var parent = this.models.getModel(command.parentWindow);\n    var menu = parent && !parent.Menu ? parent.MenuID : this.models.getModel(command.newMenuId);\n    var toolbarframetitle = command.toolBarFrameTitle;\n    var toolbarsheettitle = command.toolBarSheetTitle;\n\n    if (parent && menu) {\n      menu.ToolbarVisible = parent.ToolbarVisible;\n      menu.ToolBarFrameTitle = toolbarframetitle;\n      menu.ToolBarSheetTitle = toolbarsheettitle;\n\n      if (parent.WindowType === WindowType.mdi || parent.WindowType === WindowType.mdihelp || !parent.ParentWindow) {\n        parent.Menu = menu;\n      } else {\n        menu.isChild = true;\n        parent.ParentWindow.Menu = menu;\n      }\n\n      menu.Refresh = true;\n    }\n  };\n\n  ViewManager.prototype.setTextToDataManagerHandler = function (command) {\n    this.event.publish(Events.SetDMText, command);\n  };\n\n  ViewManager.prototype.arrangeWindowHandler = function (command) {\n    this.event.publish(Events.ArrangeWindow, command);\n  };\n\n  ViewManager.prototype.fileExplorerHandler = function (command) {\n    var modal = this.modalFactory.create(command.ModalName);\n    modal.show(command);\n  };\n\n  ViewManager.prototype.changeStatusHandler = function (command) {\n    var menu = this.models.getModel(command.MDIId);\n\n    if (menu) {\n      menu.MicroHelp = command.message;\n    }\n  };\n\n  ViewManager.prototype.setFocus = function (control) {\n    if (control) {\n      var model = this.models.search(control);\n\n      if (model) {\n        model.applyMethod('focus');\n      }\n    }\n  };\n\n  ViewManager.prototype.loadNewViews = function (newViews, modalViews) {\n    if (newViews) {\n      var orderViews = [];\n\n      for (var _i = 0, newViews_1 = newViews; _i < newViews_1.length; _i++) {\n        var item = newViews_1[_i];\n        var model = this.models.getModel(item);\n\n        if (this.isModalView(item, modalViews)) {\n          model.IsModalView = true;\n        }\n\n        this.createView(model, newViews, orderViews);\n      }\n    }\n  };\n\n  ViewManager.prototype.isModalView = function (viewId, modalViews) {\n    return modalViews && modalViews.indexOf(viewId) > -1;\n  };\n\n  ViewManager.prototype.inputBoxHandler = function (command) {\n    var modal = this.modalFactory.create(command.name);\n    modal.show(command);\n  };\n\n  ViewManager.prototype.messageBoxHandler = function (command) {\n    var modal = this.modalFactory.create('msg');\n    modal.show(command);\n  };\n\n  ViewManager.prototype.msgBoxHandler = function (command) {\n    var modal = this.modalFactory.create(command.name);\n    modal.show(command);\n  };\n\n  ViewManager.prototype.openViewHandler = function (command) {\n    var model = this.models.getModel(command.UniqueID);\n    this.createView(model);\n  };\n\n  ViewManager.prototype.closeViewHandler = function (command) {\n    this.deleteView(command.UniqueID);\n    this.models.deleteCascade(command.UniqueID);\n  };\n\n  ViewManager.prototype.closeHandler = function (command) {\n    this.action.send(new ActionModel(command.sender.name, command.action, command.sender.model));\n  };\n\n  ViewManager.prototype.clientCloseHandler = function (command) {\n    this.action.send(new ActionModel(command.controller, command.action, undefined, command.args));\n  };\n\n  ViewManager.prototype.sendHandler = function (command) {\n    this.action.send(new ActionModel(command.sender.name, command.action, command.sender.model, command.args, command.callback, null, command.highPriority));\n  };\n\n  ViewManager.prototype.modalHandler = function (command) {\n    var modal = this.modalFactory.create(command.modalName());\n\n    if (modal) {\n      modal.show(command.parameters());\n    }\n  };\n\n  ViewManager.prototype.printActionHandler = function (command) {\n    this.sendPrintActionHandler(command);\n  };\n\n  ViewManager.prototype.sendPrintActionHandler = function (command) {\n    this.action.send(new ActionModel(command.controller, command.action, null, {\n      dialogResult: command.dialogResult,\n      parameters: command.args\n    }, undefined, new RequestConfig(RequestType.RawRequest)));\n  };\n\n  ViewManager.prototype.modalActionHandler = function (command) {\n    this.sendActionHandler(command, 'ResumeOperation');\n  };\n\n  ViewManager.prototype.modalActionButtonHandler = function (command) {\n    this.sendActionButtonHandler(command, 'ResumeOperation');\n  };\n\n  ViewManager.prototype.inputBoxActionHandler = function (command) {\n    this.sendActionHandler(command, 'WebMapViewManager');\n  };\n\n  ViewManager.prototype.changefocusControlHandler = function (command) {\n    var control = this.models.getModel(command.myControlId);\n\n    if (this.lastFocusedControl) {\n      this.lastFocusedControl.isFocused = false;\n    }\n\n    if (control) {\n      this.lastFocusedControl = control;\n      control.isFocused = true;\n    }\n  };\n\n  ViewManager.prototype.refreshApplicationMenuHandler = function (command) {\n    var menu = this.models.getModel(command.menuId);\n\n    if (menu) {\n      menu.Refresh = true;\n    }\n  };\n\n  ViewManager.prototype.sendActionHandler = function (command, controller) {\n    this.action.send(new ActionModel(controller, 'ResumePendingOperation', null, {\n      dialogResult: command.dialogResult,\n      requestedInput: command.requestedInput\n    }, undefined, new RequestConfig(RequestType.RawRequest)));\n  };\n\n  ViewManager.prototype.sendActionButtonHandler = function (command, controller) {\n    this.action.send(new ActionModel(controller, 'ResumePendingOperation', null, {\n      buttons: command.buttons\n    }, undefined, new RequestConfig(RequestType.RawRequest)));\n  };\n\n  ViewManager.prototype.keyPressHandler = function (command) {\n    this.action.send(new ActionModel(command.sender.name, command.action, command.sender.model, new Array({\n      keyCode: command.key\n    })));\n  };\n\n  ViewManager.prototype.quitCurrentApplication = function (command) {\n    this.event.publish(Events.ApplicationRestart);\n  };\n\n  ViewManager.prototype.printScreenHandler = function (command) {\n    window.print();\n  };\n\n  ViewManager.prototype.contextMenuHandler = function (command) {\n    var subMenu = this.models.getModel(command.subMenu);\n    var window = this.models.getModel(command.window);\n\n    if (subMenu && window) {\n      subMenu.Refresh = true;\n      window.ContextMenu = subMenu;\n    }\n  };\n\n  ViewManager.prototype.openExternalLinkHandler = function (command) {\n    window.open(command.path, '_blank');\n  };\n\n  ViewManager.prototype.closeWindowByTimerHandler = function (command) {\n    var model = this.models.getModel(command.windowId);\n    model.closeByTime = command.miliSeconds;\n  };\n\n  ViewManager.prototype.popMenuHandler = function (command) {\n    var model = this.models.getModel(command.windowId);\n\n    if (model) {\n      model.popMenu = command.subMenuId;\n    }\n  };\n\n  ViewManager.prototype.registerVersion = function (command) {\n    var version = window.app.version;\n    version.dcpVersion = command.dcpVersion;\n    version.coreVersion = command.coreVersion;\n  };\n\n  ViewManager = __decorate([ExceptionHandlerClass(ErrorCodes.ClientCore), __metadata(\"design:paramtypes\", [Object])], ViewManager);\n  return ViewManager;\n}();\n\nexport { ViewManager }; //# sourceMappingURL=data:application/json;base64,","map":null,"metadata":{},"sourceType":"module"}