{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1423);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1417:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.scheduler.view\");\n    /***/\n  },\n\n  /***/\n  1423:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1417)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"scheduler.agendaview\",\n        name: \"Scheduler Agenda View\",\n        category: \"web\",\n        description: \"The Scheduler Agenda View\",\n        depends: [\"scheduler.view\"],\n        hidden: true\n      };\n\n      (function ($) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            NS = \".kendoAgendaView\",\n            ROLE = \"role\";\n        var EVENT_WRAPPER_FORMAT = '<div class=\"k-task\" title=\"#:(data.title || \"\").replace(/\"/g,\"\\'\")#\" data-#=kendo.ns#uid=\"#=uid#\">' + '# if (resources[0]) {#' + '<span class=\"k-scheduler-mark\" style=\"background-color:#=resources[0].color#\"></span>' + \"# } #\" + \"# if (data.isException()) { #\" + '<span class=\"k-icon k-i-non-recurrence\"></span>' + '# } else if (data.isRecurring()) {#' + '<span class=\"k-icon k-i-reload\"></span>' + \"# } #\" + '<span class=\"k-scheduler-task-text\">{0}</span>' + '#if (showDelete) {#' + '<a href=\"\\\\#\" class=\"k-link k-event-delete\" title=\"${data.messages.destroy}\" aria-label=\"${data.messages.destroy}\"><span class=\"k-icon k-i-close\"></span></a>' + '#}#' + '</div>';\n        var EVENT_DATE_TEMPLATE = \"# if (!isMobile) { #\" + '<strong class=\"k-scheduler-agendaday\">' + '#=kendo.toString(date, \"dd\")#' + '</strong>' + '<em class=\"k-scheduler-agendaweek\">' + '#=kendo.toString(date,\"dddd\")#' + '</em>' + '<span class=\"k-scheduler-agendadate\">' + '#=kendo.toString(date, \"y\")#' + '</span>' + '# } else { #' + '<div class=\"k-scheduler-datecolumn-wrap\">' + '<span class=\"k-mobile-scheduler-agendadate\">' + '<span class=\"k-mobile-scheduler-agendaday\">#=kendo.toString(date, \"dd\")#</span>' + '&nbsp' + '<span class=\"k-mobile-scheduler-agendamonth\">#=kendo.toString(date, \"MMMM\")#</span>' + '</span>' + '<span class=\"k-mobile-scheduler-agendaweekday\">' + '#=kendo.toString(date, \"dddd\")#' + '</span>' + '</div>' + '# } #';\n        var EVENT_GROUP_TEMPLATE = \"# if (!isMobile) { #\" + '<strong class=\"k-scheduler-adgendagroup\">' + '#=value#' + '</strong>' + '# } else { #' + '<span class=\"k-scheduler-group-text\">' + '#=value#' + '</span>' + '# } #';\n        var AgendaGroupedView = kendo.Class.extend({\n          init: function (view) {\n            this._view = view;\n          },\n          _getColumns: function (groupHeaders, columns) {\n            return groupHeaders.concat(columns);\n          },\n          _getGroupsInDay: function () {\n            return [];\n          },\n          _getSumOfItemsForDate: function () {\n            return 0;\n          },\n          _renderTaskGroupsCells: function (headerCells, groups, taskGroupIndex, taskIndex) {\n            var view = this._view;\n\n            if (taskGroupIndex === 0 && taskIndex === 0 && groups.length) {\n              view._renderTaskGroupsCells(headerCells, groups);\n            }\n          },\n          _renderDateCell: function (tableRow, groups, tasks, date, taskGroupIndex, tasksGroups) {\n            var view = this._view;\n\n            var isMobile = view._isMobile();\n\n            tableRow.push(kendo.format('<td class=\"k-scheduler-datecolumn{3}{2}\" rowspan=\"{0}\">{1}</td>', tasks.length, view._dateTemplate({\n              date: date,\n              isMobile: isMobile\n            }), taskGroupIndex == tasksGroups.length - 1 && !groups.length ? \" k-last\" : \"\", !groups.length ? \" k-first\" : \"\"));\n          },\n          _renderDates: function () {\n            return undefined;\n          },\n          _getParents: function (parentGroups) {\n            return parentGroups.splice(0);\n          },\n          _getGroupsByDate: function () {\n            return undefined;\n          },\n          _renderTaskGroups: function (table, items, parents) {\n            var view = this._view;\n            table.append(view._renderTaskGroups(items, parents));\n          }\n        });\n        var AgendaGroupedByDateView = kendo.Class.extend({\n          init: function (view) {\n            this._view = view;\n          },\n          _getColumns: function (groupHeaders, columns) {\n            var view = this._view;\n\n            if (view._isMobile()) {\n              return groupHeaders.concat(columns);\n            } else {\n              var date = columns.slice(0, 1);\n              var columnsWithoutDate = columns.slice(1);\n              return date.concat(groupHeaders).concat(columnsWithoutDate);\n            }\n          },\n          _compareDateGroups: function (currentGroup, prevGroup, index) {\n            if (currentGroup[index].text == prevGroup[index].text) {\n              if (index === 0) {\n                return true;\n              } else {\n                return this._compareDateGroups(currentGroup, prevGroup, index - 1);\n              }\n            }\n\n            return false;\n          },\n          _getGroupsInDay: function (tasksGroups, groups) {\n            var groupsInDay = [];\n            var prevGroup = null;\n\n            for (var tasksGroupIdx = 0; tasksGroupIdx < tasksGroups.length; tasksGroupIdx++) {\n              for (var itemsIdx = 0; itemsIdx < tasksGroups[tasksGroupIdx].items.length; itemsIdx++) {\n                var idx = 0;\n\n                if (groupsInDay.length === 0) {\n                  for (idx; idx < groups[tasksGroupIdx].length; idx++) {\n                    groupsInDay.push([1]);\n                  }\n                } else {\n                  for (idx; idx < groups[tasksGroupIdx].length; idx++) {\n                    if (this._compareDateGroups(groups[tasksGroupIdx], prevGroup, idx)) {\n                      groupsInDay[idx][groupsInDay[idx].length - 1]++;\n                    } else {\n                      var lastItemValue = groupsInDay[idx][groupsInDay[idx].length - 1] - 1;\n\n                      for (var i = 0; i < lastItemValue; i++) {\n                        groupsInDay[idx].push(0);\n                      }\n\n                      groupsInDay[idx].push(1);\n                    }\n                  }\n                }\n\n                prevGroup = groups[tasksGroupIdx];\n              }\n            }\n\n            return groupsInDay;\n          },\n          _getSumOfItemsForDate: function (tasksGroups) {\n            var sumOfItemsForDate = 0;\n\n            for (var i = 0; i < tasksGroups.length; i++) {\n              sumOfItemsForDate += tasksGroups[i].items.length;\n            }\n\n            return sumOfItemsForDate;\n          },\n          _renderTaskGroupsCells: function (headerCells, groups, taskGroupIndex, taskIndex, groupsInDay, sumOfItemsForDate, date, groupsRowSpanIndex) {\n            var view = this._view;\n\n            var isMobile = view._isMobile();\n\n            if (!isMobile) {\n              if (taskGroupIndex === 0 && taskIndex === 0) {\n                headerCells.push(kendo.format('<td class=\"k-scheduler-datecolumn k-first\" rowspan=\"{0}\">{1}</td>', sumOfItemsForDate, view._dateTemplate({\n                  date: date,\n                  isMobile: isMobile\n                })));\n              }\n\n              for (var idx = 0; idx < groups[taskGroupIndex].length; idx++) {\n                if (groupsInDay[idx][groupsRowSpanIndex]) {\n                  headerCells.push(kendo.format('<td class=\"k-scheduler-groupcolumn\" rowspan=\"{0}\">{1}</td>', groupsInDay[idx][groupsRowSpanIndex], view._groupTemplate({\n                    value: groups[taskGroupIndex][idx].text,\n                    isMobile: isMobile\n                  }), groups[taskGroupIndex][idx].className));\n                }\n              }\n            } else {\n              if (taskGroupIndex === 0 && taskIndex === 0 && groups.length) {\n                view._renderTaskGroupsCells(headerCells, groups);\n              }\n            }\n          },\n          _renderDateCell: function () {\n            return undefined;\n          },\n          _renderDates: function (table) {\n            var view = this._view;\n\n            var sortedArray = view._groupsByDate.sort(function (a, b) {\n              return a.array[0].value.getTime() - b.array[0].value.getTime();\n            });\n\n            for (var i = 0; i < sortedArray.length; i++) {\n              table.append(view._renderTaskGroups(sortedArray[i].array, sortedArray[i].groups));\n            }\n          },\n          _getParents: function (parentGroups) {\n            return parentGroups.slice(0);\n          },\n          _getGroupsByDate: function (groups, idx, parents) {\n            var view = this._view;\n\n            if (groups[idx].items) {\n              for (var taskGroupIndex = 0; taskGroupIndex < groups[idx].items.length; taskGroupIndex++) {\n                var date = groups[idx].items[taskGroupIndex].value;\n                var dateExists = false;\n\n                for (var i = 0; i < view._groupsByDate.length; i++) {\n                  if (view._groupsByDate[i].array[0].value.getTime() === date.getTime()) {\n                    dateExists = true;\n\n                    view._groupsByDate[i].array.push(groups[idx].items[taskGroupIndex]);\n\n                    view._groupsByDate[i].groups.push(parents);\n                  }\n                }\n\n                if (!dateExists) {\n                  view._groupsByDate.push({\n                    array: [groups[idx].items[taskGroupIndex]],\n                    groups: [parents]\n                  });\n                }\n              }\n            }\n          },\n          _renderTaskGroups: function () {\n            return undefined;\n          }\n        });\n        kendo.ui.scheduler.AgendaGroupedView = AgendaGroupedView;\n        kendo.ui.scheduler.AgendaGroupedByDateView = AgendaGroupedByDateView;\n        ui.AgendaView = ui.SchedulerView.extend({\n          init: function (element, options) {\n            ui.SchedulerView.fn.init.call(this, element, options);\n            this._groupedView = this._getGroupedView();\n            options = this.options;\n\n            if (options.editable) {\n              options.editable = $.extend({\n                \"delete\": true\n              }, options.editable, {\n                create: false,\n                update: false\n              }, {\n                messages: options.messages\n              });\n            }\n\n            this.title = options.title;\n            this._eventTemplate = this._eventTmpl(options.eventTemplate, EVENT_WRAPPER_FORMAT);\n            this._dateTemplate = kendo.template(options.eventDateTemplate);\n            this._groupTemplate = kendo.template(options.eventGroupTemplate);\n            this._timeTemplate = kendo.template(options.eventTimeTemplate);\n            this.element.on(\"mouseenter\" + NS, \".k-scheduler-agenda .k-scheduler-content tr\", \"_mouseenter\").on(\"mouseleave\" + NS, \".k-scheduler-agenda .k-scheduler-content tr\", \"_mouseleave\").on(\"click\" + NS, \".k-scheduler-agenda .k-scheduler-content .k-link:has(.k-i-close)\", \"_remove\");\n\n            this._renderLayout(options.date);\n\n            this.refreshLayout();\n          },\n          name: \"agenda\",\n          _aria: function () {\n            var table = this.table;\n            this.element.attr(ROLE, \"grid\");\n            table.find(\".k-scheduler-header\").attr(ROLE, \"rowgroup\");\n            table.find(\".k-scheduler-header-wrap\").attr(ROLE, \"row\");\n            table.find(\".k-scheduler-header-wrap th\").attr(ROLE, \"columnheader\");\n            table.find(\".k-scheduler-content\").attr(ROLE, \"rowgroup\");\n            table.find(\".k-scheduler-content td\").attr(ROLE, \"gridcell\");\n            table.find(\".k-scheduler-content .k-scheduler-datecolumn, .k-scheduler-content .k-scheduler-groupcolumn\").attr(ROLE, \"rowheader\");\n          },\n          _isVirtualized: function () {\n            return false;\n          },\n          _getGroupedView: function () {\n            if (this._isGroupedByDate()) {\n              return new kendo.ui.scheduler.AgendaGroupedByDateView(this);\n            } else {\n              return new kendo.ui.scheduler.AgendaGroupedView(this);\n            }\n          },\n          _mouseenter: function (e) {\n            $(e.currentTarget).addClass(\"k-state-hover\");\n          },\n          _mouseleave: function (e) {\n            $(e.currentTarget).removeClass(\"k-state-hover\");\n          },\n          _remove: function (e) {\n            e.preventDefault();\n            this.trigger(\"remove\", {\n              uid: $(e.currentTarget).closest(\".k-task\").attr(kendo.attr(\"uid\"))\n            });\n          },\n          nextDate: function () {\n            return kendo.date.nextDay(this.startDate());\n          },\n          startDate: function () {\n            return this._startDate;\n          },\n          endDate: function () {\n            return this._endDate;\n          },\n          previousDate: function () {\n            return kendo.date.previousDay(this.startDate());\n          },\n          _renderLayout: function (date) {\n            this._startDate = date;\n            this._endDate = kendo.date.addDays(date, 7);\n            this.createLayout(this._layout());\n\n            this._footer();\n\n            this.table.addClass(\"k-scheduler-agenda\");\n          },\n          _layout: function () {\n            var columns = [{\n              text: this.options.messages.time,\n              className: \"k-scheduler-timecolumn\"\n            }, {\n              text: this.options.messages.event\n            }];\n\n            if (!this._isMobile()) {\n              columns.splice(0, 0, {\n                text: this.options.messages.date,\n                className: \"k-scheduler-datecolumn\"\n              });\n            }\n\n            var resources = this.groupedResources;\n\n            if (resources.length) {\n              var groupHeaders = [];\n\n              for (var idx = 0; idx < resources.length; idx++) {\n                groupHeaders.push({\n                  text: \"\",\n                  className: \"k-scheduler-groupcolumn\"\n                });\n              }\n\n              columns = this._groupedView._getColumns(groupHeaders, columns);\n            }\n\n            return {\n              columns: columns\n            };\n          },\n          _tasks: function (events) {\n            var tasks = [];\n\n            for (var idx = 0; idx < events.length; idx++) {\n              var event = events[idx];\n              var start = event.start;\n              var end = event.isAllDay ? kendo.date.getDate(event.end) : event.end;\n              var eventStartDate = kendo.date.getDate(start);\n              var offsetCompensation = (eventStartDate.getTimezoneOffset() - end.getTimezoneOffset()) * 60000;\n              var eventDurationInDays = Math.ceil((end - eventStartDate + offsetCompensation) / kendo.date.MS_PER_DAY);\n\n              if (event.isAllDay) {\n                eventDurationInDays += 1;\n              }\n\n              var task = event.clone();\n              task.startDate = kendo.date.getDate(start);\n\n              if (task.startDate >= this.startDate()) {\n                tasks.push(task);\n              }\n\n              if (eventDurationInDays > 1) {\n                task.end = kendo.date.nextDay(start);\n                task.head = true;\n\n                for (var day = 1; day < eventDurationInDays; day++) {\n                  start = task.end;\n                  task = event.clone();\n                  task.start = task.startDate = kendo.date.getDate(start);\n                  task.end = kendo.date.nextDay(start);\n\n                  if (day == eventDurationInDays - 1) {\n                    task.end = new Date(task.start.getFullYear(), task.start.getMonth(), task.start.getDate(), end.getHours(), end.getMinutes(), end.getSeconds(), end.getMilliseconds());\n                    task.tail = true;\n                  } else {\n                    task.isAllDay = true;\n                    task.middle = true;\n                  }\n\n                  if (kendo.date.getDate(task.end) <= this.endDate() && task.start >= this.startDate() || kendo.date.getDate(task.start).getTime() == this.endDate().getTime()) {\n                    tasks.push(task);\n                  }\n                }\n              }\n            }\n\n            return new kendo.data.Query(tasks).sort([{\n              field: \"start\",\n              dir: \"asc\"\n            }, {\n              field: \"end\",\n              dir: \"asc\"\n            }]).groupBy({\n              field: \"startDate\"\n            }).toArray();\n          },\n          _renderTaskGroups: function (tasksGroups, groups) {\n            var tableRows = [];\n            var editable = this.options.editable;\n            var showDelete = editable && editable.destroy !== false && !this._isMobile();\n\n            var isMobile = this._isMobile();\n\n            var sumOfItemsForDate = this._groupedView._getSumOfItemsForDate(tasksGroups);\n\n            var groupsInDay = this._groupedView._getGroupsInDay(tasksGroups, groups);\n\n            var groupsRowSpanIndex = 0;\n\n            for (var taskGroupIndex = 0; taskGroupIndex < tasksGroups.length; taskGroupIndex++) {\n              var date = tasksGroups[taskGroupIndex].value;\n              var tasks = tasksGroups[taskGroupIndex].items;\n              var today = kendo.date.isToday(date);\n\n              for (var taskIndex = 0; taskIndex < tasks.length; taskIndex++) {\n                var task = tasks[taskIndex];\n                var tableRow = [];\n                var headerCells = !isMobile ? tableRow : [];\n\n                this._groupedView._renderTaskGroupsCells(headerCells, groups, taskGroupIndex, taskIndex, groupsInDay, sumOfItemsForDate, date, groupsRowSpanIndex);\n\n                groupsRowSpanIndex++;\n\n                if (taskIndex === 0) {\n                  if (isMobile) {\n                    headerCells.push(kendo.format('<td class=\"k-scheduler-datecolumn {1}\" colspan=\"2\">{0}</td>', this._dateTemplate({\n                      date: date,\n                      isMobile: isMobile\n                    }), !this.groupedResources.length ? \"k-first\" : \"\"));\n                    tableRows.push('<tr role=\"row\" aria-selected=\"false\"' + (today ? ' class=\"k-today\">' : \">\") + headerCells.join(\"\") + \"</tr>\");\n                  } else {\n                    this._groupedView._renderDateCell(tableRow, groups, tasks, date, taskGroupIndex, tasksGroups);\n                  }\n                }\n\n                if (task.head) {\n                  task.format = \"{0:t}\";\n                } else if (task.tail) {\n                  task.format = \"{1:t}\";\n                } else {\n                  task.format = \"{0:t}-{1:t}\";\n                }\n\n                task.resources = this.eventResources(task);\n                tableRow.push(kendo.format('<td class=\"k-scheduler-timecolumn {4}\"><div>{0}{1}{2}</div></td><td>{3}</td>', task.tail || task.middle ? '<span class=\"k-icon k-i-arrow-60-left\"></span>' : \"\", this._timeTemplate(task.clone({\n                  start: task._startTime || task.start,\n                  end: task.endTime || task.end\n                })), task.head || task.middle ? '<span class=\"k-icon k-i-arrow-60-right\"></span>' : \"\", this._eventTemplate(task.clone({\n                  showDelete: showDelete,\n                  messages: this.options.messages\n                })), !this.groupedResources.length && isMobile ? \"k-first\" : \"\"));\n                tableRows.push('<tr role=\"row\" aria-selected=\"false\"' + (today ? ' class=\"k-today\">' : \">\") + tableRow.join(\"\") + \"</tr>\");\n              }\n            }\n\n            return tableRows.join(\"\");\n          },\n          _renderTaskGroupsCells: function (headerCells, groups) {\n            var isMobile = this._isMobile();\n\n            for (var idx = 0; idx < groups.length; idx++) {\n              headerCells.push(kendo.format('<td class=\"k-scheduler-groupcolumn{2}\" rowspan=\"{0}\">{1}</td>', groups[idx].rowSpan, this._groupTemplate({\n                value: groups[idx].text,\n                isMobile: isMobile\n              }), groups[idx].className));\n            }\n          },\n          render: function (events) {\n            var table = this.content.find(\"table\").empty();\n            var groups = [];\n\n            if (events.length > 0) {\n              var resources = this.groupedResources;\n\n              if (resources.length) {\n                groups = this._createGroupConfiguration(events, resources, null);\n                this._groupsByDate = [];\n\n                this._renderGroups(groups, table, []);\n\n                this._groupedView._renderDates(table);\n              } else {\n                groups = this._tasks(events);\n                table.append(this._renderTaskGroups(groups, []));\n              }\n            }\n\n            var items = this._eventsList = flattenTaskGroups(groups);\n\n            this._angularItems(table, items);\n\n            this._aria();\n\n            this.refreshLayout();\n            this.trigger(\"activate\");\n          },\n          _angularItems: function (table, items) {\n            this.angular(\"compile\", function () {\n              var data = [],\n                  elements = items.map(function (item) {\n                data.push({\n                  dataItem: item\n                });\n                return table.find(\".k-task[\" + kendo.attr(\"uid\") + \"=\" + item.uid + \"]\");\n              });\n              return {\n                elements: elements,\n                data: data\n              };\n            });\n          },\n          _renderGroups: function (groups, table, parentGroups) {\n            for (var idx = 0, length = groups.length; idx < length; idx++) {\n              var parents = this._groupedView._getParents(parentGroups);\n\n              parents.push(groups[idx]);\n\n              this._groupedView._getGroupsByDate(groups, idx, parents);\n\n              if (groups[idx].groups) {\n                this._renderGroups(groups[idx].groups, table, parents);\n              } else {\n                this._groupedView._renderTaskGroups(table, groups[idx].items, parents);\n              }\n            }\n          },\n          _createGroupConfiguration: function (events, resources, parent) {\n            var resource = resources[0];\n            var configuration = [];\n            var data = resource.dataSource.view();\n\n            var isMobile = this._isMobile();\n\n            data = data.filter(function (item) {\n              var itemParentValue = kendo.getter(resource.dataParentValueField)(item);\n              return itemParentValue === null || itemParentValue === undefined || parent && itemParentValue === parent.value;\n            });\n\n            for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {\n              var value = resourceValue(resource, data[dataIndex]);\n              var tmp = new kendo.data.Query(events).filter({\n                field: resource.field,\n                operator: ui.SchedulerView.groupEqFilter(value)\n              }).toArray();\n\n              if (tmp.length) {\n                var tasks = this._tasks(tmp);\n\n                var className = parent ? \"\" : \" k-first\";\n\n                if (dataIndex === data.length - 1 && (!parent || parent.className.indexOf(\"k-last\") > -1)) {\n                  className += \" k-last\";\n                }\n\n                var obj = {\n                  text: kendo.getter(resource.dataTextField)(data[dataIndex]),\n                  value: value,\n                  rowSpan: 0,\n                  className: className\n                };\n\n                if (resources.length > 1) {\n                  obj.groups = this._createGroupConfiguration(tmp, resources.slice(1), obj);\n\n                  if (parent) {\n                    parent.rowSpan += obj.rowSpan;\n                  }\n                } else {\n                  obj.items = tasks;\n                  var span = rowSpan(obj.items);\n\n                  if (isMobile) {\n                    span += obj.items.length;\n                  }\n\n                  obj.rowSpan = span;\n\n                  if (parent) {\n                    parent.rowSpan += span;\n                  }\n                }\n\n                configuration.push(obj);\n              }\n            }\n\n            return configuration;\n          },\n          // TODO: this method for Agenda view has never worked properly\n          // it used to return wrong resources\n          // to be clearer the deficit, it now does not return any resources\n          _resourceBySlot: function () {\n            return {};\n          },\n          selectionByElement: function (cell) {\n            var index, event;\n            cell = $(cell);\n\n            if (cell.hasClass(\"k-scheduler-datecolumn\") || !this._eventsList.length) {\n              return;\n            }\n\n            if (cell.is(\".k-task\")) {\n              cell = cell.closest(\"td\");\n            }\n\n            if (this._isMobile()) {\n              var parent = cell.parent();\n              index = parent.parent().children().filter(function () {\n                return $(this).children(\":not(.k-scheduler-datecolumn, .k-scheduler-groupcolumn)\").length;\n              }).index(parent);\n            } else {\n              index = cell.parent().index();\n            }\n\n            event = this._eventsList[index];\n            return {\n              index: index,\n              start: event.start,\n              end: event.end,\n              isAllDay: event.isAllDay,\n              uid: event.uid\n            };\n          },\n          select: function (selection) {\n            this.clearSelection();\n            var row = this.table.find(\".k-task\").eq(selection.index).closest(\"tr\").addClass(\"k-state-selected\").attr(\"aria-selected\", true)[0];\n            this.current(row);\n          },\n          move: function (selection, key) {\n            var handled = false;\n            var index = selection.index;\n\n            if (key == kendo.keys.UP) {\n              index--;\n              handled = true;\n            } else if (key == kendo.keys.DOWN) {\n              index++;\n              handled = true;\n            }\n\n            if (handled) {\n              var event = this._eventsList[index];\n\n              if (event) {\n                selection.start = event.start;\n                selection.end = event.end;\n                selection.isAllDay = event.isAllDay;\n                selection.events = [event.uid];\n                selection.index = index;\n              }\n            }\n\n            return handled;\n          },\n          moveToEvent: function () {\n            return false;\n          },\n          constrainSelection: function (selection) {\n            var event = this._eventsList[0];\n\n            if (event) {\n              selection.start = event.start;\n              selection.end = event.end;\n              selection.isAllDay = event.isAllDay;\n              selection.events = [event.uid];\n              selection.index = 0;\n            }\n          },\n          isInRange: function () {\n            return true;\n          },\n          destroy: function () {\n            if (this.element) {\n              this.element.off(NS);\n            }\n\n            ui.SchedulerView.fn.destroy.call(this);\n          },\n          options: {\n            title: \"Agenda\",\n            name: \"agenda\",\n            editable: true,\n            selectedDateFormat: \"{0:D}-{1:D}\",\n            selectedShortDateFormat: \"{0:d} - {1:d}\",\n            selectedMobileDateFormat: \"{0: MMM} {0:dd} - {1:dd}\",\n            eventTemplate: \"#:title#\",\n            eventTimeTemplate: \"#if(data.isAllDay) {#\" + '#=this.options.messages.allDay#' + \"#} else { #\" + '#=kendo.format(format, start, end)#' + \"# } #\",\n            eventDateTemplate: EVENT_DATE_TEMPLATE,\n            eventGroupTemplate: EVENT_GROUP_TEMPLATE,\n            messages: {\n              event: \"Event\",\n              date: \"Date\",\n              time: \"Time\",\n              allDay: \"all day\"\n            }\n          }\n        });\n\n        function rowSpan(tasks) {\n          var result = 0;\n\n          for (var idx = 0, length = tasks.length; idx < length; idx++) {\n            result += tasks[idx].items.length;\n          }\n\n          return result;\n        }\n\n        function resourceValue(resource, item) {\n          if (resource.valuePrimitive) {\n            item = kendo.getter(resource.dataValueField)(item);\n          }\n\n          return item;\n        }\n\n        function flattenTaskGroups(groups) {\n          var idx = 0,\n              length = groups.length,\n              item,\n              result = [];\n\n          for (; idx < length; idx++) {\n            item = groups[idx];\n\n            if (item.groups) {\n              item = flattenGroup(item.groups);\n              result = result.concat(item);\n            } else {\n              result = result.concat(flattenGroup(item.items));\n            }\n          }\n\n          return result;\n        }\n\n        function flattenGroup(groups) {\n          var items = [].concat(groups),\n              item = items.shift(),\n              result = [],\n              push = [].push;\n\n          while (item) {\n            if (item.groups) {\n              push.apply(items, item.groups);\n            } else if (item.items) {\n              push.apply(items, item.items);\n            } else {\n              push.call(result, item);\n            }\n\n            item = items.shift();\n          }\n\n          return result;\n        }\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}