{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1023);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1023:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1024)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            Editor = kendo.ui.editor,\n            EditorUtils = Editor.EditorUtils,\n            RangeUtils = Editor.RangeUtils,\n            dom = Editor.Dom,\n            registerTool = EditorUtils.registerTool,\n            ToolTemplate = Editor.ToolTemplate,\n            Command = Editor.Command;\n        var tableFormatFinder = new Editor.BlockFormatFinder([{\n          tags: [\"table\"]\n        }]);\n        var cellsFormatFinder = new Editor.BlockFormatFinder([{\n          tags: [\"td\", \"th\"]\n        }]);\n        var reUnit = /([a-z]+|%)$/i;\n        var COL = \"col\";\n        var ROW = \"row\";\n        var COLGROUP = \"colgroup\";\n        var SCOPE = \"scope\";\n        var COL_INDEX = \"col-index\";\n        var TH = \"th\";\n        var TD = \"td\";\n        var THEAD = \"thead\";\n        var HEADERS = \"headers\";\n        var TABLE = \"table\";\n        var TableWizardCommand = Command.extend({\n          exec: function () {\n            var cmd = this;\n            var editor = cmd.editor;\n            var range = cmd.range = cmd.lockRange();\n            var selectedTable = cmd._sourceTable = !cmd.options.insertNewTable ? cmd._selectedTable(range) : undefined;\n            var selectedCells = cmd._selectedTableCells = selectedTable ? cmd._selectedCells(range) : undefined;\n            var options = {\n              visible: false,\n              messages: editor.options.messages,\n              closeCallback: cmd.onDialogClose.bind(cmd),\n              table: cmd.parseTable(selectedTable, selectedCells),\n              dialogOptions: editor.options.dialogOptions,\n              isRtl: kendo.support.isRtl(editor.wrapper)\n            };\n            var dialog = new Editor.TableWizardDialog(options);\n            dialog.open();\n          },\n          onDialogClose: function (data) {\n            var cmd = this;\n            cmd.releaseRange(cmd.range);\n\n            if (data) {\n              //Ok button pressed\n              if (cmd.options.insertNewTable) {\n                cmd.insertTable(cmd.createNewTable(data));\n              } else {\n                cmd.updateTable(data, cmd._sourceTable, cmd._selectedTableCells);\n              }\n            }\n          },\n          releaseRange: function (range) {\n            var cmd = this;\n            var doc = cmd.editor.document;\n            dom.windowFromDocument(doc).focus();\n            Command.fn.releaseRange.call(cmd, range);\n          },\n          insertTable: function (table) {\n            var range = this.range;\n            range.insertNode(table);\n            range.collapse(true);\n            this.editor.selectRange(range);\n\n            this._ensureFocusableAfterTable(table);\n          },\n          _ensureFocusableAfterTable: function (table) {\n            var siblingNodes = $(table).parent().contents();\n            var lastSiblingIndex = siblingNodes.length - 1;\n            var lastSibling = siblingNodes.get(lastSiblingIndex);\n\n            while (lastSibling.nodeValue !== null && (lastSibling.nodeValue === \" \" || lastSibling.nodeValue === \"\")) {\n              lastSiblingIndex -= 1;\n              lastSibling = siblingNodes.get(lastSiblingIndex);\n            }\n\n            if (lastSibling === table) {\n              dom.insertAfter(dom.createEmptyNode(this.editor.document, \"p\"), table);\n            }\n          },\n          updateTable: function (data, table, selectedCells) {\n            var cmd = this;\n            var tableRows = $(table.rows).toArray();\n            var tableProp = data.tableProperties;\n            var rows = tableProp.rows;\n            var tHead = table.tHead;\n            var last = cmd._lastInCollection;\n            var lastSelectedRow, cellProp; //Leave only first selected cell\n\n            while (selectedCells.length > 1) {\n              selectedCells.pop();\n            }\n\n            lastSelectedRow = selectedCells.length ? last(selectedCells).parentNode : last(tableRows);\n\n            cmd._deleteTableRows(tableRows, tableRows.length - rows);\n\n            if (tableRows.length < rows) {\n              cmd._addRows(lastSelectedRow, rows, tableRows);\n            }\n\n            dom.reMapTableColumns(table, COL_INDEX);\n\n            cmd._updateColumns(tableRows, tableProp.columns, selectedCells, lastSelectedRow);\n\n            cmd._updateTableProperties(table, tableProp);\n\n            cellProp = data.cellProperties;\n\n            if (selectedCells[0]) {\n              dom.attr(selectedCells[0], {\n                id: cellProp.id || null\n              });\n            }\n\n            (cellProp.selectAllCells ? $(tableRows).children() : $(selectedCells)).each(function (i, cell) {\n              cmd._updateCellProperties(cell, cellProp);\n            });\n\n            cmd._updateCaption(table, tableProp);\n\n            if (tHead) {\n              cmd._updateHeadersWithThead(table, data);\n            } else {\n              cmd._updateHeadersNoThead(table, data);\n            }\n\n            cmd._updateHeaderAssociates(table, tableProp);\n\n            dom.clearTableMappings(table, COL_INDEX);\n          },\n          _isHeadingRow: function (row) {\n            return dom.is(row.cells[0], TH) && dom.is(row.parentNode, THEAD);\n          },\n          _isHeadingCell: function (cell) {\n            return dom.is(cell, TH);\n          },\n          cellsWithHeadersAssociated: function (table) {\n            var cells = $(table.rows).children();\n            var headingIds = [];\n\n            var checkHeader = function (header) {\n              return headingIds.indexOf(header) > -1;\n            };\n\n            cells.each(function (c, cell) {\n              if (cell.id && dom.is(cell, TH)) {\n                headingIds.push(cell.id);\n              }\n            });\n            var associatedCells = cells.filter(function (c, cell) {\n              var headersAttr = cell.getAttribute(HEADERS);\n              var headersArray;\n\n              if (headersAttr && !dom.is(cell, TH)) {\n                headersArray = headersAttr.split(\" \");\n\n                if (headersArray && headersArray.length > 0) {\n                  return headersArray.some(checkHeader);\n                }\n              }\n\n              return false;\n            });\n            return !!associatedCells.length;\n          },\n          _insertCells: function (count, row, index) {\n            index = isNaN(index) ? -1 : index;\n\n            for (var i = 0, cell; i < count; i++) {\n              cell = row.insertCell(index);\n              cell.innerHTML = \"&nbsp;\";\n            }\n          },\n          _deleteTableRows: function (rows, count) {\n            for (var i = 0, row, rowParent; i < count; i++) {\n              row = rows.pop();\n              rowParent = row.parentNode;\n              rowParent.removeChild(row);\n\n              if (!rowParent.rows.length) {\n                dom.remove(rowParent);\n              }\n            }\n          },\n          createNewTable: function (data) {\n            var cmd = this;\n            var doc = cmd.editor.document;\n            var tableProp = data.tableProperties;\n            var table = dom.create(doc, TABLE);\n            var rowIndex = 0;\n            var thead;\n\n            cmd._updateTableProperties(table, tableProp);\n\n            cmd._updateCaption(table, tableProp);\n\n            if (tableProp.headerRows && tableProp.headerRows > 0) {\n              thead = table.createTHead();\n\n              cmd._createTableRows(data, thead, rowIndex, true);\n\n              rowIndex += tableProp.headerRows;\n            }\n\n            var tbody = table.createTBody();\n\n            cmd._createTableRows(data, tbody, rowIndex, false);\n\n            dom.reMapTableColumns(table, COL_INDEX);\n\n            if (tableProp.cellsWithHeaders === \"ids\") {\n              dom.associateWithIds(table);\n            } else if (tableProp.cellsWithHeaders === \"scope\") {\n              cmd._addScopes(table, tableProp.headerRows, tableProp.headerColumns);\n            }\n\n            dom.clearTableMappings(table, COL_INDEX);\n            return table;\n          },\n          _createTableRows: function (data, container, initialIndex, headerRows) {\n            var cmd = this;\n            var tableProp = data.tableProperties;\n            var cellProp = data.cellProperties;\n            var columns = tableProp.columns;\n            var rows = headerRows ? tableProp.headerRows : tableProp.rows;\n            var cellPropToAll = cellProp.selectAllCells;\n            var headerColumns = tableProp.headerColumns;\n\n            for (var r = initialIndex, row; r < rows; r++) {\n              row = container.insertRow();\n\n              for (var c = 0, cell; c < columns; c++) {\n                if (headerRows || headerColumns > c) {\n                  cell = document.createElement(TH);\n                } else {\n                  cell = document.createElement(TD);\n                }\n\n                row.appendChild(cell);\n                cell.innerHTML = \"&nbsp;\";\n\n                if (r === 0 && c === 0 && cellProp.id) {\n                  cell.id = cellProp.id;\n                }\n\n                cmd._updateCellProperties(cell, cellPropToAll || r === 0 && c === 0 ? cellProp : {});\n              }\n            }\n          },\n          _addRows: function (lastSelectedRow, rows, tableRows) {\n            var cmd = this;\n            var rowIndex = $(lastSelectedRow).index();\n            var cellsLength = lastSelectedRow.cells.length;\n            var newRowsCount = rows - tableRows.length;\n            var parent = lastSelectedRow.parentNode;\n            var row;\n\n            while (newRowsCount) {\n              row = parent.insertRow(rowIndex + 1);\n\n              cmd._insertCells(cellsLength - row.cells.length, row);\n\n              newRowsCount--;\n            }\n          },\n          _updateColumns: function (tableRows, columns, selectedCells, lastSelectedRow) {\n            var cmd = this;\n            var last = cmd._lastInCollection;\n            var firstRowLastCell = last(tableRows[0].cells);\n            var numberOfColumns = Number(firstRowLastCell.getAttribute(COL_INDEX)) + firstRowLastCell.colSpan;\n\n            if (numberOfColumns > columns) {\n              $(tableRows).each(function (i, row) {\n                var lastCurrentCell = last(row.cells);\n                var rowColumns = Number(lastCurrentCell.getAttribute(COL_INDEX)) + lastCurrentCell.colSpan;\n\n                while (rowColumns > columns) {\n                  if (lastCurrentCell.colSpan && lastCurrentCell.colSpan > 1) {\n                    lastCurrentCell.colSpan -= 1;\n                  } else {\n                    row.deleteCell(-1);\n                  }\n\n                  lastCurrentCell = last(row.cells);\n                  rowColumns = Number(lastCurrentCell.getAttribute(COL_INDEX)) + lastCurrentCell.colSpan;\n                }\n              });\n            }\n\n            if (numberOfColumns < columns) {\n              var cellIndex = $(last(selectedCells) || last(lastSelectedRow.cells)).index();\n              $(tableRows).each(function (i, row) {\n                var lastCurrentCell = last(row.cells);\n\n                cmd._insertCells(columns - Number(lastCurrentCell.getAttribute(COL_INDEX)) - lastCurrentCell.colSpan, row, cellIndex + 1);\n              });\n            }\n          },\n          _updateTableProperties: function (table, data) {\n            var style = this._getStylesData(data);\n\n            dom.attr(table, {\n              cellSpacing: data.cellSpacing || null,\n              cellPadding: data.cellPadding || null,\n              className: data.className || null,\n              id: data.id || null,\n              summary: data.summary || null,\n              style: style || null\n            });\n            $(table).addClass(\"k-table\");\n          },\n          _updateCellProperties: function (cell, data) {\n            var style = this._getStylesData(data);\n\n            style.padding = data.cellPadding || null;\n            style.margin = data.cellMargin || null;\n            dom.attr(cell, {\n              style: style || null,\n              className: data.className || null\n            });\n          },\n          _updateCaption: function (table, data) {\n            if (table.caption && !data.captionContent) {\n              table.deleteCaption();\n            } else if (data.captionContent) {\n              var caption = table.createCaption();\n              caption.innerHTML = data.captionContent;\n\n              var alignment = this._getAlignmentData(data.captionAlignment);\n\n              dom.attr(caption, {\n                style: {\n                  textAlign: alignment.textAlign,\n                  verticalAlign: alignment.verticalAlign\n                }\n              });\n            }\n          },\n          _updateHeadersNoThead: function (table, data) {\n            var cmd = this;\n            var tableProp = data.tableProperties;\n            var rows = table.rows;\n            var row, cells, cell, i, j;\n\n            for (i = 0; i < rows.length; i++) {\n              row = rows[i];\n              cells = row.cells;\n\n              for (j = 0; j < cells.length; j++) {\n                cell = cells[j];\n\n                if (!cmd._isHeadingCell(cell) && (i < tableProp.headerRows || tableProp.headerColumns > cell.getAttribute(COL_INDEX))) {\n                  dom.changeTag(cell, TH, false);\n                } else if (cmd._isHeadingCell(cell) && i >= tableProp.headerRows && tableProp.headerColumns <= cell.getAttribute(COL_INDEX)) {\n                  dom.changeTag(cell, TD, false);\n                }\n              }\n            }\n          },\n          _updateHeadersWithThead: function (table, data) {\n            var cmd = this;\n            var tableProp = data.tableProperties;\n            var thead = table.tHead;\n            var rowIndex = 0;\n            var tbody = table.tBodies[0];\n            var row, cell, i;\n\n            if (!tbody) {\n              tbody = table.createTBody();\n            }\n\n            if (tableProp.headerRows && tableProp.headerRows > 0) {\n              if (!thead) {\n                thead = table.createTHead();\n              }\n\n              while (thead.rows.length < tableProp.headerRows) {\n                thead.appendChild(tbody.rows[0]);\n              }\n\n              while (thead.rows.length > tableProp.headerRows) {\n                tbody.appendChild(thead.rows[0]);\n              }\n\n              cmd._swapToHeaderCells(thead);\n            } else if (thead) {\n              while (thead.rows.length > 0) {\n                tbody.appendChild(thead.rows[thead.rows.length - 1]);\n              }\n\n              table.deleteTHead();\n            }\n\n            while (tbody.rows.length > rowIndex) {\n              row = tbody.rows[rowIndex];\n\n              for (i = 0; i < row.cells.length; i++) {\n                cell = row.cells[i];\n\n                if (cmd._isHeadingCell(cell) && tableProp.headerColumns <= cell.getAttribute(COL_INDEX)) {\n                  dom.changeTag(cell, TD, false);\n                } else if (!cmd._isHeadingCell(cell) && tableProp.headerColumns > cell.getAttribute(COL_INDEX)) {\n                  dom.changeTag(cell, TH, false);\n                }\n              }\n\n              rowIndex += 1;\n            }\n          },\n          _updateHeaderAssociates: function (table, tableProp) {\n            var cmd = this;\n\n            if (tableProp.cellsWithHeaders === \"ids\") {\n              if (!cmd.cellsWithHeadersAssociated(table)) {\n                cmd._removeScopes(table);\n              }\n\n              dom.associateWithIds(table);\n            } else if (tableProp.cellsWithHeaders === \"scope\") {\n              if (cmd.cellsWithHeadersAssociated(table)) {\n                cmd._removeAssociates(table);\n              }\n\n              cmd._addScopes(table, tableProp.headerRows, tableProp.headerColumns);\n            } else {\n              if (cmd.cellsWithHeadersAssociated(table)) {\n                cmd._removeAssociates(table);\n              } else {\n                cmd._removeScopes(table);\n              }\n            }\n          },\n          _addScopes: function (table, headerRows, headerCols) {\n            var rows = table.rows;\n            var i, j, row, cell;\n\n            for (i = 0; i < rows.length; i++) {\n              row = rows[i];\n\n              for (j = 0; j < row.cells.length; j++) {\n                cell = row.cells[j];\n\n                if (i < headerRows) {\n                  cell.setAttribute(SCOPE, COL);\n                } else if (cell.getAttribute(COL_INDEX) < headerCols) {\n                  cell.setAttribute(SCOPE, ROW);\n                }\n              }\n            }\n          },\n          _removeScopes: function (table) {\n            $(table).find(TH).removeAttr(SCOPE);\n            $(table).find(COL).remove();\n            $(table).find(COLGROUP).remove();\n          },\n          _removeAssociates: function (table) {\n            $(table).find(\"th, td\").removeAttr(\"id headers\");\n          },\n          _swapToHeaderCells: function (thead) {\n            var tds = $(thead).find(\"td\");\n\n            var swapCell = function (index, cell) {\n              dom.changeTag(cell, TH, false);\n            };\n\n            tds.each(swapCell);\n          },\n          _getStylesData: function (data) {\n            var alignment = this._getAlignmentData(data.alignment);\n\n            var whiteSpace = \"wrapText\" in data ? data.wrapText ? \"\" : \"nowrap\" : null;\n            return {\n              width: data.width ? data.width + data.widthUnit : null,\n              height: data.height ? data.height + data.heightUnit : null,\n              textAlign: alignment.textAlign,\n              verticalAlign: alignment.verticalAlign,\n              backgroundColor: data.bgColor || \"\",\n              borderWidth: data.borderWidth,\n              borderStyle: data.borderStyle,\n              borderColor: data.borderColor || \"\",\n              borderCollapse: data.collapseBorders ? \"collapse\" : null,\n              whiteSpace: whiteSpace\n            };\n          },\n          _getAlignmentData: function (alignment) {\n            var textAlign = \"\";\n            var verticalAlign = textAlign;\n\n            if (alignment) {\n              if (alignment.indexOf(\" \") != -1) {\n                var align = alignment.split(\" \");\n                textAlign = align[0];\n                verticalAlign = align[1];\n              } else {\n                textAlign = alignment;\n              }\n            }\n\n            return {\n              textAlign: textAlign,\n              verticalAlign: verticalAlign\n            };\n          },\n          parseTable: function (table, selectedCells) {\n            if (!table) {\n              return {\n                tableProperties: {},\n                selectedCells: []\n              };\n            }\n\n            var cmd = this;\n            var tStyle = table.style;\n            var rows = table.rows;\n            var caption = table.caption;\n            var captionClone = $(caption ? caption.cloneNode(true) : undefined);\n            captionClone.find(\".k-marker\").remove();\n            var cssClass = table.className;\n            cssClass = cssClass.replace(/^k-table\\s|\\sk-table$/, \"\");\n            cssClass = cssClass.replace(/\\sk-table\\s/, \" \");\n            cssClass = cssClass.replace(/^k-table$/, \"\");\n\n            var tableAlignment = cmd._getAlignment(table, true);\n\n            var captionAlignment = caption ? cmd._getAlignment(caption) : undefined;\n\n            var numberOfHeaderRows = dom._getNumberOfHeaderRows(table);\n\n            var cellsWithHeaders;\n\n            if (cmd.cellsWithHeadersAssociated(table)) {\n              cellsWithHeaders = \"ids\";\n            } else if ($(table).find(\"th[scope]\").length > 0) {\n              cellsWithHeaders = \"scope\";\n            } else {\n              cellsWithHeaders = \"none\";\n            }\n\n            dom.reMapTableColumns(table, COL_INDEX);\n\n            var numberOfColumns = dom._getNumberOfColumns(table);\n\n            var numberOfHeaderColumns = dom._getNumberOfHeaderColumns(table, numberOfHeaderRows);\n\n            dom.clearTableMappings(table, COL_INDEX);\n            var tableJson = {\n              tableProperties: {\n                width: tStyle.width || table.width ? parseFloat(tStyle.width || table.width) : null,\n                height: tStyle.height || table.height ? parseFloat(tStyle.height || table.height) : null,\n                columns: numberOfColumns,\n                rows: rows.length,\n                widthUnit: cmd._getUnit(tStyle.width),\n                heightUnit: cmd._getUnit(tStyle.height),\n                cellSpacing: table.cellSpacing,\n                cellPadding: table.cellPadding,\n                alignment: tableAlignment.textAlign,\n                bgColor: tStyle.backgroundColor || table.bgColor,\n                className: cssClass,\n                id: table.id,\n                borderWidth: tStyle.borderWidth || table.border,\n                borderColor: tStyle.borderColor,\n                borderStyle: tStyle.borderStyle || \"\",\n                collapseBorders: !!tStyle.borderCollapse,\n                summary: table.summary,\n                captionContent: caption ? captionClone.html() : \"\",\n                captionAlignment: caption && captionAlignment.textAlign ? captionAlignment.textAlign + \" \" + captionAlignment.verticalAlign : \"\",\n                headerRows: numberOfHeaderRows,\n                headerColumns: numberOfHeaderColumns,\n                cellsWithHeaders: cellsWithHeaders\n              },\n              selectedCells: []\n            };\n            tableJson.rows = cmd.parseTableRows(rows, selectedCells, tableJson);\n            return tableJson;\n          },\n          parseTableRows: function (rows, selectedCells, tableJson) {\n            var cmd = this;\n            var data = [],\n                row,\n                rowData,\n                cells,\n                cell,\n                cellData;\n\n            for (var i = 0; i < rows.length; i++) {\n              row = rows[i];\n              rowData = {\n                cells: []\n              };\n              cells = row.cells;\n              data.push(rowData);\n\n              for (var j = 0; j < cells.length; j++) {\n                cell = cells[j];\n                cellData = cmd.parseCell(cell);\n\n                if ($.inArray(cell, selectedCells) != -1) {\n                  tableJson.selectedCells.push(cellData);\n                }\n\n                rowData.cells.push(cellData);\n              }\n            }\n\n            return data;\n          },\n          parseCell: function (cell) {\n            var cmd = this;\n            var cStyle = cell.style;\n\n            var alignment = cmd._getAlignment(cell);\n\n            alignment = alignment.textAlign ? alignment.textAlign + \" \" + alignment.verticalAlign : \"\";\n            var data = {\n              width: cStyle.width || cell.width ? parseFloat(cStyle.width || cell.width) : null,\n              height: cStyle.height || cell.height ? parseFloat(cStyle.height || cell.height) : null,\n              widthUnit: cmd._getUnit(cStyle.width),\n              heightUnit: cmd._getUnit(cStyle.height),\n              cellMargin: cStyle.margin,\n              cellPadding: cStyle.padding,\n              alignment: alignment,\n              bgColor: cStyle.backgroundColor || cell.bgColor,\n              className: cell.className,\n              id: cell.id,\n              borderWidth: cStyle.borderWidth || cell.border,\n              borderColor: cStyle.borderColor,\n              borderStyle: cStyle.borderStyle,\n              wrapText: cStyle.whiteSpace != \"nowrap\"\n            };\n            return data;\n          },\n          _getAlignment: function (element, horizontalOnly) {\n            var style = element.style;\n            var hAlign = style.textAlign || element.align || \"\";\n\n            if (horizontalOnly) {\n              return {\n                textAlign: hAlign\n              };\n            }\n\n            var vAlign = style.verticalAlign || element.vAlign || \"\";\n\n            if (hAlign && vAlign) {\n              return {\n                textAlign: hAlign,\n                verticalAlign: vAlign\n              };\n            }\n\n            if (!hAlign && vAlign) {\n              return {\n                textAlign: \"left\",\n                verticalAlign: vAlign\n              };\n            }\n\n            if (hAlign && !vAlign) {\n              return {\n                textAlign: hAlign,\n                verticalAlign: \"top\"\n              };\n            }\n\n            return {\n              textAlign: \"\",\n              verticalAlign: \"\"\n            };\n          },\n          _getUnit: function (value) {\n            var unit = (value || \"\").match(reUnit);\n            return unit ? unit[0] : \"px\";\n          },\n          _selectedTable: function (range) {\n            var nodes = dom.filterBy(RangeUtils.nodes(range), dom.htmlIndentSpace, true);\n            return tableFormatFinder.findSuitable(nodes)[0];\n          },\n          _selectedCells: function (range) {\n            var nodes = dom.filterBy(RangeUtils.nodes(range), dom.htmlIndentSpace, true);\n            return cellsFormatFinder.findSuitable(nodes);\n          },\n          _lastInCollection: function (collection) {\n            return collection[collection.length - 1];\n          }\n        });\n        var TableWizardTool = Editor.Tool.extend({\n          command: function (options) {\n            options.insertNewTable = this.options.insertNewTable;\n            return new TableWizardCommand(options);\n          }\n        });\n        var TableWizardEditTool = TableWizardTool.extend({\n          update: function (ui, nodes) {\n            var isFormatted = !tableFormatFinder.isFormatted(nodes);\n\n            if (isFormatted === true) {\n              ui.parent().addClass(\"k-hidden k-disabled\");\n              ui.attr(\"disabled\", \"disabled\");\n              ui.addClass(\"k-disabled\");\n            } else {\n              ui.parent().removeClass(\"k-hidden k-disabled\");\n              ui.prop(\"disabled\", false);\n              ui.removeClass(\"k-disabled\");\n            }\n          }\n        });\n        kendo.ui.editor.TableWizardTool = TableWizardTool;\n        kendo.ui.editor.TableWizardCommand = TableWizardCommand;\n        registerTool(\"tableWizard\", new TableWizardEditTool({\n          command: TableWizardCommand,\n          insertNewTable: false,\n          template: new ToolTemplate({\n            template: EditorUtils.buttonTemplate,\n            title: \"Table Wizard\"\n          })\n        }));\n      })(window.kendo.jQuery);\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1024:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./../plugins/tables\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}