{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1309);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1051:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.core\");\n    /***/\n  },\n\n  /***/\n  1136:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.draganddrop\");\n    /***/\n  },\n\n  /***/\n  1309:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1051), __webpack_require__(1136)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"groupable\",\n        name: \"Groupable\",\n        category: \"framework\",\n        depends: [\"core\", \"draganddrop\"],\n        advanced: true\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n            outerWidth = kendo._outerWidth,\n            kendoAttr = kendo.attr,\n            extend = $.extend,\n            each = $.each,\n            isRtl = false,\n            DIR = \"dir\",\n            FIELD = \"field\",\n            TITLE = \"title\",\n            ASCENDING = \"asc\",\n            DESCENDING = \"desc\",\n            GROUP_SORT = \"group-sort\",\n            NS = \".kendoGroupable\",\n            CHANGE = \"change\",\n            indicatorTmpl = kendo.template('<div class=\"k-group-indicator\" data-#=data.ns#field=\"${data.field}\" data-#=data.ns#title=\"${data.title || \"\"}\" data-#=data.ns#dir=\"${data.dir || \"asc\"}\">' + '<a href=\"\\\\#\" class=\"k-link\">' + '<span class=\"k-icon k-i-sort-${(data.dir || \"asc\") == \"asc\" ? \"asc-sm\" : \"desc-sm\"}\" title=\"(sorted ${(data.dir || \"asc\") == \"asc\" ? \"ascending\": \"descending\"})\"></span>' + '${data.title ? data.title: data.field}' + '</a>' + '<a href=\"\\\\#\" data-role=\"button\" aria-label=\"Remove grouping by ${data.title || data.field} field\" class=\"k-button k-button-md k-rounded-md k-button-flat k-button-flat-base k-icon-button\">' + '<span class=\"k-button-icon k-icon k-i-close\"></span>' + '</a>' + '</div>', {\n          useWithBlock: false\n        }),\n            hint = function (target) {\n          var title = target.attr(kendo.attr(\"title\"));\n\n          if (title) {\n            title = kendo.htmlEncode(title);\n          }\n\n          return $('<div class=\"k-group-clue k-drag-clue\" />').html(title || target.attr(kendo.attr(\"field\"))).prepend('<span class=\"k-icon k-drag-status k-i-cancel\"></span>');\n        },\n            dropCue = $('<div class=\"k-grouping-dropclue\"/>');\n\n        var Groupable = Widget.extend({\n          init: function (element, options) {\n            var that = this,\n                group = kendo.guid(),\n                intializePositions = that._intializePositions.bind(that),\n                draggable,\n                horizontalCuePosition,\n                dropCuePositions = that._dropCuePositions = [];\n\n            Widget.fn.init.call(that, element, options);\n            isRtl = kendo.support.isRtl(element);\n            horizontalCuePosition = isRtl ? \"right\" : \"left\";\n            that.draggable = draggable = that.options.draggable || new kendo.ui.Draggable(that.element, {\n              filter: that.options.draggableElements,\n              hint: hint,\n              group: group\n            });\n            that.groupContainer = $(that.options.groupContainer, that.element).kendoDropTarget({\n              group: draggable.options.group,\n              dragenter: function (e) {\n                if (that._canDrag(e.draggable.currentTarget)) {\n                  e.draggable.hint.find(\".k-drag-status\").removeClass(\"k-i-cancel\").addClass(\"k-i-plus\");\n                  dropCue.css(horizontalCuePosition, 0).appendTo(that.groupContainer);\n                }\n              },\n              dragleave: function (e) {\n                e.draggable.hint.find(\".k-drag-status\").removeClass(\"k-i-plus\").addClass(\"k-i-cancel\");\n                dropCue.remove();\n              },\n              drop: function (e) {\n                var targetElement = e.draggable.currentTarget,\n                    field = targetElement.attr(kendo.attr(\"field\")),\n                    title = targetElement.attr(kendo.attr(\"title\")),\n                    sourceIndicator = that.indicator(field),\n                    dropCuePositions = that._dropCuePositions,\n                    lastCuePosition = dropCuePositions[dropCuePositions.length - 1],\n                    position;\n                var sortOptions = extend({}, that.options.sort, targetElement.data(GROUP_SORT));\n                var dir = sortOptions.dir;\n\n                if (!targetElement.hasClass(\"k-group-indicator\") && !that._canDrag(targetElement)) {\n                  return;\n                }\n\n                if (lastCuePosition) {\n                  position = that._dropCuePosition(kendo.getOffset(dropCue).left + parseInt(lastCuePosition.element.css(\"marginLeft\"), 10) * (isRtl ? -1 : 1) + parseInt(lastCuePosition.element.css(\"marginRight\"), 10));\n\n                  if (position && that._canDrop($(sourceIndicator), position.element, position.left)) {\n                    if (position.before) {\n                      position.element.before(sourceIndicator || that.buildIndicator(field, title, dir));\n                    } else {\n                      position.element.after(sourceIndicator || that.buildIndicator(field, title, dir));\n                    }\n\n                    that._setIndicatorSortOptions(field, sortOptions);\n\n                    that._change();\n                  }\n                } else {\n                  that.groupContainer.empty();\n                  that.groupContainer.append(that.buildIndicator(field, title, dir));\n\n                  that._setIndicatorSortOptions(field, sortOptions);\n\n                  that._change();\n                }\n              }\n            }).kendoDraggable({\n              filter: \"div.k-group-indicator\",\n              hint: hint,\n              group: draggable.options.group,\n              dragcancel: that._dragCancel.bind(that),\n              dragstart: function (e) {\n                var element = e.currentTarget,\n                    marginLeft = parseInt(element.css(\"marginLeft\"), 10),\n                    elementPosition = element.position(),\n                    left = isRtl ? elementPosition.left - marginLeft : elementPosition.left + outerWidth(element);\n                intializePositions();\n                dropCue.css(\"left\", left).appendTo(that.groupContainer);\n                this.hint.find(\".k-drag-status\").removeClass(\"k-i-cancel\").addClass(\"k-i-plus\");\n              },\n              dragend: function () {\n                that._dragEnd(this);\n              },\n              drag: that._drag.bind(that)\n            }).on(\"click\" + NS, \".k-button\", function (e) {\n              e.preventDefault();\n\n              that._removeIndicator($(this).parent());\n            }).on(\"click\" + NS, \".k-link\", function (e) {\n              var indicator = $(this).parent();\n              var newDir = indicator.attr(kendoAttr(DIR)) === ASCENDING ? DESCENDING : ASCENDING;\n              indicator.attr(kendoAttr(DIR), newDir);\n\n              that._change();\n\n              e.preventDefault();\n            });\n            draggable.bind([\"dragend\", \"dragcancel\", \"dragstart\", \"drag\"], {\n              dragend: function () {\n                that._dragEnd(this);\n              },\n              dragcancel: that._dragCancel.bind(that),\n              dragstart: function (e) {\n                var element, marginRight, left;\n\n                if (!that.options.allowDrag && !that._canDrag(e.currentTarget)) {\n                  e.preventDefault();\n                  return;\n                }\n\n                intializePositions();\n\n                if (dropCuePositions.length) {\n                  element = dropCuePositions[dropCuePositions.length - 1].element;\n                  marginRight = parseInt(element.css(\"marginRight\"), 10);\n                  left = element.position().left + outerWidth(element) + marginRight;\n                } else {\n                  left = 0;\n                }\n              },\n              drag: that._drag.bind(that)\n            });\n            that.dataSource = that.options.dataSource;\n\n            if (that.dataSource && that._refreshHandler) {\n              that.dataSource.unbind(CHANGE, that._refreshHandler);\n            } else {\n              that._refreshHandler = that.refresh.bind(that);\n            }\n\n            if (that.dataSource) {\n              that.dataSource.bind(\"change\", that._refreshHandler);\n              that.refresh();\n            }\n          },\n          refresh: function () {\n            var that = this,\n                dataSource = that.dataSource;\n            var groups = dataSource.group() || [];\n            var fieldAttr = kendoAttr(FIELD);\n            var titleAttr = kendoAttr(TITLE);\n            var indicatorHtml;\n\n            if (that.groupContainer) {\n              that.groupContainer.empty();\n              each(groups, function (index, group) {\n                var field = group.field;\n                var dir = group.dir;\n                var element = that.element.find(that.options.filter).filter(function () {\n                  return $(this).attr(fieldAttr) === field;\n                });\n                indicatorHtml = that.buildIndicator(field, element.attr(titleAttr), dir);\n                that.groupContainer.append(indicatorHtml);\n\n                that._setIndicatorSortOptions(field, extend({}, that.options.sort, {\n                  dir: dir,\n                  compare: group.compare\n                }));\n              });\n            }\n\n            that._invalidateGroupContainer();\n          },\n          destroy: function () {\n            var that = this;\n            Widget.fn.destroy.call(that);\n            that.groupContainer.off(NS);\n\n            if (that.groupContainer.data(\"kendoDropTarget\")) {\n              that.groupContainer.data(\"kendoDropTarget\").destroy();\n            }\n\n            if (that.groupContainer.data(\"kendoDraggable\")) {\n              that.groupContainer.data(\"kendoDraggable\").destroy();\n            }\n\n            if (!that.options.draggable) {\n              that.draggable.destroy();\n            }\n\n            if (that.dataSource && that._refreshHandler) {\n              that.dataSource.unbind(\"change\", that._refreshHandler);\n              that._refreshHandler = null;\n            }\n\n            that.groupContainer = that.element = that.draggable = null;\n          },\n          events: [\"change\"],\n          options: {\n            name: \"Groupable\",\n            filter: \"th\",\n            draggableElements: \"th\",\n            messages: {\n              empty: \"Drag a column header and drop it here to group by that column\"\n            },\n            sort: {\n              dir: ASCENDING,\n              compare: null\n            }\n          },\n          indicator: function (field) {\n            var indicators = $(\".k-group-indicator\", this.groupContainer);\n            return $.grep(indicators, function (item) {\n              return $(item).attr(kendo.attr(\"field\")) === field;\n            })[0];\n          },\n          buildIndicator: function (field, title, dir) {\n            var that = this;\n            var indicator = indicatorTmpl({\n              ns: kendo.ns,\n              field: field.replace(/\"/g, \"'\"),\n              title: title,\n              dir: dir || (that.options.sort || {}).dir || ASCENDING\n            });\n            return indicator;\n          },\n          _setIndicatorSortOptions: function (field, options) {\n            var indicator = $(this.indicator(field));\n            indicator.data(GROUP_SORT, options);\n          },\n          aggregates: function () {\n            var that = this;\n            var names;\n            var idx;\n            var length;\n            return that.element.find(that.options.filter).map(function () {\n              var cell = $(this),\n                  aggregate = cell.attr(kendo.attr(\"aggregates\")),\n                  member = cell.attr(kendo.attr(\"field\"));\n\n              if (aggregate && aggregate !== \"\") {\n                names = aggregate.split(\",\");\n                aggregate = [];\n\n                for (idx = 0, length = names.length; idx < length; idx++) {\n                  aggregate.push({\n                    field: member,\n                    aggregate: names[idx]\n                  });\n                }\n              }\n\n              return aggregate;\n            }).toArray();\n          },\n          descriptors: function () {\n            var that = this,\n                indicators = $(\".k-group-indicator\", that.groupContainer),\n                field,\n                aggregates = that.aggregates();\n            return $.map(indicators, function (item) {\n              item = $(item);\n              field = item.attr(kendo.attr(\"field\"));\n              var sortOptions = that.options.sort || {};\n              var indicatorSortOptions = item.data(GROUP_SORT) || {};\n              return {\n                field: field,\n                dir: item.attr(kendo.attr(\"dir\")),\n                aggregates: aggregates || [],\n                compare: indicatorSortOptions.compare || sortOptions.compare\n              };\n            });\n          },\n          _removeIndicator: function (indicator) {\n            var that = this;\n            indicator.off();\n            indicator.removeData();\n            indicator.remove();\n\n            that._invalidateGroupContainer();\n\n            that._change();\n          },\n          _change: function () {\n            var that = this;\n\n            if (that.dataSource) {\n              var descriptors = that.descriptors();\n\n              if (that.trigger(\"change\", {\n                groups: descriptors\n              })) {\n                that.refresh();\n                return;\n              }\n\n              that.dataSource.group(descriptors);\n            }\n          },\n          _dropCuePosition: function (position) {\n            var dropCuePositions = this._dropCuePositions;\n\n            if (!dropCue.is(\":visible\") || dropCuePositions.length === 0) {\n              return;\n            }\n\n            position = Math.ceil(position);\n            var lastCuePosition = dropCuePositions[dropCuePositions.length - 1],\n                left = lastCuePosition.left,\n                right = lastCuePosition.right,\n                marginLeft = parseInt(lastCuePosition.element.css(\"marginLeft\"), 10),\n                marginRight = parseInt(lastCuePosition.element.css(\"marginRight\"), 10);\n\n            if (position >= right && !isRtl || position < left && isRtl) {\n              position = {\n                left: lastCuePosition.element.position().left + (!isRtl ? outerWidth(lastCuePosition.element) + marginRight : -marginLeft),\n                element: lastCuePosition.element,\n                before: false\n              };\n            } else {\n              position = $.grep(dropCuePositions, function (item) {\n                return item.left <= position && position <= item.right || isRtl && position > item.right;\n              })[0];\n\n              if (position) {\n                position = {\n                  left: isRtl ? position.element.position().left + outerWidth(position.element) + marginRight : position.element.position().left - marginLeft,\n                  element: position.element,\n                  before: true\n                };\n              }\n            }\n\n            return position;\n          },\n          _drag: function (event) {\n            var position = this._dropCuePosition(event.x.location);\n\n            if (position) {\n              dropCue.css({\n                left: position.left,\n                right: \"auto\"\n              });\n            }\n          },\n          _canDrag: function (element) {\n            var field = element.attr(kendo.attr(\"field\"));\n            return element.attr(kendo.attr(\"groupable\")) != \"false\" && field && (element.hasClass(\"k-group-indicator\") || !this.indicator(field));\n          },\n          _canDrop: function (source, target, position) {\n            var next = source.next(),\n                result = source[0] !== target[0] && (!next[0] || target[0] !== next[0] || !isRtl && position > next.position().left || isRtl && position < next.position().left);\n            return result;\n          },\n          _dragEnd: function (draggable) {\n            var that = this,\n                field = draggable.currentTarget.attr(kendo.attr(\"field\")),\n                sourceIndicator = that.indicator(field);\n\n            if (draggable !== that.options.draggable && !draggable.dropped && sourceIndicator) {\n              that._removeIndicator($(sourceIndicator));\n            }\n\n            that._dragCancel();\n          },\n          _dragCancel: function () {\n            dropCue.remove();\n            this._dropCuePositions = [];\n          },\n          _intializePositions: function () {\n            var that = this,\n                indicators = $(\".k-group-indicator\", that.groupContainer),\n                left;\n            that._dropCuePositions = $.map(indicators, function (item) {\n              item = $(item);\n              left = kendo.getOffset(item).left;\n              return {\n                left: parseInt(left, 10),\n                right: parseInt(left + outerWidth(item), 10),\n                element: item\n              };\n            });\n          },\n          _invalidateGroupContainer: function () {\n            var groupContainer = this.groupContainer;\n\n            if (groupContainer && groupContainer.is(\":empty\")) {\n              groupContainer.html(this.options.messages.empty);\n            }\n          }\n        });\n        kendo.ui.plugin(Groupable);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}