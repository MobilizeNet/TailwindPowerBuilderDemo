{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1123);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1079:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.list\");\n    /***/\n  },\n\n  /***/\n  1080:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.mobile.scroller\");\n    /***/\n  },\n\n  /***/\n  1081:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.virtuallist\");\n    /***/\n  },\n\n  /***/\n  1089:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.html.button\");\n    /***/\n  },\n\n  /***/\n  1123:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1079), __webpack_require__(1080), __webpack_require__(1081), __webpack_require__(1089)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"combobox\",\n        name: \"ComboBox\",\n        category: \"web\",\n        description: \"The ComboBox widget allows the selection from pre-defined values or entering a new value.\",\n        depends: [\"list\", \"html.button\"],\n        features: [{\n          id: \"mobile-scroller\",\n          name: \"Mobile scroller\",\n          description: \"Support for kinetic scrolling in mobile device\",\n          depends: [\"mobile.scroller\"]\n        }, {\n          id: \"virtualization\",\n          name: \"VirtualList\",\n          description: \"Support for virtualization\",\n          depends: [\"virtuallist\"]\n        }]\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            html = kendo.html,\n            List = ui.List,\n            Select = ui.Select,\n            caret = kendo.caret,\n            support = kendo.support,\n            placeholderSupported = support.placeholder,\n            activeElement = kendo._activeElement,\n            keys = kendo.keys,\n            ns = \".kendoComboBox\",\n            nsFocusEvent = ns + \"FocusEvent\",\n            CLICK = \"click\" + ns,\n            MOUSEDOWN = \"mousedown\" + ns,\n            DISABLED = \"disabled\",\n            READONLY = \"readonly\",\n            CHANGE = \"change\",\n            LOADING = \"k-i-loading k-input-loading-icon\",\n            FOCUSED = \"k-focus\",\n            STATEDISABLED = \"k-disabled\",\n            ARIA_DISABLED = \"aria-disabled\",\n            ARIA_READONLY = \"aria-readonly\",\n            AUTOCOMPLETEVALUE = \"off\",\n            STATE_FILTER = \"filter\",\n            STATE_ACCEPT = \"accept\",\n            STATE_REBIND = \"rebind\",\n            HOVEREVENTS = \"mouseenter\" + ns + \" mouseleave\" + ns,\n            newLineRegEx = /(\\r\\n|\\n|\\r)/gm,\n            NON_PRINTABLE_KEYS = [16, 17, 18, 19, 20, 33, 34, 37, 39, 45, 91, 92, 144, 145];\n        var ComboBox = Select.extend({\n          init: function (element, options) {\n            var that = this,\n                text,\n                disabled;\n            that.ns = ns;\n            options = Array.isArray(options) ? {\n              dataSource: options\n            } : options;\n            Select.fn.init.call(that, element, options);\n            options = that.options;\n            element = that.element.on(\"focus\" + ns, that._focusHandler.bind(that));\n            options.placeholder = options.placeholder || element.attr(\"placeholder\");\n\n            that._reset();\n\n            that._wrapper();\n\n            that._input();\n\n            that._clearButton();\n\n            that._tabindex(that.input);\n\n            that._popup();\n\n            that._dataSource();\n\n            that._ignoreCase();\n\n            that._enable();\n\n            that._attachFocusEvents();\n\n            that._oldIndex = that.selectedIndex = -1;\n\n            that._aria();\n\n            that._initialIndex = options.index;\n            that.requireValueMapper(that.options);\n\n            that._initList();\n\n            that._cascade();\n\n            if (options.autoBind) {\n              that._filterSource();\n            } else {\n              text = options.text;\n\n              if (!text && that._isSelect) {\n                text = element.children(\":selected\").text();\n              }\n\n              if (text) {\n                that._setText(text);\n              }\n            }\n\n            if (!text) {\n              that._placeholder();\n            }\n\n            disabled = $(that.element).parents(\"fieldset\").is(':disabled');\n\n            if (disabled) {\n              that.enable(false);\n            }\n\n            kendo.notify(that);\n\n            that._toggleCloseVisibility();\n\n            that._applyCssClasses();\n          },\n          options: {\n            name: \"ComboBox\",\n            enabled: true,\n            index: -1,\n            text: null,\n            value: null,\n            autoBind: true,\n            delay: 200,\n            dataTextField: \"\",\n            dataValueField: \"\",\n            minLength: 1,\n            enforceMinLength: false,\n            height: 200,\n            highlightFirst: true,\n            filter: \"none\",\n            placeholder: \"\",\n            suggest: false,\n            cascadeFrom: \"\",\n            cascadeFromField: \"\",\n            cascadeFromParentField: \"\",\n            ignoreCase: true,\n            animation: {},\n            virtual: false,\n            template: null,\n            groupTemplate: \"#:data#\",\n            fixedGroupTemplate: \"#:data#\",\n            clearButton: true,\n            syncValueAndText: true,\n            autoWidth: false,\n            popup: null,\n            size: \"medium\",\n            fillMode: \"solid\",\n            rounded: \"medium\"\n          },\n          events: [\"open\", \"close\", CHANGE, \"select\", \"filtering\", \"dataBinding\", \"dataBound\", \"cascade\", \"set\"],\n          setOptions: function (options) {\n            var listOptions = this._listOptions(options);\n\n            Select.fn.setOptions.call(this, options);\n            this.listView.setOptions(listOptions);\n\n            this._accessors();\n\n            this._aria();\n\n            this._clearButton();\n          },\n          destroy: function () {\n            var that = this;\n            that.input.off(ns);\n            that.input.off(nsFocusEvent);\n            that.element.off(ns);\n            that.wrapper.off(ns);\n            clearTimeout(that._pasteTimeout);\n\n            that._arrow.off(CLICK + \" \" + MOUSEDOWN);\n\n            that._clear.off(CLICK + \" \" + MOUSEDOWN);\n\n            Select.fn.destroy.call(that);\n          },\n          _isValueChanged: function (value) {\n            return value !== List.unifyType(this._old, typeof value) && value !== List.unifyType(this._oldText, typeof value);\n          },\n          _change: function () {\n            var that = this;\n            var text = that.text();\n            var hasText = text && text !== that._oldText && text !== that.options.placeholder;\n            var index = that.selectedIndex;\n            var isCustom = index === -1;\n\n            if (!that.options.syncValueAndText && !that.value() && isCustom && hasText) {\n              that._old = \"\";\n              that._oldIndex = index;\n              that._oldText = text;\n\n              if (!that._typing) {\n                // trigger the DOM change event so any subscriber gets notified\n                that.element.trigger(CHANGE);\n              }\n\n              that.trigger(CHANGE);\n              that._typing = false;\n              return;\n            }\n\n            Select.fn._change.call(that);\n\n            that._oldText = that.text && that.text();\n\n            that._toggleCloseVisibility();\n          },\n          _attachFocusEvents: function () {\n            var that = this;\n            that.input.on(\"focus\" + nsFocusEvent, that._inputFocus.bind(that)).on(\"focusout\" + nsFocusEvent, that._inputFocusout.bind(that));\n          },\n          _focusHandler: function (e) {\n            if (e.target === this.element[0]) {\n              this.input.trigger(\"focus\");\n            }\n          },\n          _arrowClick: function () {\n            this._toggle();\n          },\n          _inputFocus: function () {\n            this.wrapper.addClass(FOCUSED);\n\n            this._placeholder(false);\n          },\n          _inputFocusout: function (e) {\n            var that = this;\n            var value = that.value();\n            var isClearButton = !$(e.relatedTarget).closest('.k-clear-value').length;\n            that._userTriggered = true;\n            that.wrapper.removeClass(FOCUSED);\n            clearTimeout(that._typingTimeout);\n            that._typingTimeout = null;\n\n            if (isClearButton) {\n              that.text(that.text());\n            }\n\n            var item = that._focus();\n\n            var dataItem = this.listView.dataItemByIndex(this.listView.getElementIndex(item));\n\n            if (value !== that.value() && that.trigger(\"select\", {\n              dataItem: dataItem,\n              item: item\n            })) {\n              that.value(value);\n              return;\n            }\n\n            that._placeholder();\n\n            that._valueBeforeCascade = that._old;\n\n            if (isClearButton) {\n              that._blur();\n\n              that.element.trigger(\"blur\");\n            }\n          },\n          _inputPaste: function () {\n            var that = this;\n            clearTimeout(that._pasteTimeout);\n            that._pasteTimeout = null;\n            that._pasteTimeout = setTimeout(function () {\n              that.search();\n            });\n          },\n          _editable: function (options) {\n            var that = this,\n                disable = options.disable,\n                readonly = options.readonly,\n                wrapper = that.wrapper.off(ns),\n                input = that.element.add(that.input.off(ns)),\n                arrow = that._arrow.off(CLICK + \" \" + MOUSEDOWN),\n                clear = that._clear;\n\n            if (!readonly && !disable) {\n              wrapper.removeClass(STATEDISABLED).on(HOVEREVENTS, that._toggleHover);\n              input.prop(DISABLED, false).prop(READONLY, false).attr(ARIA_DISABLED, false).attr(ARIA_READONLY, false);\n              arrow.on(CLICK, that._arrowClick.bind(that)).on(MOUSEDOWN, function (e) {\n                e.preventDefault();\n              });\n              clear.on(CLICK + \" touchend\" + ns, that._clearValue.bind(that));\n              that.input.on(\"keydown\" + ns, that._keydown.bind(that)).on(\"input\" + ns, that._search.bind(that)).on(\"paste\" + ns, that._inputPaste.bind(that));\n              that.wrapper.on(CLICK + ns, that._focusHandler.bind(that));\n            } else {\n              wrapper.addClass(disable ? STATEDISABLED : \"\").removeClass(disable ? \"\" : STATEDISABLED);\n              input.attr(DISABLED, disable).attr(READONLY, readonly).attr(ARIA_DISABLED, disable).attr(ARIA_READONLY, readonly);\n            }\n\n            that._toggleCloseVisibility();\n          },\n          open: function () {\n            var that = this;\n            var state = that._state;\n            var isFiltered = that.dataSource.filter() ? that.dataSource.filter().filters.length > 0 : false;\n            var reinitialized = !that.ul.find(that.listView.focus()).length;\n\n            if (that.popup.visible()) {\n              return;\n            }\n\n            if (!that.listView.bound() && state !== STATE_FILTER || state === STATE_ACCEPT) {\n              that._open = true;\n              that._state = STATE_REBIND;\n\n              if (that.options.minLength !== 1 && !isFiltered || isFiltered && that.value() && that.selectedIndex === -1) {\n                that.refresh();\n\n                that._openPopup();\n\n                if (!this.options.virtual) {\n                  that.listView.bound(false);\n                }\n              } else {\n                that._filterSource();\n              }\n            } else if (that._allowOpening()) {\n              // In some cases when the popup is opened resize is triggered which will cause it to close\n              // Setting the below flag will prevent this from happening\n              that.popup._hovered = true;\n\n              that._openPopup();\n\n              if (that.options.virtual) {\n                that._focusItem();\n              } else if (reinitialized && that.options.highlightFirst) {\n                that.listView.focus(0);\n              }\n            }\n          },\n          _scrollToFocusedItem: function () {\n            var listView = this.listView;\n            listView.scrollToIndex(listView.getElementIndex(listView.focus()));\n          },\n          _openPopup: function () {\n            this.popup.one(\"activate\", this._scrollToFocusedItem.bind(this));\n            this.popup.open();\n          },\n          _updateSelectionState: function () {\n            var that = this;\n            var text = that.options.text;\n            var value = that.options.value;\n\n            if (that.listView.isFiltered()) {\n              return;\n            }\n\n            if (that.selectedIndex === -1) {\n              if (text === undefined || text === null) {\n                text = value;\n              }\n\n              that._accessor(value);\n\n              that.input.val(text || that.input.val());\n\n              that._placeholder();\n            } else if (that._oldIndex === -1) {\n              that._oldIndex = that.selectedIndex;\n            }\n          },\n          _buildOptions: function (data) {\n            var that = this;\n\n            if (!that._isSelect) {\n              return;\n            }\n\n            var custom = that._customOption;\n\n            if (that._state === STATE_REBIND) {\n              that._state = \"\";\n            }\n\n            that._customOption = undefined;\n\n            that._options(data, \"\", that.value());\n\n            if (custom && custom[0].selected && !that.listView._emptySearch) {\n              that._custom(custom.val());\n            }\n          },\n          _updateSelection: function () {\n            var that = this;\n            var listView = that.listView;\n            var initialIndex = that._initialIndex;\n            var hasInitialIndex = initialIndex !== null && initialIndex > -1;\n            var filtered = that._state === STATE_FILTER;\n\n            if (filtered) {\n              $(listView.focus()).removeClass(\"k-selected\");\n              return;\n            }\n\n            if (that._fetch) {\n              return;\n            }\n\n            if (!listView.value().length) {\n              if (hasInitialIndex) {\n                that.select(initialIndex);\n              } else if (that._accessor()) {\n                listView.value(that._accessor());\n              }\n            }\n\n            that._initialIndex = null;\n            var dataItem = listView.selectedDataItems()[0];\n\n            if (!dataItem) {\n              return;\n            }\n\n            if (that._value(dataItem) !== that.value()) {\n              that._custom(that._value(dataItem));\n            } else if (that._value(dataItem) !== that.element[0].value) {\n              that._accessor(that._value(dataItem));\n            }\n\n            if (that.text() && that.text() !== that._text(dataItem)) {\n              that._selectValue(dataItem);\n            }\n          },\n          _updateItemFocus: function () {\n            var listView = this.listView;\n\n            if (!this.options.highlightFirst) {\n              listView.focus(-1);\n            } else if (!listView.focus() && !listView.focusIndex()) {\n              listView.focus(0);\n            }\n          },\n          _listBound: function () {\n            var that = this;\n            var isActive = that.input[0] === activeElement();\n            var data = that.dataSource.flatView();\n            var skip = that.listView.skip();\n            var length = data.length;\n            var groupsLength = that.dataSource._group ? that.dataSource._group.length : 0;\n            var isFirstPage = skip === undefined || skip === 0;\n            that._presetValue = false;\n\n            that._renderFooter();\n\n            that._renderNoData();\n\n            that._toggleNoData(!length);\n\n            that._toggleHeader(!!groupsLength && !!length);\n\n            that._resizePopup();\n\n            that.popup.position();\n\n            that._buildOptions(data);\n\n            that._updateSelection();\n\n            if (data.length && isFirstPage) {\n              that._updateItemFocus();\n\n              if (that.options.suggest && isActive && that.input.val()) {\n                that.suggest(data[0]);\n              }\n            }\n\n            if (that._open) {\n              that._open = false;\n\n              if (that._typingTimeout && !isActive) {\n                that.popup.close();\n              } else {\n                that.toggle(that._allowOpening());\n              }\n\n              that._typingTimeout = null;\n            }\n\n            that._hideBusy();\n\n            that.trigger(\"dataBound\");\n          },\n          _listChange: function () {\n            this._selectValue(this.listView.selectedDataItems()[0]);\n\n            if (this._presetValue) {\n              this._oldIndex = this.selectedIndex;\n            }\n          },\n          _get: function (candidate) {\n            var data, found, idx;\n\n            if (typeof candidate === \"function\") {\n              data = this.dataSource.flatView();\n\n              for (idx = 0; idx < data.length; idx++) {\n                if (candidate(data[idx])) {\n                  candidate = idx;\n                  found = true;\n                  break;\n                }\n              }\n\n              if (!found) {\n                candidate = -1;\n              }\n            }\n\n            if (!this.dataSource.total() && !candidate) {\n              candidate = -1;\n            }\n\n            return candidate;\n          },\n          _select: function (candidate, keepState) {\n            var that = this;\n            candidate = that._get(candidate);\n\n            if (candidate === -1) {\n              that.input[0].value = \"\";\n\n              that._accessor(\"\");\n            }\n\n            return that.listView.select(candidate).done(function () {\n              if (!keepState && that._state === STATE_FILTER) {\n                that._state = STATE_ACCEPT;\n              }\n\n              that._toggleCloseVisibility();\n            });\n          },\n          _selectValue: function (dataItem) {\n            var idx = this.listView.select();\n            var value = \"\";\n            var text = \"\";\n            idx = idx[idx.length - 1];\n\n            if (idx === undefined) {\n              idx = -1;\n            }\n\n            this.selectedIndex = idx;\n\n            if (this.listView.isFiltered() && idx !== -1) {\n              this._valueBeforeCascade = this._old;\n            }\n\n            if (idx === -1 && !dataItem) {\n              if (this.options.syncValueAndText) {\n                if (this.options.dataTextField === this.options.dataValueField) {\n                  text = this._accessor();\n                } else {\n                  text = this.input[0].value;\n                }\n\n                value = text;\n              } else {\n                text = this.text();\n              }\n\n              this.listView.focus(-1);\n            } else {\n              if (dataItem || dataItem === 0) {\n                value = this._dataValue(dataItem);\n                text = this._text(dataItem);\n              }\n\n              if (value === null) {\n                value = \"\";\n              }\n            }\n\n            this._setDomInputValue(text);\n\n            this._accessor(value !== undefined ? value : text, idx);\n\n            this._placeholder();\n\n            this._triggerCascade();\n          },\n          _setDomInputValue: function (text) {\n            var that = this;\n            var currentCaret = caret(this.input);\n            var caretStart;\n\n            if (currentCaret && currentCaret.length) {\n              caretStart = currentCaret[0];\n            }\n\n            this._prev = this.input[0].value = text;\n\n            if (caretStart && this.selectedIndex === -1) {\n              var mobile = support.mobileOS;\n\n              if (mobile.wp || mobile.android) {\n                // without the timeout the caret is at the end of the input\n                setTimeout(function () {\n                  that.input[0].setSelectionRange(caretStart, caretStart);\n                }, 0);\n              } else {\n                this.input[0].setSelectionRange(caretStart, caretStart);\n              }\n            }\n          },\n          refresh: function () {\n            this.listView.refresh();\n          },\n          _toggleCloseVisibility: function () {\n            var preventShow = this.element.is(\":disabled\") || this.element.is(\"[readonly]\");\n\n            if (this.text() && !preventShow) {\n              this._showClear();\n            } else {\n              this._hideClear();\n            }\n          },\n          suggest: function (word) {\n            var that = this;\n            var element = that.input[0];\n            var value = that.text();\n            var caretIdx = caret(element)[0];\n            var key = that._last;\n            var idx;\n            var accentFoldingFiltering = that.dataSource.options.accentFoldingFiltering;\n\n            if (key == keys.BACKSPACE || key == keys.DELETE) {\n              that._last = undefined;\n              return;\n            }\n\n            word = word || \"\";\n\n            if (typeof word !== \"string\") {\n              if (word[0]) {\n                word = that.dataSource.view()[List.inArray(word[0], that.ul[0])];\n              }\n\n              word = word ? that._text(word) : \"\";\n            }\n\n            if (caretIdx <= 0) {\n              caretIdx = (accentFoldingFiltering ? value.toLocaleLowerCase(accentFoldingFiltering) : value.toLowerCase()).indexOf(accentFoldingFiltering ? word.toLocaleLowerCase(accentFoldingFiltering) : word.toLowerCase()) + 1;\n            }\n\n            if (word) {\n              word = word.toString();\n              idx = (accentFoldingFiltering ? word.toLocaleLowerCase(accentFoldingFiltering) : word.toLowerCase()).indexOf(accentFoldingFiltering ? value.toLocaleLowerCase(accentFoldingFiltering) : value.toLowerCase());\n\n              if (idx > -1) {\n                value += word.substring(idx + value.length);\n              }\n            } else {\n              value = value.substring(0, caretIdx);\n            }\n\n            if (value.length !== caretIdx || !word) {\n              element.value = value;\n\n              if (element === activeElement()) {\n                caret(element, caretIdx, value.length);\n              }\n            }\n          },\n          text: function (text) {\n            text = text === null ? \"\" : text;\n            var that = this;\n            var input = that.input[0];\n            var ignoreCase = that.options.ignoreCase;\n            var loweredText = text;\n            var dataItem;\n            var value;\n\n            if (text === undefined) {\n              return input.value;\n            }\n\n            if (that.options.autoBind === false && !that.listView.bound()) {\n              that._setText(text);\n\n              return;\n            }\n\n            dataItem = that.dataItem();\n\n            if (dataItem && that._text(dataItem).replace && that._text(dataItem).replace(newLineRegEx, \"\") === text) {\n              value = that._value(dataItem);\n\n              if (value === List.unifyType(that._old, typeof value)) {\n                that._triggerCascade();\n\n                return;\n              }\n            }\n\n            if (ignoreCase) {\n              loweredText = loweredText.toLowerCase();\n            }\n\n            if (that.dataItem() && that._text(that.dataItem()) === text) {\n              return;\n            }\n\n            that._select(function (data) {\n              data = that._text(data);\n\n              if (ignoreCase) {\n                data = (data + \"\").toLowerCase();\n              }\n\n              return data === loweredText;\n            }).done(function () {\n              if (that.selectedIndex < 0) {\n                input.value = text;\n\n                if (that.options.syncValueAndText) {\n                  that._accessor(text);\n                }\n\n                that._cascadeTriggered = true;\n\n                that._triggerCascade();\n              }\n\n              that._prev = input.value;\n            });\n\n            that._toggleCloseVisibility();\n          },\n          toggle: function (toggle) {\n            this._toggle(toggle, true);\n          },\n          value: function (value) {\n            var that = this;\n            var options = that.options;\n            var listView = that.listView;\n\n            if (value === undefined) {\n              value = that._accessor() || that.listView.value()[0];\n              return value === undefined || value === null ? \"\" : value;\n            }\n\n            that.requireValueMapper(that.options, value);\n            that.trigger(\"set\", {\n              value: value\n            });\n\n            if (value === options.value && that.input.val() === options.text && !that.options.cascadeFrom) {\n              return;\n            }\n\n            that._accessor(value);\n\n            if (that._isFilterEnabled() && listView.bound() && listView.isFiltered()) {\n              that._clearFilter();\n            } else {\n              that._fetchData();\n            }\n\n            listView.value(value).done(function () {\n              if (that.selectedIndex === -1 && (!listView._selectedDataItems || !listView._selectedDataItems.length)) {\n                that._accessor(value);\n\n                that.input.val(value);\n\n                that._placeholder(true);\n              }\n\n              if (that._userTriggered) {\n                that._old = that._accessor();\n              } else {\n                that._old = that._valueBeforeCascade = that._accessor();\n              }\n\n              that._oldIndex = that.selectedIndex;\n              that._prev = that._oldText = that.input.val();\n\n              if (that._state === STATE_FILTER) {\n                that._state = STATE_ACCEPT;\n              }\n\n              that._toggleCloseVisibility();\n            });\n          },\n          _hideBusy: function () {\n            var that = this;\n            clearTimeout(that._busy);\n\n            that._arrowIcon.removeClass(LOADING);\n\n            that._focused.attr(\"aria-busy\", false);\n\n            that._busy = null;\n\n            that._toggleCloseVisibility();\n          },\n          _click: function (e) {\n            var that = this;\n            var item = e.item;\n            var dataItem = that.listView.dataItemByIndex(that.listView.getElementIndex(item));\n            var shouldTrigger = true;\n            e.preventDefault();\n\n            if (dataItem) {\n              shouldTrigger = that._value(dataItem) !== List.unifyType(that.value(), typeof that._value(dataItem));\n\n              if (!shouldTrigger) {\n                that.input.val(that._text(dataItem));\n              }\n            }\n\n            if (shouldTrigger && that.trigger(\"select\", {\n              dataItem: dataItem,\n              item: item\n            })) {\n              that.close();\n              return;\n            }\n\n            that._userTriggered = true;\n\n            that._select(item).done(function () {\n              that._blur();\n            });\n          },\n          _syncValueAndText: function () {\n            return this.options.syncValueAndText;\n          },\n          _inputValue: function () {\n            return this.text();\n          },\n          _searchByWord: function (word) {\n            var that = this;\n            var options = that.options;\n            var dataSource = that.dataSource;\n            var ignoreCase = options.ignoreCase;\n\n            var predicate = function (dataItem) {\n              var text = that._text(dataItem);\n\n              if (text !== undefined) {\n                text = text + \"\";\n\n                if (text !== \"\" && word === \"\") {\n                  return false;\n                }\n\n                if (ignoreCase) {\n                  text = text.toLowerCase();\n                }\n\n                return text.indexOf(word) === 0;\n              }\n            };\n\n            if (ignoreCase) {\n              word = word.toLowerCase();\n            }\n\n            if (!that.ul[0].firstChild) {\n              dataSource.one(CHANGE, function () {\n                if (dataSource.view()[0]) {\n                  that.search(word);\n                }\n              }).fetch();\n              return;\n            }\n\n            this.listView.focus(this._get(predicate));\n            var current = this.listView.focus();\n\n            if (current) {\n              if (options.suggest) {\n                that.suggest(current);\n              }\n\n              this.open();\n            }\n\n            if (this.options.highlightFirst && !word) {\n              this.listView.focusFirst();\n            }\n          },\n          _input: function () {\n            var that = this,\n                element = that.element.removeClass(\"k-input-inner\")[0],\n                accessKey = element.accessKey,\n                wrapper = that.wrapper,\n                SELECTOR = \"input.k-input-inner\",\n                name = element.name || \"\",\n                options = that.options,\n                input,\n                maxLength,\n                arrowBtn;\n\n            if (name) {\n              name = 'name=\"' + name + '_input\" ';\n            }\n\n            input = wrapper.find(SELECTOR);\n\n            if (!input[0]) {\n              arrowBtn = html.renderButton('<button type=\"button\" class=\"k-input-button\" aria-label=\"expand combobox\"></button>', {\n                icon: \"arrow-s\",\n                size: options.size,\n                fillMode: options.fillMode,\n                shape: null,\n                rounded: null\n              });\n              wrapper.append('<input ' + name + 'class=\"k-input-inner\" type=\"text\" autocomplete=\"' + AUTOCOMPLETEVALUE + '\"/>').append(arrowBtn).append(that.element);\n              input = wrapper.find(SELECTOR);\n            }\n\n            input[0].style.cssText = element.style.cssText;\n            input[0].title = element.title;\n            maxLength = parseInt(this.element.prop(\"maxlength\") || this.element.attr(\"maxlength\"), 10);\n\n            if (maxLength > -1) {\n              input[0].maxLength = maxLength;\n            }\n\n            input.addClass(element.className).css({\n              width: \"\",\n              height: element.style.height,\n              position: \"\"\n            }).attr({\n              \"role\": \"combobox\",\n              \"aria-expanded\": false\n            }).show();\n\n            if (placeholderSupported) {\n              input.attr(\"placeholder\", that.options.placeholder);\n            }\n\n            if (accessKey) {\n              element.accessKey = \"\";\n              input[0].accessKey = accessKey;\n            }\n\n            that._focused = that.input = input;\n            that._arrow = wrapper.find(\".k-input-button\").attr({\n              \"role\": \"button\",\n              \"tabIndex\": -1\n            });\n            that._arrowIcon = that._arrow.find(\".k-icon\");\n\n            if (element.id) {\n              that._arrow.attr(\"aria-controls\", that.ul[0].id);\n            }\n          },\n          _clearButton: function () {\n            List.fn._clearButton.call(this);\n\n            if (this.options.clearButton) {\n              this._clear.insertAfter(this.input);\n\n              this.wrapper.addClass(\"k-combobox-clearable\");\n            }\n          },\n          _keydown: function (e) {\n            var that = this,\n                key = e.keyCode,\n                textField = that.options.dataTextField || \"text\",\n                isFkey = key >= 112 && key <= 135,\n                isNonPrintableKey = NON_PRINTABLE_KEYS.indexOf(key) > -1;\n            that._last = key;\n            clearTimeout(that._typingTimeout);\n            that._typingTimeout = null;\n\n            if (key === keys.HOME) {\n              that._firstItem();\n            } else if (key === keys.END) {\n              that._lastItem();\n            } else if (key === keys.ENTER || key === keys.TAB && that.popup.visible()) {\n              var current = that.listView.focus();\n              var dataItem = that.dataItem();\n              var shouldTrigger = true;\n\n              if (!that.popup.visible() && (!dataItem || that.text() !== that._text(dataItem))) {\n                current = null;\n              }\n\n              if (current) {\n                if (that.popup.visible()) {\n                  e.preventDefault();\n                }\n\n                dataItem = that.listView.dataItemByIndex(that.listView.getElementIndex(current));\n\n                if (dataItem) {\n                  shouldTrigger = that._value(dataItem) !== List.unifyType(that.value(), typeof that._value(dataItem));\n                }\n\n                if (shouldTrigger && that.trigger(\"select\", {\n                  dataItem: dataItem,\n                  item: current\n                })) {\n                  return;\n                }\n\n                that._userTriggered = true;\n\n                that._select(current).done(function () {\n                  that._blur();\n\n                  that._valueBeforeCascade = that._old = that.value();\n                });\n              } else {\n                if (that._syncValueAndText() || that._isSelect) {\n                  if (!that.dataItem() || that.dataItem()[textField] !== that.input.val()) {\n                    that._accessor(that.input.val());\n                  }\n                }\n\n                if (that.options.highlightFirst) {\n                  that.listView.value(that.input.val());\n\n                  that._blur();\n                } else {\n                  that._oldText = that.text();\n                }\n              }\n            } else if (key != keys.TAB && !that._move(e) && !isNonPrintableKey && !isFkey && !e.ctrlKey) {\n              that._search();\n            } else if (key === keys.ESC && !that.popup.visible() && that.text()) {\n              that._clearValue();\n            }\n          },\n          _placeholder: function (show) {\n            if (placeholderSupported) {\n              return;\n            }\n\n            var that = this,\n                input = that.input,\n                placeholder = that.options.placeholder,\n                value;\n\n            if (placeholder) {\n              value = that.value();\n\n              if (show === undefined) {\n                show = !value;\n              }\n\n              input.toggleClass(\"k-readonly\", show);\n\n              if (!show) {\n                if (!value) {\n                  placeholder = \"\";\n                } else {\n                  return;\n                }\n              }\n\n              input.val(placeholder);\n\n              if (!placeholder && input[0] === activeElement()) {\n                caret(input[0], 0, 0);\n              }\n            }\n          },\n          _search: function () {\n            var that = this;\n            clearTimeout(that._typingTimeout);\n            that._typingTimeout = setTimeout(function () {\n              var value = that.text();\n\n              if (value !== \"\" && that._prev !== value) {\n                that._prev = value;\n\n                if (that.options.filter === \"none\" && that.options.virtual) {\n                  that.listView.select(-1);\n                }\n\n                that.search(value);\n\n                that._toggleCloseVisibility();\n              } else if (value === \"\" && that._prev !== \"\" && that._prev !== undefined) {\n                that._clearValue();\n\n                that._open = true;\n                that._state = STATE_REBIND;\n              }\n\n              that._typingTimeout = null;\n            }, that.options.delay);\n          },\n          _setText: function (text) {\n            this.input.val(text);\n            this._prev = text;\n          },\n          _wrapper: function () {\n            var that = this,\n                element = that.element,\n                wrapper = element.parent();\n\n            if (!wrapper.is(\"span.k-input\")) {\n              wrapper = element.hide().wrap(\"<span />\").parent();\n              wrapper[0].style.cssText = element[0].style.cssText;\n            }\n\n            that.wrapper = wrapper.addClass(\"k-input k-combobox\").addClass(element[0].className).removeClass('input-validation-error').css(\"display\", \"\");\n          },\n          _clearSelection: function (parent, isFiltered) {\n            var that = this;\n            var hasValue = parent.value();\n            var custom = hasValue && parent.selectedIndex === -1;\n\n            if (this.selectedIndex == -1 && this.value()) {\n              return;\n            }\n\n            if (isFiltered || !hasValue || custom) {\n              that.options.value = \"\";\n              that.value(\"\");\n            }\n          },\n          _preselect: function (value, text) {\n            this.input.val(text);\n\n            this._accessor(value);\n\n            this._old = this._accessor();\n            this._oldIndex = this.selectedIndex;\n            this.listView.setValue(value);\n\n            this._placeholder();\n\n            this._initialIndex = null;\n            this._presetValue = true;\n\n            this._toggleCloseVisibility();\n          },\n          _clearText: function () {\n            this._old = this.value();\n            this.text(\"\");\n          },\n          _clearValue: function () {\n            Select.fn._clearValue.call(this);\n\n            this.input.trigger(\"focus\");\n          }\n        });\n        ui.plugin(ComboBox);\n        kendo.cssProperties.registerPrefix(\"ComboBox\", \"k-input-\");\n        kendo.cssProperties.registerValues(\"ComboBox\", [{\n          prop: \"rounded\",\n          values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n        }]);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}