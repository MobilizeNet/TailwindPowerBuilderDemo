{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1190);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1063:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.data\");\n    /***/\n  },\n\n  /***/\n  1108:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.dataviz.themes\");\n    /***/\n  },\n\n  /***/\n  1112:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.userevents\");\n    /***/\n  },\n\n  /***/\n  1190:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1063), __webpack_require__(1112), __webpack_require__(1108)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"dataviz.treeMap\",\n        name: \"TreeMap\",\n        category: \"dataviz\",\n        description: \"The Kendo DataViz TreeMap\",\n        depends: [\"data\", \"userevents\", \"dataviz.themes\"]\n      };\n\n      (function ($, undefined) {\n        var math = Math,\n            isArray = Array.isArray,\n            kendo = window.kendo,\n            outerHeight = kendo._outerHeight,\n            outerWidth = kendo._outerWidth,\n            Class = kendo.Class,\n            Widget = kendo.ui.Widget,\n            template = kendo.template,\n            deepExtend = kendo.deepExtend,\n            HierarchicalDataSource = kendo.data.HierarchicalDataSource,\n            getter = kendo.getter,\n            dataviz = kendo.dataviz;\n        var NS = \".kendoTreeMap\",\n            CHANGE = \"change\",\n            DATA_BOUND = \"dataBound\",\n            ITEM_CREATED = \"itemCreated\",\n            MAX_VALUE = Number.MAX_VALUE,\n            MOUSEOVER_NS = \"mouseover\" + NS,\n            MOUSELEAVE_NS = \"mouseleave\" + NS,\n            UNDEFINED = \"undefined\";\n        var TreeMap = Widget.extend({\n          init: function (element, options) {\n            kendo.destroy(element);\n            $(element).empty();\n            Widget.fn.init.call(this, element, options);\n            this.wrapper = this.element;\n\n            this._initTheme(this.options);\n\n            this.element.addClass(\"k-widget k-treemap\");\n\n            this._setLayout();\n\n            this._originalOptions = deepExtend({}, this.options);\n\n            this._initDataSource();\n\n            this._attachEvents();\n\n            kendo.notify(this, dataviz.ui);\n          },\n          options: {\n            name: \"TreeMap\",\n            theme: \"default\",\n            autoBind: true,\n            textField: \"text\",\n            valueField: \"value\",\n            colorField: \"color\"\n          },\n          events: [DATA_BOUND, ITEM_CREATED],\n          _initTheme: function (options) {\n            var that = this,\n                themes = dataviz.ui.themes || {},\n                themeName = ((options || {}).theme || \"\").toLowerCase(),\n                themeOptions = (themes[themeName] || {}).treeMap;\n            that.options = deepExtend({}, themeOptions, options);\n          },\n          _attachEvents: function () {\n            this.element.on(MOUSEOVER_NS, this._mouseover.bind(this)).on(MOUSELEAVE_NS, this._mouseleave.bind(this));\n            this._resizeHandler = this.resize.bind(this, false);\n            kendo.onResize(this._resizeHandler);\n          },\n          _setLayout: function () {\n            if (this.options.type === \"horizontal\") {\n              this._layout = new SliceAndDice(false);\n              this._view = new SliceAndDiceView(this, this.options);\n            } else if (this.options.type === \"vertical\") {\n              this._layout = new SliceAndDice(true);\n              this._view = new SliceAndDiceView(this, this.options);\n            } else {\n              this._layout = new Squarified();\n              this._view = new SquarifiedView(this, this.options);\n            }\n          },\n          _initDataSource: function () {\n            var that = this,\n                options = that.options,\n                dataSource = options.dataSource;\n            that._dataChangeHandler = that._onDataChange.bind(that);\n            that.dataSource = HierarchicalDataSource.create(dataSource).bind(CHANGE, that._dataChangeHandler);\n\n            if (dataSource) {\n              if (that.options.autoBind) {\n                that.dataSource.fetch();\n              }\n            }\n          },\n          setDataSource: function (dataSource) {\n            var that = this;\n            that.dataSource.unbind(CHANGE, that._dataChangeHandler);\n            that.dataSource = dataSource.bind(CHANGE, that._dataChangeHandler);\n\n            if (dataSource) {\n              if (that.options.autoBind) {\n                that.dataSource.fetch();\n              }\n            }\n          },\n          _onDataChange: function (e) {\n            var node = e.node;\n            var items = e.items;\n            var options = this.options;\n            var item, i;\n\n            if (!node) {\n              this._cleanItems();\n\n              this.element.empty();\n              item = this._wrapItem(items[0]);\n\n              this._layout.createRoot(item, outerWidth(this.element), outerHeight(this.element), this.options.type === \"vertical\");\n\n              this._view.createRoot(item); // Reference of the root\n\n\n              this._root = item;\n              this._colorIdx = 0;\n            } else {\n              if (items.length) {\n                var root = this._getByUid(node.uid);\n\n                root.children = [];\n                items = new kendo.data.Query(items)._sortForGrouping(options.valueField, \"desc\");\n\n                for (i = 0; i < items.length; i++) {\n                  item = items[i];\n                  root.children.push(this._wrapItem(item));\n                }\n\n                var htmlSize = this._view.htmlSize(root);\n\n                this._layout.compute(root.children, root.coord, htmlSize);\n\n                this._setColors(root.children);\n\n                this._view.render(root);\n              }\n            }\n\n            for (i = 0; i < items.length; i++) {\n              items[i].load();\n            }\n\n            if (node) {\n              this.trigger(DATA_BOUND, {\n                node: node\n              });\n            }\n          },\n          _cleanItems: function () {\n            var that = this;\n            that.angular(\"cleanup\", function () {\n              return {\n                elements: that.element.find(\".k-leaf div,.k-treemap-title,.k-treemap-title-vertical\")\n              };\n            });\n          },\n          _setColors: function (items) {\n            var colors = this.options.colors;\n            var colorIdx = this._colorIdx;\n            var color = colors[colorIdx % colors.length];\n            var colorRange, item;\n\n            if (isArray(color)) {\n              colorRange = colorsByLength(color[0], color[1], items.length);\n            }\n\n            var leafNodes = false;\n\n            for (var i = 0; i < items.length; i++) {\n              item = items[i];\n\n              if (!defined(item.color)) {\n                if (colorRange) {\n                  item.color = colorRange[i];\n                } else {\n                  item.color = color;\n                }\n              }\n\n              if (!item.dataItem.hasChildren) {\n                leafNodes = true;\n              }\n            }\n\n            if (leafNodes) {\n              this._colorIdx++;\n            }\n          },\n          _contentSize: function (root) {\n            this.view.renderHeight(root);\n          },\n          _wrapItem: function (item) {\n            var wrap = {};\n\n            if (defined(this.options.valueField)) {\n              wrap.value = getField(this.options.valueField, item);\n            }\n\n            if (defined(this.options.colorField)) {\n              wrap.color = getField(this.options.colorField, item);\n            }\n\n            if (defined(this.options.textField)) {\n              wrap.text = getField(this.options.textField, item);\n            }\n\n            wrap.level = item.level();\n            wrap.dataItem = item;\n            return wrap;\n          },\n          _getByUid: function (uid) {\n            var items = [this._root];\n            var item;\n\n            while (items.length) {\n              item = items.pop();\n\n              if (item.dataItem.uid === uid) {\n                return item;\n              }\n\n              if (item.children) {\n                items = items.concat(item.children);\n              }\n            }\n          },\n          dataItem: function (node) {\n            var uid = $(node).attr(kendo.attr(\"uid\")),\n                dataSource = this.dataSource;\n            return dataSource && dataSource.getByUid(uid);\n          },\n          findByUid: function (uid) {\n            return this.element.find(\".k-treemap-tile[\" + kendo.attr(\"uid\") + \"='\" + uid + \"']\");\n          },\n          _mouseover: function (e) {\n            var target = $(e.target);\n\n            if (target.hasClass(\"k-leaf\")) {\n              this._removeActiveState();\n\n              target.removeClass(\"k-state-hover\").addClass(\"k-state-hover\");\n            }\n          },\n          _removeActiveState: function () {\n            this.element.find(\".k-state-hover\").removeClass(\"k-state-hover\");\n          },\n          _mouseleave: function () {\n            this._removeActiveState();\n          },\n          destroy: function () {\n            Widget.fn.destroy.call(this);\n            this.element.off(NS);\n\n            if (this.dataSource) {\n              this.dataSource.unbind(CHANGE, this._dataChangeHandler);\n            }\n\n            this._root = null;\n            kendo.unbindResize(this._resizeHandler);\n            kendo.destroy(this.element);\n          },\n          items: function () {\n            return $();\n          },\n          getSize: function () {\n            return kendo.dimensions(this.element);\n          },\n          _resize: function () {\n            var root = this._root;\n\n            if (root) {\n              var element = this.element;\n              var rootElement = element.children();\n              root.coord.width = outerWidth(element);\n              root.coord.height = outerHeight(element);\n              rootElement.css({\n                width: root.coord.width,\n                height: root.coord.height\n              });\n\n              this._resizeItems(root, rootElement);\n            }\n          },\n          _resizeItems: function (root, element) {\n            if (root.children && root.children.length) {\n              var elements = element.children(\".k-treemap-wrap\").children();\n              var child, childElement;\n\n              this._layout.compute(root.children, root.coord, {\n                text: this._view.titleSize(root, element)\n              });\n\n              for (var idx = 0; idx < root.children.length; idx++) {\n                child = root.children[idx];\n                childElement = elements.filter(\"[\" + kendo.attr(\"uid\") + \"='\" + child.dataItem.uid + \"']\");\n\n                this._view.setItemSize(child, childElement);\n\n                this._resizeItems(child, childElement);\n              }\n            }\n          },\n          setOptions: function (options) {\n            var dataSource = options.dataSource;\n            options.dataSource = undefined;\n            this._originalOptions = deepExtend(this._originalOptions, options);\n            this.options = deepExtend({}, this._originalOptions);\n\n            this._setLayout();\n\n            this._initTheme(this.options);\n\n            Widget.fn._setEvents.call(this, options);\n\n            if (dataSource) {\n              this.setDataSource(HierarchicalDataSource.create(dataSource));\n            }\n\n            if (this.options.autoBind) {\n              this.dataSource.fetch();\n            }\n          }\n        });\n        var Squarified = Class.extend({\n          createRoot: function (root, width, height) {\n            root.coord = {\n              width: width,\n              height: height,\n              top: 0,\n              left: 0\n            };\n          },\n          leaf: function (tree) {\n            return !tree.children;\n          },\n          layoutChildren: function (items, coord) {\n            var parentArea = coord.width * coord.height;\n            var totalArea = 0,\n                itemsArea = [],\n                i;\n\n            for (i = 0; i < items.length; i++) {\n              itemsArea[i] = parseFloat(items[i].value);\n              totalArea += itemsArea[i];\n            }\n\n            for (i = 0; i < itemsArea.length; i++) {\n              items[i].area = parentArea * itemsArea[i] / totalArea;\n            }\n\n            var minimumSideValue = this.layoutHorizontal() ? coord.height : coord.width;\n            var firstElement = [items[0]];\n            var tail = items.slice(1);\n            this.squarify(tail, firstElement, minimumSideValue, coord);\n          },\n          squarify: function (tail, initElement, width, coord) {\n            this.computeDim(tail, initElement, width, coord);\n          },\n          computeDim: function (tail, initElement, width, coord) {\n            if (tail.length + initElement.length == 1) {\n              var element = tail.length == 1 ? tail : initElement;\n              this.layoutLast(element, width, coord);\n              return;\n            }\n\n            if (tail.length >= 2 && initElement.length === 0) {\n              initElement = [tail[0]];\n              tail = tail.slice(1);\n            }\n\n            if (tail.length === 0) {\n              if (initElement.length > 0) {\n                this.layoutRow(initElement, width, coord);\n              }\n\n              return;\n            }\n\n            var firstElement = tail[0];\n\n            if (this.worstAspectRatio(initElement, width) >= this.worstAspectRatio([firstElement].concat(initElement), width)) {\n              this.computeDim(tail.slice(1), initElement.concat([firstElement]), width, coord);\n            } else {\n              var newCoords = this.layoutRow(initElement, width, coord);\n              this.computeDim(tail, [], newCoords.dim, newCoords);\n            }\n          },\n          layoutLast: function (items, w, coord) {\n            items[0].coord = coord;\n          },\n          layoutRow: function (items, width, coord) {\n            if (this.layoutHorizontal()) {\n              return this.layoutV(items, width, coord);\n            } else {\n              return this.layoutH(items, width, coord);\n            }\n          },\n          orientation: \"h\",\n          layoutVertical: function () {\n            return this.orientation === \"v\";\n          },\n          layoutHorizontal: function () {\n            return this.orientation === \"h\";\n          },\n          layoutChange: function () {\n            this.orientation = this.layoutVertical() ? \"h\" : \"v\";\n          },\n          worstAspectRatio: function (items, width) {\n            if (!items || items.length === 0) {\n              return MAX_VALUE;\n            }\n\n            var areaSum = 0,\n                maxArea = 0,\n                minArea = MAX_VALUE;\n\n            for (var i = 0; i < items.length; i++) {\n              var area = items[i].area;\n              areaSum += area;\n              minArea = minArea < area ? minArea : area;\n              maxArea = maxArea > area ? maxArea : area;\n            }\n\n            return math.max(width * width * maxArea / (areaSum * areaSum), areaSum * areaSum / (width * width * minArea));\n          },\n          compute: function (children, rootCoord, htmlSize) {\n            if (!(rootCoord.width >= rootCoord.height && this.layoutHorizontal())) {\n              this.layoutChange();\n            }\n\n            if (children && children.length > 0) {\n              var newRootCoord = {\n                width: rootCoord.width,\n                height: rootCoord.height - htmlSize.text,\n                top: 0,\n                left: 0\n              };\n              this.layoutChildren(children, newRootCoord);\n            }\n          },\n          layoutV: function (items, width, coord) {\n            var totalArea = this._totalArea(items),\n                top = 0;\n\n            width = round(totalArea / width);\n\n            for (var i = 0; i < items.length; i++) {\n              var height = round(items[i].area / width);\n              items[i].coord = {\n                height: height,\n                width: width,\n                top: coord.top + top,\n                left: coord.left\n              };\n              top += height;\n            }\n\n            var ans = {\n              height: coord.height,\n              width: coord.width - width,\n              top: coord.top,\n              left: coord.left + width\n            };\n            ans.dim = math.min(ans.width, ans.height);\n\n            if (ans.dim != ans.height) {\n              this.layoutChange();\n            }\n\n            return ans;\n          },\n          layoutH: function (items, width, coord) {\n            var totalArea = this._totalArea(items);\n\n            var height = round(totalArea / width),\n                top = coord.top,\n                left = 0;\n\n            for (var i = 0; i < items.length; i++) {\n              items[i].coord = {\n                height: height,\n                width: round(items[i].area / height),\n                top: top,\n                left: coord.left + left\n              };\n              left += items[i].coord.width;\n            }\n\n            var ans = {\n              height: coord.height - height,\n              width: coord.width,\n              top: coord.top + height,\n              left: coord.left\n            };\n            ans.dim = math.min(ans.width, ans.height);\n\n            if (ans.dim != ans.width) {\n              this.layoutChange();\n            }\n\n            return ans;\n          },\n          _totalArea: function (items) {\n            var total = 0;\n\n            for (var i = 0; i < items.length; i++) {\n              total += items[i].area;\n            }\n\n            return total;\n          }\n        });\n        var SquarifiedView = Class.extend({\n          init: function (treeMap, options) {\n            this.options = deepExtend({}, this.options, options);\n            this.treeMap = treeMap;\n            this.element = $(treeMap.element);\n            this.offset = 0;\n          },\n          titleSize: function (item, element) {\n            var text = element.children(\".k-treemap-title\");\n            return text.height() || 0;\n          },\n          htmlSize: function (root) {\n            var rootElement = this._getByUid(root.dataItem.uid);\n\n            var htmlSize = {\n              text: 0\n            };\n\n            if (root.children) {\n              this._clean(rootElement);\n\n              var text = this._getText(root);\n\n              if (text) {\n                var title = this._createTitle(root);\n\n                rootElement.append(title);\n\n                this._compile(title, root.dataItem);\n\n                htmlSize.text = title.height();\n              }\n\n              rootElement.append(this._createWrap());\n              this.offset = (outerWidth(rootElement) - rootElement.innerWidth()) / 2;\n            }\n\n            return htmlSize;\n          },\n          _compile: function (element, dataItem) {\n            this.treeMap.angular(\"compile\", function () {\n              return {\n                elements: element,\n                data: [{\n                  dataItem: dataItem\n                }]\n              };\n            });\n          },\n          _getByUid: function (uid) {\n            return this.element.find(\".k-treemap-tile[\" + kendo.attr(\"uid\") + \"='\" + uid + \"']\");\n          },\n          render: function (root) {\n            var rootElement = this._getByUid(root.dataItem.uid);\n\n            var children = root.children;\n\n            if (children) {\n              var rootWrap = rootElement.find(\".k-treemap-wrap\");\n\n              for (var i = 0; i < children.length; i++) {\n                var leaf = children[i];\n\n                var htmlElement = this._createLeaf(leaf);\n\n                rootWrap.append(htmlElement);\n\n                this._compile(htmlElement.children(), leaf.dataItem);\n\n                this.treeMap.trigger(ITEM_CREATED, {\n                  element: htmlElement\n                });\n              }\n            }\n          },\n          createRoot: function (root) {\n            var htmlElement = this._createLeaf(root);\n\n            this.element.append(htmlElement);\n\n            this._compile(htmlElement.children(), root.dataItem);\n\n            this.treeMap.trigger(ITEM_CREATED, {\n              element: htmlElement\n            });\n          },\n          _clean: function (root) {\n            this.treeMap.angular(\"cleanup\", function () {\n              return {\n                elements: root.children(\":not(.k-treemap-wrap)\")\n              };\n            });\n            root.css(\"background-color\", \"\");\n            root.removeClass(\"k-leaf\");\n            root.removeClass(\"k-inverse\");\n            root.empty();\n          },\n          _createLeaf: function (item) {\n            return this._createTile(item).css(\"background-color\", item.color).addClass(\"k-leaf\").toggleClass(\"k-inverse\", this._tileColorBrightness(item) > 180).toggle(item.value !== 0).append($(\"<div></div>\").html(this._getText(item)));\n          },\n          _createTile: function (item) {\n            var tile = $(\"<div class='k-treemap-tile'></div>\");\n            this.setItemSize(item, tile);\n\n            if (defined(item.dataItem) && defined(item.dataItem.uid)) {\n              tile.attr(kendo.attr(\"uid\"), item.dataItem.uid);\n            }\n\n            return tile;\n          },\n          _itemCoordinates: function (item) {\n            var coordinates = {\n              width: item.coord.width,\n              height: item.coord.height,\n              left: item.coord.left,\n              top: item.coord.top\n            };\n\n            if (coordinates.left && this.offset) {\n              coordinates.width += this.offset * 2;\n            } else {\n              coordinates.width += this.offset;\n            }\n\n            if (coordinates.top) {\n              coordinates.height += this.offset * 2;\n            } else {\n              coordinates.height += this.offset;\n            }\n\n            return coordinates;\n          },\n          setItemSize: function (item, element) {\n            var coordinates = this._itemCoordinates(item);\n\n            element.css({\n              width: coordinates.width,\n              height: coordinates.height,\n              left: coordinates.left,\n              top: coordinates.top\n            });\n          },\n          _getText: function (item) {\n            var text = item.text;\n\n            if (this.options.template) {\n              text = this._renderTemplate(item);\n            }\n\n            return text;\n          },\n          _renderTemplate: function (item) {\n            var titleTemplate = template(this.options.template);\n            return titleTemplate({\n              dataItem: item.dataItem,\n              text: item.text\n            });\n          },\n          _createTitle: function (item) {\n            return $(\"<div class='k-treemap-title'></div>\").append($(\"<div></div>\").html(this._getText(item)));\n          },\n          _createWrap: function () {\n            return $(\"<div class='k-treemap-wrap'></div>\");\n          },\n          _tileColorBrightness: function (item) {\n            return colorBrightness(item.color);\n          }\n        });\n        var SliceAndDice = Class.extend({\n          createRoot: function (root, width, height, vertical) {\n            root.coord = {\n              width: width,\n              height: height,\n              top: 0,\n              left: 0\n            };\n            root.vertical = vertical;\n          },\n          init: function (vertical) {\n            this.vertical = vertical;\n            this.quotient = vertical ? 1 : 0;\n          },\n          compute: function (children, rootCoord, htmlSize) {\n            if (children.length > 0) {\n              var width = rootCoord.width;\n              var height = rootCoord.height;\n\n              if (this.vertical) {\n                height -= htmlSize.text;\n              } else {\n                width -= htmlSize.text;\n              }\n\n              var newRootCoord = {\n                width: width,\n                height: height,\n                top: 0,\n                left: 0\n              };\n              this.layoutChildren(children, newRootCoord);\n            }\n          },\n          layoutChildren: function (items, coord) {\n            var parentArea = coord.width * coord.height;\n            var totalArea = 0;\n            var itemsArea = [];\n            var i;\n\n            for (i = 0; i < items.length; i++) {\n              var item = items[i];\n              itemsArea[i] = parseFloat(items[i].value);\n              totalArea += itemsArea[i];\n              item.vertical = this.vertical;\n            }\n\n            for (i = 0; i < itemsArea.length; i++) {\n              items[i].area = parentArea * itemsArea[i] / totalArea;\n            }\n\n            this.sliceAndDice(items, coord);\n          },\n          sliceAndDice: function (items, coord) {\n            var totalArea = this._totalArea(items);\n\n            if (items[0].level % 2 === this.quotient) {\n              this.layoutHorizontal(items, coord, totalArea);\n            } else {\n              this.layoutVertical(items, coord, totalArea);\n            }\n          },\n          layoutHorizontal: function (items, coord, totalArea) {\n            var left = 0;\n\n            for (var i = 0; i < items.length; i++) {\n              var item = items[i];\n              var width = item.area / (totalArea / coord.width);\n              item.coord = {\n                height: coord.height,\n                width: width,\n                top: coord.top,\n                left: coord.left + left\n              };\n              left += width;\n            }\n          },\n          layoutVertical: function (items, coord, totalArea) {\n            var top = 0;\n\n            for (var i = 0; i < items.length; i++) {\n              var item = items[i];\n              var height = item.area / (totalArea / coord.height);\n              item.coord = {\n                height: height,\n                width: coord.width,\n                top: coord.top + top,\n                left: coord.left\n              };\n              top += height;\n            }\n          },\n          _totalArea: function (items) {\n            var total = 0;\n\n            for (var i = 0; i < items.length; i++) {\n              total += items[i].area;\n            }\n\n            return total;\n          }\n        });\n        var SliceAndDiceView = SquarifiedView.extend({\n          htmlSize: function (root) {\n            var rootElement = this._getByUid(root.dataItem.uid);\n\n            var htmlSize = {\n              text: 0,\n              offset: 0\n            };\n\n            if (root.children) {\n              this._clean(rootElement);\n\n              var text = this._getText(root);\n\n              if (text) {\n                var title = this._createTitle(root);\n\n                rootElement.append(title);\n\n                this._compile(title, root.dataItem);\n\n                if (root.vertical) {\n                  htmlSize.text = title.height();\n                } else {\n                  htmlSize.text = title.width();\n                }\n              }\n\n              rootElement.append(this._createWrap());\n              this.offset = (outerWidth(rootElement) - rootElement.innerWidth()) / 2;\n            }\n\n            return htmlSize;\n          },\n          titleSize: function (item, element) {\n            var size;\n\n            if (item.vertical) {\n              size = element.children(\".k-treemap-title\").height();\n            } else {\n              size = element.children(\".k-treemap-title-vertical\").width();\n            }\n\n            return size || 0;\n          },\n          _createTitle: function (item) {\n            var title;\n\n            if (item.vertical) {\n              title = $(\"<div class='k-treemap-title'></div>\");\n            } else {\n              title = $(\"<div class='k-treemap-title-vertical'></div>\");\n            }\n\n            return title.append($(\"<div></div>\").html(this._getText(item)));\n          }\n        });\n\n        function getField(field, row) {\n          if (row === null) {\n            return row;\n          }\n\n          var get = getter(field, true);\n          return get(row);\n        }\n\n        function defined(value) {\n          return typeof value !== UNDEFINED;\n        }\n\n        function colorsByLength(min, max, length) {\n          var minRGBtoDecimal = rgbToDecimal(min);\n          var maxRGBtoDecimal = rgbToDecimal(max);\n          var isDarker = colorBrightness(min) - colorBrightness(max) < 0;\n          var colors = [];\n          colors.push(min);\n\n          for (var i = 0; i < length; i++) {\n            var rgbColor = {\n              r: colorByIndex(minRGBtoDecimal.r, maxRGBtoDecimal.r, i, length, isDarker),\n              g: colorByIndex(minRGBtoDecimal.g, maxRGBtoDecimal.g, i, length, isDarker),\n              b: colorByIndex(minRGBtoDecimal.b, maxRGBtoDecimal.b, i, length, isDarker)\n            };\n            colors.push(buildColorFromRGB(rgbColor));\n          }\n\n          colors.push(max);\n          return colors;\n        }\n\n        function colorByIndex(min, max, index, length, isDarker) {\n          var minColor = math.min(math.abs(min), math.abs(max));\n          var maxColor = math.max(math.abs(min), math.abs(max));\n          var step = (maxColor - minColor) / (length + 1);\n          var currentStep = step * (index + 1);\n          var color;\n\n          if (isDarker) {\n            color = minColor + currentStep;\n          } else {\n            color = maxColor - currentStep;\n          }\n\n          return color;\n        }\n\n        function buildColorFromRGB(color) {\n          return \"#\" + decimalToRgb(color.r) + decimalToRgb(color.g) + decimalToRgb(color.b);\n        }\n\n        function rgbToDecimal(color) {\n          color = color.replace(\"#\", \"\");\n          var rgbColor = colorToRGB(color);\n          return {\n            r: rgbToHex(rgbColor.r),\n            g: rgbToHex(rgbColor.g),\n            b: rgbToHex(rgbColor.b)\n          };\n        }\n\n        function decimalToRgb(number) {\n          var result = math.round(number).toString(16).toUpperCase();\n\n          if (result.length === 1) {\n            result = \"0\" + result;\n          }\n\n          return result;\n        }\n\n        function colorToRGB(color) {\n          var colorLength = color.length;\n          var rgbColor = {};\n\n          if (colorLength === 3) {\n            rgbColor.r = color[0];\n            rgbColor.g = color[1];\n            rgbColor.b = color[2];\n          } else {\n            rgbColor.r = color.substring(0, 2);\n            rgbColor.g = color.substring(2, 4);\n            rgbColor.b = color.substring(4, 6);\n          }\n\n          return rgbColor;\n        }\n\n        function rgbToHex(rgb) {\n          return parseInt(rgb.toString(16), 16);\n        }\n\n        function colorBrightness(color) {\n          var brightness = 0;\n\n          if (color) {\n            color = rgbToDecimal(color);\n            brightness = math.sqrt(0.241 * color.r * color.r + 0.691 * color.g * color.g + 0.068 * color.b * color.b);\n          }\n\n          return brightness;\n        }\n\n        function round(value) {\n          var power = math.pow(10, 4);\n          return math.round(value * power) / power;\n        }\n\n        dataviz.ui.plugin(TreeMap);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}