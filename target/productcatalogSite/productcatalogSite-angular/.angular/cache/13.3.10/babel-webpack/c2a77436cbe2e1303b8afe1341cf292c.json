{"ast":null,"code":"import { Commands } from '.';\n\nvar PrintAction = function () {\n  function PrintAction(dialogResult, button, path, filename, extension, controller, action) {\n    if (filename === void 0) {\n      filename = null;\n    }\n\n    if (extension === void 0) {\n      extension = null;\n    }\n\n    if (controller === void 0) {\n      controller = 'ResumeOperation';\n    }\n\n    if (action === void 0) {\n      action = 'ResumePendingOperationWithArgs';\n    }\n\n    this.myDialogResult = dialogResult;\n    this.myPath = path;\n    this.myButton = button;\n    this.myAction = action;\n    this.myExtension = extension;\n    this.myController = controller;\n    this.myFileName = filename;\n  }\n\n  Object.defineProperty(PrintAction.prototype, \"name\", {\n    get: function () {\n      return Commands.PrintActionCommand;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PrintAction.prototype, \"dialogResult\", {\n    get: function () {\n      return this.myDialogResult;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PrintAction.prototype, \"controller\", {\n    get: function () {\n      return this.myController;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PrintAction.prototype, \"action\", {\n    get: function () {\n      return this.myAction;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PrintAction.prototype, \"args\", {\n    get: function () {\n      var args = [];\n\n      if (this.myPath || this.myPath === '') {\n        args.push(this.myPath);\n      }\n\n      if (this.myFileName || this.myFileName === '') {\n        args.push(this.myFileName);\n      }\n\n      if (this.myExtension) {\n        args.push(this.myExtension);\n      }\n\n      return {\n        buttons: this.myButton,\n        args: args\n      };\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return PrintAction;\n}();\n\nexport { PrintAction }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJpbnRBY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvVUkvQ29tbWFuZC9QcmludEFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFvQkEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLEdBQUcsQ0FBQztBQUU3QjtJQUNFLHFCQUNFLFlBQW9CLEVBQ3BCLE1BQWMsRUFDZCxJQUFZLEVBQ1osUUFBdUIsRUFDdkIsU0FBd0IsRUFDeEIsVUFBOEIsRUFDOUIsTUFBeUM7UUFIekMseUJBQUEsRUFBQSxlQUF1QjtRQUN2QiwwQkFBQSxFQUFBLGdCQUF3QjtRQUN4QiwyQkFBQSxFQUFBLDhCQUE4QjtRQUM5Qix1QkFBQSxFQUFBLHlDQUF5QztRQUV6QyxJQUFJLENBQUMsY0FBYyxHQUFHLFlBQVksQ0FBQztRQUNuQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztRQUNuQixJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQztRQUN2QixJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQztRQUN2QixJQUFJLENBQUMsV0FBVyxHQUFHLFNBQVMsQ0FBQztRQUM3QixJQUFJLENBQUMsWUFBWSxHQUFHLFVBQVUsQ0FBQztRQUMvQixJQUFJLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQztJQUM3QixDQUFDO0lBVUQsc0JBQUksNkJBQUk7YUFBUjtZQUNFLE9BQU8sUUFBUSxDQUFDLGtCQUFrQixDQUFDO1FBQ3JDLENBQUM7OztPQUFBO0lBRUQsc0JBQUkscUNBQVk7YUFBaEI7WUFDRSxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7UUFDN0IsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSxtQ0FBVTthQUFkO1lBQ0ksT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQzdCLENBQUM7OztPQUFBO0lBRUQsc0JBQUksK0JBQU07YUFBVjtZQUNFLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUN6QixDQUFDOzs7T0FBQTtJQUVDLHNCQUFJLDZCQUFJO2FBQVI7WUFDRSxJQUFNLElBQUksR0FBRyxFQUFFLENBQUM7WUFDaEIsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssRUFBRSxFQUFFO2dCQUNyQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUN4QjtZQUNELElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLEVBQUUsRUFBRTtnQkFDN0MsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDNUI7WUFDRCxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7Z0JBQ3BCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQzdCO1lBQ0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksTUFBQSxFQUFFLENBQUM7UUFDMUMsQ0FBQzs7O09BQUE7SUFDSCxrQkFBQztBQUFELENBQUMsQUF4REQsSUF3REMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuKiBDb3B5cmlnaHQgKEMpIE1vYmlsaXplLk5ldCA8aW5mb0Btb2JpbGl6ZS5uZXQ+IC0gQWxsIFJpZ2h0cyBSZXNlcnZlZFxyXG4qXHJcbiogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIE1vYmlsaXplIEZyYW1ld29ya3MsIHdoaWNoIGlzXHJcbiogcHJvcHJpZXRhcnkgYW5kIGNvbmZpZGVudGlhbC5cclxuKlxyXG4qIE5PVElDRTogIEFsbCBpbmZvcm1hdGlvbiBjb250YWluZWQgaGVyZWluIGlzLCBhbmQgcmVtYWluc1xyXG4qIHRoZSBwcm9wZXJ0eSBvZiBNb2JpbGl6ZS5OZXQgQ29ycG9yYXRpb24uXHJcbiogVGhlIGludGVsbGVjdHVhbCBhbmQgdGVjaG5pY2FsIGNvbmNlcHRzIGNvbnRhaW5lZCBoZXJlaW4gYXJlXHJcbiogcHJvcHJpZXRhcnkgdG8gTW9iaWxpemUuTmV0IENvcnBvcmF0aW9uIGFuZCBtYXkgYmUgY292ZXJlZFxyXG4qIGJ5IFUuUy4gUGF0ZW50cywgYW5kIGFyZSBwcm90ZWN0ZWQgYnkgdHJhZGUgc2VjcmV0IG9yIGNvcHlyaWdodCBsYXcuXHJcbiogRGlzc2VtaW5hdGlvbiBvZiB0aGlzIGluZm9ybWF0aW9uIG9yIHJlcHJvZHVjdGlvbiBvZiB0aGlzIG1hdGVyaWFsXHJcbiogaXMgc3RyaWN0bHkgZm9yYmlkZGVuIHVubGVzcyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24gaXMgb2J0YWluZWRcclxuKiBmcm9tIE1vYmlsaXplLk5ldCBDb3Jwb3JhdGlvbi5cclxuKlxyXG4qIFRoaXMgZmlsZSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBhbmQgY29uZGl0aW9ucyBkZWZpbmVkIGluXHJcbiogZmlsZSAnTElDRU5TRS50eHQnLCB3aGljaCBpcyBwYXJ0IG9mIHRoaXMgc291cmNlIGNvZGUgcGFja2FnZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbmltcG9ydCB7IElDb21tYW5kIH0gZnJvbSAnLi4vLi4vQ29udHJhY3QnO1xyXG5cclxuaW1wb3J0IHsgQ29tbWFuZHMgfSBmcm9tICcuJztcclxuXHJcbmV4cG9ydCBjbGFzcyBQcmludEFjdGlvbiBpbXBsZW1lbnRzIElDb21tYW5kIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIGRpYWxvZ1Jlc3VsdDogc3RyaW5nLFxyXG4gICAgYnV0dG9uOiBudW1iZXIsXHJcbiAgICBwYXRoOiBzdHJpbmcsXHJcbiAgICBmaWxlbmFtZTogc3RyaW5nID0gbnVsbCxcclxuICAgIGV4dGVuc2lvbjogc3RyaW5nID0gbnVsbCxcclxuICAgIGNvbnRyb2xsZXIgPSAnUmVzdW1lT3BlcmF0aW9uJyxcclxuICAgIGFjdGlvbiA9ICdSZXN1bWVQZW5kaW5nT3BlcmF0aW9uV2l0aEFyZ3MnXHJcbiAgKSB7XHJcbiAgICB0aGlzLm15RGlhbG9nUmVzdWx0ID0gZGlhbG9nUmVzdWx0O1xyXG4gICAgdGhpcy5teVBhdGggPSBwYXRoO1xyXG4gICAgdGhpcy5teUJ1dHRvbiA9IGJ1dHRvbjtcclxuICAgIHRoaXMubXlBY3Rpb24gPSBhY3Rpb247XHJcbiAgICB0aGlzLm15RXh0ZW5zaW9uID0gZXh0ZW5zaW9uO1xyXG4gICAgdGhpcy5teUNvbnRyb2xsZXIgPSBjb250cm9sbGVyO1xyXG4gICAgdGhpcy5teUZpbGVOYW1lID0gZmlsZW5hbWU7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG15Q29udHJvbGxlcjogc3RyaW5nO1xyXG4gIHByaXZhdGUgbXlBY3Rpb246IHN0cmluZztcclxuICBwcml2YXRlIG15RGlhbG9nUmVzdWx0OiBzdHJpbmc7XHJcbiAgcHJpdmF0ZSBteVBhdGg6IHN0cmluZztcclxuICBwcml2YXRlIG15QnV0dG9uOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBteUV4dGVuc2lvbjogc3RyaW5nIHwgbnVsbDtcclxuICBwcml2YXRlIG15RmlsZU5hbWU6IHN0cmluZyB8IG51bGw7XHJcblxyXG4gIGdldCBuYW1lKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gQ29tbWFuZHMuUHJpbnRBY3Rpb25Db21tYW5kO1xyXG4gIH1cclxuXHJcbiAgZ2V0IGRpYWxvZ1Jlc3VsdCgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMubXlEaWFsb2dSZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBnZXQgY29udHJvbGxlcigpOiBzdHJpbmcge1xyXG4gICAgICByZXR1cm4gdGhpcy5teUNvbnRyb2xsZXI7XHJcbiAgfVxyXG5cclxuICBnZXQgYWN0aW9uKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5teUFjdGlvbjtcclxufVxyXG5cclxuICBnZXQgYXJncygpOiBhbnkge1xyXG4gICAgY29uc3QgYXJncyA9IFtdO1xyXG4gICAgaWYgKHRoaXMubXlQYXRoIHx8IHRoaXMubXlQYXRoID09PSAnJykge1xyXG4gICAgICBhcmdzLnB1c2godGhpcy5teVBhdGgpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMubXlGaWxlTmFtZSB8fCB0aGlzLm15RmlsZU5hbWUgPT09ICcnKSB7XHJcbiAgICAgIGFyZ3MucHVzaCh0aGlzLm15RmlsZU5hbWUpO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMubXlFeHRlbnNpb24pIHtcclxuICAgICAgYXJncy5wdXNoKHRoaXMubXlFeHRlbnNpb24pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHsgYnV0dG9uczogdGhpcy5teUJ1dHRvbiwgYXJncyB9O1xyXG4gIH1cclxufVxyXG4iXX0=","map":null,"metadata":{},"sourceType":"module"}