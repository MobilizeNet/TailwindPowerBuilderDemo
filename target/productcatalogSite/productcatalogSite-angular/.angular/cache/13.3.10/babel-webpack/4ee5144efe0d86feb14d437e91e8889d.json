{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1097);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1097:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1098), __webpack_require__(1099), __webpack_require__(1100)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"chat\",\n        name: \"Chat\",\n        category: \"web\",\n        description: \"The Chat component.\",\n        depends: [\"core\", \"draganddrop\"]\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo;\n        var Widget = kendo.ui.Widget;\n        var extend = $.extend;\n        var DOT = \".\";\n        var chatStyles = {\n          wrapper: \"k-widget k-chat\",\n          canvas: \"k-chat-canvas\",\n          viewWrapper: \"k-message-list\",\n          messageBoxWrapper: \"k-message-box\",\n          toolbarBoxWrapper: \"k-toolbar-box\"\n        };\n        var Chat = Widget.extend({\n          init: function (element, options, events) {\n            Widget.fn.init.call(this, element, options);\n\n            if (events) {\n              this._events = events;\n            }\n\n            this._user();\n\n            this._wrapper();\n\n            this._view();\n\n            this._messageBox();\n\n            if (options && options.toolbar && options.toolbar.buttons) {\n              this._toolbar();\n            }\n\n            kendo.notify(this);\n          },\n          events: [\"typingStart\", \"typingEnd\", \"post\", \"sendMessage\", \"actionClick\", \"toolClick\"],\n          options: {\n            user: {\n              name: \"User\",\n              iconUrl: \"\"\n            },\n            name: \"Chat\",\n            messages: {\n              messageListLabel: \"Message list\",\n              placeholder: \"Type a message...\",\n              toggleButton: \"Toggle toolbar\",\n              sendButton: \"Send message\"\n            },\n            toolbar: false\n          },\n          setOptions: function (options) {\n            this._setEvents(options);\n\n            $.extend(true, this.options, options);\n\n            if (this.toolbar && \"toolbar\" in options) {\n              this.toolbar.destroy();\n              this.toolbar = null;\n            }\n\n            if (this.messageBox) {\n              this.messageBox.unbind();\n              this.messageBox.destroy();\n              this.messageBox = null;\n            }\n\n            this._messageBox();\n\n            if (\"toolbar\" in options) {\n              this._resetToolbarButtons(options);\n\n              this._toolbar();\n            }\n          },\n          _resetToolbarButtons: function (options) {\n            var toolbarBoxWrapper = this.wrapper.find(DOT + chatStyles.toolbarBoxWrapper);\n\n            if (!toolbarBoxWrapper.is(\":visible\")) {\n              toolbarBoxWrapper.show();\n            }\n\n            if (options.toolbar && typeof options.toolbar == \"object\" && \"buttons\" in options.toolbar) {\n              this.options.toolbar.buttons = options.toolbar.buttons;\n            }\n          },\n          destroy: function () {\n            if (this.view) {\n              this.view.unbind();\n              this.view.destroy();\n              this.view = null;\n            }\n\n            if (this.messageBox) {\n              this.messageBox.unbind();\n              this.messageBox.destroy();\n              this.messageBox = null;\n            }\n\n            if (this.toolbar) {\n              this.toolbar.destroy();\n              this.toolbar = null;\n            }\n\n            Widget.fn.destroy.call(this);\n          },\n          _user: function () {\n            this.options.user.id = kendo.guid();\n          },\n          getUser: function () {\n            return extend(true, {}, this.options.user);\n          },\n          _wrapper: function () {\n            var chatStyles = Chat.styles;\n            var options = this.options;\n            var height = options.height;\n            var width = options.width;\n            var uiElements = \"<div class='\" + chatStyles.viewWrapper + \"'></div>\" + \"<span class='\" + chatStyles.messageBoxWrapper + \"'></span>\" + \"<div class='\" + chatStyles.toolbarBoxWrapper + \"' role='toolbar' style='display:none;'></div>\";\n            this.wrapper = this.element.addClass(chatStyles.wrapper).append(uiElements);\n\n            if (options.toolbar && options.toolbar.buttons && options.toolbar.buttons.length) {\n              this.wrapper.find(DOT + chatStyles.toolbarBoxWrapper).show();\n            }\n\n            if (height) {\n              this.wrapper.height(height);\n            }\n\n            if (width) {\n              this.wrapper.css(\"max-width\", width);\n            }\n          },\n          _view: function () {\n            var that = this;\n            var chatStyles = Chat.styles;\n            var options = extend(true, {}, this.options);\n            var element = this.wrapper.find(DOT + chatStyles.viewWrapper + \"\");\n            this.view = new kendo.chat.ChatView(element, options);\n            this.view.bind(\"actionClick\", function (args) {\n              that.trigger(\"actionClick\", args);\n              that.postMessage(args.text);\n            });\n          },\n          _messageBox: function () {\n            var that = this;\n            var chatStyles = Chat.styles;\n            var options = extend(true, {}, this.options);\n            var element = this.wrapper.find(DOT + chatStyles.messageBoxWrapper + \"\");\n            this.messageBox = new kendo.chat.ChatMessageBox(element, options);\n            this.messageBox.bind(\"typingStart\", function (args) {\n              that.trigger(\"typingStart\", args);\n            }).bind(\"typingEnd\", function (args) {\n              that.trigger(\"typingEnd\", args);\n            }).bind(\"sendMessage\", function (args) {\n              that.trigger(\"sendMessage\", args);\n              that.postMessage(args.text);\n            }).bind(\"toggleToolbar\", function () {\n              that.toggleToolbar();\n            });\n          },\n          _toolbar: function () {\n            var that = this;\n            var chatStyles = Chat.styles;\n            var options = extend(true, {}, that.options);\n            var element = that.wrapper.find(DOT + chatStyles.toolbarBoxWrapper + \"\");\n\n            if (options.toolbar.scrollable === undefined) {\n              this.options.toolbar.scrollable = options.toolbar.scrollable = true;\n            }\n\n            if (options.toolbar.toggleable === undefined) {\n              this.options.toolbar.toggleable = options.toolbar.toggleable = false;\n            }\n\n            that.toolbar = new kendo.chat.ChatToolBar(element, options);\n            that.toolbar.bind(\"click\", function (ev) {\n              that.trigger(\"toolClick\", {\n                sender: that,\n                name: ev.name,\n                button: ev.button,\n                messageBox: that.messageBox.input[0],\n                originalEvent: ev.originalEvent\n              });\n            });\n          },\n          postMessage: function (message) {\n            var postArgs = extend(true, {}, {\n              text: message,\n              type: \"message\",\n              timestamp: new Date(),\n              from: this.getUser()\n            });\n            this.trigger(\"post\", postArgs);\n            this.renderMessage(postArgs, postArgs.from);\n          },\n          // TEST calling View renderMessage\n          renderMessage: function (message, sender) {\n            this.view.renderMessage(message, sender);\n          },\n          // TEST calling View renderSuggestedActions\n          renderSuggestedActions: function (suggestedActions) {\n            this.view.renderSuggestedActions(suggestedActions);\n          },\n          // TEST calling View renderCard\n          renderAttachments: function (options, sender) {\n            this.view.renderAttachments(options, sender);\n          },\n          toggleToolbar: function (skipAnimation) {\n            this.toolbar.toggle(skipAnimation);\n          },\n          renderUserTypingIndicator: function (sender) {\n            this.view._renderTypingIndicator(sender);\n          },\n          clearUserTypingIndicator: function (sender) {\n            this.view._removeTypingParticipant(sender);\n          },\n          removeTypingIndicator: function () {\n            this.view._removeTypingIndicator();\n          }\n        });\n        kendo.ui.plugin(Chat);\n        extend(true, Chat, {\n          styles: chatStyles\n        });\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1098:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./chat/messageBox\");\n    /***/\n  },\n\n  /***/\n  1099:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./chat/toolbar\");\n    /***/\n  },\n\n  /***/\n  1100:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./chat/view\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}