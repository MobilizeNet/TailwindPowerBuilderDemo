{"ast":null,"code":"import acceptKey from './accept-key';\nimport toChartAxisRanges from './to-chart-axis-ranges';\nimport { X, Y } from '../../common/constants';\nimport { Class, deepExtend } from '../../common';\n\nclass Pannable extends Class {\n  constructor(plotArea, options) {\n    super();\n    this.plotArea = plotArea;\n    this.options = deepExtend({}, this.options, options);\n  }\n\n  start(e) {\n    this._active = acceptKey(e, this.options.key);\n    return this._active;\n  }\n\n  move(e) {\n    if (this._active) {\n      const axisRanges = this.axisRanges = this._panAxes(e, X).concat(this._panAxes(e, Y));\n\n      if (axisRanges.length) {\n        this.axisRanges = axisRanges;\n        return toChartAxisRanges(axisRanges);\n      }\n    }\n  }\n\n  end() {\n    const active = this._active;\n    this._active = false;\n    return active;\n  }\n\n  pan() {\n    const {\n      plotArea,\n      axisRanges\n    } = this;\n\n    if (axisRanges.length) {\n      for (let idx = 0; idx < axisRanges.length; idx++) {\n        const range = axisRanges[idx];\n        plotArea.updateAxisOptions(range.axis, range.range);\n      }\n\n      plotArea.redraw(plotArea.panes);\n    }\n  }\n\n  destroy() {\n    delete this.plotArea;\n  }\n\n  _panAxes(e, position) {\n    const plotArea = this.plotArea;\n    const delta = -e[position].delta;\n    const lock = (this.options.lock || \"\").toLowerCase();\n    const updatedAxes = [];\n\n    if (delta !== 0 && (lock || \"\").toLowerCase() !== position) {\n      const axes = plotArea.axes;\n\n      for (let idx = 0; idx < axes.length; idx++) {\n        const axis = axes[idx];\n\n        if (position === X && !axis.options.vertical || position === Y && axis.options.vertical) {\n          const range = axis.pan(delta);\n\n          if (range) {\n            range.limitRange = true;\n            updatedAxes.push({\n              axis: axis,\n              range: range\n            });\n          }\n        }\n      }\n    }\n\n    return updatedAxes;\n  }\n\n}\n\nPannable.prototype.options = {\n  key: \"none\",\n  lock: \"none\"\n};\nexport default Pannable;","map":null,"metadata":{},"sourceType":"module"}