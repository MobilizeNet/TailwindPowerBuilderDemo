{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1653);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  5:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.data\");\n    /***/\n  },\n\n  /***/\n  1653:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(5), __webpack_require__(1654)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function ($, undefined) {\n        var extend = $.extend,\n            data = kendo.data,\n            Query = data.Query,\n            DataSource = data.DataSource,\n            TreeListDataSource = data.TreeListDataSource,\n            Model = data.Model,\n            ObservableArray = data.ObservableArray;\n        var OrgChartModel = Model.define({\n          id: \"id\",\n          parentId: \"parentId\",\n          fields: {\n            id: {\n              type: \"number\",\n              editable: false\n            },\n            parentId: {\n              type: \"number\",\n              nullable: true\n            },\n            name: {\n              type: \"string\",\n              validation: {\n                required: true\n              }\n            },\n            title: {\n              type: \"string\"\n            },\n            avatar: {\n              type: \"string\"\n            }\n          },\n          init: function (value) {\n            Model.fn.init.call(this, value);\n            this._loaded = false;\n\n            if (!this.parentIdField) {\n              this.parentIdField = \"parentId\";\n            }\n\n            if (!this.nameField) {\n              this.nameField = \"name\";\n            }\n\n            if (!this.titleField) {\n              this.titleField = \"title\";\n            }\n\n            if (!this.avatarField) {\n              this.avatarField = \"avatar\";\n            }\n\n            this.parentId = this.get(this.parentIdField);\n            this.name = this.get(this.nameField);\n            this.title = this.get(this.titleField);\n            this.avatar = this.get(this.avatarField);\n          },\n          accept: function (data) {\n            Model.fn.accept.call(this, data);\n            this.parentId = this.get(this.parentIdField);\n            this.name = this.get(this.nameField);\n            this.title = this.get(this.titleField);\n            this.avatar = this.get(this.avatarField);\n          },\n          set: function (field, value, initiator) {\n            if (field == \"parentId\" && this.nameField != \"parentId\") {\n              this[this.parentIdField] = value;\n            }\n\n            if (field == \"name\" && this.nameField != \"name\") {\n              this[this.nameField] = value;\n            }\n\n            if (field == \"title\" && this.titleField != \"title\") {\n              this[this.titleField] = value;\n            }\n\n            if (field == \"avatar\" && this.avatarField != \"avatar\") {\n              this[this.avatarField] = value;\n            }\n\n            Model.fn.set.call(this, field, value, initiator);\n\n            if (field == this.parentIdField) {\n              this.parentId = this.get(this.parentIdField);\n            }\n\n            if (field == this.nameField) {\n              this.name = this.get(this.nameField);\n            }\n\n            if (field == this.titleField) {\n              this.title = this.get(this.titleField);\n            }\n\n            if (field == this.avatarField) {\n              this.avatar = this.get(this.avatarField);\n            }\n          },\n          loaded: function (value) {\n            if (value !== undefined) {\n              this._loaded = value;\n            } else {\n              return this._loaded;\n            }\n          },\n          shouldSerialize: function (field) {\n            return Model.fn.shouldSerialize.call(this, field) && field !== \"_loaded\" && field != \"_error\" && field != \"_edit\" && !(this.parentIdField !== \"parentId\" && field === \"parentId\");\n          }\n        });\n        OrgChartModel.parentIdField = \"parentId\";\n        OrgChartModel.nameField = \"name\";\n        OrgChartModel.titleField = \"title\";\n        OrgChartModel.avatarField = \"avatar\";\n\n        OrgChartModel.define = function (base, options) {\n          if (options === undefined) {\n            options = base;\n            base = OrgChartModel;\n          }\n\n          var parentId = options.parentId || \"parentId\";\n          var name = options.name || \"name\";\n          var title = options.title || \"title\";\n          var avatar = options.avatar || \"avatar\";\n          options.parentIdField = parentId;\n          options.nameField = name;\n          options.titleField = title;\n          options.avatarField = avatar;\n          var model = Model.define(base, options);\n\n          if (parentId) {\n            model.parentIdField = parentId;\n          }\n\n          if (name) {\n            model.nameField = name;\n          }\n\n          if (title) {\n            model.titleField = title;\n          }\n\n          if (avatar) {\n            model.avatarField = avatar;\n          }\n\n          return model;\n        };\n\n        var OrgChartDataSource = TreeListDataSource.extend({\n          init: function (options) {\n            TreeListDataSource.fn.init.call(this, extend(true, {}, {\n              schema: {\n                modelBase: OrgChartModel,\n                model: OrgChartModel\n              }\n            }, options));\n          },\n          groupedItemsTree: function (field) {\n            var map = this._childrenMap(this.view()),\n                defaultParentId = this._defaultParentId(),\n                currentChildren = map[defaultParentId] || [],\n                grouped = new Query(currentChildren).group({\n              field: field\n            }).toArray();\n\n            return this._innerGroupedItemsTree(field, grouped, map);\n          },\n          itemChildren: function (item, fromView) {\n            var filter = {\n              field: \"parentId\",\n              operator: \"eq\",\n              value: null\n            };\n            var order = this._sort && this._sort.length ? this._sort : {};\n            var itemId, data;\n\n            if (fromView) {\n              data = this.view();\n            } else {\n              data = this.data();\n            }\n\n            if (!!item) {\n              itemId = item.get(\"id\");\n\n              if (itemId === undefined || itemId === null || itemId === \"\") {\n                return [];\n              }\n\n              filter.value = itemId;\n            }\n\n            data = new Query(data).filter(filter).sort(order).toArray();\n            return data;\n          },\n          itemsTree: function (item, field) {\n            var data = [],\n                current,\n                items = this.itemChildren(item, true),\n                children,\n                i;\n\n            for (i = 0; i < items.length; i++) {\n              current = items[i];\n\n              if (current.get(\"expanded\")) {\n                children = this.itemsTree(current, field);\n                current = extend(true, {}, current);\n                current.children = children;\n              }\n\n              current = extend(true, {}, current);\n              data.push(current);\n            }\n\n            if (field !== null && field !== undefined) {\n              data = new Query(data).group({\n                field: field\n              }).toArray();\n            }\n\n            return data;\n          },\n          prospectParents: function (skippedItem, item) {\n            var data = [],\n                current,\n                items = this.itemChildren(item, false),\n                children,\n                i;\n\n            for (i = 0; i < items.length; i++) {\n              current = items[i];\n\n              if (current.get(\"id\") === skippedItem.get(\"id\")) {\n                continue;\n              }\n\n              data.push(current);\n\n              if (current.get(\"hasChildren\")) {\n                children = this.prospectParents(skippedItem, current);\n                data = data.concat(children);\n              }\n            }\n\n            return data;\n          },\n          read: function (data) {\n            return DataSource.fn.read.call(this, data).then(this._loadExpanded.bind(this, data));\n          },\n          toggleChildren: function (item, expand) {\n            var defaultPromise = $.Deferred().resolve().promise(),\n                loaded = item.loaded(); // reset error state\n\n            if (item._error) {\n              item.expanded = false;\n              item._error = undefined;\n            } // toggle expanded state\n\n\n            if (typeof expand == \"undefined\") {\n              expand = !item.expanded;\n            }\n\n            item.expanded = expand;\n\n            if (!loaded) {\n              defaultPromise = this.load(item);\n            }\n\n            return defaultPromise;\n          },\n          _innerGroupedItemsTree: function (field, grouped, map) {\n            var group, i, j, itemId, innerGrouped, children, current, hasChildren;\n\n            for (i = 0; i < grouped.length; i++) {\n              group = grouped[i];\n              children = [];\n              hasChildren = false;\n\n              for (j = 0; j < group.items.length; j++) {\n                current = group.items[j];\n\n                if (!group.hasChildren && current.hasChildren) {\n                  group.hasChildren = true;\n                }\n\n                if (current.expanded) {\n                  group.expanded = true;\n                }\n\n                itemId = group.items[j].get(\"id\");\n                children = children.concat(map[itemId]);\n              }\n\n              if (group.expanded) {\n                innerGrouped = new Query(children).group({\n                  field: field\n                }).toArray();\n                group.children = this._innerGroupedItemsTree(field, innerGrouped, map);\n              }\n\n              if (!group.hasChildren && children.length > 0) {\n                group.hasChildren = true;\n              }\n            }\n\n            return grouped;\n          },\n          _loadExpanded: function (data) {\n            var items, i, current;\n\n            if (!data) {\n              return;\n            }\n\n            if (data.id !== null && data.id !== undefined) {\n              items = this._byParentId(data.id);\n            } else {\n              items = this._byParentId(this._defaultParentId());\n            }\n\n            for (i = 0; i < items.length; i++) {\n              current = items[i];\n\n              if (current.expanded && !current.loaded()) {\n                this.toggleChildren(current, true);\n              }\n            }\n          }\n        });\n\n        OrgChartDataSource.create = function (options) {\n          if (Array.isArray(options)) {\n            options = {\n              data: options\n            };\n          } else if (options instanceof ObservableArray) {\n            options = {\n              data: options.toJSON()\n            };\n          }\n\n          if (!(options instanceof OrgChartDataSource) && options instanceof DataSource) {\n            throw new Error(\"Incorrect DataSource type. Only OrgChartDataSource instances are supported\");\n          }\n\n          return options instanceof OrgChartDataSource ? options : new OrgChartDataSource(options);\n        };\n\n        extend(true, kendo.data, {\n          OrgChartModel: OrgChartModel,\n          OrgChartDataSource: OrgChartDataSource\n        });\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1654:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.treelist\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}