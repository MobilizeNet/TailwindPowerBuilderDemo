{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1428);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1051:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.core\");\n    /***/\n  },\n\n  /***/\n  1428:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1051)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"scheduler.view\",\n        name: \"Scheduler View\",\n        category: \"web\",\n        description: \"The Scheduler Common View\",\n        depends: [\"core\"],\n        hidden: true\n      };\n      kendo.ui.scheduler = {};\n      /* jshint eqnull: true */\n\n      (function ($) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            getDate = kendo.date.getDate,\n            Widget = ui.Widget,\n            outerHeight = kendo._outerHeight,\n            keys = kendo.keys,\n            NS = \".kendoSchedulerView\",\n            INVERSE_COLOR_CLASS = \"k-event-inverse\",\n            MIN_HORIZONTAL_SCROLL_SIZE = 1024,\n            math = Math,\n            SPACE = \" \";\n\n        function levels(values, key) {\n          var result = [];\n\n          function collect(depth, values) {\n            values = values[key];\n\n            if (values) {\n              var level = result[depth] = result[depth] || [];\n\n              for (var idx = 0; idx < values.length; idx++) {\n                level.push(values[idx]);\n                collect(depth + 1, values[idx]);\n              }\n            }\n          }\n\n          collect(0, values);\n          return result;\n        }\n\n        function table(tableRows, className) {\n          if (!tableRows.length) {\n            return \"\";\n          }\n\n          return '<table role=\"presentation\" class=\"' + kendo.trim('k-scheduler-table ' + (className || \"\")) + '\">' + '<tr>' + tableRows.join(\"</tr><tr>\") + '</tr>' + '</table>';\n        }\n\n        function allDayTable(tableRows, className) {\n          if (!tableRows.length) {\n            return \"\";\n          }\n\n          return \"<div style='position:relative'>\" + table(tableRows, className) + \"</div>\";\n        }\n\n        function timesHeader(columnLevelCount, allDaySlot, rowCount) {\n          var tableRows = [];\n\n          if (rowCount > 0) {\n            for (var idx = 0; idx < columnLevelCount; idx++) {\n              tableRows.push(\"<th>&#8203;</th>\");\n            }\n          }\n\n          if (allDaySlot) {\n            tableRows.push('<th class=\"k-scheduler-times-all-day\">' + allDaySlot.text + '</th>');\n          }\n\n          if (rowCount < 1) {\n            return $();\n          }\n\n          return $('<div class=\"k-scheduler-times\">' + table(tableRows) + '</div>');\n        }\n\n        function content() {\n          return $('<div class=\"k-scheduler-content\">' + '<table role=\"presentation\" class=\"k-scheduler-table\"></table>' + '</div>');\n        }\n\n        var HINT = '<div class=\"k-marquee k-scheduler-marquee\">' + '<div class=\"k-marquee-color\"></div>' + '<div class=\"k-marquee-text\">' + '<div class=\"k-label-top\"></div>' + '<div class=\"k-label-bottom\"></div>' + '</div>' + '</div>';\n        var ResourceView = kendo.Class.extend({\n          init: function (index, isRtl, enforceAllDaySlot) {\n            this._index = index;\n            this._timeSlotCollections = [];\n            this._daySlotCollections = [];\n            this._isRtl = isRtl;\n            this._enforceAllDaySlot = enforceAllDaySlot;\n          },\n          addTimeSlotCollection: function (startDate, endDate) {\n            return this._addCollection(startDate, endDate, this._timeSlotCollections);\n          },\n          addDaySlotCollection: function (startDate, endDate) {\n            return this._addCollection(startDate, endDate, this._daySlotCollections);\n          },\n          _addCollection: function (startDate, endDate, collections) {\n            var collection = new SlotCollection(startDate, endDate, this._index, collections.length);\n            collections.push(collection);\n            return collection;\n          },\n          timeSlotCollectionCount: function () {\n            return this._timeSlotCollections.length;\n          },\n          daySlotCollectionCount: function () {\n            return this._daySlotCollections.length;\n          },\n          daySlotByPosition: function (x, y, byDate) {\n            return this._slotByPosition(x, y, this._daySlotCollections, byDate);\n          },\n          timeSlotByPosition: function (x, y, byDate) {\n            return this._slotByPosition(x, y, this._timeSlotCollections, byDate);\n          },\n          _slotByPosition: function (x, y, collections, byDate) {\n            for (var collectionIndex = 0; collectionIndex < collections.length; collectionIndex++) {\n              var collection = collections[collectionIndex];\n\n              for (var slotIndex = 0; slotIndex < collection.count(); slotIndex++) {\n                var slot = collection.at(slotIndex);\n                var width = slot.offsetWidth;\n                var height = slot.offsetHeight;\n                var nextSlot;\n                var horizontalEnd = slot.offsetLeft + width;\n                var verticalEnd = slot.offsetTop + height;\n\n                if (!byDate) {\n                  nextSlot = collection.at(slotIndex + 1);\n                }\n\n                if (nextSlot) {\n                  if (nextSlot.offsetLeft != slot.offsetLeft) {\n                    if (this._isRtl) {\n                      horizontalEnd = slot.offsetLeft + (slot.offsetLeft - nextSlot.offsetLeft);\n                    } else {\n                      horizontalEnd = nextSlot.offsetLeft;\n                    }\n                  } else {\n                    verticalEnd = nextSlot.offsetTop;\n                  }\n                }\n\n                if (x >= slot.offsetLeft && x < horizontalEnd && y >= slot.offsetTop && y < verticalEnd) {\n                  return slot;\n                }\n              }\n            }\n          },\n          refresh: function () {\n            var collectionIndex;\n\n            for (collectionIndex = 0; collectionIndex < this._daySlotCollections.length; collectionIndex++) {\n              this._daySlotCollections[collectionIndex].refresh();\n            }\n\n            for (collectionIndex = 0; collectionIndex < this._timeSlotCollections.length; collectionIndex++) {\n              this._timeSlotCollections[collectionIndex].refresh();\n            }\n          },\n          timeSlotRanges: function (startTime, endTime) {\n            var collections = this._timeSlotCollections;\n\n            var start = this._startSlot(startTime, collections);\n\n            var firstIndex, lastIndex;\n\n            if (!start.inRange && startTime >= start.slot.end) {\n              firstIndex = start.slot.collectionIndex + 1;\n              start = null;\n            }\n\n            var end = start;\n\n            if (startTime < endTime) {\n              end = this._endSlot(endTime, collections);\n            }\n\n            if (end && !end.inRange && endTime <= end.slot.start) {\n              lastIndex = end.slot.collectionIndex;\n\n              if (endTime === end.slot.start && (start && lastIndex > start.slot.collectionIndex || lastIndex > firstIndex)) {\n                lastIndex -= 1;\n              }\n\n              end = null;\n            }\n\n            if (start === null && end === null) {\n              if (endTime - startTime < kendo.date.MS_PER_DAY) {\n                return [];\n              } else {\n                start = {\n                  inRange: true,\n                  slot: collections[firstIndex].first()\n                };\n                end = {\n                  inRange: true,\n                  slot: collections[lastIndex].last()\n                };\n              }\n            }\n\n            if (start === null) {\n              if (end.slot.end <= startTime) {\n                return [];\n              }\n\n              start = {\n                inRange: true,\n                slot: (collections[firstIndex] || collections[end.slot.collectionIndex]).first()\n              };\n            }\n\n            if (end === null) {\n              if (start.slot.start >= endTime) {\n                return [];\n              }\n\n              end = {\n                inRange: true,\n                slot: (collections[lastIndex] || collections[start.slot.collectionIndex]).last()\n              };\n            }\n\n            return this._continuousRange(TimeSlotRange, collections, start, end);\n          },\n          daySlotRanges: function (startTime, endTime, isAllDay) {\n            var collections = this._daySlotCollections;\n\n            var start = this._startSlot(startTime, collections, isAllDay);\n\n            if (!start.inRange && startTime >= start.slot.end) {\n              start = null;\n            }\n\n            var end = start;\n\n            if (startTime < endTime) {\n              end = this._endSlot(endTime, collections, isAllDay);\n            }\n\n            if (end && !end.inRange && endTime <= end.slot.start) {\n              end = null;\n            }\n\n            if (start === null && end === null) {\n              return [];\n            }\n\n            if (start === null) {\n              if (end.slot.end <= startTime) {\n                return [];\n              }\n\n              do {\n                startTime += kendo.date.MS_PER_DAY;\n                start = this._startSlot(startTime, collections, isAllDay);\n              } while (!start.inRange && startTime >= start.slot.end);\n            }\n\n            if (end === null) {\n              if (start.slot.start >= endTime) {\n                return [];\n              }\n\n              do {\n                endTime -= kendo.date.MS_PER_DAY;\n                end = this._endSlot(endTime, collections, isAllDay);\n              } while (!end.inRange && endTime <= end.slot.start);\n            }\n\n            return this._continuousRange(DaySlotRange, collections, start, end);\n          },\n          _continuousRange: function (range, collections, start, end) {\n            var startSlot = start.slot;\n            var endSlot = end.slot;\n            var startIndex = startSlot.collectionIndex;\n            var endIndex = endSlot.collectionIndex;\n            var ranges = [];\n\n            for (var collectionIndex = startIndex; collectionIndex <= endIndex; collectionIndex++) {\n              var collection = collections[collectionIndex];\n              var first = collection.first();\n              var last = collection.last();\n              var head = false;\n              var tail = false;\n\n              if (collectionIndex == startIndex) {\n                tail = !start.inRange;\n              }\n\n              if (collectionIndex == endIndex) {\n                head = !end.inRange;\n              }\n\n              if (first.start < startSlot.start) {\n                first = startSlot;\n              }\n\n              if (last.start > endSlot.start) {\n                last = endSlot;\n              }\n\n              if (startIndex < endIndex) {\n                if (collectionIndex == startIndex) {\n                  head = true;\n                } else if (collectionIndex == endIndex) {\n                  tail = true;\n                } else {\n                  head = tail = true;\n                }\n              }\n\n              ranges.push(new range({\n                start: first,\n                end: last,\n                collection: collection,\n                head: head,\n                tail: tail\n              }));\n            }\n\n            return ranges;\n          },\n          slotRanges: function (event, isDay) {\n            var startTime = event._startTime || kendo.date.toUtcTime(event.start);\n            var endTime = event._endTime || kendo.date.toUtcTime(event.end);\n\n            if (isDay === undefined) {\n              if (this._enforceAllDaySlot) {\n                isDay = event.isMultiDay();\n              } else {\n                isDay = event.isAllDay;\n              }\n            }\n\n            if (isDay) {\n              return this.daySlotRanges(startTime, endTime, event.isAllDay);\n            }\n\n            return this.timeSlotRanges(startTime, endTime);\n          },\n          ranges: function (startTime, endTime, isDay, isAllDay) {\n            if (typeof startTime != \"number\") {\n              startTime = kendo.date.toUtcTime(startTime);\n            }\n\n            if (typeof endTime != \"number\") {\n              endTime = kendo.date.toUtcTime(endTime);\n            }\n\n            if (isDay) {\n              return this.daySlotRanges(startTime, endTime, isAllDay);\n            }\n\n            return this.timeSlotRanges(startTime, endTime);\n          },\n          _startCollection: function (date, collections) {\n            for (var collectionIndex = 0; collectionIndex < collections.length; collectionIndex++) {\n              var collection = collections[collectionIndex];\n\n              if (collection.startInRange(date)) {\n                return collection;\n              }\n            }\n\n            return null;\n          },\n          _endCollection: function (date, collections, isAllDay) {\n            for (var collectionIndex = 0; collectionIndex < collections.length; collectionIndex++) {\n              var collection = collections[collectionIndex];\n\n              if (collection.endInRange(date, isAllDay)) {\n                return collection;\n              }\n            }\n\n            return null;\n          },\n          _getCollections: function (isDay) {\n            return isDay ? this._daySlotCollections : this._timeSlotCollections;\n          },\n          continuousSlot: function (slot, reverse) {\n            var pad = reverse ? -1 : 1;\n\n            var collections = this._getCollections(slot.isDaySlot);\n\n            var collection = collections[slot.collectionIndex + pad];\n            return collection ? collection[reverse ? \"last\" : \"first\"]() : undefined;\n          },\n          firstSlot: function () {\n            var collections = this._getCollections(this.daySlotCollectionCount());\n\n            return collections[0].first();\n          },\n          lastSlot: function () {\n            var collections = this._getCollections(this.daySlotCollectionCount());\n\n            return collections[collections.length - 1].last();\n          },\n          upSlot: function (slot, keepCollection, groupByDateVertically) {\n            var that = this;\n\n            var moveToDaySlot = function (isDaySlot, collectionIndex, index) {\n              var isFirstCell = index === 0;\n\n              if (!keepCollection && !isDaySlot && isFirstCell && that.daySlotCollectionCount()) {\n                return that._daySlotCollections[0].at(collectionIndex);\n              }\n            };\n\n            if (!this.timeSlotCollectionCount()) {\n              keepCollection = true;\n            }\n\n            return this._verticalSlot(slot, -1, moveToDaySlot, groupByDateVertically);\n          },\n          downSlot: function (slot, keepCollection, groupByDateVertically) {\n            var that = this;\n\n            var moveToTimeSlot = function (isDaySlot, collectionIndex, index) {\n              if (!keepCollection && isDaySlot && that.timeSlotCollectionCount()) {\n                return that._timeSlotCollections[index].at(0);\n              }\n            };\n\n            if (!this.timeSlotCollectionCount()) {\n              keepCollection = true;\n            }\n\n            return this._verticalSlot(slot, 1, moveToTimeSlot, groupByDateVertically);\n          },\n          leftSlot: function (slot, groupByDateVertically) {\n            return this._horizontalSlot(slot, -1, groupByDateVertically);\n          },\n          rightSlot: function (slot, groupByDateVertically) {\n            return this._horizontalSlot(slot, 1, groupByDateVertically);\n          },\n          _horizontalSlot: function (slot, step, groupByDateVertically) {\n            var index = slot.index;\n            var isDaySlot = slot.isDaySlot;\n            var collectionIndex = slot.collectionIndex;\n\n            var collections = this._getCollections(isDaySlot);\n\n            isDaySlot = groupByDateVertically ? false : isDaySlot;\n\n            if (isDaySlot) {\n              index += step;\n            } else {\n              collectionIndex += step;\n            }\n\n            var collection = collections[collectionIndex];\n            return collection ? collection.at(index) : undefined;\n          },\n          _verticalSlot: function (slot, step, swapCollection, groupByDateVertically) {\n            var index = slot.index;\n            var isDaySlot = slot.isDaySlot;\n            var collectionIndex = slot.collectionIndex;\n\n            var collections = this._getCollections(isDaySlot);\n\n            slot = swapCollection(isDaySlot, collectionIndex, index);\n\n            if (slot) {\n              return slot;\n            }\n\n            isDaySlot = groupByDateVertically ? false : isDaySlot;\n\n            if (isDaySlot) {\n              collectionIndex += step;\n            } else {\n              index += step;\n            }\n\n            var collection = collections[collectionIndex];\n            return collection ? collection.at(index) : undefined;\n          },\n          _collection: function (index, multiday) {\n            var collections = multiday ? this._daySlotCollections : this._timeSlotCollections;\n            return collections[index];\n          },\n          _startSlot: function (time, collections, isAllDay) {\n            var collection = this._startCollection(time, collections);\n\n            var inRange = true;\n            var index = 0;\n\n            if (!collection) {\n              collection = collections[index];\n\n              while (index < collections.length - 1 && collection._start < time) {\n                index++;\n                collection = collections[index];\n              }\n\n              inRange = false;\n            }\n\n            var slot = collection.slotByStartDate(time, isAllDay);\n\n            if (!slot) {\n              slot = collection.first();\n              inRange = false;\n            }\n\n            return {\n              slot: slot,\n              inRange: inRange\n            };\n          },\n          _endSlot: function (time, collections, isAllDay) {\n            var collection = this._endCollection(time, collections, isAllDay);\n\n            var inRange = true;\n            var index = collections.length - 1;\n\n            if (!collection) {\n              collection = collections[index];\n\n              while (index > 0 && collection._start > time) {\n                index--;\n                collection = collections[index];\n              }\n\n              inRange = false;\n            }\n\n            var slot = collection.slotByEndDate(time, isAllDay);\n\n            if (!slot) {\n              if (time <= collection.first().start) {\n                slot = collection.first();\n              } else {\n                slot = collection.last();\n              }\n\n              inRange = false;\n            }\n\n            return {\n              slot: slot,\n              inRange: inRange\n            };\n          },\n          getSlotCollection: function (index, isDay) {\n            return this[isDay ? \"getDaySlotCollection\" : \"getTimeSlotCollection\"](index);\n          },\n          getTimeSlotCollection: function (index) {\n            return this._timeSlotCollections[index];\n          },\n          getDaySlotCollection: function (index) {\n            return this._daySlotCollections[index];\n          }\n        });\n        var SlotRange = kendo.Class.extend({\n          init: function (options) {\n            $.extend(this, options);\n          },\n          innerHeight: function () {\n            var collection = this.collection;\n            var startIndex = this.start.index;\n            var endIndex = this.end.index;\n            var result = 0;\n\n            for (var slotIndex = startIndex; slotIndex <= endIndex; slotIndex++) {\n              result += collection.at(slotIndex).offsetHeight;\n            }\n\n            return result;\n          },\n          events: function () {\n            return this.collection.events();\n          },\n          addEvent: function (event) {\n            this.events().push(event);\n          },\n          startSlot: function () {\n            if (this.start.offsetLeft > this.end.offsetLeft) {\n              return this.end;\n            }\n\n            return this.start;\n          },\n          endSlot: function () {\n            if (this.start.offsetLeft > this.end.offsetLeft) {\n              return this.start;\n            }\n\n            return this.end;\n          }\n        });\n        var TimeSlotRange = SlotRange.extend({\n          innerHeight: function () {\n            var collection = this.collection;\n            var startIndex = this.start.index;\n            var endIndex = this.end.index;\n            var result = 0;\n\n            for (var slotIndex = startIndex; slotIndex <= endIndex; slotIndex++) {\n              result += collection.at(slotIndex).offsetHeight;\n            }\n\n            return result;\n          },\n          outerRect: function (start, end, snap) {\n            return this._rect(\"offset\", start, end, snap);\n          },\n          _rect: function (property, start, end, snap) {\n            var top;\n            var bottom;\n            var left;\n            var right;\n            var startSlot = this.start;\n            var endSlot = this.end;\n            var isRtl = kendo.support.isRtl(startSlot.element);\n\n            if (typeof start != \"number\") {\n              start = kendo.date.toUtcTime(start);\n            }\n\n            if (typeof end != \"number\") {\n              end = kendo.date.toUtcTime(end);\n            }\n\n            if (snap) {\n              top = startSlot.offsetTop;\n              bottom = endSlot.offsetTop + endSlot[property + \"Height\"];\n\n              if (isRtl) {\n                left = endSlot.offsetLeft;\n                right = startSlot.offsetLeft + startSlot[property + \"Width\"];\n              } else {\n                left = startSlot.offsetLeft;\n                right = endSlot.offsetLeft + endSlot[property + \"Width\"];\n              }\n            } else {\n              var startOffset = start - startSlot.start;\n\n              if (startOffset < 0) {\n                startOffset = 0;\n              }\n\n              var startSlotDuration = startSlot.end - startSlot.start;\n              top = startSlot.offsetTop + startSlot[property + \"Height\"] * startOffset / startSlotDuration;\n              var endOffset = endSlot.end - end;\n\n              if (endOffset < 0) {\n                endOffset = 0;\n              }\n\n              var endSlotDuration = endSlot.end - endSlot.start;\n              bottom = endSlot.offsetTop + endSlot[property + \"Height\"] - endSlot[property + \"Height\"] * endOffset / endSlotDuration;\n\n              if (isRtl) {\n                left = Math.round(endSlot.offsetLeft + endSlot[property + \"Width\"] * endOffset / endSlotDuration);\n                right = Math.round(startSlot.offsetLeft + startSlot[property + \"Width\"] - startSlot[property + \"Width\"] * startOffset / startSlotDuration);\n              } else {\n                left = Math.round(startSlot.offsetLeft + startSlot[property + \"Width\"] * startOffset / startSlotDuration);\n                right = Math.round(endSlot.offsetLeft + endSlot[property + \"Width\"] - endSlot[property + \"Width\"] * endOffset / endSlotDuration);\n              }\n            }\n\n            return {\n              top: top,\n              bottom: bottom,\n              //first column has no left border\n              left: left === 0 ? left : left + 1,\n              right: right\n            };\n          },\n          innerRect: function (start, end, snap) {\n            return this._rect(\"client\", start, end, snap);\n          }\n        });\n        var DaySlotRange = SlotRange.extend({\n          innerWidth: function () {\n            var collection = this.collection;\n            var startIndex = this.start.index;\n            var endIndex = this.end.index;\n            var result = 0;\n            var width = startIndex !== endIndex ? \"offsetWidth\" : \"clientWidth\";\n\n            for (var slotIndex = startIndex; slotIndex <= endIndex; slotIndex++) {\n              result += collection.at(slotIndex)[width];\n            }\n\n            return result;\n          }\n        });\n        var SlotCollection = kendo.Class.extend({\n          init: function (startDate, endDate, groupIndex, collectionIndex) {\n            this._slots = [];\n            this._events = [];\n            this._start = kendo.date.toUtcTime(startDate);\n            this._end = kendo.date.toUtcTime(endDate);\n            this._groupIndex = groupIndex;\n            this._collectionIndex = collectionIndex;\n          },\n          refresh: function () {\n            for (var slotIndex = 0; slotIndex < this._slots.length; slotIndex++) {\n              this._slots[slotIndex].refresh();\n            }\n          },\n          startInRange: function (date) {\n            return this._start <= date && date < this._end;\n          },\n          endInRange: function (date, isAllDay) {\n            var end = isAllDay ? date < this._end : date <= this._end;\n            return this._start <= date && end;\n          },\n          slotByStartDate: function (date) {\n            var time = date;\n\n            if (typeof time != \"number\") {\n              time = kendo.date.toUtcTime(date);\n            }\n\n            for (var slotIndex = 0; slotIndex < this._slots.length; slotIndex++) {\n              var slot = this._slots[slotIndex];\n\n              if (slot.startInRange(time)) {\n                return slot;\n              }\n            }\n\n            return null;\n          },\n          slotByEndDate: function (date, allday) {\n            var time = date;\n\n            if (typeof time != \"number\") {\n              time = kendo.date.toUtcTime(date);\n            }\n\n            if (allday) {\n              return this.slotByStartDate(date, false);\n            }\n\n            for (var slotIndex = 0; slotIndex < this._slots.length; slotIndex++) {\n              var slot = this._slots[slotIndex];\n\n              if (slot.endInRange(time)) {\n                return slot;\n              }\n            }\n\n            return null;\n          },\n          count: function () {\n            return this._slots.length;\n          },\n          events: function () {\n            return this._events;\n          },\n          addTimeSlot: function (element, start, end, isHorizontal) {\n            var slot = new TimeSlot(element, start, end, this._groupIndex, this._collectionIndex, this._slots.length, isHorizontal);\n\n            this._slots.push(slot);\n          },\n          addDaySlot: function (element, start, end, eventCount) {\n            var slot = new DaySlot(element, start, end, this._groupIndex, this._collectionIndex, this._slots.length, eventCount);\n\n            this._slots.push(slot);\n          },\n          first: function () {\n            return this._slots[0];\n          },\n          last: function () {\n            return this._slots[this._slots.length - 1];\n          },\n          at: function (index) {\n            return this._slots[index];\n          }\n        });\n        var Slot = kendo.Class.extend({\n          init: function (element, start, end, groupIndex, collectionIndex, index) {\n            this.element = element;\n            this.clientWidth = element.clientWidth;\n            this.clientHeight = element.clientHeight;\n            this.offsetWidth = element.offsetWidth;\n            this.offsetHeight = element.offsetHeight;\n            this.offsetTop = element.offsetTop;\n            this.offsetLeft = element.offsetLeft;\n            this.start = start;\n            this.end = end;\n            this.element = element;\n            this.groupIndex = groupIndex;\n            this.collectionIndex = collectionIndex;\n            this.index = index;\n            this.isDaySlot = false;\n          },\n          refresh: function () {\n            var element = this.element;\n            this.clientWidth = element.clientWidth;\n            this.clientHeight = element.clientHeight;\n            this.offsetWidth = element.offsetWidth;\n            this.offsetHeight = element.offsetHeight;\n            this.offsetTop = element.offsetTop;\n            this.offsetLeft = element.offsetLeft;\n          },\n          startDate: function () {\n            return kendo.timezone.toLocalDate(this.start);\n          },\n          endDate: function () {\n            return kendo.timezone.toLocalDate(this.end);\n          },\n          startInRange: function (date) {\n            return this.start <= date && date < this.end;\n          },\n          endInRange: function (date) {\n            return this.start < date && date <= this.end;\n          },\n          startOffset: function () {\n            return this.start;\n          },\n          endOffset: function () {\n            return this.end;\n          }\n        });\n        var TimeSlot = Slot.extend({\n          init: function (element, start, end, groupIndex, collectionIndex, index, isHorizontal) {\n            Slot.fn.init.apply(this, arguments);\n            this.isHorizontal = isHorizontal ? true : false;\n          },\n          offsetX: function (rtl, offset) {\n            if (rtl) {\n              return this.offsetLeft + offset;\n            } else {\n              return this.offsetLeft + offset;\n            }\n          },\n          startInRange: function (date) {\n            return this.start <= date && date < this.end;\n          },\n          endInRange: function (date) {\n            return this.start < date && date <= this.end;\n          },\n          startOffset: function (x, y, snap) {\n            if (snap) {\n              return this.start;\n            }\n\n            var offset = $(this.element).offset();\n            var duration = this.end - this.start;\n            var difference;\n            var time;\n\n            if (this.isHorizontal) {\n              //need update\n              var isRtl = kendo.support.isRtl(this.element);\n              difference = x - offset.left;\n              time = Math.floor(duration * (difference / this.offsetWidth));\n\n              if (isRtl) {\n                return this.start + duration - time;\n              }\n            } else {\n              difference = y - offset.top;\n              time = Math.floor(duration * (difference / this.offsetHeight));\n            }\n\n            return this.start + time;\n          },\n          endOffset: function (x, y, snap) {\n            if (snap) {\n              return this.end;\n            }\n\n            var offset = $(this.element).offset();\n            var duration = this.end - this.start;\n            var difference;\n            var time;\n\n            if (this.isHorizontal) {\n              //need update\n              var isRtl = kendo.support.isRtl(this.element);\n              difference = x - offset.left;\n              time = Math.floor(duration * (difference / this.offsetWidth));\n\n              if (isRtl) {\n                return this.start + duration - time;\n              }\n            } else {\n              difference = y - offset.top;\n              time = Math.floor(duration * (difference / this.offsetHeight));\n            }\n\n            return this.start + time;\n          }\n        });\n        var DaySlot = Slot.extend({\n          init: function (element, start, end, groupIndex, collectionIndex, index, eventCount) {\n            Slot.fn.init.apply(this, arguments);\n            this.eventCount = eventCount;\n            this.isDaySlot = true;\n\n            if (this.element.children.length) {\n              var firstChild = this.element.children[0];\n              this.firstChildHeight = firstChild.offsetHeight;\n              this.firstChildTop = firstChild.offsetTop;\n            } else {\n              this.firstChildHeight = 3;\n              this.firstChildTop = 0;\n            }\n          },\n          startDate: function () {\n            var date = new Date(this.start);\n            return kendo.timezone.apply(date, \"Etc/UTC\");\n          },\n          endDate: function () {\n            var date = new Date(this.end);\n            return kendo.timezone.apply(date, \"Etc/UTC\");\n          },\n          startInRange: function (date) {\n            return this.start <= date && date < this.end;\n          },\n          endInRange: function (date) {\n            return this.start < date && date <= this.end;\n          }\n        });\n        var scrollbarWidth;\n\n        function scrollbar() {\n          scrollbarWidth = scrollbarWidth ? scrollbarWidth : kendo.support.scrollbar();\n          return scrollbarWidth;\n        }\n\n        kendo.ui.SchedulerView = Widget.extend({\n          init: function (element, options) {\n            Widget.fn.init.call(this, element, $.extend({}, this.options, options));\n\n            this._normalizeOptions();\n\n            this._scrollbar = scrollbar();\n            this._isRtl = kendo.support.isRtl(element);\n            this._resizeHint = $();\n            this._moveHint = $();\n            this._cellId = kendo.guid();\n\n            this._resourcesForGroups();\n\n            this._selectedSlots = [];\n            this.element.attr(\"role\", \"application\");\n          },\n          options: {\n            messages: {\n              ariaEventLabel: {\n                on: \"on\",\n                at: \"at\",\n                to: \"to\",\n                allDay: \"(all day)\",\n                prefix: \"\"\n              }\n            }\n          },\n          visibleEndDate: function () {\n            return this.endDate();\n          },\n          _normalizeOptions: function () {\n            var options = this.options;\n\n            if (options.startTime) {\n              options.startTime.setMilliseconds(0);\n            }\n\n            if (options.endTime) {\n              options.endTime.setMilliseconds(0);\n            }\n\n            if (options.workDayStart) {\n              options.workDayStart.setMilliseconds(0);\n            }\n\n            if (options.workDayEnd) {\n              options.workDayEnd.setMilliseconds(0);\n            }\n          },\n          _isMobile: function () {\n            var options = this.options;\n            return options.mobile === true && kendo.support.mobileOS || options.mobile === \"phone\" || options.mobile === \"tablet\";\n          },\n          _addResourceView: function () {\n            var resourceView = new ResourceView(this.groups.length, this._isRtl, this.options.enforceAllDaySlot);\n            this.groups.push(resourceView);\n            return resourceView;\n          },\n          dateForTitle: function () {\n            return kendo.format(this.options.selectedDateFormat, this.startDate(), this.endDate());\n          },\n          shortDateForTitle: function () {\n            return kendo.format(this.options.selectedShortDateFormat, this.startDate(), this.endDate());\n          },\n          mobileDateForTitle: function () {\n            return kendo.format(this.options.selectedMobileDateFormat || this.options.selectedShortDateFormat, this.startDate(), this.endDate());\n          },\n          _changeGroup: function (selection, previous) {\n            var method = previous ? \"prevGroupSlot\" : \"nextGroupSlot\";\n            var slot = this[method](selection.start, selection.groupIndex, selection.isAllDay);\n\n            if (slot) {\n              selection.groupIndex += previous ? -1 : 1;\n            }\n\n            if (this._isGroupedByDate() && !slot) {\n              selection.groupIndex = previous ? this.groups.length - 1 : 0;\n            }\n\n            return slot;\n          },\n          _changeDate: function (selection, slot, previous) {\n            var group = this.groups[selection.groupIndex];\n            var collections, index;\n\n            if (previous) {\n              collections = group._getCollections(false);\n              index = group.daySlotCollectionCount() ? slot.index - 1 : slot.collectionIndex - 1;\n\n              if (index >= 0) {\n                return collections[index]._slots[collections[index]._slots.length - 1];\n              }\n            } else {\n              collections = group._getCollections(group.daySlotCollectionCount());\n              index = group.daySlotCollectionCount() ? 0 : slot.collectionIndex + 1;\n              var slotIndex = group.daySlotCollectionCount() ? slot.collectionIndex + 1 : 0;\n\n              if (collections[index] && collections[index]._slots[slotIndex]) {\n                return collections[index]._slots[slotIndex];\n              }\n            }\n          },\n          _changeGroupContinuously: function () {\n            return null;\n          },\n          _changeViewPeriod: function () {\n            return false;\n          },\n          _isInRange: function (newStart, newEnd) {\n            if (!newStart || !newEnd || !this.options.min || !this.options.max) {\n              return false;\n            }\n\n            return getDate(newStart) <= getDate(this.options.min) || getDate(newEnd) >= getDate(this.options.max);\n          },\n          _horizontalSlots: function (selection, ranges, multiple, reverse) {\n            var method = reverse ? \"leftSlot\" : \"rightSlot\";\n            var horizontalRange = {\n              startSlot: ranges[0].start,\n              endSlot: ranges[ranges.length - 1].end\n            };\n            var group = this.groups[selection.groupIndex];\n\n            var isVertical = this._isVerticallyGrouped();\n\n            if (!multiple) {\n              var slot = this._normalizeHorizontalSelection(selection, ranges, reverse);\n\n              if (slot) {\n                horizontalRange.startSlot = horizontalRange.endSlot = slot;\n              }\n            }\n\n            if (this._isGroupedByDate() && !multiple) {\n              var tempSlot = this._changeGroup(selection, reverse);\n\n              if (!tempSlot) {\n                horizontalRange = this._getNextHorizontalRange(group, method, horizontalRange);\n              } else {\n                horizontalRange.startSlot = horizontalRange.endSlot = tempSlot;\n              }\n            } else {\n              horizontalRange.startSlot = group[method](horizontalRange.startSlot);\n              horizontalRange.endSlot = group[method](horizontalRange.endSlot);\n\n              if (!multiple && !isVertical && (!horizontalRange.startSlot || !horizontalRange.endSlot)) {\n                horizontalRange.startSlot = horizontalRange.endSlot = this._changeGroup(selection, reverse);\n              }\n            }\n\n            var continuousSlot;\n\n            if ((!horizontalRange.startSlot || !horizontalRange.endSlot) && !this._isGroupedByDate()) {\n              continuousSlot = this._continuousSlot(selection, ranges, reverse);\n              continuousSlot = this._changeGroupContinuously(selection, continuousSlot, multiple, reverse);\n\n              if (continuousSlot) {\n                horizontalRange.startSlot = horizontalRange.endSlot = continuousSlot;\n              }\n            }\n\n            return horizontalRange;\n          },\n          _getNextHorizontalRange: function (group, method, horizontalRange) {\n            if (!this._isVerticallyGrouped()) {\n              horizontalRange.startSlot = group[method](horizontalRange.startSlot);\n              horizontalRange.endSlot = group[method](horizontalRange.endSlot);\n            }\n\n            return horizontalRange;\n          },\n          _verticalSlots: function (selection, ranges, multiple, reverse) {\n            var group = this.groups[selection.groupIndex];\n            var slot;\n            var verticalRange = {\n              startSlot: ranges[0].start,\n              endSlot: ranges[ranges.length - 1].end\n            };\n\n            if (!multiple) {\n              slot = this._normalizeVerticalSelection(selection, ranges, reverse);\n\n              if (slot) {\n                verticalRange.startSlot = verticalRange.endSlot = slot;\n              }\n            }\n\n            var method = reverse ? \"upSlot\" : \"downSlot\";\n            verticalRange = this._getNextVerticalRange(group, method, verticalRange, multiple);\n\n            if (!multiple && this._isVerticallyGrouped() && (!verticalRange.startSlot || !verticalRange.endSlot)) {\n              if (this._isGroupedByDate()) {\n                verticalRange.startSlot = verticalRange.endSlot = this._changeDate(selection, slot, reverse);\n              } else {\n                verticalRange.startSlot = verticalRange.endSlot = this._changeGroup(selection, reverse);\n              }\n            }\n\n            return verticalRange;\n          },\n          _getNextVerticalRange: function (group, method, verticalRange, multiple) {\n            verticalRange.startSlot = group[method](verticalRange.startSlot, multiple);\n            verticalRange.endSlot = group[method](verticalRange.endSlot, multiple);\n            return verticalRange;\n          },\n          _normalizeHorizontalSelection: function () {\n            return null;\n          },\n          _normalizeVerticalSelection: function (selection, ranges, reverse) {\n            var slot;\n\n            if (reverse) {\n              slot = ranges[0].start;\n            } else {\n              slot = ranges[ranges.length - 1].end;\n            }\n\n            return slot;\n          },\n          _continuousSlot: function () {\n            return null;\n          },\n          _footer: function () {\n            var that = this;\n            var options = that.options;\n\n            if (that._isMobile()) {\n              var html = '<div class=\"k-scheduler-footer k-toolbar\">';\n              html += '<span class=\"k-scheduler-today\"><a href=\"#\" class=\"k-link\">';\n              html += options.messages.today + '</a></span>';\n              html += \"</div>\";\n              that.footer = $(html).appendTo(that.element);\n            }\n\n            if (that.footer) {\n              that.footer.on(\"click\" + NS, \".k-scheduler-today\", function (e) {\n                e.preventDefault();\n                var timezone = that.options.timezone;\n                var action = \"today\";\n                var currentDate = new Date();\n                var date;\n\n                if (timezone) {\n                  var timezoneOffset = kendo.timezone.offset(currentDate, timezone);\n                  date = kendo.timezone.convert(currentDate, currentDate.getTimezoneOffset(), timezoneOffset);\n                } else {\n                  date = currentDate;\n                }\n\n                that.trigger(\"navigate\", {\n                  view: that.name || options.name,\n                  action: action,\n                  date: date\n                });\n              });\n            }\n          },\n          constrainSelection: function (selection) {\n            var group = this.groups[0];\n            var slot;\n\n            if (!this.inRange(selection)) {\n              slot = group.firstSlot();\n              selection.isAllDay = slot.isDaySlot;\n              selection.start = slot.startDate();\n              selection.end = slot.endDate();\n            } else {\n              if (!group.daySlotCollectionCount()) {\n                selection.isAllDay = false;\n              } else if (!group.timeSlotCollectionCount()) {\n                selection.isAllDay = true;\n              }\n            }\n\n            if (!this.groups[selection.groupIndex]) {\n              selection.groupIndex = 0;\n            }\n          },\n          move: function (selection, key, shift) {\n            var handled = false;\n            var group = this.groups[selection.groupIndex];\n\n            var verticalByDate = this._isGroupedByDate() && this._isVerticallyGrouped();\n\n            if (!group.timeSlotCollectionCount()) {\n              selection.isAllDay = true;\n            }\n\n            var ranges = group.ranges(selection.start, selection.end, selection.isAllDay, false);\n            var startSlot, endSlot, reverse, slots;\n\n            if (key === keys.DOWN || key === keys.UP) {\n              handled = true;\n              reverse = key === keys.UP;\n\n              this._updateDirection(selection, ranges, shift, reverse, true);\n\n              slots = this._verticalSlots(selection, ranges, shift, reverse);\n\n              if (!slots.startSlot && !shift && this._changeViewPeriod(selection, reverse, !verticalByDate)) {\n                return handled;\n              }\n            } else if (key === keys.LEFT || key === keys.RIGHT) {\n              handled = true;\n              reverse = key === keys.LEFT;\n\n              this._updateDirection(selection, ranges, shift, reverse, false);\n\n              slots = this._horizontalSlots(selection, ranges, shift, reverse);\n\n              if (!slots.startSlot && !shift && this._changeViewPeriod(selection, reverse, verticalByDate)) {\n                return handled;\n              }\n            }\n\n            if (handled) {\n              startSlot = slots.startSlot;\n              endSlot = slots.endSlot;\n\n              if (shift) {\n                var backward = selection.backward;\n\n                if (backward && startSlot) {\n                  selection.start = startSlot.startDate();\n                } else if (!backward && endSlot) {\n                  selection.end = endSlot.endDate();\n                }\n              } else if (startSlot && endSlot) {\n                selection.isAllDay = startSlot.isDaySlot;\n                selection.start = startSlot.startDate();\n                selection.end = endSlot.endDate();\n              }\n\n              selection.events = [];\n            }\n\n            return handled;\n          },\n          moveToEventInGroup: function (group, slot, selectedEvents, prev) {\n            var events = group._continuousEvents || [];\n            var found, event;\n            var pad = prev ? -1 : 1;\n            var length = events.length;\n            var idx = prev ? length - 1 : 0;\n            var i, lastSelected;\n\n            if (selectedEvents.length) {\n              lastSelected = selectedEvents[selectedEvents.length - 1];\n\n              if (prev) {\n                for (i = 0; i < events.length; i++) {\n                  if (events[i].uid === lastSelected) {\n                    idx = i + pad;\n                  }\n                }\n              } else {\n                for (i = events.length - 1; i > -1; i--) {\n                  if (events[i].uid === lastSelected) {\n                    idx = i + pad;\n                  }\n                }\n              }\n            }\n\n            while (idx < length && idx > -1) {\n              event = events[idx];\n\n              if (!prev && event.start.startDate() >= slot.startDate() || prev && event.start.startDate() <= slot.startDate()) {\n                if (event && $.inArray(event.uid, selectedEvents) === -1) {\n                  found = !!event;\n                  break;\n                }\n              }\n\n              idx += pad;\n            }\n\n            return event;\n          },\n          moveToEvent: function (selection, prev) {\n            var groupIndex = selection.groupIndex;\n            var group = this.groups[groupIndex];\n            var slot = group.ranges(selection.start, selection.end, this.name === \"month\" || selection.isAllDay, false)[0].start;\n            var length = this.groups.length;\n            var pad = prev ? -1 : 1;\n            var events = selection.events;\n            var event;\n\n            if (this._isGroupedByDate()) {\n              var allEvents = this._getAllEvents();\n\n              var uniqueAllEvents = this._getUniqueEvents(allEvents);\n\n              var sortedEvents = this._getSortedEvents(uniqueAllEvents);\n\n              if (events.length === 0) {\n                var eventIndex = this._getNextEventIndexBySlot(slot, sortedEvents, groupIndex);\n\n                if (prev) {\n                  eventIndex--;\n                }\n\n                event = sortedEvents[eventIndex];\n              } else {\n                var idx = this._getStartIdx(events, sortedEvents);\n\n                while (idx < sortedEvents.length && idx > -1) {\n                  if (events.length > 0) {\n                    slot = this._getSelectedSlot(slot, sortedEvents, event, idx, pad, prev);\n                  }\n\n                  if (!slot) {\n                    break;\n                  }\n\n                  if (!prev && sortedEvents[idx].start.startDate() >= slot.startDate() || prev && sortedEvents[idx].start.startDate() <= slot.startDate()) {\n                    if (events[0] != sortedEvents[idx].uid) {\n                      event = sortedEvents[idx];\n                      break;\n                    }\n                  }\n\n                  idx += pad;\n                }\n              }\n            } else {\n              while (groupIndex < length && groupIndex > -1) {\n                event = this.moveToEventInGroup(group, slot, events, prev);\n                groupIndex += pad;\n                group = this.groups[groupIndex];\n\n                if (!group || event) {\n                  break;\n                }\n\n                events = [];\n\n                if (prev) {\n                  slot = group.lastSlot();\n                } else {\n                  slot = group.firstSlot(true);\n                }\n              }\n            }\n\n            if (event) {\n              selection.events = [event.uid];\n              selection.start = event.start.startDate();\n              selection.end = event.end.endDate();\n              selection.isAllDay = event.start.isDaySlot;\n              selection.groupIndex = event.start.groupIndex;\n              selection.eventElement = event.element[0];\n            }\n\n            return !!event;\n          },\n          current: function (candidate) {\n            if (candidate !== undefined) {\n              this._current = candidate;\n\n              if (this.content.has(candidate)) {\n                this._scrollTo(candidate, this.content[0]);\n              }\n            } else {\n              return this._current;\n            }\n          },\n          select: function (selection) {\n            this.clearSelection();\n\n            if (!this._selectEvents(selection)) {\n              this._selectSlots(selection);\n            }\n          },\n          _getNextEventIndexBySlot: function (slot, sortedEvents, groupIndex) {\n            var tempIndex = 0;\n            var slotStartDate = kendo.date.getDate(slot.startDate());\n\n            for (var i = 0; i < sortedEvents.length; i++) {\n              var eventStartDate = kendo.date.getDate(sortedEvents[i].start.startDate());\n\n              if (slotStartDate > eventStartDate) {\n                tempIndex++;\n                continue;\n              }\n\n              if (slotStartDate.getTime() === eventStartDate.getTime() && groupIndex > sortedEvents[i].start.groupIndex) {\n                tempIndex++;\n                continue;\n              }\n\n              if (slotStartDate.getTime() === eventStartDate.getTime() && groupIndex >= sortedEvents[i].start.groupIndex && slot.startDate() > sortedEvents[i].start.startDate()) {\n                tempIndex++;\n                continue;\n              }\n\n              break;\n            }\n\n            return tempIndex;\n          },\n          _getSelectedSlot: function (slot, sortedEvents, event, idx, pad, prev) {\n            if (sortedEvents[idx + pad] && sortedEvents[idx].start.groupIndex !== sortedEvents[idx + pad].start.groupIndex) {\n              var groupIndex = sortedEvents[idx + pad].start.groupIndex;\n              var group = this.groups[groupIndex];\n\n              if (!group || event) {\n                slot = null;\n              }\n\n              if (prev) {\n                slot = group.lastSlot();\n              } else {\n                slot = group.firstSlot(true);\n              }\n            }\n\n            return slot;\n          },\n          _getStartIdx: function (events, sortedEvents) {\n            var selectedEventIndex = 0;\n            $.each(sortedEvents, function () {\n              if (this.uid === events[0]) {\n                return false;\n              }\n\n              selectedEventIndex++;\n            });\n            return selectedEventIndex;\n          },\n          _getAllEvents: function () {\n            var allEvents = [];\n            var groups = this.groups;\n\n            for (var idx = 0; idx < groups.length; idx++) {\n              if (groups[idx]._continuousEvents) {\n                allEvents = allEvents.concat(groups[idx]._continuousEvents);\n              }\n            }\n\n            return allEvents;\n          },\n          _getUniqueEvents: function (allEvents) {\n            var uniqueAllEvents = [];\n\n            for (var i = 0; i < allEvents.length; i++) {\n              var exists = false;\n\n              for (var j = 0; j < uniqueAllEvents.length; j++) {\n                if (allEvents[i].uid === uniqueAllEvents[j].uid) {\n                  exists = true;\n                  break;\n                }\n              }\n\n              if (!exists) {\n                uniqueAllEvents.push(allEvents[i]);\n              }\n            }\n\n            return uniqueAllEvents;\n          },\n          _getSortedEvents: function (uniqueAllEvents) {\n            return uniqueAllEvents.sort(function (first, second) {\n              var firstStartDate = first.start.startDate();\n              var secondStartDate = second.start.startDate();\n              var result = kendo.date.getDate(firstStartDate) - kendo.date.getDate(secondStartDate);\n\n              if (result === 0) {\n                result = first.start.groupIndex - second.start.groupIndex;\n              }\n\n              if (result === 0) {\n                result = firstStartDate.getTime() - secondStartDate.getTime();\n              }\n\n              if (result === 0) {\n                if (first.start.isDaySlot && !second.start.isDaySlot) {\n                  result = -1;\n                }\n\n                if (!first.start.isDaySlot && second.start.isDaySlot) {\n                  result = 1;\n                }\n              }\n\n              if (result === 0) {\n                result = $(first.element).index() - $(second.element).index();\n              }\n\n              return result;\n            });\n          },\n          _selectSlots: function (selection) {\n            var isAllDay = selection.isAllDay;\n            var group = this.groups[selection.groupIndex];\n\n            if (!group.timeSlotCollectionCount()) {\n              isAllDay = true;\n            }\n\n            this._selectedSlots = [];\n            var ranges = group.ranges(selection.start, selection.end, isAllDay, false);\n            var element;\n            var slot;\n\n            for (var rangeIndex = 0; rangeIndex < ranges.length; rangeIndex++) {\n              var range = ranges[rangeIndex];\n              var collection = range.collection;\n\n              for (var slotIndex = range.start.index; slotIndex <= range.end.index; slotIndex++) {\n                slot = collection.at(slotIndex);\n                element = slot.element;\n                addSelectedState(element);\n\n                this._selectedSlots.push({\n                  start: slot.startDate(),\n                  end: slot.endDate(),\n                  element: element\n                });\n              }\n            }\n\n            if (selection.backward) {\n              element = ranges[0].start.element;\n            }\n\n            this.current(element);\n          },\n          _selectEvents: function (selection) {\n            var found = false;\n            var events = selection.events;\n\n            var groupEvents = this._getAllEvents();\n\n            var idx,\n                groupEvent,\n                length = groupEvents.length;\n\n            if (!events[0] || !groupEvents[0]) {\n              return found;\n            }\n\n            var result = $();\n            selection.events = [];\n\n            for (idx = 0; idx < length; idx++) {\n              if ($.inArray(groupEvents[idx].uid, events) > -1) {\n                groupEvent = groupEvents[idx];\n                result = result.add(groupEvent.element);\n\n                if (selection.events.indexOf(groupEvent.uid) === -1) {\n                  selection.events.push(groupEvent.uid);\n                }\n              }\n            }\n\n            if (result[0]) {\n              result.addClass(\"k-state-selected\");\n\n              if (selection.eventElement) {\n                this.current(selection.eventElement);\n              } else {\n                this.current(result.last()[0]);\n              }\n\n              this._selectedSlots = [];\n              found = true;\n            }\n\n            return found;\n          },\n          inRange: function (options) {\n            var startDate = this.startDate();\n            var endDate = kendo.date.addDays(this.endDate(), 1);\n            var start = options.start;\n            var end = options.end;\n            return startDate <= start && start < endDate && startDate < end && end <= endDate;\n          },\n          _resourceValue: function (resource, item) {\n            if (resource.valuePrimitive) {\n              item = kendo.getter(resource.dataValueField)(item);\n            }\n\n            return item;\n          },\n          _setResourceValue: function (groupLevelMember, resource, result) {\n            var value = groupLevelMember.value,\n                setter;\n\n            if (resource.multiple) {\n              value = [value];\n            }\n\n            setter = kendo.setter(resource.field);\n            setter(result, value);\n          },\n          _resourceBySlot: function (slot) {\n            var resources = this.groupedResources;\n            var result = {};\n\n            if (resources.length) {\n              var resourceIndex = slot.groupIndex,\n                  groupOptions = this.options.group,\n                  nestedMember = groupOptions.date || groupOptions.orientation === \"horizontal\" ? \"columns\" : \"rows\",\n                  levels = nestedMember === \"rows\" ? this.rowLevels : this.columnLevels,\n                  dateGroupCompensation = groupOptions.date && groupOptions.orientation === \"horizontal\" ? 1 : 0,\n                  groupLevel = levels[resources.length - 1 + dateGroupCompensation],\n                  resource = resources[resources.length - 1],\n                  groupLevelMember = groupLevel[resourceIndex],\n                  passedChildren,\n                  numberOfChildren,\n                  j,\n                  i;\n\n              this._setResourceValue(groupLevelMember, resource, result);\n\n              for (j = resources.length - 2; j >= 0; j--) {\n                groupLevel = levels[j + dateGroupCompensation];\n                resource = resources[j];\n                passedChildren = 0;\n\n                for (i = 0; i < groupLevel.length; i++) {\n                  groupLevelMember = groupLevel[i];\n                  numberOfChildren = groupLevelMember[nestedMember].length;\n\n                  if (numberOfChildren > resourceIndex - passedChildren) {\n                    this._setResourceValue(groupLevelMember, resource, result);\n\n                    i = groupLevel.length;\n                  } else {\n                    passedChildren += numberOfChildren;\n                  }\n                }\n              }\n            }\n\n            return result;\n          },\n          _createResizeHint: function (left, top, width, height) {\n            return $(HINT).css({\n              left: left,\n              top: top,\n              width: width,\n              height: height\n            });\n          },\n          _removeResizeHint: function () {\n            this._resizeHint.remove();\n\n            this._resizeHint = $();\n          },\n          _removeMoveHint: function (uid) {\n            if (uid) {\n              this._moveHint.filter(\"[data-uid='\" + uid + \"']\").remove();\n\n              this._moveHint = this._moveHint.filter(\"[data-uid!='\" + uid + \"']\");\n            } else {\n              this._moveHint.remove();\n\n              this._moveHint = $();\n            }\n          },\n          _scrollTo: function (element, container) {\n            var elementOffset = element.offsetTop,\n                elementOffsetDir = element.offsetHeight,\n                containerScroll = container.scrollTop,\n                containerOffsetDir = container.clientHeight,\n                bottomDistance = elementOffset + elementOffsetDir,\n                result = 0;\n\n            if (containerScroll > elementOffset) {\n              result = elementOffset;\n            } else if (bottomDistance > containerScroll + containerOffsetDir) {\n              if (elementOffsetDir <= containerOffsetDir) {\n                result = bottomDistance - containerOffsetDir;\n              } else {\n                result = elementOffset;\n              }\n            } else {\n              result = containerScroll;\n            }\n\n            container.scrollTop = result;\n          },\n          _inverseEventColor: function (element) {\n            var eventColor = element.css(\"color\");\n            var eventColorIsDark = new Color(eventColor).isDark();\n            var eventBackground = element.css(\"background-color\");\n            var eventBackgroundIsDark = new Color(eventBackground).isDark();\n\n            if (eventColorIsDark == eventBackgroundIsDark) {\n              element.addClass(INVERSE_COLOR_CLASS);\n            }\n          },\n          _eventTmpl: function (template, wrapper) {\n            var options = this.options,\n                settings = $.extend({}, kendo.Template, options.templateSettings),\n                paramName = settings.paramName,\n                html = \"\",\n                type = typeof template,\n                state = {\n              storage: {},\n              count: 0\n            };\n\n            if (type === \"function\") {\n              state.storage[\"tmpl\" + state.count] = template;\n              html += \"#=this.tmpl\" + state.count + \"(\" + paramName + \")#\";\n              state.count++;\n            } else if (type === \"string\") {\n              html += template;\n            }\n\n            var tmpl = kendo.template(kendo.format(wrapper, html), settings);\n\n            if (state.count > 0) {\n              tmpl = tmpl.bind(state.storage);\n            }\n\n            return tmpl;\n          },\n          eventResources: function (event) {\n            var resources = [],\n                options = this.options;\n\n            if (!options.resources) {\n              return resources;\n            }\n\n            for (var idx = 0; idx < options.resources.length; idx++) {\n              var resource = options.resources[idx];\n              var field = resource.field;\n              var eventResources = kendo.getter(field)(event);\n\n              if (eventResources == null) {\n                continue;\n              }\n\n              if (!resource.multiple) {\n                eventResources = [eventResources];\n              }\n\n              var data = resource.dataSource.view();\n\n              for (var resourceIndex = 0; resourceIndex < eventResources.length; resourceIndex++) {\n                var eventResource = null;\n                var value = eventResources[resourceIndex];\n\n                if (!resource.valuePrimitive) {\n                  value = kendo.getter(resource.dataValueField)(value);\n                }\n\n                for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {\n                  if (data[dataIndex].get(resource.dataValueField) == value) {\n                    eventResource = data[dataIndex];\n                    break;\n                  }\n                }\n\n                if (eventResource !== null) {\n                  var resourceColor = kendo.getter(resource.dataColorField)(eventResource);\n                  resources.push({\n                    field: resource.field,\n                    title: resource.title,\n                    name: resource.name,\n                    text: kendo.getter(resource.dataTextField)(eventResource),\n                    value: value,\n                    color: resourceColor\n                  });\n                }\n              }\n            }\n\n            return resources;\n          },\n          createLayout: function (layout) {\n            var allDayIndex = -1;\n\n            if (!layout.rows) {\n              layout.rows = [];\n            }\n\n            for (var idx = 0; idx < layout.rows.length; idx++) {\n              if (layout.rows[idx].allDay) {\n                allDayIndex = idx;\n                break;\n              }\n            }\n\n            var allDaySlot = layout.rows[allDayIndex];\n\n            if (allDayIndex >= 0) {\n              layout.rows.splice(allDayIndex, 1);\n            }\n\n            var columnLevels = this.columnLevels = levels(layout, \"columns\");\n            var rowLevels = this.rowLevels = levels(layout, \"rows\");\n\n            if (this._isVirtualized()) {\n              this._trimRowLevels(rowLevels);\n            }\n\n            this.table = $('<table role=\"presentation\" class=\"k-scheduler-layout k-scheduler-' + this.name + 'view\"><tbody></tbody></table>');\n            var rowCount = rowLevels[rowLevels.length - 1].length;\n            this.table.find(\"tbody\").first().append(this._topSection(columnLevels, allDaySlot, rowCount));\n            this.table.find(\"tbody\").first().append(this._bottomSection(columnLevels, rowLevels, rowCount));\n            this.element.append(this.table);\n\n            if (this._isVirtualized()) {\n              this._updateDomRowLevels();\n            } // Enable horizontal scrolling when mobile, grouped and less than 1024px width\n\n\n            if (this._isMobile() && columnLevels.length > 1 && this._groupOrientation() === \"horizontal\" && kendo._outerWidth($(window)) < MIN_HORIZONTAL_SCROLL_SIZE) {\n              this.table.find(\".k-scheduler-content .k-scheduler-table\").width(columnLevels[columnLevels.length - 2].length * 100 + \"%\");\n              this.table.find(\".k-scheduler-header .k-scheduler-table\").width(columnLevels[columnLevels.length - 2].length * 100 + \"%\");\n            }\n\n            this._scroller();\n          },\n          _isVirtualized: function () {\n            return this.options.virtual && this.rowLevels.length > 1 && this._isVerticallyGrouped();\n          },\n          _trimRowLevels: function (rowLevels) {\n            var lastGroup = rowLevels[rowLevels.length - 2];\n            var cachedRowLevels = this.cachedRowLevels || [];\n            var levelMarker;\n            this._hasContentToRender = true;\n\n            var stopAtLevel = function (levels, index) {\n              var hasParent = levels[index - 1].length > 0,\n                  parentLevel,\n                  parentValue;\n\n              if (hasParent) {\n                parentLevel = levels[index - 1][0];\n                parentValue = levels[index][0].parentValue;\n                return parentLevel.value !== parentValue;\n              } else {\n                return true;\n              }\n            };\n\n            for (var rowLevelIndex = rowLevels.length - 2; rowLevelIndex >= 0; rowLevelIndex--) {\n              var stop = false;\n\n              if (rowLevelIndex > 0 && stopAtLevel(rowLevels, rowLevelIndex)) {\n                stop = true;\n                levelMarker = rowLevelIndex;\n              }\n\n              cachedRowLevels[rowLevelIndex] = rowLevels[rowLevelIndex].splice(1);\n\n              if (rowLevelIndex < rowLevels.length - 2 && rowLevels[rowLevelIndex][0].rows.length != 1) {\n                rowLevels[rowLevelIndex][0].rows = rowLevels[rowLevelIndex + 1];\n              }\n\n              if (stop) {\n                break;\n              }\n            }\n\n            cachedRowLevels[rowLevels.length - 1] = rowLevels[rowLevels.length - 1].splice(lastGroup[0].rows.length);\n            this.cachedRowLevels = cachedRowLevels;\n\n            if (!cachedRowLevels[cachedRowLevels.length - 1].length) {\n              this._hasContentToRender = false;\n            }\n\n            return {\n              levelMarker: levelMarker || 0,\n              rowLevels: rowLevels\n            };\n          },\n          createNextLayout: function () {\n            var clone = [];\n            var trimmedRowLevels;\n            var rowLevels;\n            var levelMarker;\n            var rowCount;\n\n            for (var rowLevelIndex = 0; rowLevelIndex < this.cachedRowLevels.length; rowLevelIndex++) {\n              clone[rowLevelIndex] = this.cachedRowLevels[rowLevelIndex];\n            }\n\n            trimmedRowLevels = this._trimRowLevels(clone);\n            rowLevels = trimmedRowLevels.rowLevels.splice(trimmedRowLevels.levelMarker);\n            levelMarker = trimmedRowLevels.levelMarker;\n            rowCount = rowLevels[rowLevels.length - 1].length;\n            delete this._height;\n\n            for (var i = levelMarker; i < this.rowLevels.length; i++) {\n              this.rowLevels[i] = this.rowLevels[i].concat(rowLevels[i - levelMarker]);\n            }\n\n            this.table.find(\".k-scheduler-times\").last().find(\"tbody\").append(this._times(rowLevels, rowCount, this._isMobile()).find(\"tr\"));\n\n            this._updateDomRowLevels();\n\n            if (levelMarker > 0) {\n              for (i = 0; i < levelMarker; i++) {\n                var cell = this.table.find(\"[data-row-level=\" + i + \"]\").last();\n                var rowSpan = parseInt(cell.attr(\"rowspan\"), 10) + rowCount;\n                cell.attr(\"rowspan\", rowSpan);\n              }\n            }\n\n            this._virtualContent(rowLevels, this.columnLevels);\n\n            this.render(this._cachedEvents);\n          },\n          _tryRenderContent: function () {\n            var that = this;\n            var bufferHeight = that.table.innerHeight();\n            var height = that.content.find(\"table\").innerHeight();\n            var scrollTop = that.content.scrollTop();\n\n            while (that._hasContentToRender && height - bufferHeight < scrollTop) {\n              that.createNextLayout();\n              height = that.content.find(\"table\").innerHeight();\n            }\n          },\n          _updateDomRowLevels: function () {\n            var that = this;\n            var groupCells = that.times.find(\".k-scheduler-group-cell:not([data-row-level])\");\n\n            if (!this._rowLevelIndices) {\n              this._rowLevelIndices = groupCells.map(function (index, item) {\n                $(item).attr(\"data-row-level\", index);\n                return index;\n              }).toArray().reverse();\n              return;\n            }\n\n            groupCells = groupCells.toArray().reverse();\n\n            for (var i = 0; i <= groupCells.length; i++) {\n              $(groupCells[i]).attr(\"data-row-level\", this._rowLevelIndices[i]);\n            }\n          },\n          refreshLayout: function () {\n            var that = this,\n                toolbar = that.element.find(\"> .k-scheduler-toolbar\"),\n                height = that.element.innerHeight(),\n                scrollbar = this._scrollbar,\n                headerHeight = 0,\n                paddingDirection = this._isRtl ? \"left\" : \"right\";\n\n            for (var idx = 0; idx < toolbar.length; idx++) {\n              height -= outerHeight(toolbar.eq(idx));\n            }\n\n            if (that.datesHeader) {\n              headerHeight = outerHeight(that.datesHeader);\n            }\n\n            if (that.timesHeader && outerHeight(that.timesHeader) > headerHeight) {\n              headerHeight = outerHeight(that.timesHeader);\n            }\n\n            if (that.datesHeader && that.timesHeader) {\n              var datesHeaderRows = that.datesHeader.find(\"table\").first().find(\"tr\");\n              that.timesHeader.find(\"tr\").height(function (index) {\n                $(this).height(datesHeaderRows.eq(index).height());\n              });\n            }\n\n            if (headerHeight) {\n              height -= headerHeight;\n            }\n\n            if (that.footer) {\n              height -= outerHeight(that.footer);\n            }\n\n            var isSchedulerHeightSet = function (el) {\n              var initialHeight, newHeight;\n\n              if (el[0].style.height) {\n                return true;\n              } else {\n                initialHeight = el.height();\n              }\n\n              el.height(\"auto\");\n              newHeight = el.height();\n\n              if (initialHeight != newHeight) {\n                el.height(\"\");\n                return true;\n              }\n\n              el.height(\"\");\n              return false;\n            };\n\n            var contentDiv = that.content[0],\n                scrollbarWidth = !kendo.support.kineticScrollNeeded ? scrollbar : 0;\n\n            if (isSchedulerHeightSet(that.element)) {\n              // set content height only if needed\n              if (height > scrollbar * 2) {\n                // do not set height if proper scrollbar cannot be displayed\n                that.content.height(height);\n              } else {\n                that.content.height(scrollbar * 2 + 1);\n              }\n\n              if (that.times) {\n                that.times.height(contentDiv.clientHeight);\n                var timesTable = that.times.find(\"table\");\n\n                if (timesTable.length) {\n                  timesTable.height(that.content.find(\"table\")[0].clientHeight);\n                }\n              }\n            }\n\n            if (that.table) {\n              if (contentDiv.offsetWidth - contentDiv.clientWidth > 0) {\n                that.table.addClass(\"k-scrollbar-v\");\n                that.datesHeader.css(\"padding-\" + paddingDirection, scrollbarWidth - parseInt(that.datesHeader.children().css(\"border-\" + paddingDirection + \"-width\"), 10));\n              } else {\n                that.datesHeader.css(\"padding-\" + paddingDirection, \"0\");\n              }\n\n              if (contentDiv.offsetHeight - contentDiv.clientHeight > 0 || contentDiv.clientHeight > that.content.children(\".k-scheduler-table\").height()) {\n                that.table.addClass(\"k-scrollbar-h\");\n              } else {\n                that.table.removeClass(\"k-scrollbar-h\");\n              }\n            }\n          },\n          _topSection: function (columnLevels, allDaySlot, rowCount) {\n            var thElm = $(\"<tr>\");\n            this.timesHeader = timesHeader(columnLevels.length, allDaySlot, rowCount);\n            this.datesHeader = this._datesHeader(columnLevels, allDaySlot);\n            var dateGroup = this.datesHeader.find(\".k-nav-day\");\n\n            if (dateGroup.length) {\n              dateGroup.closest(\"tr\").addClass(\"k-scheduler-date-group\");\n            }\n\n            if (this._isMobile()) {\n              thElm.addClass(\"k-mobile-header\");\n              thElm.addClass(\"k-mobile-\" + this._groupOrientation() + \"-header\");\n            }\n\n            return $(thElm).append(this.timesHeader.add(this.datesHeader).wrap(\"<td>\").parent());\n          },\n          _bottomSection: function (columnLevels, rowLevels, rowCount) {\n            this.times = this._times(rowLevels, rowCount, this._isMobile());\n            this.content = content(columnLevels[columnLevels.length - 1], rowLevels[rowLevels.length - 1]);\n            return $(\"<tr>\").append(this.times.add(this.content).wrap(\"<td>\").parent());\n          },\n          _scroller: function () {\n            var that = this;\n            this.content.on(\"scroll\" + NS, function () {\n              kendo.scrollLeft(that.datesHeader.find(\">.k-scheduler-header-wrap\"), this.scrollLeft);\n              that.times.scrollTop(this.scrollTop);\n\n              if (that._isVirtualized()) {\n                that._tryRenderContent();\n              }\n            });\n            var touchScroller = kendo.touchScroller(this.content, {\n              avoidScrolling: function (e) {\n                return $(e.event.target).closest(\".k-event.k-event-active\").length > 0;\n              }\n            });\n\n            if (touchScroller && touchScroller.movable) {\n              this._touchScroller = touchScroller;\n              this.content = touchScroller.scrollElement;\n              touchScroller.movable.bind(\"change\", function (e) {\n                kendo.scrollLeft(that.datesHeader.find(\">.k-scheduler-header-wrap\"), -e.sender.x);\n                that.times.scrollTop(-e.sender.y);\n\n                if (that._isVirtualized()) {\n                  that._tryRenderContent();\n                }\n              });\n            }\n          },\n          _resourcesForGroups: function () {\n            var result = [];\n            var groups = this.options.group;\n            var resources = this.options.resources;\n            groups = groups && groups.resources ? groups.resources : [];\n\n            if (resources && groups.length) {\n              for (var idx = 0, length = resources.length; idx < length; idx++) {\n                for (var groupIdx = 0, groupLength = groups.length; groupIdx < groupLength; groupIdx++) {\n                  if (resources[idx].name === groups[groupIdx]) {\n                    result.push(resources[idx]);\n                  }\n                }\n              }\n            }\n\n            this.groupedResources = result;\n          },\n          _createDateLayout: function (dates, inner, times) {\n            return createDateLayoutConfiguration(\"rows\", dates, inner, times);\n          },\n          _createColumnsLayout: function (resources, inner, template, dates, times, parentValue) {\n            return createLayoutConfiguration(\"columns\", resources, inner, template, dates, times, parentValue);\n          },\n          _groupOrientation: function () {\n            var groups = this.options.group;\n            return groups && groups.resources ? groups.orientation : \"horizontal\";\n          },\n          _isGroupedByDate: function () {\n            return this.options.group && this.options.group.date;\n          },\n          _isVerticallyGrouped: function () {\n            return this.groupedResources.length && this._groupOrientation() === \"vertical\";\n          },\n          _createRowsLayout: function (resources, inner, template, dates) {\n            return createLayoutConfiguration(\"rows\", resources, inner, template, dates);\n          },\n          selectionByElement: function () {\n            return null;\n          },\n          clearSelection: function () {\n            this.content.find(\".k-state-selected\").removeAttr(\"id\").removeClass(\"k-state-selected\");\n          },\n          destroy: function () {\n            var that = this;\n            Widget.fn.destroy.call(this);\n\n            if (that.table) {\n              kendo.destroy(that.table);\n              that.table.remove();\n            }\n\n            if (that.footer) {\n              kendo.destroy(that.footer);\n              that.footer.remove();\n            }\n\n            that.groups = null;\n            that.table = null;\n            that.content = null;\n            that.times = null;\n            that.datesHeader = null;\n            that.timesHeader = null;\n            that.footer = null;\n            that._resizeHint = null;\n            that._moveHint = null;\n          },\n          calendarInfo: function () {\n            return kendo.getCulture().calendars.standard;\n          },\n          prevGroupSlot: function (date, groupIndex, isDay) {\n            var collection;\n            var group = this.groups[groupIndex];\n            var slot = group.ranges(date, date, isDay, false)[0].start;\n\n            if (groupIndex <= 0) {\n              return;\n            }\n\n            if (this._isGroupedByDate()) {\n              return slot;\n            }\n\n            if (this._isVerticallyGrouped()) {\n              if (!group.timeSlotCollectionCount()) {\n                collection = group._collection(group.daySlotCollectionCount() - 1, true);\n                return collection.at(slot.index);\n              } else {\n                collection = group._collection(isDay ? slot.index : slot.collectionIndex, false);\n                return collection.last();\n              }\n            } else {\n              if (!group.timeSlotCollectionCount()) {\n                collection = group._collection(slot.collectionIndex, true);\n                return collection.last();\n              } else {\n                collection = group._collection(isDay ? 0 : group.timeSlotCollectionCount() - 1, isDay);\n                return isDay ? collection.last() : collection.at(slot.index);\n              }\n            }\n          },\n          nextGroupSlot: function (date, groupIndex, isDay) {\n            var collection;\n            var group = this.groups[groupIndex];\n            var slot = group.ranges(date, date, isDay, false)[0].start;\n            var daySlotCollectionCount;\n\n            if (groupIndex >= this.groups.length - 1) {\n              return;\n            }\n\n            if (this._isGroupedByDate()) {\n              return slot;\n            }\n\n            if (this._isVerticallyGrouped()) {\n              if (!group.timeSlotCollectionCount()) {\n                collection = group._collection(0, true);\n                return collection.at(slot.index);\n              } else {\n                daySlotCollectionCount = group.daySlotCollectionCount();\n                collection = group._collection(daySlotCollectionCount ? 0 : slot.collectionIndex, daySlotCollectionCount);\n                return isDay ? collection.first() : collection.at(slot.collectionIndex);\n              }\n            } else {\n              if (!group.timeSlotCollectionCount()) {\n                collection = group._collection(slot.collectionIndex, true);\n                return collection.first();\n              } else {\n                collection = group._collection(0, isDay);\n                return isDay ? collection.first() : collection.at(slot.index);\n              }\n            }\n          },\n          _eventOptionsForMove: function () {\n            return {};\n          },\n          _updateEventForResize: function () {\n            return;\n          },\n          _updateEventForSelection: function (event) {\n            return event;\n          },\n          _innerElements: function (element, type, inner) {\n            var count = 0,\n                countInner = function (el) {\n              var innerSpan = el[inner],\n                  innerEls = el[type],\n                  current,\n                  innerCollection,\n                  i;\n\n              if (innerSpan) {\n                count += innerSpan;\n                return;\n              }\n\n              if (!innerEls || innerEls.length === 0) {\n                count += 1;\n                return;\n              }\n\n              for (i = 0; i < innerEls.length; i++) {\n                current = innerEls[i];\n                innerCollection = current[type];\n\n                if (innerCollection && innerCollection[0]) {\n                  if (!innerCollection[0][type] || innerCollection[0][type].length === 0) {\n                    count += innerCollection.length;\n                  } else {\n                    countInner(current);\n                  }\n                } else {\n                  count += 1;\n                }\n              }\n            };\n\n            countInner(element);\n            return count;\n          },\n          _times: function (rowLevels, rowCount, isMobile) {\n            var that = this;\n            var rows = new Array(rowCount).join().split(\",\");\n            var rowHeaderRows = [];\n            var rowIndex;\n\n            for (var rowLevelIndex = 0; rowLevelIndex < rowLevels.length; rowLevelIndex++) {\n              var level = rowLevels[rowLevelIndex];\n              var rowsBefore = 0;\n\n              for (rowIndex = 0; rowIndex < level.length; rowIndex++) {\n                var currentRow = level[rowIndex];\n                var className = currentRow.className || \"\";\n                var text = currentRow.text;\n\n                var rowspan = that._innerElements(currentRow, \"rows\");\n\n                rowsBefore += rowspan;\n\n                if (currentRow.allDay) {\n                  className = \"k-scheduler-times-all-day\";\n                }\n\n                if (isMobile && className.indexOf(\"k-scheduler-group-cell\") !== -1) {\n                  text = '<span class=\"k-scheduler-group-text\">' + text + '</span>';\n                }\n\n                rows[rowsBefore - rowspan] += '<th class=\"' + className + '\" rowspan=\"' + rowspan + '\">' + text + \"</th>\";\n              }\n            }\n\n            for (rowIndex = 0; rowIndex < rowCount; rowIndex++) {\n              rowHeaderRows.push(rows[rowIndex]);\n            }\n\n            if (rowCount < 1) {\n              return $();\n            }\n\n            return $('<div class=\"k-scheduler-times\">' + table(rowHeaderRows) + '</div>');\n          },\n          _datesHeader: function (columnLevels, allDaySlot) {\n            var that = this;\n            var dateTableRows = [];\n            var columnIndex;\n\n            for (var columnLevelIndex = 0; columnLevelIndex < columnLevels.length; columnLevelIndex++) {\n              var level = columnLevels[columnLevelIndex];\n              var th = [];\n\n              for (columnIndex = 0; columnIndex < level.length; columnIndex++) {\n                var column = level[columnIndex];\n\n                var colspan = that._innerElements(column, \"columns\", \"colspan\");\n\n                th.push('<th colspan=\"' + (column.colspan || colspan) + '\" class=\"' + (column.className || \"\") + '\">' + column.text + \"</th>\");\n              }\n\n              dateTableRows.push(th.join(\"\"));\n            }\n\n            var allDayTableRows = [];\n\n            if (allDaySlot) {\n              var lastLevel = columnLevels[columnLevels.length - 1];\n              var td = [];\n              var cellContent = allDaySlot.cellContent;\n\n              for (columnIndex = 0; columnIndex < lastLevel.length; columnIndex++) {\n                td.push('<td class=\"' + (lastLevel[columnIndex].className || \"\") + '\">' + (cellContent ? cellContent(columnIndex) : '&nbsp;') + '</td>');\n              }\n\n              allDayTableRows.push(td.join(\"\"));\n            }\n\n            return $('<div class=\"k-scheduler-header\">' + '<div class=\"k-scheduler-header-wrap\">' + table(dateTableRows) + allDayTable(allDayTableRows, \"k-scheduler-header-all-day\") + '</div>' + '</div>');\n          },\n          _formatEventAriaLabel: function (title, start, end, isAllDay) {\n            var labelMessages = this.options.messages.ariaEventLabel,\n                sameDate = kendo.date.getDate(start).getTime() === kendo.date.getDate(end).getTime(),\n                labelText;\n\n            if (typeof labelMessages === \"string\") {\n              return kendo.format(labelMessages, title, start, start);\n            }\n\n            labelText = (labelMessages.prefix + SPACE + title + SPACE + labelMessages.on + SPACE + kendo.toString(start, \"D\")).trim();\n\n            if (isAllDay && sameDate) {\n              return labelText + SPACE + labelMessages.allDay;\n            } else if (isAllDay) {\n              return labelText + SPACE + labelMessages.to + SPACE + kendo.toString(end, \"D\") + SPACE + labelMessages.allDay;\n            } else {\n              labelText = labelText + SPACE + labelMessages.at + SPACE + kendo.toString(start, \"t\") + SPACE + labelMessages.to + SPACE;\n\n              if (sameDate) {\n                return labelText + kendo.toString(end, \"t\");\n              } else {\n                return labelText + kendo.toString(end, \"D\") + SPACE + labelMessages.at + SPACE + kendo.toString(end, \"t\");\n              }\n            }\n          }\n        });\n\n        function collidingEvents(elements, start, end) {\n          var idx, index, startIndex, overlaps, endIndex;\n\n          for (idx = elements.length - 1; idx >= 0; idx--) {\n            index = rangeIndex(elements[idx]);\n            startIndex = index.start;\n            endIndex = index.end;\n            overlaps = startIndex <= start && endIndex >= start;\n\n            if (overlaps || startIndex >= start && endIndex <= end || start <= startIndex && end >= startIndex) {\n              if (startIndex < start) {\n                start = startIndex;\n              }\n\n              if (endIndex > end) {\n                end = endIndex;\n              }\n            }\n          }\n\n          return eventsForSlot(elements, start, end);\n        }\n\n        function rangeIndex(eventElement) {\n          return {\n            start: eventElement.start,\n            end: eventElement.end\n          };\n        }\n\n        function eventsForSlot(elements, slotStart, slotEnd) {\n          var events = [];\n\n          for (var idx = 0; idx < elements.length; idx++) {\n            var event = rangeIndex(elements[idx]);\n\n            if (event.start < slotStart && event.end > slotStart || event.start >= slotStart && event.end <= slotEnd) {\n              events.push(elements[idx]);\n            }\n          }\n\n          return events;\n        }\n\n        function createColumns(eventElements) {\n          return _createColumns(eventElements);\n        }\n\n        function createRows(eventElements) {\n          return _createColumns(eventElements);\n        }\n\n        var Color = function (value) {\n          var color = this,\n              formats = Color.formats,\n              re,\n              processor,\n              parts,\n              i,\n              channels;\n\n          if (arguments.length === 1) {\n            value = color.resolveColor(value);\n\n            for (i = 0; i < formats.length; i++) {\n              re = formats[i].re;\n              processor = formats[i].process;\n              parts = re.exec(value);\n\n              if (parts) {\n                channels = processor(parts);\n                color.r = channels[0];\n                color.g = channels[1];\n                color.b = channels[2];\n              }\n            }\n          } else {\n            color.r = arguments[0];\n            color.g = arguments[1];\n            color.b = arguments[2];\n          }\n\n          color.r = color.normalizeByte(color.r);\n          color.g = color.normalizeByte(color.g);\n          color.b = color.normalizeByte(color.b);\n        };\n\n        Color.prototype = {\n          resolveColor: function (value) {\n            value = value || \"#000\";\n\n            if (value.charAt(0) == \"#\") {\n              value = value.substr(1, 6);\n            }\n\n            value = value.replace(/ /g, \"\");\n            value = value.toLowerCase();\n            value = Color.namedColors[value] || value;\n            return value;\n          },\n          normalizeByte: function (value) {\n            return value < 0 || isNaN(value) ? 0 : value > 255 ? 255 : value;\n          },\n          percBrightness: function () {\n            var color = this;\n            return math.sqrt(0.241 * color.r * color.r + 0.691 * color.g * color.g + 0.068 * color.b * color.b);\n          },\n          isDark: function () {\n            var color = this;\n            var brightnessValue = color.percBrightness();\n            return brightnessValue < 180;\n          }\n        };\n        Color.formats = [{\n          re: /^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/,\n          process: function (parts) {\n            return [parseInt(parts[1], 10), parseInt(parts[2], 10), parseInt(parts[3], 10)];\n          }\n        }, {\n          re: /^(\\w{2})(\\w{2})(\\w{2})$/,\n          process: function (parts) {\n            return [parseInt(parts[1], 16), parseInt(parts[2], 16), parseInt(parts[3], 16)];\n          }\n        }, {\n          re: /^(\\w{1})(\\w{1})(\\w{1})$/,\n          process: function (parts) {\n            return [parseInt(parts[1] + parts[1], 16), parseInt(parts[2] + parts[2], 16), parseInt(parts[3] + parts[3], 16)];\n          }\n        }];\n        Color.namedColors = {\n          aqua: \"00ffff\",\n          azure: \"f0ffff\",\n          beige: \"f5f5dc\",\n          black: \"000000\",\n          blue: \"0000ff\",\n          brown: \"a52a2a\",\n          coral: \"ff7f50\",\n          cyan: \"00ffff\",\n          darkblue: \"00008b\",\n          darkcyan: \"008b8b\",\n          darkgray: \"a9a9a9\",\n          darkgreen: \"006400\",\n          darkorange: \"ff8c00\",\n          darkred: \"8b0000\",\n          dimgray: \"696969\",\n          fuchsia: \"ff00ff\",\n          gold: \"ffd700\",\n          goldenrod: \"daa520\",\n          gray: \"808080\",\n          green: \"008000\",\n          greenyellow: \"adff2f\",\n          indigo: \"4b0082\",\n          ivory: \"fffff0\",\n          khaki: \"f0e68c\",\n          lightblue: \"add8e6\",\n          lightgrey: \"d3d3d3\",\n          lightgreen: \"90ee90\",\n          lightpink: \"ffb6c1\",\n          lightyellow: \"ffffe0\",\n          lime: \"00ff00\",\n          limegreen: \"32cd32\",\n          linen: \"faf0e6\",\n          magenta: \"ff00ff\",\n          maroon: \"800000\",\n          mediumblue: \"0000cd\",\n          navy: \"000080\",\n          olive: \"808000\",\n          orange: \"ffa500\",\n          orangered: \"ff4500\",\n          orchid: \"da70d6\",\n          pink: \"ffc0cb\",\n          plum: \"dda0dd\",\n          purple: \"800080\",\n          red: \"ff0000\",\n          royalblue: \"4169e1\",\n          salmon: \"fa8072\",\n          silver: \"c0c0c0\",\n          skyblue: \"87ceeb\",\n          slateblue: \"6a5acd\",\n          slategray: \"708090\",\n          snow: \"fffafa\",\n          steelblue: \"4682b4\",\n          tan: \"d2b48c\",\n          teal: \"008080\",\n          tomato: \"ff6347\",\n          turquoise: \"40e0d0\",\n          violet: \"ee82ee\",\n          wheat: \"f5deb3\",\n          white: \"ffffff\",\n          whitesmoke: \"f5f5f5\",\n          yellow: \"ffff00\",\n          yellowgreen: \"9acd32\"\n        };\n\n        function _createColumns(eventElements) {\n          var columns = [];\n\n          for (var idx = 0; idx < eventElements.length; idx++) {\n            var event = eventElements[idx];\n            var eventRange = rangeIndex(event);\n            var column = null;\n\n            for (var j = 0, columnLength = columns.length; j < columnLength; j++) {\n              var endOverlaps = eventRange.start > columns[j].end;\n\n              if (eventRange.start < columns[j].start || endOverlaps) {\n                column = columns[j];\n\n                if (column.end < eventRange.end) {\n                  column.end = eventRange.end;\n                }\n\n                break;\n              }\n            }\n\n            if (!column) {\n              column = {\n                start: eventRange.start,\n                end: eventRange.end,\n                events: []\n              };\n              columns.push(column);\n            }\n\n            column.events.push(event);\n          }\n\n          return columns;\n        }\n\n        function createDateLayoutConfiguration(name, dates, inner, times) {\n          var configuration = [];\n          $.each(dates, function (index, item) {\n            var className = item.className ? \"k-slot-cell \" + item.className : \"k-slot-cell\";\n            var obj = {\n              text: item.text,\n              className: className\n            };\n\n            if (times && !item.minorTicks) {\n              obj[name] = createDateLayoutConfiguration(name, item.columns, inner, times);\n            } else {\n              obj[name] = inner;\n            }\n\n            configuration.push(obj);\n          });\n          return configuration;\n        }\n\n        function createLayoutConfiguration(name, resources, inner, template, dates, times, parentValue) {\n          var resource = resources[0];\n          var configuration = [];\n\n          if (resource) {\n            if (dates && inner) {\n              $.each(dates, function (index, item) {\n                if (times && !item.minorTicks) {\n                  item[name] = createLayoutConfiguration(name, resources, item.columns, template, item.columns, times, parentValue);\n                } else {\n                  item[name] = createLayoutConfiguration(name, resources, null, template, null, null, parentValue);\n                }\n              });\n              configuration = dates;\n            } else {\n              var data = resource.dataSource.view();\n              data = data.filter(function (item) {\n                var itemParentValue = kendo.getter(resource.dataParentValueField)(item);\n                return itemParentValue === null || itemParentValue === undefined || itemParentValue === parentValue;\n              });\n\n              for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {\n                var value = kendo.getter(resource.dataValueField)(data[dataIndex]);\n                var obj = {\n                  text: template({\n                    text: kendo.htmlEncode(kendo.getter(resource.dataTextField)(data[dataIndex])),\n                    color: kendo.getter(resource.dataColorField)(data[dataIndex]),\n                    field: resource.field,\n                    title: resource.title,\n                    name: resource.name,\n                    value: value\n                  }),\n                  className: \"k-slot-cell k-scheduler-group-cell\",\n                  parentValue: parentValue,\n                  value: value\n                }; // filter-out those inner resources that are not relevant\n\n                obj[name] = createLayoutConfiguration(name, resources.slice(1), inner, template, dates, times, value);\n                configuration.push(obj);\n              }\n            }\n\n            return configuration;\n          }\n\n          return inner;\n        }\n\n        function groupEqFilter(value) {\n          return function (item) {\n            if (Array.isArray(item) || item instanceof kendo.data.ObservableArray) {\n              for (var idx = 0; idx < item.length; idx++) {\n                if (item[idx] == value) {\n                  return true;\n                }\n              }\n\n              return false;\n            }\n\n            return item == value;\n          };\n        }\n\n        var selectedStateRegExp = /\\s*k-state-selected/;\n\n        function addSelectedState(cell) {\n          cell.className = cell.className.replace(selectedStateRegExp, \"\") + \" k-state-selected\";\n        }\n\n        $.extend(ui.SchedulerView, {\n          createColumns: createColumns,\n          createRows: createRows,\n          rangeIndex: rangeIndex,\n          collidingEvents: collidingEvents,\n          groupEqFilter: groupEqFilter\n        });\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}