{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { WMLogger } from '@mobilize/logging';\nimport { Constants, ContentType, Events } from '../Contract';\nimport { Response } from '../Server';\nimport { Exception, ExceptionHandler, NetworkException } from '../System';\nimport { Inject, PendingEvent } from './';\nexport var ActionState = /*#__PURE__*/(() => {\n  (function (ActionState) {\n    ActionState[ActionState[\"Sending\"] = 0] = \"Sending\";\n    ActionState[ActionState[\"Idle\"] = 1] = \"Idle\";\n  })(ActionState || (ActionState = {}));\n\n  return ActionState;\n})();\n\nvar ActionService = function () {\n  function ActionService(inject) {\n    var _this = this;\n\n    if (inject === void 0) {\n      inject = null;\n    }\n\n    this.inject = inject || Inject.Instance;\n    this.http = this.inject.resolve(Constants.Server);\n    this.urlResolver = this.inject.resolve(Constants.UrlResolver);\n    this.changeBuffer = this.inject.resolve(Constants.NotifyBuffer);\n    this.pendingEvents = new Array();\n    this.event = this.inject.resolve(Constants.EventAggregator);\n    this.state = ActionState.Idle;\n    this.requestBuilder = this.inject.resolve(Constants.RequestBuilder);\n    this.commandGenerators = [];\n\n    if (this.event) {\n      this.event.subscribe(Events.PreActionCommandGeneratorRegistration, function (generator) {\n        _this.addCommandGenerator(generator);\n      });\n      this.event.subscribe(Events.PreActionCommandGeneratorDeregistration, function (generator) {\n        _this.removeCommandGenerator(generator);\n      });\n      this.event.subscribe(Events.DeletePendingActions, function (id) {\n        _this.deletePendingEvents(id);\n      });\n    }\n  }\n\n  ActionService.prototype.send = function (action, includeDirty) {\n    var request = this.requestBuilder.create(action);\n\n    if (action.requestConfig.includeDirty) {\n      request.dirty = this.changeBuffer.getChanges();\n    }\n\n    if (request.commands) {\n      request.commands = this.buildCommandGenerators().map(function (c) {\n        delete c.receiverId;\n        return c;\n      });\n    }\n\n    if (action.highPriority) {\n      this.pendingEvents.unshift(new PendingEvent(action, request));\n    } else {\n      this.pendingEvents.push(new PendingEvent(action, request));\n    }\n\n    this.sendActions();\n  };\n\n  ActionService.prototype.sendImmediateAction = function (action, includeDirty) {};\n\n  ActionService.prototype.getEvents = function () {\n    return this.pendingEvents;\n  };\n\n  ActionService.prototype.addCommandGenerator = function (commandGenerator) {\n    if (this.commandGenerators.indexOf(commandGenerator) === -1) {\n      this.commandGenerators.push(commandGenerator);\n    }\n  };\n\n  ActionService.prototype.removeCommandGenerator = function (commandGenerator) {\n    var index = this.commandGenerators.indexOf(commandGenerator);\n\n    if (index !== -1) {\n      this.commandGenerators.splice(index, 1);\n      this.commandGenerators[index] = this.commandGenerators[this.commandGenerators.length - 1];\n      this.commandGenerators.pop();\n    }\n  };\n\n  ActionService.prototype.sendActions = function () {\n    var _this = this;\n\n    if (this.state === ActionState.Idle) {\n      this.state = ActionState.Sending;\n      var event_1 = this.pendingEvents.shift();\n      var data = void 0;\n\n      switch (event_1.action.requestConfig.contentType) {\n        case ContentType.multipartFormdata:\n          data = event_1.request;\n          break;\n\n        case ContentType.applicationJson:\n          data = JSON.stringify(event_1.request);\n          break;\n\n        default:\n          data = JSON.stringify(event_1.request);\n          break;\n      }\n\n      this.http.post(this.urlResolver.resolveUrl(event_1.action), data, function (response) {\n        _this.handleResponse(event_1.action, response);\n      }, event_1.action.requestConfig);\n    }\n  };\n\n  ActionService.prototype.handleResponse = function (action, response) {\n    if (response === undefined || response.status && response.status !== 200) {\n      this.event.publish(Events.Error, new NetworkException(response.responseText, response.status));\n      this.processCallbacks(action, new Response(response));\n      WMLogger.instance().error('The response is undefined or with a wrong status');\n    } else if (response.ErrorOcurred) {\n      this.event.publish(Events.Error, new Exception(response.ExMessage + \"\\n\" + response.ExStackTrace));\n      this.state = ActionState.Idle;\n      WMLogger.instance().error('An error ocurred processing the request');\n    } else {\n      this.processActionResponse(action, new Response(response));\n    }\n  };\n\n  ActionService.prototype.buildCommandGenerators = function () {\n    if (this.commandGenerators.length === 0) {\n      return [];\n    }\n\n    return this.commandGenerators.map(function (c) {\n      return c();\n    }).filter(function (command) {\n      return command != null;\n    });\n  };\n\n  ActionService.prototype.deletePendingEvents = function (ids) {\n    if (this.pendingEvents && ids && ids.length > 0) {\n      this.pendingEvents = this.pendingEvents.filter(function (pending) {\n        return ids.indexOf(pending.action.receiverId) === -1;\n      });\n    }\n  };\n\n  ActionService.prototype.processActionResponse = function (action, response) {\n    this.event.publish(Events.ApplyDeltas, response);\n    this.processCallbacks(action, response);\n  };\n\n  ActionService.prototype.processCallbacks = function (action, response) {\n    try {\n      if (action.callback) {\n        action.callback(response);\n      }\n    } finally {\n      this.processPending();\n    }\n  };\n\n  ActionService.prototype.processPending = function () {\n    this.state = ActionState.Idle;\n\n    if (this.pendingEvents.length > 0) {\n      this.sendActions();\n    }\n  };\n\n  ActionService.prototype.onException = function () {\n    this.state = ActionState.Idle;\n    this.processPending();\n  };\n\n  __decorate([ExceptionHandler('onException'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], ActionService.prototype, \"sendActions\", null);\n\n  return ActionService;\n}();\n\nexport { ActionService }; //# sourceMappingURL=data:application/json;base64,","map":null,"metadata":{},"sourceType":"module"}