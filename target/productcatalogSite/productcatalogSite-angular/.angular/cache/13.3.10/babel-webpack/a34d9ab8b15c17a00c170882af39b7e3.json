{"ast":null,"code":"var Response = function () {\n  function Response(rawResponse) {\n    if (rawResponse) {\n      this.addProperties(rawResponse);\n      this.checkModelTypes(rawResponse);\n    }\n  }\n\n  Object.defineProperty(Response.prototype, \"views\", {\n    get: function () {\n      return this.VD;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Response.prototype, \"models\", {\n    get: function () {\n      return this.MD;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Response.prototype, \"viewDeltas\", {\n    get: function () {\n      return this.V ? this.V : this.VD;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Response.prototype, \"modelDeltas\", {\n    get: function () {\n      return this.M ? this.M : this.MD;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Response.prototype, \"modelDeltaTypes\", {\n    get: function () {\n      return this.MT ? this.MT : this.MDT;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Response.prototype, \"switchIds\", {\n    get: function () {\n      return this.SW;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Response.prototype, \"removeIds\", {\n    get: function () {\n      return this.RM;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Response.prototype.addProperties = function (rawResponse) {\n    for (var key in rawResponse) {\n      if (rawResponse.hasOwnProperty(key)) {\n        this[key] = rawResponse[key];\n      }\n    }\n  };\n\n  Response.prototype.checkModelTypes = function (rawResponse) {\n    if (rawResponse.MT) {\n      this.associateModelTypes(rawResponse.M, rawResponse.MT);\n    }\n\n    if (rawResponse.MDT) {\n      this.associateModelTypes(rawResponse.MD, rawResponse.MDT);\n    }\n  };\n\n  Response.prototype.associateModelTypes = function (models, modelTypes) {\n    if (modelTypes && modelTypes.length) {\n      for (var i = 0; i < modelTypes.length; i++) {\n        this.mergeType(models[i], modelTypes[i]);\n      }\n    }\n  };\n\n  Response.prototype.mergeType = function (model, modelType) {\n    if (model && modelType && !model['@k']) {\n      model['@k'] = modelType;\n    }\n  };\n\n  Object.defineProperty(Response.prototype, \"added\", {\n    get: function () {\n      return this.Added;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Response.prototype, \"changed\", {\n    get: function () {\n      return this.Changed;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Response.prototype, \"removed\", {\n    get: function () {\n      return this.Removed;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Response.prototype, \"actions\", {\n    get: function () {\n      return this.Actions;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Response.prototype, \"collections\", {\n    get: function () {\n      return this.Collections;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Response;\n}();\n\nexport { Response }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVzcG9uc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvU2VydmVyL1Jlc3BvbnNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9CQTtJQUVJLGtCQUFZLFdBQXlCO1FBQ2pDLElBQUksV0FBVyxFQUFFO1lBQ2IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNoQyxJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ3JDO0lBQ0wsQ0FBQztJQWtCRCxzQkFBSSwyQkFBSzthQUFUO1lBQ0ksT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ25CLENBQUM7OztPQUFBO0lBRUQsc0JBQUksNEJBQU07YUFBVjtZQUNJLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUNuQixDQUFDOzs7T0FBQTtJQUVELHNCQUFJLGdDQUFVO2FBQWQ7WUFDSSxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDckMsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSxpQ0FBVzthQUFmO1lBQ0ksT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ3JDLENBQUM7OztPQUFBO0lBRUQsc0JBQUkscUNBQWU7YUFBbkI7WUFDSSxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDeEMsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSwrQkFBUzthQUFiO1lBQ0ksT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ25CLENBQUM7OztPQUFBO0lBRUQsc0JBQUksK0JBQVM7YUFBYjtZQUNJLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQztRQUNuQixDQUFDOzs7T0FBQTtJQUVPLGdDQUFhLEdBQXJCLFVBQXNCLFdBQXlCO1FBQzNDLEtBQUssSUFBTSxHQUFHLElBQUksV0FBVyxFQUFFO1lBQzNCLElBQUksV0FBVyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDakMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNoQztTQUNKO0lBQ0wsQ0FBQztJQUdPLGtDQUFlLEdBQXZCLFVBQXdCLFdBQXlCO1FBQzdDLElBQUksV0FBVyxDQUFDLEVBQUUsRUFBRTtZQUNoQixJQUFJLENBQUMsbUJBQW1CLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDM0Q7UUFDRCxJQUFJLFdBQVcsQ0FBQyxHQUFHLEVBQUU7WUFDakIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxFQUFFLEVBQUUsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQzdEO0lBQ0wsQ0FBQztJQUVPLHNDQUFtQixHQUEzQixVQUE0QixNQUFhLEVBQUUsVUFBb0I7UUFDM0QsSUFBSSxVQUFVLElBQUksVUFBVSxDQUFDLE1BQU0sRUFBRTtZQUNqQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDeEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDNUM7U0FDSjtJQUNMLENBQUM7SUFHTyw0QkFBUyxHQUFqQixVQUFrQixLQUFLLEVBQUUsU0FBUztRQUM5QixJQUFJLEtBQUssSUFBSSxTQUFTLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDcEMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLFNBQVMsQ0FBQztTQUMzQjtJQUNMLENBQUM7SUFHRCxzQkFBSSwyQkFBSzthQUFUO1lBQ0ksT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3RCLENBQUM7OztPQUFBO0lBRUQsc0JBQUksNkJBQU87YUFBWDtZQUNJLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUN4QixDQUFDOzs7T0FBQTtJQUVELHNCQUFJLDZCQUFPO2FBQVg7WUFDSSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDeEIsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSw2QkFBTzthQUFYO1lBQ0ksT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3hCLENBQUM7OztPQUFBO0lBRUQsc0JBQUksaUNBQVc7YUFBZjtZQUNJLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUM1QixDQUFDOzs7T0FBQTtJQUNMLGVBQUM7QUFBRCxDQUFDLEFBMUdELElBMEdDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiogQ29weXJpZ2h0IChDKSBNb2JpbGl6ZS5OZXQgPGluZm9AbW9iaWxpemUubmV0PiAtIEFsbCBSaWdodHMgUmVzZXJ2ZWRcclxuKlxyXG4qIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBNb2JpbGl6ZSBGcmFtZXdvcmtzLCB3aGljaCBpc1xyXG4qIHByb3ByaWV0YXJ5IGFuZCBjb25maWRlbnRpYWwuXHJcbipcclxuKiBOT1RJQ0U6ICBBbGwgaW5mb3JtYXRpb24gY29udGFpbmVkIGhlcmVpbiBpcywgYW5kIHJlbWFpbnNcclxuKiB0aGUgcHJvcGVydHkgb2YgTW9iaWxpemUuTmV0IENvcnBvcmF0aW9uLlxyXG4qIFRoZSBpbnRlbGxlY3R1YWwgYW5kIHRlY2huaWNhbCBjb25jZXB0cyBjb250YWluZWQgaGVyZWluIGFyZVxyXG4qIHByb3ByaWV0YXJ5IHRvIE1vYmlsaXplLk5ldCBDb3Jwb3JhdGlvbiBhbmQgbWF5IGJlIGNvdmVyZWRcclxuKiBieSBVLlMuIFBhdGVudHMsIGFuZCBhcmUgcHJvdGVjdGVkIGJ5IHRyYWRlIHNlY3JldCBvciBjb3B5cmlnaHQgbGF3LlxyXG4qIERpc3NlbWluYXRpb24gb2YgdGhpcyBpbmZvcm1hdGlvbiBvciByZXByb2R1Y3Rpb24gb2YgdGhpcyBtYXRlcmlhbFxyXG4qIGlzIHN0cmljdGx5IGZvcmJpZGRlbiB1bmxlc3MgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uIGlzIG9idGFpbmVkXHJcbiogZnJvbSBNb2JpbGl6ZS5OZXQgQ29ycG9yYXRpb24uXHJcbipcclxuKiBUaGlzIGZpbGUgaXMgc3ViamVjdCB0byB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMgZGVmaW5lZCBpblxyXG4qIGZpbGUgJ0xJQ0VOU0UudHh0Jywgd2hpY2ggaXMgcGFydCBvZiB0aGlzIHNvdXJjZSBjb2RlIHBhY2thZ2UuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5pbXBvcnQgeyBJUmF3UmVzcG9uc2UsIElSZXNwb25zZSB9IGZyb20gJy4uL0NvbnRyYWN0JztcclxuXHJcbmV4cG9ydCBjbGFzcyBSZXNwb25zZSBpbXBsZW1lbnRzIElSZXNwb25zZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocmF3UmVzcG9uc2U6IElSYXdSZXNwb25zZSkge1xyXG4gICAgICAgIGlmIChyYXdSZXNwb25zZSkge1xyXG4gICAgICAgICAgICB0aGlzLmFkZFByb3BlcnRpZXMocmF3UmVzcG9uc2UpO1xyXG4gICAgICAgICAgICB0aGlzLmNoZWNrTW9kZWxUeXBlcyhyYXdSZXNwb25zZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgVjogYW55O1xyXG4gICAgcHJpdmF0ZSBNOiBhbnk7XHJcbiAgICBwcml2YXRlIE1UOiBhbnk7XHJcbiAgICBwcml2YXRlIFZEOiBhbnk7XHJcbiAgICBwcml2YXRlIE1EOiBhbnk7XHJcbiAgICBwcml2YXRlIE1EVDogYW55O1xyXG4gICAgcHJpdmF0ZSBTVzogYW55O1xyXG4gICAgcHJpdmF0ZSBSTTogYW55O1xyXG5cclxuICAgIC8vIFdlYk1hcCA1IFN1cHBvcnRcclxuICAgIHByaXZhdGUgQWRkZWQ6IGFueTtcclxuICAgIHByaXZhdGUgQ2hhbmdlZDogYW55O1xyXG4gICAgcHJpdmF0ZSBSZW1vdmVkOiBhbnk7XHJcbiAgICBwcml2YXRlIEFjdGlvbnM6IGFueTtcclxuICAgIHByaXZhdGUgQ29sbGVjdGlvbnM6IGFueTtcclxuXHJcbiAgICBnZXQgdmlld3MoKTogYW55IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5WRDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbW9kZWxzKCk6IGFueSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuTUQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHZpZXdEZWx0YXMoKTogYW55IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5WID8gdGhpcy5WIDogdGhpcy5WRDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbW9kZWxEZWx0YXMoKTogYW55IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5NID8gdGhpcy5NIDogdGhpcy5NRDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbW9kZWxEZWx0YVR5cGVzKCk6IGFueSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuTVQgPyB0aGlzLk1UIDogdGhpcy5NRFQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHN3aXRjaElkcygpOiBhbnkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLlNXO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCByZW1vdmVJZHMoKTogYW55IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5STTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFkZFByb3BlcnRpZXMocmF3UmVzcG9uc2U6IElSYXdSZXNwb25zZSk6IHZvaWQge1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHJhd1Jlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgIGlmIChyYXdSZXNwb25zZS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzW2tleV0gPSByYXdSZXNwb25zZVtrZXldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vLyBjaGVjayBpZiB0aGUgYXNzb2NpYXRpb24gb2YgbW9kZWwgdHlwZXMgbmVlZHMgdG8gYmUgZG9uZVxyXG4gICAgcHJpdmF0ZSBjaGVja01vZGVsVHlwZXMocmF3UmVzcG9uc2U6IElSYXdSZXNwb25zZSk6IHZvaWQge1xyXG4gICAgICAgIGlmIChyYXdSZXNwb25zZS5NVCkge1xyXG4gICAgICAgICAgICB0aGlzLmFzc29jaWF0ZU1vZGVsVHlwZXMocmF3UmVzcG9uc2UuTSwgcmF3UmVzcG9uc2UuTVQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmF3UmVzcG9uc2UuTURUKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXNzb2NpYXRlTW9kZWxUeXBlcyhyYXdSZXNwb25zZS5NRCwgcmF3UmVzcG9uc2UuTURUKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhc3NvY2lhdGVNb2RlbFR5cGVzKG1vZGVsczogYW55W10sIG1vZGVsVHlwZXM6IG51bWJlcltdKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKG1vZGVsVHlwZXMgJiYgbW9kZWxUeXBlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtb2RlbFR5cGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1lcmdlVHlwZShtb2RlbHNbaV0sIG1vZGVsVHlwZXNbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vLyBkb24ndCBzZXQgbW9kZWwgdHlwZSBpZiB0aGUgbW9kZWwgYWxyZWFkeSBoYXMgb25lXHJcbiAgICBwcml2YXRlIG1lcmdlVHlwZShtb2RlbCwgbW9kZWxUeXBlKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKG1vZGVsICYmIG1vZGVsVHlwZSAmJiAhbW9kZWxbJ0BrJ10pIHtcclxuICAgICAgICAgICAgbW9kZWxbJ0BrJ10gPSBtb2RlbFR5cGU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFdlYk1hcCA1IFN1cHBvcnRcclxuICAgIGdldCBhZGRlZCgpOiBhbnkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkFkZGVkO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBjaGFuZ2VkKCk6IGFueSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuQ2hhbmdlZDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgcmVtb3ZlZCgpOiBhbnkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLlJlbW92ZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGFjdGlvbnMoKTogYW55IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5BY3Rpb25zO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBjb2xsZWN0aW9ucygpOiBhbnkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLkNvbGxlY3Rpb25zO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==","map":null,"metadata":{},"sourceType":"module"}