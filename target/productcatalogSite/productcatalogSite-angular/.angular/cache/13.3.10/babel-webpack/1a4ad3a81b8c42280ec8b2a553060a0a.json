{"ast":null,"code":"import Axis from './axis';\nimport AxisLabel from './axis-label';\nimport Box from './box';\nimport { BLACK, DEFAULT_PRECISION, COORD_PRECISION } from '../common/constants';\nimport { deepExtend, defined, limitValue, round, setDefaultOptions, valueOrDefault } from '../common';\nimport autoMajorUnit from './utils/auto-major-unit';\nimport autoAxisMin from './utils/auto-axis-min';\nimport autoAxisMax from './utils/auto-axis-max';\nimport floor from './utils/floor';\nimport ceil from './utils/ceil';\nimport limitCoordinate from './utils/limit-coordinate';\nconst MIN_VALUE_RANGE = Math.pow(10, -DEFAULT_PRECISION + 1);\n\nclass NumericAxis extends Axis {\n  constructor(seriesMin, seriesMax, options, chartService) {\n    super(Object.assign({}, options, {\n      seriesMin: seriesMin,\n      seriesMax: seriesMax\n    }), chartService);\n  }\n\n  initUserOptions(options) {\n    const autoOptions = autoAxisOptions(options.seriesMin, options.seriesMax, options);\n    this.totalOptions = totalAxisOptions(autoOptions, options);\n    return axisOptions(autoOptions, options);\n  }\n\n  initFields() {\n    this.totalMin = this.totalOptions.min;\n    this.totalMax = this.totalOptions.max;\n    this.totalMajorUnit = this.totalOptions.majorUnit;\n    this.seriesMin = this.options.seriesMin;\n    this.seriesMax = this.options.seriesMax;\n  }\n\n  clone() {\n    return new NumericAxis(this.seriesMin, this.seriesMax, Object.assign({}, this.options), this.chartService);\n  }\n\n  startValue() {\n    return 0;\n  }\n\n  range() {\n    const options = this.options;\n    return {\n      min: options.min,\n      max: options.max\n    };\n  }\n\n  getDivisions(stepValue) {\n    if (stepValue === 0) {\n      return 1;\n    }\n\n    const options = this.options;\n    const range = options.max - options.min;\n    return Math.floor(round(range / stepValue, COORD_PRECISION)) + 1;\n  }\n\n  getTickPositions(unit, skipUnit) {\n    const options = this.options;\n    const {\n      axisDir,\n      axisOrigin,\n      lineBox,\n      lineSize\n    } = this.lineInfo();\n    const range = options.max - options.min;\n    const scale = lineSize / range;\n    const step = unit * scale;\n    const divisions = this.getDivisions(unit);\n    const positions = [];\n    let pos = lineBox[axisOrigin];\n    let skipStep = 0;\n\n    if (skipUnit) {\n      skipStep = skipUnit / unit;\n    }\n\n    for (let idx = 0; idx < divisions; idx++) {\n      if (idx % skipStep !== 0) {\n        positions.push(round(pos, COORD_PRECISION));\n      }\n\n      pos = pos + step * axisDir;\n    }\n\n    return positions;\n  }\n\n  getMajorTickPositions() {\n    return this.getTickPositions(this.options.majorUnit);\n  }\n\n  getMinorTickPositions() {\n    return this.getTickPositions(this.options.minorUnit);\n  }\n\n  getSlot(a, b, limit = false) {\n    const options = this.options;\n    const {\n      axis,\n      axisDir,\n      lineBox,\n      lineSize,\n      lineStart\n    } = this.lineInfo();\n    const step = axisDir * (lineSize / (options.max - options.min));\n    let start = valueOrDefault(a, b || 0);\n    let end = valueOrDefault(b, a || 0);\n\n    if (limit) {\n      start = limitValue(start, options.min, options.max);\n      end = limitValue(end, options.min, options.max);\n    }\n\n    const p1 = Math.min(start, end) - options.min;\n    const p2 = Math.max(start, end) - options.min;\n    const slotBox = new Box(lineBox.x1, lineBox.y1, lineBox.x1, lineBox.y1);\n    slotBox[axis + 1] = limitCoordinate(lineStart + step * (axisDir > 0 ? p1 : p2));\n    slotBox[axis + 2] = limitCoordinate(lineStart + step * (axisDir > 0 ? p2 : p1));\n    return slotBox;\n  }\n\n  getValue(point) {\n    const options = this.options;\n    const max = Number(options.max);\n    const min = Number(options.min);\n    const offset = this.pointOffset(point);\n    const valueOffset = offset * (max - min);\n\n    if (offset < 0 || offset > 1) {\n      return null;\n    }\n\n    const value = min + valueOffset;\n    return round(value, DEFAULT_PRECISION);\n  }\n\n  translateRange(delta) {\n    const options = this.options;\n    const {\n      vertical,\n      reverse,\n      max,\n      min\n    } = options;\n    const {\n      lineSize\n    } = this.lineInfo();\n    const range = max - min;\n    const scale = lineSize / range;\n    let offset = round(delta / scale, DEFAULT_PRECISION);\n\n    if ((vertical || reverse) && !(vertical && reverse)) {\n      offset = -offset;\n    }\n\n    return {\n      min: min + offset,\n      max: max + offset,\n      offset: offset\n    };\n  }\n\n  labelsCount() {\n    return this.getDivisions(this.options.majorUnit);\n  }\n\n  createAxisLabel(index, labelOptions, labelContext) {\n    const options = this.options;\n    const value = round(options.min + index * options.majorUnit, DEFAULT_PRECISION);\n    const text = this.axisLabelText(value, labelOptions, labelContext);\n    return new AxisLabel(value, text, index, null, labelOptions);\n  }\n\n  shouldRenderNote(value) {\n    const range = this.range();\n    return range.min <= value && value <= range.max;\n  }\n\n  pan(delta) {\n    const range = this.translateRange(delta);\n    return this.limitRange(range.min, range.max, this.totalMin, this.totalMax, range.offset);\n  }\n\n  pointsRange(start, end) {\n    const startValue = this.getValue(start);\n    const endValue = this.getValue(end);\n    const min = Math.min(startValue, endValue);\n    const max = Math.max(startValue, endValue);\n\n    if (this.isValidRange(min, max)) {\n      return {\n        min: min,\n        max: max\n      };\n    }\n  }\n\n  scaleRange(scale, cursor) {\n    const position = Math.abs(this.pointOffset(cursor));\n    const range = this.options.max - this.options.min;\n    const delta = this.scaleToDelta(scale, range);\n    const minDelta = position * delta;\n    const maxDelta = (1 - position) * delta;\n    const min = round(this.options.min + minDelta, DEFAULT_PRECISION);\n    let max = round(this.options.max - maxDelta, DEFAULT_PRECISION);\n\n    if (max - min < MIN_VALUE_RANGE) {\n      max = min + MIN_VALUE_RANGE;\n    }\n\n    return {\n      min: min,\n      max: max\n    };\n  }\n\n  zoomRange(scale, cursor) {\n    const {\n      totalMin,\n      totalMax\n    } = this;\n    const range = this.scaleRange(scale, cursor);\n    return {\n      min: limitValue(range.min, totalMin, totalMax),\n      max: limitValue(range.max, totalMin, totalMax),\n      narrowRange: false\n    };\n  }\n\n  isValidRange(min, max) {\n    return max - min > MIN_VALUE_RANGE;\n  }\n\n}\n\nfunction autoAxisOptions(seriesMin, seriesMax, options) {\n  const narrowRange = options.narrowRange;\n  let autoMin = autoAxisMin(seriesMin, seriesMax, narrowRange);\n  let autoMax = autoAxisMax(seriesMin, seriesMax, narrowRange);\n  const majorUnit = autoMajorUnit(autoMin, autoMax);\n  const autoOptions = {\n    majorUnit: majorUnit\n  };\n\n  if (options.roundToMajorUnit !== false) {\n    if (autoMin < 0 && remainderClose(autoMin, majorUnit, 1 / 3)) {\n      autoMin -= majorUnit;\n    }\n\n    if (autoMax > 0 && remainderClose(autoMax, majorUnit, 1 / 3)) {\n      autoMax += majorUnit;\n    }\n  }\n\n  autoOptions.min = floor(autoMin, majorUnit);\n  autoOptions.max = ceil(autoMax, majorUnit);\n  return autoOptions;\n}\n\nfunction totalAxisOptions(autoOptions, options) {\n  return {\n    min: defined(options.min) ? Math.min(autoOptions.min, options.min) : autoOptions.min,\n    max: defined(options.max) ? Math.max(autoOptions.max, options.max) : autoOptions.max,\n    majorUnit: autoOptions.majorUnit\n  };\n}\n\nfunction clearNullValues(options, fields) {\n  for (let idx = 0; idx < fields.length; idx++) {\n    const field = fields[idx];\n\n    if (options[field] === null) {\n      options[field] = undefined;\n    }\n  }\n}\n\nfunction axisOptions(autoOptions, userOptions) {\n  let options = userOptions;\n  let userSetMin, userSetMax;\n\n  if (userOptions) {\n    clearNullValues(userOptions, ['min', 'max']);\n    userSetMin = defined(userOptions.min);\n    userSetMax = defined(userOptions.max);\n    const userSetLimits = userSetMin || userSetMax;\n\n    if (userSetLimits) {\n      if (userOptions.min === userOptions.max) {\n        if (userOptions.min > 0) {\n          userOptions.min = 0;\n        } else {\n          userOptions.max = 1;\n        }\n      }\n    }\n\n    if (userOptions.majorUnit) {\n      autoOptions.min = floor(autoOptions.min, userOptions.majorUnit);\n      autoOptions.max = ceil(autoOptions.max, userOptions.majorUnit);\n    } else if (userSetLimits) {\n      options = deepExtend(autoOptions, userOptions); // Determine an auto major unit after min/max have been set\n\n      autoOptions.majorUnit = autoMajorUnit(options.min, options.max);\n    }\n  }\n\n  autoOptions.minorUnit = (options.majorUnit || autoOptions.majorUnit) / 5;\n  const result = deepExtend(autoOptions, options);\n\n  if (result.min >= result.max) {\n    if (userSetMin && !userSetMax) {\n      result.max = result.min + result.majorUnit;\n    } else if (!userSetMin && userSetMax) {\n      result.min = result.max - result.majorUnit;\n    }\n  }\n\n  return result;\n}\n\nfunction remainderClose(value, divisor, ratio) {\n  const remainder = round(Math.abs(value % divisor), DEFAULT_PRECISION);\n  const threshold = divisor * (1 - ratio);\n  return remainder === 0 || remainder > threshold;\n}\n\nsetDefaultOptions(NumericAxis, {\n  type: \"numeric\",\n  min: 0,\n  max: 1,\n  vertical: true,\n  majorGridLines: {\n    visible: true,\n    width: 1,\n    color: BLACK\n  },\n  labels: {\n    format: \"#.####################\"\n  },\n  zIndex: 1\n});\nexport default NumericAxis;","map":null,"metadata":{},"sourceType":"module"}