{"ast":null,"code":"import Axis from './axis';\nimport AxisLabel from './axis-label';\nimport { BLACK, COORD_PRECISION, DEFAULT_PRECISION, X, Y } from '../common/constants';\nimport { defined, isNumber, last, limitValue, round, setDefaultOptions, valueOrDefault, HashMap } from '../common';\nimport { dateEquals } from '../date-utils';\nconst MIN_CATEGORY_POINTS_RANGE = 0.01;\nconst MIN_CATEGORY_RANGE = 0.1;\n\nfunction indexOf(value, arr) {\n  if (value instanceof Date) {\n    const length = arr.length;\n\n    for (let idx = 0; idx < length; idx++) {\n      if (dateEquals(arr[idx], value)) {\n        return idx;\n      }\n    }\n\n    return -1;\n  }\n\n  return arr.indexOf(value);\n}\n\nclass CategoryAxis extends Axis {\n  initFields() {\n    this._ticks = {};\n  }\n\n  categoriesHash() {\n    return \"\";\n  }\n\n  clone() {\n    const copy = new CategoryAxis(Object.assign({}, this.options, {\n      categories: this.options.srcCategories\n    }), this.chartService);\n    copy.createLabels();\n    return copy;\n  }\n\n  initUserOptions(options) {\n    const categories = options.categories || [];\n    const definedMin = defined(options.min);\n    const definedMax = defined(options.max);\n    options.srcCategories = options.categories = categories;\n\n    if ((definedMin || definedMax) && categories.length) {\n      const min = definedMin ? Math.floor(options.min) : 0;\n      let max;\n\n      if (definedMax) {\n        max = options.justified ? Math.floor(options.max) + 1 : Math.ceil(options.max);\n      } else {\n        max = categories.length;\n      }\n\n      options.categories = options.categories.slice(min, max);\n    }\n\n    return options;\n  }\n\n  rangeIndices() {\n    const options = this.options;\n    const length = options.categories.length || 1;\n    const min = isNumber(options.min) ? options.min % 1 : 0;\n    let max;\n\n    if (isNumber(options.max) && options.max % 1 !== 0 && options.max < this.totalRange().max) {\n      max = length - (1 - options.max % 1);\n    } else {\n      max = length - (options.justified ? 1 : 0);\n    }\n\n    return {\n      min: min,\n      max: max\n    };\n  }\n\n  totalRangeIndices(limit) {\n    const options = this.options;\n    let min = isNumber(options.min) ? options.min : 0;\n    let max;\n\n    if (isNumber(options.max)) {\n      max = options.max;\n    } else if (isNumber(options.min)) {\n      max = min + options.categories.length;\n    } else {\n      max = this.totalRange().max || 1;\n    }\n\n    if (limit) {\n      const totalRange = this.totalRange();\n      min = limitValue(min, 0, totalRange.max);\n      max = limitValue(max, 0, totalRange.max);\n    }\n\n    return {\n      min: min,\n      max: max\n    };\n  }\n\n  range() {\n    const options = this.options;\n    const min = isNumber(options.min) ? options.min : 0;\n    const max = isNumber(options.max) ? options.max : this.totalRange().max;\n    return {\n      min: min,\n      max: max\n    };\n  }\n\n  roundedRange() {\n    return this.range();\n  }\n\n  totalRange() {\n    const options = this.options;\n    return {\n      min: 0,\n      max: Math.max(this._seriesMax || 0, options.srcCategories.length) - (options.justified ? 1 : 0)\n    };\n  }\n\n  scaleOptions() {\n    const {\n      min,\n      max\n    } = this.rangeIndices();\n    const lineBox = this.lineBox();\n    const size = this.options.vertical ? lineBox.height() : lineBox.width();\n    const scale = size / (max - min || 1);\n    return {\n      scale: scale * (this.options.reverse ? -1 : 1),\n      box: lineBox,\n      min: min,\n      max: max\n    };\n  }\n\n  arrangeLabels() {\n    super.arrangeLabels();\n    this.hideOutOfRangeLabels();\n  }\n\n  hideOutOfRangeLabels() {\n    const {\n      box,\n      labels\n    } = this;\n\n    if (labels.length > 0) {\n      const valueAxis = this.options.vertical ? Y : X;\n      const start = box[valueAxis + 1];\n      const end = box[valueAxis + 2];\n      const firstLabel = labels[0];\n      const lastLabel = last(labels);\n\n      if (firstLabel.box[valueAxis + 1] > end || firstLabel.box[valueAxis + 2] < start) {\n        firstLabel.options.visible = false;\n      }\n\n      if (lastLabel.box[valueAxis + 1] > end || lastLabel.box[valueAxis + 2] < start) {\n        lastLabel.options.visible = false;\n      }\n    }\n  }\n\n  getMajorTickPositions() {\n    return this.getTicks().majorTicks;\n  }\n\n  getMinorTickPositions() {\n    return this.getTicks().minorTicks;\n  }\n\n  getLabelsTickPositions() {\n    return this.getTicks().labelTicks;\n  }\n\n  tickIndices(stepSize) {\n    const {\n      min,\n      max\n    } = this.rangeIndices();\n    const limit = Math.ceil(max);\n    let current = Math.floor(min);\n    const indices = [];\n\n    while (current <= limit) {\n      indices.push(current);\n      current += stepSize;\n    }\n\n    return indices;\n  }\n\n  getTickPositions(stepSize) {\n    const {\n      vertical,\n      reverse\n    } = this.options;\n    const {\n      scale,\n      box,\n      min\n    } = this.scaleOptions();\n    const pos = box[(vertical ? Y : X) + (reverse ? 2 : 1)];\n    const indices = this.tickIndices(stepSize);\n    const positions = [];\n\n    for (let idx = 0; idx < indices.length; idx++) {\n      positions.push(pos + round(scale * (indices[idx] - min), COORD_PRECISION));\n    }\n\n    return positions;\n  }\n\n  getTicks() {\n    const options = this.options;\n    const cache = this._ticks;\n    const range = this.rangeIndices();\n    const lineBox = this.lineBox();\n    const hash = lineBox.getHash() + range.min + \",\" + range.max + options.reverse + options.justified;\n\n    if (cache._hash !== hash) {\n      const hasMinor = options.minorTicks.visible || options.minorGridLines.visible;\n      cache._hash = hash;\n      cache.labelTicks = this.getTickPositions(1);\n      cache.majorTicks = this.filterOutOfRangePositions(cache.labelTicks, lineBox);\n      cache.minorTicks = hasMinor ? this.filterOutOfRangePositions(this.getTickPositions(0.5), lineBox) : [];\n    }\n\n    return cache;\n  }\n\n  filterOutOfRangePositions(positions, lineBox) {\n    if (!positions.length) {\n      return positions;\n    }\n\n    const axis = this.options.vertical ? Y : X;\n\n    const inRange = position => lineBox[axis + 1] <= position && position <= lineBox[axis + 2];\n\n    const end = positions.length - 1;\n    let startIndex = 0;\n\n    while (!inRange(positions[startIndex]) && startIndex <= end) {\n      startIndex++;\n    }\n\n    let endIndex = end;\n\n    while (!inRange(positions[endIndex]) && endIndex >= 0) {\n      endIndex--;\n    }\n\n    return positions.slice(startIndex, endIndex + 1);\n  }\n\n  lineInfo() {\n    const {\n      vertical,\n      reverse\n    } = this.options;\n    const lineBox = this.lineBox();\n    const lineSize = vertical ? lineBox.height() : lineBox.width();\n    const axis = vertical ? Y : X;\n    const axisDir = reverse ? -1 : 1;\n    const startEdge = axisDir === 1 ? 1 : 2;\n    const axisOrigin = axis + startEdge.toString();\n    const lineStart = lineBox[axisOrigin];\n    return {\n      axis,\n      axisOrigin,\n      axisDir,\n      lineBox,\n      lineSize,\n      lineStart\n    };\n  }\n\n  lineDir() {\n    /*\n     *  Category axis line direction:\n     *    * Vertical: down.\n     *    * Horizontal: right.\n     */\n    const {\n      reverse\n    } = this.options;\n    return reverse ? -1 : 1;\n  } // TODO: Rename to slotBox, valueSlot, slotByIndex?\n\n\n  getSlot(from, to, limit) {\n    const options = this.options;\n    const {\n      reverse,\n      justified\n    } = options;\n    const {\n      scale,\n      box,\n      min\n    } = this.scaleOptions();\n    const {\n      axis: valueAxis,\n      lineStart\n    } = this.lineInfo();\n    const slotBox = box.clone();\n    const singleSlot = !defined(to);\n    const start = valueOrDefault(from, 0);\n    let end = valueOrDefault(to, start);\n    end = Math.max(end - 1, start); // Fixes transient bug caused by iOS 6.0 JIT\n    // (one can never be too sure)\n\n    end = Math.max(start, end);\n    let p1 = lineStart + (start - min) * scale;\n    let p2 = lineStart + (end + 1 - min) * scale;\n\n    if (singleSlot && justified) {\n      p2 = p1;\n    }\n\n    if (limit) {\n      p1 = limitValue(p1, box[valueAxis + 1], box[valueAxis + 2]);\n      p2 = limitValue(p2, box[valueAxis + 1], box[valueAxis + 2]);\n    }\n\n    slotBox[valueAxis + 1] = reverse ? p2 : p1;\n    slotBox[valueAxis + 2] = reverse ? p1 : p2;\n    return slotBox;\n  }\n\n  limitSlot(slot) {\n    const vertical = this.options.vertical;\n    const valueAxis = vertical ? Y : X;\n    const lineBox = this.lineBox();\n    const limittedSlot = slot.clone();\n    limittedSlot[valueAxis + 1] = limitValue(slot[valueAxis + 1], lineBox[valueAxis + 1], lineBox[valueAxis + 2]);\n    limittedSlot[valueAxis + 2] = limitValue(slot[valueAxis + 2], lineBox[valueAxis + 1], lineBox[valueAxis + 2]);\n    return limittedSlot;\n  }\n\n  slot(from, to, limit) {\n    const min = Math.floor(this.options.min || 0);\n    let start = from;\n    let end = to;\n\n    if (typeof start === \"string\") {\n      start = this.categoryIndex(start);\n    } else if (isNumber(start)) {\n      start -= min;\n    }\n\n    if (typeof end === \"string\") {\n      end = this.categoryIndex(end);\n    } else if (isNumber(end)) {\n      end -= min;\n    }\n\n    return super.slot(start, end, limit);\n  }\n\n  pointCategoryIndex(point) {\n    const {\n      reverse,\n      justified,\n      vertical\n    } = this.options;\n    const valueAxis = vertical ? Y : X;\n    const {\n      scale,\n      box,\n      min,\n      max\n    } = this.scaleOptions();\n    const startValue = reverse ? max : min;\n    const lineStart = box[valueAxis + 1];\n    const lineEnd = box[valueAxis + 2];\n    const pos = point[valueAxis];\n\n    if (pos < lineStart || pos > lineEnd) {\n      return null;\n    }\n\n    let value = startValue + (pos - lineStart) / scale;\n    const diff = value % 1;\n\n    if (justified) {\n      value = Math.round(value);\n    } else if (diff === 0 && value > 0) {\n      value--;\n    }\n\n    return Math.floor(value);\n  }\n\n  getCategory(point) {\n    const index = this.pointCategoryIndex(point);\n\n    if (index === null) {\n      return null;\n    }\n\n    return this.options.categories[index];\n  }\n\n  categoryIndex(value) {\n    return this.totalIndex(value) - Math.floor(this.options.min || 0);\n  }\n\n  categoryAt(index, total) {\n    const options = this.options;\n    return (total ? options.srcCategories : options.categories)[index];\n  }\n\n  categoriesCount() {\n    return (this.options.categories || []).length;\n  }\n\n  translateRange(delta) {\n    const options = this.options;\n    const lineBox = this.lineBox();\n    const size = options.vertical ? lineBox.height() : lineBox.width();\n    const range = options.categories.length;\n    const scale = size / range;\n    const offset = round(delta / scale, DEFAULT_PRECISION);\n    return {\n      min: offset,\n      max: range + offset\n    };\n  }\n\n  scaleRange(scale, cursor) {\n    const position = Math.abs(this.pointOffset(cursor));\n    const rangeIndices = this.totalRangeIndices();\n    const range = rangeIndices.max - rangeIndices.min;\n    const delta = this.scaleToDelta(scale, range);\n    const minDelta = position * delta;\n    const maxDelta = (1 - position) * delta;\n    const min = rangeIndices.min + minDelta;\n    let max = rangeIndices.max - maxDelta;\n\n    if (max - min < MIN_CATEGORY_RANGE) {\n      max = min + MIN_CATEGORY_RANGE;\n    }\n\n    return {\n      min: min,\n      max: max\n    };\n  }\n\n  zoomRange(scale, cursor) {\n    const {\n      min: totalMin,\n      max: totalMax\n    } = this.totalRange();\n    const range = this.scaleRange(scale, cursor);\n    return {\n      min: limitValue(range.min, totalMin, totalMax),\n      max: limitValue(range.max, totalMin, totalMax)\n    };\n  }\n\n  labelsCount() {\n    const labelsRange = this.labelsRange();\n    return labelsRange.max - labelsRange.min;\n  }\n\n  labelsRange() {\n    const options = this.options;\n    const {\n      justified,\n      labels: labelOptions\n    } = options;\n    let {\n      min,\n      max\n    } = this.totalRangeIndices(true);\n    const start = Math.floor(min);\n\n    if (!justified) {\n      min = Math.floor(min);\n      max = Math.ceil(max);\n    } else {\n      min = Math.ceil(min);\n      max = Math.floor(max);\n    }\n\n    let skip;\n\n    if (min > labelOptions.skip) {\n      skip = labelOptions.skip + labelOptions.step * Math.ceil((min - labelOptions.skip) / labelOptions.step);\n    } else {\n      skip = labelOptions.skip;\n    }\n\n    return {\n      min: skip - start,\n      max: (options.categories.length ? max + (justified ? 1 : 0) : 0) - start\n    };\n  }\n\n  createAxisLabel(index, labelOptions, labelContext) {\n    const options = this.options;\n    const dataItem = options.dataItems ? options.dataItems[index] : null;\n    const category = valueOrDefault(options.categories[index], \"\");\n    labelContext.dataItem = dataItem;\n    const text = this.axisLabelText(category, labelOptions, labelContext);\n    return new AxisLabel(category, text, index, dataItem, labelOptions);\n  }\n\n  shouldRenderNote(value) {\n    const range = this.totalRangeIndices();\n    return Math.floor(range.min) <= value && value <= Math.ceil(range.max);\n  }\n\n  noteSlot(value) {\n    const options = this.options;\n    const index = value - Math.floor(options.min || 0);\n    return this.getSlot(index);\n  }\n\n  arrangeNotes() {\n    super.arrangeNotes();\n    this.hideOutOfRangeNotes();\n  }\n\n  hideOutOfRangeNotes() {\n    const {\n      notes,\n      box\n    } = this;\n\n    if (notes && notes.length) {\n      const valueAxis = this.options.vertical ? Y : X;\n      const start = box[valueAxis + 1];\n      const end = box[valueAxis + 2];\n\n      for (let idx = 0; idx < notes.length; idx++) {\n        const note = notes[idx];\n\n        if (note.box && (end < note.box[valueAxis + 1] || note.box[valueAxis + 2] < start)) {\n          note.hide();\n        }\n      }\n    }\n  }\n\n  pan(delta) {\n    const range = this.totalRangeIndices(true);\n    const {\n      scale\n    } = this.scaleOptions();\n    const offset = round(delta / scale, DEFAULT_PRECISION);\n    const totalRange = this.totalRange();\n    const min = range.min + offset;\n    const max = range.max + offset;\n    return this.limitRange(min, max, 0, totalRange.max, offset);\n  }\n\n  pointsRange(start, end) {\n    const {\n      reverse,\n      vertical\n    } = this.options;\n    const valueAxis = vertical ? Y : X;\n    const range = this.totalRangeIndices(true);\n    const {\n      scale,\n      box\n    } = this.scaleOptions();\n    const lineStart = box[valueAxis + (reverse ? 2 : 1)];\n    const diffStart = start[valueAxis] - lineStart;\n    const diffEnd = end[valueAxis] - lineStart;\n    const min = range.min + diffStart / scale;\n    const max = range.min + diffEnd / scale;\n    const rangeMin = Math.min(min, max);\n    const rangeMax = Math.max(min, max);\n\n    if (rangeMax - rangeMin >= MIN_CATEGORY_POINTS_RANGE) {\n      return {\n        min: rangeMin,\n        max: rangeMax\n      };\n    }\n  }\n\n  valueRange() {\n    return this.range();\n  }\n\n  totalIndex(value) {\n    const options = this.options;\n    const index = this._categoriesMap ? this._categoriesMap.get(value) : indexOf(value, options.srcCategories);\n    return index;\n  }\n\n  currentRangeIndices() {\n    const options = this.options;\n    let min = 0;\n\n    if (isNumber(options.min)) {\n      min = Math.floor(options.min);\n    }\n\n    let max;\n\n    if (isNumber(options.max)) {\n      max = options.justified ? Math.floor(options.max) : Math.ceil(options.max) - 1;\n    } else {\n      max = this.totalCount() - 1;\n    }\n\n    return {\n      min: min,\n      max: max\n    };\n  }\n\n  mapCategories() {\n    if (!this._categoriesMap) {\n      const map = this._categoriesMap = new HashMap();\n      const srcCategories = this.options.srcCategories;\n\n      for (let idx = 0; idx < srcCategories.length; idx++) {\n        map.set(srcCategories[idx], idx);\n      }\n    }\n  }\n\n  totalCount() {\n    return Math.max(this.options.srcCategories.length, this._seriesMax || 0);\n  }\n\n}\n\nsetDefaultOptions(CategoryAxis, {\n  type: \"category\",\n  vertical: false,\n  majorGridLines: {\n    visible: false,\n    width: 1,\n    color: BLACK\n  },\n  labels: {\n    zIndex: 1\n  },\n  justified: false,\n  _deferLabels: true\n});\nexport default CategoryAxis;","map":null,"metadata":{},"sourceType":"module"}