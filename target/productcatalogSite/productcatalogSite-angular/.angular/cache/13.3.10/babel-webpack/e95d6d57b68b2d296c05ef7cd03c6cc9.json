{"ast":null,"code":"import PieSegment from '../pie-chart/pie-segment';\nimport PointEventsMixin from '../mixins/point-events-mixin';\nimport { PIE } from '../constants';\nimport { ShapeBuilder, Box } from '../../core';\nimport { CENTER } from '../../common/constants';\nimport { deepExtend, setDefaultOptions } from '../../common';\n\nclass DonutSegment extends PieSegment {\n  reflowLabel() {\n    const {\n      options: {\n        labels: labelsOptions\n      },\n      label\n    } = this;\n    const sector = this.sector.clone();\n    const angle = sector.middle();\n\n    if (label) {\n      const labelHeight = label.box.height();\n\n      if (labelsOptions.position === CENTER) {\n        sector.radius -= (sector.radius - sector.innerRadius) / 2;\n        const lp = sector.point(angle);\n        label.reflow(new Box(lp.x, lp.y - labelHeight / 2, lp.x, lp.y));\n      } else {\n        super.reflowLabel();\n      }\n    }\n  }\n\n  createSegment(sector, options) {\n    return ShapeBuilder.current.createRing(sector, options);\n  }\n\n}\n\nsetDefaultOptions(DonutSegment, {\n  overlay: {\n    gradient: \"roundedGlass\"\n  },\n  labels: {\n    position: CENTER\n  },\n  animation: {\n    type: PIE\n  }\n});\ndeepExtend(DonutSegment.prototype, PointEventsMixin);\nexport default DonutSegment;","map":null,"metadata":{},"sourceType":"module"}