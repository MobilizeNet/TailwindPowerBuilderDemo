{"ast":null,"code":"import PlotAreaBase from './plotarea-base';\nimport AxisGroupRangeTracker from '../axis-group-range-tracker';\nimport { RadarLogarithmicAxis, RadarNumericAxis } from '../../core';\nimport { LOGARITHMIC } from '../constants';\nimport { getSpacing } from '../../common';\nimport { Y, CENTER } from '../../common/constants';\nconst DEFAULT_PADDING = 0.15;\n\nclass PolarPlotAreaBase extends PlotAreaBase {\n  initFields() {\n    this.valueAxisRangeTracker = new AxisGroupRangeTracker();\n  }\n\n  render() {\n    this.addToLegend(this.series);\n    this.createPolarAxis();\n    this.createCharts();\n    this.createValueAxis();\n  }\n\n  alignAxes() {\n    const axis = this.valueAxis;\n    const range = axis.range();\n    const crossingValue = axis.options.reverse ? range.max : range.min;\n    const slot = axis.getSlot(crossingValue);\n    const center = this.polarAxis.getSlot(0).center;\n    const axisBox = axis.box.translate(center.x - slot.x1, center.y - slot.y1);\n    axis.reflow(axisBox);\n  }\n\n  createValueAxis() {\n    const tracker = this.valueAxisRangeTracker;\n    const defaultRange = tracker.query();\n    const axisOptions = this.valueAxisOptions({\n      roundToMajorUnit: false,\n      zIndex: -1\n    });\n    let axisType, axisDefaultRange;\n\n    if (axisOptions.type === LOGARITHMIC) {\n      axisType = RadarLogarithmicAxis;\n      axisDefaultRange = {\n        min: 0.1,\n        max: 1\n      };\n    } else {\n      axisType = RadarNumericAxis;\n      axisDefaultRange = {\n        min: 0,\n        max: 1\n      };\n    }\n\n    const range = tracker.query(name) || defaultRange || axisDefaultRange;\n\n    if (range && defaultRange) {\n      range.min = Math.min(range.min, defaultRange.min);\n      range.max = Math.max(range.max, defaultRange.max);\n    }\n\n    const valueAxis = new axisType(range.min, range.max, axisOptions, this.chartService);\n    this.valueAxis = valueAxis;\n    this.appendAxis(valueAxis);\n  }\n\n  reflowAxes() {\n    const {\n      options: {\n        plotArea: options\n      },\n      valueAxis,\n      polarAxis,\n      box\n    } = this;\n    const defaultPadding = Math.min(box.width(), box.height()) * DEFAULT_PADDING;\n    const padding = getSpacing(options.padding || {}, defaultPadding);\n    const paddingBox = box.clone().unpad(padding);\n    const axisBox = paddingBox.clone();\n    axisBox.y2 = axisBox.y1 + Math.min(axisBox.width(), axisBox.height());\n    axisBox.align(paddingBox, Y, CENTER);\n    const valueAxisBox = axisBox.clone().shrink(0, axisBox.height() / 2);\n    polarAxis.reflow(axisBox);\n    valueAxis.reflow(valueAxisBox);\n    const heightDiff = valueAxis.lineBox().height() - valueAxis.box.height();\n    valueAxis.reflow(valueAxis.box.unpad({\n      top: heightDiff\n    }));\n    this.axisBox = axisBox;\n    this.alignAxes(axisBox);\n  }\n\n  backgroundBox() {\n    return this.box;\n  }\n\n  detachLabels() {}\n\n}\n\nexport default PolarPlotAreaBase;","map":null,"metadata":{},"sourceType":"module"}