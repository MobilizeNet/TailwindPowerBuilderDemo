{"ast":null,"code":"import { __decorate, __metadata } from 'tslib';\nimport * as i1 from '@mobilize/angularclient';\nimport { WebMapService, WMConstants, NotifyChange, WebMapUtils, WebMapModule } from '@mobilize/angularclient';\nimport * as i2 from '@mobilize/base-components';\nimport { EventData, serverEvent, BaseComponentsModule, RemoveAmpersand, dataTransfer, AlertComponent, ContainerComponent, TypeResolver } from '@mobilize/base-components';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Input, Output, Injectable, Optional, Component, ChangeDetectionStrategy, HostBinding, HostListener, ViewChild, NgModule, CUSTOM_ELEMENTS_SCHEMA, ContentChild, ViewChildren, ChangeDetectorRef, Renderer2, ElementRef, ViewEncapsulation, ContentChildren, forwardRef, RendererStyleFlags2, ComponentFactoryResolver, KeyValueDiffers, Pipe, NgZone, TemplateRef } from '@angular/core';\nimport { Subject, of } from 'rxjs';\nimport { Events, Dictionary, ActionModel, ActionModelV5, NetworkException, ModalActionButton, SendV5, PrintAction } from '@mobilize/webmap-core';\nimport * as _ from 'lodash';\nimport { Dictionary as Dictionary$1 } from '@mobilize/webmap-core/dist/Application';\nimport * as i6 from '@angular/common';\nimport { CommonModule, DatePipe } from '@angular/common';\nimport { WMLogger } from '@mobilize/logging';\nimport roundTo_ from 'round-to';\nimport * as moment from 'moment';\nimport * as i13 from '@progress/kendo-angular-dialog';\nimport { WindowComponent, WindowModule, DialogsModule, DialogModule } from '@progress/kendo-angular-dialog';\nimport { formatDate, parseDate, parseNumber, formatNumber } from '@progress/kendo-angular-intl';\nimport * as i5 from '@progress/kendo-angular-dateinputs';\nimport { DateInputComponent, DatePickerComponent, DateTimePickerComponent, DateInputsModule, CalendarModule } from '@progress/kendo-angular-dateinputs';\nimport '@progress/kendo-ui';\nimport { map } from 'rxjs/operators';\nimport * as i6$1 from '@progress/kendo-angular-dropdowns';\nimport { DropDownsModule } from '@progress/kendo-angular-dropdowns';\nimport * as i3 from '@progress/kendo-angular-popup';\nimport { PopupService, PopupModule } from '@progress/kendo-angular-popup';\nimport * as i1$1 from '@angular/common/http';\nimport { HttpHeaders, HttpClient, HttpClientModule } from '@angular/common/http';\nimport * as i5$1 from '@progress/kendo-angular-inputs';\nimport { NumericTextBoxComponent, InputsModule } from '@progress/kendo-angular-inputs';\nimport * as i9 from '@angular/forms';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { fromEvent } from 'rxjs-compat/observable/fromEvent';\nimport * as i17 from 'angular-draggable-droppable';\nimport { DragAndDropModule } from 'angular-draggable-droppable';\nimport 'rxjs-compat/add/observable/of';\nimport * as i13$1 from '@progress/kendo-angular-grid';\nimport { ColumnComponent, GridComponent, GridModule } from '@progress/kendo-angular-grid';\nimport * as i6$2 from '@progress/kendo-angular-buttons';\nimport { ButtonDirective, ButtonsModule } from '@progress/kendo-angular-buttons';\nimport * as PDFObject from 'pdfobject';\nimport * as i9$1 from '@progress/kendo-angular-label';\nimport { LabelModule } from '@progress/kendo-angular-label';\nimport * as i1$2 from '@angular/platform-browser';\nimport { BrowserModule } from '@angular/platform-browser';\nimport * as i7 from '@progress/kendo-angular-tooltip';\nimport { TooltipModule } from '@progress/kendo-angular-tooltip';\nimport * as i4 from '@progress/kendo-angular-toolbar';\nimport { ToolBarToolComponent, ToolBarModule } from '@progress/kendo-angular-toolbar';\nimport * as i6$3 from '@progress/kendo-angular-gauges';\nimport { GaugesModule } from '@progress/kendo-angular-gauges';\nimport * as i6$4 from '@progress/kendo-angular-menu';\nimport { ContextMenuComponent, MenuComponent as MenuComponent$1, MenuModule, ContextMenuModule } from '@progress/kendo-angular-menu';\nimport * as i9$2 from '@progress/kendo-angular-treeview';\nimport { TreeViewModule } from '@progress/kendo-angular-treeview';\nimport * as i5$2 from '@progress/kendo-angular-layout';\nimport { TabStripComponent, SelectEvent, LayoutModule } from '@progress/kendo-angular-layout';\nimport { Dictionary as Dictionary$2 } from '@mobilize/webmap-core/dist/Application/Dictionary';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { AutosizeModule } from 'ngx-autosize';\nconst _c0 = [\"focusElement\"];\n\nfunction SessionExpiredComponent_div_0_kendo_dialog_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-dialog\", 2)(1, \"i\", 3);\n    i0.ɵɵtext(2, \"warning\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\", 4);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"kendo-dialog-actions\")(6, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function SessionExpiredComponent_div_0_kendo_dialog_1_Template_button_click_6_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return ctx_r2.click($event);\n    });\n    i0.ɵɵtext(7, \"Ok\");\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"title\", ctx_r1.title);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r1.labelMessage);\n  }\n}\n\nfunction SessionExpiredComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, SessionExpiredComponent_div_0_kendo_dialog_1_Template, 8, 2, \"kendo-dialog\", 1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.visible);\n  }\n}\n\nconst _c1 = [\"combobox\"];\n\nfunction UCalendarComponent_kendo_dateinput_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-dateinput\", 2, 3);\n    i0.ɵɵlistener(\"keyup\", function UCalendarComponent_kendo_dateinput_0_Template_kendo_dateinput_keyup_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.keyUpHandler($event);\n    })(\"valueChange\", function UCalendarComponent_kendo_dateinput_0_Template_kendo_dateinput_valueChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.itemChangeHandler($event);\n    })(\"click\", function UCalendarComponent_kendo_dateinput_0_Template_kendo_dateinput_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.clickColumn($event);\n    })(\"mousedown\", function UCalendarComponent_kendo_dateinput_0_Template_kendo_dateinput_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.mouseDownHandler($event);\n    })(\"blur\", function UCalendarComponent_kendo_dateinput_0_Template_kendo_dateinput_blur_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.blurHandler($event);\n    })(\"keydown.tab\", function UCalendarComponent_kendo_dateinput_0_Template_kendo_dateinput_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function UCalendarComponent_kendo_dateinput_0_Template_kendo_dateinput_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.tabKeyHandler($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.classHandler())(\"readonly\", ctx_r0.disabled)(\"formatPlaceholder\", ctx_r0.formatPlaceholder)(\"placeholder\", ctx_r0.emptyPlaceHolder)(\"value\", ctx_r0.value)(\"format\", ctx_r0.mask)(\"hostComponent\", ctx_r0)(\"ngStyle\", ctx_r0.setMyStyle())(\"spinners\", ctx_r0.spin);\n  }\n}\n\nfunction UCalendarComponent_kendo_datepicker_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-datepicker\", 4, 3);\n    i0.ɵɵlistener(\"valueChange\", function UCalendarComponent_kendo_datepicker_1_Template_kendo_datepicker_valueChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.value = $event;\n    })(\"keyup\", function UCalendarComponent_kendo_datepicker_1_Template_kendo_datepicker_keyup_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.keyUpHandler($event);\n    })(\"valueChange\", function UCalendarComponent_kendo_datepicker_1_Template_kendo_datepicker_valueChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.itemChangeHandler($event);\n    })(\"focus\", function UCalendarComponent_kendo_datepicker_1_Template_kendo_datepicker_focus_0_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.focusHandler();\n    })(\"click\", function UCalendarComponent_kendo_datepicker_1_Template_kendo_datepicker_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.clickColumn($event);\n    })(\"mousedown\", function UCalendarComponent_kendo_datepicker_1_Template_kendo_datepicker_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.mouseDownHandler($event);\n    })(\"blur\", function UCalendarComponent_kendo_datepicker_1_Template_kendo_datepicker_blur_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.blurHandler($event);\n    })(\"keydown.tab\", function UCalendarComponent_kendo_datepicker_1_Template_kendo_datepicker_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return ctx_r20.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function UCalendarComponent_kendo_datepicker_1_Template_kendo_datepicker_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.tabKeyHandler($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r1.classHandler())(\"readonly\", ctx_r1.disabled)(\"formatPlaceholder\", ctx_r1.formatPlaceholder)(\"placeholder\", ctx_r1.emptyPlaceHolder)(\"value\", ctx_r1.value)(\"format\", ctx_r1.mask)(\"hostComponent\", ctx_r1)(\"ngStyle\", ctx_r1.setMyStyle());\n  }\n}\n\nfunction UCalculatorComponent_div_0_kendo_popup_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-popup\", 8)(1, \"div\", 9)(2, \"div\", 10)(3, \"div\", 11)(4, \"div\", 12);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(6, \"div\", 13)(7, \"table\", 14)(8, \"tr\")(9, \"td\", 15);\n    i0.ɵɵlistener(\"click\", function UCalculatorComponent_div_0_kendo_popup_7_Template_td_click_9_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return ctx_r5.allClear($event);\n    });\n    i0.ɵɵtext(10, \"AC\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"td\", 16);\n    i0.ɵɵlistener(\"click\", function UCalculatorComponent_div_0_kendo_popup_7_Template_td_click_11_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return ctx_r7.pressOperatorKey($event, \"/\");\n    });\n    i0.ɵɵtext(12, \"/\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(13, \"tr\")(14, \"td\", 17);\n    i0.ɵɵlistener(\"click\", function UCalculatorComponent_div_0_kendo_popup_7_Template_td_click_14_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return ctx_r8.pressKey($event, \"7\");\n    });\n    i0.ɵɵtext(15, \"7\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"td\", 17);\n    i0.ɵɵlistener(\"click\", function UCalculatorComponent_div_0_kendo_popup_7_Template_td_click_16_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return ctx_r9.pressKey($event, \"8\");\n    });\n    i0.ɵɵtext(17, \"8\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"td\", 17);\n    i0.ɵɵlistener(\"click\", function UCalculatorComponent_div_0_kendo_popup_7_Template_td_click_18_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return ctx_r10.pressKey($event, \"9\");\n    });\n    i0.ɵɵtext(19, \"9\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(20, \"td\", 18);\n    i0.ɵɵlistener(\"click\", function UCalculatorComponent_div_0_kendo_popup_7_Template_td_click_20_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return ctx_r11.pressOperatorKey($event, \"*\");\n    });\n    i0.ɵɵtext(21, \"x\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(22, \"tr\")(23, \"td\", 17);\n    i0.ɵɵlistener(\"click\", function UCalculatorComponent_div_0_kendo_popup_7_Template_td_click_23_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return ctx_r12.pressKey($event, \"4\");\n    });\n    i0.ɵɵtext(24, \"4\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(25, \"td\", 17);\n    i0.ɵɵlistener(\"click\", function UCalculatorComponent_div_0_kendo_popup_7_Template_td_click_25_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return ctx_r13.pressKey($event, \"5\");\n    });\n    i0.ɵɵtext(26, \"5\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(27, \"td\", 17);\n    i0.ɵɵlistener(\"click\", function UCalculatorComponent_div_0_kendo_popup_7_Template_td_click_27_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return ctx_r14.pressKey($event, \"6\");\n    });\n    i0.ɵɵtext(28, \"6\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(29, \"td\", 18);\n    i0.ɵɵlistener(\"click\", function UCalculatorComponent_div_0_kendo_popup_7_Template_td_click_29_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return ctx_r15.pressOperatorKey($event, \"-\");\n    });\n    i0.ɵɵtext(30, \"-\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(31, \"tr\")(32, \"td\", 17);\n    i0.ɵɵlistener(\"click\", function UCalculatorComponent_div_0_kendo_popup_7_Template_td_click_32_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return ctx_r16.pressKey($event, \"1\");\n    });\n    i0.ɵɵtext(33, \"1\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(34, \"td\", 17);\n    i0.ɵɵlistener(\"click\", function UCalculatorComponent_div_0_kendo_popup_7_Template_td_click_34_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r17 = i0.ɵɵnextContext(2);\n      return ctx_r17.pressKey($event, \"2\");\n    });\n    i0.ɵɵtext(35, \"2\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(36, \"td\", 17);\n    i0.ɵɵlistener(\"click\", function UCalculatorComponent_div_0_kendo_popup_7_Template_td_click_36_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r18 = i0.ɵɵnextContext(2);\n      return ctx_r18.pressKey($event, \"3\");\n    });\n    i0.ɵɵtext(37, \"3\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(38, \"td\", 18);\n    i0.ɵɵlistener(\"click\", function UCalculatorComponent_div_0_kendo_popup_7_Template_td_click_38_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return ctx_r19.pressOperatorKey($event, \"+\");\n    });\n    i0.ɵɵtext(39, \"+\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(40, \"tr\")(41, \"td\", 19);\n    i0.ɵɵlistener(\"click\", function UCalculatorComponent_div_0_kendo_popup_7_Template_td_click_41_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r20 = i0.ɵɵnextContext(2);\n      return ctx_r20.pressKey($event, \"0\");\n    });\n    i0.ɵɵtext(42, \"0\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(43, \"td\", 17);\n    i0.ɵɵlistener(\"click\", function UCalculatorComponent_div_0_kendo_popup_7_Template_td_click_43_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r21 = i0.ɵɵnextContext(2);\n      return ctx_r21.pressKey($event, \".\");\n    });\n    i0.ɵɵtext(44, \".\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(45, \"td\", 20);\n    i0.ɵɵlistener(\"click\", function UCalculatorComponent_div_0_kendo_popup_7_Template_td_click_45_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return ctx_r22.getAnswer($event);\n    });\n    i0.ɵɵtext(46, \"=\");\n    i0.ɵɵelementEnd()()()()()()();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n\n    const _r2 = i0.ɵɵreference(4);\n\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"anchor\", _r2);\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate(ctx_r4.subText);\n  }\n}\n\nfunction UCalculatorComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵlistener(\"click\", function UCalculatorComponent_div_0_Template_div_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r23 = i0.ɵɵnextContext();\n      return ctx_r23.clickColumn($event);\n    })(\"keydown.tab\", function UCalculatorComponent_div_0_Template_div_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r25 = i0.ɵɵnextContext();\n      return ctx_r25.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function UCalculatorComponent_div_0_Template_div_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r26 = i0.ɵɵnextContext();\n      return ctx_r26.tabKeyHandler($event);\n    });\n    i0.ɵɵelementStart(1, \"div\", null, 2);\n    i0.ɵɵelement(3, \"input\", 3, 4);\n    i0.ɵɵelementStart(5, \"kendo-combobox\", 5, 6);\n    i0.ɵɵlistener(\"focus\", function UCalculatorComponent_div_0_Template_kendo_combobox_focus_5_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r27 = i0.ɵɵnextContext();\n      return ctx_r27.focusHandler($event);\n    })(\"click\", function UCalculatorComponent_div_0_Template_kendo_combobox_click_5_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r28 = i0.ɵɵnextContext();\n      return ctx_r28.onToggle($event);\n    })(\"valueChange\", function UCalculatorComponent_div_0_Template_kendo_combobox_valueChange_5_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r29 = i0.ɵɵnextContext();\n      return ctx_r29.modelData = $event;\n    })(\"change\", function UCalculatorComponent_div_0_Template_kendo_combobox_change_5_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r30 = i0.ɵɵnextContext();\n      return ctx_r30.itemChangeHandler($event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(7, UCalculatorComponent_div_0_kendo_popup_7_Template, 47, 2, \"kendo-popup\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"tabindex\", ctx_r0.tabSequence);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.class)(\"ngStyle\", ctx_r0.setMyStyle());\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r0.setMyStyle())(\"allowCustom\", true)(\"clearButton\", false)(\"ngClass\", ctx_r0.class)(\"readonly\", ctx_r0.disabled)(\"hostComponent\", ctx_r0)(\"value\", ctx_r0.modelData);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.show);\n  }\n}\n\nconst _c2 = [\"header\"];\nconst _c3 = [\"details\"];\nconst _c4 = [\"summary\"];\nconst _c5 = [\"footer\"];\nconst _c6 = [\"groupHeader\"];\nconst _c7 = [\"groupTrailer\"];\nconst _c8 = [\"headerContainer\"];\nconst _c9 = [\"detailsContainer\"];\nconst _c10 = [\"row\"];\nconst _c11 = [\"modalDiv\"];\n\nfunction DwSimpleNumericEditMaskComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 3, 4);\n    i0.ɵɵlistener(\"click\", function DwSimpleNumericEditMaskComponent_div_0_Template_div_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.mouseDownDivHandler($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction DwSimpleNumericEditMaskComponent_kendo_numerictextbox_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-numerictextbox\", 5, 6);\n    i0.ɵɵlistener(\"valueChange\", function DwSimpleNumericEditMaskComponent_kendo_numerictextbox_1_Template_kendo_numerictextbox_valueChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.numericModelData = $event;\n    })(\"blur\", function DwSimpleNumericEditMaskComponent_kendo_numerictextbox_1_Template_kendo_numerictextbox_blur_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.itemChangeHandler($event);\n    })(\"click\", function DwSimpleNumericEditMaskComponent_kendo_numerictextbox_1_Template_kendo_numerictextbox_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.clickColumn($event);\n    })(\"dblclick\", function DwSimpleNumericEditMaskComponent_kendo_numerictextbox_1_Template_kendo_numerictextbox_dblclick_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.doubleClickedHandler($event);\n    })(\"keydown.tab\", function DwSimpleNumericEditMaskComponent_kendo_numerictextbox_1_Template_kendo_numerictextbox_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.tabKeyHandler($event);\n    })(\"keydown.arrowup\", function DwSimpleNumericEditMaskComponent_kendo_numerictextbox_1_Template_kendo_numerictextbox_keydown_arrowup_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.arrowKeys($event);\n    })(\"keydown.arrowdown\", function DwSimpleNumericEditMaskComponent_kendo_numerictextbox_1_Template_kendo_numerictextbox_keydown_arrowdown_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.arrowKeys($event);\n    })(\"keydown.shift.tab\", function DwSimpleNumericEditMaskComponent_kendo_numerictextbox_1_Template_kendo_numerictextbox_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.tabKeyHandler($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"border\", ctx_r1.borderStyle)(\"box-shadow\", ctx_r1.boxBorder);\n    i0.ɵɵproperty(\"hostComponent\", ctx_r1)(\"value\", ctx_r1.numericModelData)(\"min\", ctx_r1.minimum)(\"max\", ctx_r1.maximum)(\"autoCorrect\", true)(\"readonly\", ctx_r1.disabled)(\"format\", ctx_r1.mask)(\"ngStyle\", ctx_r1.setMyStyle())(\"spinners\", ctx_r1.spinControl)(\"step\", ctx_r1.spinIncrement)(\"ngClass\", ctx_r1.classHandler());\n  }\n}\n\nfunction DwSimpleNumericEditMaskComponent_kendo_maskedtextbox_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-maskedtextbox\", 7, 6);\n    i0.ɵɵlistener(\"ngModelChange\", function DwSimpleNumericEditMaskComponent_kendo_maskedtextbox_2_Template_kendo_maskedtextbox_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.stringModelData = $event;\n    })(\"blur\", function DwSimpleNumericEditMaskComponent_kendo_maskedtextbox_2_Template_kendo_maskedtextbox_blur_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.itemChangeHandler($event);\n    })(\"focus\", function DwSimpleNumericEditMaskComponent_kendo_maskedtextbox_2_Template_kendo_maskedtextbox_focus_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return ctx_r20.focusInHandler($event);\n    })(\"click\", function DwSimpleNumericEditMaskComponent_kendo_maskedtextbox_2_Template_kendo_maskedtextbox_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.clickColumn($event);\n    })(\"dblclick\", function DwSimpleNumericEditMaskComponent_kendo_maskedtextbox_2_Template_kendo_maskedtextbox_dblclick_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return ctx_r22.doubleClickedHandler($event);\n    })(\"keydown.tab\", function DwSimpleNumericEditMaskComponent_kendo_maskedtextbox_2_Template_kendo_maskedtextbox_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r23 = i0.ɵɵnextContext();\n      return ctx_r23.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function DwSimpleNumericEditMaskComponent_kendo_maskedtextbox_2_Template_kendo_maskedtextbox_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r24 = i0.ɵɵnextContext();\n      return ctx_r24.tabKeyHandler($event);\n    })(\"keydown.arrowup\", function DwSimpleNumericEditMaskComponent_kendo_maskedtextbox_2_Template_kendo_maskedtextbox_keydown_arrowup_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r25 = i0.ɵɵnextContext();\n      return ctx_r25.arrowKeys($event);\n    })(\"keydown.arrowdown\", function DwSimpleNumericEditMaskComponent_kendo_maskedtextbox_2_Template_kendo_maskedtextbox_keydown_arrowdown_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r26 = i0.ɵɵnextContext();\n      return ctx_r26.arrowKeys($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"border\", ctx_r2.borderStyle)(\"box-shadow\", ctx_r2.boxBorder);\n    i0.ɵɵproperty(\"readonly\", ctx_r2.disabled)(\"ngStyle\", ctx_r2.setMyStyle())(\"hostComponent\", ctx_r2)(\"ngClass\", ctx_r2.classHandler())(\"ngModel\", ctx_r2.stringModelData);\n  }\n}\n\nfunction DwComplexNumericEditMaskComponent_kendo_maskedtextbox_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-maskedtextbox\", 1, 2);\n    i0.ɵɵlistener(\"ngModelChange\", function DwComplexNumericEditMaskComponent_kendo_maskedtextbox_0_Template_kendo_maskedtextbox_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.value = $event;\n    })(\"ngModelChange\", function DwComplexNumericEditMaskComponent_kendo_maskedtextbox_0_Template_kendo_maskedtextbox_ngModelChange_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.updateBuffer();\n    })(\"blur\", function DwComplexNumericEditMaskComponent_kendo_maskedtextbox_0_Template_kendo_maskedtextbox_blur_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.itemChangeHandler($event);\n    })(\"click\", function DwComplexNumericEditMaskComponent_kendo_maskedtextbox_0_Template_kendo_maskedtextbox_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.clickColumn($event);\n    })(\"mousedown\", function DwComplexNumericEditMaskComponent_kendo_maskedtextbox_0_Template_kendo_maskedtextbox_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.mouseDownHandler($event);\n    })(\"dblclick\", function DwComplexNumericEditMaskComponent_kendo_maskedtextbox_0_Template_kendo_maskedtextbox_dblclick_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.doubleClickedHandler($event);\n    })(\"keydown.tab\", function DwComplexNumericEditMaskComponent_kendo_maskedtextbox_0_Template_kendo_maskedtextbox_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function DwComplexNumericEditMaskComponent_kendo_maskedtextbox_0_Template_kendo_maskedtextbox_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.tabKeyHandler($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"border\", ctx_r0.borderStyle)(\"box-shadow\", ctx_r0.boxBorder);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.classHandler())(\"mask\", ctx_r0.mask)(\"ngModel\", ctx_r0.value)(\"includeLiterals\", true)(\"promptPlaceholder\", ctx_r0.promptCharacter)(\"hostComponent\", ctx_r0)(\"ngStyle\", ctx_r0.setMyStyle());\n  }\n}\n\nfunction DwDateTimeEditMaskComponent_kendo_dateinput_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-dateinput\", 2, 3);\n    i0.ɵɵlistener(\"keyup\", function DwDateTimeEditMaskComponent_kendo_dateinput_0_Template_kendo_dateinput_keyup_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.keyUpHandler($event);\n    })(\"valueChange\", function DwDateTimeEditMaskComponent_kendo_dateinput_0_Template_kendo_dateinput_valueChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.itemChangeHandler($event);\n    })(\"blur\", function DwDateTimeEditMaskComponent_kendo_dateinput_0_Template_kendo_dateinput_blur_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.blurHandler($event);\n    })(\"click\", function DwDateTimeEditMaskComponent_kendo_dateinput_0_Template_kendo_dateinput_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.clickColumn($event);\n    })(\"mousedown\", function DwDateTimeEditMaskComponent_kendo_dateinput_0_Template_kendo_dateinput_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.mouseDownHandler($event);\n    })(\"keydown.tab\", function DwDateTimeEditMaskComponent_kendo_dateinput_0_Template_kendo_dateinput_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function DwDateTimeEditMaskComponent_kendo_dateinput_0_Template_kendo_dateinput_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.tabKeyHandler($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"border\", ctx_r0.borderStyle)(\"box-shadow\", ctx_r0.boxBorder);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.classHandler())(\"readonly\", ctx_r0.readOnly)(\"disabled\", ctx_r0.disabled)(\"formatPlaceholder\", ctx_r0.formatPlaceholder)(\"placeholder\", ctx_r0.emptyPlaceHolder)(\"value\", ctx_r0.value)(\"format\", ctx_r0.mask)(\"hostComponent\", ctx_r0)(\"ngStyle\", ctx_r0.setMyStyle())(\"spinners\", ctx_r0.spin);\n  }\n}\n\nfunction DwDateTimeEditMaskComponent_kendo_datepicker_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-datepicker\", 4, 3);\n    i0.ɵɵlistener(\"valueChange\", function DwDateTimeEditMaskComponent_kendo_datepicker_1_Template_kendo_datepicker_valueChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.value = $event;\n    })(\"blur\", function DwDateTimeEditMaskComponent_kendo_datepicker_1_Template_kendo_datepicker_blur_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.blurHandler($event);\n    })(\"keyup\", function DwDateTimeEditMaskComponent_kendo_datepicker_1_Template_kendo_datepicker_keyup_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.keyUpHandler($event);\n    })(\"valueChange\", function DwDateTimeEditMaskComponent_kendo_datepicker_1_Template_kendo_datepicker_valueChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.itemChangeHandler($event);\n    })(\"click\", function DwDateTimeEditMaskComponent_kendo_datepicker_1_Template_kendo_datepicker_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.clickColumn($event);\n    })(\"mousedown\", function DwDateTimeEditMaskComponent_kendo_datepicker_1_Template_kendo_datepicker_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.mouseDownHandler($event);\n    })(\"keydown.tab\", function DwDateTimeEditMaskComponent_kendo_datepicker_1_Template_kendo_datepicker_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function DwDateTimeEditMaskComponent_kendo_datepicker_1_Template_kendo_datepicker_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return ctx_r20.tabKeyHandler($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"border\", ctx_r1.borderStyle)(\"box-shadow\", ctx_r1.boxBorder);\n    i0.ɵɵproperty(\"ngClass\", ctx_r1.classHandler())(\"readonly\", ctx_r1.readOnly)(\"disabled\", ctx_r1.disabled)(\"formatPlaceholder\", ctx_r1.formatPlaceholder)(\"placeholder\", ctx_r1.emptyPlaceHolder)(\"value\", ctx_r1.value)(\"format\", ctx_r1.mask)(\"hostComponent\", ctx_r1)(\"ngStyle\", ctx_r1.setMyStyle());\n  }\n}\n\nconst _c12 = [\"maskedTextbox\"];\nconst _c13 = [\"textarea\"];\n\nfunction DwStringEditMaskComponent_img_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"img\", 3);\n    i0.ɵɵlistener(\"error\", function DwStringEditMaskComponent_img_0_Template_img_error_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.hideImage();\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"src\", ctx_r0.modelData, i0.ɵɵsanitizeUrl)(\"ngClass\", ctx_r0.classHandler());\n  }\n}\n\nfunction DwStringEditMaskComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"kendo-maskedtextbox\", 5, 6);\n    i0.ɵɵlistener(\"valueChange\", function DwStringEditMaskComponent_div_1_Template_kendo_maskedtextbox_valueChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.maskedModelData = $event;\n    })(\"change\", function DwStringEditMaskComponent_div_1_Template_kendo_maskedtextbox_change_1_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.itemChangeHandler($event);\n    })(\"click\", function DwStringEditMaskComponent_div_1_Template_kendo_maskedtextbox_click_1_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.clickColumn($event);\n    })(\"mousedown\", function DwStringEditMaskComponent_div_1_Template_kendo_maskedtextbox_mousedown_1_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.mouseDownHandler($event);\n    })(\"dblclick\", function DwStringEditMaskComponent_div_1_Template_kendo_maskedtextbox_dblclick_1_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.doubleClickedHandler($event);\n    })(\"blur\", function DwStringEditMaskComponent_div_1_Template_kendo_maskedtextbox_blur_1_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.focusOutHandler($event);\n    })(\"keydown.tab\", function DwStringEditMaskComponent_div_1_Template_kendo_maskedtextbox_keydown_tab_1_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function DwStringEditMaskComponent_div_1_Template_kendo_maskedtextbox_keydown_shift_tab_1_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.tabKeyHandler($event);\n    })(\"keydown\", function DwStringEditMaskComponent_div_1_Template_kendo_maskedtextbox_keydown_1_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.keyDownHandler($event);\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r1.classHandler())(\"ngStyle\", ctx_r1.setMyStyle())(\"hostComponent\", ctx_r1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"border\", ctx_r1.borderStyle)(\"box-shadow\", ctx_r1.boxBorder);\n    i0.ɵɵproperty(\"hostComponent\", ctx_r1)(\"mask\", ctx_r1.fixedMask)(\"value\", ctx_r1.maskedModelData)(\"promptPlaceholder\", ctx_r1.promptPlaceholder)(\"prompt\", ctx_r1.prompt)(\"rules\", ctx_r1.rules)(\"readonly\", ctx_r1.disabled);\n  }\n}\n\nfunction DwStringEditMaskComponent_textarea_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"textarea\", 7, 8);\n    i0.ɵɵlistener(\"change\", function DwStringEditMaskComponent_textarea_2_Template_textarea_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.itemChangeHandler($event);\n    })(\"click\", function DwStringEditMaskComponent_textarea_2_Template_textarea_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.clickColumn($event);\n    })(\"mousedown\", function DwStringEditMaskComponent_textarea_2_Template_textarea_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return ctx_r20.mouseDownHandler($event);\n    })(\"dblclick\", function DwStringEditMaskComponent_textarea_2_Template_textarea_dblclick_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.doubleClickedHandler($event);\n    })(\"focus\", function DwStringEditMaskComponent_textarea_2_Template_textarea_focus_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return ctx_r22.focusInHandler($event);\n    })(\"keydown.tab\", function DwStringEditMaskComponent_textarea_2_Template_textarea_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r23 = i0.ɵɵnextContext();\n      return ctx_r23.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function DwStringEditMaskComponent_textarea_2_Template_textarea_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r24 = i0.ɵɵnextContext();\n      return ctx_r24.tabKeyHandler($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"height\", ctx_r2.adjustTextAreaHeight(), \"px\")(\"border\", ctx_r2.borderStyle)(\"box-shadow\", ctx_r2.boxBorder);\n    i0.ɵɵproperty(\"hostComponent\", ctx_r2)(\"value\", ctx_r2.displayValue)(\"ngClass\", ctx_r2.classHandler())(\"ngStyle\", ctx_r2.setMyStyle())(\"readonly\", ctx_r2.disabled);\n  }\n}\n\nconst _c14 = [\"column\"];\n\nfunction DwEditMaskComponent_wm_dw_simple_numeric_edit_mask_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"wm-dw-simple-numeric-edit-mask\", 1, 2);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r0.class);\n    i0.ɵɵproperty(\"model\", ctx_r0.model)(\"dataManagerContext\", ctx_r0.dataManagerContext);\n  }\n}\n\nfunction DwEditMaskComponent_wm_dw_complex_numeric_edit_mask_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"wm-dw-complex-numeric-edit-mask\", 1, 2);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.class);\n    i0.ɵɵproperty(\"model\", ctx_r1.model)(\"dataManagerContext\", ctx_r1.dataManagerContext);\n  }\n}\n\nfunction DwEditMaskComponent_wm_dw_date_time_edit_mask_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"wm-dw-date-time-edit-mask\", 1, 2);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r2.class);\n    i0.ɵɵproperty(\"model\", ctx_r2.model)(\"dataManagerContext\", ctx_r2.dataManagerContext);\n  }\n}\n\nfunction DwEditMaskComponent_wm_dw_time_edit_mask_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"wm-dw-time-edit-mask\", 1, 2);\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r3.class);\n    i0.ɵɵproperty(\"model\", ctx_r3.model)(\"dataManagerContext\", ctx_r3.dataManagerContext);\n  }\n}\n\nfunction DwEditMaskComponent_wm_dw_string_edit_mask_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"wm-dw-string-edit-mask\", 1, 2);\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r4.class);\n    i0.ɵɵproperty(\"model\", ctx_r4.model)(\"dataManagerContext\", ctx_r4.dataManagerContext);\n  }\n}\n\nconst _c15 = [\"scrollContainer\"];\n\nfunction BusyloaderComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"span\", 2);\n    i0.ɵɵtext(2, \"Loading\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"div\", 3)(4, \"div\", 4);\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c16 = [\"pressButton\"];\nconst _c17 = [\"dmViewElement\"];\n\nfunction FreeformComponent_div_0_wm_pager_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"wm-pager\", 20);\n    i0.ɵɵlistener(\"FirstPage\", function FreeformComponent_div_0_wm_pager_1_Template_wm_pager_FirstPage_0_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return ctx_r9.moveToFirstVisiblePage();\n    })(\"PreviousPage\", function FreeformComponent_div_0_wm_pager_1_Template_wm_pager_PreviousPage_0_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return ctx_r11.moveScrollUp($event);\n    })(\"NextPage\", function FreeformComponent_div_0_wm_pager_1_Template_wm_pager_NextPage_0_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return ctx_r12.moveScrollDown($event);\n    })(\"LastPage\", function FreeformComponent_div_0_wm_pager_1_Template_wm_pager_LastPage_0_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return ctx_r13.moveToLastVisiblePage();\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"totalPages\", ctx_r1.totalPages)(\"currentPage\", ctx_r1.currentPageIndex(ctx_r1.visiblePageStart));\n  }\n}\n\nfunction FreeformComponent_div_0_div_6_ng_container_2_ng_template_1_Template(rf, ctx) {}\n\nconst _c18 = function (a0) {\n  return {\n    contextHeader: a0\n  };\n};\n\nfunction FreeformComponent_div_0_div_6_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, FreeformComponent_div_0_div_6_ng_container_2_ng_template_1_Template, 0, 0, \"ng-template\", 23);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r15 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r15.header)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c18, ctx_r15.getDataManagerBandContext(0)));\n  }\n}\n\nfunction FreeformComponent_div_0_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 21, 22);\n    i0.ɵɵlistener(\"dblclick\", function FreeformComponent_div_0_div_6_Template_div_dblclick_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext(2);\n      return ctx_r17.doubleClickHandler($event, 0);\n    });\n    i0.ɵɵtemplate(2, FreeformComponent_div_0_div_6_ng_container_2_Template, 2, 4, \"ng-container\", 10);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleProp(\"height\", ctx_r3.headerHeight, \"px\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r3.headerContainerClass());\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.header);\n  }\n}\n\nfunction FreeformComponent_div_0_ng_container_9_div_1_div_2_ng_template_1_Template(rf, ctx) {}\n\nconst _c19 = function (a0) {\n  return {\n    context: a0\n  };\n};\n\nfunction FreeformComponent_div_0_ng_container_9_div_1_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 31);\n    i0.ɵɵtemplate(1, FreeformComponent_div_0_ng_container_9_div_1_div_2_ng_template_1_Template, 0, 0, \"ng-template\", 23);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r20 = i0.ɵɵnextContext().$implicit;\n    const ctx_r23 = i0.ɵɵnextContext(3);\n    i0.ɵɵstyleProp(\"width\", ctx_r23.RowContainerWidth)(\"height\", ctx_r23.detailsHeight, \"px\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r23.groupHeader)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(6, _c19, ctx_r23.getDataManagerContext(item_r20)));\n  }\n}\n\nfunction FreeformComponent_div_0_ng_container_9_div_1_div_3_ng_template_2_Template(rf, ctx) {}\n\nconst _c20 = function (a0, a1) {\n  return {\n    \"selectedRow\": a0,\n    \"currentRow\": a1\n  };\n};\n\nfunction FreeformComponent_div_0_ng_container_9_div_1_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 32, 33);\n    i0.ɵɵtemplate(2, FreeformComponent_div_0_ng_container_9_div_1_div_3_ng_template_2_Template, 0, 0, \"ng-template\", 23);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r31 = i0.ɵɵnextContext();\n    const i_r21 = ctx_r31.index;\n    const item_r20 = ctx_r31.$implicit;\n    const ctx_r24 = i0.ɵɵnextContext(3);\n    i0.ɵɵstyleProp(\"width\", ctx_r24.RowContainerWidth)(\"height\", ctx_r24.detailsHeight, \"px\");\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(7, _c20, ctx_r24.isSelected(i_r21), ctx_r24.isCurrentRow(i_r21)));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r24.details)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(10, _c19, ctx_r24.getDataManagerContext(item_r20)));\n  }\n}\n\nfunction FreeformComponent_div_0_ng_container_9_div_1_div_4_ng_template_2_Template(rf, ctx) {}\n\nfunction FreeformComponent_div_0_ng_container_9_div_1_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 34, 33);\n    i0.ɵɵtemplate(2, FreeformComponent_div_0_ng_container_9_div_1_div_4_ng_template_2_Template, 0, 0, \"ng-template\", 23);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r34 = i0.ɵɵnextContext();\n    const i_r21 = ctx_r34.index;\n    const item_r20 = ctx_r34.$implicit;\n    const ctx_r25 = i0.ɵɵnextContext(3);\n    i0.ɵɵstyleProp(\"width\", ctx_r25.RowContainerWidth)(\"height\", ctx_r25.detailsHeight, \"px\");\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(8, _c20, ctx_r25.isSelected(i_r21), ctx_r25.isCurrentRow(i_r21)))(\"dropData\", ctx_r25.getDataManagerContext(item_r20));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r25.details)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(11, _c19, ctx_r25.getDataManagerContext(item_r20)));\n  }\n}\n\nfunction FreeformComponent_div_0_ng_container_9_div_1_div_5_ng_template_1_Template(rf, ctx) {}\n\nfunction FreeformComponent_div_0_ng_container_9_div_1_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 35);\n    i0.ɵɵtemplate(1, FreeformComponent_div_0_ng_container_9_div_1_div_5_ng_template_1_Template, 0, 0, \"ng-template\", 23);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r20 = i0.ɵɵnextContext().$implicit;\n    const ctx_r26 = i0.ɵɵnextContext(3);\n    i0.ɵɵstyleProp(\"width\", ctx_r26.RowContainerWidth)(\"height\", ctx_r26.detailsHeight, \"px\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r26.groupTrailer)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(6, _c19, ctx_r26.getDataManagerContext(item_r20)));\n  }\n}\n\nfunction FreeformComponent_div_0_ng_container_9_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r38 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 25, 26);\n    i0.ɵɵlistener(\"drop\", function FreeformComponent_div_0_ng_container_9_div_1_Template_div_drop_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r38);\n      const item_r20 = restoredCtx.$implicit;\n      const ctx_r37 = i0.ɵɵnextContext(3);\n      return ctx_r37.dropEvent($event, ctx_r37.getDataManagerContext(item_r20));\n    })(\"contextmenu\", function FreeformComponent_div_0_ng_container_9_div_1_Template_div_contextmenu_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r38);\n      const item_r20 = restoredCtx.$implicit;\n      const ctx_r39 = i0.ɵɵnextContext(3);\n      return ctx_r39.onRightClick($event, ctx_r39.getDataManagerContext(item_r20));\n    })(\"click\", function FreeformComponent_div_0_ng_container_9_div_1_Template_div_click_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r38);\n      const item_r20 = restoredCtx.$implicit;\n      const ctx_r40 = i0.ɵɵnextContext(3);\n      return ctx_r40.itemClick($event, item_r20, ctx_r40.getDataManagerContext(item_r20));\n    })(\"keydown\", function FreeformComponent_div_0_ng_container_9_div_1_Template_div_keydown_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r38);\n      const item_r20 = restoredCtx.$implicit;\n\n      const _r22 = i0.ɵɵreference(1);\n\n      const ctx_r41 = i0.ɵɵnextContext(3);\n      return ctx_r41.keyDownHandler($event, _r22, item_r20, ctx_r41.getDataManagerContext(item_r20));\n    })(\"focus\", function FreeformComponent_div_0_ng_container_9_div_1_Template_div_focus_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r38);\n      const item_r20 = restoredCtx.$implicit;\n      const ctx_r42 = i0.ɵɵnextContext(3);\n      return ctx_r42.divFocusHandler($event, ctx_r42.getDataManagerContext(item_r20));\n    });\n    i0.ɵɵtemplate(2, FreeformComponent_div_0_ng_container_9_div_1_div_2_Template, 2, 8, \"div\", 27);\n    i0.ɵɵtemplate(3, FreeformComponent_div_0_ng_container_9_div_1_div_3_Template, 3, 12, \"div\", 28);\n    i0.ɵɵtemplate(4, FreeformComponent_div_0_ng_container_9_div_1_div_4_Template, 3, 13, \"div\", 29);\n    i0.ɵɵtemplate(5, FreeformComponent_div_0_ng_container_9_div_1_div_5_Template, 2, 8, \"div\", 30);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r20 = ctx.$implicit;\n    const i_r21 = ctx.index;\n    const ctx_r19 = i0.ɵɵnextContext(3);\n    i0.ɵɵstyleProp(\"width\", ctx_r19.RowContainerWidth)(\"height\", ctx_r19.getDetailsHeight(item_r20), \"px\");\n    i0.ɵɵproperty(\"tabindex\", i_r21);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r19.shouldDisplayGroupHeader(item_r20));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r19.dragHandler(item_r20));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r19.dragHandler(item_r20));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r19.shouldDisplayGroupTrailer(item_r20));\n  }\n}\n\nfunction FreeformComponent_div_0_ng_container_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, FreeformComponent_div_0_ng_container_9_div_1_Template, 6, 9, \"div\", 24);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r5.currentVisibleRows)(\"ngForTrackBy\", ctx_r5.trackByFn);\n  }\n}\n\nfunction FreeformComponent_div_0_div_10_ng_container_1_ng_template_1_Template(rf, ctx) {}\n\nconst _c21 = function (a0) {\n  return {\n    contextSummary: a0\n  };\n};\n\nfunction FreeformComponent_div_0_div_10_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, FreeformComponent_div_0_div_10_ng_container_1_ng_template_1_Template, 0, 0, \"ng-template\", 23);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r43 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r43.summary)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c21, ctx_r43.getDataManagerBandContext(ctx_r43.lastVisibleRow)));\n  }\n}\n\nfunction FreeformComponent_div_0_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r46 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 36);\n    i0.ɵɵlistener(\"dblclick\", function FreeformComponent_div_0_div_10_Template_div_dblclick_0_listener($event) {\n      i0.ɵɵrestoreView(_r46);\n      const ctx_r45 = i0.ɵɵnextContext(2);\n      return ctx_r45.doubleClickHandler($event, 0);\n    });\n    i0.ɵɵtemplate(1, FreeformComponent_div_0_div_10_ng_container_1_Template, 2, 4, \"ng-container\", 10);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.summary);\n  }\n}\n\nfunction FreeformComponent_div_0_ng_container_12_ng_template_1_Template(rf, ctx) {}\n\nconst _c22 = function (a0) {\n  return {\n    contextFooter: a0\n  };\n};\n\nfunction FreeformComponent_div_0_ng_container_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, FreeformComponent_div_0_ng_container_12_ng_template_1_Template, 0, 0, \"ng-template\", 23);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r7.footer)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c22, ctx_r7.getDataManagerBandContext(ctx_r7.lastVisibleRow)));\n  }\n}\n\nfunction FreeformComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r49 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵlistener(\"dblclick\", function FreeformComponent_div_0_Template_div_dblclick_0_listener($event) {\n      i0.ɵɵrestoreView(_r49);\n      const ctx_r48 = i0.ɵɵnextContext();\n      return ctx_r48.doubleClickHandler($event);\n    })(\"click\", function FreeformComponent_div_0_Template_div_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r49);\n      const ctx_r50 = i0.ɵɵnextContext();\n      return ctx_r50.clickDMEventHandler($event);\n    })(\"focus\", function FreeformComponent_div_0_Template_div_focus_0_listener($event) {\n      i0.ɵɵrestoreView(_r49);\n      const ctx_r51 = i0.ɵɵnextContext();\n      return ctx_r51.focusDMEventHandler($event);\n    });\n    i0.ɵɵtemplate(1, FreeformComponent_div_0_wm_pager_1_Template, 1, 2, \"wm-pager\", 2);\n    i0.ɵɵelementStart(2, \"div\", 3)(3, \"div\", 4, 5);\n    i0.ɵɵlistener(\"contextmenu\", function FreeformComponent_div_0_Template_div_contextmenu_3_listener($event) {\n      i0.ɵɵrestoreView(_r49);\n      const ctx_r52 = i0.ɵɵnextContext();\n      return ctx_r52.onRightClick($event, null);\n    });\n    i0.ɵɵelementStart(5, \"div\", 6);\n    i0.ɵɵtemplate(6, FreeformComponent_div_0_div_6_Template, 3, 4, \"div\", 7);\n    i0.ɵɵelementStart(7, \"div\", 8, 9);\n    i0.ɵɵtemplate(9, FreeformComponent_div_0_ng_container_9_Template, 2, 2, \"ng-container\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(10, FreeformComponent_div_0_div_10_Template, 2, 1, \"div\", 11);\n    i0.ɵɵelementStart(11, \"div\", 12);\n    i0.ɵɵlistener(\"dblclick\", function FreeformComponent_div_0_Template_div_dblclick_11_listener($event) {\n      i0.ɵɵrestoreView(_r49);\n      const ctx_r53 = i0.ɵɵnextContext();\n      return ctx_r53.doubleClickHandler($event, 0);\n    });\n    i0.ɵɵtemplate(12, FreeformComponent_div_0_ng_container_12_Template, 2, 4, \"ng-container\", 10);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(13, \"wm-busyloader\", 13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"div\", 14);\n    i0.ɵɵlistener(\"dblclick\", function FreeformComponent_div_0_Template_div_dblclick_14_listener($event) {\n      i0.ɵɵrestoreView(_r49);\n      const ctx_r54 = i0.ɵɵnextContext();\n      return ctx_r54.scrollDoubleClickHandler($event);\n    });\n    i0.ɵɵelementStart(15, \"wm-dw-press-button\", 15);\n    i0.ɵɵlistener(\"press\", function FreeformComponent_div_0_Template_wm_dw_press_button_press_15_listener($event) {\n      i0.ɵɵrestoreView(_r49);\n      const ctx_r55 = i0.ɵɵnextContext();\n      return ctx_r55.scrollHandler($event, -1);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"div\", 16, 17);\n    i0.ɵɵelement(18, \"div\", 18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"wm-dw-press-button\", 19);\n    i0.ɵɵlistener(\"press\", function FreeformComponent_div_0_Template_wm_dw_press_button_press_19_listener($event) {\n      i0.ɵɵrestoreView(_r49);\n      const ctx_r56 = i0.ɵɵnextContext();\n      return ctx_r56.scrollHandler($event, 1);\n    });\n    i0.ɵɵelementEnd()()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.class)(\"tabindex\", 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.usePager);\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"background\", ctx_r0.color)(\"width\", ctx_r0.obtainVisibleValue(\"dmViewWidth\", \"W\"))(\"height\", ctx_r0.dmViewHeight);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.dmView());\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"min-width\", ctx_r0.dmViewWidth, \"px\")(\"height\", 100, \"%\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.headerHeight > 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"max-height\", ctx_r0.obtainVisibleValue(\"detailsContainerHeight\"));\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.detailsContainerClass());\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.details);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.showSummary);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"height\", ctx_r0.footerHeight, \"px\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.footer);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"model\", ctx_r0.showBusyLoader);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"height\", ctx_r0.dmViewHeight);\n    i0.ɵɵproperty(\"hidden\", !ctx_r0.recordScrollbar);\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"height\", ctx_r0.dmViewHeight);\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"height\", ctx_r0.scrollHeight, \"px\");\n  }\n}\n\nconst _c23 = [\"dMControl\"];\nconst _c24 = [\"errorTemplate\"];\nconst _c25 = [\"anchor\"];\nconst _c26 = [\"default\"];\n\nfunction DataWindowErrorComponent_kendo_dialog_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-dialog\", 1);\n    i0.ɵɵlistener(\"close\", function DataWindowErrorComponent_kendo_dialog_0_Template_kendo_dialog_close_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.close($event);\n    });\n    i0.ɵɵelementStart(1, \"p\", 2)(2, \"i\", 3);\n    i0.ɵɵtext(3, \"report_problem\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"kendo-dialog-actions\")(6, \"button\", 4, 5);\n    i0.ɵɵlistener(\"keydown.tab\", function DataWindowErrorComponent_kendo_dialog_0_Template_button_keydown_tab_6_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.avoidInteraction($event);\n    })(\"keydown.shift.tab\", function DataWindowErrorComponent_kendo_dialog_0_Template_button_keydown_shift_tab_6_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.avoidInteraction($event);\n    })(\"blur\", function DataWindowErrorComponent_kendo_dialog_0_Template_button_blur_6_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.avoidInteraction($event);\n    })(\"click\", function DataWindowErrorComponent_kendo_dialog_0_Template_button_click_6_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.close($event);\n    });\n    i0.ɵɵtext(8, \"ok\");\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"title\", ctx_r0.title)(\"minWidth\", 250)(\"width\", 350);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.message, \" \");\n  }\n}\n\nconst _c27 = [\"noRecords\"];\nconst _c28 = [\"headerColumn\"];\nconst _c29 = [\"footerColumn\"];\n\nfunction WMGridComponent_div_0_div_1_ng_template_2_Template(rf, ctx) {}\n\nfunction WMGridComponent_div_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵelementContainerStart(1);\n    i0.ɵɵtemplate(2, WMGridComponent_div_0_div_1_ng_template_2_Template, 0, 0, \"ng-template\", 8);\n    i0.ɵɵelementContainerEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleProp(\"height\", ctx_r1.headerHeight, \"px\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.header)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(4, _c18, ctx_r1.getDataManagerBandContext(0)));\n  }\n}\n\nfunction WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_2_ng_container_2_ng_template_3_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r26 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 27);\n    i0.ɵɵlistener(\"click\", function WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_2_ng_container_2_ng_template_3_div_3_Template_div_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r26);\n      const ctx_r25 = i0.ɵɵnextContext(7);\n      return ctx_r25.clickDMEventHandler($event);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const col_r16 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", col_r16.Header.Text, \" \");\n  }\n}\n\nfunction WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_2_ng_container_2_ng_template_3_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, 8);\n  }\n\n  if (rf & 2) {\n    const col_r16 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r24 = i0.ɵɵnextContext(5);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r24.getHeaderTemplate(col_r16.Header))(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c19, ctx_r24.getDataManagerBandContext(0)));\n  }\n}\n\nfunction WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_2_ng_container_2_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r30 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 22, 23);\n    i0.ɵɵlistener(\"drop\", function WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_2_ng_container_2_ng_template_3_Template_div_drop_0_listener($event) {\n      i0.ɵɵrestoreView(_r30);\n\n      const _r22 = i0.ɵɵreference(1);\n\n      const ctx_r29 = i0.ɵɵnextContext(6);\n      return ctx_r29.dropColumn($event, _r22);\n    });\n    i0.ɵɵelementStart(2, \"div\", 24);\n    i0.ɵɵtemplate(3, WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_2_ng_container_2_ng_template_3_div_3_Template, 2, 1, \"div\", 25);\n    i0.ɵɵtemplate(4, WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_2_ng_container_2_ng_template_3_ng_container_4_Template, 1, 4, \"ng-container\", 26);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const col_r16 = i0.ɵɵnextContext().$implicit;\n\n    const _r17 = i0.ɵɵreference(2);\n\n    const ctx_r18 = i0.ɵɵnextContext(5);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"dropData\", _r17);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r18.getHeaderTemplate(col_r16.Header));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r18.getHeaderTemplate(col_r16.Header));\n  }\n}\n\nfunction WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_2_ng_container_2_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, 8);\n  }\n\n  if (rf & 2) {\n    const rowIndex_r32 = ctx.rowIndex;\n    const col_r16 = i0.ɵɵnextContext().$implicit;\n    const ctx_r19 = i0.ɵɵnextContext(5);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r19.getColumnTemplate(col_r16.Details))(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c19, ctx_r19.getDataManagerContext(ctx_r19.getRowObject(rowIndex_r32))));\n  }\n}\n\nfunction WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_2_ng_container_2_5_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, 8);\n  }\n\n  if (rf & 2) {\n    const col_r16 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r37 = i0.ɵɵnextContext(5);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r37.getFooterTemplate(col_r16.Details))(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c19, ctx_r37.getDataManagerBandContext(ctx_r37.lastVisibleRow)));\n  }\n}\n\nfunction WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_2_ng_container_2_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_2_ng_container_2_5_ng_template_0_Template, 1, 4, \"ng-template\", 28);\n  }\n}\n\nfunction WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_2_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"kendo-grid-column\", 18, 19);\n    i0.ɵɵtemplate(3, WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_2_ng_container_2_ng_template_3_Template, 5, 3, \"ng-template\", 20);\n    i0.ɵɵtemplate(4, WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_2_ng_container_2_ng_template_4_Template, 1, 4, \"ng-template\", 21);\n    i0.ɵɵtemplate(5, WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_2_ng_container_2_5_Template, 1, 0, null, 3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const col_r16 = ctx.$implicit;\n    const ctx_r14 = i0.ɵɵnextContext(5);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleMap(ctx_r14.getBackgroundColor());\n    i0.ɵɵpropertyInterpolate(\"field\", col_r16.Details.Name);\n    i0.ɵɵpropertyInterpolate(\"title\", col_r16.Header.Text);\n    i0.ɵɵproperty(\"width\", ctx_r14.getColumnWidth(col_r16))(\"headerStyle\", col_r16.Header.HeaderStyle);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r14.footerTemplates.length > 0);\n  }\n}\n\nfunction WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_2_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, 29);\n  }\n\n  if (rf & 2) {\n    const ctx_r15 = i0.ɵɵnextContext(5);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r15.noRecords);\n  }\n}\n\nfunction WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r42 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-grid\", 14, 15);\n    i0.ɵɵlistener(\"pageChange\", function WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_2_Template_kendo_grid_pageChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r42);\n      const ctx_r41 = i0.ɵɵnextContext(4);\n      return ctx_r41.pageChange($event);\n    })(\"cellClick\", function WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_2_Template_kendo_grid_cellClick_0_listener($event) {\n      i0.ɵɵrestoreView(_r42);\n      const ctx_r43 = i0.ɵɵnextContext(4);\n      return ctx_r43.clickHandler($event);\n    })(\"contextmenu\", function WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_2_Template_kendo_grid_contextmenu_0_listener($event) {\n      i0.ɵɵrestoreView(_r42);\n      const ctx_r44 = i0.ɵɵnextContext(4);\n      return ctx_r44.contextMenuHandler($event);\n    })(\"cellClose\", function WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_2_Template_kendo_grid_cellClose_0_listener($event) {\n      i0.ɵɵrestoreView(_r42);\n      const ctx_r45 = i0.ɵɵnextContext(4);\n      return ctx_r45.cellCloseHandler($event);\n    })(\"selectionChange\", function WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_2_Template_kendo_grid_selectionChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r42);\n      const ctx_r46 = i0.ɵɵnextContext(4);\n      return ctx_r46.selectionChangeHandler($event);\n    })(\"keydown\", function WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_2_Template_kendo_grid_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r42);\n      const ctx_r47 = i0.ɵɵnextContext(4);\n      return ctx_r47.keyDownHandler($event);\n    });\n    i0.ɵɵtemplate(2, WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_2_ng_container_2_Template, 6, 7, \"ng-container\", 16);\n    i0.ɵɵtemplate(3, WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_2_ng_template_3_Template, 1, 1, \"ng-template\", 17);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext(4);\n    i0.ɵɵstyleProp(\"max-height\", ctx_r10.dmViewHeight, \"px\");\n    i0.ɵɵproperty(\"navigable\", true)(\"hostComponent\", ctx_r10)(\"data\", ctx_r10.gridView)(\"selectable\", ctx_r10.selectableSettings)(\"ngClass\", ctx_r10.class)(\"reorderable\", true)(\"skip\", ctx_r10.skip)(\"pageSize\", ctx_r10.pageSize)(\"pageable\", ctx_r10.pagerSettings)(\"resizable\", true)(\"loading\", ctx_r10.showBusyLoader)(\"scrollable\", ctx_r10.scrollable)(\"height\", ctx_r10.dmViewHeight)(\"selectedKeys\", ctx_r10.selectedKeys);\n    i0.ɵɵattribute(\"disabled\", ctx_r10.disabled);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r10.columns);\n  }\n}\n\nfunction WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_3_ng_container_2_ng_template_3_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r61 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 27);\n    i0.ɵɵlistener(\"click\", function WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_3_ng_container_2_ng_template_3_div_3_Template_div_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r61);\n      const ctx_r60 = i0.ɵɵnextContext(7);\n      return ctx_r60.clickDMEventHandler($event);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const col_r51 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", col_r51.Header.Text, \" \");\n  }\n}\n\nfunction WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_3_ng_container_2_ng_template_3_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, 8);\n  }\n\n  if (rf & 2) {\n    const col_r51 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r59 = i0.ɵɵnextContext(5);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r59.getHeaderTemplate(col_r51.Header))(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c19, ctx_r59.getDataManagerBandContext(0)));\n  }\n}\n\nfunction WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_3_ng_container_2_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r65 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 22, 23);\n    i0.ɵɵlistener(\"drop\", function WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_3_ng_container_2_ng_template_3_Template_div_drop_0_listener($event) {\n      i0.ɵɵrestoreView(_r65);\n\n      const _r57 = i0.ɵɵreference(1);\n\n      const ctx_r64 = i0.ɵɵnextContext(6);\n      return ctx_r64.dropColumn($event, _r57);\n    });\n    i0.ɵɵelementStart(2, \"div\", 24);\n    i0.ɵɵtemplate(3, WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_3_ng_container_2_ng_template_3_div_3_Template, 2, 1, \"div\", 25);\n    i0.ɵɵtemplate(4, WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_3_ng_container_2_ng_template_3_ng_container_4_Template, 1, 4, \"ng-container\", 26);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const col_r51 = i0.ɵɵnextContext().$implicit;\n\n    const _r52 = i0.ɵɵreference(2);\n\n    const ctx_r53 = i0.ɵɵnextContext(5);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"dropData\", _r52);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r53.getHeaderTemplate(col_r51.Header));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r53.getHeaderTemplate(col_r51.Header));\n  }\n}\n\nfunction WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_3_ng_container_2_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, 8);\n  }\n\n  if (rf & 2) {\n    const rowIndex_r67 = ctx.rowIndex;\n    const col_r51 = i0.ɵɵnextContext().$implicit;\n    const ctx_r54 = i0.ɵɵnextContext(5);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r54.getColumnTemplate(col_r51.Details))(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c19, ctx_r54.getDataManagerContext(ctx_r54.getRowObject(rowIndex_r67))));\n  }\n}\n\nfunction WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_3_ng_container_2_5_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, 8);\n  }\n\n  if (rf & 2) {\n    const col_r51 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r72 = i0.ɵɵnextContext(5);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r72.getFooterTemplate(col_r51.Details))(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c19, ctx_r72.getDataManagerBandContext(ctx_r72.lastVisibleRow)));\n  }\n}\n\nfunction WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_3_ng_container_2_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_3_ng_container_2_5_ng_template_0_Template, 1, 4, \"ng-template\", 28);\n  }\n}\n\nfunction WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_3_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"kendo-grid-column\", 18, 19);\n    i0.ɵɵtemplate(3, WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_3_ng_container_2_ng_template_3_Template, 5, 3, \"ng-template\", 20);\n    i0.ɵɵtemplate(4, WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_3_ng_container_2_ng_template_4_Template, 1, 4, \"ng-template\", 21);\n    i0.ɵɵtemplate(5, WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_3_ng_container_2_5_Template, 1, 0, null, 3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const col_r51 = ctx.$implicit;\n    const ctx_r49 = i0.ɵɵnextContext(5);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleMap(ctx_r49.getBackgroundColor());\n    i0.ɵɵpropertyInterpolate(\"field\", col_r51.Details.Name);\n    i0.ɵɵpropertyInterpolate(\"title\", col_r51.Header.Text);\n    i0.ɵɵproperty(\"width\", ctx_r49.getColumnWidth(col_r51))(\"headerStyle\", col_r51.Header.HeaderStyle);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r49.footerTemplates.length > 0);\n  }\n}\n\nfunction WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_3_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r77 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 31);\n    i0.ɵɵlistener(\"click\", function WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_3_ng_template_3_Template_div_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r77);\n      const ctx_r76 = i0.ɵɵnextContext(5);\n      return ctx_r76.clickDMEventHandler($event);\n    });\n    i0.ɵɵelementContainer(1, 29);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r50 = i0.ɵɵnextContext(5);\n    i0.ɵɵstyleProp(\"height\", ctx_r50.dmViewHeight, \"px\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r50.noRecords);\n  }\n}\n\nfunction WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r79 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-grid\", 30, 15);\n    i0.ɵɵlistener(\"pageChange\", function WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_3_Template_kendo_grid_pageChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r79);\n      const ctx_r78 = i0.ɵɵnextContext(4);\n      return ctx_r78.pageChange($event);\n    })(\"contextmenu\", function WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_3_Template_kendo_grid_contextmenu_0_listener($event) {\n      i0.ɵɵrestoreView(_r79);\n      const ctx_r80 = i0.ɵɵnextContext(4);\n      return ctx_r80.contextMenuHandler($event);\n    })(\"cellClose\", function WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_3_Template_kendo_grid_cellClose_0_listener($event) {\n      i0.ɵɵrestoreView(_r79);\n      const ctx_r81 = i0.ɵɵnextContext(4);\n      return ctx_r81.cellCloseHandler($event);\n    })(\"keydown\", function WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_3_Template_kendo_grid_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r79);\n      const ctx_r82 = i0.ɵɵnextContext(4);\n      return ctx_r82.keyDownHandler($event);\n    });\n    i0.ɵɵtemplate(2, WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_3_ng_container_2_Template, 6, 7, \"ng-container\", 16);\n    i0.ɵɵtemplate(3, WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_3_ng_template_3_Template, 2, 3, \"ng-template\", 17);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext(4);\n    i0.ɵɵstyleProp(\"max-height\", ctx_r11.dmViewHeight, \"px\");\n    i0.ɵɵproperty(\"data\", ctx_r11.gridView)(\"skip\", ctx_r11.skip)(\"pageSize\", ctx_r11.pageSize)(\"scrollable\", ctx_r11.scrollable)(\"rowHeight\", ctx_r11.detailsHeight)(\"height\", ctx_r11.dmViewHeight)(\"navigable\", true)(\"ngClass\", ctx_r11.class)(\"hostComponent\", ctx_r11)(\"selectable\", ctx_r11.selectableSettings)(\"reorderable\", true)(\"resizable\", true)(\"selectedKeys\", ctx_r11.selectedKeys)(\"pageable\", ctx_r11.pagerSettings);\n    i0.ɵɵattribute(\"disabled\", ctx_r11.disabled);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r11.columns);\n  }\n}\n\nfunction WMGridComponent_div_0_ng_container_2_div_1_wm_busyloader_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"wm-busyloader\", 32);\n  }\n\n  if (rf & 2) {\n    const ctx_r12 = i0.ɵɵnextContext(4);\n    i0.ɵɵproperty(\"model\", ctx_r12.showBusyLoader);\n  }\n}\n\nfunction WMGridComponent_div_0_ng_container_2_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9, 10);\n    i0.ɵɵtemplate(2, WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_2_Template, 4, 18, \"kendo-grid\", 11);\n    i0.ɵɵtemplate(3, WMGridComponent_div_0_ng_container_2_div_1_kendo_grid_3_Template, 4, 18, \"kendo-grid\", 12);\n    i0.ɵɵtemplate(4, WMGridComponent_div_0_ng_container_2_div_1_wm_busyloader_4_Template, 1, 1, \"wm-busyloader\", 13);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(3);\n    i0.ɵɵstyleProp(\"height\", ctx_r8.dmViewHeight, \"px\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r8.scrollable != \"virtual\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r8.scrollable === \"virtual\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r8.scrollable === \"virtual\");\n  }\n}\n\nfunction WMGridComponent_div_0_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, WMGridComponent_div_0_ng_container_2_div_1_Template, 5, 5, \"div\", 4);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.columnsTemplates && ctx_r2.columnsTemplates.length > 0);\n  }\n}\n\nfunction WMGridComponent_div_0_ng_container_3_div_1_ng_container_4_ng_template_3_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r97 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 27);\n    i0.ɵɵlistener(\"click\", function WMGridComponent_div_0_ng_container_3_div_1_ng_container_4_ng_template_3_div_3_Template_div_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r97);\n      const ctx_r96 = i0.ɵɵnextContext(6);\n      return ctx_r96.clickDMEventHandler($event);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const col_r88 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", col_r88.Header.Text, \" \");\n  }\n}\n\nfunction WMGridComponent_div_0_ng_container_3_div_1_ng_container_4_ng_template_3_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, 8);\n  }\n\n  if (rf & 2) {\n    const col_r88 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r95 = i0.ɵɵnextContext(4);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r95.getHeaderTemplate(col_r88.Header))(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c19, ctx_r95.getDataManagerBandContext(0)));\n  }\n}\n\nfunction WMGridComponent_div_0_ng_container_3_div_1_ng_container_4_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r101 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 22, 23);\n    i0.ɵɵlistener(\"drop\", function WMGridComponent_div_0_ng_container_3_div_1_ng_container_4_ng_template_3_Template_div_drop_0_listener($event) {\n      i0.ɵɵrestoreView(_r101);\n\n      const _r93 = i0.ɵɵreference(1);\n\n      const ctx_r100 = i0.ɵɵnextContext(5);\n      return ctx_r100.dropColumn($event, _r93);\n    });\n    i0.ɵɵelementStart(2, \"div\", 24);\n    i0.ɵɵtemplate(3, WMGridComponent_div_0_ng_container_3_div_1_ng_container_4_ng_template_3_div_3_Template, 2, 1, \"div\", 25);\n    i0.ɵɵtemplate(4, WMGridComponent_div_0_ng_container_3_div_1_ng_container_4_ng_template_3_ng_container_4_Template, 1, 4, \"ng-container\", 26);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const col_r88 = i0.ɵɵnextContext().$implicit;\n\n    const _r89 = i0.ɵɵreference(2);\n\n    const ctx_r90 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"dropData\", _r89);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r90.getHeaderTemplate(col_r88.Header));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r90.getHeaderTemplate(col_r88.Header));\n  }\n}\n\nfunction WMGridComponent_div_0_ng_container_3_div_1_ng_container_4_ng_template_4_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r110 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 35);\n    i0.ɵɵlistener(\"mousedown\", function WMGridComponent_div_0_ng_container_3_div_1_ng_container_4_ng_template_4_div_0_Template_div_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r110);\n      const rowIndex_r103 = i0.ɵɵnextContext().rowIndex;\n      const ctx_r108 = i0.ɵɵnextContext(5);\n      return ctx_r108.itemClick($event, ctx_r108.getRowOriginalObject(rowIndex_r103), ctx_r108.getDataManagerContext(ctx_r108.getRowOriginalObject(rowIndex_r103)));\n    });\n    i0.ɵɵelementContainer(1, 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r111 = i0.ɵɵnextContext();\n    const rowIndex_r103 = ctx_r111.rowIndex;\n    const columnIndex_r105 = ctx_r111.columnIndex;\n    const col_r88 = i0.ɵɵnextContext().$implicit;\n    const ctx_r107 = i0.ɵɵnextContext(4);\n    i0.ɵɵproperty(\"id\", \"cell\" + rowIndex_r103 + \"_\" + columnIndex_r105);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r107.getColumnTemplate(col_r88.Details))(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(3, _c19, ctx_r107.getDataManagerContext(ctx_r107.getRowObject(rowIndex_r103))));\n  }\n}\n\nfunction WMGridComponent_div_0_ng_container_3_div_1_ng_container_4_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, WMGridComponent_div_0_ng_container_3_div_1_ng_container_4_ng_template_4_div_0_Template, 2, 5, \"div\", 34);\n  }\n\n  if (rf & 2) {\n    const ctx_r91 = i0.ɵɵnextContext(5);\n    i0.ɵɵproperty(\"ngIf\", ctx_r91.isDropDownDataWindow());\n  }\n}\n\nfunction WMGridComponent_div_0_ng_container_3_div_1_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"kendo-grid-column\", 18, 19);\n    i0.ɵɵtemplate(3, WMGridComponent_div_0_ng_container_3_div_1_ng_container_4_ng_template_3_Template, 5, 3, \"ng-template\", 20);\n    i0.ɵɵtemplate(4, WMGridComponent_div_0_ng_container_3_div_1_ng_container_4_ng_template_4_Template, 1, 1, \"ng-template\", 21);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const col_r88 = ctx.$implicit;\n    const ctx_r86 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleMap(ctx_r86.getBackgroundColor());\n    i0.ɵɵpropertyInterpolate(\"field\", col_r88.Details.Name);\n    i0.ɵɵpropertyInterpolate(\"title\", col_r88.Header.Text);\n    i0.ɵɵproperty(\"width\", ctx_r86.getColumnWidth(col_r88))(\"headerStyle\", col_r88.Header.HeaderStyle);\n  }\n}\n\nfunction WMGridComponent_div_0_ng_container_3_div_1_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, 29);\n  }\n\n  if (rf & 2) {\n    const ctx_r87 = i0.ɵɵnextContext(4);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r87.noRecords);\n  }\n}\n\nfunction WMGridComponent_div_0_ng_container_3_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r114 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 9, 10)(2, \"kendo-grid\", 33, 15);\n    i0.ɵɵlistener(\"pageChange\", function WMGridComponent_div_0_ng_container_3_div_1_Template_kendo_grid_pageChange_2_listener($event) {\n      i0.ɵɵrestoreView(_r114);\n      const ctx_r113 = i0.ɵɵnextContext(3);\n      return ctx_r113.pageChange($event);\n    })(\"cellClick\", function WMGridComponent_div_0_ng_container_3_div_1_Template_kendo_grid_cellClick_2_listener($event) {\n      i0.ɵɵrestoreView(_r114);\n      const ctx_r115 = i0.ɵɵnextContext(3);\n      return ctx_r115.clickHandler($event);\n    })(\"cellClose\", function WMGridComponent_div_0_ng_container_3_div_1_Template_kendo_grid_cellClose_2_listener($event) {\n      i0.ɵɵrestoreView(_r114);\n      const ctx_r116 = i0.ɵɵnextContext(3);\n      return ctx_r116.cellCloseHandler($event);\n    })(\"selectionChange\", function WMGridComponent_div_0_ng_container_3_div_1_Template_kendo_grid_selectionChange_2_listener($event) {\n      i0.ɵɵrestoreView(_r114);\n      const ctx_r117 = i0.ɵɵnextContext(3);\n      return ctx_r117.selectionChangeHandler($event);\n    })(\"keydown\", function WMGridComponent_div_0_ng_container_3_div_1_Template_kendo_grid_keydown_2_listener($event) {\n      i0.ɵɵrestoreView(_r114);\n      const ctx_r118 = i0.ɵɵnextContext(3);\n      return ctx_r118.keyDownHandler($event);\n    });\n    i0.ɵɵtemplate(4, WMGridComponent_div_0_ng_container_3_div_1_ng_container_4_Template, 5, 6, \"ng-container\", 16);\n    i0.ɵɵtemplate(5, WMGridComponent_div_0_ng_container_3_div_1_ng_template_5_Template, 1, 1, \"ng-template\", 17);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r83 = i0.ɵɵnextContext(3);\n    i0.ɵɵstyleProp(\"height\", ctx_r83.dmViewHeight, \"px\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"max-height\", ctx_r83.dmViewHeight, \"px\");\n    i0.ɵɵproperty(\"navigable\", true)(\"hostComponent\", ctx_r83)(\"data\", ctx_r83.gridView)(\"selectable\", ctx_r83.selectableSettings)(\"ngClass\", ctx_r83.class)(\"reorderable\", true)(\"skip\", ctx_r83.skip)(\"pageSize\", ctx_r83.pageSize)(\"pageable\", ctx_r83.pagerSettings)(\"resizable\", true)(\"loading\", ctx_r83.showBusyLoader)(\"rowSelected\", ctx_r83.DDDWSelection())(\"scrollable\", ctx_r83.scrollable)(\"height\", ctx_r83.dmViewHeight)(\"selectedKeys\", ctx_r83.selectedKeys);\n    i0.ɵɵattribute(\"disabled\", ctx_r83.disabled);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r83.columns);\n  }\n}\n\nfunction WMGridComponent_div_0_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, WMGridComponent_div_0_ng_container_3_div_1_Template, 6, 21, \"div\", 4);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.columnsTemplates && ctx_r3.columnsTemplates.length > 0);\n  }\n}\n\nfunction WMGridComponent_div_0_div_4_ng_container_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"kendo-grid-column\", 37);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const col_r122 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleMap(col_r122.style);\n    i0.ɵɵpropertyInterpolate(\"field\", col_r122.Details.Name);\n    i0.ɵɵpropertyInterpolate(\"title\", col_r122.Header.Text);\n    i0.ɵɵpropertyInterpolate(\"width\", col_r122.width);\n    i0.ɵɵproperty(\"headerStyle\", col_r122.Header.HeaderStyle)(\"editable\", col_r122.editable);\n  }\n}\n\nfunction WMGridComponent_div_0_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r124 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 9, 10)(2, \"kendo-grid\", 36, 15);\n    i0.ɵɵlistener(\"pageChange\", function WMGridComponent_div_0_div_4_Template_kendo_grid_pageChange_2_listener($event) {\n      i0.ɵɵrestoreView(_r124);\n      const ctx_r123 = i0.ɵɵnextContext(2);\n      return ctx_r123.pageChange($event);\n    })(\"cellClick\", function WMGridComponent_div_0_div_4_Template_kendo_grid_cellClick_2_listener($event) {\n      i0.ɵɵrestoreView(_r124);\n      const ctx_r125 = i0.ɵɵnextContext(2);\n      return ctx_r125.clickHandler($event);\n    })(\"cellClose\", function WMGridComponent_div_0_div_4_Template_kendo_grid_cellClose_2_listener($event) {\n      i0.ɵɵrestoreView(_r124);\n      const ctx_r126 = i0.ɵɵnextContext(2);\n      return ctx_r126.cellCloseHandler($event);\n    })(\"selectionChange\", function WMGridComponent_div_0_div_4_Template_kendo_grid_selectionChange_2_listener($event) {\n      i0.ɵɵrestoreView(_r124);\n      const ctx_r127 = i0.ɵɵnextContext(2);\n      return ctx_r127.selectionChangeHandler($event);\n    })(\"keydown\", function WMGridComponent_div_0_div_4_Template_kendo_grid_keydown_2_listener($event) {\n      i0.ɵɵrestoreView(_r124);\n      const ctx_r128 = i0.ɵɵnextContext(2);\n      return ctx_r128.keyDownHandler($event);\n    });\n    i0.ɵɵtemplate(4, WMGridComponent_div_0_div_4_ng_container_4_Template, 2, 7, \"ng-container\", 16);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleProp(\"height\", ctx_r4.detailsContainerHeight, \"px\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"max-height\", ctx_r4.detailsContainerHeight, \"px\");\n    i0.ɵɵproperty(\"navigable\", true)(\"hostComponent\", ctx_r4)(\"data\", ctx_r4.gridView)(\"selectable\", ctx_r4.selectableSettings)(\"reorderable\", true)(\"skip\", ctx_r4.skip)(\"pageSize\", ctx_r4.pageSize)(\"pageable\", ctx_r4.pagerSettings)(\"resizable\", true)(\"rowHeight\", ctx_r4.detailsHeight)(\"height\", ctx_r4.detailsContainerHeight)(\"selectedKeys\", ctx_r4.selectedKeys);\n    i0.ɵɵattribute(\"disabled\", ctx_r4.disabled);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.columns);\n  }\n}\n\nfunction WMGridComponent_div_0_div_5_ng_template_2_Template(rf, ctx) {}\n\nfunction WMGridComponent_div_0_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 38);\n    i0.ɵɵelementContainerStart(1);\n    i0.ɵɵtemplate(2, WMGridComponent_div_0_div_5_ng_template_2_Template, 0, 0, \"ng-template\", 8);\n    i0.ɵɵelementContainerEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r5.summary)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(2, _c21, ctx_r5.getDataManagerBandContext(ctx_r5.lastVisibleRow)));\n  }\n}\n\nfunction WMGridComponent_div_0_div_6_ng_template_2_Template(rf, ctx) {}\n\nfunction WMGridComponent_div_0_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 39);\n    i0.ɵɵelementContainerStart(1);\n    i0.ɵɵtemplate(2, WMGridComponent_div_0_div_6_ng_template_2_Template, 0, 0, \"ng-template\", 8);\n    i0.ɵɵelementContainerEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleProp(\"height\", ctx_r6.footerHeight, \"px\")(\"background-color\", ctx_r6.footerBackColor);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r6.footer)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(6, _c22, ctx_r6.getDataManagerBandContext(ctx_r6.lastVisibleRow)));\n  }\n}\n\nfunction WMGridComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r132 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵlistener(\"dblclick\", function WMGridComponent_div_0_Template_div_dblclick_0_listener($event) {\n      i0.ɵɵrestoreView(_r132);\n      const ctx_r131 = i0.ɵɵnextContext();\n      return ctx_r131.doubleClickHandler($event);\n    })(\"focusin\", function WMGridComponent_div_0_Template_div_focusin_0_listener($event) {\n      i0.ɵɵrestoreView(_r132);\n      const ctx_r133 = i0.ɵɵnextContext();\n      return ctx_r133.focusInHandler($event);\n    });\n    i0.ɵɵtemplate(1, WMGridComponent_div_0_div_1_Template, 3, 6, \"div\", 2);\n    i0.ɵɵtemplate(2, WMGridComponent_div_0_ng_container_2_Template, 2, 1, \"ng-container\", 3);\n    i0.ɵɵtemplate(3, WMGridComponent_div_0_ng_container_3_Template, 2, 1, \"ng-container\", 3);\n    i0.ɵɵtemplate(4, WMGridComponent_div_0_div_4_Template, 5, 18, \"div\", 4);\n    i0.ɵɵtemplate(5, WMGridComponent_div_0_div_5_Template, 3, 4, \"div\", 5);\n    i0.ɵɵtemplate(6, WMGridComponent_div_0_div_6_Template, 3, 8, \"div\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.class);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.header);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.columns && ctx_r0.columns.length > 0 && !ctx_r0.isDropDownDataWindow());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.columns && ctx_r0.columns.length > 0 && ctx_r0.isDropDownDataWindow());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.columnsTemplates && ctx_r0.columnsTemplates.length == 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.summary);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.footer);\n  }\n}\n\nfunction DynamicGridComponent_div_0_kendo_grid_3_ng_container_2_ng_template_3_wm_dynamic_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"wm-dynamic-container\", 19);\n  }\n\n  if (rf & 2) {\n    const col_r6 = i0.ɵɵnextContext(2).$implicit;\n\n    const _r7 = i0.ɵɵreference(2);\n\n    const ctx_r12 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"dropData\", _r7)(\"context\", ctx_r12.getDataManagerBandContext(0))(\"controlModels\", ctx_r12.bandModels.headerModels)(\"controls\", ctx_r12.getControlsElement(col_r6));\n  }\n}\n\nfunction DynamicGridComponent_div_0_kendo_grid_3_ng_container_2_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 16, 17);\n    i0.ɵɵlistener(\"drop\", function DynamicGridComponent_div_0_kendo_grid_3_ng_container_2_ng_template_3_Template_div_drop_0_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n\n      const _r11 = i0.ɵɵreference(1);\n\n      const ctx_r14 = i0.ɵɵnextContext(4);\n      return ctx_r14.dropColumn($event, _r11);\n    });\n    i0.ɵɵtemplate(2, DynamicGridComponent_div_0_kendo_grid_3_ng_container_2_ng_template_3_wm_dynamic_container_2_Template, 1, 4, \"wm-dynamic-container\", 18);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r8.getDataManagerBandContext(0));\n  }\n}\n\nfunction DynamicGridComponent_div_0_kendo_grid_3_ng_container_2_ng_template_4_wm_dynamic_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"wm-dynamic-container\", 21);\n  }\n\n  if (rf & 2) {\n    const rowIndex_r16 = i0.ɵɵnextContext().rowIndex;\n    const col_r6 = i0.ɵɵnextContext().$implicit;\n    const ctx_r20 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"context\", ctx_r20.getDataManagerContext(ctx_r20.getRowObject(rowIndex_r16)))(\"controlModels\", ctx_r20.bandModels.detailsModels)(\"controls\", ctx_r20.getCurrentCellId(ctx_r20.getHeaderProperties(col_r6, \"Name\")));\n  }\n}\n\nfunction DynamicGridComponent_div_0_kendo_grid_3_ng_container_2_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, DynamicGridComponent_div_0_kendo_grid_3_ng_container_2_ng_template_4_wm_dynamic_container_0_Template, 1, 3, \"wm-dynamic-container\", 20);\n  }\n\n  if (rf & 2) {\n    const rowIndex_r16 = ctx.rowIndex;\n    const ctx_r9 = i0.ɵɵnextContext(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r9.getDataManagerContext(ctx_r9.getRowObject(rowIndex_r16)));\n  }\n}\n\nfunction DynamicGridComponent_div_0_kendo_grid_3_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"kendo-grid-column\", 12, 13);\n    i0.ɵɵtemplate(3, DynamicGridComponent_div_0_kendo_grid_3_ng_container_2_ng_template_3_Template, 3, 1, \"ng-template\", 14);\n    i0.ɵɵtemplate(4, DynamicGridComponent_div_0_kendo_grid_3_ng_container_2_ng_template_4_Template, 1, 1, \"ng-template\", 15);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const col_r6 = ctx.$implicit;\n    const ctx_r5 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"field\", ctx_r5.getHeaderProperties(col_r6, \"Name\"));\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r5.getHeaderProperties(col_r6, \"Text\"));\n    i0.ɵɵproperty(\"width\", ctx_r5.getColumnWidth(col_r6))(\"hidden\", ctx_r5.columnHidden(col_r6));\n  }\n}\n\nfunction DynamicGridComponent_div_0_kendo_grid_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-grid\", 9, 10);\n    i0.ɵɵlistener(\"pageChange\", function DynamicGridComponent_div_0_kendo_grid_3_Template_kendo_grid_pageChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return ctx_r23.pageChange($event);\n    })(\"cellClick\", function DynamicGridComponent_div_0_kendo_grid_3_Template_kendo_grid_cellClick_0_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r25 = i0.ɵɵnextContext(2);\n      return ctx_r25.clickHandler($event);\n    })(\"cellClose\", function DynamicGridComponent_div_0_kendo_grid_3_Template_kendo_grid_cellClose_0_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r26 = i0.ɵɵnextContext(2);\n      return ctx_r26.cellCloseHandler($event);\n    })(\"selectionChange\", function DynamicGridComponent_div_0_kendo_grid_3_Template_kendo_grid_selectionChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r27 = i0.ɵɵnextContext(2);\n      return ctx_r27.selectionChangeHandler($event);\n    })(\"keydown\", function DynamicGridComponent_div_0_kendo_grid_3_Template_kendo_grid_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r28 = i0.ɵɵnextContext(2);\n      return ctx_r28.keyDownHandler($event);\n    });\n    i0.ɵɵtemplate(2, DynamicGridComponent_div_0_kendo_grid_3_ng_container_2_Template, 5, 4, \"ng-container\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"navigable\", true)(\"data\", ctx_r2.gridView)(\"hostComponent\", ctx_r2)(\"selectable\", ctx_r2.modifySelectableSettings())(\"ngClass\", ctx_r2.class)(\"reorderable\", true)(\"skip\", ctx_r2.skip)(\"loading\", ctx_r2.showBusyLoader)(\"height\", ctx_r2.detailsContainerHeight)(\"pageSize\", ctx_r2.pageSize)(\"pageable\", ctx_r2.pagerSettings)(\"resizable\", true)(\"scrollable\", \"virtual\")(\"rowHeight\", ctx_r2.detailsHeight)(\"selectedKeys\", ctx_r2.selectedKeys);\n    i0.ɵɵattribute(\"disabled\", ctx_r2.disabled);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.ColumnIds);\n  }\n}\n\nfunction DynamicGridComponent_div_0_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"wm-dynamic-container\", 22);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"controlModels\", ctx_r3.bandModels.summaryModels)(\"context\", ctx_r3.getDataManagerBandContext(ctx_r3.lastVisibleRow))(\"controls\", ctx_r3.bandControls.summaryControls);\n  }\n}\n\nfunction DynamicGridComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2, 3);\n    i0.ɵɵtemplate(3, DynamicGridComponent_div_0_kendo_grid_3_Template, 3, 17, \"kendo-grid\", 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"div\", 5);\n    i0.ɵɵtemplate(5, DynamicGridComponent_div_0_ng_container_5_Template, 2, 3, \"ng-container\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 7);\n    i0.ɵɵelementContainerStart(7);\n    i0.ɵɵelement(8, \"wm-dynamic-container\", 8);\n    i0.ɵɵelementContainerEnd();\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.class);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.containsData());\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.summary);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"height\", ctx_r0.footerHeight, \"px\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"controlModels\", ctx_r0.bandModels.footerModels)(\"context\", ctx_r0.getDataManagerBandContext(ctx_r0.lastVisibleRow))(\"controls\", ctx_r0.bandControls.footerControls);\n  }\n}\n\nfunction DynamicDataManagerComponent_div_0_wm_pager_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"wm-pager\", 18);\n    i0.ɵɵlistener(\"FirstPage\", function DynamicDataManagerComponent_div_0_wm_pager_1_Template_wm_pager_FirstPage_0_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return ctx_r9.moveToFirstVisiblePage();\n    })(\"PreviousPage\", function DynamicDataManagerComponent_div_0_wm_pager_1_Template_wm_pager_PreviousPage_0_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return ctx_r11.moveScrollUp($event);\n    })(\"NextPage\", function DynamicDataManagerComponent_div_0_wm_pager_1_Template_wm_pager_NextPage_0_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return ctx_r12.moveScrollDown($event);\n    })(\"LastPage\", function DynamicDataManagerComponent_div_0_wm_pager_1_Template_wm_pager_LastPage_0_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return ctx_r13.moveToLastVisiblePage();\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"totalPages\", ctx_r2.totalPages)(\"currentPage\", ctx_r2.currentPageIndex(ctx_r2.visiblePageStart));\n  }\n}\n\nfunction DynamicDataManagerComponent_div_0_wm_dynamic_container_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"wm-dynamic-container\", 19);\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"context\", ctx_r3.getDataManagerBandContext(0))(\"controlModels\", ctx_r3.headerModels)(\"controls\", ctx_r3.headerControls);\n  }\n}\n\nconst _c30 = function (a0) {\n  return {\n    \"selectedRow\": a0\n  };\n};\n\nfunction DynamicDataManagerComponent_div_0_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 20, 21);\n    i0.ɵɵlistener(\"click\", function DynamicDataManagerComponent_div_0_div_9_Template_div_click_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const item_r14 = restoredCtx.$implicit;\n      const ctx_r19 = i0.ɵɵnextContext(2);\n      return ctx_r19.itemClick($event, item_r14, ctx_r19.getDataManagerContext(item_r14));\n    })(\"keydown\", function DynamicDataManagerComponent_div_0_div_9_Template_div_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r20);\n\n      const _r16 = i0.ɵɵreference(1);\n\n      const ctx_r21 = i0.ɵɵnextContext(2);\n      return ctx_r21.keyDownHandler($event, _r16);\n    })(\"focus\", function DynamicDataManagerComponent_div_0_div_9_Template_div_focus_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const item_r14 = restoredCtx.$implicit;\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return ctx_r22.divFocusHandler($event, ctx_r22.getDataManagerContext(item_r14));\n    });\n    i0.ɵɵelementStart(2, \"div\", 22, 23);\n    i0.ɵɵlistener(\"contextmenu\", function DynamicDataManagerComponent_div_0_div_9_Template_div_contextmenu_2_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r20);\n      const item_r14 = restoredCtx.$implicit;\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return ctx_r23.onRightClick($event, ctx_r23.getDataManagerContext(item_r14));\n    });\n    i0.ɵɵelement(4, \"wm-dynamic-container\", 24, 9);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const item_r14 = ctx.$implicit;\n    const i_r15 = ctx.index;\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"tabindex\", i_r15);\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"width\", ctx_r5.RowContainerWidth)(\"height\", ctx_r5.detailsHeight, \"px\");\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c30, ctx_r5.isSelected(i_r15)));\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"controlModels\", ctx_r5.detailsModels)(\"context\", ctx_r5.getDataManagerContext(item_r14))(\"controls\", ctx_r5.detailsControls);\n  }\n}\n\nfunction DynamicDataManagerComponent_div_0_div_10_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"wm-dynamic-container\", 26);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r24 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"controlModels\", ctx_r24.summaryModels)(\"context\", ctx_r24.getDataManagerBandContext(ctx_r24.lastVisibleRow))(\"controls\", ctx_r24.summaryControls);\n  }\n}\n\nfunction DynamicDataManagerComponent_div_0_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r26 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 25);\n    i0.ɵɵlistener(\"dblclick\", function DynamicDataManagerComponent_div_0_div_10_Template_div_dblclick_0_listener($event) {\n      i0.ɵɵrestoreView(_r26);\n      const ctx_r25 = i0.ɵɵnextContext(2);\n      return ctx_r25.doubleClickHandler($event, 0);\n    });\n    i0.ɵɵtemplate(1, DynamicDataManagerComponent_div_0_div_10_ng_container_1_Template, 2, 3, \"ng-container\", 13);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.summary);\n  }\n}\n\nfunction DynamicDataManagerComponent_div_0_ng_container_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"wm-dynamic-container\", 27);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"controlModels\", ctx_r7.footerModels)(\"context\", ctx_r7.getDataManagerBandContext(ctx_r7.lastVisibleRow))(\"controls\", ctx_r7.footerControls);\n  }\n}\n\nfunction DynamicDataManagerComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r28 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵlistener(\"dblclick\", function DynamicDataManagerComponent_div_0_Template_div_dblclick_0_listener($event) {\n      i0.ɵɵrestoreView(_r28);\n      const ctx_r27 = i0.ɵɵnextContext();\n      return ctx_r27.doubleClickHandler($event);\n    })(\"click\", function DynamicDataManagerComponent_div_0_Template_div_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r28);\n      const ctx_r29 = i0.ɵɵnextContext();\n      return ctx_r29.clickDMEventHandler($event);\n    })(\"focus\", function DynamicDataManagerComponent_div_0_Template_div_focus_0_listener($event) {\n      i0.ɵɵrestoreView(_r28);\n      const ctx_r30 = i0.ɵɵnextContext();\n      return ctx_r30.focusDMEventHandler($event);\n    });\n    i0.ɵɵtemplate(1, DynamicDataManagerComponent_div_0_wm_pager_1_Template, 1, 2, \"wm-pager\", 3);\n    i0.ɵɵelementStart(2, \"div\", 4)(3, \"div\", 5)(4, \"div\", 6)(5, \"div\", 7);\n    i0.ɵɵlistener(\"dblclick\", function DynamicDataManagerComponent_div_0_Template_div_dblclick_5_listener($event) {\n      i0.ɵɵrestoreView(_r28);\n      const ctx_r31 = i0.ɵɵnextContext();\n      return ctx_r31.doubleClickHandler($event, 0);\n    });\n    i0.ɵɵtemplate(6, DynamicDataManagerComponent_div_0_wm_dynamic_container_6_Template, 1, 3, \"wm-dynamic-container\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"div\", 5, 9);\n    i0.ɵɵtemplate(9, DynamicDataManagerComponent_div_0_div_9_Template, 6, 11, \"div\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(10, DynamicDataManagerComponent_div_0_div_10_Template, 2, 1, \"div\", 11);\n    i0.ɵɵelementStart(11, \"div\", 12);\n    i0.ɵɵlistener(\"dblclick\", function DynamicDataManagerComponent_div_0_Template_div_dblclick_11_listener($event) {\n      i0.ɵɵrestoreView(_r28);\n      const ctx_r32 = i0.ɵɵnextContext();\n      return ctx_r32.doubleClickHandler($event, 0);\n    });\n    i0.ɵɵtemplate(12, DynamicDataManagerComponent_div_0_ng_container_12_Template, 2, 3, \"ng-container\", 13);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(13, \"wm-busyloader\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"div\", 15, 16);\n    i0.ɵɵlistener(\"scroll\", function DynamicDataManagerComponent_div_0_Template_div_scroll_14_listener($event) {\n      i0.ɵɵrestoreView(_r28);\n      const ctx_r33 = i0.ɵɵnextContext();\n      return ctx_r33.scrollHandler($event);\n    });\n    i0.ɵɵelement(16, \"div\", 17);\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.class)(\"tabindex\", 0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.usePager);\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"width\", ctx_r0.dmViewWidth, \"px\")(\"height\", ctx_r0.dmViewHeight);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.dmView());\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"min-width\", ctx_r0.dmViewWidth, \"px\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"width\", ctx_r0.RowContainerWidth)(\"height\", ctx_r0.headerHeight, \"px\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.getDataManagerBandContext(0));\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"max-height\", ctx_r0.obtainVisibleValue(\"detailsContainerHeight\"));\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.detailsContainerClass());\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.currentVisibleRows);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.displaySummary);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"height\", ctx_r0.footerHeight, \"px\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.displayFooter);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"model\", ctx_r0.showBusyLoader);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"height\", ctx_r0.dmViewHeight);\n    i0.ɵɵproperty(\"hidden\", !ctx_r0.recordScrollbar);\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"height\", ctx_r0.scrollHeight, \"px\");\n  }\n}\n\nfunction DynamicDataManagerComponent_wm_dynamic_grid_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"wm-dynamic-grid\", 28);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"model\", ctx_r1.model)(\"bandModels\", ctx_r1.bandModels)(\"bandControls\", ctx_r1.bandControls);\n  }\n}\n\nconst _c31 = [\"pdfViewer\"];\nconst _c32 = [\"dataManagerControl\"];\nconst _c33 = [\"baseDiv\"];\n\nfunction DataManagerControlComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 9, 10);\n    i0.ɵɵlistener(\"dragEnter\", function DataManagerControlComponent_div_0_Template_div_dragEnter_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.dragEnter($event);\n    })(\"dragLeave\", function DataManagerControlComponent_div_0_Template_div_dragLeave_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.dragLeave($event);\n    })(\"dragOver\", function DataManagerControlComponent_div_0_Template_div_dragOver_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.dragWithin($event);\n    })(\"drop\", function DataManagerControlComponent_div_0_Template_div_drop_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.dragDrop($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"border-style\", \"none\")(\"width\", ctx_r0.width, \"px\")(\"height\", ctx_r0.height, \"px\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.getClass())(\"ngStyle\", ctx_r0.setMyStyle());\n  }\n}\n\nfunction DataManagerControlComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"wm-data-window-error\", 11);\n    i0.ɵɵlistener(\"closed\", function DataManagerControlComponent_ng_template_1_Template_wm_data_window_error_closed_0_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.itemErrorClosed($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"open\", ctx_r2.errorState)(\"itemError\", ctx_r2.getDataManagerValidationError());\n  }\n}\n\nfunction DataManagerControlComponent_kendo_window_3_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"button\", 22);\n  }\n\n  if (rf & 2) {\n    const ctx_r20 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"disabled\", ctx_r20.disableMinBox());\n  }\n}\n\nfunction DataManagerControlComponent_kendo_window_3_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"button\", 23);\n  }\n\n  if (rf & 2) {\n    const ctx_r21 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"disabled\", ctx_r21.disableMinBox());\n  }\n}\n\nfunction DataManagerControlComponent_kendo_window_3_button_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"button\", 24);\n  }\n}\n\nfunction DataManagerControlComponent_kendo_window_3_ng_container_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0, 25);\n  }\n\n  if (rf & 2) {\n    const ctx_r23 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r23.getDisabled());\n  }\n}\n\nfunction DataManagerControlComponent_kendo_window_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r25 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-window\", 12, 13);\n    i0.ɵɵlistener(\"keydown.tab\", function DataManagerControlComponent_kendo_window_3_Template_kendo_window_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r25);\n      const ctx_r24 = i0.ɵɵnextContext();\n      return ctx_r24.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function DataManagerControlComponent_kendo_window_3_Template_kendo_window_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r25);\n      const ctx_r26 = i0.ɵɵnextContext();\n      return ctx_r26.tabKeyHandler($event);\n    })(\"stateChange\", function DataManagerControlComponent_kendo_window_3_Template_kendo_window_stateChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r25);\n      const ctx_r27 = i0.ɵɵnextContext();\n      return ctx_r27.stateChangeHandler($event);\n    });\n    i0.ɵɵelementStart(2, \"kendo-window-titlebar\", 14)(3, \"div\", 15)(4, \"span\", 16);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(6, DataManagerControlComponent_kendo_window_3_button_6_Template, 1, 1, \"button\", 17);\n    i0.ɵɵtemplate(7, DataManagerControlComponent_kendo_window_3_button_7_Template, 1, 1, \"button\", 18);\n    i0.ɵɵelement(8, \"button\", 19);\n    i0.ɵɵtemplate(9, DataManagerControlComponent_kendo_window_3_button_9_Template, 1, 0, \"button\", 20);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(10, DataManagerControlComponent_kendo_window_3_ng_container_10_Template, 1, 1, \"ng-container\", 21);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n\n    const _r6 = i0.ɵɵreference(7);\n\n    i0.ɵɵproperty(\"title\", ctx_r3.title)(\"width\", ctx_r3.getWidth())(\"height\", ctx_r3.getHeight())(\"ngClass\", ctx_r3.class)(\"top\", ctx_r3.top != null ? ctx_r3.top : \"\")(\"left\", ctx_r3.left != null ? ctx_r3.left : \"\")(\"hostComponent\", ctx_r3)(\"tabindex\", ctx_r3.tabOrder);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r3.hideTitleBar());\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r3.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.maxMinBox());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.maxMinBox());\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.controlMenu);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r6);\n  }\n}\n\nfunction DataManagerControlComponent_div_4_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction DataManagerControlComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r31 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 26, 13);\n    i0.ɵɵlistener(\"keydown.tab\", function DataManagerControlComponent_div_4_Template_div_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r31);\n      const ctx_r30 = i0.ɵɵnextContext();\n      return ctx_r30.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function DataManagerControlComponent_div_4_Template_div_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r31);\n      const ctx_r32 = i0.ɵɵnextContext();\n      return ctx_r32.tabKeyHandler($event);\n    });\n    i0.ɵɵtemplate(2, DataManagerControlComponent_div_4_ng_container_2_Template, 1, 0, \"ng-container\", 27);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n\n    const _r8 = i0.ɵɵreference(9);\n\n    const _r10 = i0.ɵɵreference(11);\n\n    const _r6 = i0.ɵɵreference(7);\n\n    i0.ɵɵstyleProp(\"width\", ctx_r4.width, \"px\")(\"height\", ctx_r4.height, \"px\");\n    i0.ɵɵproperty(\"dropData\", ctx_r4)(\"showOriginalElementWhileDragging\", true)(\"ngClass\", ctx_r4.getClass())(\"ngStyle\", ctx_r4.setMyStyleProp)(\"ghostElementTemplate\", _r8)(\"dragActiveClass\", \"dragged\")(\"ghostElementAppendTo\", _r10)(\"hostComponent\", ctx_r4)(\"tabindex\", ctx_r4.tabOrder);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r6);\n  }\n}\n\nfunction DataManagerControlComponent_div_5_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction DataManagerControlComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r36 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 28, 13);\n    i0.ɵɵlistener(\"keydown.tab\", function DataManagerControlComponent_div_5_Template_div_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r36);\n      const ctx_r35 = i0.ɵɵnextContext();\n      return ctx_r35.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function DataManagerControlComponent_div_5_Template_div_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r36);\n      const ctx_r37 = i0.ɵɵnextContext();\n      return ctx_r37.tabKeyHandler($event);\n    });\n    i0.ɵɵtemplate(2, DataManagerControlComponent_div_5_ng_container_2_Template, 1, 0, \"ng-container\", 27);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n\n    const _r6 = i0.ɵɵreference(7);\n\n    i0.ɵɵstyleProp(\"width\", ctx_r5.width, \"px\")(\"height\", ctx_r5.height, \"px\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r5.getClass())(\"ngStyle\", ctx_r5.setMyStyleProp)(\"hostComponent\", ctx_r5)(\"tabindex\", ctx_r5.tabOrder);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r6);\n  }\n}\n\nfunction DataManagerControlComponent_ng_template_6_wm_dynamic_data_manager_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"wm-dynamic-data-manager\", 31);\n  }\n\n  if (rf & 2) {\n    const ctx_r38 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"model\", ctx_r38.getDynamicDataManagerModel());\n  }\n}\n\nfunction DataManagerControlComponent_ng_template_6_wm_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"wm-container\", 32);\n  }\n\n  if (rf & 2) {\n    const ctx_r39 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"controls\", ctx_r39.currentDM);\n  }\n}\n\nfunction DataManagerControlComponent_ng_template_6_wm_report_viewer_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"wm-report-viewer\", 31);\n  }\n\n  if (rf & 2) {\n    const ctx_r40 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"model\", ctx_r40.getModelDataManager());\n  }\n}\n\nfunction DataManagerControlComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0);\n    i0.ɵɵtemplate(1, DataManagerControlComponent_ng_template_6_wm_dynamic_data_manager_1_Template, 1, 1, \"wm-dynamic-data-manager\", 29);\n    i0.ɵɵtemplate(2, DataManagerControlComponent_ng_template_6_wm_container_2_Template, 1, 1, \"wm-container\", 30);\n    i0.ɵɵtemplate(3, DataManagerControlComponent_ng_template_6_wm_report_viewer_3_Template, 1, 1, \"wm-report-viewer\", 29);\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r7.isReport && ctx_r7.isDynamic);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r7.isReport && !ctx_r7.isDynamic);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r7.isReport);\n  }\n}\n\nfunction DataManagerControlComponent_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 33);\n  }\n}\n\nconst _c34 = [\"*\"];\nconst _c35 = [\"radioButtonComponent\"];\nconst _c36 = [\"radioInput\"];\n\nfunction DwRadioButtonComponent_div_0_ng_container_2_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 6)(1, \"input\", 7, 8);\n    i0.ɵɵlistener(\"dblclick\", function DwRadioButtonComponent_div_0_ng_container_2_div_2_Template_input_dblclick_1_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext(3);\n      return ctx_r7.doubleClickedHandler($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"label\", 9);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const value_r3 = i0.ɵɵnextContext().$implicit;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r4.radioId + value_r3.value);\n    i0.ɵɵpropertyInterpolate(\"name\", ctx_r4.radioId);\n    i0.ɵɵproperty(\"readonly\", ctx_r4.disabled)(\"checked\", ctx_r4.modelData == value_r3.value)(\"hostComponent\", ctx_r4);\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"for\", ctx_r4.radioId + value_r3.value);\n    i0.ɵɵproperty(\"hostComponent\", ctx_r4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(value_r3.text);\n  }\n}\n\nfunction DwRadioButtonComponent_div_0_ng_container_2_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 6)(1, \"input\", 7, 8);\n    i0.ɵɵlistener(\"dblclick\", function DwRadioButtonComponent_div_0_ng_container_2_div_3_Template_input_dblclick_1_listener($event) {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext(3);\n      return ctx_r11.doubleClickedHandler($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"label\", 10);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const value_r3 = i0.ɵɵnextContext().$implicit;\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r5.radioId + value_r3.value);\n    i0.ɵɵpropertyInterpolate(\"name\", ctx_r5.radioId);\n    i0.ɵɵproperty(\"readonly\", ctx_r5.disabled)(\"checked\", ctx_r5.modelData == value_r3.value)(\"hostComponent\", ctx_r5);\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"for\", ctx_r5.radioId + value_r3.value);\n    i0.ɵɵproperty(\"hostComponent\", ctx_r5);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(value_r3.text);\n  }\n}\n\nfunction DwRadioButtonComponent_div_0_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 4);\n    i0.ɵɵlistener(\"click\", function DwRadioButtonComponent_div_0_ng_container_2_Template_div_click_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r15);\n      const value_r3 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return ctx_r14.dmClickHandler($event, value_r3.value);\n    });\n    i0.ɵɵtemplate(2, DwRadioButtonComponent_div_0_ng_container_2_div_2_Template, 5, 8, \"div\", 5);\n    i0.ɵɵtemplate(3, DwRadioButtonComponent_div_0_ng_container_2_div_3_Template, 5, 8, \"div\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"hostComponent\", ctx_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.leftText);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.leftText);\n  }\n}\n\nfunction DwRadioButtonComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 1, 2);\n    i0.ɵɵlistener(\"keydown.tab\", function DwRadioButtonComponent_div_0_Template_div_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function DwRadioButtonComponent_div_0_Template_div_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.tabKeyHandler($event);\n    });\n    i0.ɵɵtemplate(2, DwRadioButtonComponent_div_0_ng_container_2_Template, 4, 3, \"ng-container\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.class)(\"ngStyle\", ctx_r0.setMyStyle());\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.values);\n  }\n}\n\nconst _c37 = [\"chkBxcontainer\"];\n\nfunction DwCheckboxComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4, 5);\n    i0.ɵɵelement(2, \"input\", 6, 7);\n    i0.ɵɵelementStart(4, \"label\", 8);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r1.checkId);\n    i0.ɵɵproperty(\"checked\", ctx_r1.checked)(\"disabled\", ctx_r1.disabled)(\"hostComponent\", ctx_r1);\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"for\", ctx_r1.checkId);\n    i0.ɵɵproperty(\"hostComponent\", ctx_r1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.text);\n  }\n}\n\nfunction DwCheckboxComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9, 5);\n    i0.ɵɵelement(2, \"input\", 10, 7);\n    i0.ɵɵelementStart(4, \"label\", 11);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r2.checkId);\n    i0.ɵɵproperty(\"checked\", ctx_r2.checked)(\"disabled\", ctx_r2.disabled)(\"hostComponent\", ctx_r2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"for\", ctx_r2.checkId);\n    i0.ɵɵproperty(\"hostComponent\", ctx_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2.text);\n  }\n}\n\nconst _c38 = function () {\n  return {\n    width: \"auto\"\n  };\n};\n\nfunction DwDropdownlistboxComponent_kendo_dropdownlist_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-dropdownlist\", 2, 3);\n    i0.ɵɵlistener(\"click\", function DwDropdownlistboxComponent_kendo_dropdownlist_0_Template_kendo_dropdownlist_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.clickColumn($event);\n    })(\"mousedown\", function DwDropdownlistboxComponent_kendo_dropdownlist_0_Template_kendo_dropdownlist_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.mouseDownHandler($event);\n    })(\"valueChange\", function DwDropdownlistboxComponent_kendo_dropdownlist_0_Template_kendo_dropdownlist_valueChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.selectionChangeHandler($event);\n    })(\"dblclick\", function DwDropdownlistboxComponent_kendo_dropdownlist_0_Template_kendo_dropdownlist_dblclick_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.doubleClickedHandler($event);\n    })(\"open\", function DwDropdownlistboxComponent_kendo_dropdownlist_0_Template_kendo_dropdownlist_open_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.openHandler($event);\n    })(\"focus\", function DwDropdownlistboxComponent_kendo_dropdownlist_0_Template_kendo_dropdownlist_focus_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.focusHandler($event);\n    })(\"blur\", function DwDropdownlistboxComponent_kendo_dropdownlist_0_Template_kendo_dropdownlist_blur_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.blurHandler();\n    })(\"keydown\", function DwDropdownlistboxComponent_kendo_dropdownlist_0_Template_kendo_dropdownlist_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.keyDownHandler($event);\n    })(\"keydown.tab\", function DwDropdownlistboxComponent_kendo_dropdownlist_0_Template_kendo_dropdownlist_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function DwDropdownlistboxComponent_kendo_dropdownlist_0_Template_kendo_dropdownlist_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.tabKeyHandler($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"filterable\", false)(\"data\", ctx_r0.values)(\"value\", ctx_r0.selectedItem)(\"ngClass\", ctx_r0.classHandler())(\"textField\", \"text\")(\"valueField\", \"value\")(\"readonly\", ctx_r0.disabled)(\"popupSettings\", i0.ɵɵpureFunction0(10, _c38))(\"hostComponent\", ctx_r0)(\"tabindex\", ctx_r0.tabSequence);\n  }\n}\n\nfunction DwDropdownlistboxComponent_kendo_combobox_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-combobox\", 4, 3);\n    i0.ɵɵlistener(\"click\", function DwDropdownlistboxComponent_kendo_combobox_1_Template_kendo_combobox_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.clickColumn($event);\n    })(\"mousedown\", function DwDropdownlistboxComponent_kendo_combobox_1_Template_kendo_combobox_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.mouseDownHandler($event);\n    })(\"valueChange\", function DwDropdownlistboxComponent_kendo_combobox_1_Template_kendo_combobox_valueChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.selectionChangeHandler($event);\n    })(\"dblclick\", function DwDropdownlistboxComponent_kendo_combobox_1_Template_kendo_combobox_dblclick_0_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.doubleClickedHandler($event);\n    })(\"open\", function DwDropdownlistboxComponent_kendo_combobox_1_Template_kendo_combobox_open_0_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return ctx_r20.openHandler($event);\n    })(\"focus\", function DwDropdownlistboxComponent_kendo_combobox_1_Template_kendo_combobox_focus_0_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.focusHandler($event);\n    })(\"blur\", function DwDropdownlistboxComponent_kendo_combobox_1_Template_kendo_combobox_blur_0_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return ctx_r22.blurHandler();\n    })(\"keydown\", function DwDropdownlistboxComponent_kendo_combobox_1_Template_kendo_combobox_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r23 = i0.ɵɵnextContext();\n      return ctx_r23.keyDownHandler($event);\n    })(\"keydown.tab\", function DwDropdownlistboxComponent_kendo_combobox_1_Template_kendo_combobox_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r24 = i0.ɵɵnextContext();\n      return ctx_r24.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function DwDropdownlistboxComponent_kendo_combobox_1_Template_kendo_combobox_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r25 = i0.ɵɵnextContext();\n      return ctx_r25.tabKeyHandler($event);\n    })(\"filterChange\", function DwDropdownlistboxComponent_kendo_combobox_1_Template_kendo_combobox_filterChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r26 = i0.ɵɵnextContext();\n      return ctx_r26.filterHandler($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"filterable\", ctx_r1.filterable)(\"data\", ctx_r1.values)(\"allowCustom\", true)(\"valueNormalizer\", ctx_r1.valueNormalizer)(\"value\", ctx_r1.selectedItem)(\"ngClass\", ctx_r1.classHandler())(\"textField\", \"text\")(\"valueField\", \"value\")(\"readonly\", ctx_r1.disabled)(\"popupSettings\", i0.ɵɵpureFunction0(13, _c38))(\"hostComponent\", ctx_r1)(\"clearButton\", false)(\"tabindex\", ctx_r1.tabSequence);\n  }\n}\n\nfunction DwEditComponent_img_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"img\", 4);\n    i0.ɵɵlistener(\"error\", function DwEditComponent_img_0_Template_img_error_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.hideImage();\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"src\", ctx_r0.modelData, i0.ɵɵsanitizeUrl)(\"ngStyle\", ctx_r0.setMyStyle())(\"ngClass\", ctx_r0.classHandler());\n  }\n}\n\nfunction DwEditComponent_input_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"input\", 5, 6);\n    i0.ɵɵlistener(\"ngModelChange\", function DwEditComponent_input_1_Template_input_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.modelData = $event;\n    })(\"input\", function DwEditComponent_input_1_Template_input_input_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.wasWritten($event);\n    })(\"blur\", function DwEditComponent_input_1_Template_input_blur_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.focusOutHandler($event);\n    })(\"change\", function DwEditComponent_input_1_Template_input_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.itemChangeHandler($event);\n    })(\"click\", function DwEditComponent_input_1_Template_input_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.clickColumn($event);\n    })(\"mousedown\", function DwEditComponent_input_1_Template_input_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.mouseDownHandler($event);\n    })(\"dblclick\", function DwEditComponent_input_1_Template_input_dblclick_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.doubleClickedHandler($event);\n    })(\"keydown.enter\", function DwEditComponent_input_1_Template_input_keydown_enter_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.onKeyDownEnter($event);\n    })(\"keydown.tab\", function DwEditComponent_input_1_Template_input_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function DwEditComponent_input_1_Template_input_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.tabKeyHandler($event);\n    })(\"keydown.arrowup\", function DwEditComponent_input_1_Template_input_keydown_arrowup_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.arrowKeyHandler($event);\n    })(\"keydown.arrowdown\", function DwEditComponent_input_1_Template_input_keydown_arrowdown_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.arrowKeyHandler($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"border\", ctx_r1.borderStyle)(\"box-shadow\", ctx_r1.boxBorder);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r1.setMyStyle())(\"tabindex\", ctx_r1.tabSequence)(\"ngModel\", ctx_r1.modelData)(\"readonly\", ctx_r1.disabled)(\"type\", ctx_r1.controlType)(\"ngClass\", ctx_r1.classHandler())(\"hostComponent\", ctx_r1)(\"autocomplete\", ctx_r1.autocomplete);\n    i0.ɵɵattribute(\"maxlength\", ctx_r1.limit);\n  }\n}\n\nfunction DwEditComponent_textarea_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"textarea\", 7, 6);\n    i0.ɵɵlistener(\"ngModelChange\", function DwEditComponent_textarea_2_Template_textarea_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.modelData = $event;\n    })(\"blur\", function DwEditComponent_textarea_2_Template_textarea_blur_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r23 = i0.ɵɵnextContext();\n      return ctx_r23.focusOutHandler($event);\n    })(\"input\", function DwEditComponent_textarea_2_Template_textarea_input_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r24 = i0.ɵɵnextContext();\n      return ctx_r24.wasWritten($event);\n    })(\"change\", function DwEditComponent_textarea_2_Template_textarea_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r25 = i0.ɵɵnextContext();\n      return ctx_r25.itemChangeHandler($event);\n    })(\"click\", function DwEditComponent_textarea_2_Template_textarea_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r26 = i0.ɵɵnextContext();\n      return ctx_r26.clickColumn($event);\n    })(\"mousedown\", function DwEditComponent_textarea_2_Template_textarea_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r27 = i0.ɵɵnextContext();\n      return ctx_r27.mouseDownHandler($event);\n    })(\"dblclick\", function DwEditComponent_textarea_2_Template_textarea_dblclick_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r28 = i0.ɵɵnextContext();\n      return ctx_r28.doubleClickedHandler($event);\n    })(\"keydown.enter\", function DwEditComponent_textarea_2_Template_textarea_keydown_enter_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r29 = i0.ɵɵnextContext();\n      return ctx_r29.onKeyDownEnter($event);\n    })(\"keydown.tab\", function DwEditComponent_textarea_2_Template_textarea_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r30 = i0.ɵɵnextContext();\n      return ctx_r30.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function DwEditComponent_textarea_2_Template_textarea_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r31 = i0.ɵɵnextContext();\n      return ctx_r31.tabKeyHandler($event);\n    })(\"keydown.arrowup\", function DwEditComponent_textarea_2_Template_textarea_keydown_arrowup_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r32 = i0.ɵɵnextContext();\n      return ctx_r32.arrowKeyHandler($event);\n    })(\"keydown.arrowdown\", function DwEditComponent_textarea_2_Template_textarea_keydown_arrowdown_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r33 = i0.ɵɵnextContext();\n      return ctx_r33.arrowKeyHandler($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"border\", ctx_r2.borderStyle)(\"box-shadow\", ctx_r2.boxBorder);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r2.setMyStyle())(\"tabindex\", ctx_r2.tabSequence)(\"ngModel\", ctx_r2.modelData)(\"readonly\", ctx_r2.disabled)(\"ngClass\", ctx_r2.classHandler())(\"hostComponent\", ctx_r2);\n    i0.ɵɵattribute(\"maxlength\", ctx_r2.limit);\n  }\n}\n\nfunction DwEditComponent_textarea_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r36 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"textarea\", 8, 6);\n    i0.ɵɵlistener(\"ngModelChange\", function DwEditComponent_textarea_3_Template_textarea_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r36);\n      const ctx_r35 = i0.ɵɵnextContext();\n      return ctx_r35.modelData = $event;\n    })(\"blur\", function DwEditComponent_textarea_3_Template_textarea_blur_0_listener($event) {\n      i0.ɵɵrestoreView(_r36);\n      const ctx_r37 = i0.ɵɵnextContext();\n      return ctx_r37.focusOutHandler($event);\n    })(\"click\", function DwEditComponent_textarea_3_Template_textarea_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r36);\n      const ctx_r38 = i0.ɵɵnextContext();\n      return ctx_r38.clickColumn($event);\n    })(\"mousedown\", function DwEditComponent_textarea_3_Template_textarea_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r36);\n      const ctx_r39 = i0.ɵɵnextContext();\n      return ctx_r39.mouseDownHandler($event);\n    })(\"input\", function DwEditComponent_textarea_3_Template_textarea_input_0_listener($event) {\n      i0.ɵɵrestoreView(_r36);\n      const ctx_r40 = i0.ɵɵnextContext();\n      return ctx_r40.wasWritten($event);\n    })(\"change\", function DwEditComponent_textarea_3_Template_textarea_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r36);\n      const ctx_r41 = i0.ɵɵnextContext();\n      return ctx_r41.itemChangeHandler($event);\n    })(\"dblclick\", function DwEditComponent_textarea_3_Template_textarea_dblclick_0_listener($event) {\n      i0.ɵɵrestoreView(_r36);\n      const ctx_r42 = i0.ɵɵnextContext();\n      return ctx_r42.doubleClickedHandler($event);\n    })(\"keydown\", function DwEditComponent_textarea_3_Template_textarea_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r36);\n      const ctx_r43 = i0.ɵɵnextContext();\n      return ctx_r43.keyDownHandler($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"border\", ctx_r3.borderStyle)(\"box-shadow\", ctx_r3.boxBorder);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r3.setMyStyle())(\"tabindex\", ctx_r3.tabSequence)(\"ngModel\", ctx_r3.modelData)(\"readonly\", ctx_r3.disabled)(\"ngClass\", ctx_r3.classHandler())(\"hostComponent\", ctx_r3);\n    i0.ɵɵattribute(\"maxlength\", ctx_r3.limit);\n  }\n}\n\nconst _c39 = [\"dwcontainer\"];\nconst _c40 = [\"comboRef\"];\nconst _c41 = [\"popupTemplate\"];\n\nfunction DropDownDataWindowComponent_div_0_kendo_dropdownlist_5_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0);\n  }\n\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(3);\n    i0.ɵɵtextInterpolate(ctx_r9.value);\n  }\n}\n\nfunction DropDownDataWindowComponent_div_0_kendo_dropdownlist_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-dropdownlist\", 9, 10);\n    i0.ɵɵlistener(\"focus\", function DropDownDataWindowComponent_div_0_kendo_dropdownlist_5_Template_kendo_dropdownlist_focus_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return ctx_r10.focusHandler($event);\n    })(\"click\", function DropDownDataWindowComponent_div_0_kendo_dropdownlist_5_Template_kendo_dropdownlist_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return ctx_r12.onToggle($event);\n    })(\"blur\", function DropDownDataWindowComponent_div_0_kendo_dropdownlist_5_Template_kendo_dropdownlist_blur_0_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r13 = i0.ɵɵnextContext(2);\n      return ctx_r13.onblur();\n    })(\"keypress\", function DropDownDataWindowComponent_div_0_kendo_dropdownlist_5_Template_kendo_dropdownlist_keypress_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r14 = i0.ɵɵnextContext(2);\n      return ctx_r14.keypressFilter($event);\n    })(\"keydown\", function DropDownDataWindowComponent_div_0_kendo_dropdownlist_5_Template_kendo_dropdownlist_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return ctx_r15.moveSelectionHandler($event);\n    })(\"keydown.backspace\", function DropDownDataWindowComponent_div_0_kendo_dropdownlist_5_Template_kendo_dropdownlist_keydown_backspace_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r16 = i0.ɵɵnextContext(2);\n      return ctx_r16.filterDelete($event);\n    })(\"valueChange\", function DropDownDataWindowComponent_div_0_kendo_dropdownlist_5_Template_kendo_dropdownlist_valueChange_0_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r17 = i0.ɵɵnextContext(2);\n      return ctx_r17.updateBuffer();\n    });\n    i0.ɵɵtemplate(3, DropDownDataWindowComponent_div_0_kendo_dropdownlist_5_ng_template_3_Template, 1, 1, \"ng-template\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r3.setMyStyle())(\"ngClass\", ctx_r3.classHandler())(\"readonly\", ctx_r3.disabled)(\"hostComponent\", ctx_r3);\n  }\n}\n\nfunction DropDownDataWindowComponent_div_0_kendo_combobox_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-combobox\", 12, 10);\n    i0.ɵɵlistener(\"click\", function DropDownDataWindowComponent_div_0_kendo_combobox_6_Template_kendo_combobox_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r20 = i0.ɵɵnextContext(2);\n      return ctx_r20.onToggle($event);\n    })(\"focus\", function DropDownDataWindowComponent_div_0_kendo_combobox_6_Template_kendo_combobox_focus_0_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r22 = i0.ɵɵnextContext(2);\n      return ctx_r22.focusHandler($event);\n    })(\"valueChange\", function DropDownDataWindowComponent_div_0_kendo_combobox_6_Template_kendo_combobox_valueChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return ctx_r23.value = $event;\n    })(\"blur\", function DropDownDataWindowComponent_div_0_kendo_combobox_6_Template_kendo_combobox_blur_0_listener() {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r24 = i0.ɵɵnextContext(2);\n      return ctx_r24.onblur();\n    })(\"keydown\", function DropDownDataWindowComponent_div_0_kendo_combobox_6_Template_kendo_combobox_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r25 = i0.ɵɵnextContext(2);\n      return ctx_r25.moveSelectionHandler($event);\n    })(\"keydown.backspace\", function DropDownDataWindowComponent_div_0_kendo_combobox_6_Template_kendo_combobox_keydown_backspace_0_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r26 = i0.ɵɵnextContext(2);\n      return ctx_r26.filterDelete($event);\n    })(\"valueChange\", function DropDownDataWindowComponent_div_0_kendo_combobox_6_Template_kendo_combobox_valueChange_0_listener() {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r27 = i0.ɵɵnextContext(2);\n      return ctx_r27.updateBuffer();\n    })(\"filterChange\", function DropDownDataWindowComponent_div_0_kendo_combobox_6_Template_kendo_combobox_filterChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r28 = i0.ɵɵnextContext(2);\n      return ctx_r28.handleFilter($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"filterable\", true)(\"allowCustom\", true)(\"readonly\", ctx_r4.disabled)(\"value\", ctx_r4.value)(\"ngStyle\", ctx_r4.setMyStyle())(\"ngClass\", ctx_r4.classHandler())(\"hostComponent\", ctx_r4)(\"clearButton\", false);\n  }\n}\n\nfunction DropDownDataWindowComponent_div_0_ng_template_7_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"h4\");\n    i0.ɵɵelement(2, \"span\", 17)(3, \"br\")(4, \"br\");\n    i0.ɵɵtext(5, \" No data \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n}\n\nfunction DropDownDataWindowComponent_div_0_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r31 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵlistener(\"click\", function DropDownDataWindowComponent_div_0_ng_template_7_Template_div_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r31);\n      const ctx_r30 = i0.ɵɵnextContext(2);\n      return ctx_r30.onToggle($event);\n    })(\"focusin\", function DropDownDataWindowComponent_div_0_ng_template_7_Template_div_focusin_0_listener() {\n      i0.ɵɵrestoreView(_r31);\n      const ctx_r32 = i0.ɵɵnextContext(2);\n      return ctx_r32.popUpOnfocus();\n    })(\"focusout\", function DropDownDataWindowComponent_div_0_ng_template_7_Template_div_focusout_0_listener() {\n      i0.ɵɵrestoreView(_r31);\n      const ctx_r33 = i0.ɵɵnextContext(2);\n      return ctx_r33.popUpOnBlur();\n    });\n    i0.ɵɵelementStart(1, \"div\", 14);\n    i0.ɵɵelement(2, \"wm-data-manager-control\", 15);\n    i0.ɵɵtemplate(3, DropDownDataWindowComponent_div_0_ng_template_7_ng_container_3_Template, 6, 0, \"ng-container\", 16);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"tabindex\", 0)(\"ngClass\", ctx_r6.popUpHandler());\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"width\", ctx_r6.dddwpercentwidth, \"px\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"model\", ctx_r6.model)(\"dataManagerContext\", ctx_r6.dataManagerContext);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.rows == 0);\n  }\n}\n\nfunction DropDownDataWindowComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r35 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵlistener(\"click\", function DropDownDataWindowComponent_div_0_Template_div_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r35);\n      const ctx_r34 = i0.ɵɵnextContext();\n      return ctx_r34.clickColumn($event);\n    })(\"keydown.tab\", function DropDownDataWindowComponent_div_0_Template_div_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r35);\n      const ctx_r36 = i0.ɵɵnextContext();\n      return ctx_r36.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function DropDownDataWindowComponent_div_0_Template_div_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r35);\n      const ctx_r37 = i0.ɵɵnextContext();\n      return ctx_r37.tabKeyHandler($event);\n    })(\"focus\", function DropDownDataWindowComponent_div_0_Template_div_focus_0_listener($event) {\n      i0.ɵɵrestoreView(_r35);\n      const ctx_r38 = i0.ɵɵnextContext();\n      return ctx_r38.focusHandler($event);\n    });\n    i0.ɵɵelementStart(1, \"div\", 2, 3);\n    i0.ɵɵelement(3, \"input\", 4, 5);\n    i0.ɵɵtemplate(5, DropDownDataWindowComponent_div_0_kendo_dropdownlist_5_Template, 4, 4, \"kendo-dropdownlist\", 6);\n    i0.ɵɵtemplate(6, DropDownDataWindowComponent_div_0_kendo_combobox_6_Template, 3, 8, \"kendo-combobox\", 7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, DropDownDataWindowComponent_div_0_ng_template_7_Template, 4, 7, \"ng-template\", null, 8, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"tabindex\", ctx_r0.tabSequence);\n    i0.ɵɵadvance(3);\n    i0.ɵɵstyleProp(\"position\", \"absolute\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.class)(\"ngStyle\", ctx_r0.setMyStyle());\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.allowEdit);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.allowEdit);\n  }\n}\n\nfunction DwColumnComponent_wm_dw_checkbox_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"wm-dw-checkbox\", 2);\n    i0.ɵɵlistener(\"componentCreated\", function DwColumnComponent_wm_dw_checkbox_0_Template_wm_dw_checkbox_componentCreated_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.registerComponent($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r0.class);\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r0.cid);\n    i0.ɵɵproperty(\"model\", ctx_r0.model)(\"dataManagerContext\", ctx_r0.dataManagerContext);\n  }\n}\n\nfunction DwColumnComponent_wm_dw_dropdownlistbox_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"wm-dw-dropdownlistbox\", 2);\n    i0.ɵɵlistener(\"componentCreated\", function DwColumnComponent_wm_dw_dropdownlistbox_1_Template_wm_dw_dropdownlistbox_componentCreated_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.registerComponent($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.class);\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r1.cid);\n    i0.ɵɵproperty(\"model\", ctx_r1.model)(\"dataManagerContext\", ctx_r1.dataManagerContext);\n  }\n}\n\nfunction DwColumnComponent_wm_dw_edit_mask_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"wm-dw-edit-mask\", 2);\n    i0.ɵɵlistener(\"componentCreated\", function DwColumnComponent_wm_dw_edit_mask_2_Template_wm_dw_edit_mask_componentCreated_0_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.registerComponent($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r2.class);\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r2.cid);\n    i0.ɵɵproperty(\"model\", ctx_r2.model)(\"dataManagerContext\", ctx_r2.dataManagerContext);\n  }\n}\n\nfunction DwColumnComponent_wm_dw_radio_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"wm-dw-radio-button\", 2);\n    i0.ɵɵlistener(\"componentCreated\", function DwColumnComponent_wm_dw_radio_button_3_Template_wm_dw_radio_button_componentCreated_0_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.registerComponent($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r3.class);\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r3.cid);\n    i0.ɵɵproperty(\"model\", ctx_r3.model)(\"dataManagerContext\", ctx_r3.dataManagerContext);\n  }\n}\n\nfunction DwColumnComponent_wm_dw_edit_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r19 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"wm-dw-edit\", 3);\n    i0.ɵɵlistener(\"componentCreated\", function DwColumnComponent_wm_dw_edit_4_Template_wm_dw_edit_componentCreated_0_listener($event) {\n      i0.ɵɵrestoreView(_r19);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.registerComponent($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r4.class);\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r4.cid);\n    i0.ɵɵproperty(\"model\", ctx_r4.model)(\"dataManagerContext\", ctx_r4.dataManagerContext)(\"avoidLengthValidation\", ctx_r4.avoidLengthValidation)(\"timeDelay\", ctx_r4.timeDelay);\n  }\n}\n\nfunction DwColumnComponent_wm_dw_dropdowndatawindow_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"wm-dw-dropdowndatawindow\", 2);\n    i0.ɵɵlistener(\"componentCreated\", function DwColumnComponent_wm_dw_dropdowndatawindow_5_Template_wm_dw_dropdowndatawindow_componentCreated_0_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return ctx_r20.registerComponent($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r5.class);\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r5.cid);\n    i0.ɵɵproperty(\"model\", ctx_r5.model)(\"dataManagerContext\", ctx_r5.dataManagerContext);\n  }\n}\n\nfunction DwColumnComponent_wm_dw_u_calendar_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"wm-dw-u-calendar\", 2);\n    i0.ɵɵlistener(\"componentCreated\", function DwColumnComponent_wm_dw_u_calendar_6_Template_wm_dw_u_calendar_componentCreated_0_listener($event) {\n      i0.ɵɵrestoreView(_r23);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return ctx_r22.registerComponent($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r6.class);\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r6.cid);\n    i0.ɵɵproperty(\"model\", ctx_r6.model)(\"dataManagerContext\", ctx_r6.dataManagerContext);\n  }\n}\n\nfunction DwColumnComponent_wm_dw_date_time_u_calendar_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r25 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"wm-dw-date-time-u-calendar\", 2);\n    i0.ɵɵlistener(\"componentCreated\", function DwColumnComponent_wm_dw_date_time_u_calendar_7_Template_wm_dw_date_time_u_calendar_componentCreated_0_listener($event) {\n      i0.ɵɵrestoreView(_r25);\n      const ctx_r24 = i0.ɵɵnextContext();\n      return ctx_r24.registerComponent($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r7.class);\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r7.cid);\n    i0.ɵɵproperty(\"model\", ctx_r7.model)(\"dataManagerContext\", ctx_r7.dataManagerContext);\n  }\n}\n\nfunction DwColumnComponent_wm_dw_u_calculator_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r27 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"wm-dw-u-calculator\", 2);\n    i0.ɵɵlistener(\"componentCreated\", function DwColumnComponent_wm_dw_u_calculator_8_Template_wm_dw_u_calculator_componentCreated_0_listener($event) {\n      i0.ɵɵrestoreView(_r27);\n      const ctx_r26 = i0.ɵɵnextContext();\n      return ctx_r26.registerComponent($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r8.class);\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r8.cid);\n    i0.ɵɵproperty(\"model\", ctx_r8.model)(\"dataManagerContext\", ctx_r8.dataManagerContext);\n  }\n}\n\nfunction DwColumnComponent_wm_dw_simple_dropdowndatawindow_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r29 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"wm-dw-simple-dropdowndatawindow\", 2);\n    i0.ɵɵlistener(\"componentCreated\", function DwColumnComponent_wm_dw_simple_dropdowndatawindow_9_Template_wm_dw_simple_dropdowndatawindow_componentCreated_0_listener($event) {\n      i0.ɵɵrestoreView(_r29);\n      const ctx_r28 = i0.ɵɵnextContext();\n      return ctx_r28.registerComponent($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r9.class);\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r9.cid);\n    i0.ɵɵproperty(\"model\", ctx_r9.model)(\"dataManagerContext\", ctx_r9.dataManagerContext);\n  }\n}\n\nfunction DwComputeComponent_input_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"input\", 3, 4);\n    i0.ɵɵlistener(\"click\", function DwComputeComponent_input_0_Template_input_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.clickColumn($event);\n    })(\"dblclick\", function DwComputeComponent_input_0_Template_input_dblclick_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.doubleClickedHandler($event);\n    })(\"keydown.enter\", function DwComputeComponent_input_0_Template_input_keydown_enter_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.onKeyDown($event);\n    })(\"keydown.tab\", function DwComputeComponent_input_0_Template_input_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function DwComputeComponent_input_0_Template_input_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.tabKeyHandler($event);\n    })(\"focus\", function DwComputeComponent_input_0_Template_input_focus_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.focusIn($event);\n    })(\"focusout\", function DwComputeComponent_input_0_Template_input_focusout_0_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.focusOut($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r0.cid);\n    i0.ɵɵproperty(\"tabindex\", ctx_r0.tabSequence)(\"value\", ctx_r0.computedValue)(\"ngClass\", ctx_r0.classHandler())(\"ngStyle\", ctx_r0.setMyStyle())(\"hostComponent\", ctx_r0);\n  }\n}\n\nfunction DwComputeComponent_textarea_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"textarea\", 5, 4);\n    i0.ɵɵlistener(\"click\", function DwComputeComponent_textarea_1_Template_textarea_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.clickColumn($event);\n    })(\"dblclick\", function DwComputeComponent_textarea_1_Template_textarea_dblclick_0_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.doubleClickedHandler($event);\n    })(\"keydown.enter\", function DwComputeComponent_textarea_1_Template_textarea_keydown_enter_0_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.onKeyDown($event);\n    })(\"keydown.tab\", function DwComputeComponent_textarea_1_Template_textarea_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function DwComputeComponent_textarea_1_Template_textarea_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.tabKeyHandler($event);\n    })(\"focus\", function DwComputeComponent_textarea_1_Template_textarea_focus_0_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return ctx_r20.focusIn($event);\n    })(\"focusout\", function DwComputeComponent_textarea_1_Template_textarea_focusout_0_listener($event) {\n      i0.ɵɵrestoreView(_r15);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.focusOut($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r1.cid);\n    i0.ɵɵproperty(\"tabindex\", ctx_r1.tabSequence)(\"value\", ctx_r1.computedValue)(\"ngClass\", ctx_r1.classHandler())(\"ngStyle\", ctx_r1.setMyStyle())(\"hostComponent\", ctx_r1);\n  }\n}\n\nfunction DwComputeComponent_img_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"img\", 6);\n    i0.ɵɵlistener(\"error\", function DwComputeComponent_img_2_Template_img_error_0_listener() {\n      i0.ɵɵrestoreView(_r23);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return ctx_r22.hideImage();\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"src\", ctx_r2.imageSource, i0.ɵɵsanitizeUrl)(\"ngStyle\", ctx_r2.setMyStyle())(\"ngClass\", ctx_r2.classHandler());\n  }\n}\n\nfunction DwComputeComponent_textarea_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r26 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"textarea\", 5, 4);\n    i0.ɵɵlistener(\"click\", function DwComputeComponent_textarea_3_Template_textarea_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r26);\n      const ctx_r25 = i0.ɵɵnextContext();\n      return ctx_r25.clickColumn($event);\n    })(\"dblclick\", function DwComputeComponent_textarea_3_Template_textarea_dblclick_0_listener($event) {\n      i0.ɵɵrestoreView(_r26);\n      const ctx_r27 = i0.ɵɵnextContext();\n      return ctx_r27.doubleClickedHandler($event);\n    })(\"keydown.enter\", function DwComputeComponent_textarea_3_Template_textarea_keydown_enter_0_listener($event) {\n      i0.ɵɵrestoreView(_r26);\n      const ctx_r28 = i0.ɵɵnextContext();\n      return ctx_r28.onKeyDown($event);\n    })(\"keydown.tab\", function DwComputeComponent_textarea_3_Template_textarea_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r26);\n      const ctx_r29 = i0.ɵɵnextContext();\n      return ctx_r29.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function DwComputeComponent_textarea_3_Template_textarea_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r26);\n      const ctx_r30 = i0.ɵɵnextContext();\n      return ctx_r30.tabKeyHandler($event);\n    })(\"focus\", function DwComputeComponent_textarea_3_Template_textarea_focus_0_listener($event) {\n      i0.ɵɵrestoreView(_r26);\n      const ctx_r31 = i0.ɵɵnextContext();\n      return ctx_r31.focusIn($event);\n    })(\"focusout\", function DwComputeComponent_textarea_3_Template_textarea_focusout_0_listener($event) {\n      i0.ɵɵrestoreView(_r26);\n      const ctx_r32 = i0.ɵɵnextContext();\n      return ctx_r32.focusOut($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r3.cid);\n    i0.ɵɵproperty(\"tabindex\", ctx_r3.tabSequence)(\"value\", ctx_r3.computedValue)(\"ngClass\", ctx_r3.classHandler())(\"ngStyle\", ctx_r3.setMyStyle())(\"hostComponent\", ctx_r3);\n  }\n}\n\nconst _c42 = [\"bitMap\"];\n\nfunction DWBitmapComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵelement(1, \"img\", 2, 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"hostComponent\", ctx_r0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r0.setMyStyle())(\"src\", ctx_r0.pictureName, i0.ɵɵsanitizeUrl)(\"alt\", ctx_r0.pictureName)(\"ngClass\", ctx_r0.classHandler())(\"hostComponent\", ctx_r0);\n  }\n}\n\nfunction DwEllipseComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(1, \"svg\")(2, \"defs\")(3, \"pattern\", 2);\n    i0.ɵɵelement(4, \"rect\", 3)(5, \"line\", 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"pattern\", 5);\n    i0.ɵɵelement(7, \"rect\", 3)(8, \"line\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"pattern\", 7);\n    i0.ɵɵelement(10, \"rect\", 8)(11, \"line\", 9)(12, \"line\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"pattern\", 11);\n    i0.ɵɵelement(14, \"rect\", 8)(15, \"line\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"pattern\", 13);\n    i0.ɵɵelement(17, \"rect\", 8)(18, \"line\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"pattern\", 15);\n    i0.ɵɵelement(20, \"rect\", 8)(21, \"line\", 12)(22, \"line\", 14);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(23, \"ellipse\")(24, \"ellipse\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"hostComponent\", ctx_r0)(\"ngClass\", ctx_r0.class);\n    i0.ɵɵadvance(23);\n    i0.ɵɵattribute(\"cx\", ctx_r0.positionX)(\"cy\", ctx_r0.positionY)(\"ry\", ctx_r0.radiusY)(\"rx\", ctx_r0.radiusX)(\"fill\", ctx_r0.brushColor);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"cx\", ctx_r0.positionX)(\"cy\", ctx_r0.positionY)(\"ry\", ctx_r0.radiusY)(\"rx\", ctx_r0.radiusX)(\"stroke\", ctx_r0.penColor)(\"stroke-width\", \"initial\")(\"stroke-dasharray\", ctx_r0.dwSVGStyle)(\"fill\", ctx_r0.svgFillStyle);\n  }\n}\n\nconst _c43 = [\"data-role\", \"listbox\"];\nconst _c44 = [\"button\"];\n\nfunction CommandButtonComponent_button_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 1, 2);\n    i0.ɵɵlistener(\"click\", function CommandButtonComponent_button_0_Template_button_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.clickHandler($event);\n    })(\"keydown.tab\", function CommandButtonComponent_button_0_Template_button_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function CommandButtonComponent_button_0_Template_button_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.tabKeyHandler($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r0.cid);\n    i0.ɵɵproperty(\"disabled\", ctx_r0.disabled)(\"ngClass\", ctx_r0.buttonClass)(\"ngStyle\", ctx_r0.setMyStyle())(\"imageUrl\", ctx_r0.buttonItemNameSource)(\"hostComponent\", ctx_r0)(\"primary\", ctx_r0.default)(\"tabindex\", ctx_r0.iscolumntab())(\"innerHTML\", ctx_r0.innerHTML, i0.ɵɵsanitizeHtml);\n  }\n}\n\nconst _c45 = [\"checkbox\"];\n\nfunction CheckboxComponent_div_0_div_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction CheckboxComponent_div_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵtemplate(1, CheckboxComponent_div_0_div_1_ng_container_1_Template, 1, 0, \"ng-container\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵnextContext(2);\n\n    const _r1 = i0.ɵɵreference(2);\n\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r1);\n  }\n}\n\nfunction CheckboxComponent_div_0_div_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction CheckboxComponent_div_0_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵtemplate(1, CheckboxComponent_div_0_div_2_ng_container_1_Template, 1, 0, \"ng-container\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵnextContext(2);\n\n    const _r3 = i0.ɵɵreference(4);\n\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r3);\n  }\n}\n\nfunction CheckboxComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵtemplate(1, CheckboxComponent_div_0_div_1_Template, 2, 1, \"div\", 4);\n    i0.ɵɵtemplate(2, CheckboxComponent_div_0_div_2_Template, 2, 1, \"div\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.class)(\"tabindex\", ctx_r0.tabOrder)(\"ngStyle\", ctx_r0.setMyStyle());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.leftText);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.leftText);\n  }\n}\n\nfunction CheckboxComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"input\", 7, 8);\n    i0.ɵɵlistener(\"change\", function CheckboxComponent_ng_template_1_Template_input_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.clickHandler($event);\n    })(\"keydown.tab\", function CheckboxComponent_ng_template_1_Template_input_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function CheckboxComponent_ng_template_1_Template_input_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.tabKeyHandler($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"label\", 9);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r2.id);\n    i0.ɵɵproperty(\"disabled\", ctx_r2.disabled)(\"tabindex\", ctx_r2.tabOrder)(\"checked\", ctx_r2.checked)(\"hostComponent\", ctx_r2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"for\", ctx_r2.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2.text);\n  }\n}\n\nfunction CheckboxComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"input\", 10, 8);\n    i0.ɵɵlistener(\"change\", function CheckboxComponent_ng_template_3_Template_input_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.clickHandler($event);\n    })(\"keydown.tab\", function CheckboxComponent_ng_template_3_Template_input_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function CheckboxComponent_ng_template_3_Template_input_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.tabKeyHandler($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"label\", 11);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r4.id);\n    i0.ɵɵproperty(\"disabled\", ctx_r4.disabled)(\"tabindex\", ctx_r4.tabOrder)(\"checked\", ctx_r4.checked)(\"hostComponent\", ctx_r4);\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"for\", ctx_r4.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r4.text);\n  }\n}\n\nconst _c46 = [\"complexEl\"];\n\nfunction ComplexNumericEditMaskComponent_kendo_maskedtextbox_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-maskedtextbox\", 1, 2);\n    i0.ɵɵlistener(\"change\", function ComplexNumericEditMaskComponent_kendo_maskedtextbox_0_Template_kendo_maskedtextbox_change_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.handleBlur();\n    })(\"ngModelChange\", function ComplexNumericEditMaskComponent_kendo_maskedtextbox_0_Template_kendo_maskedtextbox_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.text = $event;\n    })(\"keydown.tab\", function ComplexNumericEditMaskComponent_kendo_maskedtextbox_0_Template_kendo_maskedtextbox_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function ComplexNumericEditMaskComponent_kendo_maskedtextbox_0_Template_kendo_maskedtextbox_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.tabKeyHandler($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.classHandler())(\"mask\", ctx_r0.mask)(\"ngModel\", ctx_r0.text)(\"hostComponent\", ctx_r0)(\"tabindex\", ctx_r0.tabOrder)(\"disabled\", ctx_r0.disabled);\n  }\n}\n\nconst _c47 = [\"dateTimeEdit\"];\n\nfunction DateTimeEditMaskComponent_kendo_dateinput_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-dateinput\", 2, 3);\n    i0.ɵɵlistener(\"blur\", function DateTimeEditMaskComponent_kendo_dateinput_0_Template_kendo_dateinput_blur_0_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.handleBlur();\n    })(\"valueChange\", function DateTimeEditMaskComponent_kendo_dateinput_0_Template_kendo_dateinput_valueChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.value = $event;\n    })(\"keydown.tab\", function DateTimeEditMaskComponent_kendo_dateinput_0_Template_kendo_dateinput_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function DateTimeEditMaskComponent_kendo_dateinput_0_Template_kendo_dateinput_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.tabKeyHandler($event);\n    })(\"keydown\", function DateTimeEditMaskComponent_kendo_dateinput_0_Template_kendo_dateinput_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.keyDown($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", ctx_r0.setMyStyle())(\"disabled\", ctx_r0.disabled)(\"formatPlaceholder\", ctx_r0.formatPlaceholder)(\"placeholder\", ctx_r0.emptyPlaceHolder)(\"ngClass\", ctx_r0.classHandler())(\"value\", ctx_r0.value)(\"format\", ctx_r0.mask)(\"hostComponent\", ctx_r0)(\"tabindex\", ctx_r0.tabOrder)(\"spinners\", ctx_r0.spin);\n  }\n}\n\nfunction DateTimeEditMaskComponent_kendo_datepicker_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-datepicker\", 4, 3);\n    i0.ɵɵlistener(\"blur\", function DateTimeEditMaskComponent_kendo_datepicker_1_Template_kendo_datepicker_blur_0_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.handleBlur();\n    })(\"valueChange\", function DateTimeEditMaskComponent_kendo_datepicker_1_Template_kendo_datepicker_valueChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.value = $event;\n    })(\"keydown.tab\", function DateTimeEditMaskComponent_kendo_datepicker_1_Template_kendo_datepicker_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function DateTimeEditMaskComponent_kendo_datepicker_1_Template_kendo_datepicker_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.tabKeyHandler($event);\n    })(\"keydown\", function DateTimeEditMaskComponent_kendo_datepicker_1_Template_kendo_datepicker_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.keyDown($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", ctx_r1.setMyStyle())(\"disabled\", ctx_r1.disabled)(\"formatPlaceholder\", ctx_r1.formatPlaceholder)(\"placeholder\", ctx_r1.emptyPlaceHolder)(\"ngClass\", ctx_r1.classHandler())(\"value\", ctx_r1.value)(\"format\", ctx_r1.mask)(\"hostComponent\", ctx_r1)(\"tabindex\", ctx_r1.tabOrder);\n  }\n}\n\nconst _c48 = [\"combo\"];\n\nfunction DropDownListBoxComponent_kendo_combobox_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-combobox\", 2, 3);\n    i0.ɵɵlistener(\"ngModelChange\", function DropDownListBoxComponent_kendo_combobox_0_Template_kendo_combobox_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.selectedItem = $event;\n    })(\"valueChange\", function DropDownListBoxComponent_kendo_combobox_0_Template_kendo_combobox_valueChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.modified($event);\n    })(\"selectionChange\", function DropDownListBoxComponent_kendo_combobox_0_Template_kendo_combobox_selectionChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.selectionChanged($event);\n    })(\"keydown.tab\", function DropDownListBoxComponent_kendo_combobox_0_Template_kendo_combobox_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function DropDownListBoxComponent_kendo_combobox_0_Template_kendo_combobox_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.tabKeyHandler($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"data\", ctx_r0.items)(\"ngModel\", ctx_r0.selectedItem)(\"ngClass\", ctx_r0.classHandler())(\"loading\", ctx_r0.loading)(\"textField\", \"text\")(\"valueField\", \"value\")(\"allowCustom\", ctx_r0.allowEdit)(\"valueNormalizer\", ctx_r0.valueNormalizer)(\"readonly\", ctx_r0.displayOnly)(\"disabled\", ctx_r0.disabled)(\"ngStyle\", ctx_r0.setMyStyle())(\"hostComponent\", ctx_r0)(\"tabindex\", ctx_r0.tabOrder);\n  }\n}\n\nfunction DropDownListBoxComponent_kendo_dropdownlist_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-dropdownlist\", 4, 3);\n    i0.ɵɵlistener(\"ngModelChange\", function DropDownListBoxComponent_kendo_dropdownlist_1_Template_kendo_dropdownlist_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.selectedItem = $event;\n    })(\"selectionChange\", function DropDownListBoxComponent_kendo_dropdownlist_1_Template_kendo_dropdownlist_selectionChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.selectionChanged($event);\n    })(\"valueChange\", function DropDownListBoxComponent_kendo_dropdownlist_1_Template_kendo_dropdownlist_valueChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.modified($event);\n    })(\"keydown.tab\", function DropDownListBoxComponent_kendo_dropdownlist_1_Template_kendo_dropdownlist_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function DropDownListBoxComponent_kendo_dropdownlist_1_Template_kendo_dropdownlist_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.tabKeyHandler($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"filterable\", false)(\"data\", ctx_r1.items)(\"ngModel\", ctx_r1.selectedItem)(\"textField\", \"text\")(\"valueField\", \"value\")(\"readonly\", ctx_r1.displayOnly)(\"disabled\", ctx_r1.disabled)(\"ngClass\", ctx_r1.classHandler())(\"popupSettings\", ctx_r1.popupSettings)(\"hostComponent\", ctx_r1)(\"ngStyle\", ctx_r1.setMyStyle())(\"tabindex\", ctx_r1.tabOrder);\n  }\n}\n\nconst _c49 = [\"groupbox\"];\n\nfunction GroupBoxComponent_fieldset_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"fieldset\", 1, 2);\n    i0.ɵɵlistener(\"keydown.tab\", function GroupBoxComponent_fieldset_0_Template_fieldset_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function GroupBoxComponent_fieldset_0_Template_fieldset_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.tabKeyHandler($event);\n    });\n    i0.ɵɵelementStart(2, \"legend\", 3);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵprojection(4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.classHandler())(\"ngStyle\", ctx_r0.setMyStyle())(\"hostComponent\", ctx_r0)(\"tabindex\", ctx_r0.tabOrder);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r0.text);\n  }\n}\n\nconst _c50 = [\"staticText\"];\n\nfunction StaticTextComponent_label_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"label\", 1, 2);\n    i0.ɵɵlistener(\"click\", function StaticTextComponent_label_0_Template_label_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.clickHandler($event);\n    })(\"keydown.tab\", function StaticTextComponent_label_0_Template_label_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function StaticTextComponent_label_0_Template_label_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.tabKeyHandler($event);\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.classHandler())(\"ngStyle\", ctx_r0.setMyStyle())(\"hostComponent\", ctx_r0)(\"tabindex\", ctx_r0.tabOrder);\n    i0.ɵɵattribute(\"disabled\", ctx_r0.disabled && ctx_r0.disabledLook);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.text);\n  }\n}\n\nfunction StaticTextComponent_textarea_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"textarea\", 1);\n    i0.ɵɵlistener(\"click\", function StaticTextComponent_textarea_1_Template_textarea_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.clickHandler($event);\n    })(\"keydown.tab\", function StaticTextComponent_textarea_1_Template_textarea_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function StaticTextComponent_textarea_1_Template_textarea_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.tabKeyHandler($event);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r1.classHandler())(\"ngStyle\", ctx_r1.setMyStyle())(\"hostComponent\", ctx_r1)(\"tabindex\", ctx_r1.tabOrder);\n    i0.ɵɵattribute(\"disabled\", ctx_r1.enabled);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.text);\n  }\n}\n\nconst _c51 = [\"numEditMask\"];\nconst _c52 = [\"timeEdit\"];\nconst _c53 = [\"stringEdit\"];\n\nfunction StringEditMaskComponent_kendo_maskedtextbox_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-maskedtextbox\", 1, 2);\n    i0.ɵɵlistener(\"keydown.tab\", function StringEditMaskComponent_kendo_maskedtextbox_0_Template_kendo_maskedtextbox_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function StringEditMaskComponent_kendo_maskedtextbox_0_Template_kendo_maskedtextbox_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.tabKeyHandler($event);\n    })(\"change\", function StringEditMaskComponent_kendo_maskedtextbox_0_Template_kendo_maskedtextbox_change_0_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.handleBlur();\n    })(\"ngModelChange\", function StringEditMaskComponent_kendo_maskedtextbox_0_Template_kendo_maskedtextbox_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.text = $event;\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", ctx_r0.disabled)(\"mask\", ctx_r0.mask)(\"includeLiterals\", ctx_r0.includeLiterals)(\"ngModel\", ctx_r0.text)(\"rules\", ctx_r0.rules)(\"ngClass\", ctx_r0.classHandler())(\"hostComponent\", ctx_r0);\n  }\n}\n\nconst _c54 = [\"component\"];\n\nfunction MaskedTextBoxComponent_div_0_wm_simple_numeric_edit_mask_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"wm-simple-numeric-edit-mask\", 3, 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(ctx_r1.class);\n    i0.ɵɵproperty(\"model\", ctx_r1.model);\n  }\n}\n\nfunction MaskedTextBoxComponent_div_0_wm_complex_numeric_edit_mask_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"wm-complex-numeric-edit-mask\", 3, 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(ctx_r2.class);\n    i0.ɵɵproperty(\"model\", ctx_r2.model);\n  }\n}\n\nfunction MaskedTextBoxComponent_div_0_wm_date_time_edit_mask_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"wm-date-time-edit-mask\", 3, 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(ctx_r3.class);\n    i0.ɵɵproperty(\"model\", ctx_r3.model);\n  }\n}\n\nfunction MaskedTextBoxComponent_div_0_wm_time_edit_mask_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"wm-time-edit-mask\", 3, 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(ctx_r4.class);\n    i0.ɵɵproperty(\"model\", ctx_r4.model);\n  }\n}\n\nfunction MaskedTextBoxComponent_div_0_wm_string_edit_mask_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"wm-string-edit-mask\", 3, 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassMap(ctx_r5.class);\n    i0.ɵɵproperty(\"model\", ctx_r5.model);\n  }\n}\n\nfunction MaskedTextBoxComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵtemplate(1, MaskedTextBoxComponent_div_0_wm_simple_numeric_edit_mask_1_Template, 2, 3, \"wm-simple-numeric-edit-mask\", 2);\n    i0.ɵɵtemplate(2, MaskedTextBoxComponent_div_0_wm_complex_numeric_edit_mask_2_Template, 2, 3, \"wm-complex-numeric-edit-mask\", 2);\n    i0.ɵɵtemplate(3, MaskedTextBoxComponent_div_0_wm_date_time_edit_mask_3_Template, 2, 3, \"wm-date-time-edit-mask\", 2);\n    i0.ɵɵtemplate(4, MaskedTextBoxComponent_div_0_wm_time_edit_mask_4_Template, 2, 3, \"wm-time-edit-mask\", 2);\n    i0.ɵɵtemplate(5, MaskedTextBoxComponent_div_0_wm_string_edit_mask_5_Template, 2, 3, \"wm-string-edit-mask\", 2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"hostComponent\", ctx_r0);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.controlType == \"SimpleNumericMask\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.controlType == \"ComplexNumericMask\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.controlType == \"DateTimeMask\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.controlType == \"TimeMask\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.controlType == \"StringMask\");\n  }\n}\n\nconst _c55 = [\"multiLine\"];\n\nfunction MultiLineEditComponent_textarea_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"textarea\", 1, 2);\n    i0.ɵɵlistener(\"ngModelChange\", function MultiLineEditComponent_textarea_0_Template_textarea_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.text = $event;\n    })(\"change\", function MultiLineEditComponent_textarea_0_Template_textarea_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.modifiedHandler($event);\n    })(\"keydown.tab\", function MultiLineEditComponent_textarea_0_Template_textarea_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function MultiLineEditComponent_textarea_0_Template_textarea_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.tabKeyHandler($event);\n    })(\"keyup\", function MultiLineEditComponent_textarea_0_Template_textarea_keyup_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.keyUpHandler($event);\n    })(\"focusout\", function MultiLineEditComponent_textarea_0_Template_textarea_focusout_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.focusOut($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.text)(\"ngStyle\", ctx_r0.getMultiLineStyle())(\"maxlength\", ctx_r0.maxlength)(\"ngClass\", ctx_r0.classHandler())(\"readonly\", ctx_r0.displayOnly)(\"disabled\", ctx_r0.disabled)(\"hostComponent\", ctx_r0)(\"tabindex\", ctx_r0.tabOrder);\n  }\n}\n\nconst _c56 = [\"picture\"];\n\nfunction PictureComponent_div_0_img_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"img\", 5);\n    i0.ɵɵlistener(\"dblclick\", function PictureComponent_div_0_img_2_Template_img_dblclick_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext(2);\n      return ctx_r4.doubleClickHandler();\n    })(\"click\", function PictureComponent_div_0_img_2_Template_img_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return ctx_r6.clickHandler($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleProp(\"pointer-events\", \"inherit\")(\"width\", ctx_r2.sizes)(\"height\", ctx_r2.sizes);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r2.powerTipText);\n    i0.ɵɵproperty(\"src\", ctx_r2.source, i0.ɵɵsanitizeUrl);\n  }\n}\n\nfunction PictureComponent_div_0_i_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"i\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleProp(\"pointer-events\", \"inherit\")(\"width\", ctx_r3.sizes)(\"height\", ctx_r3.sizes);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r3.powerTipText);\n    i0.ɵɵproperty(\"ngClass\", ctx_r3.iconClass());\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r3.pictureName);\n  }\n}\n\nfunction PictureComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 1, 2);\n    i0.ɵɵlistener(\"keydown.tab\", function PictureComponent_div_0_Template_div_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function PictureComponent_div_0_Template_div_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.tabKeyHandler($event);\n    })(\"drop\", function PictureComponent_div_0_Template_div_drop_0_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.dropEvent($event);\n    });\n    i0.ɵɵtemplate(2, PictureComponent_div_0_img_2_Template, 1, 8, \"img\", 3);\n    i0.ɵɵtemplate(3, PictureComponent_div_0_i_3_Template, 2, 9, \"i\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"pointer-events\", ctx_r0.imageDisabled);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.pictureBoxStyle())(\"tabindex\", ctx_r0.tabOrder)(\"ngStyle\", ctx_r0.setMyStyle())(\"hostComponent\", ctx_r0);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.source);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.source);\n  }\n}\n\nconst _c57 = [\"rbutton\"];\n\nfunction RadioButtonComponent_div_0_div_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction RadioButtonComponent_div_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵtemplate(1, RadioButtonComponent_div_0_div_1_ng_container_1_Template, 1, 0, \"ng-container\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵnextContext(2);\n\n    const _r1 = i0.ɵɵreference(2);\n\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r1);\n  }\n}\n\nfunction RadioButtonComponent_div_0_div_2_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction RadioButtonComponent_div_0_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵtemplate(1, RadioButtonComponent_div_0_div_2_ng_container_1_Template, 1, 0, \"ng-container\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵnextContext(2);\n\n    const _r3 = i0.ɵɵreference(4);\n\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", _r3);\n  }\n}\n\nfunction RadioButtonComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵtemplate(1, RadioButtonComponent_div_0_div_1_Template, 2, 1, \"div\", 4);\n    i0.ɵɵtemplate(2, RadioButtonComponent_div_0_div_2_Template, 2, 1, \"div\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.class)(\"ngStyle\", ctx_r0.setMyStyle());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.leftText);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.leftText);\n  }\n}\n\nfunction RadioButtonComponent_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"input\", 7, 8);\n    i0.ɵɵlistener(\"click\", function RadioButtonComponent_ng_template_1_Template_input_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.clickHandler($event);\n    })(\"keydown.tab\", function RadioButtonComponent_ng_template_1_Template_input_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function RadioButtonComponent_ng_template_1_Template_input_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.tabKeyHandler($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"label\", 9);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"name\", ctx_r2.group)(\"disabled\", ctx_r2.disabled)(\"id\", ctx_r2.id)(\"checked\", ctx_r2.checked)(\"hostComponent\", ctx_r2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"for\", ctx_r2.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r2.text);\n  }\n}\n\nfunction RadioButtonComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"input\", 10, 8);\n    i0.ɵɵlistener(\"click\", function RadioButtonComponent_ng_template_3_Template_input_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.clickHandler($event);\n    })(\"keydown.tab\", function RadioButtonComponent_ng_template_3_Template_input_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function RadioButtonComponent_ng_template_3_Template_input_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.tabKeyHandler($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"label\", 11);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"name\", ctx_r4.group)(\"disabled\", ctx_r4.disabled)(\"id\", ctx_r4.id)(\"checked\", ctx_r4.checked)(\"hostComponent\", ctx_r4);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"for\", ctx_r4.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r4.text);\n  }\n}\n\nconst _c58 = [\"singleLine\"];\n\nfunction SingleLineEditComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\")(1, \"input\", 1, 2);\n    i0.ɵɵlistener(\"ngModelChange\", function SingleLineEditComponent_div_0_Template_input_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.text = $event;\n    })(\"change\", function SingleLineEditComponent_div_0_Template_input_change_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.modifiedHandler($event);\n    })(\"input\", function SingleLineEditComponent_div_0_Template_input_input_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.enchangeDelay($event);\n    })(\"keydown.tab\", function SingleLineEditComponent_div_0_Template_input_keydown_tab_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.tabKeyHandler($event);\n    })(\"keyup\", function SingleLineEditComponent_div_0_Template_input_keyup_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.onKeyUp($event);\n    })(\"keydown.shift.tab\", function SingleLineEditComponent_div_0_Template_input_keydown_shift_tab_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.tabKeyHandler($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"wm-busyloader\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.text)(\"type\", ctx_r0.controlType)(\"tabindex\", ctx_r0.tabOrder)(\"ngClass\", ctx_r0.classHandler())(\"ngStyle\", ctx_r0.setMyStyle())(\"maxlength\", ctx_r0.maxlength)(\"readonly\", ctx_r0.displayOnly)(\"disabled\", ctx_r0.disabled)(\"hostComponent\", ctx_r0);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"model\", ctx_r0.isSynchronizing);\n  }\n}\n\nconst _c59 = [\"toolbarTemplate\"];\n\nfunction ToolBarItemComponent_ng_template_0_div_0_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵelement(1, \"img\", 7);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"alt\", ctx_r4.tooltipText);\n    i0.ɵɵproperty(\"src\", ctx_r4.toolbarItemNameSource, i0.ɵɵsanitizeUrl);\n  }\n}\n\nfunction ToolBarItemComponent_ng_template_0_div_0_i_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"i\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngClass\", ctx_r5.iconClass);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r5.toolbarItemName);\n  }\n}\n\nfunction ToolBarItemComponent_ng_template_0_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\")(1, \"button\", 2, 3);\n    i0.ɵɵlistener(\"click\", function ToolBarItemComponent_ng_template_0_div_0_Template_button_click_1_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return ctx_r6.clickHandler($event);\n    })(\"mouseover\", function ToolBarItemComponent_ng_template_0_div_0_Template_button_mouseover_1_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return ctx_r8.toolbarItemMouseOver(ctx_r8);\n    })(\"mouseout\", function ToolBarItemComponent_ng_template_0_div_0_Template_button_mouseout_1_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return ctx_r9.toolbarItemMouseOut(ctx_r9);\n    });\n    i0.ɵɵtemplate(3, ToolBarItemComponent_ng_template_0_div_0_div_3_Template, 2, 2, \"div\", 4);\n    i0.ɵɵtemplate(4, ToolBarItemComponent_ng_template_0_div_0_i_4_Template, 2, 2, \"i\", 5);\n    i0.ɵɵelementStart(5, \"span\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", !ctx_r2.enabled);\n    i0.ɵɵattribute(\"title\", ctx_r2.tooltipText);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.toolbarItemNameSource);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.toolbarItemName);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.buttonText);\n  }\n}\n\nfunction ToolBarItemComponent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, ToolBarItemComponent_ng_template_0_div_0_Template, 7, 5, \"div\", 1);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.visible);\n  }\n}\n\nfunction ToolbarComponent_kendo_toolbar_0_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"wm-toolbaritem\", 3);\n    i0.ɵɵlistener(\"clicked\", function ToolbarComponent_kendo_toolbar_0_ng_template_1_Template_wm_toolbaritem_clicked_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext(2);\n      return ctx_r3.toolbarClicked($event);\n    })(\"ToolBarItemMouseOver\", function ToolbarComponent_kendo_toolbar_0_ng_template_1_Template_wm_toolbaritem_ToolBarItemMouseOver_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return ctx_r5.toolbarMouseOver($event);\n    })(\"ToolBarItemMouseOut\", function ToolbarComponent_kendo_toolbar_0_ng_template_1_Template_wm_toolbaritem_ToolBarItemMouseOut_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return ctx_r6.toolbarMouseOut($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"model\", item_r2);\n  }\n}\n\nfunction ToolbarComponent_kendo_toolbar_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"kendo-toolbar\", 1);\n    i0.ɵɵtemplate(1, ToolbarComponent_kendo_toolbar_0_ng_template_1_Template, 1, 1, \"ng-template\", 2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.toolbarModel);\n  }\n}\n\nconst _c60 = [\"listbox\"];\n\nconst _c61 = function (a0, a1, a2) {\n  return {\n    change: a0,\n    disabled: a1,\n    template: a2\n  };\n};\n\nfunction ListBoxComponent_div_0_select_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"select\", 3, 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"hostComponent\", ctx_r1)(\"model\", ctx_r1.model)(\"ngClass\", ctx_r1.class)(\"tabindex\", ctx_r1.tabOrder)(\"ngStyle\", ctx_r1.setMyStyle())(\"bound\", i0.ɵɵpureFunction3(6, _c61, ctx_r1.selectionChange, ctx_r1.enabled, ctx_r1.pictureListBoxTemplate));\n  }\n}\n\nfunction ListBoxComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵlistener(\"keydown.tab\", function ListBoxComponent_div_0_Template_div_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function ListBoxComponent_div_0_Template_div_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.tabKeyHandler($event);\n    })(\"keydown\", function ListBoxComponent_div_0_Template_div_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.keyDownHandler($event);\n    });\n    i0.ɵɵtemplate(1, ListBoxComponent_div_0_select_1_Template, 2, 10, \"select\", 2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.model);\n  }\n}\n\nconst _c62 = [\"monthCalendar\"];\n\nfunction MonthCalendarComponent_kendo_calendar_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-calendar\", 1, 2);\n    i0.ɵɵlistener(\"keydown.tab\", function MonthCalendarComponent_kendo_calendar_0_Template_kendo_calendar_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function MonthCalendarComponent_kendo_calendar_0_Template_kendo_calendar_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.tabKeyHandler($event);\n    })(\"valueChange\", function MonthCalendarComponent_kendo_calendar_0_Template_kendo_calendar_valueChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.dateSelected($event);\n    })(\"dblclick\", function MonthCalendarComponent_kendo_calendar_0_Template_kendo_calendar_dblclick_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.doubleClickHandler($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.classHandler())(\"hostComponent\", ctx_r0);\n  }\n}\n\nfunction PictureButtonComponent_div_0_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"img\", 5);\n    i0.ɵɵlistener(\"dblclick\", function PictureButtonComponent_div_0_div_2_Template_img_dblclick_1_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext(2);\n      return ctx_r4.doubleClickHandler();\n    })(\"click\", function PictureButtonComponent_div_0_div_2_Template_img_click_1_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return ctx_r6.clickHandler($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"label\", 6);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleProp(\"pointer-events\", \"inherit\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"pointer-events\", \"inherit\")(\"width\", ctx_r2.sizes)(\"height\", ctx_r2.sizes);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r2.powerTipText);\n    i0.ɵɵproperty(\"src\", ctx_r2.stateMode(), i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"pointer-events\", \"inherit\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r2.alignStyle());\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r2.text, \": \");\n  }\n}\n\nfunction PictureButtonComponent_div_0_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"div\", 7);\n    i0.ɵɵlistener(\"dblclick\", function PictureButtonComponent_div_0_div_3_Template_div_dblclick_1_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return ctx_r7.doubleClickHandler();\n    })(\"click\", function PictureButtonComponent_div_0_div_3_Template_div_click_1_listener($event) {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return ctx_r9.clickHandler($event);\n    });\n    i0.ɵɵelementStart(2, \"i\", 8);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"label\", 6);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleProp(\"pointer-events\", \"inherit\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"pointer-events\", \"inherit\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"title\", ctx_r3.powerTipText);\n    i0.ɵɵproperty(\"ngClass\", ctx_r3.iconClass())(\"ngStyle\", ctx_r3.myFontSize());\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.stateMode(), \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"pointer-events\", \"inherit\");\n    i0.ɵɵproperty(\"ngClass\", ctx_r3.alignStyle());\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r3.text, \": \");\n  }\n}\n\nfunction PictureButtonComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 1, 2);\n    i0.ɵɵlistener(\"keydown.tab\", function PictureButtonComponent_div_0_Template_div_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function PictureButtonComponent_div_0_Template_div_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.tabKeyHandler($event);\n    })(\"click\", function PictureButtonComponent_div_0_Template_div_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.clickHandler($event);\n    });\n    i0.ɵɵtemplate(2, PictureButtonComponent_div_0_div_2_Template, 4, 14, \"div\", 3);\n    i0.ɵɵtemplate(3, PictureButtonComponent_div_0_div_3_Template, 6, 12, \"div\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"pointer-events\", ctx_r0.imageDisabled);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.pictureBoxStyle())(\"tabindex\", ctx_r0.tabOrder)(\"hostComponent\", ctx_r0);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.source);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.source);\n  }\n}\n\nfunction WDropDownPictureListBoxComponent_ng_template_2_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵelement(1, \"img\", 6);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const dataItem_r2 = i0.ɵɵnextContext().$implicit;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", ctx_r3.getIconSource(dataItem_r2.picture), i0.ɵɵsanitizeUrl);\n  }\n}\n\nfunction WDropDownPictureListBoxComponent_ng_template_2_i_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"i\", 7);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const dataItem_r2 = i0.ɵɵnextContext().$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r4.iconClass);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r4.getIconName(dataItem_r2.picture));\n  }\n}\n\nfunction WDropDownPictureListBoxComponent_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, WDropDownPictureListBoxComponent_ng_template_2_div_0_Template, 2, 1, \"div\", 3);\n    i0.ɵɵtemplate(1, WDropDownPictureListBoxComponent_ng_template_2_i_1_Template, 2, 2, \"i\", 4);\n    i0.ɵɵelementStart(2, \"span\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const dataItem_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.getIconSource(dataItem_r2.picture));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.getIconName(dataItem_r2.picture));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(dataItem_r2.text);\n  }\n}\n\nfunction VScrollBarComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"wm-dw-press-button\", 3);\n    i0.ɵɵlistener(\"press\", function VScrollBarComponent_div_0_Template_wm_dw_press_button_press_1_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.scrollHandler($event, -1);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"div\", 4, 5);\n    i0.ɵɵelement(4, \"div\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"wm-dw-press-button\", 7);\n    i0.ɵɵlistener(\"press\", function VScrollBarComponent_div_0_Template_wm_dw_press_button_press_5_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.scrollHandler($event, 1);\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"height\", ctx_r0.height);\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.classHandler())(\"ngStyle\", ctx_r0.setMyStyle());\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"height\", ctx_r0.height, \"px\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"height\", ctx_r0.scrollHeight, \"px\");\n  }\n}\n\nfunction VScrollBarComponent_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"span\", 8)(1, \"span\", 9);\n    i0.ɵɵlistener(\"click\", function VScrollBarComponent_span_1_Template_span_click_1_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.scrollHandler($event, -1);\n    });\n    i0.ɵɵelement(2, \"span\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\", 11);\n    i0.ɵɵlistener(\"click\", function VScrollBarComponent_span_1_Template_span_click_3_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.scrollHandler($event, 1);\n    });\n    i0.ɵɵelement(4, \"span\", 12);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r1.classHandler())(\"ngStyle\", ctx_r1.setMyStyle());\n  }\n}\n\nfunction OpenFileDialogComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\")(1, \"kendo-dialog\", 1)(2, \"kendo-dialog-titlebar\")(3, \"div\", 2)(4, \"span\", 3);\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(6, \"div\", 4)(7, \"div\", 5)(8, \"input\", 6, 7);\n    i0.ɵɵlistener(\"change\", function OpenFileDialogComponent_div_0_Template_input_change_8_listener() {\n      i0.ɵɵrestoreView(_r3);\n\n      const _r1 = i0.ɵɵreference(9);\n\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.fileUpload(_r1);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"p\");\n    i0.ɵɵtext(11);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(12, \"kendo-dialog-actions\")(13, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function OpenFileDialogComponent_div_0_Template_button_click_13_listener() {\n      i0.ɵɵrestoreView(_r3);\n\n      const _r1 = i0.ɵɵreference(9);\n\n      return _r1.click();\n    });\n    i0.ɵɵtext(14, \"Select file\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function OpenFileDialogComponent_div_0_Template_button_click_15_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.cancel();\n    });\n    i0.ɵɵtext(16, \"Cancel\");\n    i0.ɵɵelementEnd()()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"width\", 500)(\"ngClass\", ctx_r0.class);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r0.title);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"accept\", ctx_r0.accept);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r0.message);\n  }\n}\n\nfunction ListViewItemComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵelement(1, \"img\", 5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", ctx_r0.getIconSource(ctx_r0.dataItem.picture), i0.ɵɵsanitizeUrl);\n  }\n}\n\nfunction ListViewItemComponent_i_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"i\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r1.iconClass);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.getIconName(ctx_r1.dataItem.picture));\n  }\n}\n\nfunction ListViewLargeIconComponent_div_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"wm-list-view-item\", 4);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"dataItem\", item_r2)(\"pictures\", ctx_r1.pictures);\n  }\n}\n\nfunction ListViewLargeIconComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵtemplate(1, ListViewLargeIconComponent_div_1_ng_container_1_Template, 2, 2, \"ng-container\", 3);\n    i0.ɵɵprojection(2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngStyle\", ctx_r0.setMyStyle())(\"ngClass\", ctx_r0.class);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.listviewItems);\n  }\n}\n\nfunction ListViewComponent_wm_list_view_large_icon_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"wm-list-view-large-icon\", 1);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r0.class);\n    i0.ɵɵproperty(\"model\", ctx_r0.model);\n  }\n}\n\nfunction VersionComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"label\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"label\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"label\");\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.buildVersion);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.dcpVersion);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.componentsVersion);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.coreVersion);\n  }\n}\n\nfunction TimerComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\");\n  }\n}\n\nconst _c63 = [\"progressbar\"];\n\nconst _c64 = function (a0, a1) {\n  return {\n    value: a0,\n    size: a1,\n    color: \"#4ca916\"\n  };\n};\n\nconst _c65 = function (a2) {\n  return {\n    visible: false,\n    vertical: false,\n    max: a2\n  };\n};\n\nfunction HProgressBarComponent_kendo_lineargauge_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-lineargauge\", 1, 2);\n    i0.ɵɵlistener(\"keydown.tab\", function HProgressBarComponent_kendo_lineargauge_0_Template_kendo_lineargauge_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function HProgressBarComponent_kendo_lineargauge_0_Template_kendo_lineargauge_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.tabKeyHandler($event);\n    });\n    i0.ɵɵelement(2, \"kendo-lineargauge-area\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.class)(\"ngStyle\", ctx_r0.setMyStyle())(\"resizeRateLimit\", 0)(\"pointer\", i0.ɵɵpureFunction2(9, _c64, ctx_r0.positionValue, ctx_r0.height))(\"scale\", i0.ɵɵpureFunction1(12, _c65, ctx_r0.maxPosition))(\"hostComponent\", ctx_r0)(\"tabindex\", ctx_r0.tabOrder);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"height\", ctx_r0.height)(\"width\", ctx_r0.width);\n  }\n}\n\nfunction PBContextMenuComponent_kendo_contextmenu_0_ng_template_1_div_0_img_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 7);\n  }\n\n  if (rf & 2) {\n    const item_r2 = i0.ɵɵnextContext(2).item;\n    i0.ɵɵpropertyInterpolate(\"src\", item_r2.imageUrl, i0.ɵɵsanitizeUrl);\n  }\n}\n\nfunction PBContextMenuComponent_kendo_contextmenu_0_ng_template_1_div_0_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"\\u2714\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction PBContextMenuComponent_kendo_contextmenu_0_ng_template_1_div_0_img_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 7);\n  }\n\n  if (rf & 2) {\n    const item_r2 = i0.ɵɵnextContext(2).item;\n    i0.ɵɵpropertyInterpolate(\"src\", item_r2.imageUrl, i0.ɵɵsanitizeUrl);\n  }\n}\n\nfunction PBContextMenuComponent_kendo_contextmenu_0_ng_template_1_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵtemplate(1, PBContextMenuComponent_kendo_contextmenu_0_ng_template_1_div_0_img_1_Template, 1, 1, \"img\", 5);\n    i0.ɵɵelementStart(2, \"div\");\n    i0.ɵɵtemplate(3, PBContextMenuComponent_kendo_contextmenu_0_ng_template_1_div_0_span_3_Template, 2, 0, \"span\", 6);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, PBContextMenuComponent_kendo_contextmenu_0_ng_template_1_div_0_img_5_Template, 1, 1, \"img\", 5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r2 = i0.ɵɵnextContext().item;\n    i0.ɵɵproperty(\"ngClass\", item_r2.cssClass)(\"wmDisabledItem\", item_r2.enabled);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !!item_r2.imageUrl && item_r2.imageFirst);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", item_r2.checked);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r2.text);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !!item_r2.imageUrl && !item_r2.imageFirst);\n  }\n}\n\nfunction PBContextMenuComponent_kendo_contextmenu_0_ng_template_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 4);\n  }\n\n  if (rf & 2) {\n    const item_r2 = i0.ɵɵnextContext().item;\n    i0.ɵɵproperty(\"ngClass\", item_r2.cssClass)(\"wmDisabledItem\", item_r2.enabled);\n  }\n}\n\nfunction PBContextMenuComponent_kendo_contextmenu_0_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, PBContextMenuComponent_kendo_contextmenu_0_ng_template_1_div_0_Template, 6, 6, \"div\", 3);\n    i0.ɵɵtemplate(1, PBContextMenuComponent_kendo_contextmenu_0_ng_template_1_div_1_Template, 1, 2, \"div\", 3);\n  }\n\n  if (rf & 2) {\n    const item_r2 = ctx.item;\n    i0.ɵɵproperty(\"ngIf\", !item_r2.isSeparator());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r2.isSeparator());\n  }\n}\n\nfunction PBContextMenuComponent_kendo_contextmenu_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-contextmenu\", 1);\n    i0.ɵɵlistener(\"select\", function PBContextMenuComponent_kendo_contextmenu_0_Template_kendo_contextmenu_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.onClicked($event);\n    })(\"popupClose\", function PBContextMenuComponent_kendo_contextmenu_0_Template_kendo_contextmenu_popupClose_0_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.onClose($event);\n    });\n    i0.ɵɵtemplate(1, PBContextMenuComponent_kendo_contextmenu_0_ng_template_1_Template, 2, 2, \"ng-template\", 2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r0.id);\n    i0.ɵɵproperty(\"items\", ctx_r0.items);\n  }\n}\n\nconst _c66 = [\"treeview\"];\nconst _c67 = [\"inputBox\"];\n\nfunction TreeViewComponent_kendo_treeview_0_ng_template_2_div_0_input_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"input\", 10, 11);\n    i0.ɵɵlistener(\"ngModelChange\", function TreeViewComponent_kendo_treeview_0_ng_template_2_div_0_input_5_Template_input_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const dataItem_r3 = i0.ɵɵnextContext(2).$implicit;\n      return dataItem_r3.label = $event;\n    })(\"change\", function TreeViewComponent_kendo_treeview_0_ng_template_2_div_0_input_5_Template_input_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const dataItem_r3 = i0.ɵɵnextContext(2).$implicit;\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return ctx_r11.endLabelEdit($event, dataItem_r3.label);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const dataItem_r3 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵproperty(\"ngModel\", dataItem_r3.label);\n  }\n}\n\nfunction TreeViewComponent_kendo_treeview_0_ng_template_2_div_0_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const dataItem_r3 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", dataItem_r3.label, \"\");\n  }\n}\n\nfunction TreeViewComponent_kendo_treeview_0_ng_template_2_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"span\", 6);\n    i0.ɵɵlistener(\"click\", function TreeViewComponent_kendo_treeview_0_ng_template_2_div_0_Template_span_click_1_listener() {\n      i0.ɵɵrestoreView(_r17);\n      const dataItem_r3 = i0.ɵɵnextContext().$implicit;\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return ctx_r15.stateHandler(dataItem_r3);\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\", 7);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, TreeViewComponent_kendo_treeview_0_ng_template_2_div_0_input_5_Template, 2, 1, \"input\", 8);\n    i0.ɵɵtemplate(6, TreeViewComponent_kendo_treeview_0_ng_template_2_div_0_div_6_Template, 2, 1, \"div\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const dataItem_r3 = i0.ɵɵnextContext().$implicit;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngStyle\", ctx_r4.isBold(dataItem_r3));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", ctx_r4.iconClass);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r4.stateIcon, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", ctx_r4.iconClass);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r4.pictureIcon);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.changeToEditMode(dataItem_r3));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r4.changeToEditMode(dataItem_r3));\n  }\n}\n\nfunction TreeViewComponent_kendo_treeview_0_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TreeViewComponent_kendo_treeview_0_ng_template_2_div_0_Template, 7, 7, \"div\", 4);\n  }\n\n  if (rf & 2) {\n    const dataItem_r3 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.isValidPicture(dataItem_r3));\n  }\n}\n\nfunction TreeViewComponent_kendo_treeview_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-treeview\", 1, 2);\n    i0.ɵɵlistener(\"selectedKeysChange\", function TreeViewComponent_kendo_treeview_0_Template_kendo_treeview_selectedKeysChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.selectedNode = $event;\n    })(\"expandedKeysChange\", function TreeViewComponent_kendo_treeview_0_Template_kendo_treeview_expandedKeysChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.expandedKeys = $event;\n    })(\"selectionChange\", function TreeViewComponent_kendo_treeview_0_Template_kendo_treeview_selectionChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return ctx_r22.selectionChange($event);\n    })(\"collapse\", function TreeViewComponent_kendo_treeview_0_Template_kendo_treeview_collapse_0_listener($event) {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r23 = i0.ɵɵnextContext();\n      return ctx_r23.handleCollapse($event);\n    })(\"expand\", function TreeViewComponent_kendo_treeview_0_Template_kendo_treeview_expand_0_listener($event) {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r24 = i0.ɵɵnextContext();\n      return ctx_r24.handleExpand($event);\n    })(\"keydown.tab\", function TreeViewComponent_kendo_treeview_0_Template_kendo_treeview_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r25 = i0.ɵɵnextContext();\n      return ctx_r25.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function TreeViewComponent_kendo_treeview_0_Template_kendo_treeview_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r26 = i0.ɵɵnextContext();\n      return ctx_r26.tabKeyHandler($event);\n    })(\"nodeClick\", function TreeViewComponent_kendo_treeview_0_Template_kendo_treeview_nodeClick_0_listener($event) {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r27 = i0.ɵɵnextContext();\n      return ctx_r27.nodeClicked($event);\n    });\n    i0.ɵɵtemplate(2, TreeViewComponent_kendo_treeview_0_ng_template_2_Template, 1, 1, \"ng-template\", 3);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.class)(\"nodes\", ctx_r0.items)(\"selectedKeys\", ctx_r0.selectedNode)(\"expandedKeys\", ctx_r0.expandedKeys)(\"children\", ctx_r0.fetchChildren)(\"hasChildren\", ctx_r0.hasChildren)(\"isExpanded\", ctx_r0.isExpanded);\n  }\n}\n\nfunction EllipseComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵlistener(\"keydown.tab\", function EllipseComponent_div_0_Template_div_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return ctx_r1.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function EllipseComponent_div_0_Template_div_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.tabKeyHandler($event);\n    });\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(1, \"svg\")(2, \"defs\")(3, \"pattern\", 2);\n    i0.ɵɵelement(4, \"rect\", 3)(5, \"line\", 4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"pattern\", 5);\n    i0.ɵɵelement(7, \"rect\", 3)(8, \"line\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"pattern\", 7);\n    i0.ɵɵelement(10, \"rect\", 8)(11, \"line\", 9)(12, \"line\", 10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"pattern\", 11);\n    i0.ɵɵelement(14, \"rect\", 8)(15, \"line\", 12);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"pattern\", 13);\n    i0.ɵɵelement(17, \"rect\", 8)(18, \"line\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"pattern\", 15);\n    i0.ɵɵelement(20, \"rect\", 8)(21, \"line\", 12)(22, \"line\", 14);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelement(23, \"ellipse\")(24, \"ellipse\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"hostComponent\", ctx_r0)(\"ngClass\", ctx_r0.class);\n    i0.ɵɵadvance(23);\n    i0.ɵɵattribute(\"cx\", ctx_r0.positionX)(\"cy\", ctx_r0.positionY)(\"ry\", ctx_r0.radiusY)(\"rx\", ctx_r0.radiusX)(\"fill\", ctx_r0.fillColor);\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"cx\", ctx_r0.positionX)(\"cy\", ctx_r0.positionY)(\"ry\", ctx_r0.radiusY)(\"rx\", ctx_r0.radiusX)(\"stroke\", ctx_r0.lineColor)(\"stroke-width\", ctx_r0.lineThickness)(\"stroke-dasharray\", ctx_r0.svgStyle)(\"fill\", ctx_r0.svgFillStyle);\n  }\n}\n\nconst _c68 = [\"tabpage\"];\n\nfunction TabPageComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵprojection(1);\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c69 = [\"hiddenTab\"];\n\nfunction TabControlComponent_kendo_tabstrip_0_kendo_tabstrip_tab_1_ng_template_1_ng_container_0_img_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 7);\n  }\n\n  if (rf & 2) {\n    const tab_r2 = i0.ɵɵnextContext(3).$implicit;\n    const ctx_r8 = i0.ɵɵnextContext(2);\n    i0.ɵɵpropertyInterpolate(\"alt\", tab_r2.text);\n    i0.ɵɵproperty(\"src\", ctx_r8.tabItemSource(tab_r2), i0.ɵɵsanitizeUrl);\n  }\n}\n\nfunction TabControlComponent_kendo_tabstrip_0_kendo_tabstrip_tab_1_ng_template_1_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, TabControlComponent_kendo_tabstrip_0_kendo_tabstrip_tab_1_ng_template_1_ng_container_0_img_1_Template, 1, 2, \"img\", 6);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const tab_r2 = i0.ɵɵnextContext(2).$implicit;\n    const ctx_r6 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.tabItemSource(tab_r2));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", tab_r2.text, \" \");\n  }\n}\n\nfunction TabControlComponent_kendo_tabstrip_0_kendo_tabstrip_tab_1_ng_template_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelement(1, \"div\", 8, 9);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const tab_r2 = i0.ɵɵnextContext(2).$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", tab_r2.id);\n  }\n}\n\nfunction TabControlComponent_kendo_tabstrip_0_kendo_tabstrip_tab_1_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TabControlComponent_kendo_tabstrip_0_kendo_tabstrip_tab_1_ng_template_1_ng_container_0_Template, 3, 2, \"ng-container\", 5);\n    i0.ɵɵtemplate(1, TabControlComponent_kendo_tabstrip_0_kendo_tabstrip_tab_1_ng_template_1_ng_container_1_Template, 3, 1, \"ng-container\", 5);\n  }\n\n  if (rf & 2) {\n    const tab_r2 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"ngIf\", tab_r2.visible);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !tab_r2.visible);\n  }\n}\n\nfunction TabControlComponent_kendo_tabstrip_0_kendo_tabstrip_tab_1_2_ng_template_0_ng_template_1_Template(rf, ctx) {}\n\nfunction TabControlComponent_kendo_tabstrip_0_kendo_tabstrip_tab_1_2_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r18 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtemplate(1, TabControlComponent_kendo_tabstrip_0_kendo_tabstrip_tab_1_2_ng_template_0_ng_template_1_Template, 0, 0, \"ng-template\", 12);\n    i0.ɵɵelementStart(2, \"wm-container\", 13);\n    i0.ɵɵlistener(\"RemoveControl\", function TabControlComponent_kendo_tabstrip_0_kendo_tabstrip_tab_1_2_ng_template_0_Template_wm_container_RemoveControl_2_listener($event) {\n      i0.ɵɵrestoreView(_r18);\n      const tab_r2 = i0.ɵɵnextContext(2).$implicit;\n      return tab_r2.removeControlHandler($event);\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    const tab_r2 = ctx_r19.$implicit;\n    const i_r3 = ctx_r19.index;\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", tab_r2.class)(\"id\", tab_r2.id)(\"ngStyle\", ctx_r14.setMyStyleTab(tab_r2, i_r3));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", tab_r2.tabPageTemplate);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"controls\", tab_r2.controls);\n  }\n}\n\nfunction TabControlComponent_kendo_tabstrip_0_kendo_tabstrip_tab_1_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, TabControlComponent_kendo_tabstrip_0_kendo_tabstrip_tab_1_2_ng_template_0_Template, 3, 5, \"ng-template\", 10);\n  }\n}\n\nfunction TabControlComponent_kendo_tabstrip_0_kendo_tabstrip_tab_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"kendo-tabstrip-tab\", 3);\n    i0.ɵɵtemplate(1, TabControlComponent_kendo_tabstrip_0_kendo_tabstrip_tab_1_ng_template_1_Template, 2, 2, \"ng-template\", 4);\n    i0.ɵɵtemplate(2, TabControlComponent_kendo_tabstrip_0_kendo_tabstrip_tab_1_2_Template, 1, 0, null, 5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const tab_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"disabled\", tab_r2.disabled);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", tab_r2.visible && tab_r2.tabPageTemplate);\n  }\n}\n\nfunction TabControlComponent_kendo_tabstrip_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-tabstrip\", 1);\n    i0.ɵɵlistener(\"tabSelect\", function TabControlComponent_kendo_tabstrip_0_Template_kendo_tabstrip_tabSelect_0_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return ctx_r20.fireSelection($event);\n    });\n    i0.ɵɵtemplate(1, TabControlComponent_kendo_tabstrip_0_kendo_tabstrip_tab_1_Template, 3, 2, \"kendo-tabstrip-tab\", 2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"animate\", ctx_r0.animate)(\"keepTabContent\", true)(\"ngClass\", ctx_r0.class)(\"ngStyle\", ctx_r0.setMyStyle());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.allTabs);\n  }\n}\n\nfunction FileExplorerComponent_div_0_div_1_kendo_dialog_1_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 15)(1, \"label\", 16);\n    i0.ɵɵtext(2, \"Output Location:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"kendo-dropdownlist\", 17);\n    i0.ɵɵlistener(\"ngModelChange\", function FileExplorerComponent_div_0_div_1_kendo_dialog_1_div_6_Template_kendo_dropdownlist_ngModelChange_3_listener($event) {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext(4);\n      return ctx_r12.selectedItemSave = $event;\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"data\", ctx_r4.saveOptionsItems)(\"valuePrimitive\", true)(\"ngModel\", ctx_r4.selectedItemSave);\n  }\n}\n\nfunction FileExplorerComponent_div_0_div_1_kendo_dialog_1_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18)(1, \"p\");\n    i0.ɵɵtext(2, \"The document will be available on the server, not on your local computer.\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction FileExplorerComponent_div_0_div_1_kendo_dialog_1_div_8_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 24);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(2);\n  }\n\n  if (rf & 2) {\n    const dataItem_r15 = ctx.$implicit;\n    const ctx_r14 = i0.ɵɵnextContext(5);\n    i0.ɵɵproperty(\"ngClass\", ctx_r14.iconClass);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r14.iconNameClass(dataItem_r15));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", dataItem_r15.text, \" \");\n  }\n}\n\nfunction FileExplorerComponent_div_0_div_1_kendo_dialog_1_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 19)(1, \"div\", 20)(2, \"kendo-treeview\", 21);\n    i0.ɵɵlistener(\"selectionChange\", function FileExplorerComponent_div_0_div_1_kendo_dialog_1_div_8_Template_kendo_treeview_selectionChange_2_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext(4);\n      return ctx_r16.handleSelection($event);\n    });\n    i0.ɵɵtemplate(3, FileExplorerComponent_div_0_div_1_kendo_dialog_1_div_8_ng_template_3_Template, 3, 3, \"ng-template\", 22);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"input\", 23);\n    i0.ɵɵlistener(\"ngModelChange\", function FileExplorerComponent_div_0_div_1_kendo_dialog_1_div_8_Template_input_ngModelChange_4_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext(4);\n      return ctx_r18.fileName = $event;\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"nodes\", ctx_r6.data);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngModel\", ctx_r6.fileName);\n  }\n}\n\nfunction FileExplorerComponent_div_0_div_1_kendo_dialog_1_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 25)(1, \"label\", 16);\n    i0.ɵɵtext(2, \"Orientation:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"kendo-dropdownlist\", 17);\n    i0.ɵɵlistener(\"ngModelChange\", function FileExplorerComponent_div_0_div_1_kendo_dialog_1_div_9_Template_kendo_dropdownlist_ngModelChange_3_listener($event) {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r19 = i0.ɵɵnextContext(4);\n      return ctx_r19.selectedItemOrientation = $event;\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"data\", ctx_r7.orientationPaperOptionsItems)(\"valuePrimitive\", true)(\"ngModel\", ctx_r7.selectedItemOrientation);\n  }\n}\n\nfunction FileExplorerComponent_div_0_div_1_kendo_dialog_1_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 26)(1, \"label\", 16);\n    i0.ɵɵtext(2, \"Paper Size:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"kendo-dropdownlist\", 17);\n    i0.ɵɵlistener(\"ngModelChange\", function FileExplorerComponent_div_0_div_1_kendo_dialog_1_div_10_Template_kendo_dropdownlist_ngModelChange_3_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext(4);\n      return ctx_r21.selectedItemPaper = $event;\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"data\", ctx_r8.paperSizeOptionsItems)(\"valuePrimitive\", true)(\"ngModel\", ctx_r8.selectedItemPaper);\n  }\n}\n\nfunction FileExplorerComponent_div_0_div_1_kendo_dialog_1_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 27)(1, \"label\", 16);\n    i0.ɵɵtext(2, \"Output Fromat:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"kendo-dropdownlist\", 17);\n    i0.ɵɵlistener(\"ngModelChange\", function FileExplorerComponent_div_0_div_1_kendo_dialog_1_div_11_Template_kendo_dropdownlist_ngModelChange_3_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r23 = i0.ɵɵnextContext(4);\n      return ctx_r23.selectedItemFormat = $event;\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(4);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"data\", ctx_r9.formatOptionsItems)(\"valuePrimitive\", true)(\"ngModel\", ctx_r9.selectedItemFormat);\n  }\n}\n\nfunction FileExplorerComponent_div_0_div_1_kendo_dialog_1_button_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r26 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 28);\n    i0.ɵɵlistener(\"click\", function FileExplorerComponent_div_0_div_1_kendo_dialog_1_button_13_Template_button_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r26);\n      const ctx_r25 = i0.ɵɵnextContext(4);\n      return ctx_r25.click($event, \"save\", 1);\n    });\n    i0.ɵɵtext(1, \"Save\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext(4);\n    i0.ɵɵproperty(\"disabled\", ctx_r10.cannotClose());\n  }\n}\n\nfunction FileExplorerComponent_div_0_div_1_kendo_dialog_1_button_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r28 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function FileExplorerComponent_div_0_div_1_kendo_dialog_1_button_14_Template_button_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r28);\n      const ctx_r27 = i0.ɵɵnextContext(4);\n      return ctx_r27.click($event, \"download\", -1, true);\n    });\n    i0.ɵɵtext(1, \"Download\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c70 = function () {\n  return {\n    \"z-index\": 11000\n  };\n};\n\nfunction FileExplorerComponent_div_0_div_1_kendo_dialog_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r30 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-dialog\", 2)(1, \"kendo-dialog-titlebar\")(2, \"div\", 3)(3, \"span\", 4);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(5, \"div\", 5);\n    i0.ɵɵtemplate(6, FileExplorerComponent_div_0_div_1_kendo_dialog_1_div_6_Template, 4, 3, \"div\", 6);\n    i0.ɵɵtemplate(7, FileExplorerComponent_div_0_div_1_kendo_dialog_1_div_7_Template, 3, 0, \"div\", 7);\n    i0.ɵɵtemplate(8, FileExplorerComponent_div_0_div_1_kendo_dialog_1_div_8_Template, 5, 2, \"div\", 8);\n    i0.ɵɵtemplate(9, FileExplorerComponent_div_0_div_1_kendo_dialog_1_div_9_Template, 4, 3, \"div\", 9);\n    i0.ɵɵtemplate(10, FileExplorerComponent_div_0_div_1_kendo_dialog_1_div_10_Template, 4, 3, \"div\", 10);\n    i0.ɵɵtemplate(11, FileExplorerComponent_div_0_div_1_kendo_dialog_1_div_11_Template, 4, 3, \"div\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"kendo-dialog-actions\");\n    i0.ɵɵtemplate(13, FileExplorerComponent_div_0_div_1_kendo_dialog_1_button_13_Template, 2, 1, \"button\", 12);\n    i0.ɵɵtemplate(14, FileExplorerComponent_div_0_div_1_kendo_dialog_1_button_14_Template, 2, 0, \"button\", 13);\n    i0.ɵɵelementStart(15, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function FileExplorerComponent_div_0_div_1_kendo_dialog_1_Template_button_click_15_listener($event) {\n      i0.ɵɵrestoreView(_r30);\n      const ctx_r29 = i0.ɵɵnextContext(3);\n      return ctx_r29.click($event, \"cancel\", 1);\n    });\n    i0.ɵɵtext(16, \"Cancel\");\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"width\", 500)(\"ngClass\", ctx_r3.class)(\"ngStyle\", i0.ɵɵpureFunction0(12, _c70));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r3.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.datamanagerDisplayOptions && ctx_r3.showDownloadOption !== false);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r3.datamanagerDisplayOptions || ctx_r3.datamanagerDisplayOptions && ctx_r3.downloadInServer);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r3.datamanagerDisplayOptions || ctx_r3.datamanagerDisplayOptions && ctx_r3.downloadInServer);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.datamanagerDisplayOptions && ctx_r3.showDownloadOption !== false);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.datamanagerDisplayOptions && ctx_r3.showDownloadOption !== false);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.formatOptions);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.datamanagerDisplayOptions && ctx_r3.downloadInServer);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r3.downloadInServer);\n  }\n}\n\nfunction FileExplorerComponent_div_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, FileExplorerComponent_div_0_div_1_kendo_dialog_1_Template, 17, 13, \"kendo-dialog\", 1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.visible);\n  }\n}\n\nfunction FileExplorerComponent_div_0_div_2_kendo_dialog_1_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 24);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(2);\n  }\n\n  if (rf & 2) {\n    const dataItem_r33 = ctx.$implicit;\n    const ctx_r32 = i0.ɵɵnextContext(4);\n    i0.ɵɵproperty(\"ngClass\", ctx_r32.iconClass);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r32.iconNameClass(dataItem_r33));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", dataItem_r33.text, \" \");\n  }\n}\n\nfunction FileExplorerComponent_div_0_div_2_kendo_dialog_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r35 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-dialog\", 2)(1, \"kendo-dialog-titlebar\")(2, \"div\", 3)(3, \"span\", 4);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(5, \"div\", 5)(6, \"div\", 20)(7, \"kendo-treeview\", 21);\n    i0.ɵɵlistener(\"selectionChange\", function FileExplorerComponent_div_0_div_2_kendo_dialog_1_Template_kendo_treeview_selectionChange_7_listener($event) {\n      i0.ɵɵrestoreView(_r35);\n      const ctx_r34 = i0.ɵɵnextContext(3);\n      return ctx_r34.handleSelection($event);\n    });\n    i0.ɵɵtemplate(8, FileExplorerComponent_div_0_div_2_kendo_dialog_1_ng_template_8_Template, 3, 3, \"ng-template\", 22);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(9, \"kendo-dialog-actions\")(10, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function FileExplorerComponent_div_0_div_2_kendo_dialog_1_Template_button_click_10_listener($event) {\n      i0.ɵɵrestoreView(_r35);\n      const ctx_r36 = i0.ɵɵnextContext(3);\n      return ctx_r36.click($event, \"select\", 1);\n    });\n    i0.ɵɵtext(11, \"Select\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(12, \"button\", 14);\n    i0.ɵɵlistener(\"click\", function FileExplorerComponent_div_0_div_2_kendo_dialog_1_Template_button_click_12_listener($event) {\n      i0.ɵɵrestoreView(_r35);\n      const ctx_r37 = i0.ɵɵnextContext(3);\n      return ctx_r37.click($event, \"cancel\", 1);\n    });\n    i0.ɵɵtext(13, \"Cancel\");\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r31 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"width\", 500)(\"ngClass\", ctx_r31.class)(\"ngStyle\", i0.ɵɵpureFunction0(5, _c70));\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(ctx_r31.title);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"nodes\", ctx_r31.data);\n  }\n}\n\nfunction FileExplorerComponent_div_0_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, FileExplorerComponent_div_0_div_2_kendo_dialog_1_Template, 14, 6, \"kendo-dialog\", 1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.visible);\n  }\n}\n\nfunction FileExplorerComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, FileExplorerComponent_div_0_div_1_Template, 2, 1, \"div\", 0);\n    i0.ɵɵtemplate(2, FileExplorerComponent_div_0_div_2_Template, 2, 1, \"div\", 0);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.FileExplorerWithInput);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.FileExplorerWithInput);\n  }\n}\n\nfunction MenuComponent_kendo_menu_0_ng_template_1_div_0_img_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 12);\n  }\n\n  if (rf & 2) {\n    const item_r4 = i0.ɵɵnextContext(2).item;\n    i0.ɵɵpropertyInterpolate(\"src\", item_r4.imageUrl, i0.ɵɵsanitizeUrl);\n  }\n}\n\nfunction MenuComponent_kendo_menu_0_ng_template_1_div_0_span_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\");\n    i0.ɵɵtext(1, \"\\u2714\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction MenuComponent_kendo_menu_0_ng_template_1_div_0_img_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 12);\n  }\n\n  if (rf & 2) {\n    const item_r4 = i0.ɵɵnextContext(2).item;\n    i0.ɵɵpropertyInterpolate(\"src\", item_r4.imageUrl, i0.ɵɵsanitizeUrl);\n  }\n}\n\nfunction MenuComponent_kendo_menu_0_ng_template_1_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 6)(1, \"table\", 7)(2, \"tr\")(3, \"td\");\n    i0.ɵɵtemplate(4, MenuComponent_kendo_menu_0_ng_template_1_div_0_img_4_Template, 1, 1, \"img\", 8);\n    i0.ɵɵelementStart(5, \"div\", 9);\n    i0.ɵɵlistener(\"mouseover\", function MenuComponent_kendo_menu_0_ng_template_1_div_0_Template_div_mouseover_5_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const item_r4 = i0.ɵɵnextContext().item;\n      const ctx_r12 = i0.ɵɵnextContext(2);\n      return ctx_r12.menuMouseOver(item_r4);\n    })(\"mouseout\", function MenuComponent_kendo_menu_0_ng_template_1_div_0_Template_div_mouseout_5_listener() {\n      i0.ɵɵrestoreView(_r14);\n      const item_r4 = i0.ɵɵnextContext().item;\n      const ctx_r15 = i0.ɵɵnextContext(2);\n      return ctx_r15.menuMouseOut(item_r4);\n    });\n    i0.ɵɵtemplate(6, MenuComponent_kendo_menu_0_ng_template_1_div_0_span_6_Template, 2, 0, \"span\", 10);\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(8, MenuComponent_kendo_menu_0_ng_template_1_div_0_img_8_Template, 1, 1, \"img\", 8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\", 11);\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd()()()();\n  }\n\n  if (rf & 2) {\n    const item_r4 = i0.ɵɵnextContext().item;\n    i0.ɵɵproperty(\"ngClass\", item_r4.cssClass)(\"wmDisabledItem\", item_r4.enabled);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", !!item_r4.imageUrl && item_r4.imageFirst);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", item_r4.checked);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r4.text, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !!item_r4.imageUrl && !item_r4.imageFirst);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r4.shortcut, \" \");\n  }\n}\n\nfunction MenuComponent_kendo_menu_0_ng_template_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 6);\n  }\n\n  if (rf & 2) {\n    const item_r4 = i0.ɵɵnextContext().item;\n    i0.ɵɵproperty(\"ngClass\", item_r4.cssClass)(\"wmDisabledItem\", item_r4.enabled);\n  }\n}\n\nfunction MenuComponent_kendo_menu_0_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, MenuComponent_kendo_menu_0_ng_template_1_div_0_Template, 11, 7, \"div\", 5);\n    i0.ɵɵtemplate(1, MenuComponent_kendo_menu_0_ng_template_1_div_1_Template, 1, 2, \"div\", 5);\n  }\n\n  if (rf & 2) {\n    const item_r4 = ctx.item;\n    i0.ɵɵproperty(\"ngIf\", !item_r4.isSeparator() && item_r4.visible);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r4.isSeparator());\n  }\n}\n\nfunction MenuComponent_kendo_menu_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r20 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-menu\", 3);\n    i0.ɵɵlistener(\"open\", function MenuComponent_kendo_menu_0_Template_kendo_menu_open_0_listener($event) {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.openItem($event);\n    })(\"select\", function MenuComponent_kendo_menu_0_Template_kendo_menu_select_0_listener($event) {\n      i0.ɵɵrestoreView(_r20);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.onClicked($event);\n    });\n    i0.ɵɵtemplate(1, MenuComponent_kendo_menu_0_ng_template_1_Template, 2, 2, \"ng-template\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r0.id);\n    i0.ɵɵproperty(\"items\", ctx_r0.items);\n  }\n}\n\nfunction MenuComponent_wm_toolbar_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"wm-toolbar\", 13);\n    i0.ɵɵlistener(\"clicked\", function MenuComponent_wm_toolbar_1_Template_wm_toolbar_clicked_0_listener($event) {\n      i0.ɵɵrestoreView(_r23);\n      const ctx_r22 = i0.ɵɵnextContext();\n      return ctx_r22.toolBarClickedHandler($event);\n    })(\"ToolBarMouseOver\", function MenuComponent_wm_toolbar_1_Template_wm_toolbar_ToolBarMouseOver_0_listener($event) {\n      i0.ɵɵrestoreView(_r23);\n      const ctx_r24 = i0.ɵɵnextContext();\n      return ctx_r24.toolBarMouseOverClickedHandler($event);\n    })(\"ToolBarMouseOut\", function MenuComponent_wm_toolbar_1_Template_wm_toolbar_ToolBarMouseOut_0_listener($event) {\n      i0.ɵɵrestoreView(_r23);\n      const ctx_r25 = i0.ɵɵnextContext();\n      return ctx_r25.toolBarMouseOutClickedHandler($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r1.id + \"_toolbar\");\n    i0.ɵɵproperty(\"toolbarModel\", ctx_r1.toolbarModel);\n  }\n}\n\nfunction MenuComponent_wm_toolbar_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"wm-toolbar\", 14);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵpropertyInterpolate(\"id\", ctx_r2.id + \"_toolbar\");\n    i0.ɵɵproperty(\"toolbarModel\", ctx_r2.multitoolbarModel);\n  }\n}\n\nconst _c71 = [\"windowContent\"];\nconst _c72 = [\"wmMenu\"];\nconst _c73 = [\"blockUI\"];\n\nfunction PBWindowComponent_ng_container_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 5, 6);\n  }\n}\n\nfunction PBWindowComponent_ng_container_0_kendo_window_2_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 24);\n  }\n}\n\nfunction PBWindowComponent_ng_container_0_kendo_window_2_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"button\", 25);\n  }\n}\n\nfunction PBWindowComponent_ng_container_0_kendo_window_2_button_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"button\", 26);\n  }\n}\n\nfunction PBWindowComponent_ng_container_0_kendo_window_2_button_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"button\", 27);\n  }\n}\n\nfunction PBWindowComponent_ng_container_0_kendo_window_2_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 28);\n  }\n\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext(3);\n    i0.ɵɵstyleProp(\"width\", ctx_r10.width, \"px\")(\"height\", ctx_r10.height, \"px\");\n  }\n}\n\nfunction PBWindowComponent_ng_container_0_kendo_window_2_wm_menu_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"wm-menu\", 29, 30);\n    i0.ɵɵlistener(\"Clicked\", function PBWindowComponent_ng_container_0_kendo_window_2_wm_menu_12_Template_wm_menu_Clicked_0_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext(3);\n      return ctx_r16.menuClicked($event);\n    })(\"ToolBarClicked\", function PBWindowComponent_ng_container_0_kendo_window_2_wm_menu_12_Template_wm_menu_ToolBarClicked_0_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext(3);\n      return ctx_r18.toolBarClickedHandler($event);\n    })(\"MenuItemMouseOver\", function PBWindowComponent_ng_container_0_kendo_window_2_wm_menu_12_Template_wm_menu_MenuItemMouseOver_0_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r19 = i0.ɵɵnextContext(3);\n      return ctx_r19.menuMouseOverHandler($event);\n    })(\"MenuItemMouseOut\", function PBWindowComponent_ng_container_0_kendo_window_2_wm_menu_12_Template_wm_menu_MenuItemMouseOut_0_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r20 = i0.ɵɵnextContext(3);\n      return ctx_r20.menuMouseOutHandler($event);\n    })(\"ToolBarMouseOverClicked\", function PBWindowComponent_ng_container_0_kendo_window_2_wm_menu_12_Template_wm_menu_ToolBarMouseOverClicked_0_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r21 = i0.ɵɵnextContext(3);\n      return ctx_r21.toolBarMouseOverHandler($event);\n    })(\"ToolBarMouseOutClicked\", function PBWindowComponent_ng_container_0_kendo_window_2_wm_menu_12_Template_wm_menu_ToolBarMouseOutClicked_0_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r22 = i0.ɵɵnextContext(3);\n      return ctx_r22.toolBarMouseOutHandler($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngClass\", \"menu\")(\"model\", ctx_r11.menu)(\"toolbarVisibleInternal\", ctx_r11.toolbarVisibleInternal);\n  }\n}\n\nfunction PBWindowComponent_ng_container_0_kendo_window_2_ng_container_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction PBWindowComponent_ng_container_0_kendo_window_2_wm_contextmenu_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"wm-contextmenu\", 31);\n  }\n\n  if (rf & 2) {\n    const ctx_r14 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngClass\", \"contextMenu\")(\"model\", ctx_r14.contextMenu);\n  }\n}\n\nconst _c74 = function (a0) {\n  return {\n    $implicit: a0\n  };\n};\n\nfunction PBWindowComponent_ng_container_0_kendo_window_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-window\", 7);\n    i0.ɵɵlistener(\"close\", function PBWindowComponent_ng_container_0_kendo_window_2_Template_kendo_window_close_0_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r23 = i0.ɵɵnextContext(2);\n      return ctx_r23.close($event);\n    })(\"resizeEnd\", function PBWindowComponent_ng_container_0_kendo_window_2_Template_kendo_window_resizeEnd_0_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r25 = i0.ɵɵnextContext(2);\n      return ctx_r25.resizeHandler($event);\n    })(\"stateChange\", function PBWindowComponent_ng_container_0_kendo_window_2_Template_kendo_window_stateChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r26 = i0.ɵɵnextContext(2);\n      return ctx_r26.stateChangeHandler($event);\n    })(\"dragStart\", function PBWindowComponent_ng_container_0_kendo_window_2_Template_kendo_window_dragStart_0_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r27 = i0.ɵɵnextContext(2);\n      return ctx_r27.onDragStart($event);\n    })(\"dragEnd\", function PBWindowComponent_ng_container_0_kendo_window_2_Template_kendo_window_dragEnd_0_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r28 = i0.ɵɵnextContext(2);\n      return ctx_r28.onDragEnd($event);\n    })(\"keydown.enter\", function PBWindowComponent_ng_container_0_kendo_window_2_Template_kendo_window_keydown_enter_0_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r29 = i0.ɵɵnextContext(2);\n      return ctx_r29.handleEnterEvent($event);\n    })(\"keydown.escape\", function PBWindowComponent_ng_container_0_kendo_window_2_Template_kendo_window_keydown_escape_0_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r30 = i0.ɵɵnextContext(2);\n      return ctx_r30.handleEscapeEvent($event);\n    });\n    i0.ɵɵelementStart(1, \"kendo-window-titlebar\", 8)(2, \"div\", 9);\n    i0.ɵɵlistener(\"dblclick\", function PBWindowComponent_ng_container_0_kendo_window_2_Template_div_dblclick_2_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r31 = i0.ɵɵnextContext(2);\n      return ctx_r31.titleBarDoubleClick($event);\n    });\n    i0.ɵɵtemplate(3, PBWindowComponent_ng_container_0_kendo_window_2_span_3_Template, 1, 0, \"span\", 10);\n    i0.ɵɵelement(4, \"img\", 11);\n    i0.ɵɵelementStart(5, \"span\", 12);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(7, PBWindowComponent_ng_container_0_kendo_window_2_button_7_Template, 1, 0, \"button\", 13);\n    i0.ɵɵtemplate(8, PBWindowComponent_ng_container_0_kendo_window_2_button_8_Template, 1, 0, \"button\", 14);\n    i0.ɵɵelement(9, \"button\", 15);\n    i0.ɵɵtemplate(10, PBWindowComponent_ng_container_0_kendo_window_2_button_10_Template, 1, 0, \"button\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(11, PBWindowComponent_ng_container_0_kendo_window_2_div_11_Template, 1, 4, \"div\", 17);\n    i0.ɵɵtemplate(12, PBWindowComponent_ng_container_0_kendo_window_2_wm_menu_12_Template, 2, 3, \"wm-menu\", 18);\n    i0.ɵɵelementStart(13, \"div\", 19, 20)(15, \"wm-container\", 21);\n    i0.ɵɵlistener(\"RemoveControl\", function PBWindowComponent_ng_container_0_kendo_window_2_Template_wm_container_RemoveControl_15_listener($event) {\n      i0.ɵɵrestoreView(_r24);\n      const ctx_r32 = i0.ɵɵnextContext(2);\n      return ctx_r32.removeControlHandler($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(16, PBWindowComponent_ng_container_0_kendo_window_2_ng_container_16_Template, 1, 0, \"ng-container\", 22);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(17, PBWindowComponent_ng_container_0_kendo_window_2_wm_contextmenu_17_Template, 1, 2, \"wm-contextmenu\", 23);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"title\", ctx_r2.title)(\"state\", ctx_r2.windowState)(\"ngClass\", ctx_r2.class)(\"top\", ctx_r2.y)(\"left\", ctx_r2.x)(\"resizable\", ctx_r2.resizable)(\"draggable\", ctx_r2.isDraggable)(\"autoFocusedElement\", ctx_r2.autoFocusedElement);\n    i0.ɵɵattribute(\"disabled\", ctx_r2.disabled);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", ctx_r2.hideTitleBar());\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.icon);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"src\", ctx_r2.icon, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r2.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.minBox && ctx_r2.controlMenu);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.maxBox && ctx_r2.controlMenu);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.controlMenu);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.dragged);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.menu);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"width\", ctx_r2.getWidth(), \"px\")(\"height\", ctx_r2.getHeight(), \"px\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"controls\", ctx_r2.controls);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.parentTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(26, _c74, ctx_r2.model));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.contextMenu);\n  }\n}\n\nfunction PBWindowComponent_ng_container_0_kendo_window_3_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 24);\n  }\n}\n\nfunction PBWindowComponent_ng_container_0_kendo_window_3_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"button\", 27);\n  }\n}\n\nfunction PBWindowComponent_ng_container_0_kendo_window_3_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 28);\n  }\n\n  if (rf & 2) {\n    const ctx_r35 = i0.ɵɵnextContext(3);\n    i0.ɵɵstyleProp(\"width\", ctx_r35.width, \"px\")(\"height\", ctx_r35.height, \"px\");\n  }\n}\n\nfunction PBWindowComponent_ng_container_0_kendo_window_3_ng_container_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction PBWindowComponent_ng_container_0_kendo_window_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r39 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-window\", 32);\n    i0.ɵɵlistener(\"close\", function PBWindowComponent_ng_container_0_kendo_window_3_Template_kendo_window_close_0_listener($event) {\n      i0.ɵɵrestoreView(_r39);\n      const ctx_r38 = i0.ɵɵnextContext(2);\n      return ctx_r38.close($event);\n    })(\"resizeEnd\", function PBWindowComponent_ng_container_0_kendo_window_3_Template_kendo_window_resizeEnd_0_listener($event) {\n      i0.ɵɵrestoreView(_r39);\n      const ctx_r40 = i0.ɵɵnextContext(2);\n      return ctx_r40.resizeHandler($event);\n    })(\"dragStart\", function PBWindowComponent_ng_container_0_kendo_window_3_Template_kendo_window_dragStart_0_listener($event) {\n      i0.ɵɵrestoreView(_r39);\n      const ctx_r41 = i0.ɵɵnextContext(2);\n      return ctx_r41.onDragStart($event);\n    })(\"dragEnd\", function PBWindowComponent_ng_container_0_kendo_window_3_Template_kendo_window_dragEnd_0_listener($event) {\n      i0.ɵɵrestoreView(_r39);\n      const ctx_r42 = i0.ɵɵnextContext(2);\n      return ctx_r42.onDragEnd($event);\n    })(\"keydown.enter\", function PBWindowComponent_ng_container_0_kendo_window_3_Template_kendo_window_keydown_enter_0_listener($event) {\n      i0.ɵɵrestoreView(_r39);\n      const ctx_r43 = i0.ɵɵnextContext(2);\n      return ctx_r43.handleEnterEvent($event);\n    });\n    i0.ɵɵelementStart(1, \"kendo-window-titlebar\", 33);\n    i0.ɵɵlistener(\"resizeEnd\", function PBWindowComponent_ng_container_0_kendo_window_3_Template_kendo_window_titlebar_resizeEnd_1_listener($event) {\n      i0.ɵɵrestoreView(_r39);\n      const ctx_r44 = i0.ɵɵnextContext(2);\n      return ctx_r44.resizeHandler($event);\n    })(\"stateChange\", function PBWindowComponent_ng_container_0_kendo_window_3_Template_kendo_window_titlebar_stateChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r39);\n      const ctx_r45 = i0.ɵɵnextContext(2);\n      return ctx_r45.stateChangeHandler($event);\n    });\n    i0.ɵɵelementStart(2, \"div\", 34);\n    i0.ɵɵtemplate(3, PBWindowComponent_ng_container_0_kendo_window_3_span_3_Template, 1, 0, \"span\", 10);\n    i0.ɵɵelement(4, \"img\", 11);\n    i0.ɵɵelementStart(5, \"span\", 12);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(7, PBWindowComponent_ng_container_0_kendo_window_3_button_7_Template, 1, 0, \"button\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(8, PBWindowComponent_ng_container_0_kendo_window_3_div_8_Template, 1, 4, \"div\", 17);\n    i0.ɵɵelementStart(9, \"div\", 35, 20)(11, \"wm-container\", 21);\n    i0.ɵɵlistener(\"RemoveControl\", function PBWindowComponent_ng_container_0_kendo_window_3_Template_wm_container_RemoveControl_11_listener($event) {\n      i0.ɵɵrestoreView(_r39);\n      const ctx_r46 = i0.ɵɵnextContext(2);\n      return ctx_r46.removeControlHandler($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(12, PBWindowComponent_ng_container_0_kendo_window_3_ng_container_12_Template, 1, 0, \"ng-container\", 22);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"title\", ctx_r3.title)(\"state\", ctx_r3.windowState)(\"ngClass\", ctx_r3.class)(\"top\", ctx_r3.y)(\"left\", ctx_r3.x)(\"resizable\", ctx_r3.resizable)(\"autoFocusedElement\", ctx_r3.autoFocusedElement);\n    i0.ɵɵattribute(\"disabled\", ctx_r3.disabled);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", ctx_r3.hideTitleBar());\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r3.icon);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"src\", ctx_r3.icon, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r3.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.controlMenu);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.dragged);\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"width\", ctx_r3.width, \"px\")(\"height\", ctx_r3.getHeight(), \"px\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"controls\", ctx_r3.controls);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r3.parentTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(21, _c74, ctx_r3.model));\n  }\n}\n\nfunction PBWindowComponent_ng_container_0_kendo_window_4_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 24);\n  }\n}\n\nfunction PBWindowComponent_ng_container_0_kendo_window_4_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"button\", 25);\n  }\n}\n\nfunction PBWindowComponent_ng_container_0_kendo_window_4_button_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"button\", 26);\n  }\n}\n\nfunction PBWindowComponent_ng_container_0_kendo_window_4_button_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"button\", 27);\n  }\n}\n\nfunction PBWindowComponent_ng_container_0_kendo_window_4_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 28);\n  }\n}\n\nfunction PBWindowComponent_ng_container_0_kendo_window_4_wm_menu_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r59 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"wm-menu\", 42, 30);\n    i0.ɵɵlistener(\"Clicked\", function PBWindowComponent_ng_container_0_kendo_window_4_wm_menu_12_Template_wm_menu_Clicked_0_listener($event) {\n      i0.ɵɵrestoreView(_r59);\n      const ctx_r58 = i0.ɵɵnextContext(3);\n      return ctx_r58.menuClicked($event);\n    })(\"ToolBarClicked\", function PBWindowComponent_ng_container_0_kendo_window_4_wm_menu_12_Template_wm_menu_ToolBarClicked_0_listener($event) {\n      i0.ɵɵrestoreView(_r59);\n      const ctx_r60 = i0.ɵɵnextContext(3);\n      return ctx_r60.toolBarClickedHandler($event);\n    })(\"MenuItemMouseOver\", function PBWindowComponent_ng_container_0_kendo_window_4_wm_menu_12_Template_wm_menu_MenuItemMouseOver_0_listener($event) {\n      i0.ɵɵrestoreView(_r59);\n      const ctx_r61 = i0.ɵɵnextContext(3);\n      return ctx_r61.menuMouseOverHandler($event);\n    })(\"MenuItemMouseOut\", function PBWindowComponent_ng_container_0_kendo_window_4_wm_menu_12_Template_wm_menu_MenuItemMouseOut_0_listener($event) {\n      i0.ɵɵrestoreView(_r59);\n      const ctx_r62 = i0.ɵɵnextContext(3);\n      return ctx_r62.menuMouseOutHandler($event);\n    })(\"ToolBarMouseOverClicked\", function PBWindowComponent_ng_container_0_kendo_window_4_wm_menu_12_Template_wm_menu_ToolBarMouseOverClicked_0_listener($event) {\n      i0.ɵɵrestoreView(_r59);\n      const ctx_r63 = i0.ɵɵnextContext(3);\n      return ctx_r63.toolBarMouseOverHandler($event);\n    })(\"ToolBarMouseOutClicked\", function PBWindowComponent_ng_container_0_kendo_window_4_wm_menu_12_Template_wm_menu_ToolBarMouseOutClicked_0_listener($event) {\n      i0.ɵɵrestoreView(_r59);\n      const ctx_r64 = i0.ɵɵnextContext(3);\n      return ctx_r64.toolBarMouseOutHandler($event);\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r52 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngClass\", \"menu\")(\"toolbarVisibleInternal\", ctx_r52.toolbarVisibleInternal)(\"model\", ctx_r52.menu);\n  }\n}\n\nfunction PBWindowComponent_ng_container_0_kendo_window_4_ng_container_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\n\nfunction PBWindowComponent_ng_container_0_kendo_window_4_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 43)(1, \"label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 44);\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(4, \"svg\", 45);\n    i0.ɵɵelement(5, \"line\", 46)(6, \"line\", 47)(7, \"line\", 48);\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    const ctx_r55 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r55.microHelp);\n  }\n}\n\nfunction PBWindowComponent_ng_container_0_kendo_window_4_wm_contextmenu_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"wm-contextmenu\", 31);\n  }\n\n  if (rf & 2) {\n    const ctx_r56 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"ngClass\", \"contextMenu\")(\"model\", ctx_r56.contextMenu);\n  }\n}\n\nfunction PBWindowComponent_ng_container_0_kendo_window_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r66 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-window\", 36);\n    i0.ɵɵlistener(\"close\", function PBWindowComponent_ng_container_0_kendo_window_4_Template_kendo_window_close_0_listener($event) {\n      i0.ɵɵrestoreView(_r66);\n      const ctx_r65 = i0.ɵɵnextContext(2);\n      return ctx_r65.close($event);\n    })(\"resizeEnd\", function PBWindowComponent_ng_container_0_kendo_window_4_Template_kendo_window_resizeEnd_0_listener($event) {\n      i0.ɵɵrestoreView(_r66);\n      const ctx_r67 = i0.ɵɵnextContext(2);\n      return ctx_r67.resizeHandler($event);\n    })(\"stateChange\", function PBWindowComponent_ng_container_0_kendo_window_4_Template_kendo_window_stateChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r66);\n      const ctx_r68 = i0.ɵɵnextContext(2);\n      return ctx_r68.stateChangeHandler($event);\n    })(\"dragStart\", function PBWindowComponent_ng_container_0_kendo_window_4_Template_kendo_window_dragStart_0_listener($event) {\n      i0.ɵɵrestoreView(_r66);\n      const ctx_r69 = i0.ɵɵnextContext(2);\n      return ctx_r69.onDragStart($event);\n    })(\"dragEnd\", function PBWindowComponent_ng_container_0_kendo_window_4_Template_kendo_window_dragEnd_0_listener($event) {\n      i0.ɵɵrestoreView(_r66);\n      const ctx_r70 = i0.ɵɵnextContext(2);\n      return ctx_r70.onDragEnd($event);\n    });\n    i0.ɵɵelementStart(1, \"kendo-window-titlebar\", 8)(2, \"div\", 34);\n    i0.ɵɵtemplate(3, PBWindowComponent_ng_container_0_kendo_window_4_span_3_Template, 1, 0, \"span\", 10);\n    i0.ɵɵelement(4, \"img\", 11);\n    i0.ɵɵelementStart(5, \"span\", 12);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵtemplate(7, PBWindowComponent_ng_container_0_kendo_window_4_button_7_Template, 1, 0, \"button\", 13);\n    i0.ɵɵtemplate(8, PBWindowComponent_ng_container_0_kendo_window_4_button_8_Template, 1, 0, \"button\", 14);\n    i0.ɵɵelement(9, \"button\", 15);\n    i0.ɵɵtemplate(10, PBWindowComponent_ng_container_0_kendo_window_4_button_10_Template, 1, 0, \"button\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(11, PBWindowComponent_ng_container_0_kendo_window_4_div_11_Template, 1, 0, \"div\", 37);\n    i0.ɵɵtemplate(12, PBWindowComponent_ng_container_0_kendo_window_4_wm_menu_12_Template, 2, 3, \"wm-menu\", 38);\n    i0.ɵɵelementStart(13, \"div\", 39, 40);\n    i0.ɵɵtemplate(15, PBWindowComponent_ng_container_0_kendo_window_4_ng_container_15_Template, 1, 0, \"ng-container\", 22);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(16, PBWindowComponent_ng_container_0_kendo_window_4_div_16_Template, 8, 1, \"div\", 41);\n    i0.ɵɵtemplate(17, PBWindowComponent_ng_container_0_kendo_window_4_wm_contextmenu_17_Template, 1, 2, \"wm-contextmenu\", 23);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"title\", ctx_r4.title)(\"width\", ctx_r4.getWidth())(\"height\", ctx_r4.getHeight())(\"state\", ctx_r4.windowState)(\"ngClass\", ctx_r4.class)(\"top\", ctx_r4.y)(\"left\", ctx_r4.x)(\"resizable\", ctx_r4.resizable)(\"draggable\", ctx_r4.isMdiDraggable())(\"autoFocusedElement\", ctx_r4.autoFocusedElement);\n    i0.ɵɵattribute(\"disabled\", ctx_r4.disabled);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngClass\", ctx_r4.hideTitleBar());\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r4.icon);\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate(\"src\", ctx_r4.icon, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r4.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.minBox && ctx_r4.controlMenu);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.maxBox && ctx_r4.controlMenu);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.controlMenu);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.dragged);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.menu);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r4.parentTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(24, _c74, ctx_r4.model));\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.showMicroHelp());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.contextMenu);\n  }\n}\n\nfunction PBWindowComponent_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, PBWindowComponent_ng_container_0_div_1_Template, 2, 0, \"div\", 1);\n    i0.ɵɵtemplate(2, PBWindowComponent_ng_container_0_kendo_window_2_Template, 18, 28, \"kendo-window\", 2);\n    i0.ɵɵtemplate(3, PBWindowComponent_ng_container_0_kendo_window_3_Template, 13, 23, \"kendo-window\", 3);\n    i0.ɵɵtemplate(4, PBWindowComponent_ng_container_0_kendo_window_4_Template, 18, 26, \"kendo-window\", 4);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isModalWindow());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.mainWindowType() || ctx_r0.childWindowType());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.isModalWindow() || ctx_r0.isPopupWindowType());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.mdiWindowType());\n  }\n}\n\nconst _c75 = [\"dialog\"];\n\nfunction MessageBoxComponent_div_0_kendo_dialog_1_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 9);\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(3);\n    i0.ɵɵstyleProp(\"color\", ctx_r3.iconColor);\n    i0.ɵɵproperty(\"ngClass\", ctx_r3.iconClass);\n  }\n}\n\nfunction MessageBoxComponent_div_0_kendo_dialog_1_i_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"i\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(3);\n    i0.ɵɵstyleProp(\"color\", ctx_r4.iconColor);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r4.iconClass);\n  }\n}\n\nfunction MessageBoxComponent_div_0_kendo_dialog_1_button_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 11, 12);\n    i0.ɵɵlistener(\"click\", function MessageBoxComponent_div_0_kendo_dialog_1_button_8_Template_button_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r13 = i0.ɵɵnextContext(3);\n      return ctx_r13.click($event, ctx_r13.buttonTexts[0]);\n    })(\"keydown\", function MessageBoxComponent_div_0_kendo_dialog_1_button_8_Template_button_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r14);\n      const ctx_r15 = i0.ɵɵnextContext(3);\n      return ctx_r15.keyDownHandler($event);\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"disabled\", !ctx_r5.enableButtons);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r5.buttonTexts[0]);\n  }\n}\n\nfunction MessageBoxComponent_div_0_kendo_dialog_1_button_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function MessageBoxComponent_div_0_kendo_dialog_1_button_9_Template_button_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r16 = i0.ɵɵnextContext(3);\n      return ctx_r16.click($event, ctx_r16.buttonTexts[1]);\n    })(\"keydown\", function MessageBoxComponent_div_0_kendo_dialog_1_button_9_Template_button_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r17);\n      const ctx_r18 = i0.ɵɵnextContext(3);\n      return ctx_r18.keyDownHandler($event);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"disabled\", !ctx_r6.enableButtons);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r6.buttonTexts[1]);\n  }\n}\n\nfunction MessageBoxComponent_div_0_kendo_dialog_1_button_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r21 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 11, 12);\n    i0.ɵɵlistener(\"click\", function MessageBoxComponent_div_0_kendo_dialog_1_button_10_Template_button_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r20 = i0.ɵɵnextContext(3);\n      return ctx_r20.click($event, ctx_r20.buttonTexts[2]);\n    })(\"keydown\", function MessageBoxComponent_div_0_kendo_dialog_1_button_10_Template_button_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r21);\n      const ctx_r22 = i0.ɵɵnextContext(3);\n      return ctx_r22.keyDownHandler($event);\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"disabled\", !ctx_r7.enableButtons);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r7.buttonTexts[2]);\n  }\n}\n\nfunction MessageBoxComponent_div_0_kendo_dialog_1_button_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r25 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 11, 12);\n    i0.ɵɵlistener(\"click\", function MessageBoxComponent_div_0_kendo_dialog_1_button_11_Template_button_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r25);\n      const ctx_r24 = i0.ɵɵnextContext(3);\n      return ctx_r24.click($event, ctx_r24.buttonTexts[3]);\n    })(\"keydown\", function MessageBoxComponent_div_0_kendo_dialog_1_button_11_Template_button_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r25);\n      const ctx_r26 = i0.ɵɵnextContext(3);\n      return ctx_r26.keyDownHandler($event);\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"disabled\", !ctx_r8.enableButtons);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r8.buttonTexts[3]);\n  }\n}\n\nfunction MessageBoxComponent_div_0_kendo_dialog_1_button_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r29 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 11, 12);\n    i0.ɵɵlistener(\"click\", function MessageBoxComponent_div_0_kendo_dialog_1_button_12_Template_button_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r29);\n      const ctx_r28 = i0.ɵɵnextContext(3);\n      return ctx_r28.click($event, ctx_r28.buttonTexts[4]);\n    })(\"keydown\", function MessageBoxComponent_div_0_kendo_dialog_1_button_12_Template_button_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r29);\n      const ctx_r30 = i0.ɵɵnextContext(3);\n      return ctx_r30.keyDownHandler($event);\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"disabled\", !ctx_r9.enableButtons);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r9.buttonTexts[4]);\n  }\n}\n\nfunction MessageBoxComponent_div_0_kendo_dialog_1_button_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r32 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function MessageBoxComponent_div_0_kendo_dialog_1_button_13_Template_button_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r32);\n      const ctx_r31 = i0.ɵɵnextContext(3);\n      return ctx_r31.click($event, ctx_r31.buttonTexts[5]);\n    })(\"keydown\", function MessageBoxComponent_div_0_kendo_dialog_1_button_13_Template_button_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r32);\n      const ctx_r33 = i0.ɵɵnextContext(3);\n      return ctx_r33.keyDownHandler($event);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"disabled\", !ctx_r10.enableButtons);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r10.buttonTexts[5]);\n  }\n}\n\nfunction MessageBoxComponent_div_0_kendo_dialog_1_button_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r35 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 11);\n    i0.ɵɵlistener(\"click\", function MessageBoxComponent_div_0_kendo_dialog_1_button_14_Template_button_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r35);\n      const ctx_r34 = i0.ɵɵnextContext(3);\n      return ctx_r34.click($event, ctx_r34.buttonTexts[6]);\n    })(\"keydown\", function MessageBoxComponent_div_0_kendo_dialog_1_button_14_Template_button_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r35);\n      const ctx_r36 = i0.ɵɵnextContext(3);\n      return ctx_r36.keyDownHandler($event);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext(3);\n    i0.ɵɵproperty(\"disabled\", !ctx_r11.enableButtons);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r11.buttonTexts[6]);\n  }\n}\n\nfunction MessageBoxComponent_div_0_kendo_dialog_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r38 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"kendo-dialog\", 2, 3);\n    i0.ɵɵlistener(\"close\", function MessageBoxComponent_div_0_kendo_dialog_1_Template_kendo_dialog_close_0_listener($event) {\n      i0.ɵɵrestoreView(_r38);\n      const ctx_r37 = i0.ɵɵnextContext(2);\n      return ctx_r37.close($event);\n    });\n    i0.ɵɵelementStart(2, \"div\", 4);\n    i0.ɵɵtemplate(3, MessageBoxComponent_div_0_kendo_dialog_1_span_3_Template, 1, 3, \"span\", 5);\n    i0.ɵɵtemplate(4, MessageBoxComponent_div_0_kendo_dialog_1_i_4_Template, 2, 3, \"i\", 6);\n    i0.ɵɵelementStart(5, \"p\", 7);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"kendo-dialog-actions\");\n    i0.ɵɵtemplate(8, MessageBoxComponent_div_0_kendo_dialog_1_button_8_Template, 3, 2, \"button\", 8);\n    i0.ɵɵtemplate(9, MessageBoxComponent_div_0_kendo_dialog_1_button_9_Template, 2, 2, \"button\", 8);\n    i0.ɵɵtemplate(10, MessageBoxComponent_div_0_kendo_dialog_1_button_10_Template, 3, 2, \"button\", 8);\n    i0.ɵɵtemplate(11, MessageBoxComponent_div_0_kendo_dialog_1_button_11_Template, 3, 2, \"button\", 8);\n    i0.ɵɵtemplate(12, MessageBoxComponent_div_0_kendo_dialog_1_button_12_Template, 3, 2, \"button\", 8);\n    i0.ɵɵtemplate(13, MessageBoxComponent_div_0_kendo_dialog_1_button_13_Template, 2, 2, \"button\", 8);\n    i0.ɵɵtemplate(14, MessageBoxComponent_div_0_kendo_dialog_1_button_14_Template, 2, 2, \"button\", 8);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"title\", ctx_r1.text)(\"width\", ctx_r1.width)(\"height\", ctx_r1.height)(\"minWidth\", 300)(\"ngClass\", ctx_r1.getClass())(\"hostComponent\", ctx_r1);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.kendoIcon);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.kendoIcon);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r1.labelMessage);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.buttonYesNo);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.buttonYesNo);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.buttonOk);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.buttonIgnoreAbort);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.buttonRetry);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.buttonCancel);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.buttonIgnoreAbort);\n  }\n}\n\nfunction MessageBoxComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, MessageBoxComponent_div_0_kendo_dialog_1_Template, 15, 16, \"kendo-dialog\", 1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.visible);\n  }\n}\n\nconst _c76 = [\"hyperlink\"];\n\nfunction HyperlinkComponent_a_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"a\", 1, 2);\n    i0.ɵɵlistener(\"click\", function HyperlinkComponent_a_0_Template_a_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return ctx_r2.clickHandler($event);\n    })(\"keydown.tab\", function HyperlinkComponent_a_0_Template_a_keydown_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.tabKeyHandler($event);\n    })(\"keydown.shift.tab\", function HyperlinkComponent_a_0_Template_a_keydown_shift_tab_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.tabKeyHandler($event);\n    });\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.class);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r0.text);\n  }\n}\n\nclass DataManagerContext {\n  constructor(context) {\n    this.computedInformation = context.computedInformation;\n    this.rowIndex = context.rowIndex;\n    this.row = context.row;\n    this.columns = context.columns;\n    this.columnTypes = context.columnTypes;\n    this.dataManagerId = context.dataManagerId;\n    this.pagination = context.pagination;\n    this.datamanagerType = context.dataManagerType;\n    this.computedExpressions = context.computedExpressions;\n    this.bandRow = context.bandRow;\n    this.currentPage = context.currentPage;\n    this.maxTabSequence = context.maxTabSequence;\n    this.dmText = context.dmText;\n    this.isDynamic = context.isDynamic;\n    this.computedOutOfDetail = context.computedOutOfDetail;\n  }\n\n}\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n// tslint:disable-next-line:directive-class-suffix\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\n\n\nlet BaseControlBaseComponent = /*#__PURE__*/(() => {\n  class BaseControlBaseComponent {\n    constructor() {\n      this.clicked = new EventEmitter();\n      this.getfocus = new EventEmitter();\n      this.losefocus = new EventEmitter();\n    }\n    /**\r\n     * Component name of base control component\r\n     */\n\n\n    get componentName() {\n      return '';\n    }\n    /**\r\n     * Editable component ref to execute the highlight (SelectText)\r\n     */\n\n\n    get editable() {\n      return this._editable;\n    }\n\n    set editable(value) {\n      this._editable = value;\n    }\n    /**\r\n     * Applies active class to customize active component.\r\n     */\n\n\n    applyActiveClass() {}\n    /**\r\n     * Removes active class that customizes active component.\r\n     */\n\n\n    removeActiveClass() {}\n\n  }\n\n  /**\r\n   * Selected row css class of base control base component\r\n   */\n\n  /**\r\n   * Enable high light ccs class of base control base component\r\n   */\n\n  /**\r\n   * Disable high light ccs class of base control base component\r\n   */\n\n  /**\r\n   * Enable focus rect ccs class of base control base component\r\n   */\n\n  /**\r\n   * Disable focus rect ccs class of base control base component\r\n   */\n\n  /**\r\n   * UpperCase ccs class of base control base component\r\n   */\n  BaseControlBaseComponent.selectedRowCssClass = 'selectedRow';\n  BaseControlBaseComponent.enableHighLightCssClass = 'enableHighLight';\n  BaseControlBaseComponent.disableHighLightCssClass = 'disableHighLight';\n  BaseControlBaseComponent.enableFocusRectCssClass = 'enableFocusRect';\n  BaseControlBaseComponent.disableFocusRectCssClass = 'disableFocusRect';\n  BaseControlBaseComponent.upperCaseCSSClass = 'upperCaseField';\n\n  BaseControlBaseComponent.ɵfac = function BaseControlBaseComponent_Factory(t) {\n    return new (t || BaseControlBaseComponent)();\n  };\n\n  BaseControlBaseComponent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: BaseControlBaseComponent,\n    inputs: {\n      dataManagerContext: \"dataManagerContext\",\n      class: \"class\"\n    },\n    outputs: {\n      clicked: \"clicked\",\n      getfocus: \"getfocus\",\n      losefocus: \"losefocus\"\n    }\n  });\n  return BaseControlBaseComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nclass ColumnContext {\n  constructor(model, dmContext) {\n    this.model = model;\n    this.dmContext = dmContext;\n  }\n  /**\r\n   * Gets a valid column name\r\n   */\n\n\n  getValidColumnName() {\n    return this.model.ColumnId ? this.model.Name === 'name' ? '_name' : this.model.Name : undefined;\n  }\n  /**\r\n   * @description\r\n   * The component unique identifier.\r\n   * @returns { string }\r\n   */\n\n\n  get id() {\n    return this.model.UniqueID ? this.model.UniqueID : this.model.id;\n  }\n\n}\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nclass CommandName {}\n\nCommandName.updateBundle = 'UPDATE_BUNDLE';\nCommandName.updateBundleDelay = `${CommandName.updateBundle}_DELAYED`;\nCommandName.testCommand = 'TestCommand';\nCommandName.updatedmrowandcolumn = 'UPDATE_DM_ROW_AND_COLUMN';\nCommandName.updateClickedDmRow = 'UPDATE_CLICKED_DM_ROW';\nCommandName.objectAtPointer = 'UPDATE_OBJECT_AT_POINTER';\nCommandName.updateFirstRowOnPage = 'UPDATE_FIRST_ROW_ON_PAGE';\nCommandName.updateDraggedObject = 'UPDATE_DRAGGED_OBJECT';\nCommandName.updateDDDMCurrentRow = 'UPDATE_DDDM_CURRENT_ROW';\nCommandName.updateTreeViewEditLabel = 'UPDATE_TREE_VIEW_EDIT_LABEL';\nCommandName.updateFocusedControl = 'UPDATE_FOCUSED_CONTROL';\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n/**\r\n * This service is used to send information from datawindows to dropdowndatawindow\r\n */\n\nlet DmInteractionService = /*#__PURE__*/(() => {\n  class DmInteractionService {\n    constructor() {\n      this.clickedSource = new Subject();\n      this.datamanagerSource = new Subject();\n      this.scrollSource = new Subject();\n      this.filterRows = new Subject();\n      this.rowsAmount = new Subject();\n      this.moveDDDWSubject = new Subject();\n      this.internalDataManagerSource = new Subject();\n    }\n    /**\r\n     *  Observable propert subscribed in dropdownDataWindow\r\n     */\n\n\n    get internalDataManager() {\n      return this.internalDataManagerSource.asObservable();\n    }\n\n    registerInternalDataManager(dataManager) {\n      this.internalDataManagerSource.next(dataManager);\n    }\n    /**\r\n     *  Observable propert subscribed in dropdownDataWindow\r\n     */\n\n\n    get clicked() {\n      return this.clickedSource.asObservable();\n    }\n    /**\r\n     *  Observable property subscribed in dropdownDataWindow\r\n     */\n\n\n    get datamanager() {\n      return this.datamanagerSource.asObservable();\n    }\n    /**\r\n     *  Observable property subscribed in dropdownDataWindow\r\n     */\n\n\n    get scroll() {\n      return this.scrollSource.asObservable();\n    }\n    /**\r\n     * Gets filter\r\n     */\n\n\n    get filter() {\n      return this.filterRows.asObservable();\n    }\n\n    get rows() {\n      return this.rowsAmount.asObservable();\n    }\n    /**\r\n     * Subscription to handle keyboard interaction\r\n     * with dropdownDataWindow\r\n     */\n\n\n    get moveDDW() {\n      return this.moveDDDWSubject.asObservable();\n    }\n    /**\r\n     * Is triggered by datawindow and contains a selected row.\r\n     *\r\n     * @param state datawindow row\r\n     */\n\n\n    clickedRow(row) {\n      this.clickedSource.next(row);\n    }\n    /**\r\n     * Is triggered by datwindow when custom scrollbar.\r\n     *\r\n     * @param state datawindow row\r\n     */\n\n\n    scrollFlag(row) {\n      this.scrollSource.next(row);\n    }\n    /**\r\n     * Is triggered by datwindow and contains datawindow datamanager information.\r\n     *\r\n     * @param state datawindow row\r\n     */\n\n\n    datamanagerData(datamanager) {\n      this.datamanagerSource.next(datamanager);\n    }\n    /**\r\n     * Filters rows\r\n     * @param filter the filter to apply\r\n     */\n\n\n    applyFilter(filter) {\n      this.filterRows.next(filter);\n    }\n    /**\r\n     * Sets the amount of retrieved rows\r\n     * @param rows the amount of rows\r\n     */\n\n\n    setRetrievedRows(rows) {\n      this.rowsAmount.next(rows);\n    }\n    /**\r\n     * Moves dddwaction\r\n     * @param moves the move action\r\n     */\n\n\n    moveDDDWAction(moves) {\n      this.moveDDDWSubject.next(moves);\n    }\n\n  }\n\n  DmInteractionService.ɵfac = function DmInteractionService_Factory(t) {\n    return new (t || DmInteractionService)();\n  };\n\n  DmInteractionService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: DmInteractionService,\n    factory: DmInteractionService.ɵfac,\n    providedIn: 'root'\n  });\n  return DmInteractionService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet MessageCommandService = /*#__PURE__*/(() => {\n  class MessageCommandService {\n    constructor() {\n      this.subject = new Subject();\n    }\n    /**\r\n     * Sends message\r\n     * @param data Message data\r\n     */\n\n\n    sendMessage(data) {\n      this.subject.next(data);\n    }\n    /**\r\n     * Clear message\r\n     */\n\n\n    clearMessage() {\n      this.subject.next();\n    }\n    /**\r\n     * Gets current message\r\n     */\n\n\n    getMessage() {\n      return this.subject.asObservable();\n    }\n\n  }\n\n  MessageCommandService.ɵfac = function MessageCommandService_Factory(t) {\n    return new (t || MessageCommandService)();\n  };\n\n  MessageCommandService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MessageCommandService,\n    factory: MessageCommandService.ɵfac,\n    providedIn: 'root'\n  });\n  return MessageCommandService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet UpdateBundleService = /*#__PURE__*/(() => {\n  class UpdateBundleService {\n    constructor(service, messageCommandService) {\n      this.service = service;\n      this.messageCommandService = messageCommandService;\n      this.currentDataManagerId = '';\n      this.bindCommandGenerator = this.commandGenerator.bind(this);\n      this.service.core.getEvent().publish(Events.PreActionCommandGeneratorRegistration, this.bindCommandGenerator);\n      this.DataManagerDeltas = new Dictionary();\n      this.OriginalData = new Dictionary();\n      this.subscription = this.messageCommandService.getMessage().subscribe(data => this.processNewData(data));\n      this.delayed = false;\n      this.updateData = true;\n      this.forceDirty = false;\n    }\n    /**\r\n     * Sets updateData property\r\n     * @param value boolean value\r\n     */\n\n\n    setUpdateData(value) {\n      this.updateData = value;\n    }\n    /**\r\n     * Returns updateData property\r\n     */\n\n\n    getUpdateData() {\n      return this.updateData;\n    }\n    /**\r\n     * Returns delayed property\r\n     */\n\n\n    getDelayed() {\n      return this.delayed;\n    }\n    /**\r\n     * Sets delayed valueproperty\r\n     * @param value Boolean value\r\n     */\n\n\n    setDelayedOption(value) {\n      this.delayed = value;\n    }\n    /**\r\n     * Sets forceDirty valueproperty\r\n     * @param value Boolean value\r\n     */\n\n\n    setForceDirtyOption(value) {\n      this.forceDirty = value;\n    }\n    /**\r\n     * Gets forceDirty property\r\n     */\n\n\n    getForceDirty() {\n      return this.forceDirty;\n    }\n    /**\r\n     * Sets command property\r\n     * @param value  any IRequestCommand\r\n     */\n\n\n    setCommand(value) {\n      this.command = value;\n    }\n    /**\r\n     * Returns command property\r\n     */\n\n\n    getCommand() {\n      return this.command;\n    }\n    /**\r\n     * Sets DataManagerDeltas\r\n     * @param value IDictionary value with datamanagerdeltas\r\n     */\n\n\n    setDataManagerDeltas(value) {\n      this.DataManagerDeltas = value;\n    }\n    /**\r\n     * Returns DataManagerDeltas property\r\n     */\n\n\n    getDataManagerDeltas() {\n      return this.DataManagerDeltas;\n    }\n    /**\r\n     * Gets OriginalData property\r\n     */\n\n\n    getOriginalData() {\n      return this.OriginalData;\n    }\n    /**\r\n     * Updates original data\r\n     * Using the dirtycells property\r\n     * @param row the current row index\r\n     * @param col the current column index\r\n     * @param value the value that will be updated\r\n     */\n\n\n    updateOriginalData(row, col, value) {\n      if (this.OriginalData && this.OriginalData.value(row.toString())) {\n        this.OriginalData.value(row.toString())[col] = value;\n      }\n    }\n    /**\r\n     * Sets newBundleCopy property\r\n     * @param value  newBundleCopy new value\r\n     */\n\n\n    setNewBundle(value) {\n      this.newBundleCopy = value;\n    }\n    /**\r\n     * Returns  newBundleCopy property\r\n     */\n\n\n    getNewBundle() {\n      return this.newBundleCopy;\n    }\n    /**\r\n     * Initializes command execution, triggered on command service\r\n     * @param data DataContextBundle object\r\n     */\n\n\n    runner(data) {\n      if (!WebMapService.currentService.config.useBundleEvent) {\n        this.updateRow(data, this.DataManagerDeltas, this.OriginalData);\n      }\n    }\n\n    updateRow(dataBundle, dataManager, originalData) {\n      const key = `${dataBundle.context.rowIndex}`;\n\n      if (this.isEquals(dataBundle.context.row, originalData.value(key))) {\n        dataManager.remove(key);\n        return;\n      }\n\n      const propertyName = `${dataBundle.columnId}`;\n      const isModified = dataManager.containsKey(key);\n\n      if (!isModified) {\n        addNewDicProperty(propertyName, dataBundle, dataManager, key);\n      } else {\n        addNewProperty(dataManager, key, propertyName, dataBundle);\n      }\n    }\n    /**\r\n     * Returns if rows are equal\r\n     * @param row Row Object\r\n     * @param rowCompare  Row object\r\n     */\n\n\n    isEquals(row, rowCompare) {\n      let i = 0; // tslint:disable-next-line:forin\n\n      for (const key in row) {\n        if (row.hasOwnProperty(key) && rowCompare) {\n          if (key !== '0' && row[key] !== rowCompare[key]) {\n            rowCompare[key] = row[key];\n            return false;\n          }\n        }\n\n        i++;\n      }\n\n      return true;\n    }\n    /**\r\n     * Returns if original data is different from current logic value\r\n     * @param logicValue Current column value\r\n     * @param row Row index\r\n     * @param col Column index\r\n     * @param assign Determines if the value must be reassigned when\r\n     * the logicValue is different, Default value: true the value is reassigned\r\n     */\n\n\n    isDifferent(logicValue, row, col, assign = true) {\n      const rowObject = this.OriginalData.value(row.toString());\n\n      if (logicValue !== rowObject[col]) {\n        if (assign) {\n          rowObject[col] = logicValue;\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n    /**\r\n     * Clear command\r\n     */\n\n\n    clear() {\n      this.DataManagerDeltas = new Dictionary();\n      this.command = null;\n      this.delayed = false;\n      return true;\n    }\n    /**\r\n     * Procces new data\r\n     * @param data message new data\r\n     */\n\n\n    processNewData(data) {\n      this.newBundleCopy = _.cloneDeep(data.bundle);\n      this.newBundleCopy.splice(0, 1);\n\n      if (this.currentDataManagerId !== data.id) {\n        this.OriginalData = new Dictionary();\n      }\n\n      this.currentDataManagerId = data.id;\n      this.addNewData(data);\n    }\n    /**\r\n     * Adds new data\r\n     * @param data new data\r\n     */\n\n\n    addNewData(data) {\n      let index = data.stIndex;\n      data.rows.forEach(element => {\n        const copyElement = _.cloneDeep(element);\n\n        delete copyElement[0];\n        this.OriginalData.add(`${index}`, copyElement);\n        index++;\n      });\n    }\n    /**\r\n     * This function calls createCommand function if updateData property is valid\r\n     */\n\n\n    commandGenerator() {\n      if (this.updateData) {\n        const rowsIndex = this.DataManagerDeltas.keys();\n\n        if (rowsIndex.length > 0) {\n          return this.createCommand(rowsIndex);\n        }\n      }\n\n      return null;\n    }\n    /**\r\n     * Returns deep cloned  newBundleCopy\r\n     * @param rows array with rows\r\n     */\n\n\n    updateBundleData(rows) {\n      this.newBundleCopy[2] = rows;\n      return _.cloneDeep(this.newBundleCopy);\n    }\n\n    ngOnDestroy() {\n      this.service.core.getEvent().publish(Events.PreActionCommandGeneratorDeregistration, this.bindCommandGenerator);\n      this.subscription.unsubscribe();\n    }\n    /**\r\n     * Creates updateBundleDelay basic structure\r\n     * @param rowsIndex Array with row index\r\n     */\n\n\n    createCommand(rowsIndex) {\n      const CurrentCommandName = this.delayed ? CommandName.updateBundleDelay : CommandName.updateBundle;\n      const updatedRows = [];\n      const updatedDataRows = [];\n      let dirtyColumns = '';\n      rowsIndex.forEach(key => {\n        dirtyColumns = this.getDirties(dirtyColumns, key, updatedRows, updatedDataRows);\n      });\n      const bundle = this.updateBundleData(updatedDataRows);\n      const dataManagerId = this.currentDataManagerId;\n      const forceDirty = this.forceDirty;\n      this.clear();\n      return {\n        receiverId: dataManagerId,\n        command: CurrentCommandName,\n        data: {\n          dataManagerId,\n          updatedRows,\n          bundle,\n          dirtyColumns,\n          forceDirty\n        }\n      };\n    }\n\n    getDirties(tempProperties, key, updatedRows, updatedDataRows) {\n      tempProperties += `@${key}:`;\n      const properties = this.DataManagerDeltas.value(key);\n      const NameProperties = properties.keys();\n      const dataColumns = properties.values();\n\n      for (let indexProperties = 0; indexProperties < properties.length; indexProperties++) {\n        tempProperties = addDirtyProperty(dataColumns, indexProperties, updatedRows, updatedDataRows, tempProperties, NameProperties);\n      }\n\n      return tempProperties;\n    }\n\n  }\n\n  UpdateBundleService.ɵfac = function UpdateBundleService_Factory(t) {\n    return new (t || UpdateBundleService)(i0.ɵɵinject(i1.WebMapService), i0.ɵɵinject(MessageCommandService));\n  };\n\n  UpdateBundleService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UpdateBundleService,\n    factory: UpdateBundleService.ɵfac,\n    providedIn: 'root'\n  });\n  return UpdateBundleService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction addDirtyProperty(dataColumns, i, updatedRows, updatedDataRows, tempProperties, NameProperties) {\n  const property = dataColumns[i];\n\n  if (i === 0) {\n    updatedRows.push(property.context.rowIndex);\n    updatedDataRows.push(_.cloneDeep(property.context.row));\n  }\n\n  tempProperties += `${NameProperties[i]},`;\n  return tempProperties;\n}\n\nfunction addNewProperty(dataManager, key, propertyName, dataBundle) {\n  const dictProperties = dataManager.value(key);\n  const isProperty = dictProperties.containsKey(propertyName);\n\n  if (!isProperty) {\n    dictProperties.add(propertyName, dataBundle);\n  }\n}\n\nfunction addNewDicProperty(propertyName, dataBundle, dataManager, key) {\n  const dictProperties = new Dictionary();\n  dictProperties.add(propertyName, dataBundle);\n  dataManager.add(key, dictProperties);\n}\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet UpdateDMRowAndColumnService = /*#__PURE__*/(() => {\n  class UpdateDMRowAndColumnService {\n    /* c8 ignore start */\n    constructor(service) {\n      this.service = service;\n      /* c8 ignore stop */\n      // Command properties\n\n      this.dataManagerId = undefined;\n      this.currentRow = undefined;\n      this.currentControlName = undefined;\n      this.displayedRowCount = undefined;\n      this.currentPage = undefined;\n      this.rowAndColCommandEnabled = false;\n      this.bindCommandGenerator = this.commandGenerator.bind(this);\n      this.service.core.getEvent().publish(Events.PreActionCommandGeneratorRegistration, this.bindCommandGenerator);\n    }\n    /**\r\n     * Creates UPDATE_DM_ROW_AND_COL\r\n     */\n\n\n    commandGenerator() {\n      if (!this.rowAndColCommandEnabled) {\n        this.command = null;\n        return null;\n      } else {\n        this.command = {\n          receiverId: this.dataManagerId,\n          command: 'UPDATE_DM_ROW_AND_COL',\n          data: {\n            dataManagerId: this.dataManagerId,\n            currentRow: this.currentRow,\n            currentControlName: this.currentControlName,\n            displayedRowCount: this.displayedRowCount,\n            currentPage: this.currentPage\n          }\n        };\n        this.clear();\n        return this.command;\n      }\n    }\n    /**\r\n     * Sets dataManagerId\r\n     * @param id dataManagerId property\r\n     */\n\n\n    setDatamanagerId(id) {\n      this.dataManagerId = id;\n    }\n    /**\r\n     * Sets new current row\r\n     * @param currentRow The current row\r\n     */\n\n\n    setcurrentRow(currentRow) {\n      this.currentRow = currentRow;\n    }\n    /**\r\n     * Sets currentControlName property\r\n     * @param currentControlName The current control name\r\n     */\n\n\n    setcurrentControlName(currentControlName) {\n      this.currentControlName = currentControlName;\n    }\n    /**\r\n     * Sets displayedRowCount\r\n     * @param displayedRowCount Data Manager page size\r\n     */\n\n\n    setdisplayedRowCount(displayedRowCount) {\n      this.displayedRowCount = displayedRowCount;\n    }\n    /**\r\n     * Sets current page property\r\n     * @param currentPage Current page index\r\n     */\n\n\n    setcurrentPage(currentPage) {\n      this.currentPage = currentPage;\n    }\n    /**\r\n     * Ruuner function  assign command values\r\n     * @param data object with command values\r\n     */\n\n\n    runner(data) {\n      this.setDatamanagerId(data.args.datamanagerid);\n      this.setcurrentRow(data.args.currentRow);\n      this.setcurrentControlName(data.args.currentControlName);\n      this.setdisplayedRowCount(data.args.displayedRowCount);\n      this.setcurrentPage(data.args.currentPage);\n      this.rowAndColCommandEnabled = true;\n    }\n\n    clear() {\n      this.rowAndColCommandEnabled = false;\n      this.dataManagerId = undefined;\n      this.currentRow = undefined;\n      this.currentControlName = undefined;\n      this.displayedRowCount = undefined;\n      return true;\n    }\n\n    ngOnDestroy() {\n      this.service.core.getEvent().publish(Events.PreActionCommandGeneratorDeregistration, this.bindCommandGenerator);\n    }\n\n  }\n\n  UpdateDMRowAndColumnService.ɵfac = function UpdateDMRowAndColumnService_Factory(t) {\n    return new (t || UpdateDMRowAndColumnService)(i0.ɵɵinject(i1.WebMapService));\n  };\n\n  UpdateDMRowAndColumnService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UpdateDMRowAndColumnService,\n    factory: UpdateDMRowAndColumnService.ɵfac,\n    providedIn: 'root'\n  });\n  return UpdateDMRowAndColumnService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet UpdateClickedDmRowService = /*#__PURE__*/(() => {\n  class UpdateClickedDmRowService {\n    /* c8 ignore start */\n    constructor(service) {\n      this.service = service;\n      this.bindCommandGenerator = this.commandGenerator.bind(this);\n      this.service.core.getEvent().publish(Events.PreActionCommandGeneratorRegistration, this.bindCommandGenerator);\n    }\n    /**\r\n     * Creates updateClickedDmRow\r\n     */\n\n\n    commandGenerator() {\n      if (this.gridClickedDataManagerId === undefined || !this.service.core.getModel(this.gridClickedDataManagerId)) {\n        return null;\n      }\n\n      this.command = {\n        receiverId: this.gridClickedDataManagerId,\n        command: CommandName.updateClickedDmRow,\n        data: {\n          dataManagerId: this.gridClickedDataManagerId,\n          row: this.gridClickedRow\n        }\n      };\n      this.clear();\n      return this.command;\n    }\n    /**\r\n     * Sets updateClickedDmRow values\r\n     * @param data command values\r\n     */\n\n\n    runner(data) {\n      this.gridClickedDataManagerId = data.dataManagerId;\n      this.gridClickedRow = data.row;\n    }\n    /**\r\n     * Clear commands\r\n     */\n\n\n    clear() {\n      this.gridClickedDataManagerId = undefined;\n      return true;\n    }\n\n    ngOnDestroy() {\n      this.service.core.getEvent().publish(Events.PreActionCommandGeneratorDeregistration, this.bindCommandGenerator);\n    }\n\n  }\n\n  UpdateClickedDmRowService.ɵfac = function UpdateClickedDmRowService_Factory(t) {\n    return new (t || UpdateClickedDmRowService)(i0.ɵɵinject(i1.WebMapService));\n  };\n\n  UpdateClickedDmRowService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UpdateClickedDmRowService,\n    factory: UpdateClickedDmRowService.ɵfac,\n    providedIn: 'root'\n  });\n  return UpdateClickedDmRowService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet ObjectAtPointerService = /*#__PURE__*/(() => {\n  class ObjectAtPointerService {\n    /* c8 ignore start */\n    constructor(service) {\n      this.service = service;\n      this.bindCommandGenerator = this.commandGenerator.bind(this);\n      this.service.core.getEvent().publish(Events.PreActionCommandGeneratorRegistration, this.bindCommandGenerator);\n    }\n    /**\r\n     * Creates object at pointer command\r\n     */\n\n\n    commandGenerator() {\n      if (this.dmId === undefined || !this.service.core.getModel(this.dmId)) {\n        return null;\n      }\n\n      this.command = {\n        receiverId: this.dmId,\n        command: CommandName.objectAtPointer,\n        data: {\n          dataManagerId: this.dmId,\n          objectAtPointer: this.objectAtPointer\n        }\n      };\n      this.clear();\n      return this.command;\n    }\n\n    get objectAtPointer() {\n      return `${this.currentControlName}\\t${this.currentRowIndex}`;\n    }\n    /**\r\n     * Sets command values\r\n     * @param data command values\r\n     */\n\n\n    runner(data) {\n      this.dmId = data.dataManagerId;\n      this.currentControlName = data.controlName;\n      this.currentRowIndex = data.rowIndex;\n    }\n    /**\r\n     * Clear commands\r\n     */\n\n\n    clear() {\n      this.dmId = undefined;\n      this.currentControlName = undefined;\n      this.currentRowIndex = undefined;\n      return true;\n    }\n\n    ngOnDestroy() {\n      this.service.core.getEvent().publish(Events.PreActionCommandGeneratorDeregistration, this.bindCommandGenerator);\n    }\n\n  }\n\n  ObjectAtPointerService.ɵfac = function ObjectAtPointerService_Factory(t) {\n    return new (t || ObjectAtPointerService)(i0.ɵɵinject(i1.WebMapService));\n  };\n\n  ObjectAtPointerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ObjectAtPointerService,\n    factory: ObjectAtPointerService.ɵfac,\n    providedIn: 'root'\n  });\n  return ObjectAtPointerService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet UpdateFirstRowOnPageService = /*#__PURE__*/(() => {\n  class UpdateFirstRowOnPageService {\n    /* c8 ignore start */\n    constructor(service) {\n      this.service = service;\n      this.dataManagerId = undefined;\n      this.firstRow = undefined;\n      this.bindCommandGenerator = this.commandGenerator.bind(this);\n      this.service.core.getEvent().publish(Events.PreActionCommandGeneratorRegistration, this.bindCommandGenerator);\n    }\n    /**\r\n     * Creates updateFirstRowOnPage\r\n     */\n\n\n    commandGenerator() {\n      if (this.dataManagerId === undefined || !this.service.core.getModel(this.dataManagerId)) {\n        return null;\n      }\n\n      this.command = {\n        receiverId: this.dataManagerId,\n        command: CommandName.updateFirstRowOnPage,\n        data: {\n          dataManagerId: this.dataManagerId,\n          firstRow: this.firstRow\n        }\n      };\n      this.clear();\n      return this.command;\n    }\n    /**\r\n     * Sets updateFirstRowOnPage values\r\n     * @param data command values\r\n     */\n\n\n    runner(data) {\n      this.dataManagerId = data.dataManagerId;\n      this.firstRow = data.firstRow;\n    }\n    /**\r\n     * Clear commands\r\n     */\n\n\n    clear() {\n      this.dataManagerId = undefined;\n      this.firstRow = undefined;\n      return true;\n    }\n\n    ngOnDestroy() {\n      this.service.core.getEvent().publish(Events.PreActionCommandGeneratorDeregistration, this.bindCommandGenerator);\n    }\n\n  }\n\n  UpdateFirstRowOnPageService.ɵfac = function UpdateFirstRowOnPageService_Factory(t) {\n    return new (t || UpdateFirstRowOnPageService)(i0.ɵɵinject(i1.WebMapService));\n  };\n\n  UpdateFirstRowOnPageService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UpdateFirstRowOnPageService,\n    factory: UpdateFirstRowOnPageService.ɵfac,\n    providedIn: 'root'\n  });\n  return UpdateFirstRowOnPageService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nvar WindowType = /*#__PURE__*/(() => {\n  (function (WindowType) {\n    WindowType[WindowType[\"child\"] = 0] = \"child\";\n    WindowType[WindowType[\"main\"] = 1] = \"main\";\n    WindowType[WindowType[\"mdi\"] = 2] = \"mdi\";\n    WindowType[WindowType[\"mdihelp\"] = 3] = \"mdihelp\";\n    WindowType[WindowType[\"popup\"] = 4] = \"popup\";\n    WindowType[WindowType[\"response\"] = 5] = \"response\";\n  })(WindowType || (WindowType = {}));\n\n  return WindowType;\n})();\n\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\nvar ArrangeType = /*#__PURE__*/(() => {\n  (function (ArrangeType) {\n    ArrangeType[ArrangeType[\"Cascade\"] = 0] = \"Cascade\";\n    ArrangeType[ArrangeType[\"Layer\"] = 1] = \"Layer\";\n    ArrangeType[ArrangeType[\"Tile\"] = 2] = \"Tile\";\n    ArrangeType[ArrangeType[\"TileHorizontal\"] = 3] = \"TileHorizontal\";\n    ArrangeType[ArrangeType[\"Icons\"] = 4] = \"Icons\";\n  })(ArrangeType || (ArrangeType = {}));\n\n  return ArrangeType;\n})();\n\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\nlet ActiveWindowService = /*#__PURE__*/(() => {\n  class ActiveWindowService {\n    /* instabul ignore next */\n    constructor(wmService) {\n      this.wmService = wmService;\n      this.orderWindow = [];\n      /* Stores the windows in the order they have been opened */\n\n      this.openedWindows = [];\n      this.urlActiveWindow = 'api/Window/SetCurrentActiveSheet';\n    }\n    /**\r\n     * Sends message\r\n     * @param data The active window Id\r\n     */\n\n\n    setActiveWindow(data) {\n      // do nothing if are !=, because its the same window\n      if (data.id !== this.activeWindow) {\n        let currentWindow = this.getCurrentWindow();\n\n        if (currentWindow == null) {\n          const index = this.orderWindow.length - 1;\n          currentWindow = this.orderWindow[index];\n        }\n\n        if (isCurrentWindowExist(currentWindow, data)) {\n          resetCurrentHotKeys(currentWindow);\n        }\n\n        const currentWindowIndex = this.orderWindow.lastIndexOf(data);\n\n        if (currentWindowIndex === -1) {\n          this.setCurrentWindow(data);\n        } else {\n          if (data.windowType !== WindowType.mdi && data.windowType !== WindowType.mdihelp) {\n            this.activeWindow = data.id;\n            this.updateCurrentWindowInServer(data);\n            this.putWindowAsLast(data, currentWindowIndex);\n          }\n        }\n      }\n    }\n    /**\r\n     * Move the pbWindow to the lastposition\r\n     * @param data current PBWindowComponent\r\n     */\n\n\n    putWindowAsLast(data, index) {\n      this.orderWindow.splice(index, 1);\n      this.orderWindow.push(data);\n    }\n    /**\r\n     * Removes the window from windows list collection\r\n     * @param data The window object\r\n     */\n\n\n    removeFromOpenedWindows(data) {\n      const idx = this.openedWindows.indexOf(data);\n      /* c8 ignore else */\n\n      if (idx > -1) {\n        this.openedWindows.splice(idx, 1);\n      }\n    }\n    /**\r\n     * Delete the current window and check if there is a new activeWindow\r\n     */\n\n\n    closeWindow(data) {\n      this.removeFromOpenedWindows(data);\n      let lastItem = this.orderWindow.length - 1;\n\n      if (data === this.orderWindow[lastItem]) {\n        this.orderWindow.pop();\n        lastItem = this.orderWindow.length - 1;\n\n        if (this.orderWindow[lastItem]) {\n          this.activeWindow = this.orderWindow[lastItem].id; // Temporary change to avoid multiple errors between v5 and v4 versions\n          // PBJ(v4) sends a command to set focus after closing a window, so if\n          // this service applies focus to the last window in orderWindow collection,\n          // the current window could be different from window sent by the command.\n          // PBNet(v5) does not send anything, so after closing a window focus\n          // is missed if focus is not applied to the last window in orderWindow collection.\n\n          if (this.wmService.config.webMapVersion === WMConstants.version5) {\n            this.orderWindow[lastItem].activeEvent();\n            this.orderWindow[lastItem].applyFocus();\n            refreshActiveWindowMenu(this.orderWindow[lastItem]);\n          }\n        } else {\n          this.activeWindow = undefined;\n        }\n      }\n    }\n    /**\r\n     * Gets current activeWindow\r\n     */\n\n\n    getActiveWindow() {\n      return this.activeWindow;\n    }\n    /**\r\n     * Determines whether id pass as parameter is active window or not.\r\n     * @param id Id of window to validate if is active window\r\n     * @returns true if active window\r\n     */\n\n\n    isActiveWindow(id) {\n      return this.activeWindow === id;\n    }\n    /**\r\n     * Retrieves only the windows that must be shown in the windows list menu options\r\n     */\n\n\n    getOpenedWindowsForMenu() {\n      return this.openedWindows.filter(window => window.model != null && window.model.MenuName != null && window.menuPosition != null);\n    }\n    /**\r\n     * Retrieves the windows in the current order (the active window at the end) that are not minimized\r\n     */\n\n\n    getOrderWindowsNotMinimized() {\n      return this.orderWindow.filter(window => window.model != null && window.model.MenuName != null && window.menuPosition != null && window.model.WindowState !== 1);\n    }\n    /**\r\n     * ArrangeWindowHandler. The subscription is in the window component.\r\n     * This is only for MDI windows\r\n     * @param command The ARRANGE_WINDOW arguments\r\n     */\n\n\n    arrangeWindow(command) {\n      if (command.arrangeType === ArrangeType.Cascade) {\n        this.cascadeWindows();\n      } else {// TODO: Implement additional arrange types\n      }\n    }\n    /**\r\n     * Cascade window arrange\r\n     */\n\n\n    cascadeWindows() {\n      const openedWinArray = this.getOrderWindowsNotMinimized();\n      /* c8 ignore else */\n\n      if (openedWinArray && openedWinArray.length > 0) {\n        let margin = 0;\n        openedWinArray.forEach((element, index) => {\n          // Only 10 windows must be arranged in the same cascade\n          if (index % 10 === 0) {\n            margin = 0;\n          } else if (index > 0) {\n            // Getting the title height in order to used it as margin. I\n            // This makes the title bar visible when the windows are arranged\n            margin += element.titleBarHeight;\n          }\n\n          element.x = element.y = margin;\n          element.detectChanges();\n        });\n      }\n    }\n    /**\r\n     * create a request to send the update of the currentWindow\r\n     */\n\n\n    updateCurrentWindowInServer(data) {\n      if (this.wmService.config.webMapVersion === WMConstants.version5) {\n        this.wmService.fetch(this.urlActiveWindow, data.id).subscribe();\n      }\n    }\n    /**\r\n     * set the current window and save the reference in the array of windows\r\n     */\n\n\n    setCurrentWindow(data) {\n      this.activeWindow = data.id;\n      this.orderWindow.push(data); // Add the new window in the collection of windows list\n\n      this.openedWindows.push(data);\n    }\n    /**\r\n     * return the active window when is not a mdi or mdiHelp\r\n     * and is equals to the current active window\r\n     */\n\n\n    getCurrentWindow() {\n      return this.orderWindow.find(element => element.id === this.activeWindow && element.windowType !== WindowType.mdi && element.windowType !== WindowType.mdihelp);\n    }\n\n  }\n\n  ActiveWindowService.ɵfac = function ActiveWindowService_Factory(t) {\n    return new (t || ActiveWindowService)(i0.ɵɵinject(i1.WebMapService));\n  };\n\n  ActiveWindowService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ActiveWindowService,\n    factory: ActiveWindowService.ɵfac,\n    providedIn: 'root'\n  });\n  return ActiveWindowService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * remove the current hotkeys from the document.body\r\n * for the current window and its child\r\n */\n\n\nfunction resetCurrentHotKeys(currentWindow) {\n  currentWindow.removeInstances();\n\n  if (currentWindow.model && currentWindow.model.ParentWindow) {\n    currentWindow.resetParent();\n  }\n}\n/**\r\n * Verify if current windows is a valid window\r\n * @param currentWindow the current window to inspect\r\n * @param data the new active window\r\n */\n\n\nfunction isCurrentWindowExist(currentWindow, data) {\n  return currentWindow && data.windowType !== WindowType.mdi && data.windowType !== WindowType.mdihelp;\n}\n/**\r\n * Refreshs active window menu\r\n * Emulates a ChangeMenuCommand action after\r\n * returns the focus to the last window on the active window stack\r\n * @param window\r\n */\n\n\nfunction refreshActiveWindowMenu(window) {\n  if (window && window.menu) {\n    window.menu.Refresh = true;\n  }\n}\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet UpdateDraggedObjectService = /*#__PURE__*/(() => {\n  class UpdateDraggedObjectService {\n    /* c8 ignore start */\n    constructor(service, activeWindow) {\n      this.service = service;\n      this.activeWindow = activeWindow;\n      /* c8 ignore stop */\n\n      /**\r\n       * Internal field that holds the current dragged value\r\n       */\n\n      this.currentDragItemId = undefined;\n      this.registerEvent();\n    }\n\n    registerEvent() {\n      this.bindCommandGenerator = this.commandGenerator.bind(this);\n      this.service.core.getEvent().publish(Events.PreActionCommandGeneratorRegistration, this.commandGenerator.bind(this));\n    }\n    /**\r\n     * Generates the UPDATE_DRAGGED_OBJECT command.\r\n     */\n\n\n    commandGenerator() {\n      const receiverId = this.activeWindow.getActiveWindow();\n\n      if (!receiverId || !this.currentDragItemId) {\n        return null;\n      }\n\n      this.command = {\n        receiverId,\n        command: 'UPDATE_DRAGGED_OBJECT',\n        data: {\n          Id: this.currentDragItemId.id,\n          MapperId: this.currentDragItemId.mapperId\n        }\n      };\n      this.clear();\n      return this.command;\n    }\n    /**\r\n     * Clear commands\r\n     */\n\n\n    clear() {\n      this.currentDragItemId = undefined;\n      return true;\n    }\n    /**\r\n     * Runners update dragged object service\r\n     * @param data\r\n     */\n\n\n    runner(data) {\n      this.currentDragItemId = {\n        id: data.id,\n        mapperId: data.mapperId\n      };\n    }\n\n    ngOnDestroy() {\n      this.service.core.getEvent().publish(Events.PreActionCommandGeneratorDeregistration, this.bindCommandGenerator);\n    }\n\n  }\n\n  UpdateDraggedObjectService.ɵfac = function UpdateDraggedObjectService_Factory(t) {\n    return new (t || UpdateDraggedObjectService)(i0.ɵɵinject(i1.WebMapService), i0.ɵɵinject(ActiveWindowService));\n  };\n\n  UpdateDraggedObjectService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UpdateDraggedObjectService,\n    factory: UpdateDraggedObjectService.ɵfac,\n    providedIn: 'root'\n  });\n  return UpdateDraggedObjectService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet UpdateDDDMCurrentRowService = /*#__PURE__*/(() => {\n  class UpdateDDDMCurrentRowService {\n    /* c8 ignore start */\n    constructor(service) {\n      this.service = service;\n      /* c8 ignore stop */\n      // Command properties\n\n      this.dataManagerId = undefined;\n      this.currentRow = undefined;\n      this.currentControlName = undefined;\n      this.displayedRowCount = undefined;\n      this.currentPage = undefined;\n      this.rowAndColCommandEnabled = false;\n      this.bindCommandGenerator = this.commandGenerator.bind(this);\n      this.service.core.getEvent().publish(Events.PreActionCommandGeneratorRegistration, this.bindCommandGenerator);\n    }\n    /**\r\n     * Creates UPDATE_DM_ROW_AND_COL\r\n     */\n\n\n    commandGenerator() {\n      if (this.dataManagerId != null && this.currentRow) {\n        this.command = {\n          receiverId: this.dataManagerId,\n          command: 'UPDATE_DDDM_CURRENT_ROW',\n          data: {\n            dataManagerId: this.dataManagerId,\n            currentRow: this.currentRow,\n            currentControlName: this.currentControlName,\n            displayedRowCount: this.displayedRowCount,\n            currentPage: this.currentPage\n          }\n        };\n      } else {\n        this.command = null;\n      }\n\n      this.clear();\n      return this.command;\n    }\n    /**\r\n     * Sets dataManagerId\r\n     * @param id dataManagerId property\r\n     */\n\n\n    setDatamanagerId(id) {\n      this.dataManagerId = id;\n    }\n    /**\r\n     * Sets new current row\r\n     * @param currentRow The current row\r\n     */\n\n\n    setcurrentRow(currentRow) {\n      this.currentRow = currentRow;\n    }\n    /**\r\n     * Sets currentControlName property\r\n     * @param currentControlName The current control name\r\n     */\n\n\n    setcurrentControlName(currentControlName) {\n      this.currentControlName = currentControlName;\n    }\n    /**\r\n     * Sets displayedRowCount\r\n     * @param displayedRowCount Data Manager page size\r\n     */\n\n\n    setdisplayedRowCount(displayedRowCount) {\n      this.displayedRowCount = displayedRowCount;\n    }\n    /**\r\n     * Sets current page property\r\n     * @param currentPage Current page index\r\n     */\n\n\n    setcurrentPage(currentPage) {\n      this.currentPage = currentPage;\n    }\n    /**\r\n     * Ruuner function  assign command values\r\n     * @param data object with command values\r\n     */\n\n\n    runner(data) {\n      this.setDatamanagerId(data.args.datamanagerid);\n      this.setcurrentRow(data.args.currentRow);\n      this.setcurrentControlName(data.args.currentControlName);\n      this.setdisplayedRowCount(data.args.displayedRowCount);\n      this.setcurrentPage(data.args.currentPage);\n    }\n\n    clear() {\n      this.rowAndColCommandEnabled = false;\n      this.dataManagerId = undefined;\n      this.currentRow = undefined;\n      this.currentControlName = undefined;\n      this.displayedRowCount = undefined;\n      return true;\n    }\n\n    ngOnDestroy() {\n      this.service.core.getEvent().publish(Events.PreActionCommandGeneratorDeregistration, this.bindCommandGenerator);\n    }\n\n  }\n\n  UpdateDDDMCurrentRowService.ɵfac = function UpdateDDDMCurrentRowService_Factory(t) {\n    return new (t || UpdateDDDMCurrentRowService)(i0.ɵɵinject(i1.WebMapService));\n  };\n\n  UpdateDDDMCurrentRowService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UpdateDDDMCurrentRowService,\n    factory: UpdateDDDMCurrentRowService.ɵfac,\n    providedIn: 'root'\n  });\n  return UpdateDDDMCurrentRowService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained here is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet UpdateFocusedControlService = /*#__PURE__*/(() => {\n  class UpdateFocusedControlService {\n    /* c8 ignore start */\n    constructor(service) {\n      this.service = service;\n      this.bindCommandGenerator = this.commandGenerator.bind(this);\n      this.service.core.getEvent().publish(Events.PreActionCommandGeneratorRegistration, this.bindCommandGenerator);\n    }\n    /**\r\n     * Creates updated focused control command\r\n     */\n\n\n    commandGenerator() {\n      if (this.ctrlId === undefined || !this.service.core.getModel(this.ctrlId)) {\n        return null;\n      }\n\n      this.command = {\n        receiverId: this.ctrlId,\n        command: CommandName.updateFocusedControl,\n        data: {\n          controlId: this.ctrlId\n        }\n      };\n      this.clear();\n      return this.command;\n    }\n    /**\r\n     * Sets command values\r\n     * @param data command values\r\n     */\n\n\n    runner(data) {\n      this.ctrlId = data.ctrlId;\n    }\n    /**\r\n     * Clear commands\r\n     */\n\n\n    clear() {\n      this.ctrlId = undefined;\n      return true;\n    }\n\n    ngOnDestroy() {\n      this.service.core.getEvent().publish(Events.PreActionCommandGeneratorDeregistration, this.bindCommandGenerator);\n    }\n\n  }\n\n  UpdateFocusedControlService.ɵfac = function UpdateFocusedControlService_Factory(t) {\n    return new (t || UpdateFocusedControlService)(i0.ɵɵinject(i1.WebMapService));\n  };\n\n  UpdateFocusedControlService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UpdateFocusedControlService,\n    factory: UpdateFocusedControlService.ɵfac,\n    providedIn: 'root'\n  });\n  return UpdateFocusedControlService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet CommandsService = /*#__PURE__*/(() => {\n  class CommandsService {\n    constructor(updateBundle, updatedmrowandcolumn, updateClickedDmRow, objectAtPointer, updateFirstRowOnPageService, updateDraggedObject, updateDDDMCurrentRowService, updateFocusedControl) {\n      this.updateBundle = updateBundle;\n      this.commandsRunner = new Dictionary();\n      this.addCommandRunner(CommandName.updateBundle, updateBundle);\n      this.addCommandRunner(CommandName.updatedmrowandcolumn, updatedmrowandcolumn);\n      this.addCommandRunner(CommandName.updateClickedDmRow, updateClickedDmRow);\n      this.addCommandRunner(CommandName.objectAtPointer, objectAtPointer);\n      this.addCommandRunner(CommandName.updateFirstRowOnPage, updateFirstRowOnPageService);\n      this.addCommandRunner(CommandName.updateDraggedObject, updateDraggedObject);\n      this.addCommandRunner(CommandName.updateDDDMCurrentRow, updateDDDMCurrentRowService);\n      this.addCommandRunner(CommandName.updateFocusedControl, updateFocusedControl);\n    }\n\n    removeCommandRunner(commandName) {\n      this.commandsRunner.remove(commandName);\n    }\n\n    addCommandRunner(commandName, command) {\n      this.commandsRunner.add(commandName, command);\n    }\n\n    getCommand(commandName) {\n      if (!this.commandsRunner.containsKey(commandName)) {\n        return undefined;\n      }\n\n      return this.commandsRunner.value(commandName);\n    }\n\n    run(commandName, data) {\n      if (!this.commandsRunner.containsKey(commandName)) {\n        return;\n      }\n\n      this.commandsRunner.value(commandName).runner(data);\n    }\n\n  }\n\n  CommandsService.ɵfac = function CommandsService_Factory(t) {\n    return new (t || CommandsService)(i0.ɵɵinject(UpdateBundleService), i0.ɵɵinject(UpdateDMRowAndColumnService), i0.ɵɵinject(UpdateClickedDmRowService), i0.ɵɵinject(ObjectAtPointerService), i0.ɵɵinject(UpdateFirstRowOnPageService), i0.ɵɵinject(UpdateDraggedObjectService), i0.ɵɵinject(UpdateDDDMCurrentRowService), i0.ɵɵinject(UpdateFocusedControlService));\n  };\n\n  CommandsService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: CommandsService,\n    factory: CommandsService.ɵfac,\n    providedIn: 'root'\n  });\n  return CommandsService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet TextBufferService = /*#__PURE__*/(() => {\n  class TextBufferService {\n    constructor() {\n      /** TextBuffer property for the datamanager */\n      this.textBuffer = new Subject();\n      this.pendingBuffer = new Subject();\n    }\n    /**\r\n     * The observable property used by the Datamanager\r\n     * @param { textBuffer, usePending } data Object parameter\r\n     * with information of TextBuffer and flag UsePending determines\r\n     * if buffer should be processed as pending\r\n     */\n\n\n    textBufferNotify(data) {\n      this.textBuffer.next(data);\n    }\n    /**\r\n     * @description\r\n     * Method to get the TextBuffer observable property\r\n     */\n\n\n    get textBufferObservable() {\n      return this.textBuffer.asObservable();\n    }\n    /**\r\n     * The observable property used by the DataManagerControl\r\n     * to notify DataManager to accept changes of TextBuffer\r\n     * @param event Event parameter\r\n     */\n\n\n    pendingBufferNotify() {\n      this.pendingBuffer.next(null);\n    }\n    /**\r\n     * @description\r\n     * Function to get the PendingBuffer observable property\r\n     */\n\n\n    get pendingBufferObservable() {\n      return this.pendingBuffer.asObservable();\n    }\n\n  }\n\n  TextBufferService.ɵfac = function TextBufferService_Factory(t) {\n    return new (t || TextBufferService)();\n  };\n\n  TextBufferService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TextBufferService,\n    factory: TextBufferService.ɵfac,\n    providedIn: 'root'\n  });\n  return TextBufferService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet DataManagerEventService = /*#__PURE__*/(() => {\n  class DataManagerEventService {\n    constructor(interactionService, textBufferService, commandService, webMapService) {\n      this.interactionService = interactionService;\n      this.textBufferService = textBufferService;\n      this.commandService = commandService;\n      this.webMapService = webMapService;\n      this.eventEmitted = new Subject();\n      this.currentColumn = new Subject();\n      this.setDMText = new Subject();\n      this.filter = new Subject();\n      this.moveDDDW = new Subject();\n      this.colDetectChanges = new Subject();\n      this.gridBusyLoader = new Subject();\n      this.filterSubscribtion = interactionService.filter.subscribe(filter => {\n        this.applyFilter(filter);\n      });\n      this.moveDataWindowSubscription = interactionService.moveDDW.subscribe(move => {\n        this.applyMoveDW(move);\n      });\n    }\n\n    ngOnDestroy() {\n      this.filterSubscribtion.unsubscribe();\n      this.moveDataWindowSubscription.unsubscribe();\n    }\n    /**\r\n     * Gets interaction service.\r\n     * @return {DmInteractionService}\r\n     */\n\n\n    get currentInteractionService() {\n      return this.interactionService;\n    }\n    /**\r\n     * Sets interaction service.\r\n     * @param { DmInteractionService } value\r\n     */\n\n\n    set currentInteractionService(value) {\n      this.interactionService = value;\n    }\n    /**\r\n     * Gets text buffer service.\r\n     * @return { TextBufferService }\r\n     */\n\n\n    get currentTextBufferService() {\n      return this.textBufferService;\n    }\n    /**\r\n     *  This function sends clickedRow to interactionService\r\n     * @param row clicked datadawindow row\r\n     */\n\n\n    clickedRow(row) {\n      if (this.interactionService) {\n        this.interactionService.clickedRow(row);\n      }\n    }\n    /**\r\n     *  This function sends a flag when Vscrollbar to interactionService\r\n     * @param row clicked datadawindow row\r\n     */\n\n\n    scrollFlag(flag) {\n      if (this.interactionService) {\n        this.interactionService.scrollFlag(flag);\n      }\n    }\n    /**\r\n     *  This function sends datamanagerData to interactionService\r\n     * @param datamanager Datawindow datamanager property\r\n     */\n\n\n    datamanagerData(datamanager) {\n      if (this.interactionService) {\n        this.interactionService.datamanagerData(datamanager);\n      }\n    }\n    /**\r\n     * Sends an event change from inner component\r\n     * to parent DataControl\r\n     * @param serverEventName the original server event name.\r\n     * @param data The current data collected for this event\r\n     */\n\n\n    emitEvent(serverEventName, data) {\n      if (data.event) {\n        data.event.serverEvent = serverEventName;\n        this.eventEmitted.next(data);\n      }\n    }\n    /**\r\n     * The observable events property used by the\r\n     * dataMangerControl component\r\n     */\n\n\n    get events() {\n      return this.eventEmitted.asObservable();\n    }\n    /**\r\n     * Sends current row value to datamanager\r\n     * @param rowcol column context\r\n     */\n\n\n    currentRowColumn(rowcol) {\n      this.currentColumn.next(rowcol);\n    }\n    /**\r\n     * Gets current column selected\r\n     */\n\n\n    get currentRowColumnSelected() {\n      return this.currentColumn.asObservable();\n    }\n    /**\r\n     * Sends current row value to datamanager\r\n     * @param rowcol column context\r\n     */\n\n\n    currentDMTextToColumn(dmText) {\n      this.setDMText.next(dmText);\n    }\n    /**\r\n     * Gets current column selected\r\n     */\n\n\n    get currentDMText() {\n      return this.setDMText.asObservable();\n    }\n    /**\r\n     * Gets filter rows\r\n     */\n\n\n    get filterRows() {\n      return this.filter.asObservable();\n    }\n    /**\r\n     * Gets move dddwselection subcription\r\n     */\n\n\n    get moveDDDWSelection() {\n      return this.moveDDDW.asObservable();\n    }\n    /**\r\n     * Emits col detect changes to refresh column data\r\n     * @param data Optional parameter to pass info to each column.\r\n     */\n\n\n    emitColDetectChanges(data) {\n      this.colDetectChanges.next(data);\n    }\n    /**\r\n     * Gets column detect changes subscription\r\n     */\n\n\n    get columnDetectChanges() {\n      return this.colDetectChanges.asObservable();\n    }\n    /**\r\n     * Emits grid busy loader subscription to remove busy loader from WMGrid\r\n     * @param data Optional parameter to pass info.\r\n     */\n\n\n    emitGridBusyLoader() {\n      this.gridBusyLoader.next();\n    }\n    /**\r\n     * Gets grid busy loader subscription\r\n     */\n\n\n    get gridBusyLoaderEmit() {\n      return this.gridBusyLoader.asObservable();\n    }\n    /**\r\n     * Applies filter\r\n     * @param filter apply the filter to the current datamanager\r\n     */\n\n\n    applyFilter(filter) {\n      this.filter.next(filter);\n    }\n    /**\r\n     * Applies move dw action\r\n     * @param move the action to move current selected row\r\n     */\n\n\n    applyMoveDW(move) {\n      this.moveDDDW.next(move);\n    }\n\n  }\n\n  DataManagerEventService.ɵfac = function DataManagerEventService_Factory(t) {\n    return new (t || DataManagerEventService)(i0.ɵɵinject(DmInteractionService, 8), i0.ɵɵinject(TextBufferService, 8), i0.ɵɵinject(CommandsService), i0.ɵɵinject(i1.WebMapService));\n  };\n\n  DataManagerEventService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: DataManagerEventService,\n    factory: DataManagerEventService.ɵfac,\n    providedIn: 'root'\n  });\n  return DataManagerEventService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet DatamanagerType = /*#__PURE__*/(() => {\n  class DatamanagerType {}\n\n  DatamanagerType.freeFormComponent = 'FreeformComponent';\n  DatamanagerType.gridComponent = 'GridComponent';\n  /*****************************************************************************\r\n   * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n   *\r\n   * This file is part of the Mobilize Frameworks, which is\r\n   * proprietary and confidential.\r\n   *\r\n   * NOTICE:  All information contained herein is, and remains\r\n   * the property of Mobilize.Net Corporation.\r\n   * The intellectual and technical concepts contained herein are\r\n   * proprietary to Mobilize.Net Corporation and may be covered\r\n   * by U.S. Patents, and are protected by trade secret or copyright law.\r\n   * Dissemination of this information or reproduction of this material\r\n   * is strictly forbidden unless prior written permission is obtained\r\n   * from Mobilize.Net Corporation.\r\n   ******************************************************************************/\n\n  return DatamanagerType;\n})();\nvar Case = /*#__PURE__*/(() => {\n  (function (Case) {\n    Case[Case[\"Any\"] = 0] = \"Any\";\n    Case[Case[\"Lower\"] = 1] = \"Lower\";\n    Case[Case[\"Upper\"] = 2] = \"Upper\"; // Characters converted to uppercase\n  })(Case || (Case = {}));\n\n  return Case;\n})();\n\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\nvar TextCase = /*#__PURE__*/(() => {\n  (function (TextCase) {\n    TextCase[\"AnyCase\"] = \"any\";\n    TextCase[\"Lower\"] = \"lower\";\n    TextCase[\"Upper\"] = \"upper\";\n  })(TextCase || (TextCase = {}));\n\n  return TextCase;\n})();\n\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\nlet DataTypeNames = /*#__PURE__*/(() => {\n  class DataTypeNames {}\n\n  DataTypeNames.numeric = 'number';\n  DataTypeNames.real = 'real';\n  DataTypeNames.string = 'char';\n  DataTypeNames.date = 'date';\n  DataTypeNames.time = 'time';\n  DataTypeNames.decimal = 'decimal';\n  DataTypeNames.long = 'long';\n  DataTypeNames.datetime = 'datetime';\n  /*****************************************************************************\r\n   * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n   *\r\n   * This file is part of the Mobilize Frameworks, which is\r\n   * proprietary and confidential.\r\n   *\r\n   * NOTICE:  All information contained herein is, and remains\r\n   * the property of Mobilize.Net Corporation.\r\n   * The intellectual and technical concepts contained herein are\r\n   * proprietary to Mobilize.Net Corporation and may be covered\r\n   * by U.S. Patents, and are protected by trade secret or copyright law.\r\n   * Dissemination of this information or reproduction of this material\r\n   * is strictly forbidden unless prior written permission is obtained\r\n   * from Mobilize.Net Corporation.\r\n   ******************************************************************************/\n\n  return DataTypeNames;\n})();\nvar StyleType = /*#__PURE__*/(() => {\n  (function (StyleType) {\n    StyleType[StyleType[\"CheckBox\"] = 0] = \"CheckBox\";\n    StyleType[StyleType[\"DropDownDW\"] = 1] = \"DropDownDW\";\n    StyleType[StyleType[\"DropDownListBox\"] = 2] = \"DropDownListBox\";\n    StyleType[StyleType[\"Edit\"] = 3] = \"Edit\";\n    StyleType[StyleType[\"EditMask\"] = 4] = \"EditMask\";\n    StyleType[StyleType[\"InkEdit\"] = 5] = \"InkEdit\";\n    StyleType[StyleType[\"RadioButtons\"] = 6] = \"RadioButtons\";\n    StyleType[StyleType[\"RichText\"] = 7] = \"RichText\";\n    StyleType[StyleType[\"Ucalendar\"] = 8] = \"Ucalendar\";\n    StyleType[StyleType[\"DateTimeUcalendar\"] = 9] = \"DateTimeUcalendar\";\n    StyleType[StyleType[\"UCalculator\"] = 10] = \"UCalculator\";\n    StyleType[StyleType[\"SimpleDropDownDW\"] = 11] = \"SimpleDropDownDW\";\n  })(StyleType || (StyleType = {}));\n\n  return StyleType;\n})();\n\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\nvar Alignment$1 = /*#__PURE__*/(() => {\n  (function (Alignment) {\n    Alignment[Alignment[\"Left\"] = 0] = \"Left\";\n    Alignment[Alignment[\"Right\"] = 1] = \"Right\";\n    Alignment[Alignment[\"Center\"] = 2] = \"Center\";\n    Alignment[Alignment[\"Justified\"] = 3] = \"Justified\";\n  })(Alignment$1 || (Alignment$1 = {}));\n\n  return Alignment$1;\n})();\n\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\nvar BorderStyle = /*#__PURE__*/(() => {\n  (function (BorderStyle) {\n    BorderStyle[BorderStyle[\"StyleBox\"] = 0] = \"StyleBox\";\n    BorderStyle[BorderStyle[\"StyleLowered\"] = 1] = \"StyleLowered\";\n    BorderStyle[BorderStyle[\"StyleRaised\"] = 2] = \"StyleRaised\";\n    BorderStyle[BorderStyle[\"StyleShadowBox\"] = 3] = \"StyleShadowBox\";\n  })(BorderStyle || (BorderStyle = {}));\n\n  return BorderStyle;\n})();\n\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\nvar SizeType = /*#__PURE__*/(() => {\n  (function (SizeType) {\n    SizeType[SizeType[\"SIZE_RESTORED\"] = 0] = \"SIZE_RESTORED\";\n    SizeType[SizeType[\"SIZE_MINIMIZED\"] = 1] = \"SIZE_MINIMIZED\";\n    SizeType[SizeType[\"SIZE_MAXIMIZED\"] = 2] = \"SIZE_MAXIMIZED\";\n    SizeType[SizeType[\"SIZE_MAXSHOW\"] = 3] = \"SIZE_MAXSHOW\";\n    SizeType[SizeType[\"SIZE_MAXHIDE\"] = 4] = \"SIZE_MAXHIDE\";\n  })(SizeType || (SizeType = {}));\n\n  return SizeType;\n})();\n\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n/**\r\n * This enum is for set the BorderStyle property for DataManagerControls\r\n * In PB, this values are different of the BorderStyle for Objects and Controls\r\n */\nvar DMControlBorderStyle = /*#__PURE__*/(() => {\n  (function (DMControlBorderStyle) {\n    DMControlBorderStyle[DMControlBorderStyle[\"StyleBox\"] = 2] = \"StyleBox\";\n    DMControlBorderStyle[DMControlBorderStyle[\"StyleLowered\"] = 5] = \"StyleLowered\";\n    DMControlBorderStyle[DMControlBorderStyle[\"StyleRaised\"] = 6] = \"StyleRaised\";\n    DMControlBorderStyle[DMControlBorderStyle[\"StyleShadowBox\"] = 1] = \"StyleShadowBox\";\n  })(DMControlBorderStyle || (DMControlBorderStyle = {}));\n\n  return DMControlBorderStyle;\n})();\n\n/***********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\nvar Border = /*#__PURE__*/(() => {\n  (function (Border) {\n    Border[Border[\"NoBorder\"] = 0] = \"NoBorder\";\n    Border[Border[\"ShadowBox\"] = 1] = \"ShadowBox\";\n    Border[Border[\"Box\"] = 2] = \"Box\";\n    Border[Border[\"StyleResizeBorder\"] = 3] = \"StyleResizeBorder\";\n    Border[Border[\"Underline\"] = 4] = \"Underline\";\n    Border[Border[\"Lowered\"] = 5] = \"Lowered\";\n    Border[Border[\"Raised\"] = 6] = \"Raised\";\n  })(Border || (Border = {}));\n\n  return Border;\n})();\n\nclass Utils {\n  static formatUID(uid) {\n    if (uid) {\n      const regularExpression = new RegExp('/#/', 'g');\n      return uid.replace(regularExpression, '-');\n    }\n  }\n  /**\r\n   * Gets the date format patterns\r\n   */\n  // tslint:disable-next-line: array-type\n\n\n  static getDateFormatPatterns() {\n    return [Utils.DateFormatUS, Utils.DateFormat, Utils.DateFormatDayMonth, Utils.DateFormatMonthYear];\n  }\n  /**\r\n   * Try to get type from the format\r\n   * @param format\r\n   * @returns to get type\r\n   */\n\n\n  static tryToGetType(format) {\n    return format?.includes('$') || format?.includes('%') ? DataTypeNames.decimal : null;\n  }\n  /**\r\n   * Validates if it is a valid color mapped .\r\n   * This must be removed when colors are well converted on server\r\n   * @param color string color from model\r\n   */\n\n\n  static validColorMapped(color) {\n    const validColorMapped = new RegExp('^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$');\n    return !validColorMapped.test(color);\n  }\n  /**\r\n   * Returns the object with the property with the max or min value\r\n   * in the array.\r\n   */\n\n  /**\r\n   * Returns the object with the max value in the given array\r\n   * @param array The given array\r\n   * @param property The property to lookup\r\n   */\n\n\n  static getMax(array, property) {\n    let comp = array[0][property];\n    let ele = array[0];\n    array.forEach(item => {\n      if (item[property] > comp) {\n        comp = item[property];\n        ele = item;\n      }\n    });\n    return ele;\n  }\n  /**\r\n   * Returns the object with the min value in the given array\r\n   * @param array The array of elements\r\n   * @param property The property to lookup\r\n   */\n\n\n  static getMin(array, property) {\n    let comp = array[0][property];\n    let ele = array[0];\n    array.forEach(item => {\n      if (item[property] < comp) {\n        comp = item[property];\n        ele = item;\n      }\n    });\n    return ele;\n  }\n  /**\r\n   * Method prevents propagation of the same event from being called outside.\r\n   * @param event object with the information\r\n   * Use shouldAllowPreventDefault to enable the preventDefault behavior\r\n   */\n\n\n  static preventPropagation(event) {\n    if (event && event.preventDefault && !event.shouldAllowPreventDefault) {\n      event.preventDefault();\n    }\n\n    if (event && event.stopPropagation) {\n      event.stopPropagation();\n    }\n  }\n  /**\r\n   * @description\r\n   * Return a converted string to the expected case\r\n   * @param value The string to convert\r\n   * @param convertTo The expected case\r\n   */\n\n\n  static convertCase(value, convertTo) {\n    switch (convertTo) {\n      case Case.Lower:\n        return value.toLocaleLowerCase();\n\n      case Case.Upper:\n        return value.toLocaleUpperCase();\n\n      default:\n        return value;\n    }\n  }\n  /**\r\n   * @description\r\n   * Return a converted string to the expected textCase\r\n   * @param value The string to convert\r\n   * @param convertTo The expected textCase\r\n   */\n\n\n  static convertTextCase(value, convertTo) {\n    if (value) {\n      switch (convertTo) {\n        case TextCase.Lower:\n          return value.toLocaleLowerCase();\n\n        case TextCase.Upper:\n          return value.toLocaleUpperCase();\n\n        default:\n          return value;\n      }\n    }\n\n    return value;\n  }\n  /*\r\n   * Converts a string value into a date object.\r\n   * @param value string data with server protocol format\r\n   */\n\n\n  static stringToDate(value) {\n    const ISOFormat = '$3-$2-$1T$4:$5:$6.$7';\n    return value ? new Date(value.replace(Utils.DATE_STRING_PROTOCOL, ISOFormat)) : null;\n  }\n  /**\r\n   * Checks if the value received is a valid string in server protocol\r\n   * format.\r\n   * @param value string value.\r\n   */\n\n\n  static isDateServerProtocol(value) {\n    return Utils.DATE_STRING_PROTOCOL.test(value);\n  }\n  /**\r\n   * Converts a date object into a string with server standard protocol.\r\n   * @param vale date object.\r\n   */\n\n\n  static dateToString(value) {\n    const date = formatOneDigitNumber(value.getDate());\n    const month = formatOneDigitNumber(value.getMonth() + 1);\n    const hours = formatOneDigitNumber(value.getHours());\n    const minutes = formatOneDigitNumber(value.getMinutes());\n    const seconds = formatOneDigitNumber(value.getSeconds());\n    const miliSeconds = formatOneDigitNumberMili(value.getMilliseconds());\n    return `${date}${month}${completeYear(value.getFullYear())}${hours}${minutes}${seconds}${miliSeconds}`;\n  }\n  /**\r\n   * Test if te column type received is a date time column (date, time,\r\n   * datetime).\r\n   * @param columnType string with the column type information\r\n   */\n\n\n  static isDateTimeColumn(columnType) {\n    return columnType === DataTypeNames.date || columnType === DataTypeNames.time || columnType === DataTypeNames.datetime;\n  }\n  /**\r\n   * Returns the default value format for date, time and datetime\r\n   * column types.\r\n   * @param value column type string.\r\n   */\n\n\n  static getDateTimeDefaultFormat(value) {\n    switch (value) {\n      case DataTypeNames.date:\n        return '[general]';\n\n      case DataTypeNames.time:\n        return '[time]';\n\n      case DataTypeNames.datetime:\n        return '[shortdate][time]';\n\n      default:\n        return '';\n    }\n  }\n  /**\r\n   * Returns the default value of the property if it is null or undefined.\r\n   * @param property property to be evaluated.\r\n   * @param defaultValue default value of the property.\r\n   */\n\n\n  static isDefaultValue(property, defaultValue) {\n    return property === undefined || property === null ? defaultValue : property;\n  }\n  /**\r\n   * Verifies if the string contains a newline character\r\n   * @param value a given string value.\r\n   */\n\n\n  static containsMultilineValue(value) {\n    return value && value.indexOf ? value.indexOf('\\r') > -1 || value.indexOf('\\n') > -1 : false;\n  }\n  /**\r\n   * Verifies if an object is a valid date\r\n   * @param date the object that we want to validate\r\n   */\n\n\n  static isValidDate(date) {\n    return date && Object.prototype.toString.call(date) === '[object Date]' && !isNaN(date);\n  }\n  /**\r\n   * Returns a position value using v4 or v5 object serialization.\r\n   * @param node Node model to find a property value.\r\n   * @param value A given string value.\r\n   */\n\n\n  static getPositionValue(node, value) {\n    return node.Position && node.Position[value] ? node.Position[value] : node[value] || 0;\n  }\n  /**\r\n   * Sets the current position of pointer in the\r\n   * App global workspace\r\n   * @param posX OffsetX\r\n   * @param posY OffsetY\r\n   */\n\n\n  static setPointerOffset(posX, posY) {\n    window['app'].PointerX = posX;\n    window['app'].PointerY = posY;\n  }\n  /**\r\n   * Gets the current position of pointer in the\r\n   * App global workspace\r\n   */\n\n\n  static getPointerOffset() {\n    return {\n      left: window['app'].PointerX,\n      top: window['app'].PointerY\n    };\n  }\n  /*\r\n   * Returns the height of the 'property' passed as argument\r\n   * @param model Model to obtain height property.\r\n   * @param property A given string value that represents property to access.\r\n   */\n\n\n  static obtainHeightValue(model, property) {\n    return model[property] ? model[property].Height || 0 : 0;\n  }\n\n  static addPixels(pixel) {\n    return pixel ? `${pixel}px` : undefined;\n  }\n\n  static getID(model) {\n    return model.UniqueID ? model.UniqueID : model.id;\n  }\n\n  static getComputedStyleNumber(element, property, defaultValue = 0) {\n    const style = getComputedStyle(element);\n    const styleProperty = style[property];\n    return styleProperty.includes('px') ? Number(styleProperty.substring(0, styleProperty.length - 2)) : defaultValue;\n  }\n  /**\r\n   * Validates that only  null or undefined for boolean petitions, not numbers.\r\n   * @param event object with the information\r\n   */\n\n\n  static validateNullUndefined(data) {\n    return data !== null && data !== undefined;\n  }\n  /**\r\n   * Determines whether firefox browser is\r\n   * @returns true if is the firefox browser\r\n   */\n\n\n  static isFirefoxBrowser() {\n    return navigator.userAgent.toLowerCase().indexOf('firefox') > -1;\n  }\n  /**\r\n   * validate if the type is a input control\r\n   * @param columnType type to check\r\n   */\n\n\n  static isInputType(columnType) {\n    switch (columnType) {\n      case StyleType.Edit:\n      case StyleType.EditMask:\n      case StyleType.RichText:\n        return true;\n\n      default:\n        return false;\n    }\n  }\n  /**\r\n   * @description\r\n   * Returns the current value for the alignment\r\n   */\n\n\n  static getCurrentAlignment(alignment) {\n    switch (alignment) {\n      case Alignment$1.Center:\n        return 'center';\n\n      case Alignment$1.Right:\n        return 'right';\n\n      case Alignment$1.Justified:\n        return 'justify';\n\n      default:\n        return 'left';\n    }\n  }\n  /**\r\n   * Find element on DOM and apply style provided\r\n   * @param element Element to be modified\r\n   * @param style Style to be applied\r\n   */\n\n\n  static queryElementsApplyStyles(renderer, nativeElement, element, modelstyle, style) {\n    const tabContent = nativeElement.querySelector(element);\n\n    if (tabContent) {\n      renderer.setStyle(tabContent, style, modelstyle);\n    }\n  }\n  /**\r\n   * Determines what are the modifier keys and mouse buttons that are\r\n   * pressed.\r\n   * @param event Mouse event\r\n   */\n\n\n  static getMouseEventFlags(event) {\n    let flags = 0;\n\n    if (event.buttons === 1) {\n      flags += 1; // left mouse\n    }\n\n    if (event.buttons === 2) {\n      flags += 2; // right mouse\n    }\n\n    if (event.shiftKey) {\n      flags += 4; // shift key\n    }\n\n    if (event.ctrlKey) {\n      flags += 8; // control key\n    }\n\n    if (event.buttons === 4) {\n      flags += 16; // middle mouse\n    }\n\n    return flags;\n  }\n\n  static isEmptyStringNull(value, nilIsNull, type) {\n    return (value === '' || value === null) && nilIsNull === true;\n  }\n\n  static getBorderStyle(border) {\n    switch (border) {\n      case Border.Box:\n        return '1px solid #BFBFBF';\n\n      case Border.NoBorder:\n        return 'none';\n\n      case Border.ShadowBox:\n        return '1px solid #BFBFBF';\n\n      case Border.Lowered:\n        return '1px inset';\n\n      case Border.Raised:\n        return '1px outset';\n\n      default:\n        return '';\n    }\n  }\n\n  static getBoxShadow(border) {\n    return border === Border.ShadowBox ? '2px 2px #888888' : '';\n  }\n\n  static nullToString(value) {\n    return value != null ? value.toString() : value;\n  }\n  /**\r\n   * Collect the column Models for this dataManager\r\n   * @param model\r\n   */\n\n\n  static collectColumnModels(model, avoidHeaders) {\n    const val = {\n      columnModels: {},\n      columnHeadersModels: {}\n    };\n\n    for (const key in model) {\n      if (model.hasOwnProperty(key)) {\n        if (model[key] && (model[key].ColumnId || model[key].mapperId === 'DMCmptdFld')) {\n          val.columnModels[model[key].Name] = model[key];\n        } else if (!avoidHeaders && model[key] && (model[key].ColumnId === 0 || model[key].Band === 'header')) {\n          val.columnHeadersModels[model[key].Name] = model[key];\n        }\n      }\n    }\n\n    return val;\n  }\n  /**\r\n   * Removes classes in classList parameter from current element.\r\n   * @param classList String list of css classes\r\n   * @param element The element with the classes to be removed\r\n   * @param renderer Renderer2 service instance\r\n   */\n\n\n  static removeClasses(classList, element, renderer) {\n    if (!!classList) {\n      const classes = classList.split(' ');\n      classes.forEach(classItem => {\n        if (!!classItem) {\n          renderer.removeClass(element, classItem);\n        }\n      });\n    }\n  }\n\n}\n/**\r\n * max value for an integer in Power Builder\r\n */\n\n\nUtils.MAX_VALUE_INTEGER = 32766;\nUtils.monthFormat = '((M+|m+){1,2})';\nUtils.dayFormat = '((D+|d+){1,2})';\nUtils.yearFormat = '((Y+|y+){2,4})';\n/**\r\n * The protocol regex to validate if date comes from server.\r\n */\n\nUtils.DATE_STRING_PROTOCOL = new RegExp('(\\\\d{2})(\\\\d{2})(\\\\d{4})(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})', 'i');\nUtils.DEFAULT_DATE_TIME = '01 01 1991';\nUtils.DateFormatUS = {\n  regex: new RegExp(`^${Utils.monthFormat}\\\\/${Utils.dayFormat}\\\\/${Utils.yearFormat}$`),\n  replace: '$1/$2/$3'\n};\nUtils.DateFormat = {\n  regex: new RegExp(`^${Utils.dayFormat}\\\\/${Utils.monthFormat}\\\\/${Utils.yearFormat}$`),\n  replace: '$1/$2/$3'\n};\nUtils.DateFormatDayMonth = {\n  regex: new RegExp(`^${Utils.dayFormat}\\\\/${Utils.monthFormat}$`),\n  replace: '$1/$2'\n};\nUtils.DateFormatMonthYear = {\n  regex: new RegExp(`^${Utils.monthFormat}\\\\/${Utils.yearFormat}$`),\n  replace: '$1/$2'\n};\n/**\r\n * A regular expression for AM/PM time format must match an hour format from 01 to 12,\r\n * followed by a colon, then a minute format from 00 to 59, and finally the text “am” or “pm”\r\n * in both upper and lower case.\r\n */\n\nUtils.timePattern = new RegExp('^(0?[1-9]|1[0-2]):([0-5]\\\\d)\\\\s?((?:A|P)\\\\.?M\\\\.?)?$', 'i');\n/**\r\n * Elements in view port\r\n * Verifies if the current element is visible in the boundaries of the viewport\r\n * @param element the current element in\r\n * @returns true if element is visible in viewport\r\n */\n\nfunction elementInViewPort(element) {\n  const rect = element.getBoundingClientRect();\n  return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth);\n}\n\nfunction formatOneDigitNumber(value) {\n  return value < 10 ? `0${value}` : value.toString();\n}\n/**\r\n * format the number to triple digits\r\n * @param value number to be format\r\n */\n\n\nfunction formatOneDigitNumberMili(value) {\n  return value < 10 ? `00${value}` : value < 100 ? `0${value}` : value.toString();\n}\n/**\r\n * Complete with zeros until you have 4 digits\r\n * @param value year\r\n */\n\n\nfunction completeYear(value) {\n  let result = value.toString();\n  const addZeros = 4 - result.length;\n\n  for (let index = 0; index < addZeros; index++) {\n    result = `0${result}`;\n  }\n\n  return result;\n}\n/**\r\n * Determines whether valid date is\r\n * @param d the date to validate\r\n * @returns  a boolean value indicating if the date is valid\r\n */\n\n\nfunction isValidDate(d) {\n  return d instanceof Date && !isNaN(d);\n}\n/**\r\n * Determines whether is a valid time\r\n * @param t the time to validate\r\n * @returns  a boolean value indicating if the time is valid\r\n */\n\n\nfunction isValidTime(t) {\n  return Utils.timePattern.test(t);\n}\n/**\r\n * Determines whether a value is a numeric one\r\n * @param n the value to check\r\n * @returns true if it is a numeric value\r\n */\n\n\nfunction isNumeric(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\n/**\r\n * Validates dwcolumn type\r\n * Verifies if the column has a validateItemError implementation and returns its\r\n * result\r\n * @param component the current component\r\n * @param event  the current javascript event\r\n * @returns true if dwcolumn is on error state\r\n */\n\n\nfunction validateDWColumnType(component, event) {\n  return shouldValidateColumn(component, event) ? validateColumn(component, event) : false;\n}\n/**\r\n * Validates column\r\n * @param component the current component\r\n * @param event  the current javascript event\r\n * @returns true if column is on error\r\n */\n\n\nfunction validateColumn(component, event) {\n  return component.validateEditRequired && component.validateEditRequired(event) || component.validateItemError && component.validateItemError(event);\n}\n/**\r\n * Should validate column\r\n * @param component the current component\r\n * @param event  the current javascript event\r\n * @returns true if validation should be applied to column\r\n */\n\n\nfunction shouldValidateColumn(component, event) {\n  return component && !component.disabled && (component.validateEditRequired || component.validateItemError);\n}\n/**\r\n * Creates a node for a menu item\r\n * @param text The text to be shown\r\n * @param index The position of the item\r\n * @param checked True to show up a checkmark\r\n * @returns A node for a menu item\r\n */\n\n\nfunction createNodeMenuItem(text, index, checked) {\n  const newNode = {};\n  newNode.Text = text;\n  newNode.Visible = true;\n  newNode.Enabled = true;\n  newNode.Name = `mnuItemWindow${index}`;\n  newNode.Order = index;\n  newNode.Checked = checked;\n  return newNode;\n}\n/**\r\n * Applies read only to date components when a tab action\r\n * is performed. This function avoids the default kendo\r\n * behavior of move between data sections when a tab action\r\n * is executed.\r\n * @param inputComponent DateInput or DatePicker component\r\n * @param redOnlyValue The current value to assign input property\r\n */\n\n\nfunction tabReadOnly(inputComponent, context, redOnlyValue) {\n  inputComponent.readonly = true;\n  setTimeout(() => {\n    inputComponent.readonly = redOnlyValue;\n    context.detectChanges();\n  }, 50);\n}\n/***********************************************************************\r\n* Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n*\r\n* This file is part of the Mobilize Frameworks, which is\r\n* proprietary and confidential.\r\n*\r\n* NOTICE:  All information contained herein is, and remains\r\n* the property of Mobilize.Net Corporation\r\n* The intellectual and technical concepts contained herein are\r\n* proprietary to Mobilize.Net Corporation and may be covered\r\n* by U.S. Patents, and are protected by trade secret or copyright law.\r\n* Dissemination of this information or reproduction of this material\r\n* is strictly forbidden unless prior written permission is obtained\r\n* from Mobilize.Net Corporation.\r\n* This file is subject to the terms and conditions defined in\r\n* file 'LICENSE.txt', which is part of this source code package.\r\n\r\n***********************************************************************/\n\n\nclass GetStyleValue {\n  /**\r\n   * method to get the best value for the percentage feature for a specify property\r\n   * @param property property to calculate\r\n   * @param model model of the control\r\n   * @param element HTMLElement to get the information. It's a optional parameter\r\n   */\n  static getPositionValue(property, model, element = null) {\n    return WebMapService.currentService.config.usePercentage && model ? GetStyleValue.applyComputedStyleValue(model, property, element) : null;\n  }\n\n  static getProperty(property) {\n    const prop = property.includes('px') ? property.substring(0, property.length - 2) : property;\n    return Number(prop);\n  }\n\n  static applyComputedStyleValue(currentModel, styleValue, element) {\n    if (currentModel.parentName) {\n      const model = WebMapService.currentService.core.getModel(currentModel.parentName());\n\n      if (model && model.Position && model.Position[styleValue]) {\n        return model['Position'][styleValue];\n      }\n    }\n\n    if (element && currentModel && currentModel['Position'] && currentModel['Position'][styleValue]) {\n      const cssProperty = this.getCssValue(styleValue);\n      return Utils.getComputedStyleNumber(element, cssProperty);\n    }\n\n    return 0;\n  }\n\n  static getCssValue(styleValue) {\n    switch (styleValue) {\n      case 'X':\n        return 'left';\n\n      case 'Y':\n        return 'top';\n\n      case 'Width':\n        return 'width';\n\n      case 'Height':\n        return 'height';\n\n      default:\n        return '';\n    }\n  }\n\n}\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet ZIndexService = /*#__PURE__*/(() => {\n  class ZIndexService {\n    constructor(rendererFactory) {\n      this.render = rendererFactory.createRenderer(null, null);\n    }\n    /**\r\n     * Applies the zIndex for modal windows.\r\n     */\n\n\n    ApplyModalZIndex(form, overlay) {\n      const formZIndex = Number(form.style.zIndex);\n\n      if (formZIndex < ZIndexService.INITIAL_MODAL_ZINDEX) {\n        form.style.zIndex = formZIndex + ZIndexService.DIALOG_POSITION;\n      }\n\n      overlay.style.zIndex = form.style.zIndex;\n    }\n    /**\r\n     * Applies the zIndex for popup windows.\r\n     */\n\n\n    ApplyPopupZIndex(form, apply) {\n      if (apply) {\n        form.removeAllListeners();\n        form.style.zIndex = ZIndexService.POPUP_ZINDEX;\n      }\n    }\n    /**\r\n     * Bring element top\r\n     * @param element the current html element\r\n     */\n\n\n    bringElementTop(element) {\n      if (this.lastTopElement) {\n        this.restoreTopElement(this.lastTopElement);\n      }\n\n      this.render.addClass(element.nativeElement, ZIndexService.TOP_ELEMENT_CLASS);\n      this.render.setStyle(element.nativeElement, 'z-index', ZIndexService.TOP_ELEMENT_ZINDEX);\n      this.render.setStyle(element.nativeElement, 'position', 'absolute');\n      this.lastTopElement = element;\n    }\n    /**\r\n     * Restores top element\r\n     * @param element the element to restore\r\n     */\n\n\n    restoreTopElement(element) {\n      this.render.removeClass(element.nativeElement, ZIndexService.TOP_ELEMENT_CLASS);\n      this.render.setStyle(element.nativeElement, 'z-index', 'auto');\n    }\n\n  }\n\n  // Note: in the wm-file-explorer component, we use a custom z-index: 11000 to show a dialog Print.\n\n  /**\r\n   * The position over the common windows that determines the dialog position.\r\n   */\n\n  /**\r\n   * The popup window zindex position.\r\n   */\n\n  /**\r\n   * The modal window zindex position.\r\n   */\n\n  /**\r\n   * Set the element as Top in current view\r\n   */\n  ZIndexService.DIALOG_POSITION = 501;\n  ZIndexService.POPUP_ZINDEX = 10400;\n  ZIndexService.INITIAL_MODAL_ZINDEX = 10500;\n  ZIndexService.TOP_ELEMENT_ZINDEX = 100;\n  ZIndexService.TOP_ELEMENT_CLASS = 'WM-TOP';\n\n  ZIndexService.ɵfac = function ZIndexService_Factory(t) {\n    return new (t || ZIndexService)(i0.ɵɵinject(i0.RendererFactory2));\n  };\n\n  ZIndexService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ZIndexService,\n    factory: ZIndexService.ɵfac,\n    providedIn: 'root'\n  });\n  return ZIndexService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet MessageBoxV4OK = /*#__PURE__*/(() => {\n  class MessageBoxV4OK {\n    constructor(wmService) {\n      this.wmService = wmService;\n      /**\r\n       * Pending references of message box v4 ok\r\n       */\n\n      this.pendingReferences = new Dictionary$1();\n    }\n    /**\r\n     * Determines if there are pending message boxes ok to be closed\r\n     * @returns true if are pending message boxes and false if there are not\r\n     */\n\n\n    thereArePendingOkMsgBoxes() {\n      return this.wmService.config.webMapVersion === WMConstants.version4 && this.pendingReferences && this.pendingReferences.length > 0;\n    }\n    /**\r\n     * Adds a message box v4 ok to the pending references collection\r\n     * @param component The message box component\r\n     */\n\n\n    add(component) {\n      // Generate a random id\n      component.model.id = Math.floor(Math.random() * 1000000 + 1).toString();\n      this.pendingReferences.add(component.model.id, component);\n    }\n    /**\r\n     * Removes a message box v4 ok from pending references collection.\r\n     * @param id The id of the message box\r\n     */\n\n\n    remove(id) {\n      this.pendingReferences.remove(id);\n      const length = this.pendingReferences.length;\n\n      if (length === 0) {\n        this.wmService.core.getEvent().publish('detectChanges');\n      } else {\n        const topKey = this.pendingReferences.keys()[length - 1];\n        const messageBox = this.pendingReferences.value(topKey);\n        /* c8 ignore else */\n\n        if (messageBox) {\n          messageBox.applyFocus();\n        }\n      }\n    }\n\n  }\n\n  MessageBoxV4OK.ɵfac = function MessageBoxV4OK_Factory(t) {\n    return new (t || MessageBoxV4OK)(i0.ɵɵinject(i1.WebMapService));\n  };\n\n  MessageBoxV4OK.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MessageBoxV4OK,\n    factory: MessageBoxV4OK.ɵfac,\n    providedIn: 'root'\n  });\n  return MessageBoxV4OK;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet LengthConverter = /*#__PURE__*/(() => {\n  class LengthConverter {\n    /* c8 ignore start */\n    constructor(zIndexServ, webMAPService, messageBoxV4OK) {\n      this.zIndexServ = zIndexServ;\n      this.webMAPService = webMAPService;\n      this.messageBoxV4OK = messageBoxV4OK;\n    }\n    /* c8 ignore stop */\n\n\n    get isUsePercentage() {\n      return this.webMAPService.config.usePercentage;\n    }\n\n    convertToPercentage(child, parent) {\n      return !this.webMAPService.config.usePercentage ? child : parent ? child / parent * 100 : undefined;\n    }\n\n    getZIndexService() {\n      return this.zIndexServ;\n    }\n    /**\r\n     * Gets message box v4 service\r\n     * @returns message box v4 ok service\r\n     */\n\n\n    getMessageBoxV4OK() {\n      return this.messageBoxV4OK;\n    }\n\n  }\n\n  LengthConverter.ɵfac = function LengthConverter_Factory(t) {\n    return new (t || LengthConverter)(i0.ɵɵinject(ZIndexService), i0.ɵɵinject(i1.WebMapService), i0.ɵɵinject(MessageBoxV4OK));\n  };\n\n  LengthConverter.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: LengthConverter,\n    factory: LengthConverter.ɵfac,\n    providedIn: 'root'\n  });\n  return LengthConverter;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nclass PositionCalculator {\n  /**\r\n   * Normalizes top\r\n   * Calculates the current control position substracting\r\n   * the closest container current position.\r\n   * @param element the current html element reference\r\n   * @param currentTop the actual value to be applied\r\n   * @returns top normalized\r\n   */\n  static normalizeTop(element, currentTop) {\n    try {\n      const closestContainer = getContainerComponent(element);\n\n      if (closestContainer) {\n        return currentTop - closestContainer.offsetTop;\n      }\n\n      return currentTop;\n    } catch (e) {\n      /* c8 ignore next */\n      return currentTop;\n    }\n  }\n  /**\r\n   * Normalizes left\r\n   * Calculates the current control position substracting\r\n   * the closest container current position.\r\n   * @param element the current html element reference\r\n   * @param currentLeft the actual value to be applied\r\n   * @returns left the normalized value\r\n   */\n\n\n  static normalizeLeft(element, currentLeft) {\n    try {\n      const closestContainer = getContainerComponent(element);\n\n      if (closestContainer) {\n        return currentLeft - closestContainer.offsetLeft;\n      }\n\n      return currentLeft;\n    } catch (e) {\n      /* c8 ignore next */\n      return currentLeft;\n    }\n  }\n\n}\n/**\r\n * Gets container component\r\n * @param element the current element object\r\n * @returns closest container component\r\n */\n\n\nfunction getContainerComponent(element) {\n  return element && element.nativeElement ? element.nativeElement.closest('.wm-container') : null;\n}\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nclass PBStyle {\n  constructor() {\n    this['background-color'] = null;\n    this['background-image'] = null;\n    this['color'] = null;\n    this['font-family'] = null;\n    this['top'] = null;\n    this['left'] = null;\n    this['right'] = null;\n    this['bottom'] = null;\n    this['width'] = null;\n    this['height'] = null;\n    this['position'] = null;\n    this['font-size'] = null;\n    this['font-weight'] = null;\n    this['border-style'] = null;\n    this['z-index'] = null;\n    this['text-align'] = null;\n  }\n\n  setPosition() {\n    /* c8 ignore else */\n    if (this.top || this.left) {\n      this.position = 'absolute';\n    }\n  }\n\n  setBackgroundColor(value) {\n    setStyleProperty(this, value, 'background-color');\n  }\n\n  setBackgroundImage(value) {\n    setStyleProperty(this, value, 'background-image');\n  }\n\n  setColor(value) {\n    setStyleProperty(this, value, 'color');\n  }\n\n  setFontFamily(value) {\n    setStyleProperty(this, value, 'font-family');\n  }\n\n  setFontSize(value) {\n    setStyleProperty(this, value, 'font-size');\n  }\n\n  setTop(value) {\n    setStyleProperty(this, value, 'top');\n  }\n\n  setLeft(value) {\n    setStyleProperty(this, value, 'left');\n  }\n\n  setRight(value) {\n    setStyleProperty(this, value, 'right');\n  }\n\n  setBottom(value) {\n    setStyleProperty(this, value, 'bottom');\n  }\n\n  setWidth(value) {\n    setStyleProperty(this, value, 'width');\n  }\n\n  setHeight(value) {\n    setStyleProperty(this, value, 'height');\n  }\n\n  setWeight(value) {\n    setStyleProperty(this, value, 'font-weight');\n  }\n\n  setBorderStyle(value) {\n    setStyleProperty(this, value, 'border-style');\n  }\n\n  setZIndexStyle(value) {\n    setStyleProperty(this, value, 'z-index');\n  }\n  /**\r\n   * method used to apply a value in the CSS text-align for the control.\r\n   * @param value the value to apply in the text-align property\r\n   */\n\n\n  setAlignment(value) {\n    setStyleProperty(this, value, 'text-align');\n  }\n\n  setItalic(value) {\n    setStyleProperty(this, value, 'font-style');\n  }\n\n  setUnderline(value) {\n    setStyleProperty(this, value, 'text-decoration');\n  }\n\n  update(style) {\n    this.setBackgroundColor(style.BackColor);\n    this.setBackgroundImage(style.BackgroundImage);\n    this.setColor(style.ForeColor || style.Color);\n    this.setFontFamily(style.FaceName);\n    this.setFontSize(style.TextSize);\n    this.setTop(style.Y);\n    this.setLeft(style.X);\n    this.setWidth(style.Width);\n    this.setHeight(style.Height);\n    this.setWeight(style.Weight);\n    this.setItalic(style.Italic);\n    this.setBorderStyle(style.BorderStyle);\n    this.setZIndexStyle(style.ZIndex);\n    this.setAlignment(style.Alignment);\n    this.setUnderline(style.Underline);\n    this.setPosition();\n  }\n\n  toString() {\n    let res = '';\n\n    for (const propName in this) {\n      if (this.hasOwnProperty(propName)) {\n        if (this[propName]) {\n          res += `${propName}: ${this[propName]}; `;\n        }\n      }\n    }\n\n    return res;\n  }\n\n}\n\nfunction setStyleProperty(context, value, property) {\n  if (value !== undefined && value !== context[property]) {\n    context[property] = value;\n  }\n}\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet TabNodeTypes = /*#__PURE__*/(() => {\n  class TabNodeTypes {}\n\n  TabNodeTypes.tabPageNode = 'tabPageNode';\n  TabNodeTypes.tabNode = 'tabNode';\n  TabNodeTypes.dmNode = 'dmNode';\n  /*****************************************************************************\r\n   * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n   *\r\n   * This file is part of the Mobilize Frameworks, which is\r\n   * proprietary and confidential.\r\n   *\r\n   * NOTICE:  All information contained herein is, and remains\r\n   * the property of Mobilize.Net Corporation.\r\n   * The intellectual and technical concepts contained herein are\r\n   * proprietary to Mobilize.Net Corporation and may be covered\r\n   * by U.S. Patents, and are protected by trade secret or copyright law.\r\n   * Dissemination of this information or reproduction of this material\r\n   * is strictly forbidden unless prior written permission is obtained\r\n   * from Mobilize.Net Corporation.\r\n   ******************************************************************************/\n\n  /**\r\n   * Name of all components to be identified\r\n   */\n\n  return TabNodeTypes;\n})();\nlet ComponentTypeName = /*#__PURE__*/(() => {\n  class ComponentTypeName {}\n\n  ComponentTypeName.DataManagerControl = 'dmcontrol';\n  ComponentTypeName.commandButton = 'commandButton';\n  return ComponentTypeName;\n})();\nlet FactoryNodes = /*#__PURE__*/(() => {\n  class FactoryNodes {\n    constructor() {\n      this.nodesTypes = new Dictionary();\n    }\n\n    create(componentInstance) {\n      // We need to define a variable in order to define node type\n      const nodeInstance = this.nodesTypes.value(this.getType(componentInstance));\n\n      if (!nodeInstance) {\n        return null;\n      }\n\n      return new nodeInstance(componentInstance);\n    }\n    /**\r\n     * Regist nodetypes in to the dictionary\r\n     * @param name name type node\r\n     * @param nodeType  tabNode component\r\n     */\n\n\n    register(name, nodeType) {\n      this.nodesTypes.add(name, nodeType);\n    }\n    /**\r\n     * Returns an specific type of Node\r\n     * @param componentInstance reference of component instance\r\n     */\n\n\n    getType(componentInstance) {\n      if (componentInstance.componentName === ComponentTypeName.DataManagerControl) {\n        return TabNodeTypes.dmNode;\n      } // if component instance is not a defined type and is not a column return default NodeType\n\n\n      if (componentInstance.tabPageOrderServiceInstance) {\n        return TabNodeTypes.tabPageNode;\n      }\n\n      return !componentInstance.dataManagerEmitter ? TabNodeTypes.tabNode : null;\n    }\n\n  }\n\n  FactoryNodes.ɵfac = function FactoryNodes_Factory(t) {\n    return new (t || FactoryNodes)();\n  };\n\n  FactoryNodes.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: FactoryNodes,\n    factory: FactoryNodes.ɵfac,\n    providedIn: 'root'\n  });\n  return FactoryNodes;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nclass TabNode {\n  constructor(myInstance) {\n    this.currentInstance = myInstance;\n    this.nextTabNode = null;\n    this.previousTabNode = null;\n    this.idInstance = this.currentInstance.model.id;\n    this.tabOrderInstance = this.currentInstance.model.TabOrder || 0;\n  }\n\n  set next(tabNode) {\n    this.nextTabNode = tabNode;\n  }\n\n  get next() {\n    return this.nextTabNode;\n  }\n\n  set previous(tabNode) {\n    this.previousTabNode = tabNode;\n  }\n\n  get previous() {\n    return this.previousTabNode;\n  }\n\n  set current(currentInstance) {\n    this.currentInstance = currentInstance;\n  }\n\n  get current() {\n    return this.currentInstance;\n  }\n\n  get id() {\n    return this.idInstance;\n  }\n\n  get tabOrder() {\n    return this.tabOrderInstance;\n  }\n\n}\n\nclass DmTabNode extends TabNode {\n  constructor(myInstance) {\n    super(myInstance);\n  }\n\n}\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nclass GroupManager {\n  constructor(groupName) {\n    this.groupName = groupName;\n    this.components = [];\n  }\n  /**\r\n   * Registers component in Group Manager, if component is a RadioButton, it is\r\n   * added to components array but if it is a GroupBox the group references is\r\n   * assigned\r\n   * @param componentInstance BaseComponent instance to be subscribe\r\n   */\n\n\n  registerComponent(componentInstance) {\n    if (componentInstance.isGroupBox) {\n      this.group = componentInstance;\n    } else {\n      this.components.push(componentInstance);\n    }\n  }\n  /**\r\n   * Gets the focusable component inside the GroupManager, returns the\r\n   * RadioButton by the following order, first return the RadioButton checked,\r\n   * if there is not RadioButton checked the function returns the RadioButton\r\n   * closest to top-left corner of the current container, and finally if there\r\n   * is not PositionOrder it returns the lower RadioButton by TabOrder\r\n   * @param isShiftPressed Determines if has to return the first (false) or\r\n   * the last (true) RadioButton\r\n   * @returns RadioButton Component\r\n   */\n\n\n  getFocusableComponent(isShiftPressed) {\n    let radio = null;\n\n    if (this.components.length > 0) {\n      // Check if there is a radio button checked\n      radio = this.components.find(rad => rad.checked === true); // Check first or last radio by PositionOrder\n\n      if (!radio) {\n        radio = this.checker('positionOrder', isShiftPressed);\n      } // Check first or last radio by TabOrder\n\n\n      if (!radio) {\n        radio = this.checker('tabOrder', isShiftPressed);\n      }\n    }\n\n    return radio;\n  }\n\n  checker(field, isShiftPressed) {\n    return isShiftPressed ? _.maxBy(this.components, component => component[field] >= 0 ? component[field] : undefined) : _.minBy(this.components, component => component[field] >= 0 ? component[field] : undefined);\n  }\n\n}\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet MainTabOrderService = /*#__PURE__*/(() => {\n  class MainTabOrderService {\n    // NOTE: Its necessary to register every new Node type.\n    constructor(factoryNode) {\n      this.factoryNode = factoryNode; // represents the size of the list\n\n      this.listLength = 0; // Dictionary with ItabOrder\n\n      this.nodesInstances = new Dictionary(); // Dictionary with Groups\n\n      this.groups = new Dictionary();\n      this.registerNodeType(TabNodeTypes.tabNode, TabNode);\n      this.registerNodeType(TabNodeTypes.dmNode, DmTabNode);\n    }\n    /**\r\n     * Register a component instance into nodeFactory and insert nodeInstances\r\n     * @param componentInstance Reference of component instance\r\n     */\n\n\n    registerInstance(componentInstance, groupName) {\n      if (groupName) {\n        this.registerComponentInGroup(groupName, componentInstance); // Only GroupBoxComponent must be register in nodeInstances for group scopes\n\n        if (!componentInstance.isGroupBox) {\n          return;\n        }\n      }\n\n      const nodeInstance = this.factoryNode.create(componentInstance);\n\n      if (nodeInstance) {\n        this.insertSort(nodeInstance);\n        componentInstance.tabNodeReference = nodeInstance;\n        this.nodesInstances.add(componentInstance.id, nodeInstance);\n        this.listLength++;\n      }\n    }\n    /**\r\n     * Register Node Type in to factory Node\r\n     * @param tabNodeType Node type to be registered\r\n     * @param tabNode tab node class\r\n     */\n\n\n    registerNodeType(tabNodeType, tabNode) {\n      this.factoryNode.register(tabNodeType, tabNode);\n    }\n\n    resolveTab(tabNodeReference, isShiftPressed, event) {\n      const availableComponent = this.availableNextNode(isShiftPressed ? tabNodeReference.previous : tabNodeReference.next, isShiftPressed, event, 1);\n\n      if (tabNodeReference === availableComponent) {\n        this.isCyclingTab = true;\n        document.activeElement.blur();\n      }\n\n      this.applyFocusToAvailableComponent(availableComponent, availableComponent instanceof DmTabNode, isShiftPressed);\n      this.isCyclingTab = false;\n    }\n    /**\r\n     * Apply focus to all components in a window, gives a special treatment to dataManager controls and userObjects\r\n     * @param availableComponent  Tab node component\r\n     * @param isDmTabNode Is data manager control tab node\r\n     */\n\n\n    applyFocusToAvailableComponent(availableComponent, isDmTabNode, isShiftPressed) {\n      if (availableComponent.currentInstance.isUserControl || availableComponent.currentInstance.isGroupBox) {\n        availableComponent.currentInstance.applyFocusControl(isShiftPressed);\n      } else {\n        isDmTabNode ? availableComponent.currentInstance.applyFocus(isDmTabNode) : availableComponent.currentInstance.applyFocus();\n      }\n    }\n\n    availableNextNode(tabNodeReference, isShiftPressed, event, length) {\n      let currentTabNode = tabNodeReference;\n\n      while (this.isValidTabNode(currentTabNode) === false) {\n        if (length !== this.listLength) {\n          currentTabNode = isShiftPressed ? currentTabNode.previous : currentTabNode.next;\n          length = length + 1;\n        } else {\n          break;\n        }\n      }\n\n      return currentTabNode;\n    }\n\n    isValidTabNode(tabNodeReference) {\n      return this.isReferenceAlive(tabNodeReference) && tabNodeReference.tabOrder > 0 && tabNodeReference.currentInstance.enabled && tabNodeReference.currentInstance.visible;\n    }\n    /**\r\n     * Returns true if the reference is alive otherwise false\r\n     * @param tabNodeReference The tab node refernced\r\n     */\n\n\n    isReferenceAlive(tabNodeReference) {\n      return !tabNodeReference.currentInstance.ref['destroyed'];\n    }\n    /**\r\n     * Method used by insert sort when there is no root node at the list\r\n     * @param newNode Tab Node component\r\n     */\n\n\n    assignEmptyStartEndNodes(newNode) {\n      const newNodeFlag = newNode;\n      newNodeFlag.next = newNodeFlag;\n      newNodeFlag.previous = newNodeFlag;\n      this.start = newNodeFlag;\n      this.end = this.start;\n    }\n    /**\r\n     * Insert a new node at the end of the list and updates end Node reference\r\n     * @param newNode Tab Node component\r\n     */\n\n\n    insertEnd(newNode) {\n      newNode.next = this.start;\n      this.start.previous = newNode;\n      this.end.next = newNode;\n      newNode.previous = this.end;\n      this.end = newNode;\n    }\n    /**\r\n     * Insert a new node at the beginning of the list and updates start Node reference\r\n     * @param newNode Tab Node component\r\n     */\n\n\n    insertStart(newNode) {\n      this.start.previous = newNode;\n      newNode.next = this.start;\n      newNode.previous = this.end;\n      this.end.next = newNode;\n      this.start = newNode;\n    }\n    /**\r\n     * Insert a new node at the middle of the list\r\n     * @param newNode Tab Node component\r\n     */\n\n\n    insertBetweenNodes(firstNode, secondNode, newNode) {\n      secondNode.previous = newNode;\n      newNode.next = secondNode;\n      newNode.previous = firstNode;\n      firstNode.next = newNode;\n    }\n    /**\r\n     * This method is used to insert sort nodes in to a double linked circular list\r\n     * @param newNode Tab node component\r\n     */\n\n\n    insertSort(newNode) {\n      // Basic scenario when there is no rootNode.\n      // Assign start and end Node\n      if (this.start == null) {\n        this.assignEmptyStartEndNodes(newNode);\n      } else {\n        // scenario when node is at the end of the list\n        if (newNode.tabOrder >= this.end.tabOrder) {\n          this.insertEnd(newNode);\n        } else {\n          // scenario when node is at the beginning of the list\n          this.insertNodeFirstOrMiddle(newNode);\n        }\n      }\n    }\n    /**\r\n     * Gets a component by id\r\n     * @param id The WebMap id used to find the component\r\n     * @returns A component instance\r\n     */\n\n\n    getComponentById(id) {\n      const node = this.nodesInstances.value(id);\n      return node ? node.current : null;\n    }\n    /**\r\n     * Gets GroupManager that has the group name passed as parameter\r\n     * @param groupName Group name to be retrieve\r\n     * @returns group GroupManager instance\r\n     */\n\n\n    getGroup(groupName) {\n      return this.groups.value(groupName);\n    }\n    /**\r\n     * Gets focusable RadioButton component contained inside the GroupManager\r\n     * @param groupName Group name context\r\n     * @param [isShiftPressed] Determines if has to return first or last element\r\n     * @returns RadioButton component or null if there is not element or group name\r\n     */\n\n\n    getGroupFocusComponent(groupName, isShiftPressed) {\n      const groupManager = this.getGroup(`radio_${groupName}`);\n\n      if (groupManager) {\n        return groupManager.getFocusableComponent(isShiftPressed);\n      }\n\n      return null;\n    }\n    /**\r\n     * Insert the node when is not in the last position\r\n     */\n\n\n    insertNodeFirstOrMiddle(newNode) {\n      let endFlag;\n      let previousEndFlag;\n\n      if (newNode.tabOrder <= this.start.tabOrder) {\n        this.insertStart(newNode);\n      } else {\n        // scenario when node is somewhere in the middle\n        endFlag = this.end;\n        previousEndFlag = this.end.previous;\n        this.validatePosition(previousEndFlag, newNode, endFlag);\n      }\n    }\n    /**\r\n     * Validate the position of the node\r\n     */\n\n\n    validatePosition(previousEndFlag, newNode, endFlag) {\n      while (previousEndFlag != null) {\n        // validates the right position of the newNode\n        if (newNode.tabOrder <= endFlag.tabOrder && newNode.tabOrder >= previousEndFlag.tabOrder) {\n          this.insertBetweenNodes(previousEndFlag, endFlag, newNode);\n          break;\n        } else {\n          // moves to the previous value.\n          endFlag = previousEndFlag;\n          previousEndFlag = previousEndFlag.previous;\n        }\n      }\n    }\n    /**\r\n     * Registers component in GroupManager with name passed in groupName parameter\r\n     * @param groupName Group name context\r\n     * @param componentInstance RadioButton or GroupBox component to be register\r\n     */\n\n\n    registerComponentInGroup(groupName, componentInstance) {\n      let groupManager = this.getGroup(groupName);\n\n      if (!groupManager) {\n        groupManager = new GroupManager(groupName);\n        this.groups.add(groupName, groupManager);\n      }\n\n      groupManager.registerComponent(componentInstance);\n    }\n\n  }\n\n  MainTabOrderService.ɵfac = function MainTabOrderService_Factory(t) {\n    return new (t || MainTabOrderService)(i0.ɵɵinject(FactoryNodes));\n  };\n\n  MainTabOrderService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MainTabOrderService,\n    factory: MainTabOrderService.ɵfac,\n    providedIn: 'root'\n  });\n  return MainTabOrderService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/***********************************************************************\r\n* Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n*\r\n* This file is part of the Mobilize Frameworks, which is\r\n* proprietary and confidential.\r\n*\r\n* NOTICE:  All information contained herein is, and remains\r\n* the property of Mobilize.Net Corporation\r\n* The intellectual and technical concepts contained herein are\r\n* proprietary to Mobilize.Net Corporation and may be covered\r\n* by U.S. Patents, and are protected by trade secret or copyright law.\r\n* Dissemination of this information or reproduction of this material\r\n* is strictly forbidden unless prior written permission is obtained\r\n* from Mobilize.Net Corporation.\r\n* This file is subject to the terms and conditions defined in\r\n* file 'LICENSE.txt', which is part of this source code package.\r\n\r\n***********************************************************************/\n\n\nvar PositionProperties = /*#__PURE__*/(() => {\n  (function (PositionProperties) {\n    PositionProperties[\"TOP\"] = \"Y\";\n    PositionProperties[\"LEFT\"] = \"X\";\n    PositionProperties[\"WIDTH\"] = \"Width\";\n    PositionProperties[\"HEIGHT\"] = \"Height\";\n  })(PositionProperties || (PositionProperties = {}));\n\n  return PositionProperties;\n})();\n\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\nclass TabPageNode extends TabNode {\n  constructor(myInstance) {\n    super(myInstance);\n  }\n\n}\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet ContainerControlTabOrderService = /*#__PURE__*/(() => {\n  class ContainerControlTabOrderService extends MainTabOrderService {\n    // NOTE: Its necessary to register every new Node type.\n    constructor(factNode) {\n      super(factNode);\n      this.isSelected = true;\n      /**\r\n       * Pending retrieve of tab page control service\r\n       * An object that holds the pending retrieve data actions\r\n       */\n\n      this.pendingRetrieve = {};\n      /**\r\n       * Tab key service out of tab page control service\r\n       */\n\n      this.tabKeyServiceOut = new Subject();\n      this.registerNodeType(TabNodeTypes.tabPageNode, TabPageNode);\n    }\n    /**\r\n     * Registers pending retrieve\r\n     * Add a new pending retrieve data action\r\n     * @param id the id of the datamanager that requires the retrieve action\r\n     * @param call the pending retrieve action call\r\n     */\n\n\n    registerPendingRetrieve(id, call) {\n      this.pendingRetrieve[id] = call;\n    }\n    /**\r\n     * Process pending dirty\r\n     */\n\n\n    processPendingDirty() {\n      Object.keys(this.pendingRetrieve).forEach(key => {\n        this.pendingRetrieve[key]();\n      });\n      this.pendingRetrieve = {};\n    }\n    /**\r\n     * Tabs key out\r\n     * Sends a notification to change the current tabkey service\r\n     * @param evt the current event\r\n     * @returns key out\r\n     */\n\n\n    tabKeyOut(evt) {\n      this.tabKeyServiceOut.next(evt);\n    }\n    /**\r\n     * Gets tab page tab out service\r\n     */\n\n\n    get tabPageTabOutService() {\n      return this.tabKeyServiceOut.asObservable();\n    }\n    /**\r\n     * Gets start tab node of the list\r\n     */\n\n\n    get startTabNode() {\n      return this.start;\n    }\n    /**\r\n     * Gets end tab node of the list\r\n     */\n\n\n    get endTabNode() {\n      return this.end;\n    }\n    /**\r\n     * Resolves tab\r\n     * @param tabNodeReference Current component node\r\n     * @param isShiftPressed shift key pressed\r\n     * @param event the current keyboard event\r\n     */\n\n\n    resolveTab(tabNodeReference, isShiftPressed, event) {\n      const availableComponent = this.availableNextNode(isShiftPressed ? tabNodeReference.previous : tabNodeReference.next, isShiftPressed, event, 1);\n\n      if (this.shouldLeaveContext(tabNodeReference, availableComponent, isShiftPressed)) {\n        this.tabKeyOut(event);\n        return;\n      }\n\n      availableComponent.currentInstance.applyFocus();\n    }\n    /**\r\n     * Should leave context\r\n     * @param tabNodeReference Current component node\r\n     * @param availableComponent Next/Previous availabe and valid component node\r\n     * @param isShiftPressed  Shift key pressed\r\n     * @returns true if leave the current context\r\n     */\n\n\n    shouldLeaveContext(tabNodeReference, availableComponent, isShiftPressed) {\n      return tabNodeReference === availableComponent || !isShiftPressed && tabNodeReference.tabOrder > availableComponent.tabOrder || isShiftPressed && tabNodeReference.tabOrder < availableComponent.tabOrder;\n    }\n\n  }\n\n  ContainerControlTabOrderService.ɵfac = function ContainerControlTabOrderService_Factory(t) {\n    return new (t || ContainerControlTabOrderService)(i0.ɵɵinject(FactoryNodes));\n  };\n\n  ContainerControlTabOrderService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ContainerControlTabOrderService,\n    factory: ContainerControlTabOrderService.ɵfac,\n    providedIn: 'root'\n  });\n  return ContainerControlTabOrderService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // tslint:disable-next-line:directive-class-suffix\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\n\n\nlet BaseControlComponent = /*#__PURE__*/(() => {\n  class BaseControlComponent extends BaseControlBaseComponent {\n    constructor(ref, renderer, el, lengthConverter, dataManagerEmitter, mainTabOrderService, tabPageOrderService) {\n      super();\n      this.ref = ref;\n      this.renderer = renderer;\n      this.el = el;\n      this.lengthConverter = lengthConverter;\n      this.dataManagerEmitter = dataManagerEmitter;\n      this.mainTabOrderService = mainTabOrderService;\n      this.tabPageOrderService = tabPageOrderService;\n    }\n    /**\r\n     * @property shortcut R\r\n     */\n\n\n    ngOnInit() {\n      if (WebMapService.currentService) {\n        this.token = WebMapService.currentService.core.getEvent().subscribe('detectChanges', () => {\n          this.markForCheck();\n        });\n      }\n\n      this.style = new PBStyle();\n      /* c8 ignore else */\n\n      if (this.model) {\n        this.model.BringTop = false;\n      }\n    }\n    /**\r\n     * Verifies for the BringTop\r\n     * property if it is required\r\n     */\n\n\n    ngDoCheck() {\n      if (this.bringTop && !this.model.DisplayOnly) {\n        this.lengthConverter.getZIndexService().bringElementTop(this.el);\n        this.bringTop = false;\n      }\n    }\n    /**\r\n     * append px to the variable\r\n     * @param pixel value to be added the string\r\n     */\n\n\n    addUnits(pixel) {\n      return pixel ? `${pixel}${this.lengthConverter.isUsePercentage ? '%' : 'px'}` : undefined;\n    }\n\n    ngAfterViewInit() {\n      Utils.removeClasses(this.class, this.el.nativeElement, this.renderer);\n    }\n\n    ngOnDestroy() {\n      /* c8 ignore else */\n      if (WebMapService.currentService) {\n        WebMapService.currentService.core.getEvent().unSubscribe(this.token);\n      }\n    }\n\n    detectChanges() {\n      if (!this.ref['destroyed']) {\n        this.ref.detectChanges();\n      }\n    }\n    /**\r\n     * Marks for check\r\n     * Calls the angular's change detector service\r\n     * mark for check method to be refreshed in the next\r\n     * detect changes call.\r\n     */\n\n\n    markForCheck() {\n      /* c8 ignore else */\n      if (!this.ref['destroyed']) {\n        this.ref.markForCheck();\n      }\n    }\n    /**\r\n     * Determines whether the component is focusable\r\n     * @returns true if focusable.\r\n     */\n\n\n    isFocusable() {\n      return !this.isContainer && this.tabOrder !== -1;\n    }\n    /**\r\n     * Returns the corresponding component id\r\n     * to be used in automated tests.\r\n     */\n\n\n    get cid() {\n      return this.dataManagerContext ? `${this.model?.Name}_#${this.dataManagerContext.rowIndex}` : this.model?.Name;\n    }\n    /**\r\n     * @description\r\n     * Method to get the visual properties of the component\r\n     * from the dataManangercontext (if exist)\r\n     */\n\n\n    get dataManagerContextVisuals() {\n      return this.dataManagerContext && this.dataManagerContext.row && this.dataManagerContext.row[0] && this.dataManagerContext.row[0].visual ? this.dataManagerContext.row[0].visual[this.name] : undefined;\n    }\n    /**\r\n     * Gets visual row index of component placed inside of\r\n     * a DataManager\r\n     */\n\n\n    get visualRowIndex() {\n      return this.dataManagerContext.rowIndex && this.dataManagerContext.pagination && this.dataManagerContext.pagination.visiblePageStart ? this.dataManagerContext.rowIndex - this.dataManagerContext.pagination.visiblePageStart : -1;\n    }\n\n    get parentElement() {\n      return this.renderer.parentNode(this.el.nativeElement);\n    }\n    /**\r\n     * @description\r\n     * The component unique identifier.\r\n     * @returns { string }\r\n     */\n\n\n    get id() {\n      return this.model.UniqueID ? this.model.UniqueID : this.model.Id ? this.model.Id : this.model.id; // The model.Id is for the columns inside a Dynamic DataManager\n    }\n    /**\r\n     * @description\r\n     * Returns the current MapperId value\r\n     */\n\n\n    get mapperId() {\n      return this.model.MapperId ? this.model.MapperId : this.model.mapperId;\n    }\n    /**\r\n     * @description\r\n     * Returns the component model.\r\n     * If undefined returns an empty object\r\n     * @returns { any }\r\n     */\n\n\n    get model() {\n      return this._model || {};\n    }\n    /**\r\n     * @description\r\n     * Sets the component model.\r\n     * @param value The new value to set model property.\r\n     */\n\n\n    set model(value) {\n      this._model = value;\n    }\n    /**\r\n     * @description\r\n     * Returns the enabled value of the model.\r\n     * @returns { boolean }\r\n     */\n\n\n    get enabled() {\n      return this.model.Enabled === undefined || this.model.Enabled;\n    }\n    /**\r\n     * @description\r\n     * Sets the enabled value of the model.\r\n     * @param value The new value to set model property.\r\n     */\n\n\n    set enabled(value) {\n      this.model.Enabled = value;\n    }\n    /**\r\n     * @description\r\n     * Returns the Visible value of the model.\r\n     * If the component is inside a DataManager, and the properties are on the GetBundle, then the Visible\r\n     * property is evaluated from the DataManagerContext\r\n     * Consider height and width if is 0 then the object is considered not visible\r\n     * @returns { boolean }\r\n     */\n\n\n    get visible() {\n      const dataManagerVisibleProperty = this.dataManagerContextVisuals ? this.dataManagerContextVisuals.Visible : undefined;\n      return dataManagerVisibleProperty !== undefined ? !!dataManagerVisibleProperty : this.model.Visible === undefined || this.model.Visible && this.visibleSize;\n    }\n    /**\r\n     * @description\r\n     * Sets the visible value of the model.\r\n     * @param value The new value to set model property.\r\n     */\n\n\n    set visible(value) {\n      this.model.Visible = value;\n    }\n    /**\r\n     * Gets visible size\r\n     * Returns true if the component has a size that should be visible\r\n     * in the screen.\r\n     */\n\n\n    get visibleSize() {\n      return !(this.model.Position && this.model.Position.Height === 0 && this.model.Position.Width === 0);\n    }\n    /**\r\n     * @description\r\n     * Gets the value of the bringTop property\r\n     * @param value The new value to set model property.\r\n     */\n\n\n    get bringTop() {\n      return this.model && this.model.BringTop;\n    }\n    /**\r\n     * @description\r\n     * Sets the value of the bringTop property\r\n     * @param value The new value to set model property.\r\n     */\n\n\n    set bringTop(value) {\n      if (this.model) {\n        this.model.BringTop = value;\n      }\n    }\n    /**\r\n     * @description\r\n     * Returns the height value in pixels of the model. Returns 'null' if it does not exists in the model.\r\n     * @returns { number }\r\n     */\n\n\n    get height() {\n      return this.isOnGrid ? null : this.model.Position && this.model.Position.Height != null && this.model.Position.Height !== 0 ? this.model.Position.Height : undefined;\n    }\n    /**\r\n     * @description\r\n     * Gets the z-index value of the control\r\n     * indicating a possible stacking order for this control\r\n     * @returns {number} default value 1 to be over every groupbox\r\n     */\n\n\n    get zIndex() {\n      return this.model.Position && this.model.Position.ZIndex != null ? this.model.Position.ZIndex : null;\n    }\n    /**\r\n     * @description\r\n     * Returns the width value in pixels of the model. Returns 'null' if it does not exists in the model.\r\n     * @returns { number }\r\n     */\n\n\n    get width() {\n      return this.isOnGrid ? null : this.model.Position && this.model.Position.Width != null && this.model.Position.Width !== 0 ? this.model.Position.Width : undefined;\n    }\n    /**\r\n     * @description\r\n     * Returns the left position value in pixels of the model.\r\n     * @returns { number }\r\n     */\n\n\n    get x() {\n      const dataManagerXProperty = this.dataManagerContextVisuals ? this.dataManagerContextVisuals.x : undefined;\n      return dataManagerXProperty !== undefined ? dataManagerXProperty : this.model.Position && this.model.Position.X != null ? this.model.Position.X : undefined;\n    }\n    /**\r\n     * @description\r\n     * Returns the top position value in pixels of the model.\r\n     * @returns { number }\r\n     */\n\n\n    get y() {\n      const dataManagerYProperty = this.dataManagerContextVisuals ? this.dataManagerContextVisuals.y : undefined;\n      return dataManagerYProperty !== undefined ? dataManagerYProperty : this.model.Position && this.model.Position.Y != null ? this.model.Position.Y : undefined;\n    }\n    /**\r\n     * @description\r\n     * Returns the text value of the component model.\r\n     * @returns { string }\r\n     */\n\n\n    get text() {\n      return this.model.Text;\n    }\n    /**\r\n     * @description\r\n     * Sets the text value of the model.\r\n     * @param value The new value to set model property.\r\n     */\n\n\n    set text(value) {\n      this.model.Text = value;\n    }\n    /**\r\n     * @description\r\n     * Returns the component name of the model.\r\n     * @returns { string }\r\n     */\n\n\n    get name() {\n      return this.model.Name;\n    }\n    /**\r\n     * @description\r\n     * Returns the limit of characters that the user\r\n     * can enter in an input box\r\n     * @returns { number }\r\n     */\n\n\n    get limit() {\n      const limit = this.model.Edit ? this.model.Edit.Limit : this.model.Limit;\n      return limit > 0 ? limit : null;\n    }\n    /**\r\n     * @description\r\n     * Returns the expected case of option values\r\n     * @returns { Case }\r\n     */\n\n\n    get case() {\n      return this.model.Case;\n    }\n    /**\r\n     * Gets drag auto property\r\n     * The DragAuto property determines whether PowerBuilder puts the control into drag mode automatically.\r\n     * If the property is enabled, when the user clicks the control and starts dragging it, PowerBuilder puts the control\r\n     * in drag mode.\r\n     * Clicking the control triggers a DragDrop event, not a Clicked event.\r\n     */\n\n\n    get dragAuto() {\n      return this.model.DragAuto;\n    }\n    /*The next properties(selectionStart, selectionLength) are placed in the base component for the requirement\r\n     * of the SelectText in EditableComponents and DataWindow Controls of PowerBuilder\r\n     * These properties are custom properties sended by the backend\r\n     */\n\n    /**\r\n     * @description\r\n     * Returns the SelectionStart index for the SelectText property\r\n     * @returns {number}\r\n     */\n\n\n    get selectionStart() {\n      return this.model.SelectionStart;\n    }\n    /**\r\n     * Sets SelectionStart position\r\n     */\n\n\n    set selectionStart(value) {\n      this.model.SelectionStart = value;\n    }\n    /**\r\n     * @description\r\n     * Returns the SelectionLength index for the SelectText property\r\n     * @returns {number}\r\n     */\n\n\n    get selectionLength() {\n      return this.model.SelectionLength;\n    }\n    /**\r\n     * Gets whether is container\r\n     */\n\n\n    get isContainer() {\n      return false;\n    }\n    /**\r\n     * Gets row index from DataManagerContext\r\n     */\n\n\n    get rowIndex() {\n      return this.dataManagerContext.rowIndex;\n    }\n    /**\r\n     * Gets tab page order service instance\r\n     */\n\n\n    get tabPageOrderServiceInstance() {\n      return this.tabPageOrderService;\n    }\n    /**\r\n     * Returns the band where the control will be rendered\r\n     *\r\n     * @readonly\r\n     * @type {string}\r\n     * @memberof ColumnControlBaseComponent\r\n     */\n\n\n    get band() {\n      return this.model.Band;\n    }\n    /**\r\n     * @description\r\n     * Returns a valid style object to\r\n     * be applied according to the styling information set in the\r\n     * control's model\r\n     * @returns { [key: string]: string; }\r\n     */\n\n\n    setMyStyle(style) {\n      style = style || {};\n\n      if (!this.dataManagerEmitter || this.myCurrentDataManager !== undefined) {\n        const heightParent = GetStyleValue.getPositionValue(PositionProperties.HEIGHT, this.model, this.parentElement);\n        const widthParent = GetStyleValue.getPositionValue(PositionProperties.WIDTH, this.model, this.parentElement);\n        style.Height = this.addUnits(this.lengthConverter.convertToPercentage(this.height, heightParent));\n        style.Width = this.addUnits(this.lengthConverter.convertToPercentage(this.width, widthParent));\n        style.X = this.addUnits(this.lengthConverter.convertToPercentage(PositionCalculator.normalizeLeft(this.el, this.x), widthParent));\n        style.Y = this.addUnits(this.lengthConverter.convertToPercentage(PositionCalculator.normalizeTop(this.el, this.y), heightParent));\n      } else {\n        style.Height = Utils.addPixels(this.height);\n        style.Width = Utils.addPixels(this.width);\n        style.X = Utils.addPixels(PositionCalculator.normalizeLeft(this.el, this.x));\n        style.Y = Utils.addPixels(PositionCalculator.normalizeTop(this.el, this.y));\n      }\n\n      if (this.model.DddwLines !== undefined) {\n        style.Width = '100%';\n      }\n\n      const result = this.processStyle(style);\n      this.processGridElementStyling(result);\n      return result;\n    }\n    /**\r\n     * @description\r\n     * Returns a valid style object to\r\n     * be applied according to the styling information set in the\r\n     * control's model\r\n     * @returns { [key: string]: any; }\r\n     */\n\n\n    processStyle(style, currentStyle = this.style) {\n      currentStyle = currentStyle || new PBStyle();\n\n      if (currentStyle && style && !_.isEmpty(style)) {\n        currentStyle.update(style);\n      }\n\n      return _.pickBy(currentStyle, (value, key) => {\n        return currentStyle.hasOwnProperty(key) && value;\n      });\n    }\n    /**\r\n     * Process grid element styling\r\n     * @param resultStyle Remove positioning from dynamic styling\r\n     * for grid elements\r\n     * @returns {boolean} Indicating if data were removed from styling\r\n     */\n\n\n    processGridElementStyling(resultStyle) {\n      if (this.dataManagerContext && this.dataManagerContext.datamanagerType === DatamanagerType.gridComponent && this.band?.toLowerCase() !== 'footer') {\n        delete resultStyle.position;\n        delete resultStyle.left;\n        delete resultStyle.top;\n        return true;\n      }\n\n      return false;\n    }\n    /**\r\n     * @description\r\n     * Returns a dictionary of all bound events that are in the model.\r\n     * @returns { [name: string]: boolean }\r\n     */\n\n\n    get events() {\n      return this.model.events;\n    }\n    /**\r\n     * @description\r\n     * Set a dictionary of bound events for the component.\r\n     * @param value The new dictionary of events to set model property.\r\n     */\n\n\n    set events(value) {\n      this.model.events = value;\n    }\n    /**\r\n     * @description\r\n     * Indicates if an event is binded in the server or not.\r\n     * @param event The name of the event in the server.\r\n     */\n\n\n    isBindedEvent(event) {\n      return this.events && this.events[event];\n    }\n    /**\r\n     * @description\r\n     * Propagates the event to the parent DataControl if required.\r\n     * @param eventName The original server event name.\r\n     * @param data The collected information for the current event.\r\n     */\n\n\n    emitDataManagerEvent(eventName, data) {\n      if (this.dataManagerEmitter) {\n        this.dataManagerEmitter.emitEvent(eventName, data);\n      }\n    }\n    /**\r\n     * @description\r\n     * Returns the border value of the component model.\r\n     * @returns { boolean }\r\n     */\n\n\n    get border() {\n      return this.model.Border;\n    }\n    /**\r\n     * @description\r\n     * The 'classHandler' function links the outer css class with borderClass constant css class.\r\n     * @returns { string }\r\n     */\n\n\n    classHandler() {\n      return `${this.class} ${this.border === false ? 'borderClass' : ''}`;\n    }\n    /**\r\n     * Returns boolean value whether a component is disabled\r\n     */\n\n\n    get disabled() {\n      return this.enabled !== undefined && !this.enabled || null;\n    }\n    /**\r\n     * Gets disabled look for the control when the controls is disabled\r\n     * and the DisabledLook is true\r\n     */\n\n\n    get disabledLook() {\n      return this.model.DisabledLook;\n    }\n    /**\r\n     * @description\r\n     * Returns true if the current control is in read only mode.\r\n     */\n\n\n    get displayOnly() {\n      return this.model.DisplayOnly;\n    }\n    /**\r\n     * Returns the value of the isFocused flag\r\n     */\n\n\n    get isFocused() {\n      return this.model.isFocused;\n    }\n    /**\r\n     * Sets whether is focused\r\n     */\n\n\n    set isFocused(value) {\n      this.model.isFocused = value;\n    }\n    /**\r\n     * \tSpecifies If toolbar is Visible on a window.\r\n     */\n\n\n    get toolbarVisible() {\n      return this.model.ToolbarVisible === undefined || this.model.ToolbarVisible === true;\n    }\n    /**\r\n     * @description\r\n     * Returns if checkbox label moves to the left\r\n     */\n\n\n    get leftText() {\n      return this.model.LeftText;\n    }\n    /**\r\n     * Tab order is only used for window components to control tab\r\n     */\n\n\n    get tabOrder() {\n      return this.model.TabOrder === undefined || this.model.TabOrder === 0 || this.model.TabOrder === Utils.MAX_VALUE_INTEGER ? -1 : this.model.TabOrder;\n    }\n    /**\r\n     * Gets tab sequence value. It is used by DataManager components.\r\n     * However Button and StaticText are used by Window and DataManager.\r\n     */\n\n\n    get tabSequence() {\n      return this.model.TabSequence === undefined || this.model.TabSequence === 0 || this.model.TabSequence === Utils.MAX_VALUE_INTEGER ? -1 : this.isOnGrid ? null : this.model.TabSequence;\n    }\n\n    get isOnGrid() {\n      return this.dataManagerContext && this.dataManagerContext.datamanagerType === DatamanagerType.gridComponent;\n    }\n\n    get isOnDynamicDatamanager() {\n      return this.dataManagerContext.isDynamic;\n    }\n    /**\r\n     * Gets focusable element inside the component.\r\n     * It can be a input, text-area, button, text-box\r\n     */\n\n\n    get focusableElement() {\n      return this.el.nativeElement;\n    }\n    /**\r\n     * @event buttonclicked Triggered when the command button is clicked.\r\n     * @param event Event data parameter.\r\n     */\n\n\n    clickHandler(event) {\n      const data = new EventData(event, this.id, this.mapperId);\n      data.event['row'] = this.dataManagerContext ? this.dataManagerContext.rowIndex : -1;\n      this.clicked.emit(data);\n      this.emitDataManagerEvent('buttonclicked', data);\n      this.sendObjectAtPointerCommand();\n      Utils.preventPropagation(event);\n    }\n    /**\r\n     * Send the object at pointer command.\r\n     */\n\n\n    sendObjectAtPointerCommand() {\n      if (this.dataManagerContext && this.dataManagerEmitter) {\n        const data = {\n          dataManagerId: this.dataManagerContext.dataManagerId,\n          controlName: this.name,\n          rowIndex: this.dataManagerContext.rowIndex\n        };\n        this.dataManagerEmitter.commandService.run(CommandName.objectAtPointer, data);\n      }\n    }\n    /**\r\n     * validates if current component belongs to a Datamanager\r\n     */\n\n\n    sendUpdateRowCommand() {\n      if (this.dataManagerContext && this.dataManagerContext.pagination) {\n        const data = {\n          args: {\n            datamanagerid: this.dataManagerContext.dataManagerId,\n            currentRow: this.dataManagerContext.bandRow,\n            currentControlName: this.name,\n            displayedRowCount: this.dataManagerContext.pagination.displayedRowCount,\n            currentPage: this.dataManagerContext.pagination.currentpage\n          }\n        };\n        const updateClicked = {\n          dataManagerId: this.dataManagerContext.dataManagerId,\n          row: this.dataManagerContext.bandRow\n        };\n        this.dataManagerEmitter.commandService.run(CommandName.updatedmrowandcolumn, data);\n        this.dataManagerEmitter.commandService.run(CommandName.updateClickedDmRow, updateClicked);\n        /* c8 ignore else */\n\n        if (WebMapService.currentService && WebMapService.currentService.core && WebMapService.currentService.core.getModel) {\n          const datamanagerModelInstance = WebMapService.currentService.core.getModel(this.dataManagerContext.dataManagerId);\n\n          if (datamanagerModelInstance['DddwLines'] != null) {\n            this.dataManagerEmitter.commandService.run(CommandName.updateDDDMCurrentRow, data);\n          }\n        }\n      }\n    }\n    /**\r\n     * @event buttonclicked Triggered when column get focus.\r\n     * @param event Event data parameter.\r\n     */\n\n\n    focusIn(event) {\n      if (event) {\n        const data = new EventData({\n          target: this\n        }, this.id, this.mapperId);\n        data.args = {\n          singleColumn: event.singleColumn\n        };\n\n        if (this.dataManagerEmitter && this.dataManagerEmitter.keyPressNotifyAction) {\n          data.args.fieldName = this.name;\n          data.args.data = undefined;\n          data.event['row'] = this.dataManagerContext ? this.dataManagerContext.rowIndex : -1;\n        }\n\n        this.notifyDataManagerCurrentRow();\n        this.getfocus.emit(data);\n        this.emitDataManagerEvent('itemFocusChanged', data);\n      }\n    }\n    /**\r\n     * @event buttonclicked Triggered when the command button is clicked.\r\n     * @param event Event data parameter.\r\n     */\n\n\n    focusOut(event) {\n      const data = new EventData({\n        target: this\n      }, this.id, this.mapperId);\n      this.losefocus.emit(data);\n    }\n    /**\r\n     * Notify current datamanager that a column in a x position has been selected.\r\n     */\n\n\n    notifyDataManagerCurrentRow() {\n      if (this.model && this.dataManagerContext && !this.isProtectedColumn()) {\n        this.sendUpdateRowCommand();\n        this.dataManagerEmitter.currentRowColumn(new ColumnContext(this.model, this.dataManagerContext));\n      }\n    }\n    /**\r\n     * Returns if this is a column.\r\n     */\n\n\n    isColumn() {\n      return this.model.VisualControlType !== undefined;\n    }\n    /**\r\n     * @description\r\n     * Method to apply selectText if properties are in model\r\n     */\n\n\n    applySelection() {\n      return this.selectionStart != null && this.selectionLength != null;\n    }\n    /**\r\n     * Applies focus to input or selectable element in\r\n     * component. It triggers dom element focus()\r\n     */\n\n\n    applyFocus() {\n      if (this.focusableElement) {\n        this.focusApplied = true;\n        this.focusableElement.focus();\n        this.focusApplied = false;\n      }\n    }\n    /**\r\n     * Should ChangeFocusedControlCommand. Determines whether the isFocused\r\n     * flag is true to apply focus command.\r\n     * @returns true if apply focus command\r\n     */\n\n\n    shouldApplyChangeFocusedControlCommand() {\n      return this.isFocused && !this.lengthConverter.getMessageBoxV4OK().thereArePendingOkMsgBoxes();\n    }\n    /**\r\n     * Validates dom element to exists\r\n     * @param focusableElement focusable control element\r\n     * @returns focusable element\r\n     */\n\n\n    validateFocusElement(focusableElement) {\n      return focusableElement && focusableElement.nativeElement ? focusableElement.nativeElement : undefined;\n    }\n    /**\r\n     * AfterLoadComponent function to be used by forms container component\r\n     * and it is overridden by MessageBoxComponent\r\n     */\n\n\n    afterLoadComponent() {}\n    /**\r\n     * RemoveHighLight function to be used by FocusManager service\r\n     * and it is overridden by ColumnControlComponent\r\n     */\n\n\n    removeHighLight() {}\n    /**\r\n     * IsColumnInsideDDDW function to be used by FocusManager service\r\n     * and it is overridden by ColumnControlComponent\r\n     */\n\n\n    isColumnInsideDDDW() {\n      return false;\n    }\n    /**\r\n     * isProtectedColumn function to be used by FocusManager service\r\n     * and it is overridden by ColumnControlComponent\r\n     */\n\n\n    isProtectedColumn() {\n      return false;\n    }\n    /**\r\n     * Method to allow each component to manage its own\r\n     * display property\r\n     */\n\n\n    getStyleDisplay() {\n      return 'block';\n    }\n    /**\r\n     * Tab key handler to manage tab behavior.\r\n     * MaintTabOrder service determines which action\r\n     * should be performed after a tab key event.\r\n     * @param event TabKey event.\r\n     */\n\n\n    tabKeyHandler(event) {\n      Utils.preventPropagation(event);\n      this.currentTabService.resolveTab(this.tabNodeReference, event.shiftKey, event);\n    }\n    /**\r\n     * Prepares the component before a clear focus action that is going to\r\n     * be triggered by FocusManagerService.\r\n     * @param [data] Data parameter passed to prepare the clear focus action.\r\n     */\n\n\n    prepareClearFocusAction(data) {// It would be overwritten by inherited classes.\n    }\n    /**\r\n     * PostBlur event is called by the focusManager\r\n     * when the old and the active component are different.\r\n     * the idea is to clean up the control before leaving it.\r\n     * @param [data] Data parameter passed to postBlur for the focus action.\r\n     */\n\n\n    postBlur(data) {// It would be overwritten by inherited classes.\n    }\n    /**\r\n     * Selects range of text in control\r\n     * @param input the control\r\n     */\n\n\n    selectRange(input) {\n      input.setSelectionRange(this.selectionStart - 1, this.selectionStart + this.selectionLength);\n    }\n    /**\r\n     * @description\r\n     * Applies the SelectText to editable control\r\n     */\n\n\n    selectText() {\n      const input = this.editable;\n\n      if (input) {\n        this.selectRange(input);\n      }\n    }\n    /**\r\n     * Emit the event to the corresponding DMControl if required\r\n     * and emit the corresponding output property.\r\n     */\n\n\n    emitEvent(output, dataMangerEvent, event) {\n      const data = this.getEventData(event);\n      output.emit(data);\n      this.emitDataManagerEvent(dataMangerEvent, data);\n    }\n    /**\r\n     * Prevents error propagation when validation throws an error\r\n     * @param event HTML event object.\r\n     * @returns true if there is an error.\r\n     */\n\n\n    preventErrorPropagation(event) {\n      if (this.dataManagerEmitter && this.dataManagerEmitter.dataManagerError) {\n        Utils.preventPropagation(event);\n        return true;\n      }\n\n      return false;\n    }\n    /**\r\n     * Registers tab service\r\n     * Register current component instance inside the corresponding tab order\r\n     * service component\r\n     * @param [groupName] Optional parameter to susbcribe component inside of a\r\n     * GroupManager\r\n     */\n\n\n    registerTabService(groupName) {\n      if (this.tabPageOrderService) {\n        this.tabPageOrderService.registerInstance(this, groupName);\n        this.currentTabService = this.tabPageOrderService;\n      } else if (this.mainTabOrderService) {\n        this.mainTabOrderService.registerInstance(this, groupName);\n        this.currentTabService = this.mainTabOrderService;\n      }\n    }\n    /**\r\n     * Returns the formatted event data object.\r\n     * @param event the current event data\r\n     */\n\n\n    getEventData(event) {\n      event.row = this.rowIndex;\n      return new EventData(event, this.id, this.mapperId);\n    }\n\n  }\n\n  BaseControlComponent.ɵfac = function BaseControlComponent_Factory(t) {\n    return new (t || BaseControlComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n  };\n\n  BaseControlComponent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: BaseControlComponent,\n    inputs: {\n      model: \"model\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n\n  __decorate([NotifyChange('BringTop'), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], BaseControlComponent.prototype, \"bringTop\", null);\n\n  __decorate([NotifyChange('Text'), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], BaseControlComponent.prototype, \"text\", null);\n\n  __decorate([NotifyChange('SelectionStart'), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], BaseControlComponent.prototype, \"selectionStart\", null);\n\n  __decorate([serverEvent('clicked'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], BaseControlComponent.prototype, \"clickHandler\", null);\n\n  __decorate([serverEvent('getfocus'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], BaseControlComponent.prototype, \"focusIn\", null);\n\n  __decorate([serverEvent('losefocus'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], BaseControlComponent.prototype, \"focusOut\", null);\n\n  return BaseControlComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n/* c8 ignore next */\n\n\nlet MenuBaseComponent = /*#__PURE__*/(() => {\n  class MenuBaseComponent extends BaseControlComponent {\n    constructor() {\n      super(...arguments);\n      /**\r\n       * EventEmitter to trigger the Click event.\r\n       */\n\n      this.Clicked = new EventEmitter();\n      /**\r\n       * Default Url used to call the web service.\r\n       */\n\n      this.defaultDataUrl = 'api/menu';\n    }\n    /**\r\n     * Gets refresh value\r\n     */\n\n\n    get refresh() {\n      return this.model.Refresh;\n    }\n    /**\r\n     * Sets refresh value\r\n     */\n\n\n    set refresh(value) {\n      this.model.Refresh = value;\n    }\n    /**\r\n     * Get Items for the menu datasource\r\n     */\n\n\n    get items() {\n      return this._items;\n    }\n    /**\r\n     * Set Items for the menu datasource\r\n     */\n\n\n    set items(value) {\n      this._items = value;\n    }\n    /**\r\n     * Gets DataUrl\r\n     */\n\n\n    get updateDataUrl() {\n      return this.model.UpdateDataUrl;\n    }\n    /**\r\n     * Returns the data source URL of this component.\r\n     */\n\n\n    get url() {\n      if (this.updateDataUrl && this.updateDataUrl.length > 0) {\n        return this.updateDataUrl;\n      }\n\n      if (this.dataUrl && this.dataUrl.length > 0) {\n        return this.dataUrl;\n      }\n\n      return this.defaultDataUrl;\n    }\n    /**\r\n     * Override the method to check if any Item was clicked\r\n     * @param event event to trigger.\r\n     */\n\n\n    isBindedEvent(event) {\n      return this.currentItem && this.currentItem.events && this.currentItem.events[event] || this.events && this.events[event];\n    }\n\n  }\n\n  MenuBaseComponent.ɵfac = /* @__PURE__ */function () {\n    let ɵMenuBaseComponent_BaseFactory;\n    return function MenuBaseComponent_Factory(t) {\n      return (ɵMenuBaseComponent_BaseFactory || (ɵMenuBaseComponent_BaseFactory = i0.ɵɵgetInheritedFactory(MenuBaseComponent)))(t || MenuBaseComponent);\n    };\n  }();\n\n  MenuBaseComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MenuBaseComponent,\n    selectors: [[\"ng-component\"]],\n    inputs: {\n      dataUrl: \"dataUrl\"\n    },\n    outputs: {\n      Clicked: \"Clicked\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function MenuBaseComponent_Template(rf, ctx) {},\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return MenuBaseComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n/**\r\n * The wmPBControls directive apply multiple properties to multiple components,\r\n * also this directive add common events implementation to different components.\r\n */\n\n\nlet ControlsPowerDirective = /*#__PURE__*/(() => {\n  class ControlsPowerDirective {\n    constructor(element, view, lengthConverter) {\n      this.element = element;\n      this.view = view;\n      this.lengthConverter = lengthConverter;\n    }\n\n    get disabled() {\n      return this.callAttr('disabled') ? true : null;\n    }\n\n    get visible() {\n      return this.callAttr('visible') ? this.component.getStyleDisplay() : 'none';\n    }\n\n    keyDown(e) {\n      if (this.callAttr('compontentBlockUserInteraction')) {\n        e.stopImmediatePropagation();\n        e.stopPropagation();\n        e.preventDefault();\n      }\n    }\n\n    callAttr(attrName) {\n      this.component = this.hostComponent;\n      return this.component[attrName];\n    }\n\n    callEvent(eventName, e) {\n      this.component = this.hostComponent;\n      this.component[eventName](e);\n    }\n\n  }\n\n  ControlsPowerDirective.ɵfac = function ControlsPowerDirective_Factory(t) {\n    return new (t || ControlsPowerDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(LengthConverter));\n  };\n\n  ControlsPowerDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: ControlsPowerDirective,\n    selectors: [[\"\", \"wmPBControls\", \"\"]],\n    hostVars: 3,\n    hostBindings: function ControlsPowerDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keydown\", function ControlsPowerDirective_keydown_HostBindingHandler($event) {\n          return ctx.keyDown($event);\n        });\n      }\n\n      if (rf & 2) {\n        i0.ɵɵattribute(\"readonly\", ctx.disabled);\n        i0.ɵɵstyleProp(\"display\", ctx.visible);\n      }\n    },\n    inputs: {\n      hostComponent: \"hostComponent\"\n    }\n  });\n  return ControlsPowerDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet BaseWindowComponent = /*#__PURE__*/(() => {\n  class BaseWindowComponent extends BaseControlComponent {\n    /* c8 ignore start */\n    constructor(cd, rnd2, elem, lengthConverter, em, mTabOrderService, tabPOService) {\n      super(cd, rnd2, elem, lengthConverter, em, mTabOrderService, tabPOService);\n      this.cd = cd;\n      this.rnd2 = rnd2;\n      this.elem = elem;\n      this.em = em;\n      this.mTabOrderService = mTabOrderService;\n      this.tabPOService = tabPOService;\n    }\n    /* c8 ignore stop */\n\n    /**\r\n     * @description\r\n     * Returns whether a Minimize Box displays in the title bar.\r\n     * @returns { boolean }\r\n     */\n\n\n    get maxBox() {\n      return Utils.isDefaultValue(this.model.MaxBox, true);\n    }\n    /**\r\n     * @description\r\n     * Returns whether a Minimize Box displays in the title bar.\r\n     * @returns { boolean }\r\n     */\n\n\n    get minBox() {\n      return Utils.isDefaultValue(this.model.MinBox, true);\n    }\n    /**\r\n     * @description\r\n     * Returns whether a title bar displays.\r\n     * @returns { boolean }\r\n     */\n\n\n    get titleBar() {\n      return Utils.isDefaultValue(this.model.TitleBar, true);\n    }\n    /**\r\n     * @description\r\n     * Returns the window title value of the model.\r\n     * @returns { string }\r\n     */\n\n\n    get title() {\n      return Utils.isDefaultValue(this.model.Title, '');\n    }\n    /**\r\n     * @description\r\n     * Returns whether a Minimize Box displays in the title bar.\r\n     * @returns { boolean }\r\n     */\n\n\n    get controlMenu() {\n      return Utils.isDefaultValue(this.model.ControlMenu, true);\n    }\n    /**\r\n     * @description\r\n     * Returns hide-title-bar class\r\n     * @returns { string }\r\n     */\n\n\n    hideTitleBar() {\n      return this.model.TitleBar === false ? 'hide-title-bar' : null;\n    }\n\n  }\n\n  BaseWindowComponent.ɵfac = function BaseWindowComponent_Factory(t) {\n    return new (t || BaseWindowComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n  };\n\n  BaseWindowComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: BaseWindowComponent,\n    selectors: [[\"ng-component\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function BaseWindowComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return BaseWindowComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet PBControlContainerComponent = /*#__PURE__*/(() => {\n  class PBControlContainerComponent extends BaseWindowComponent {\n    /* c8 ignore start */\n    constructor(changeDetector, renderer2, elem, lengthConverter, emitter, mTabOService, tabPageOrderService) {\n      super(changeDetector, renderer2, elem, lengthConverter, emitter, mTabOService, tabPageOrderService);\n      this.changeDetector = changeDetector;\n      this.renderer2 = renderer2;\n      this.elem = elem;\n      this.emitter = emitter;\n      this.mTabOService = mTabOService;\n      this.tabPageOrderService = tabPageOrderService;\n    }\n    /**\r\n     * Removes the static content from the container control.\r\n     * This is not a normal thing to do in standard angular applications\r\n     * This function only removes the ui element. To destroy the compoenent instance\r\n     * the server should remove the component's model.\r\n     * @param data An Event data that contains the current control and Id that will be removed.\r\n     */\n\n\n    removeControlHandler(data) {\n      /* c8 ignore else */\n      if (this.container && this.container.element && this.container.element.nativeElement.children.length > 0) {\n        const elementToRemove = this.container.element.nativeElement.children.namedItem(data.event.name);\n        /* c8 ignore else */\n\n        if (elementToRemove) {\n          elementToRemove.remove(); // This doesn't destroy the component instance the model should be removed instead.\n        }\n      }\n    }\n    /**\r\n     * Returns the collection of controls to be rendered in the container component.\r\n     */\n\n\n    get controls() {\n      return this.model.Controls;\n    }\n    /**\r\n     * Gets whether is container\r\n     */\n\n\n    get isContainer() {\n      return true;\n    }\n\n  }\n\n  PBControlContainerComponent.ɵfac = function PBControlContainerComponent_Factory(t) {\n    return new (t || PBControlContainerComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n  };\n\n  PBControlContainerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: PBControlContainerComponent,\n    selectors: [[\"ng-component\"]],\n    viewQuery: function PBControlContainerComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(ControlsPowerDirective, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.container = _t.first);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function PBControlContainerComponent_Template(rf, ctx) {},\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return PBControlContainerComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n// tslint:disable-next-line:directive-class-suffix\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\n\n\nlet FontPropertiesComponent = /*#__PURE__*/(() => {\n  class FontPropertiesComponent extends BaseControlComponent {\n    /**\r\n     * Gets value font for the control from the model or the visual's dataManagerContext\r\n     * @param propertyName property to search in the model of the visual section\r\n     * @param defaultValue default value if the property is not found\r\n     * @returns value font\r\n     */\n    getValueFont(propertyName, defaultValue) {\n      if (this.dataManagerContextVisuals && this.dataManagerContextVisuals['Color']) {\n        return this.dataManagerContextVisuals['Color'];\n      }\n\n      return this.model.Font === undefined ? undefined : this.model.Font[propertyName] || defaultValue;\n    }\n    /**\r\n     * Sets value font\r\n     * @param propertyName The font property name\r\n     * @param value the new value\r\n     * @returns value font\r\n     */\n\n\n    setValueFont(propertyName, value) {\n      if (this.model.Font) {\n        this.model.Font[propertyName] = value;\n        return;\n      }\n\n      this.model.Font = {};\n      this.model.Font[propertyName] = value;\n    }\n    /**\r\n     * Gets the value of the textColor property\r\n     * @property TextColor r\r\n     */\n\n\n    get textColor() {\n      return this.getValueFont('Color', 'black');\n    }\n    /**\r\n     * Sets text color\r\n     */\n\n\n    set textColor(value) {\n      this.setValueFont('Color', value);\n    }\n    /**\r\n     * Gets the value of the textSize property\r\n     * @property TextSize r\r\n     */\n\n\n    get textSize() {\n      return this.getValueFont('Size', '8.25pt');\n    }\n    /**\r\n     * Gets the value of the font weight property\r\n     * @property Weight r\r\n     */\n\n\n    get weight() {\n      return this.getValueFont('Weight', 'inherit');\n    }\n    /**\r\n     * Gets the value of the facename property\r\n     * @property FaceName r\r\n     */\n\n\n    get faceName() {\n      return this.getValueFont('Face', 'inherit');\n    }\n\n  }\n\n  FontPropertiesComponent.ɵfac = /* @__PURE__ */function () {\n    let ɵFontPropertiesComponent_BaseFactory;\n    return function FontPropertiesComponent_Factory(t) {\n      return (ɵFontPropertiesComponent_BaseFactory || (ɵFontPropertiesComponent_BaseFactory = i0.ɵɵgetInheritedFactory(FontPropertiesComponent)))(t || FontPropertiesComponent);\n    };\n  }();\n\n  FontPropertiesComponent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: FontPropertiesComponent,\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return FontPropertiesComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/***********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n\nvar Alignment = /*#__PURE__*/(() => {\n  (function (Alignment) {\n    Alignment[Alignment[\"left\"] = 0] = \"left\";\n    Alignment[Alignment[\"right\"] = 1] = \"right\";\n    Alignment[Alignment[\"center\"] = 2] = \"center\";\n    Alignment[Alignment[\"justify\"] = 3] = \"justify\";\n  })(Alignment || (Alignment = {}));\n\n  return Alignment;\n})();\n\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n// tslint:disable-next-line:directive-class-suffix\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\nlet CommonStyleComponent = /*#__PURE__*/(() => {\n  class CommonStyleComponent extends FontPropertiesComponent {\n    /**\r\n     * @description\r\n     * Returns the alignment value of the component model.\r\n     * @returns { string }\r\n     */\n    get alignment() {\n      switch (this.model.Alignment) {\n        case Alignment.left:\n          return 'left';\n\n        case Alignment.center:\n          return 'center';\n\n        case Alignment.right:\n          return 'right';\n\n        case Alignment.justify:\n          return 'justify';\n\n        default:\n          return null;\n      }\n    }\n    /**\r\n     * Gets the value of the backColor property\r\n     * @property BackColor r\r\n     */\n\n\n    get backColor() {\n      return this.model.BackColor || (this.model.Background ? this.model.Background.ColorHex : undefined);\n    }\n    /**\r\n     * Gets the value of the backMode property\r\n     * @property Backmode\r\n     */\n\n\n    get backMode() {\n      return this.model.BackMode;\n    }\n\n    setMyStyle(style) {\n      let CustomStyle = {\n        BackColor: this.backColor,\n        TextSize: this.textSize,\n        Weight: this.weight,\n        FaceName: this.faceName,\n        ForeColor: this.textColor\n      };\n\n      if (style) {\n        CustomStyle = CopyProps(style, CustomStyle);\n      }\n\n      return super.setMyStyle(CustomStyle);\n    }\n    /**\r\n     * Gets the value of the underline property\r\n     */\n\n\n    get underline() {\n      if (this.model.Font) {\n        return this.model.Font.Underline ? 'underline' : null;\n      }\n\n      return this.model.Underline ? 'underline' : null;\n    }\n\n  }\n\n  CommonStyleComponent.ɵfac = /* @__PURE__ */function () {\n    let ɵCommonStyleComponent_BaseFactory;\n    return function CommonStyleComponent_Factory(t) {\n      return (ɵCommonStyleComponent_BaseFactory || (ɵCommonStyleComponent_BaseFactory = i0.ɵɵgetInheritedFactory(CommonStyleComponent)))(t || CommonStyleComponent);\n    };\n  }();\n\n  CommonStyleComponent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: CommonStyleComponent,\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return CommonStyleComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction CopyProps(style, CustomStyle) {\n  for (const prop in style) {\n    if (style.hasOwnProperty(prop)) {\n      CustomStyle[prop] = style[prop];\n    }\n  }\n\n  return CustomStyle;\n}\n\nlet BaseMaskComponent = /*#__PURE__*/(() => {\n  class BaseMaskComponent extends CommonStyleComponent {\n    /* c8 ignore start */\n    constructor(changeDetector, renderer2, element, lengthConverter, emitter, mTabOrderService, tabPageOrderService) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter, mTabOrderService, tabPageOrderService);\n      this.changeDetector = changeDetector;\n      this.renderer2 = renderer2;\n      this.element = element;\n      this.emitter = emitter;\n      this.mTabOrderService = mTabOrderService;\n      this.tabPageOrderService = tabPageOrderService;\n      /* c8 ignore stop */\n\n      this.modified = new EventEmitter();\n    }\n\n    ngOnInit() {\n      super.ngOnInit();\n      this.registerTabService();\n    }\n    /**\r\n     * @description\r\n     * Returns the mask type received from model.\r\n     * @returns { string }\r\n     */\n\n\n    get maskDataType() {\n      return this.model.MaskDataType;\n    }\n    /**\r\n     * this event is trigger when the user leave the control\r\n     * @param event default object from the event\r\n     */\n\n\n    handleBlur(event) {\n      this.modified.emit(new EventData('enmodified', this.id, this.mapperId));\n    }\n\n  }\n\n  BaseMaskComponent.ɵfac = function BaseMaskComponent_Factory(t) {\n    return new (t || BaseMaskComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n  };\n\n  BaseMaskComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: BaseMaskComponent,\n    selectors: [[\"ng-component\"]],\n    outputs: {\n      modified: \"modified\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function BaseMaskComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n\n  __decorate([serverEvent('enmodified'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], BaseMaskComponent.prototype, \"handleBlur\", null);\n\n  return BaseMaskComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet PbBaseComponentModule = /*#__PURE__*/(() => {\n  class PbBaseComponentModule {}\n\n  PbBaseComponentModule.ɵfac = function PbBaseComponentModule_Factory(t) {\n    return new (t || PbBaseComponentModule)();\n  };\n\n  PbBaseComponentModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: PbBaseComponentModule\n  });\n  PbBaseComponentModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, BaseComponentsModule]]\n  });\n  return PbBaseComponentModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/* c8 ignore file */\n\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet DataManagerTabSequenceService = /*#__PURE__*/(() => {\n  class DataManagerTabSequenceService {\n    constructor() {}\n    /**\r\n     * Registers data manager reference to access rows property. It allows\r\n     * to manage row components references and determine what is the TabSequence order.\r\n     * @param dataManager DataManager reference that is going to be set\r\n     */\n\n\n    registerDataManager(dataManager) {\n      this.currentDataManager = dataManager;\n    }\n    /**\r\n     * Resolves tab action received from a component inside of\r\n     * DataManager.\r\n     * @param {BaseControlComponent} component Component reference that triggers tab event.\r\n     * @param {boolean} shift Determines wheather tab sequences goes foward (false) or backward (true)\r\n     * @param {Event} event Tab key event received from DOM.\r\n     */\n\n\n    resolveTab(component, shift, event) {\n      const components = this.getRowComponents(component);\n\n      if (shift) {\n        this.resolvePreviousTab(component, components, event);\n      } else {\n        this.resolveNextTab(component, components, event);\n      }\n    }\n    /**\r\n     * Gets row components where current component is placed\r\n     * @param component Current component that triggers tab event\r\n     * @returns { BaseControlComponent[] } row components\r\n     */\n\n\n    getRowComponents(component) {\n      const row = this.currentDataManager && this.currentDataManager.rows ? this.currentDataManager.rows[component.visualRowIndex] : null;\n      return row ? row.components : [];\n    }\n    /**\r\n     * Resolves previus tab action\r\n     * @param component Current component that triggers tab event\r\n     * @param components Array of components of row of current component\r\n     * @param componentIndex Index of current component\r\n     */\n\n\n    resolvePreviousTab(component, components, event) {\n      const componentIndex = components.indexOf(component);\n\n      if (componentIndex !== -1 && !validateDWColumnType(component, event)) {\n        if (componentIndex - 1 < 0) {\n          this.resolveTabPreviousRow(component, event);\n        } else {\n          components[componentIndex - 1].applyFocus();\n        }\n      } else if (components.length === 0) {\n        this.leaveDataManager(event);\n      }\n    }\n    /**\r\n     * Resolves next tab action\r\n     * @param component Current component that triggers tab event\r\n     * @param components Array of components of row of current component\r\n     * @param componentIndex Index of current component\r\n     */\n\n\n    resolveNextTab(component, components, event) {\n      const componentIndex = components.indexOf(component);\n\n      if (componentIndex !== -1 && !validateDWColumnType(component, event)) {\n        if (componentIndex + 1 >= components.length) {\n          this.resolveTabNextRow(component, event);\n        } else {\n          components[componentIndex + 1].applyFocus();\n        }\n      } else if (components.length === 0) {\n        this.leaveDataManager(event);\n      }\n    }\n    /**\r\n     * Resolves tab previous row\r\n     * @param {BaseControlComponent} component Current component that triggers tab event\r\n     */\n\n\n    resolveTabPreviousRow(component, event) {\n      const index = component.visualRowIndex;\n\n      if (index - 1 < 0) {\n        this.scrollTabToPreviousRow(component, event);\n      } else {\n        const row = this.currentDataManager.rows[index - 1];\n        const components = row.components;\n        components[components.length - 1].applyFocus();\n      }\n    }\n    /**\r\n     * Resolves tab next row\r\n     * @param {BaseControlComponent} component Current component that triggers tab event\r\n     */\n\n\n    resolveTabNextRow(component, event) {\n      const index = component.visualRowIndex;\n\n      if (index + 1 >= this.currentDataManager.rows.length) {\n        this.scrollTabToNextRow(component, event);\n      } else {\n        const row = this.currentDataManager.rows[index + 1];\n        const components = row.components;\n        components[0].applyFocus();\n      }\n    }\n    /**\r\n     * Scrolls tab to previous row\r\n     * @param {BaseControlComponent} component Current component that triggers tab event\r\n     */\n\n\n    scrollTabToPreviousRow(component, event) {\n      if (component.rowIndex - 1 < 1) {\n        this.leaveDataManager(event);\n      } else {\n        // Call BaseDataManagerComponent scroll\n        this.currentDataManager.currentRow -= 1;\n        this.currentDataManager.currentControlName = this.currentDataManager.lastColumn.Name;\n        this.currentDataManager.moveScrollUp(event);\n      }\n    }\n    /**\r\n     * Scrolls tab to next row\r\n     * @param {BaseControlComponent} component Current component that triggers tab event\r\n     */\n\n\n    scrollTabToNextRow(component, event) {\n      if (component.rowIndex + 1 > this.currentDataManager.totalItems) {\n        this.leaveDataManager(event);\n      } else {\n        // Call BaseDataManagerComponent scroll\n        this.currentDataManager.currentRow += 1;\n        this.currentDataManager.currentControlName = this.currentDataManager.firstColumn.Name;\n        this.currentDataManager.moveScrollDown(event);\n      }\n    }\n    /**\r\n     * Leaves data manager when is last or first row.\r\n     * @param {Event} event Determines if tab action leaves DataManager to\r\n     * previous window node of to next window node (<- tab + shift or tab ->)\r\n     */\n\n\n    leaveDataManager(event) {\n      const eventData = new EventData(event, this.currentDataManager.id);\n      this.currentDataManager.emitDataManagerEvent('tabKeyLeaveEvent', eventData);\n    }\n    /**\r\n     * Gets valid column models by TabSequence property.\r\n     * @returns an array of valid column models.\r\n     */\n\n\n    getValidColumns() {\n      return this.currentDataManager ? this.currentDataManager.getValidColumns() : null;\n    }\n\n  }\n\n  DataManagerTabSequenceService.ɵfac = function DataManagerTabSequenceService_Factory(t) {\n    return new (t || DataManagerTabSequenceService)();\n  };\n\n  DataManagerTabSequenceService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: DataManagerTabSequenceService,\n    factory: DataManagerTabSequenceService.ɵfac,\n    providedIn: 'root'\n  });\n  return DataManagerTabSequenceService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\n\n\nlet ColumnControlBaseComponent = /*#__PURE__*/(() => {\n  class ColumnControlBaseComponent extends CommonStyleComponent {\n    constructor() {\n      super(...arguments);\n      this.defaultColor = '#656565';\n      this.modified = false;\n      /* property to disable control when protect is true in getDataBundle */\n\n      this.visualProtect = false;\n      this.boxBorder = '';\n      this.useEditMask = false;\n      this.disableFormatting = false;\n    }\n    /**\r\n     * Gets data\r\n     */\n\n\n    get data() {\n      return this._data;\n    }\n    /**\r\n     * Sets data\r\n     */\n\n\n    set data(value) {\n      this._data = value;\n    }\n    /**\r\n     * Gets the value of the Edit.AutohScroll property\r\n     */\n\n\n    get editAutohScroll() {\n      return this.model.Edit ? Utils.isDefaultValue(this.model.Edit.AutohScroll, false) : Utils.isDefaultValue(this.model.AutohScroll, false);\n    }\n    /**\r\n     * Gets the value of the Edit.VScrollBar property\r\n     */\n\n\n    get editVerticalScroll() {\n      return WebMapService.currentService.config.webMapVersion === WMConstants.version4 ? Utils.isDefaultValue(this.model.Edit.VScrollBar, false) : Utils.isDefaultValue(this.model.VScrollBar, false);\n    }\n    /**\r\n     * Gets the value of the Edit.FocusRectangle property\r\n     */\n\n\n    get focusRectangle() {\n      return this.model.FocusRectangle ? Utils.isDefaultValue(this.model.FocusRectangle, false) : this.model.Edit ? Utils.isDefaultValue(this.model.Edit.FocusRectangle, false) : false;\n    }\n    /**\r\n     * @description\r\n     * Returns the DisplayOnly value of the model.\r\n     * @returns { boolean }\r\n     */\n\n\n    get displayOnly() {\n      return this.model.Edit ? Utils.isDefaultValue(this.model.Edit.DisplayOnly, !!this.model.DisplayOnly) : !!this.model.DisplayOnly;\n    }\n    /**\r\n     * @description\r\n     * Returns the ReadOnly value of the model.\r\n     * @returns { boolean }\r\n     */\n\n\n    get readOnly() {\n      return this.model.ReadOnly || false;\n    }\n    /**\r\n     * Gets values from model in a V5 response\r\n     */\n\n\n    get valuesV5() {\n      return this.model.Values;\n    }\n\n    get displayAsPicture() {\n      return this.model.BitmapName || false;\n    }\n    /**\r\n     * @description\r\n     * Sets the text value of the model.\r\n     * @param value The new value to set model property.\r\n     */\n\n\n    set text(value) {\n      this.modelData = value;\n      this.data = this.modelData;\n    }\n    /**\r\n     * Defines if dropdowndatawindow value is editable.\r\n     */\n\n\n    get allowEdit() {\n      return this.model.AllowEdit;\n    }\n    /**\r\n     * @description\r\n     * Returns model value of current\r\n     * component.This property was added\r\n     * for debugging purposes\r\n     * @returns { any }\r\n     */\n\n\n    get modelData() {\n      return this.modelDataInternal;\n    }\n    /**\r\n     * save the value of the model in an internal variable\r\n     */\n\n\n    set modelData(value) {\n      this.modelDataInternal = value;\n    }\n    /**\r\n     * @description\r\n     * Returns display value of current\r\n     * component.This property was added\r\n     * for debugging purposes\r\n     * @returns { any }\r\n     */\n\n\n    get displayValue() {\n      return this.displayValueInternal;\n    }\n    /**\r\n     * Sets display value for the control that is inside the column\r\n     */\n\n\n    set displayValue(value) {\n      this.displayValueInternal = value;\n    }\n    /**\r\n     * @description\r\n     * Returns the border value of the component model.\r\n     * @returns { number }\r\n     */\n\n\n    get borderDM() {\n      return this.model.Border;\n    }\n    /**\r\n     * Gets border style for the control that is inside the column\r\n     */\n\n\n    get borderStyle() {\n      this.boxBorder = Utils.getBoxShadow(this.borderDM);\n      return Utils.getBorderStyle(this.borderDM);\n    }\n    /**\r\n     * Gets trigger mouse down click\r\n     */\n\n\n    get triggerMouseDownClick() {\n      return this.model.TriggerMouseDownClick;\n    }\n    /**\r\n     * Sets trigger mouse down click\r\n     */\n\n\n    set triggerMouseDownClick(value) {\n      this.model.TriggerMouseDownClick = value;\n    }\n    /**\r\n     * The current component's format value\r\n     */\n\n\n    get format() {\n      return this.model.Format;\n    }\n    /**\r\n     * The current component's mask value\r\n     */\n\n\n    get powerMask() {\n      return this.model.Mask;\n    }\n    /**\r\n     * The useFormat propery\r\n     */\n\n\n    get useFormat() {\n      return this.model.UseFormat || false;\n    }\n    /**\r\n     * Whether to set the data value of the DropDownDataWindow\r\n     * to null when the user leaves the edit box blank.\r\n     */\n\n\n    get nilIsNull() {\n      return this.model.Edit ? Utils.isDefaultValue(this.model.Edit.NilIsNull, !!this.model.NilIsNull) : !!this.model.NilIsNull;\n    }\n    /**\r\n     * The current's component editFormat value.\r\n     */\n\n\n    get editFormat() {\n      return this.model.EditFormat ? this.model.EditFormat : this.model.Edit ? this.model.Edit.Format : undefined;\n    }\n    /**\r\n     * Gets the value of the Edit.AutoSelect property\r\n     */\n\n\n    get autoSelect() {\n      return this.model.Edit ? Utils.isDefaultValue(this.model.Edit.AutoSelect, true) : Utils.isDefaultValue(this.model.AutoSelect, true);\n    }\n    /**\r\n     * Gets the value of the Edit.AutoSkip property\r\n     */\n\n\n    get autoSkip() {\n      return this.model.Edit ? this.model.Edit.AutoSkip : this.model.AutoSkip;\n    }\n    /**\r\n     * Get the style type for the current column\r\n     * this property indicates the kind of control to\r\n     * be displayed by this column component\r\n     */\n\n\n    get visualControlType() {\n      return this.model.VisualControlType;\n    }\n    /**\r\n     * Get the columnId for the control\r\n     */\n\n\n    get columnId() {\n      return this.model.ColumnId;\n    }\n    /**\r\n     * @description\r\n     * Returns the protect value of the model.\r\n     * @returns { boolean }\r\n     */\n\n\n    get protect() {\n      return this.model.Protect || this.visualProtect;\n    }\n    /**\r\n     * @description\r\n     * Sets the protect value of the model.\r\n     * @param value The new value to set model property.\r\n     */\n\n\n    set protect(value) {\n      this.model.Protect = value;\n    }\n    /**\r\n     * @description\r\n     * Returns the required value of the model.\r\n     * @returns { boolean }\r\n     */\n\n\n    get required() {\n      return this.model.Protect;\n    }\n    /**\r\n     * @description\r\n     * Sets the required value of the model.\r\n     * @param value The new value to set model property.\r\n     */\n\n\n    set required(value) {\n      this.model.Protect = value;\n    }\n    /**\r\n     * Gets row in detail, indicates what detail of\r\n     * the visual row should be shown the logical data of\r\n     * the column.\r\n     */\n\n\n    get rowInDetail() {\n      return this.model.RowInDetail;\n    }\n    /**\r\n     * Gets edit required\r\n     * The column must be filled prior leaving it\r\n     */\n\n\n    get editRequired() {\n      return this.model.Edit ? Utils.isDefaultValue(this.model.Edit.Required, false) : false;\n    }\n\n  }\n\n  ColumnControlBaseComponent.ɵfac = /* @__PURE__ */function () {\n    let ɵColumnControlBaseComponent_BaseFactory;\n    return function ColumnControlBaseComponent_Factory(t) {\n      return (ɵColumnControlBaseComponent_BaseFactory || (ɵColumnControlBaseComponent_BaseFactory = i0.ɵɵgetInheritedFactory(ColumnControlBaseComponent)))(t || ColumnControlBaseComponent);\n    };\n  }();\n\n  ColumnControlBaseComponent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: ColumnControlBaseComponent,\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return ColumnControlBaseComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet BaseType = /*#__PURE__*/(() => {\n  class BaseType {\n    constructor() {\n      this.pbFormat = []; // contains powerbuilder masks and formats.\n\n      this.formatColor = []; // could contains a color if applies.\n    }\n    /**\r\n     *\r\n     * @param ruleIndex index of formatColor to apply color\r\n     */\n\n\n    applyColorRule(ruleIndex) {\n      return this.formatColor[ruleIndex] ? this.formatColor[ruleIndex] : this.formatColor[0];\n    }\n    /**\r\n     * @description\r\n     * This is called when component is OnInit state in order to define set format\r\n     * @param format power builder format\r\n     * @param columnType column type\r\n     */\n\n\n    initFormatArrays(format, columnType) {\n      this.columnType = columnType;\n\n      if (format) {\n        this.setFormat(format);\n      }\n    }\n    /**\r\n     * Splits mask in multi format and analyzes string detecting colors and types\r\n     * @param format  power builder mask\r\n     */\n\n\n    setFormat(format) {\n      const formats = this.splitmask(format);\n      this.pbFormat = [];\n      this.formatColor = [];\n\n      if (formats) {\n        for (let arrValue of formats) {\n          const subFormats = this.splitBrackets(arrValue);\n          let numberColor = 0;\n\n          for (const arrsub of subFormats) {\n            const hexColor = this.validColor(arrsub);\n\n            if (hexColor) {\n              this.formatColor.push(hexColor);\n              numberColor += 1;\n              arrValue = arrValue.replace(arrsub, '');\n              break;\n            }\n          }\n\n          if (numberColor === 0) {\n            this.formatColor.push('');\n          }\n\n          this.pbFormat.push(arrValue);\n        }\n      }\n    }\n    /**\r\n     * Returns an array of data between brackets\r\n     * @param mask power builder mask\r\n     */\n\n\n    splitBrackets(mask) {\n      const arrayflag = [];\n      let copyMask = mask;\n      let substring;\n\n      do {\n        const bracketsArray = copyMask.substring(copyMask.indexOf('['), copyMask.indexOf(']') + 1);\n\n        if (bracketsArray !== '') {\n          substring = this.removeBrackets(copyMask);\n          copyMask = substring;\n          arrayflag.push(bracketsArray);\n        }\n      } while (copyMask.indexOf('[') > -1);\n\n      return arrayflag;\n    }\n    /**\r\n     * Splits mask\r\n     * @param mask power builder mask\r\n     */\n\n\n    splitmask(mask) {\n      return mask ? mask.split(';') : null;\n    }\n    /**\r\n     * Return an hexadecimal valid color\r\n     * @param substring substring with square bracket data\r\n     */\n\n\n    validColor(substring) {\n      const color = BaseType.COLOR_FORMAT[substring];\n      return color ? color : undefined;\n    }\n    /**\r\n     * Removes the square brackets section of the mask\r\n     * @param format\r\n     * @return { string }\r\n     */\n\n\n    removeBrackets(format) {\n      return `${format.substring(0, format.indexOf('['))}${format.substring(format.indexOf(']') + 1, format.length)}`;\n    }\n    /**\r\n     * Returns a valid edit.format. Override in each service\r\n     * @param value valid type value.\r\n     * @param editFormat powerbuilder mask or format.\r\n     */\n\n\n    applyEditFormat(value, editFormat, length) {\n      if (editFormat) {\n        this.setFormat(editFormat);\n        return this.rules(value, length);\n      }\n\n      return value;\n    }\n    /**\r\n     * Returns a valid format.\r\n     * @param value valid type value.\r\n     * @param mask  powerbuilder mask or format.\r\n     */\n\n\n    applyFormat(value, mask, length, useEditMask) {\n      if (mask === undefined || mask === null || mask.trim() === '') {\n        return this.handleEmptyMask(value, length);\n      }\n\n      this.setFormat(mask);\n      return this.rules(value, length, useEditMask);\n    }\n\n    handleEmptyMask(value, length) {\n      return {\n        value,\n        color: null\n      };\n    }\n    /**\r\n     * apply transformation\r\n     * @param value value to transform\r\n     * @param mask mask to apply\r\n     * @param mycontext context of the mask\r\n     */\n\n\n    applyTransformation(value, mask, mycontext) {\n      return value;\n    }\n    /**\r\n     * Override in each service to apply the right rules.\r\n     */\n\n\n    rules(value, length, useEditMask) {\n      return null;\n    }\n    /**\r\n     * Numeric Rules: Positive-format;negative-format;zero-format;null-format\r\n     */\n\n\n    applyRule(ruleIndex) {\n      return this.pbFormat[ruleIndex] ? this.pbFormat[ruleIndex] : this.pbFormat[0];\n    }\n\n  }\n\n  /**\r\n   * Powerbuilder dictionary with hexadecimal html color\r\n   */\n  BaseType.COLOR_FORMAT = {\n    '[RED]': '#FF0000',\n    '[GREEN]': '#00FF00',\n    '[DARK GREEN]': '#008000',\n    '[BLUE]': '#0000FF',\n    '[YELLOW]': '#FFFF00',\n    '[BROWN]': '#808000',\n    '[CYAN]': '00FFFF',\n    '[LIGHT GRAY]': '#C0C0C0',\n    '[WHITE]': '#FFFFFF',\n    '[BLACK]': '#000000'\n  };\n  /*****************************************************************************\r\n   * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n   *\r\n   * This file is part of the Mobilize Frameworks, which is\r\n   * proprietary and confidential.\r\n   *\r\n   * NOTICE:  All information contained herein is, and remains\r\n   * the property of Mobilize.Net Corporation.\r\n   * The intellectual and technical concepts contained herein are\r\n   * proprietary to Mobilize.Net Corporation and may be covered\r\n   * by U.S. Patents, and are protected by trade secret or copyright law.\r\n   * Dissemination of this information or reproduction of this material\r\n   * is strictly forbidden unless prior written permission is obtained\r\n   * from Mobilize.Net Corporation.\r\n   ******************************************************************************/\n\n  return BaseType;\n})();\nvar Context$1 = /*#__PURE__*/(() => {\n  (function (Context) {\n    Context[\"general\"] = \"GENERAL\";\n    Context[\"currency\"] = \"CURRENCY\";\n    Context[\"percentageEnd\"] = \"PERCENTAGEEND\";\n    Context[\"percentageParenthesisEnd\"] = \"PERCENTAGEPARENTHESISEND\";\n    Context[\"percentageStart\"] = \"PERCENTAGESTART\";\n    Context[\"money\"] = \"MONEY\";\n    Context[\"moneyEnd\"] = \"MONEYEND\";\n    Context[\"numberOnly\"] = \"NUMBERONLY\";\n    Context[\"numberOnlyStrict\"] = \"NUMBERONLYSTRICT\";\n    Context[\"numberLiteral\"] = \"NUMBERWITHLITERAL\";\n    Context[\"simpledate\"] = \"SIMPLEDATE\";\n    Context[\"string\"] = \"STRING\";\n    Context[\"noMask\"] = \"NOMASK\";\n  })(Context$1 || (Context$1 = {}));\n\n  return Context$1;\n})();\n\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\nclass StringFunctions {\n  /**\r\n   * Applies a specific format in the value.\r\n   * @param value value to apply format\r\n   * @param mask mask to aply\r\n   * @param useEditMask indicastes if use mask instead of format\r\n   */\n  static format(value, mask, useEditMask, maskObject) {\n    let newStr = '';\n    newStr = useEditMask ? this.useEditMask(value, mask, maskObject) : this.useFormat(value, mask);\n    return newStr;\n  }\n  /**\r\n   * Applies a specific format in the value.\r\n   * @param value value to apply format\r\n   * @param mask mask to aply\r\n   */\n\n\n  static useFormat(value, mask) {\n    let newStr = '';\n    let index = 0;\n    let valueIndex = 0;\n\n    for (index; index < mask.length && valueIndex < value.length; index++) {\n      const char = mask.charAt(index);\n\n      if (char === '@') {\n        newStr += value.charAt(valueIndex);\n        valueIndex++;\n      } else {\n        newStr += mask.charAt(index);\n      }\n    }\n\n    if (index !== mask.length) {\n      for (index; index < mask.length; index++) {\n        const char = mask.charAt(index);\n\n        if (char !== '@') {\n          newStr += char;\n        }\n      }\n    }\n\n    return newStr;\n  }\n  /**\r\n   * Applies a specific format in the value.\r\n   * @param value value to apply format\r\n   * @param mask mask to aply\r\n   */\n\n\n  static useEditMask(value, mask, maskObject) {\n    let newStr = '';\n    let noMaskValue = '';\n    let index = 0;\n    let valueIndex = 0;\n    const pattern = /[^\\!\\^#axX]/;\n\n    for (index; index < mask.length && valueIndex < value.length; index++) {\n      const char = mask.charAt(index);\n\n      switch (char) {\n        case '!':\n          newStr += value.charAt(valueIndex).toUpperCase();\n          noMaskValue += value.charAt(valueIndex).toUpperCase();\n          valueIndex++;\n          break;\n\n        case '^':\n          newStr += value.charAt(valueIndex).toLowerCase();\n          noMaskValue += value.charAt(valueIndex).toLowerCase();\n          valueIndex++;\n          break;\n\n        case '#':\n        case 'a':\n        case 'x':\n        case 'X':\n          newStr += value.charAt(valueIndex);\n          noMaskValue += value.charAt(valueIndex);\n          valueIndex++;\n          break;\n\n        default:\n          newStr += mask.charAt(index);\n      }\n    }\n\n    if (maskObject) {\n      maskObject.noMaskValue = noMaskValue.length > 0 ? noMaskValue : null;\n    }\n\n    if (index !== mask.length) {\n      for (index; index < mask.length; index++) {\n        const char = mask.charAt(index);\n        newStr += pattern.test(char) ? char : ' ';\n      }\n    }\n\n    return newStr;\n  }\n\n}\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nvar StringRules = /*#__PURE__*/(() => {\n  (function (StringRules) {\n    StringRules[StringRules[\"string\"] = 0] = \"string\";\n    StringRules[StringRules[\"null\"] = 1] = \"null\";\n  })(StringRules || (StringRules = {}));\n\n  return StringRules;\n})();\n\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\nlet StringService = /*#__PURE__*/(() => {\n  class StringService extends BaseType {\n    constructor() {\n      super();\n    }\n    /**\r\n     * Numeric Rules: Positive-format;negative-format;zero-format;null-format\r\n     * Apply rules and returns an object with transformed value and color\r\n     * @param value valid numeric data\r\n     */\n\n\n    rules(value, length, useEditMask) {\n      if (this.pbFormat) {\n        return value == null || value.length === 0 ? this.applyStringRule(value, StringRules.null, useEditMask) : this.applyStringRule(value, StringRules.string, useEditMask);\n      } else {\n        return this.applyTransformation(value, null, this.getContext(null), useEditMask);\n      }\n    }\n    /**\r\n     * Apply a specific format in the value.\r\n     * @param value value to apply format\r\n     * @param rule number of rule to apply\r\n     */\n\n\n    applyStringRule(value, rule, useEditMask) {\n      const maskObject = {\n        value: null,\n        color: null,\n        noMaskValue: null\n      };\n      maskObject.value = this.applyTransformation(value, this.applyRule(rule), this.getContext(this.applyRule(rule)), useEditMask, maskObject);\n      maskObject.color = this.applyColorRule(rule);\n      return maskObject;\n    }\n\n    applyTransformation(value, mask, myContext, useEditMask, maskObject) {\n      switch (myContext) {\n        case Context$1.general:\n          return value;\n\n        case Context$1.string:\n          return StringFunctions.format(value, mask, useEditMask, maskObject);\n\n        case Context$1.noMask:\n          return value;\n      }\n    }\n\n    getContext(str) {\n      // GENERAL CASE\n      const pattern = /\\[General\\]/i;\n\n      if (pattern.test(str)) {\n        return Context$1.general;\n      }\n\n      if (str && str.length > 0) {\n        // substitution case\n        return Context$1.string;\n      } else {\n        return Context$1.noMask;\n      }\n    }\n\n  }\n\n  StringService.ɵfac = function StringService_Factory(t) {\n    return new (t || StringService)();\n  };\n\n  StringService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: StringService,\n    factory: StringService.ɵfac,\n    providedIn: 'root'\n  });\n  return StringService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nclass DateTimePatterns {\n  // tslint:disable-next-line: array-type\n  static getPatterns() {\n    return [DateTimePatterns.DateMonthDayYear, DateTimePatterns.DateDayMonthYear, DateTimePatterns.DateYearMonthDay, DateTimePatterns.DateDayMMMYear, DateTimePatterns.DateYearMMMDay, DateTimePatterns.DateDayMMMMYear, DateTimePatterns.DateYearMMMMDay, DateTimePatterns.DateYear, DateTimePatterns.DateMonthDayYearHHMM, DateTimePatterns.DateMonthDayYearHHMMSSMs];\n  } // tslint:disable-next-line: array-type\n\n\n  static getTimePatterns() {\n    return [DateTimePatterns.TimeHoursMinutes, DateTimePatterns.TimeHoursMinutesFromHours, DateTimePatterns.TimeHoursMinutesSeconds, DateTimePatterns.TimeHoursMinutesSecondsMs];\n  }\n\n}\n\nDateTimePatterns.day = '(0?[1-9]|[12][0-9]|3[01])';\nDateTimePatterns.month = '(0?[1-9]|1[012])';\nDateTimePatterns.mmmonth = '(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)';\nDateTimePatterns.mmmmonth = '(january|february|march|april|may|june|july|august|september|october|november|december)';\nDateTimePatterns.year = '(\\\\d{4}|\\\\d{2})';\nDateTimePatterns.split = '[\\\\/\\\\-\\\\s\\\\:\\\\,\\\\.]';\nDateTimePatterns.hhmmss = `(2[0-3]|[01]?[0-9])${DateTimePatterns.split}([0-5]?[0-9])(${DateTimePatterns.split}[0-5][0-9])?`;\nDateTimePatterns.seconds = ':([0-5][0-9])';\nDateTimePatterns.millisec = ':([0-9][0-9][0-9])';\nDateTimePatterns.hh = '(2[0-3]|[01]?[0-9])';\nDateTimePatterns.DateYearMonthDay = {\n  regex: new RegExp(`^${DateTimePatterns.year}${DateTimePatterns.split}${DateTimePatterns.month}${DateTimePatterns.split}${DateTimePatterns.day}$`),\n  replace: '$2/$3/$1'\n};\nDateTimePatterns.DateDayMonthYear = {\n  regex: new RegExp(`^${DateTimePatterns.day}${DateTimePatterns.split}${DateTimePatterns.month}${DateTimePatterns.split}${DateTimePatterns.year}$`),\n  replace: '$2/$1/$3'\n};\nDateTimePatterns.DateYearMMMDay = {\n  regex: new RegExp(`^${DateTimePatterns.year}${DateTimePatterns.split}${DateTimePatterns.mmmonth}${DateTimePatterns.split}${DateTimePatterns.day}$`),\n  replace: '$2/$3/$1'\n};\nDateTimePatterns.DateDayMMMYear = {\n  regex: new RegExp(`^${DateTimePatterns.day}${DateTimePatterns.split}${DateTimePatterns.mmmonth}${DateTimePatterns.split}${DateTimePatterns.year}$`),\n  replace: '$2/$1/$3'\n};\nDateTimePatterns.DateYearMMMMDay = {\n  regex: new RegExp(`^${DateTimePatterns.year}${DateTimePatterns.split}${DateTimePatterns.mmmmonth}${DateTimePatterns.split}${DateTimePatterns.day}$`),\n  replace: '$2/$3/$1'\n};\nDateTimePatterns.DateDayMMMMYear = {\n  regex: new RegExp(`^${DateTimePatterns.day}${DateTimePatterns.split}${DateTimePatterns.mmmmonth}${DateTimePatterns.split}${DateTimePatterns.year}$`),\n  replace: '$2/$1/$3'\n};\nDateTimePatterns.DateMonthDayYear = {\n  regex: new RegExp(`^${DateTimePatterns.month}\\\\/${DateTimePatterns.day}\\\\/${DateTimePatterns.year}$`),\n  replace: '$1/$2/$3'\n};\nDateTimePatterns.DateMonthDayYearHHMM = {\n  regex: new RegExp(`^${DateTimePatterns.month}${DateTimePatterns.split}${DateTimePatterns.day}${DateTimePatterns.split}${DateTimePatterns.year}\\\\s${DateTimePatterns.hhmmss}$`),\n  replace: '$1/$2/$3 $4:$5$6'\n};\nDateTimePatterns.TimeHoursMinutesSeconds = {\n  regex: new RegExp(`^${DateTimePatterns.hhmmss}$`),\n  replace: '$1:$2:$3'\n};\nDateTimePatterns.TimeHoursMinutesSecondsMs = {\n  regex: new RegExp(`^${DateTimePatterns.hhmmss}${DateTimePatterns.millisec}$`),\n  replace: '$1:$2:$3 $4'\n};\nDateTimePatterns.TimeHoursMinutes = {\n  regex: new RegExp(`^${DateTimePatterns.hhmmss}${DateTimePatterns.millisec}$`),\n  replace: '$1:$2'\n};\nDateTimePatterns.TimeHoursMinutesFromHours = {\n  regex: new RegExp(`^${DateTimePatterns.hh}$`),\n  replace: '$1:00'\n};\nDateTimePatterns.DateMonthDayYearHHMMSSMs = {\n  regex: new RegExp(`^${DateTimePatterns.month}${DateTimePatterns.split}${DateTimePatterns.day}${DateTimePatterns.split}${DateTimePatterns.year}\\\\s${DateTimePatterns.hhmmss}${DateTimePatterns.millisec}$`),\n  replace: '$1/$2/$3 $4:$5$6:$7'\n};\nDateTimePatterns.DateYear = {\n  regex: new RegExp(`^${DateTimePatterns.year}$`),\n  replace: '01/01/$1'\n};\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n/**\r\n * Validates length of a value when it is different from zero\r\n * @param value Current value to be evaluated\r\n * @param length length of the current value\r\n */\n\nfunction lengthValidation(value, length) {\n  return !length ? true : !(value.length > length) || value === null;\n}\n\nfunction removeDecimals(value, decimal, decLength) {\n  return value.slice(0, decimal - decLength);\n}\n\nfunction completeDecimals(value, decimal, complete) {\n  if (complete !== 0) {\n    value = complete !== decimal ? value : value.concat('.');\n\n    for (let zero = complete; zero < decimal; zero++) {\n      value = value.concat('0');\n    }\n  }\n\n  return value;\n}\n\nfunction numericValidation(value) {\n  value = removeCurrency(value);\n  return isValidNumber(value) ? Number(removeComasBeforeDot(value)) : null;\n}\n\nfunction isValidNumber(value) {\n  const pattern = /[^\\#\\d\\.\\,]/;\n\n  if (value.length > 0 && (!pattern.test(value) || !isNaN(value))) {\n    const afterdot = value.substr(value.indexOf('.') + 1);\n    return !(afterdot && (afterdot.includes('.') || afterdot.includes(',')));\n  }\n\n  return false;\n}\n\nfunction dateValidation(value) {\n  // tslint:disable-next-line: array-type\n  const patterns = DateTimePatterns.getPatterns();\n  value = value.toLocaleLowerCase();\n\n  for (const pattern of patterns) {\n    if (pattern.regex.test(value)) {\n      value = value.replace(pattern.regex, pattern.replace);\n      return Utils.dateToString(new Date(value));\n    }\n  }\n\n  return null;\n}\n\nfunction timeValidation(value) {\n  // tslint:disable-next-line: array-type\n  const patterns = DateTimePatterns.getTimePatterns();\n  value = value.toLocaleLowerCase();\n\n  for (const pattern of patterns) {\n    if (pattern.regex.test(value)) {\n      value = value.replace(pattern.regex, pattern.replace);\n      value = `${Utils.DEFAULT_DATE_TIME} ${value}`;\n      return Utils.dateToString(new Date(value));\n    }\n  }\n\n  return null;\n}\n\nfunction removeComasBeforeDot(value) {\n  return value.replace(/,/g, '');\n}\n\nfunction removeCurrency(value) {\n  return value.replace(/[$|£|€|₡]/g, '');\n}\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nclass DataTypeValidator {\n  /**\r\n   * Validates type according with the data type pass as parameter.\r\n   * @param value Value to be validated\r\n   * @param { DataTypeNames } type Data type of current value.\r\n   * @param nilIsNull Determines when the null value has to be treated as empty\r\n   * string.\r\n   * @param [decimal] Optional parameter that contains value length\r\n   * @param [avoidLengthValidation]  Optional parameter to avoid data type\r\n   * length validation.\r\n   */\n  static validateType(value, type, nilIsNull, decimal, avoidLengthValidation) {\n    if (Utils.isEmptyStringNull(value, nilIsNull, type)) {\n      return null;\n    }\n\n    const valueString = String(value).trim();\n\n    switch (type) {\n      case DataTypeNames.decimal:\n      case DataTypeNames.long:\n      case DataTypeNames.numeric:\n        return numericValidation(valueString);\n\n      case DataTypeNames.date:\n      case DataTypeNames.datetime:\n        return Utils.isDateServerProtocol(value) ? value : dateValidation(valueString);\n\n      case DataTypeNames.time:\n        return Utils.isDateServerProtocol(value) ? value : timeValidation(valueString);\n\n      case DataTypeNames.string:\n        return lengthValidation(valueString, decimal) || avoidLengthValidation ? value === null ? '' : value : null;\n\n      default:\n        return value;\n    }\n  }\n\n  static decimalValidation(value, decimal) {\n    if (value.indexOf('.') > -1) {\n      const decLength = value.substring(value.indexOf('.') + 1).length;\n      return decLength > decimal ? removeDecimals(value, decimal, decLength) : completeDecimals(value, decimal, decimal - decLength);\n    }\n\n    return completeDecimals(value, decimal, 0);\n  }\n  /**\r\n   * Validates if the variable format is a valid date format\r\n   * @param format Format to be validated\r\n   */\n\n\n  static isDateTypeByFormat(format) {\n    // tslint:disable-next-line: array-type\n    const patterns = Utils.getDateFormatPatterns();\n\n    if (format) {\n      for (const pattern of patterns) {\n        if (pattern.regex.test(format) || format.includes('DATE')) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n}\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nconst roundTo$1 = roundTo_;\n\nclass NumericFunctions {\n  static general(value) {\n    return `${value}`;\n  }\n\n  static currency(value) {\n    let newStr = '';\n    value = NumericFunctions.roundNumber(value, 2);\n    newStr = NumericFunctions.absoluteValue(value).toFixed(2);\n    newStr = NumericFunctions.generateCommas(newStr, 2);\n    newStr = value >= 0 ? `\\$${newStr}` : `(\\$${newStr})`;\n    return newStr;\n  }\n\n  static roundNumber(number, decimal) {\n    return roundTo$1(number, decimal);\n  }\n\n  static absoluteValue(number) {\n    return Math.abs(number);\n  }\n\n  static generateCommas(str, decimal) {\n    const x = str.split('.');\n    let x1 = x[0];\n    const x2 = x.length > 1 ? `\\.${x[1]}` : '';\n    const rgx = /(\\d+)(\\d{3})/;\n\n    while (rgx.test(x1)) {\n      x1 = x1.replace(rgx, '$1' + ',' + '$2');\n    }\n\n    if (decimal) {\n      return x1 + x2.substring(0, decimal + 1);\n    }\n\n    return `${x1}${x2}`;\n  }\n\n  static money(value, mask) {\n    const newStr = NumericFunctions.numberOnly(value, mask.substring(1));\n\n    if (NumericFunctions.formatHasParenthesis(mask) && value < 0) {\n      return NumericFunctions.useParenthesis(newStr);\n    } else {\n      return `\\$${newStr}`;\n    }\n  }\n\n  static moneyEnd(value, mask) {\n    const newStr = NumericFunctions.numberOnly(value, mask.slice(0, -1));\n    return `${newStr}\\$`;\n  }\n\n  static percentageStart(value, mask) {\n    const newStr = NumericFunctions.numberOnly(value * 100, mask.slice(1));\n    return `\\%${newStr}`;\n  }\n\n  static percentageEnd(value, mask) {\n    const newStr = NumericFunctions.numberOnly(value * 100, mask.substring(1));\n    return `${newStr}\\%`;\n  }\n\n  static percentageParenthesisEnd(value, mask) {\n    const newStr = NumericFunctions.numberOnly(value * 100, mask.substring(1));\n    return `(${newStr}\\%)`;\n  }\n\n  static numberOnly(value, mask) {\n    let newStr = `${value}`;\n    const {\n      decimalMask,\n      cdZeros,\n      countCommas,\n      countDots,\n      cZeros\n    } = NumericFunctions.splitMask(mask);\n    const cdNumberSign = NumericFunctions.processNumberSign(decimalMask);\n    const maxDecimal = cdNumberSign + cdZeros;\n    value = NumericFunctions.roundNumber(value, maxDecimal);\n    newStr = NumericFunctions.FormatZerosNumberSign(newStr, maxDecimal, value, countCommas, countDots, cZeros, cdZeros);\n    return newStr;\n  }\n\n  static numberLiteral(value, mask) {\n    const valueToString = `${value}`;\n    const numberMask = NumericFunctions.splitIntegralDecimal(mask);\n    const numb = NumericFunctions.splitIntegralDecimal(valueToString);\n    const integral = NumericFunctions.setFormat(numb[0], numberMask[0]);\n    const decimal = NumericFunctions.setFormat(numb[1], numberMask[1]);\n\n    if (numb[1].length >= 2) {\n      return `${integral}.${decimal}`;\n    }\n\n    return integral;\n  }\n\n  static setFormat(value, mask) {\n    let newStr = '';\n    let index = 0;\n    let valueIndex = 0;\n\n    for (index; index < mask.length && valueIndex < value.length; index++) {\n      const char = mask.charAt(index);\n\n      if (char === '#' || char === '0') {\n        newStr += value.charAt(valueIndex);\n        valueIndex++;\n      } else {\n        newStr += mask.charAt(index);\n      }\n    }\n\n    if (index !== mask.length) {\n      for (index; index < mask.length; index++) {\n        const char = mask.charAt(index);\n\n        if (char !== '#') {\n          newStr += char;\n        }\n      }\n    }\n\n    return newStr;\n  }\n\n  static splitIntegralDecimal(mask) {\n    const tmpMask = mask.split('.');\n    const integralMask = tmpMask[0];\n    const decimalMask = tmpMask[1] ? tmpMask[1] : '';\n    return [integralMask, decimalMask];\n  }\n\n  static processNumberSign(decimalMask) {\n    const dNumberSign = decimalMask.match(/#/g);\n    return dNumberSign ? dNumberSign.length : 0;\n  }\n\n  static splitMask(mask) {\n    const countCommas = mask.split(',').length;\n    const maskNumber = mask.split('.');\n    const integralMask = maskNumber[0] || '';\n    const decimalMask = maskNumber[1] || '';\n    const countDots = maskNumber.length || 0;\n    const Zeros = integralMask.match(/0/g);\n    const dZeros = decimalMask.match(/0/g);\n    const cZeros = Zeros ? Zeros.length : 0;\n    const cdZeros = dZeros ? dZeros.length : 0;\n    return {\n      decimalMask,\n      cdZeros,\n      countCommas,\n      countDots,\n      cZeros\n    };\n  }\n\n  static FormatZerosNumberSign(newStr, maxDecimal, value, countCommas, countDots, cZeros, cdZeros) {\n    let nwStrFlag = NumericFunctions.GenCommas(maxDecimal, value, countCommas);\n    const splitNumber = nwStrFlag.split('.');\n    const integralNewNumber = splitNumber[0] || '';\n    const decimalNewNumber = splitNumber[1] || '';\n\n    if (countDots === 2 && splitNumber.length === 1) {\n      nwStrFlag += '.';\n    }\n\n    nwStrFlag = NumericFunctions.fillWithZeros(integralNewNumber, cZeros, nwStrFlag);\n    nwStrFlag = NumericFunctions.FillWithZerosEnd(decimalNewNumber, cdZeros, nwStrFlag);\n    return nwStrFlag;\n  }\n\n  static FillWithZerosEnd(decimalNewNumber, cdZeros, newStr) {\n    const countSplit2 = decimalNewNumber ? decimalNewNumber.length : 0;\n\n    if (countSplit2 < cdZeros) {\n      let addZeros = cdZeros - countSplit2;\n\n      for (addZeros; addZeros > 0; addZeros--) {\n        newStr = `${newStr}0`;\n      }\n    }\n\n    return newStr;\n  }\n\n  static fillWithZeros(integralNewNumber, cZeros, newStr) {\n    const countSplit1 = integralNewNumber ? integralNewNumber.length : 0;\n\n    if (countSplit1 < cZeros) {\n      let addZeros = cZeros - countSplit1;\n\n      for (addZeros; addZeros > 0; addZeros--) {\n        newStr = `0${newStr}`;\n      }\n    }\n\n    return newStr;\n  }\n\n  static GenCommas(maxDecimal, value, countCommas) {\n    let newStr = `${value}`;\n\n    if (countCommas >= 2) {\n      newStr = NumericFunctions.generateCommas(newStr, maxDecimal);\n    }\n\n    return newStr;\n  }\n\n  static formatHasParenthesis(format) {\n    return format.includes('(') && format.includes(')');\n  }\n\n  static useParenthesis(value) {\n    const newStr = value.replace('-', '');\n    return `($${newStr})`;\n  }\n\n}\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nvar NumericRules = /*#__PURE__*/(() => {\n  (function (NumericRules) {\n    NumericRules[NumericRules[\"positive\"] = 0] = \"positive\";\n    NumericRules[NumericRules[\"negative\"] = 1] = \"negative\";\n    NumericRules[NumericRules[\"zero\"] = 2] = \"zero\";\n    NumericRules[NumericRules[\"null\"] = 3] = \"null\";\n  })(NumericRules || (NumericRules = {}));\n\n  return NumericRules;\n})();\n\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\nlet BaseNumericService = /*#__PURE__*/(() => {\n  class BaseNumericService extends BaseType {\n    constructor() {\n      super();\n    }\n\n    getContext(str) {\n      // GENERAL CASE\n      let pattern = /\\[General\\]/i;\n\n      if (pattern.test(str)) {\n        return Context$1.general;\n      } // CURRENCY CASE\n\n\n      pattern = /\\[Currency.*/i;\n\n      if (pattern.test(str)) {\n        return Context$1.currency;\n      } // LETTERS CASE\n\n\n      pattern = /[A-Za-z]/i;\n\n      if (pattern.test(str)) {\n        return Context$1.numberLiteral;\n      } // PERCENTAGE CASE\n\n\n      pattern = /^\\%/;\n\n      if (pattern.test(str)) {\n        return Context$1.percentageStart;\n      } // PERCENTAGE CASE\n\n\n      pattern = /\\%$/;\n\n      if (pattern.test(str)) {\n        return Context$1.percentageEnd;\n      } // PERCENTAGE PARENTHESIS CASE\n\n\n      pattern = /\\((\\d*.+\\d*)%\\)/;\n\n      if (pattern.test(str)) {\n        return Context$1.percentageParenthesisEnd;\n      } // MONEY CASE\n\n\n      pattern = /^\\$|^\\(\\$/;\n\n      if (pattern.test(str)) {\n        return Context$1.money;\n      } // MONEYEND CASE\n\n\n      pattern = /\\$$/;\n\n      if (pattern.test(str)) {\n        return Context$1.moneyEnd;\n      } // NUMBERONLYSTRICT\n\n\n      pattern = /^\\#+$/;\n\n      if (pattern.test(str)) {\n        return Context$1.numberOnlyStrict;\n      } // NUMBERONLY\n\n\n      pattern = /[^\\#\\d\\.\\,\\-]/;\n\n      if (!pattern.test(str)) {\n        return Context$1.numberOnly;\n      }\n\n      return Context$1.noMask;\n    }\n\n  }\n\n  BaseNumericService.ɵfac = function BaseNumericService_Factory(t) {\n    return new (t || BaseNumericService)();\n  };\n\n  BaseNumericService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: BaseNumericService,\n    factory: BaseNumericService.ɵfac,\n    providedIn: 'root'\n  });\n  return BaseNumericService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet NumericService = /*#__PURE__*/(() => {\n  class NumericService extends BaseNumericService {\n    constructor() {\n      super();\n    }\n    /**\r\n     * Numeric Rules: Positive-format;negative-format;zero-format;null-format\r\n     * Apply rules and returns an object with transformed value and color\r\n     * @param value valid numeric data\r\n     */\n\n\n    rules(value) {\n      if (value > 0) {\n        // Positive-format\n        return this.applyNumericRules(value, NumericRules.positive);\n      }\n\n      if (value < 0) {\n        // negative-format\n        return this.applyNumericRules(value, NumericRules.negative);\n      }\n\n      if (parseInt(value, null) === 0) {\n        // zero-format\n        return this.applyNumericRules(value, NumericRules.zero);\n      }\n\n      if (value === null) {\n        // null-format\n        return this.applyNumericRules(value, NumericRules.null);\n      }\n\n      return {\n        value: null,\n        color: null\n      };\n    }\n    /**\r\n     * Apply a specific format and color for the value.\r\n     * @param value value to apply format\r\n     * @param rule number of rule to apply\r\n     */\n\n\n    applyNumericRules(value, rule) {\n      const numObject = {\n        value: null,\n        color: null\n      };\n      const localRule = this.applyRule(rule);\n      const context = this.getContext(localRule);\n\n      if (rule === NumericRules.zero && context === Context$1.numberOnlyStrict) {\n        numObject.value = '';\n      } else {\n        numObject.value = this.applyTransformation(value, localRule, context);\n      }\n\n      numObject.color = this.applyColorRule(rule);\n      return numObject;\n    }\n\n    applyTransformation(value, mask, myContext) {\n      switch (myContext) {\n        case Context$1.general:\n          return NumericFunctions.general(value);\n\n        case Context$1.currency:\n          return NumericFunctions.currency(value);\n\n        case Context$1.percentageStart:\n          return NumericFunctions.percentageStart(value, mask);\n\n        case Context$1.percentageEnd:\n          return NumericFunctions.percentageEnd(value, mask);\n\n        case Context$1.money:\n          return NumericFunctions.money(value, mask);\n\n        case Context$1.moneyEnd:\n          return NumericFunctions.moneyEnd(value, mask);\n\n        case Context$1.numberOnlyStrict:\n        case Context$1.numberOnly:\n          return NumericFunctions.numberOnly(value, mask);\n\n        case Context$1.numberLiteral:\n          return NumericFunctions.numberLiteral(value, mask);\n\n        default:\n          return value;\n      }\n    }\n    /**\r\n     * Override de handleEmptyMask from base-type.\r\n     * Used to add or remove the decimals in the number\r\n     * @param value number to apply the decimal precision.\r\n     * @param length the number of decimal for the value\r\n     */\n\n\n    handleEmptyMask(value, length) {\n      if (length !== undefined && length !== null) {\n        const number = DataTypeValidator.decimalValidation(String(value), length);\n        return {\n          value: number,\n          color: null\n        };\n      }\n\n      return {\n        value,\n        color: null\n      };\n    }\n\n  }\n\n  NumericService.ɵfac = function NumericService_Factory(t) {\n    return new (t || NumericService)();\n  };\n\n  NumericService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: NumericService,\n    factory: NumericService.ɵfac,\n    providedIn: 'root'\n  });\n  return NumericService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n// <summary>\n// Specifies the data type of the control\n\n\nvar MaskDataType = /*#__PURE__*/(() => {\n  (function (MaskDataType) {\n    // The numeric mask\n    MaskDataType[MaskDataType[\"NumericMask\"] = 0] = \"NumericMask\"; // The date mask\n\n    MaskDataType[MaskDataType[\"DateMask\"] = 1] = \"DateMask\"; // The date time mask\n\n    MaskDataType[MaskDataType[\"DateTimeMask\"] = 2] = \"DateTimeMask\"; // The decimal mask\n\n    MaskDataType[MaskDataType[\"DecimalMask\"] = 3] = \"DecimalMask\"; // The string mask\n\n    MaskDataType[MaskDataType[\"StringMask\"] = 4] = \"StringMask\"; // The time mask\n\n    MaskDataType[MaskDataType[\"TimeMask\"] = 5] = \"TimeMask\";\n  })(MaskDataType || (MaskDataType = {}));\n\n  return MaskDataType;\n})();\n\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\nlet EditMaskService = /*#__PURE__*/(() => {\n  class EditMaskService {\n    /**\r\n     * @description\r\n     * Indicates if the format is a multiple format type\r\n     * @param format\r\n     * @returns { boolean }\r\n     */\n    static isMultipleFormat(format) {\n      return format.includes(';');\n    }\n    /**\r\n     * Splits the multiple inline formats into an array\r\n     * @param format\r\n     * @returns array with different formats\r\n     */\n\n\n    static splitMultipleFormats(format) {\n      return format.split(';');\n    }\n    /**\r\n     * Indicates if the mask is a numeric type\r\n     * @param maskDataType\r\n     * @returns { boolean }\r\n     */\n\n\n    static isNumericMask(maskDataType) {\n      if (isNaN(maskDataType)) {\n        return maskDataType.toLowerCase() === 'numericmask' || maskDataType.toLowerCase() === 'decimalmask';\n      } else {\n        return maskDataType === MaskDataType.NumericMask || maskDataType === MaskDataType.DecimalMask;\n      }\n    }\n    /**\r\n     * Checks if the mask has an specific color on it\r\n     * @param format\r\n     * @return { boolean }\r\n     */\n\n\n    static hasColor(format) {\n      for (const arrValue of this.COLOR_FORMAT) {\n        if (format.indexOf(arrValue) > -1) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /**\r\n     * Removes the color section of the mask\r\n     * @param format\r\n     * @return { string }\r\n     */\n\n\n    static removeColor(format) {\n      return `${format.substring(0, format.indexOf('['))}${format.substring(format.indexOf(']') + 1, format.length)}`;\n    }\n    /**\r\n     * Gets string mask length of input characters of mask\r\n     * and returns the position of last valid input character\r\n     * @param mask current string mask\r\n     * @returns { length, position } Length and position values\r\n     */\n\n\n    static getStringMaskLengthAndLastPosition(mask) {\n      const returnValue = {\n        length: 0,\n        position: 0\n      };\n\n      if (mask && mask.length > 0) {\n        const sMask = this.splitMultipleFormats(mask)[0];\n        const regex = new RegExp(/!|\\^|x|X|a|A|#|\\.|0/, 'g');\n        const maskCharactersLength = sMask.replace(regex, '').length;\n        const reverseMask = sMask.split('').reverse().join('');\n        regex.test(reverseMask);\n        returnValue.length = sMask.length - maskCharactersLength;\n        returnValue.position = sMask.length - regex.lastIndex;\n      }\n\n      return returnValue;\n    }\n    /**\r\n     * Reviews if the mask is a SimpleNumericMask\r\n     * @param mask\r\n     * @return { boolean }\r\n     */\n\n\n    static isSimpleNumericMask(mask) {\n      if (!mask || mask.length === 0) {\n        return true;\n      } else {\n        let sMask = this.removeColor(this.splitMultipleFormats(mask)[0]);\n\n        if (sMask.charAt(0).match(new RegExp('[-]'))) {\n          sMask = sMask.substring(1, sMask.length);\n        }\n\n        if (sMask.charAt(0).match(new RegExp('[$]')) && (sMask.split('.')[0].length === 3 || sMask.split('.')[0].length > 3 && sMask.indexOf(',') !== -1)) {\n          sMask = sMask.substring(1, sMask.length);\n        }\n\n        if (sMask.charAt(sMask.length - 1).match('%')) {\n          sMask = sMask.substring(0, sMask.length - 2);\n        }\n\n        return !(sMask.replace(/#|0|,|\\.|E+|\\\\/g, '').length > 0);\n      }\n    }\n    /**\r\n     * Returns the numeric mask for the format\r\n     * @param numericMask\r\n     * @return { string }\r\n     */\n\n\n    static getNumericMask(numericMask) {\n      if (!numericMask || numericMask.length === 0) {\n        return '';\n      } else {\n        numericMask = numericMask.split(';')[0];\n        let format = this.processFormat(numericMask);\n        const parts = numericMask.split('.');\n\n        if (parts.length > 1) {\n          if (numericMask.indexOf(',') === -1) {\n            format += numericMask;\n          } else {\n            format += parts[1].length;\n          }\n        } else {\n          format += '0';\n        }\n\n        return format;\n      }\n    }\n    /**\r\n     * Gets numeric mask decimals\r\n     * @param numericMask Mask received as parameter\r\n     * @returns numeric mask decimals\r\n     */\n\n\n    static getNumericMaskDecimals(numericMask) {\n      const parts = numericMask.split('.');\n      return parts.length > 1 ? parts[1].length : 0;\n    }\n    /**\r\n     * Returns a format value based on  numericMask\r\n     * @param numericMask  numeric mask to be process\r\n     */\n\n\n    static processFormat(numericMask) {\n      return numericMask.charAt(0) === '$' || numericMask.match(/\\[Currency.*/i) ? 'c' : numericMask.indexOf(',') !== -1 ? 'n' : '';\n    }\n    /**\r\n     * Indicates is the mask is a DateTimeMask\r\n     * @param maskDataType\r\n     * @return { boolean }\r\n     */\n\n\n    static isDateTimeMask(maskDataType) {\n      if (isNaN(maskDataType)) {\n        return maskDataType.toLowerCase() === 'datemask' || maskDataType.toLowerCase() === 'datetimemask';\n      } else {\n        return maskDataType === MaskDataType.DateMask || maskDataType === MaskDataType.DateTimeMask;\n      }\n    }\n    /**\r\n     * Determines whether date mask is a datemask\r\n     * @param maskDataType number or string that represents mask data type\r\n     * @returns { boolean } true if date mask is a datemask\r\n     */\n\n\n    static isDateMask(maskDataType) {\n      return isNaN(maskDataType) ? maskDataType.toLowerCase() === 'datemask' : maskDataType === MaskDataType.DateMask;\n    }\n    /**\r\n     * Indicates is the mask is a TimeMask\r\n     * @param maskDataType\r\n     * @return { boolean }\r\n     */\n\n\n    static isTimeMask(maskDataType) {\n      if (isNaN(maskDataType)) {\n        return maskDataType.toLowerCase() === 'timemask';\n      } else {\n        return maskDataType === MaskDataType.TimeMask;\n      }\n    }\n    /**\r\n     * Gets the min value base on the mask\r\n     * @param numericMask\r\n     * @return { string }\r\n     */\n\n\n    static getNumericMaskMinValueAsString(numericMask) {\n      const value = this.getNumericMaskMaxValueAsString(numericMask).toString();\n\n      if (value) {\n        return `-${value}`;\n      }\n\n      return null;\n    }\n    /**\r\n     * Gets the max value base on the mask\r\n     * @param numericMask\r\n     * @return { string }\r\n     */\n\n\n    static getNumericMaskMaxValueAsString(numericMask) {\n      if (this.isMultipleFormat(numericMask)) {\n        numericMask = this.splitMultipleFormats(numericMask)[0];\n      }\n\n      numericMask = numericMask.replace('$', '');\n      numericMask = numericMask.replace('%', '');\n      return numericMask.replace(new RegExp(/\\[currency(\\([0-9]+\\))?\\]/, 'i'), '').replace(new RegExp('#|0', 'g'), '9').replace(new RegExp(',', 'g'), '');\n    }\n    /**\r\n     * Returns the numeric mask\r\n     * @param numericMask\r\n     * @return { string }\r\n     */\n\n\n    static getNumericComplexMask(maskStr) {\n      if (this.isMultipleFormat(maskStr)) {\n        maskStr = this.splitMultipleFormats(maskStr)[0];\n      }\n\n      return maskStr.replace(new RegExp('#', 'g'), '9').toString();\n    }\n    /**\r\n     * Formats mask in intl format\r\n     * @param maskStr\r\n     * @returns mask for intl https://github.com/telerik/kendo-intl/blob/develop/docs/num-formatting/index.md\r\n     */\n\n\n    static formatMaskForIntl(maskStr) {\n      return maskStr.replace(new RegExp('9', 'g'), '0').toString();\n    }\n    /**\r\n     * repeats a string as many times as the count parameter\r\n     * @param maskStr\r\n     * @return { string }\r\n     */\n\n\n    static repeatString(str, count) {\n      let result = '';\n\n      for (let i = 0; i < count; i++) {\n        result += str;\n      }\n\n      return result;\n    }\n    /**\r\n     * Returns the rules for the mask convertion\r\n     * @param maskStr\r\n     * @return { [key: string]: RegExp }\r\n     */\n\n\n    static getMaskRules() {\n      const expression = '[a-zA-Z0-9]';\n      return {\n        '!': new RegExp(expression),\n        '^': new RegExp(expression),\n        x: new RegExp('.'),\n        X: new RegExp('.'),\n        a: new RegExp(expression),\n        A: new RegExp(expression),\n        '#': new RegExp('[0-9]')\n      };\n    }\n\n  }\n\n  EditMaskService.COLOR_FORMAT = ['[RED]', '[GREEN]', '[DARK GREEN]', '[BLUE]', '[YELLOW]', '[BROWN]', '[CYAN]', '[LIGHT GRAY]', '[WHITE]', '[BLACK]'];\n  /*****************************************************************************\r\n   * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n   *\r\n   * This file is part of the Mobilize Frameworks, which is\r\n   * proprietary and confidential.\r\n   *\r\n   * NOTICE:  All information contained herein is, and remains\r\n   * the property of Mobilize.Net Corporation.\r\n   * The intellectual and technical concepts contained herein are\r\n   * proprietary to Mobilize.Net Corporation and may be covered\r\n   * by U.S. Patents, and are protected by trade secret or copyright law.\r\n   * Dissemination of this information or reproduction of this material\r\n   * is strictly forbidden unless prior written permission is obtained\r\n   * from Mobilize.Net Corporation.\r\n   ******************************************************************************/\n\n  return EditMaskService;\n})();\n\nclass DateTimeFunctions {\n  /**\r\n   * Process PBDate time mask format to a Front-end parsed mask format.\r\n   * @param format The format received from Back-end.\r\n   * @returns Front-end parsed mask format.\r\n   */\n  static processPBDateTimeMaskFormat(format) {\n    const originalFormat = format;\n    format = /am\\/pm|AM\\/PM|a\\/p|A\\/P/.test(originalFormat) ? format.replace(/am\\/pm|AM\\/PM/, 'a') : format.replace(/h/g, 'H');\n\n    if (/a\\/p|A\\/P/.test(originalFormat)) {\n      // Narrow am/pm format support\n      format = format.replace(/a\\/p|A\\/P/, 'aaaaa');\n    }\n\n    const splMaskStr = format.split(/(h+|H+):?(m+|M+):?(s+|S+)?/g);\n\n    for (const value of splMaskStr) {\n      const oldSplMaskStr = value ? value.toString() : value;\n      format = value && !value.includes('/') && RegExp(/^((h|H){1,2})?:?((m|M){1,2})?:?((s|S)+)?$/gm).test(value) ? DateTimeFunctions.processTimeFormat(value, format, oldSplMaskStr) : DateTimeFunctions.processDateFormat(value, format, oldSplMaskStr);\n    }\n\n    format = format.replace(/f/g, 'S');\n    format = this.returnValidMaskFromPBFormats(format);\n    return format;\n  }\n  /**\r\n   * Process date format section.\r\n   * @param value Date section of format value.\r\n   * @param format The entire format value.\r\n   * @param oldSplMaskStr The original value of date section format.\r\n   * @returns date format parsed to Front-end.\r\n   */\n\n\n  static processDateFormat(value, format, oldSplMaskStr) {\n    let regExpResult = /m+/.exec(value);\n    let resultFormat = format;\n\n    if (regExpResult !== null) {\n      value = value.replace(/m+/, EditMaskService.repeatString('M', regExpResult[0].length));\n      resultFormat = resultFormat.replace(oldSplMaskStr, value);\n      oldSplMaskStr = value;\n    }\n\n    regExpResult = /D+/.exec(value);\n\n    if (regExpResult !== null) {\n      value = value.replace(/D+/, EditMaskService.repeatString('d', regExpResult[0].length));\n      resultFormat = resultFormat.replace(oldSplMaskStr, value);\n      oldSplMaskStr = value;\n    }\n\n    regExpResult = /Y+/.exec(value);\n\n    if (regExpResult !== null) {\n      value = value.replace(/Y+/, EditMaskService.repeatString('y', regExpResult[0].length));\n      resultFormat = resultFormat.replace(oldSplMaskStr, value);\n    }\n\n    return resultFormat;\n  }\n  /**\r\n   * Process time format section.\r\n   * @param value Time section of format value.\r\n   * @param format The entire format value.\r\n   * @param oldSplMaskStr The original value of time section format.\r\n   * @returns time format parsed to Front-end.\r\n   */\n\n\n  static processTimeFormat(value, format, oldSplMaskStr) {\n    const regExpResult = /M+/.exec(value);\n\n    if (regExpResult !== null) {\n      value = value.replace(/M+/, EditMaskService.repeatString('m', regExpResult[0].length));\n      oldSplMaskStr += ':';\n      value += ':';\n      return format.replace(oldSplMaskStr, value);\n    }\n\n    return format;\n  }\n\n  static formatSimplesDate(value, format) {\n    if (value === null || isNaN(value.getTime())) {\n      return;\n    }\n\n    const upperNarrow = /A\\/P/.test(format);\n    format = this.processPBDateTimeMaskFormat(format);\n    const datePipe = new DatePipe('en-US');\n    const result = datePipe.transform(value.toISOString(), format);\n    return upperNarrow ? result.replace(/a$|p$/, x => x.toUpperCase()) : result;\n  }\n\n  static returnValidMaskFromPBFormats(maskStr) {\n    let validMask = maskStr.replace(/\\s*/g, '').toLocaleLowerCase();\n\n    if (validMask.indexOf('[shortdate]') === 0) {\n      const shortDate = moment.localeData().longDateFormat('L').toLocaleLowerCase().replace('mm', 'MM'); // Insert only one whitespace after [shortdate]\n\n      /* c8 ignore else */\n\n      if (validMask.charAt(validMask.indexOf(']') + 1) !== ' ') {\n        validMask = [validMask.slice(0, validMask.indexOf(']') + 1), ' ', validMask.slice(validMask.indexOf(']') + 1)].join('');\n      }\n\n      validMask = validMask.replace('[shortdate]', shortDate);\n      validMask = validMask.replace('[time]', 'HH:mm:ss');\n      return validMask.trim();\n    }\n\n    switch (validMask.trim()) {\n      case '[time]':\n        validMask = 'HH:mm:ss';\n        break;\n\n      case '[date]':\n      case '[general]':\n        validMask = moment.localeData().longDateFormat('L').toLocaleLowerCase().replace('mm', 'MM');\n        break;\n\n      case '[date][time]':\n        const datePart = moment.localeData().longDateFormat('L').toLocaleLowerCase().replace('mm', 'MM');\n        const timePart = moment.localeData().longDateFormat('LTS').toLocaleLowerCase();\n        validMask = `${datePart} ${timePart}`;\n        break;\n\n      default:\n        validMask = maskStr;\n        break;\n    }\n\n    return validMask;\n  }\n\n  static generateZeros(cant) {\n    return cant > 0 ? '0'.repeat(cant) : '';\n  }\n\n  static generateFormatPlaceholder(mask) {\n    const cLetters = {\n      y: 0,\n      M: 0,\n      d: 0,\n      h: 0,\n      H: 0,\n      m: 0,\n      s: 0,\n      f: 0\n    };\n\n    for (let i = 0; i < mask.length; i++) {\n      if (cLetters[mask.charAt(i)] !== undefined) {\n        cLetters[mask.charAt(i)] += 1;\n      }\n    }\n\n    return cLetters;\n  }\n\n  static GenerateZeroObjects(obj) {\n    return {\n      year: DateTimeFunctions.generateZeros(obj.y),\n      month: DateTimeFunctions.generateZeros(obj.M),\n      day: DateTimeFunctions.generateZeros(obj.d),\n      hour: DateTimeFunctions.generateZeros(obj.h ? obj.h : obj.H),\n      minute: DateTimeFunctions.generateZeros(obj.m),\n      second: DateTimeFunctions.generateZeros(obj.s),\n      milliseconds: DateTimeFunctions.generateZeros(obj.f)\n    };\n  }\n\n  static returnKendoModifiedValues(maskValues, kendoDate) {\n    const modifiedObject = {\n      date: !!maskValues.d && kendoDate.date,\n      month: !!maskValues.M && kendoDate.month,\n      year: !!maskValues.y && kendoDate.year,\n      hours: (!!maskValues.h || !!maskValues.H) && kendoDate.hours,\n      minutes: !!maskValues.m && kendoDate.minutes,\n      seconds: !!maskValues.s && kendoDate.seconds,\n      milliseconds: !!maskValues.f && kendoDate.milliseconds\n    };\n\n    modifiedObject.dirty = () => {\n      return modifiedObject.date || modifiedObject.month || modifiedObject.year || modifiedObject.hours || modifiedObject.minutes || modifiedObject.seconds || modifiedObject.milliseconds;\n    };\n\n    return modifiedObject;\n  }\n\n  static autoCompleteDate(partialDate, modifiedValues) {\n    // Create new date with the current date.\n    const date = new Date(); // Set Time to default value 0.\n\n    date.setHours(0);\n    date.setMinutes(0);\n    date.setSeconds(0);\n    date.setMilliseconds(0); // Autocomplete date object with modified values.\n\n    if (modifiedValues.date) {\n      date.setDate(partialDate.getDate());\n    }\n\n    if (modifiedValues.month) {\n      date.setMonth(partialDate.getMonth());\n    }\n\n    if (modifiedValues.year) {\n      date.setFullYear(partialDate.getFullYear());\n    }\n\n    if (modifiedValues.hours) {\n      date.setHours(partialDate.getHours());\n    }\n\n    if (modifiedValues.minutes) {\n      date.setMinutes(partialDate.getMinutes());\n    }\n\n    if (modifiedValues.seconds) {\n      date.setSeconds(partialDate.getSeconds());\n    }\n\n    if (modifiedValues.milliseconds) {\n      date.setMilliseconds(partialDate.getMilliseconds());\n    }\n\n    return date;\n  }\n\n}\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nvar DateTimeRules = /*#__PURE__*/(() => {\n  (function (DateTimeRules) {\n    DateTimeRules[DateTimeRules[\"date\"] = 0] = \"date\";\n    DateTimeRules[DateTimeRules[\"null\"] = 3] = \"null\";\n  })(DateTimeRules || (DateTimeRules = {}));\n\n  return DateTimeRules;\n})();\n\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\nlet DateTimeService = /*#__PURE__*/(() => {\n  class DateTimeService extends BaseType {\n    constructor() {\n      super();\n    }\n\n    rules(value) {\n      return value !== null ? this.applyDateRule(value, DateTimeRules.date) : this.applyDateRule(value, DateTimeRules.null);\n    }\n\n    applyDateRule(value, rule) {\n      const dateObject = {\n        value: null,\n        color: null\n      };\n      const format = this.applyRule(rule);\n      dateObject.value = this.applyTransformation(Utils.stringToDate(value), format, this.getContext(format));\n      dateObject.color = this.applyColorRule(DateTimeRules.date);\n      return dateObject;\n    }\n\n    applyTransformation(value, mask, mycontext) {\n      return mycontext === Context$1.simpledate ? DateTimeFunctions.formatSimplesDate(value, mask) : Utils.dateToString(value);\n    }\n\n    getContext(str) {\n      return str ? Context$1.simpledate : Context$1.noMask;\n    }\n    /**\r\n     * Returns a valid format.\r\n     * @param value valid type value.\r\n     * @param format  powerbuilder mask or format.\r\n     */\n\n\n    applyFormat(value, format) {\n      const frmformat = format ? format : Utils.getDateTimeDefaultFormat(this.columnType);\n      return super.applyFormat(value, frmformat);\n    }\n    /**\r\n     * Returns a valid edit.format. Override in each service\r\n     * @param value valid type value.\r\n     * @param editFormat powerbuilder mask or format.\r\n     */\n\n\n    applyEditFormat(value, editFormat) {\n      const edtFormat = editFormat ? editFormat : Utils.getDateTimeDefaultFormat(this.columnType);\n      return super.applyEditFormat(value, edtFormat);\n    }\n\n  }\n\n  DateTimeService.ɵfac = function DateTimeService_Factory(t) {\n    return new (t || DateTimeService)();\n  };\n\n  DateTimeService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: DateTimeService,\n    factory: DateTimeService.ɵfac,\n    providedIn: 'root'\n  });\n  return DateTimeService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nconst roundTo = roundTo_;\n\nclass DecimalFunctions extends NumericFunctions {\n  static general(value, length) {\n    if (value === null) {\n      return 'null';\n    } else {\n      const lengthRound = length ? length : 0;\n      value = roundTo(value, lengthRound);\n      return `${this.fillDecimalPart(value, lengthRound)}`;\n    }\n  }\n\n  static fillDecimalPart(value, length) {\n    const maskNumber = value.toString().split('.');\n    let newValue = `${value}`;\n\n    if (length > 0 && maskNumber.length === 1) {\n      newValue = `${maskNumber[0]}.`;\n\n      for (length; length > 0; length--) {\n        newValue = `${newValue}0`;\n      }\n    }\n\n    return newValue;\n  }\n\n}\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet DecimalService = /*#__PURE__*/(() => {\n  class DecimalService extends BaseNumericService {\n    constructor() {\n      super();\n    }\n    /**\r\n     * Numeric Rules: Positive-format;negative-format;zero-format;null-format\r\n     * Apply rules and returns an object with transformed value and color\r\n     * @param value valid numeric data\r\n     */\n\n\n    rules(value, length) {\n      if (value > 0) {\n        // Positive-format\n        return this.applyDecimalRules(value, NumericRules.positive, length);\n      }\n\n      if (value < 0) {\n        // negative-format\n        return this.applyDecimalRules(value, NumericRules.negative, length);\n      }\n\n      if (parseInt(value, null) === 0) {\n        // zero-format\n        return this.applyDecimalRules(value, NumericRules.zero, length);\n      }\n\n      if (value === null) {\n        // null-format\n        return this.applyDecimalRules(value, NumericRules.null, length);\n      }\n\n      return {\n        value: null,\n        color: null\n      };\n    }\n    /**\r\n     * Apply a specific format and color for the value.\r\n     * @param value value to apply format\r\n     * @param rule number of rule to apply\r\n     */\n\n\n    applyDecimalRules(value, rule, length) {\n      const numObject = {\n        value: null,\n        color: null\n      };\n      const localRule = this.applyRule(rule);\n      const context = this.getContext(localRule);\n\n      if (rule === NumericRules.zero && context === Context$1.numberOnlyStrict) {\n        numObject.value = '';\n      } else {\n        numObject.value = this.applyTransformation(value, localRule, context, length);\n      }\n\n      numObject.color = this.applyColorRule(rule);\n      return numObject;\n    }\n\n    applyTransformation(value, mask, myContext, length) {\n      switch (myContext) {\n        case Context$1.general:\n          return DecimalFunctions.general(value, length);\n\n        case Context$1.currency:\n          return DecimalFunctions.currency(value);\n\n        case Context$1.percentageStart:\n          return DecimalFunctions.percentageStart(value, mask);\n\n        case Context$1.percentageEnd:\n          return DecimalFunctions.percentageEnd(value, mask);\n\n        case Context$1.percentageParenthesisEnd:\n          return DecimalFunctions.percentageParenthesisEnd(value, mask);\n\n        case Context$1.money:\n          return DecimalFunctions.money(value, mask);\n\n        case Context$1.moneyEnd:\n          return DecimalFunctions.moneyEnd(value, mask);\n\n        case Context$1.numberOnlyStrict:\n        case Context$1.numberOnly:\n          return DecimalFunctions.numberOnly(value, mask);\n\n        case Context$1.numberLiteral:\n          return DecimalFunctions.numberLiteral(value, mask);\n\n        default:\n          return value;\n      }\n    }\n    /**\r\n     * Override de handleEmptyMask from base-type.\r\n     * Used to add or remove the decimals in the number\r\n     * @param value number to apply the decimal precision.\r\n     * @param length the number of decimal for the value\r\n     */\n\n\n    handleEmptyMask(value, length) {\n      if (length !== undefined && length !== null) {\n        const number = DataTypeValidator.decimalValidation(String(value), length);\n        return {\n          value: number,\n          color: null\n        };\n      }\n\n      return {\n        value,\n        color: null\n      };\n    }\n\n  }\n\n  DecimalService.ɵfac = function DecimalService_Factory(t) {\n    return new (t || DecimalService)();\n  };\n\n  DecimalService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: DecimalService,\n    factory: DecimalService.ɵfac,\n    providedIn: 'root'\n  });\n  return DecimalService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nclass LongFunctions extends NumericFunctions {\n  static general(value) {\n    return `${value}`;\n  }\n\n}\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet LongService = /*#__PURE__*/(() => {\n  class LongService extends BaseNumericService {\n    constructor() {\n      super();\n    }\n    /**\r\n     * Numeric Rules: Positive-format;negative-format;zero-format;null-format\r\n     * Apply rules and returns an object with transformed value and color\r\n     * @param value valid numeric data\r\n     */\n\n\n    rules(value) {\n      if (value > 0) {\n        // Positive-format\n        return this.applyLongRules(value, NumericRules.positive);\n      }\n\n      if (value < 0) {\n        // negative-format\n        return this.applyLongRules(value, NumericRules.negative);\n      }\n\n      if (parseInt(value, null) === 0) {\n        // zero-format\n        return this.applyLongRules(value, NumericRules.zero);\n      }\n\n      if (value === null) {\n        // null-format\n        return this.applyLongRules(value, NumericRules.null);\n      }\n\n      return {\n        value: null,\n        color: null\n      };\n    }\n    /**\r\n     * Apply a specific format and color for the value.\r\n     * @param value value to apply format\r\n     * @param rule number of rule to apply\r\n     */\n\n\n    applyLongRules(value, rule) {\n      const numObject = {\n        value: null,\n        color: null\n      };\n      const localRule = this.applyRule(rule);\n      const context = this.getContext(localRule);\n\n      if (rule === NumericRules.zero && context === Context$1.numberOnlyStrict) {\n        numObject.value = '';\n      } else {\n        numObject.value = this.applyTransformation(value, localRule, context);\n      }\n\n      numObject.color = this.applyColorRule(rule);\n      return numObject;\n    }\n\n    applyTransformation(value, mask, myContext) {\n      switch (myContext) {\n        case Context$1.general:\n          return LongFunctions.general(value);\n\n        case Context$1.currency:\n          return LongFunctions.currency(value);\n\n        case Context$1.percentageStart:\n          return LongFunctions.percentageStart(value, mask);\n\n        case Context$1.percentageEnd:\n          return LongFunctions.percentageEnd(value, mask);\n\n        case Context$1.money:\n          return LongFunctions.money(value, mask);\n\n        case Context$1.moneyEnd:\n          return LongFunctions.moneyEnd(value, mask);\n\n        case Context$1.numberOnlyStrict:\n        case Context$1.numberOnly:\n          return LongFunctions.numberOnly(value, mask);\n\n        case Context$1.numberLiteral:\n          return LongFunctions.numberLiteral(value, mask);\n\n        default:\n          return value;\n      }\n    }\n    /**\r\n     * Override de handleEmptyMask from base-type.\r\n     * Used to add or remove the decimals in the number\r\n     * @param value number to apply the decimal precision.\r\n     * @param length the number of decimal for the value\r\n     */\n\n\n    handleEmptyMask(value, length) {\n      if (length !== undefined && length !== null) {\n        const number = DataTypeValidator.decimalValidation(String(value), length);\n        return {\n          value: number,\n          color: null\n        };\n      }\n\n      return {\n        value,\n        color: null\n      };\n    }\n\n  }\n\n  LongService.ɵfac = function LongService_Factory(t) {\n    return new (t || LongService)();\n  };\n\n  LongService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: LongService,\n    factory: LongService.ɵfac,\n    providedIn: 'root'\n  });\n  return LongService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet MaskFormatService = /*#__PURE__*/(() => {\n  class MaskFormatService {\n    constructor() {\n      this.dataTypeRunner = new Dictionary();\n      this.columnService = new Dictionary();\n      this.addDataTypeRunner(DataTypeNames.string, StringService);\n      this.addDataTypeRunner(DataTypeNames.numeric, NumericService);\n      this.addDataTypeRunner(DataTypeNames.decimal, DecimalService);\n      this.addDataTypeRunner(DataTypeNames.long, LongService);\n      this.addDataTypeRunner(DataTypeNames.real, NumericService);\n      this.addDataTypeRunner(DataTypeNames.time, DateTimeService);\n      this.addDataTypeRunner(DataTypeNames.date, DateTimeService);\n      this.addDataTypeRunner(DataTypeNames.datetime, DateTimeService); // more services to add\n    }\n\n    addDataTypeRunner(dataTypeName, dataType) {\n      this.dataTypeRunner.add(dataTypeName, dataType);\n    }\n\n    initFormatArrays(format, columnType, index) {\n      if (this.columnService.containsKey(index)) {\n        return;\n      }\n\n      const type = columnType ? columnType.match(/[a-z]+/)[0] : columnType;\n      const getClass = this.dataTypeRunner.value(type);\n\n      if (!getClass) {\n        WMLogger.instance().warn(`There is not a service for the type ${columnType}, please register a dataType in the MaskFormatService`);\n        return;\n      }\n\n      const getInstance = new getClass();\n      getInstance.initFormatArrays(format, columnType);\n      this.columnService.add(index, getInstance);\n    }\n    /**\r\n     * Gets the format arrays for a computed field\r\n     * @param { string } format string with the field format\r\n     * @param { any } columnType data type of the field\r\n     * @returns { any }\r\n     */\n\n\n    getComputeFormatArrays(format, columnType) {\n      const getClass = this.dataTypeRunner.value(columnType);\n\n      if (!getClass) {\n        WMLogger.instance().warn(`There is not a service for the type ${columnType}, please register a dataType in the MaskFormatService`);\n        return;\n      }\n\n      const getInstance = new getClass();\n      getInstance.initFormatArrays(format, columnType);\n      return getInstance;\n    }\n\n    applyFormat(value, format, index, columnLength, useEditMask) {\n      const typeInstance = this.columnService.value(index);\n      return typeInstance ? typeInstance.applyFormat(value, format, columnLength, useEditMask) : value;\n    }\n    /**\r\n     * Applies  the format arrays for a computed field\r\n     * @param { any } value string with the field value\r\n     * @param { any } format string with the field format\r\n     * @param { string } columnType data type of the field\r\n     * @param { number } columnLength data length\r\n     * @returns { any }\r\n     */\n\n\n    applyComputeFormat(value, format, columnType, columnLength) {\n      const typeInstance = this.getComputeFormatArrays(format, columnType);\n      return typeInstance ? typeInstance.applyFormat(value, format, columnLength) : value;\n    }\n\n    applyEditFormat(value, editFormat, index) {\n      const typeInstance = this.columnService.value(index);\n      return typeInstance ? typeInstance.applyEditFormat(value, editFormat) : value;\n    }\n\n  }\n\n  MaskFormatService.ɵfac = function MaskFormatService_Factory(t) {\n    return new (t || MaskFormatService)();\n  };\n\n  MaskFormatService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MaskFormatService,\n    factory: MaskFormatService.ɵfac,\n    providedIn: 'root'\n  });\n  return MaskFormatService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n// tslint:disable-next-line:directive-class-suffix\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\n\n\nlet ColumnControlComponent = /*#__PURE__*/(() => {\n  class ColumnControlComponent extends ColumnControlBaseComponent {\n    constructor(\n    /* c8 ignore next 8 */\n    changeDetectorColumn, rendererColumn, elementColumn, lengthConverter, emitterColumn, maskFormat, dataManagerTabSequenceService) {\n      super(changeDetectorColumn, rendererColumn, elementColumn, lengthConverter, emitterColumn);\n      this.changeDetectorColumn = changeDetectorColumn;\n      this.rendererColumn = rendererColumn;\n      this.elementColumn = elementColumn;\n      this.emitterColumn = emitterColumn;\n      this.maskFormat = maskFormat;\n      this.dataManagerTabSequenceService = dataManagerTabSequenceService;\n      /* Events Section */\n\n      this.itemChanged = new EventEmitter();\n      this.doubleClicked = new EventEmitter();\n      this.clicked = new EventEmitter();\n      /**\r\n       * Item error failed of column control component\r\n       */\n\n      this.itemErrorFailed = false;\n      /**\r\n       * Edit required failed of column control component\r\n       */\n\n      this.editRequiredFailed = false;\n    }\n    /**\r\n     * @description\r\n     * Returns the component modelData.\r\n     * @returns { any }\r\n     */\n\n\n    get logicValue() {\n      return this.dataManagerContext && this.dataManagerContext.row ? this.dataManagerContext.row[this.columnId] : null;\n    }\n    /**\r\n     * @description\r\n     * Sets the component modelData.\r\n     * @param value The new value to set modelData property.\r\n     */\n\n\n    set logicValue(value) {\n      /* c8 ignore else */\n      if (this.dataManagerContext && this.dataManagerContext.row) {\n        this.dataManagerContext.row[this.columnId] = value;\n      }\n    }\n    /**\r\n     * @description\r\n     * Returns the enabled value of the model.\r\n     * @returns { boolean }\r\n     */\n\n\n    get disabled() {\n      return this.protect || !this.isValidTabSequence() || this.displayOnly || !this.enabled;\n    }\n    /**\r\n     * @description\r\n     * Returns the required value of the model.\r\n     * @returns { boolean }\r\n     * TODO: calculate row tabIndex considering current row index as\r\n     * a temporary change in order to preserve column navigation\r\n     */\n\n\n    get tabSequence() {\n      return this.model.TabSequence === undefined || this.model.TabSequence === 0 || this.model.TabSequence === Utils.MAX_VALUE_INTEGER ? -1 : this.isOnGrid ? null : this.model.TabSequence;\n    }\n    /**\r\n     * @description\r\n     * Sets the required value of the model.\r\n     * @param value The new value to set model property.\r\n     */\n\n\n    set tabSequence(value) {\n      this.model.TabSequence = value;\n    }\n    /*\r\n     * Returns the current class name of the component\r\n     */\n\n\n    get componentName() {\n      return 'ColumnControlComponent';\n    }\n    /**\r\n     * @description\r\n     * Gets focusable element inside of the component\r\n     */\n\n\n    get focusableElement() {\n      return this.focusElement;\n    }\n    /**\r\n     * @description\r\n     * Gets backcolor from datamanagerContext's visual properties\r\n     */\n\n\n    get backColorFromVisuals() {\n      return this.dataManagerContextVisuals && this.dataManagerContextVisuals.BackColor ? this.dataManagerContextVisuals.BackColor : this.backColor;\n    }\n    /**\r\n     * Return RowInDetailDisplay display\r\n     */\n\n\n    get rowInDetailDisplay() {\n      return this.hasRowInDetailDisplay() ? this.dataManagerContext.row[0].rowInDetailDisplay[this.columnId][this.name] : undefined;\n    }\n\n    ngOnInit() {\n      this.colDetectRef = this.emitterColumn.columnDetectChanges.subscribe(data => this.columnDetectChanges(data));\n      this.dmTextSubscription = this.emitterColumn.currentDMText.subscribe(dmText => this.handleDMTextSet(dmText));\n      this.style = new PBStyle();\n      this.showImage = true;\n      this.changeDetectorColumn.detach();\n    }\n\n    ngOnDestroy() {\n      super.ngOnDestroy();\n      this.dmTextSubscription.unsubscribe();\n      this.colDetectRef.unsubscribe();\n    }\n\n    ngAfterViewInit() {\n      super.ngAfterViewInit();\n\n      if (this.componentName !== 'DwComputeComponent' && this.dataManagerContext) {\n        this.maskFormat.initFormatArrays(this.format, this.validateColumn(this.columnId), `${this.columnId}`);\n        this.modelData = this.disableFormatting && this.dataManagerContext.dmText.column === this.columnId ? this.dataManagerContext.dmText.text : this.logicValue;\n\n        if (this.hasRowInDetailDisplay()) {\n          this.modelData = this.rowInDetailDisplay;\n        }\n\n        if (this.model.Edit && this.model.Edit.CodeTable && this.dataManagerContext && this.dataManagerContext.row) {\n          this.loadValueFromCodeTable();\n        } else {\n          this.applyFormat();\n        }\n      }\n\n      if (!this.changeDetectionDisabled) {\n        this.detectChanges();\n      }\n    }\n    /**\r\n     * Loads values from code table and sets model data with the selected value\r\n     */\n\n\n    loadValueFromCodeTable() {\n      this.loadValues();\n      const valuePair = this.values.find(x => x.value && this.dataManagerContext.row[this.columnId] != null && x.value.toString() === this.dataManagerContext.row[this.columnId].toString());\n      this.modelData = valuePair ? valuePair.text : this.dataManagerContext.row[this.columnId];\n    }\n    /**\r\n     * Calls a safe ngAfterViewInit that avoids call detectChanges twice\r\n     */\n\n\n    safeNgAfterViewInit() {\n      this.changeDetectionDisabled = true;\n      this.ngAfterViewInit();\n      this.changeDetectionDisabled = false;\n    }\n    /**\r\n     * RowInDetails overrides current row value for the specified column with a specified fixed row value\r\n     */\n\n\n    hasRowInDetailDisplay() {\n      return this.dataManagerContext.row && this.dataManagerContext.row[0] && this.dataManagerContext.row[0].rowInDetailDisplay && this.dataManagerContext.row[0].rowInDetailDisplay[this.columnId] && this.dataManagerContext.row[0].rowInDetailDisplay[this.columnId][this.name];\n    }\n    /**\r\n     * Marks for check\r\n     * Overrides MarkForCheck\r\n     * to apply ColumnStyle bindings if required\r\n     */\n\n\n    markForCheck() {\n      this.applyColumnStyle();\n      super.markForCheck();\n    }\n    /**\r\n     * Applies column style\r\n     * Get the component style object and apply if required\r\n     * set a timer to avoid applying it several times in a short\r\n     * period of time.\r\n     */\n\n\n    applyColumnStyle() {\n      if (!this.emitterColumn.cancelDynamicStyles) {\n        if (this.columnStyleTimer) {\n          clearTimeout(this.columnStyleTimer);\n        }\n\n        this.columnStyleTimer = setTimeout(() => {\n          const newStyle = this.setMyStyle();\n\n          for (const property in newStyle) {\n            if (this.shouldApplyStyle(newStyle, property, this.el) && property !== 'Visible') {\n              this.rendererColumn.setStyle(this.el.nativeElement.firstElementChild, property, newStyle[property]);\n            }\n          }\n\n          if (this.isOnGrid) {\n            this.setCellColor();\n          }\n        }, 10);\n      }\n    }\n    /**\r\n     * Applies detectChanges function and call ngAfterViewInit method to refresh\r\n     * the column values.\r\n     * @param affectedCells Data to be used in change detection.\r\n     */\n\n\n    columnDetectChanges(affectedCells) {\n      // AffectedRows comes from the dmCells values from the base-data-manager component.\n      if (affectedCells && affectedCells.hasAffectedItems()) {\n        if (affectedCells.isCellAffected(this.rowIndex, this.columnId)) {\n          if (affectedCells[this.rowIndex][this.columnId]?.Value !== undefined) {\n            this.displayValue = null; // To clear display value.\n\n            this.safeNgAfterViewInit();\n          }\n\n          this.applyColumnStyle(); // To refresh modelData and calculated formats.\n\n          this.detectChanges();\n        }\n\n        return; // Nothing to update\n      }\n\n      this.displayValue = null; // To clear display value.\n\n      this.safeNgAfterViewInit();\n      this.applyColumnStyle();\n      this.detectChanges();\n    }\n    /**\r\n     * Handles dmtext set event\r\n     * @param dmText The IDataManagerText element that contains the server side\r\n     * value.\r\n     */\n\n\n    handleDMTextSet(dmText) {\n      if (this.dataManagerContext && dmText.row === this.dataManagerContext.rowIndex && dmText.column === this.columnId && dmText.name === this.name) {\n        this.disableFormatting = !(dmText.text === '');\n        this.dmText = dmText.text;\n        this.modelData = dmText.text;\n      }\n    }\n    /**\r\n     * Use to hide the image when the image throw an error\r\n     */\n\n\n    hideImage() {\n      this.showImage = false;\n    }\n    /**\r\n     * @description\r\n     * Loads the collection values from the column object.\r\n     */\n\n\n    loadValues() {\n      if (this.model.ColumnId) {\n        const column = this.obtainColumn(this.model.ColumnId - 1); // Substract 1 because index one base\n\n        this.values = column && WebMapService.currentService.config.webMapVersion === WMConstants.version4 ? this.itemsExtractor(column) : this.valuesV5;\n      }\n    }\n    /**\r\n     * Extracts the current column object from DataManager object.\r\n     * @param columnId\r\n     */\n\n\n    obtainColumn(columnId) {\n      if (this.hasColumns() && columnId >= 0 && columnId < this.dataManagerContext.columns.length) {\n        return this.dataManagerContext.columns[columnId];\n      }\n\n      return null;\n    }\n    /**\r\n     * All columns are disabled by tab sequence\r\n     * @returns true if all columns are disabled by tab sequence.\r\n     * If null there are not columns models, therefore there are not columns\r\n     * disabled by tabSequence.\r\n     * If length is less than 1 means that all column models\r\n     * are disabled by tabSequence.\r\n     */\n\n\n    static allColumnsAreDisabledByTabSequence(reference) {\n      if (reference.dataManagerTabSequenceService) {\n        const columns = reference.dataManagerTabSequenceService.getValidColumns();\n        return columns && columns.length < 1;\n      }\n\n      return false;\n    }\n    /**\r\n     * Validates if the context has columns.\r\n     */\n\n\n    hasColumns() {\n      return this.dataManagerContext && this.dataManagerContext.columns && this.dataManagerContext.columns.length > 0;\n    }\n    /**\r\n     * Determines whether the column is inside of the last row\r\n     * @returns true if it is inside the last row.\r\n     */\n\n\n    isLastRow() {\n      return this.dataManagerContext && this.dataManagerContext.pagination && this.dataManagerContext.pagination.currentRow === this.dataManagerContext.pagination.totalRows;\n    }\n    /**\r\n     * Determines whether the column is the last column by tab.\r\n     * @returns true if it is the last column by tab.\r\n     */\n\n\n    isLastTabbableColumn() {\n      return this.dataManagerContext.maxTabSequence === this.model.TabSequence;\n    }\n    /**\r\n     * Triggers last column nccvc\r\n     * If is last Column must trigger notifyCurrentValueChanged\r\n     * @param dataEvent the current dataEvent\r\n     */\n\n\n    triggerLastColumnNCCVC(dataEvent) {\n      if (this.isLastTabbableColumn() && this.isLastRow() && !this.editRequiredFailed && !this.itemErrorFailed) {\n        dataEvent.event.triggerNCCVC = true;\n      }\n    }\n    /**\r\n     * Extracts the values collection data from column model.\r\n     * @param model\r\n     */\n\n\n    itemsExtractor(column) {\n      const result = [];\n\n      if (column && column.Values) {\n        for (const element of column.Values) {\n          if (element && element.length >= 2) {\n            result.push({\n              text: RemoveAmpersand.remove(element[1]),\n              value: element[0]\n            });\n          }\n        }\n      }\n\n      return result;\n    }\n    /**\r\n     * @event checkboxChanged Triggered when the checkbox change.\r\n     * @param event Event data parameter.\r\n     */\n\n\n    itemChangeHandler(event) {\n      if (!this.focusApplied) {\n        this.disableFormatting = false;\n        this.dataManagerContext.dmText = undefined;\n        this.applyFormat();\n        const data = new EventData(event, this.id, this.mapperId);\n        data.args = {\n          fieldName: this.name,\n          data: this.logicValue\n        };\n        this.emitterColumn.commandService.run(CommandName.updateBundle, {\n          data,\n          context: this.dataManagerContext,\n          columnId: this.columnId\n        });\n        this.itemChanged.emit(data);\n        this.emitDataManagerEvent('change', data);\n      }\n    }\n    /**\r\n     * @event doubleclicked Is triggered when the dw-column is doubleClicked.\r\n     * @param event Event data parameter.\r\n     */\n\n\n    doubleClickedHandler(event) {\n      Utils.preventPropagation(event);\n    }\n    /**\r\n     * Is triggered  when a column component has been clicked\r\n     * @param event Event data parameter\r\n     */\n\n\n    clickColumn(event) {\n      if (event.which === 3) {\n        return; // Propagate the ContextMenu action to the DM\n      }\n      /* c8 ignore else*/\n\n\n      if (!this.isColumnInsideDDDW()) {\n        this.triggerMouseDownClick = false;\n\n        if (event.detail === 1) {\n          this.clickEvent('clicked', event);\n          /* c8 ignore else*/\n        } else if (event.detail === 2) {\n          this.clickEvent('doubleclick', event);\n        }\n      }\n    }\n    /**\r\n     * MouseDown handler to trigger click\r\n     * event when mouse up was not executed\r\n     * inside the column.\r\n     * @param event MouseDown Event\r\n     */\n\n\n    mouseDownHandler(event) {\n      if (!this.isColumnInsideDDDW()) {\n        this.triggerMouseDownClick = true;\n        setTimeout(() => {\n          if (this.triggerMouseDownClick && !this.preventErrorPropagation(event)) {\n            this.clickColumn(event);\n          }\n        }, 300);\n      }\n    }\n    /**\r\n     * Validates whether a column is inside\r\n     * a DropDownDataWindow or not.\r\n     */\n\n\n    isColumnInsideDDDW() {\n      return this.emitterColumn.webMapService.core.getModel ? this.emitterColumn.webMapService.core.getModel(this.dataManagerContext.dataManagerId).DddwLines != null : false;\n    }\n    /**\r\n     * Focus in event override, determines if autoselect should be applied\r\n     * @param event focus event.\r\n     * @param [avoidSelection] Optional parameter to avoid autoselect when focus.\r\n     */\n\n\n    focusIn(event, avoidSelection) {\n      super.focusIn(event);\n      this.applyHighlightClasses(avoidSelection);\n    }\n    /**\r\n     * Applies highlight classes\r\n     * @param [avoidSelection] Optional parameter to avoid selection.\r\n     */\n\n\n    applyHighlightClasses(avoidSelection) {\n      if (!avoidSelection) {\n        if (this.isValidTabSequence()) {\n          this.addHighLight();\n          this.applyActiveClass();\n        } else {\n          this.removeHighLight();\n          this.removeActiveClass();\n        }\n      }\n    }\n    /**\r\n     * Validates whether a column is protected or not\r\n     */\n\n\n    isProtectedColumn() {\n      return !!this.protect;\n    }\n    /**\r\n     * Applies auto select to column component\r\n     * @param element DOM element to apply autoselect\r\n     */\n\n\n    applyAutoSelect(element) {\n      if (this.autoSelect && typeof element.select === 'function') {\n        setTimeout(() => {\n          if (document.activeElement === element) {\n            element.select();\n          }\n        }, 5);\n      } else {\n        element.selectionEnd = 0;\n      }\n    }\n    /**\r\n     * Adds highlight style. If autoselect is true it also calls\r\n     * select() function the first time that column is clicked.\r\n     * If autoselect is false clears selection the first time that\r\n     * column is clicked.\r\n     */\n\n\n    addHighLight() {\n      if (this.el && this.el.nativeElement && this.el.nativeElement.firstElementChild) {\n        const element = this.el.nativeElement.firstElementChild;\n\n        if (!element.classList.contains(BaseControlBaseComponent.enableHighLightCssClass)) {\n          this.renderer.addClass(element, BaseControlBaseComponent.enableHighLightCssClass);\n          this.applyAutoSelect(element);\n        }\n      }\n    }\n    /**\r\n     * Removes highlight style. Is used by focus manager to\r\n     * remove highlight class when column loses focus.\r\n     */\n\n\n    removeHighLight() {\n      if (this.el && this.el.nativeElement && this.el.nativeElement.firstElementChild) {\n        const element = this.el.nativeElement.firstElementChild;\n        this.renderer.removeClass(element, BaseControlBaseComponent.enableHighLightCssClass);\n      }\n    }\n    /**\r\n     * Applies active class to customize active component.\r\n     */\n\n\n    applyActiveClass() {\n      if (this.el && this.el?.nativeElement?.classList && !this.el.nativeElement.classList.contains('activeClass')) {\n        this.renderer.addClass(this.el.nativeElement, 'activeClass');\n      }\n    }\n    /**\r\n     * Removes active class that customizes active component.\r\n     */\n\n\n    removeActiveClass() {\n      if (this.el && this.el?.nativeElement?.classList) {\n        this.renderer.removeClass(this.el.nativeElement, 'activeClass');\n      }\n    }\n    /**\r\n     * Returns a valid column type for the columnId received as a parameter.\r\n     * If the column is not found the return value is string empty.\r\n     * @param columnId The column id position (base 1).\r\n     */\n\n\n    validateColumn(columnId) {\n      const columnType = this.dataManagerContext.columnTypes[columnId - 1];\n\n      if (columnType) {\n        return columnType.match(/[a-z]+/)[0];\n      } else if (this.componentName !== 'DwComputeComponent') {\n        WMLogger.instance().error(`The column type: ${columnType} is not a valid column Type.`);\n      }\n\n      return null;\n    }\n\n    validateLengthColumn(columnId) {\n      const columnType = this.dataManagerContext.columnTypes[columnId - 1];\n      return columnType ? Number(columnType.match(/\\d+/)) : null;\n    }\n    /**\r\n     * Find the value that is equal to the modelData\r\n     */\n\n\n    findInValues(modelData) {\n      return this.values?.find(({\n        text,\n        value\n      }) => text == modelData || value == modelData);\n    }\n\n    applyFormat(allowInvalidValues) {\n      if (this.disableFormatting) {\n        return false;\n      }\n\n      const columnType = this.validateColumn(this.columnId);\n      const columnLength = this.validateLengthColumn(this.columnId);\n\n      if (this.currentAlternativeValue?.text !== this.modelData) {\n        this.currentAlternativeValue = this.findInValues(this.modelData);\n      }\n\n      const typeValidation = DataTypeValidator.validateType(this.currentAlternativeValue?.value ?? this.modelData, columnType, this.nilIsNull, columnLength, this.avoidLengthValidation);\n\n      if (typeValidation !== null && typeValidation !== undefined) {\n        this.logicValue = this.isColumnEditable() ? typeValidation : this.logicValue;\n        this.applyFormatTo(this.currentAlternativeValue?.text ?? typeValidation, columnType, columnLength);\n        return true;\n      } else {\n        return this.getValidationResult(columnType, allowInvalidValues);\n      }\n    }\n\n    getValidationResult(columnType, allowInvalidValues) {\n      let validationResult = Utils.isEmptyStringNull(this.modelData, this.nilIsNull, columnType);\n\n      if (validationResult) {\n        this.logicValue = null;\n      } else {\n        const validation = this.typeValidation(true, allowInvalidValues); // If the input is invalid and the flag allowInvalidValues is on, the values are send to the server side\n\n        if (validation == null && this.modelData && allowInvalidValues) {\n          this.logicValue = this.modelData;\n        } else {\n          this.applyFormatForEmptyValue(columnType); // Return validation ok if allowInvalidValues flag is active\n\n          validationResult = allowInvalidValues;\n        }\n      }\n\n      return validationResult;\n    }\n    /**\r\n     * Determines whether the component is focusable\r\n     * @returns true if focusable.\r\n     */\n\n\n    isFocusable() {\n      return !this.isContainer && this.tabSequence !== -1 && !this.isProtectedColumn();\n    }\n    /**\r\n     * Applys format for empty value\r\n     * Formats for string can include two masks\r\n     * separated by a semi-colon, the second mask is for\r\n     * null values\r\n     * @param columnType the current column type\r\n     */\n\n\n    applyFormatForEmptyValue(columnType) {\n      const nullFormat = this.format ? this.format.split(';') : [];\n\n      if (columnType === 'char' && this.logicValue === null && nullFormat.length === 2) {\n        this.modelData = nullFormat[1];\n      }\n    }\n\n    applyFormatWithOutValidation() {\n      if (this.disableFormatting) {\n        return false;\n      }\n\n      if (!this.modified) {\n        const columnType = this.validateColumn(this.columnId);\n        const columnLength = this.validateLengthColumn(this.columnId);\n\n        if (!Utils.isEmptyStringNull(this.logicValue, this.nilIsNull, columnType)) {\n          const value = this.logicValue != null ? this.logicValue : '';\n\n          if (this.returnModelFromValues()) {\n            return true;\n          }\n\n          this.applyFormatTo(value, columnType, columnLength);\n        }\n\n        return true;\n      } else {\n        return this.applyFormat();\n      }\n    }\n\n    applyFormatTo(typeValidation, columnType, columnLength) {\n      if (this.disableFormatting) {\n        return;\n      }\n\n      const maskObject = this.maskFormat.applyFormat(typeValidation, this.getControlFormatProperty(), `${this.columnId}`, columnLength, this.useEditMask);\n      this.specificFontColor = maskObject && maskObject.color ? maskObject.color : null;\n      this.displayValue = this.formatDisplayValue(maskObject, columnType, columnLength);\n      this.modelData = this.displayValue;\n    }\n    /**\r\n     * Calculate the final value for the displayValue\r\n     * maskObject: Object that contains the value with format and the color\r\n     * columnType: describe the columnType used for the value\r\n     * columnLength: is the maximun length for the column\r\n     */\n\n\n    formatDisplayValue(maskObject, columnType, columnLength) {\n      let display = maskObject && maskObject.value != null ? maskObject.value : this.modelData;\n      display = this.getSparseColumValue() ? display : null;\n      display = this.changeLength(display, columnType, columnLength);\n      return display;\n    }\n    /**\r\n     * Validate and fix the string length for the mask.\r\n     * value: value to be fixed.\r\n     * columnType: describe the columnType used for the value\r\n     * columnLength: is the maximun length for the column\r\n     */\n\n\n    changeLength(value, columnType, columnLength) {\n      if (Utils.isInputType(this.visualControlType) && columnType === 'char' && value != null && !this.disabled && value.length > columnLength && !this.avoidLengthValidation) {\n        return value.substr(0, columnLength);\n      }\n\n      return value;\n    }\n    /**\r\n     * Applies format to computed fields\r\n     * @param {any} typeValidation data\r\n     * @param {any} columnType type of the columns\r\n     * @param {number} columnLength length of the data\r\n     */\n\n\n    applyComputeFormatTo(typeValidation, columnType, columnLength) {\n      if (this.disableFormatting) {\n        return;\n      }\n\n      const maskObject = this.maskFormat.applyComputeFormat(typeValidation, this.format, columnType, columnLength);\n      this.displayValue = maskObject.value || this.modelData;\n      this.textColor = maskObject.color || null;\n      this.modelData = this.displayValue;\n    }\n    /**\r\n     * Types validation\r\n     * @param [verifyLogic] Indicates if logicValue must be checked for type compliance\r\n     * @param allowInvalidValues\r\n     * @returns validation of type in the column\r\n     */\n\n\n    typeValidation(verifyLogic = false, allowInvalidValues) {\n      const columnType = this.validateColumn(this.columnId);\n      const columnLength = this.validateLengthColumn(this.columnId);\n      let result = DataTypeValidator.validateType(this.modelData, columnType, this.nilIsNull, columnLength);\n\n      if (verifyLogic && !result && !allowInvalidValues) {\n        result = DataTypeValidator.validateType(this.logicValue, columnType, this.nilIsNull, columnLength);\n      }\n\n      return result;\n    }\n\n    applyEditFormat() {\n      if (this.disableFormatting) {\n        return;\n      }\n\n      if (this.returnModelFromValues()) {\n        return;\n      }\n\n      if (this.editFormat) {\n        this.modelData = this.logicValue;\n\n        if (this.modelData) {\n          const maskObject = this.maskFormat.applyEditFormat(this.modelData, this.editFormat, `${this.columnId}`);\n          this.displayValue = maskObject && maskObject.value ? maskObject.value : this.logicValue;\n          this.modelData = this.displayValue;\n          this.markForCheck();\n        }\n      }\n    }\n\n    returnModelFromValues() {\n      if (this.values && this.values.length > 0) {\n        const element = this.values.find(elem => this.parseValue(elem.value) === this.logicValue);\n        this.modelData = element ? element.text : this.logicValue;\n        this.displayValue = this.modelData;\n        return true;\n      }\n\n      return false;\n    }\n    /**\r\n     * Tries to parse the value to numeric\r\n     * @param value to convert\r\n     * @returns the value parsed to numeric otherwise the value without change\r\n     */\n\n\n    parseValue(value) {\n      return isNumeric(value) ? parseFloat(value) : value;\n    }\n    /**\r\n     * Applies format to computed fields\r\n     * @param {any} typeValidation data\r\n     * @param {any} columnType type of the columns\r\n     * @param {number} columnLength length of the data\r\n     */\n\n\n    getControlFormatProperty() {\n      if (this.visualControlType === StyleType.EditMask) {\n        return this.useFormat ? this.format : this.powerMask;\n      }\n\n      return this.format;\n    }\n\n    shouldApplyStyle(style, property, element) {\n      return style.hasOwnProperty(property) && element.nativeElement && element.nativeElement.firstElementChild && !element.nativeElement.firstElementChild.tagName.startsWith('WM-DW');\n    }\n    /**\r\n     * @description\r\n     * Returns a valid style object to\r\n     * be applied according to the styling information set in the control's model\r\n     * @returns { [key: string]: any; }\r\n     */\n\n\n    setMyStyle(style) {\n      if (this.emitterColumn.cancelDynamicStyles) {\n        return null;\n      }\n\n      style = style || {};\n      style.Color = this.specificFontColor || this.textColor;\n      style.BackColor = this.backMode === 1 ? 'transparent' : this.backColor;\n      style.Height = Utils.addPixels(this.height);\n      style.Width = Utils.addPixels(this.width);\n      style.X = Utils.addPixels(this.x);\n      style.Y = Utils.addPixels(this.y);\n      style.Alignment = this.alignment;\n      style.FaceName = this.faceName;\n      style.Weight = this.weight;\n      style.Underline = this.underline;\n\n      if (this.zIndex) {\n        style.ZIndex = this.zIndex;\n      }\n\n      const resultStyle = this.processControlStyle(style);\n      const isGrid = this.processGridElementStyling(resultStyle);\n\n      if (isGrid && this.visualControlType === StyleType.Edit) {\n        delete resultStyle.height;\n      }\n\n      return resultStyle;\n    }\n    /**\r\n     * @description\r\n     * Returns a valid style object to be applied according\r\n     * to the styling information set in the fetch data\r\n     * @returns { [key: string]: any; }\r\n     */\n\n\n    processControlStyle(style) {\n      const columnName = this.model.Name;\n      let visible;\n      let visualStyle = this.dataManagerContext && this.dataManagerContext.row ? this.dataManagerContext.row[0].visual : null;\n\n      if (visualStyle && visualStyle[columnName]) {\n        visualStyle = visualStyle[columnName];\n        setVisualPosition(style, visualStyle);\n        style.BackColor = !!visualStyle.BackColor ? visualStyle.BackColor : style.BackColor;\n        style.ForeColor = !!visualStyle.Color ? visualStyle.Color : style.ForeColor;\n        style.Underline = !!visualStyle.underline ? 'underline' : style.underline;\n        style.Weight = !!visualStyle.Weight ? visualStyle.Weight : style.Weight;\n        visible = this.setVisualProtect(visualStyle);\n      }\n\n      const result = this.processStyle(style);\n\n      if (visible !== undefined) {\n        result.display = !!visible ? 'block' : 'none';\n      }\n\n      return result;\n    }\n    /**\r\n     * Validate if column is editable.\r\n     */\n\n\n    isColumnEditable() {\n      switch (this.visualControlType) {\n        case StyleType.DropDownDW:\n        case StyleType.DropDownListBox:\n          return this.allowEdit;\n\n        case StyleType.Edit:\n        case StyleType.InkEdit:\n        case StyleType.Ucalendar:\n        case StyleType.DateTimeUcalendar:\n          return !this.displayOnly;\n\n        case StyleType.EditMask:\n          return !this.readOnly;\n\n        default:\n          return this.allowEdit;\n      }\n    }\n    /**\r\n     * Gets sparse information for the column\r\n     */\n\n\n    getSparseColumValue() {\n      if (this.dataManagerContext.row && this.dataManagerContext.row[0] && this.dataManagerContext.row[0].sparse && this.dataManagerContext.row[0].sparse[this.name]) {\n        return this.dataManagerContext.row[0].sparse[this.name] === 'true' || this.dataManagerContext.pagination.visiblePageStart === this.dataManagerContext.rowIndex;\n      } else {\n        return true;\n      }\n    }\n    /**\r\n     * Returns and adjusted height to show all text\r\n     */\n\n\n    adjustTextAreaHeight() {\n      if (this.dataManagerContext && this.dataManagerContext.datamanagerType === DatamanagerType.gridComponent) {\n        const textArea = this.elementColumn.nativeElement.querySelector('.k-form-field');\n\n        if (textArea) {\n          if (textArea.value === '') {\n            textArea.rows = 1;\n            return Utils.getComputedStyleNumber(textArea, 'line-height', 0);\n          } else {\n            return textArea.scrollHeight;\n          }\n        }\n      }\n\n      return null;\n    }\n    /**\r\n     * @description\r\n     * Method to update the TextBuffer for the DataWindow\r\n     * @param usePending Indicates if a pending notification should be used.\r\n     * @param ignoreApplyFormat\r\n     * @param allowInvalidValues\r\n     * @returns a boolean value indicating if the buffer was updated\r\n     */\n\n\n    updateBuffer(usePending, ignoreApplyFormat, allowInvalidValues) {\n      if (WebMapService.currentService.config.useBundleEvent) {\n        if (!ignoreApplyFormat && this.visualControlType === StyleType.EditMask) {\n          this.applyFormat();\n        }\n\n        return this.emitTextBufferNotify(usePending, allowInvalidValues);\n      }\n\n      return false;\n    }\n    /**\r\n     * function to update the bundle if is different\r\n     * @param usePending flag to send in the emitter\r\n     * @param allowInvalidValues\r\n     * @returns a boolean value indicating if the text buffer notification is emitted.\r\n     */\n\n\n    emitTextBufferNotify(usePending, allowInvalidValues) {\n      const values = this.updateDisableServerBundleColumnValue();\n\n      if (this.isLogicValueDifferentOfServerValue(true) || allowInvalidValues) {\n        this.emitterColumn.currentTextBufferService.textBufferNotify({\n          textBuffer: this.logicValue,\n          oldTextBuffer: values.oldValue,\n          currentControlNameBuffer: this.name,\n          currentRowBuffer: values.row,\n          columnIdBuffer: values.col,\n          usePending\n        });\n        return true;\n      }\n\n      return false;\n    }\n    /**\r\n     * Function to update the bundle if is different\r\n     * @returns an object with the needed values to update the data.\r\n     */\n\n\n    updateDisableServerBundleColumnValue() {\n      const returnValue = {\n        row: -1,\n        col: -1,\n        oldValue: null\n      };\n      const disableServerBundle = this.dataManagerTabSequenceService?.['currentDataManager']?.dataManagerControlModel?.DisableServerBundle;\n\n      if (disableServerBundle) {\n        const row = this.dataManagerContext.rowIndex;\n        const col = this.columnId;\n        const originalData = this.emitterColumn.commandService.updateBundle.getOriginalData();\n        const rowObject = originalData.value(row.toString());\n        returnValue.row = row;\n        returnValue.col = col;\n        returnValue.oldValue = rowObject[col];\n      }\n\n      return returnValue;\n    }\n    /**\r\n     * Determines if current logic value is different of serve value\r\n     * @param assign Determines if the value must be reassigned when\r\n     * the logicValue is different, Default value: true the values is reassigned\r\n     * @returns true if logic value is different of serve value\r\n     */\n\n\n    isLogicValueDifferentOfServerValue(assign) {\n      return this.emitterColumn.commandService.updateBundle.isDifferent(this.logicValue, this.dataManagerContext.rowIndex, this.columnId, assign);\n    }\n    /**\r\n     * Determines if current logic value is different from model data\r\n     * @returns true if logic value is different from model data\r\n     */\n\n\n    isLogicValueDifferentFromModelData() {\n      return this.logicValue !== this.modelData;\n    }\n    /**\r\n     * Disables autoselect highlight visual behavior\r\n     * @returns a string css class to disable de autoselect property.\r\n     */\n\n\n    disabledHighLight() {\n      return `${this.isValidTabSequence() && this.autoSelect ? ' ' : BaseControlBaseComponent.disableHighLightCssClass}`;\n    }\n    /**\r\n     * Disables focus rectangle visual behavior\r\n     * @returns a string css class to disable de focus rectangle property.\r\n     */\n\n\n    disabledFocusRect() {\n      return `${this.isValidTabSequence() && this.focusRectangle && !this.protect ? ' ' : BaseControlBaseComponent.disableFocusRectCssClass}`;\n    }\n    /**\r\n     * Tab key handler to manage tab behavior.\r\n     * DataManagerTabSequence service determines which action\r\n     * should be performed after a tab key event.\r\n     * @param event TabKey event.\r\n     */\n\n\n    tabKeyHandler(event) {\n      if (!this.isOnGrid) {\n        Utils.preventPropagation(event);\n        const dataEvent = new EventData(event, this.id, this.mapperId);\n        dataEvent.args = {\n          context: this.dataManagerContext,\n          columnId: this.columnId\n        };\n        this.emitDataManagerEvent('keydown', dataEvent);\n        this.emitterColumn.keyPressNotifyAction = true;\n        this.dataManagerTabSequenceService.resolveTab(this, event.shiftKey, event);\n      }\n    }\n    /**\r\n     * this event is trigged when the user type enter in the input\r\n     * @param event default event object created by Angular\r\n     */\n\n\n    onKeyDownEnter(event) {\n      const dataEvent = new EventData(event, this.id, this.mapperId);\n      dataEvent.args = {\n        context: this.dataManagerContext,\n        columnId: this.columnId\n      };\n      this.applyFormat();\n      dataEvent.event.triggerNCCVC = this.updateBuffer();\n      this.emitDataManagerEvent('EnterKeyPress', dataEvent);\n    }\n    /**\r\n     * Returns if component has a valid tab sequence\r\n     */\n\n\n    isValidTabSequence() {\n      return this.tabSequence !== -1;\n    }\n    /**\r\n     * Sets cell color for the cell that contains the dw-column\r\n     */\n\n\n    setCellColor() {\n      if (this.dataManagerContext && this.dataManagerContext.isDynamic) {\n        const cellColor = this.dataManagerContextVisuals && this.dataManagerContextVisuals['BackColor'] ? this.dataManagerContextVisuals['BackColor'] : this.backColor;\n\n        if (this.internalBackColor !== cellColor) {\n          this.td = this.td || this.el?.nativeElement?.closest('td[role=gridcell]');\n\n          if (cellColor && this.td) {\n            this.renderer.setStyle(this.td, 'background-color', cellColor);\n            this.internalBackColor = cellColor;\n          }\n        }\n      }\n    }\n    /**\r\n     * Validates item changes before send an update\r\n     * Verifies if the item contains a valid value if not\r\n     * notifies the DataManager by raising the itemError event\r\n     * @param event current javascript event object.\r\n     */\n\n\n    validateItemErrorBase(event) {\n      this.itemErrorFailed = false;\n      const validation = this.typeValidation();\n\n      if (validation == null && this.modelData) {\n        const dataEvent = new EventData(event, this.id, this.mapperId);\n        dataEvent.args = {\n          itemError: this.modelData,\n          column: this\n        };\n        this.itemErrorFailed = true;\n        this.emitDataManagerEvent('itemError', dataEvent);\n        Utils.preventPropagation(event);\n      }\n\n      return this.itemErrorFailed;\n    }\n    /**\r\n     * Validates edit required\r\n     * @param event Event argument\r\n     * @returns true if edit required error\r\n     */\n\n\n    validateEditRequired(event) {\n      this.editRequiredFailed = false;\n\n      if ((this.modelData == null || this.modelData === '') && this.editRequired) {\n        const dataEvent = new EventData(event, this.id, this.mapperId);\n        dataEvent.args = {\n          itemError: this.modelData,\n          column: this\n        };\n        this.editRequiredFailed = true;\n        this.emitDataManagerEvent('itemRequired', dataEvent);\n        Utils.preventPropagation(event);\n      }\n\n      return this.editRequiredFailed;\n    }\n    /**\r\n     * Manages propagation for column. If column is inside of a Grid component\r\n     * the event is stopped to avoid double call when grid handles the focus.\r\n     * @param event Event argument\r\n     */\n\n\n    managePropagation(event) {\n      if (event && this.isOnGrid) {\n        event.stopGridPropagation = true;\n      }\n    }\n    /**\r\n     * Emits an event to the WMGrid DataManager to remove busy loader after apply\r\n     * focus to the current column.\r\n     */\n\n\n    emitGridBusyLoader() {\n      this.emitterColumn.emitGridBusyLoader();\n    }\n    /**\r\n     * Handle the click events\r\n     * @param name The name of the event click or double click\r\n     * @param event The current event value\r\n     */\n\n\n    clickEvent(name, event) {\n      const data = new EventData(event, this.id, this.mapperId);\n      data.args = {\n        fieldName: this.name,\n        data: this.data,\n        target: this,\n        mouseEvent: event\n      };\n      data.event['row'] = this.dataManagerContext ? this.dataManagerContext.rowIndex : -1;\n      name === 'doubleclick' ? this.doubleClicked.emit(data) : this.clicked.emit(data);\n\n      if (!ColumnControlComponent.allColumnsAreDisabledByTabSequence(this) && (!this.isValidTabSequence() || this.isProtectedColumn())) {\n        data.cancelNCCC = true;\n      }\n\n      this.sendObjectAtPointerCommand();\n      this.notifyDataManagerCurrentRow();\n      this.emitDataManagerEvent(name, data);\n      Utils.preventPropagation(event);\n    }\n    /**\r\n     * set the protect value for the control style\r\n     */\n\n\n    setVisualProtect(visualStyle) {\n      this.visualProtect = !!visualStyle.Protect;\n      return visualStyle.Visible !== undefined ? visualStyle.Visible : undefined;\n    }\n\n  }\n\n  ColumnControlComponent.ɵfac = function ColumnControlComponent_Factory(t) {\n    return new (t || ColumnControlComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MaskFormatService, 8), i0.ɵɵdirectiveInject(DataManagerTabSequenceService, 8));\n  };\n\n  ColumnControlComponent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: ColumnControlComponent,\n    viewQuery: function ColumnControlComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.focusElement = _t.first);\n      }\n    },\n    inputs: {\n      avoidLengthValidation: \"avoidLengthValidation\"\n    },\n    outputs: {\n      itemChanged: \"itemChanged\",\n      doubleClicked: \"doubleClicked\",\n      clicked: \"clicked\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return ColumnControlComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * set the visual position for the style.\r\n */\n\n\nfunction setVisualPosition(style, visualStyle) {\n  style.Height = !!visualStyle.height ? Utils.addPixels(visualStyle.height) : style.Height;\n  style.Width = !!visualStyle.width ? Utils.addPixels(visualStyle.width) : style.Width;\n  style.X = !!visualStyle.x ? Utils.addPixels(visualStyle.x) : style.X;\n  style.Y = !!visualStyle.y ? Utils.addPixels(visualStyle.y) : style.Y;\n}\n/* c8 ignore start */\n// tslint:disable-next-line:directive-class-suffix\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\n\n\nlet ListBoxBaseComponent = /*#__PURE__*/(() => {\n  class ListBoxBaseComponent extends CommonStyleComponent {\n    constructor() {\n      super(...arguments);\n      /**\r\n       * Items collection.\r\n       */\n\n      this.items = [];\n    }\n\n    get dirty() {\n      return this.model ? this.model.Dirty : false;\n    }\n\n    set dirty(value) {\n      this.model.Dirty = value;\n    }\n    /**\r\n     * Gets whether is container\r\n     */\n\n\n    get isContainer() {\n      return true;\n    }\n\n  }\n\n  ListBoxBaseComponent.ɵfac = /* @__PURE__ */function () {\n    let ɵListBoxBaseComponent_BaseFactory;\n    return function ListBoxBaseComponent_Factory(t) {\n      return (ɵListBoxBaseComponent_BaseFactory || (ɵListBoxBaseComponent_BaseFactory = i0.ɵɵgetInheritedFactory(ListBoxBaseComponent)))(t || ListBoxBaseComponent);\n    };\n  }();\n\n  ListBoxBaseComponent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: ListBoxBaseComponent,\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n\n  __decorate([NotifyChange('Dirty'), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], ListBoxBaseComponent.prototype, \"dirty\", null);\n\n  return ListBoxBaseComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet SessionExpiredComponent = /*#__PURE__*/(() => {\n  let SessionExpiredComponent = class SessionExpiredComponent {\n    constructor() {}\n    /*The session expired title */\n\n\n    get title() {\n      return this.model.Title || this.model.Name;\n    }\n\n    get labelMessage() {\n      return this.model.Message;\n    }\n\n    ngOnInit() {\n      this.visible = true;\n    }\n    /**\r\n     * Handle the click event\r\n     * Refresh the current page\r\n     * @param event The click event object\r\n     */\n\n    /* c8 ignore next 5 */\n\n\n    click(event) {\n      this.visible = false;\n      localStorage.clear();\n      window.location.reload();\n    }\n\n  };\n\n  SessionExpiredComponent.ɵfac = function SessionExpiredComponent_Factory(t) {\n    return new (t || SessionExpiredComponent)();\n  };\n\n  SessionExpiredComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: SessionExpiredComponent,\n    selectors: [[\"wm-session-expired\"]],\n    inputs: {\n      model: \"model\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [3, \"title\", 4, \"ngIf\"], [3, \"title\"], [1, \"material-icons\", \"warningIcon\"], [1, \"message\", 2, \"margin\", \"30px\", \"text-align\", \"center\"], [1, \"k-button\", 3, \"click\"]],\n    template: function SessionExpiredComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, SessionExpiredComponent_div_0_Template, 2, 1, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.model);\n      }\n    },\n    directives: [i13.DialogComponent, i13.DialogActionsComponent, i6.NgIf],\n    styles: [\"kendo-dialog[_ngcontent-%COMP%]{z-index:100000}  kendo-dialog .k-dialog-actions{visibility:hidden}.warningIcon[_ngcontent-%COMP%]{color:#b8860b;font-size:25px}.message[_ngcontent-%COMP%]{font-size:18px}\"]\n  });\n  SessionExpiredComponent = __decorate([dataTransfer(['SessionExpired']), __metadata(\"design:paramtypes\", [])], SessionExpiredComponent);\n  return SessionExpiredComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/***********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n\nclass SystemModals {\n  static getModal(name) {\n    if (name === 'SessionExpired') {\n      return SessionExpiredComponent;\n    }\n    /* c8 ignore else */\n\n\n    if (name === 'alert') {\n      return AlertComponent;\n    }\n\n    return undefined;\n  }\n\n}\n\nvar Icons = /*#__PURE__*/(() => {\n  (function (Icons) {\n    Icons[\"addwatch!\"] = \"watch\";\n    Icons[\"addwatch5!\"] = \"remove_red_eye\";\n    Icons[\"alignbottom!\"] = \"vertical_align_bottom\";\n    Icons[\"alignhcenter!\"] = \"vertical_align_center\";\n    Icons[\"alignleft!\"] = \"format_align_left\";\n    Icons[\"alignright!\"] = \"format_align_right\";\n    Icons[\"aligntop!\"] = \"vertical_align_top\";\n    Icons[\"animation!\"] = \"local_movies\";\n    Icons[\"appicon!\"] = \"apps\";\n    Icons[\"application!\"] = \"settings_applications\";\n    Icons[\"applicationicon!\"] = \"web_asset\";\n    Icons[\"arrangeicons!\"] = \"apps\";\n    Icons[\"arrangetables!\"] = \"view_agenda\";\n    Icons[\"arrangetables5!\"] = \"tab\";\n    Icons[\"arrow!\"] = \"arrow_upward\";\n    Icons[\"asterisk!\"] = \"info\";\n    Icons[\"blob!\"] = \"storage\";\n    Icons[\"bold!\"] = \"format_bold\";\n    Icons[\"border3dlowered!\"] = \"border_style\";\n    Icons[\"border3draised!\"] = \"border_outer\";\n    Icons[\"borderbox!\"] = \"crop_16_9\";\n    Icons[\"bordernone!\"] = \"border_clear\";\n    Icons[\"borderunderline!\"] = \"border_bottom\";\n    Icons[\"browse!\"] = \"search\";\n    Icons[\"cascade!\"] = \"collections\";\n    Icons[\"center!\"] = \"format_align_center\";\n    Icons[\"checkbox!\"] = \"check_box\";\n    Icons[\"checkin!\"] = \"format_indent_increase\";\n    Icons[\"checkout!\"] = \"format_indent_decrease\";\n    Icons[\"checkstatus!\"] = \"live_help\";\n    Icons[\"clear!\"] = \"clear_all\";\n    Icons[\"close!\"] = \"close\";\n    Icons[\"commandbutton!\"] = \"crop_7_5\";\n    Icons[\"comment!\"] = \"mode_comment\";\n    Icons[\"compile!\"] = \"grain\";\n    Icons[\"compute!\"] = \"view_comfy\";\n    Icons[\"computesum!\"] = \"add_to_photos\";\n    Icons[\"computetoday!\"] = \"filter_1\";\n    Icons[\"continue!\"] = \"play_arrow\";\n    Icons[\"copy!\"] = \"filter_none\";\n    Icons[\"createforeingkey!\"] = \"vpn_key\";\n    Icons[\"createlibrary!\"] = \"create\";\n    Icons[\"createtable5!\"] = \"list_alt\";\n    Icons[\"crosstab!\"] = \"library_books\";\n    Icons[\"cursor!\"] = \"call_to_action\";\n    Icons[\"custom005!\"] = \"local_gas_station\";\n    Icons[\"custom007!\"] = \"save\";\n    Icons[\"custom008!\"] = \"save\";\n    Icons[\"custom009!\"] = \"close\";\n    Icons[\"custom010!\"] = \"videocam\";\n    Icons[\"custom011!\"] = \"volume_up\";\n    Icons[\"custom012!\"] = \"music_note\";\n    Icons[\"custom014!\"] = \"play_for_work\";\n    Icons[\"custom015!\"] = \"access_time\";\n    Icons[\"custom016!\"] = \"vpn_key\";\n    Icons[\"custom019!\"] = \"chat_bubble_outline\";\n    Icons[\"custom020!\"] = \"phone\";\n    Icons[\"custom021!\"] = \"delete\";\n    Icons[\"custom022!\"] = \"priority_high\";\n    Icons[\"custom023!\"] = \"list_alt\";\n    Icons[\"custom025!\"] = \"mail\";\n    Icons[\"custom026!\"] = \"child_care\";\n    Icons[\"custom027!\"] = \"mood_bad\";\n    Icons[\"custom032!\"] = \"perm_data_setting\";\n    Icons[\"custom033!\"] = \"input\";\n    Icons[\"custom034!\"] = \"arrow_downward\";\n    Icons[\"custom035!\"] = \"arrow_forward\";\n    Icons[\"custom036!\"] = \"arrow_back\";\n    Icons[\"custom037!\"] = \"settings_input_svideo\";\n    Icons[\"custom038!\"] = \"check\";\n    Icons[\"custom039!\"] = \"folder\";\n    Icons[\"custom040!\"] = \"casino\";\n    Icons[\"custom042!\"] = \"public\";\n    Icons[\"custom043!\"] = \"close\";\n    Icons[\"custom044!\"] = \"transform\";\n    Icons[\"custom045!\"] = \"local_florist\";\n    Icons[\"custom048!\"] = \"attach_money\";\n    Icons[\"custom050!\"] = \"folder_open\";\n    Icons[\"custom051!\"] = \"nature\";\n    Icons[\"custom057!\"] = \"filter_none\";\n    Icons[\"custom058!\"] = \"beach_access\";\n    Icons[\"custom059!\"] = \"grid_on\";\n    Icons[\"custom060!\"] = \"tune\";\n    Icons[\"custom061!\"] = \"toys\";\n    Icons[\"custom070!\"] = \"event_note\";\n    Icons[\"custom072!\"] = \"create\";\n    Icons[\"custom073!\"] = \"pie_chart\";\n    Icons[\"custom074!\"] = \"print\";\n    Icons[\"custom075!\"] = \"gesture\";\n    Icons[\"custom076!\"] = \"people\";\n    Icons[\"custom079!\"] = \"power\";\n    Icons[\"custom080!\"] = \"close\";\n    Icons[\"custom085!\"] = \"directions_boat\";\n    Icons[\"custom087!\"] = \"layers\";\n    Icons[\"custom088!\"] = \"layers\";\n    Icons[\"custom094!\"] = \"edit\";\n    Icons[\"cut!\"] = \"crop\";\n    Icons[\"database!\"] = \"storage\";\n    Icons[\"datamanip!\"] = \"developer_board\";\n    Icons[\"datawindow!\"] = \"web\";\n    Icons[\"declarevariable!\"] = \"grid_off\";\n    Icons[\"dosEdit5!\"] = \"library_books\";\n    Icons[\"error!\"] = \"error\";\n    Icons[\"environment!\"] = \"web_asset\";\n    Icons[\"exclamation!\"] = \"warning\";\n    Icons[\"executesql!\"] = \"play_arrow\";\n    Icons[\"executesql5!\"] = \"streetview\";\n    Icons[\"exit!\"] = \"exit_to_app\";\n    Icons[\"export!\"] = \"flight_takeoff\";\n    Icons[\"group!\"] = \"picture_in_picture_alt\";\n    Icons[\"help!\"] = \"help\";\n    Icons[\"information!\"] = \"info\";\n    Icons[\"join!\"] = \"view_column\";\n    Icons[\"justify!\"] = \"format_align_justify\";\n    Icons[\"import!\"] = \"flight_land\";\n    Icons[\"insert!\"] = \"insert_chart\";\n    Icons[\"insertreturn!\"] = \"repeat\";\n    Icons[\"italic!\"] = \"format_italic\";\n    Icons[\"layer!\"] = \"web_asset\";\n    Icons[\"library!\"] = \"account_balance\";\n    Icons[\"librarylist!\"] = \"burst_mode\";\n    Icons[\"listbox!\"] = \"format_list_numbered\";\n    Icons[\"nestedreport!\"] = \"assignment\";\n    Icons[\"nestedreturn!\"] = \"subdirectory_arrow_left\";\n    Icons[\"next!\"] = \"arrow_forward\";\n    Icons[\"notfound!\"] = \"close\";\n    Icons[\"paste!\"] = \"filter_frames\";\n    Icons[\"picture!\"] = \"picture_in_picture\";\n    Icons[\"preferences!\"] = \"touch_app\";\n    Icons[\"print!\"] = \"print\";\n    Icons[\"prior!\"] = \"arrow_downward\";\n    Icons[\"query!\"] = \"reorder\";\n    Icons[\"question!\"] = \"accessibility\";\n    Icons[\"radiobutton!\"] = \"radio_button_checked\";\n    Icons[\"report!\"] = \"receipt\";\n    Icons[\"retrieve!\"] = \"keyboard_return\";\n    Icons[\"retrievecancel!\"] = \"stop\";\n    Icons[\"run!\"] = \"directions_run\";\n    Icons[\"runreport!\"] = \"assignment\";\n    Icons[\"save!\"] = \"save\";\n    Icons[\"scriptno!\"] = \"description\";\n    Icons[\"scriptyes!\"] = \"developer_board\";\n    Icons[\"search!\"] = \"search\";\n    Icons[\"selectall!\"] = \"select_all\";\n    Icons[\"selectscript!\"] = \"receipt\";\n    Icons[\"setvariable!\"] = \"code\";\n    Icons[\"sort!\"] = \"sort_by_alpha\";\n    Icons[\"start!\"] = \"flag\";\n    Icons[\"start5!\"] = \"bug_report\";\n    Icons[\"statictext!\"] = \"font_download\";\n    Icons[\"startpipeline!\"] = \"filter_none\";\n    Icons[\"step!\"] = \"keyboard_arrow_right\";\n    Icons[\"stopsign!\"] = \"highlight_off\";\n    Icons[\"tile!\"] = \"web_asset\";\n    Icons[\"undo!\"] = \"undo\";\n    Icons[\"update!\"] = \"update\";\n    Icons[\"vcrfirst!\"] = \"skip_previous\";\n    Icons[\"vcrlast!\"] = \"skip_next\";\n    Icons[\"vcrnext!\"] = \"play_arrow\";\n    Icons[\"vcrprior!\"] = \"keyboard_arrow_left\";\n    Icons[\"viewpainter!\"] = \"add_to_queue\";\n    Icons[\"watcom!\"] = \"flash_on\";\n    Icons[\"window!\"] = \"web_asset\";\n  })(Icons || (Icons = {}));\n\n  return Icons;\n})();\n\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\nlet IconsService = /*#__PURE__*/(() => {\n  class IconsService {\n    constructor() {\n      this.defclass = 'material-icons';\n    }\n    /**\r\n     * Returns the css class to use \"material icons\"\r\n     */\n\n\n    get iconClass() {\n      return this.defclass;\n    }\n    /**\r\n     * Returns the icon assigned to itemName value.\r\n     * @param itemName The name of the item.\r\n     */\n\n\n    getItemName(itemName) {\n      const iconName = itemName ? itemName.toLocaleLowerCase() : undefined;\n\n      if (iconName && !Icons[iconName] && !iconName.match(/.*\\\\*.*\\..*/)) {\n        return iconName;\n      }\n\n      return Icons[iconName];\n    }\n    /**\r\n     * Returns the image source of the icon assigned to itemName value.\r\n     * @param itemName The name of the item.\r\n     */\n\n\n    getItemNameSource(itemName) {\n      return this.getItemName(itemName) ? undefined : itemName;\n    }\n\n  }\n\n  IconsService.ɵfac = function IconsService_Factory(t) {\n    return new (t || IconsService)();\n  };\n\n  IconsService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: IconsService,\n    factory: IconsService.ɵfac,\n    providedIn: 'root'\n  });\n  return IconsService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/* c8 ignore start */\n\n\nlet BasePictureComponent = /*#__PURE__*/(() => {\n  class BasePictureComponent extends BaseControlComponent {\n    constructor(cd, rnd2, elem, lengthConverter, ems, iconservice, mTabOrderService, tabPageOrderService) {\n      super(cd, rnd2, elem, lengthConverter, ems, mTabOrderService, tabPageOrderService);\n      this.ems = ems;\n      this.iconservice = iconservice;\n      this.mTabOrderService = mTabOrderService;\n      this.tabPageOrderService = tabPageOrderService;\n      /* c8 ignore stop */\n\n      this.doubleClicked = new EventEmitter();\n    }\n\n    ngOnInit() {\n      super.ngOnInit();\n      this.registerTabService();\n    }\n    /**\r\n     * Gets the picture name related with source in the model.\r\n     */\n\n\n    get pictureName() {\n      return this.iconservice.getItemName(this.model.PictureName) || this.model.PictureName;\n    }\n    /**\r\n     * @description\r\n     * Returns the url source to load the image.\r\n     * @returns { string }\r\n     */\n\n\n    get source() {\n      return Icons[this.model.PictureName] ? undefined : this.model.PictureName;\n    }\n    /**\r\n     * @description\r\n     * Returns a string '100%' if image does not use the original size and returns 'null' in the other case.\r\n     * @returns { string }\r\n     */\n\n\n    get sizes() {\n      return this.model.OriginalSize ? null : '100%';\n    }\n    /**\r\n     * @description\r\n     * Returns a boolean indicating whether to use the image original size .\r\n     * @returns { boolean }\r\n     */\n\n\n    get originalSize() {\n      return this.model.OriginalSize;\n    }\n    /**\r\n     * Return a boolean indicating if the image colors are inverted\r\n     */\n\n\n    get invert() {\n      return this.model.Invert || false;\n    }\n\n    get powerTipText() {\n      return this.model.PowerTipText || '';\n    }\n    /**\r\n     * Gets iconclass from icon service\r\n     */\n\n\n    iconClass() {\n      return this.iconservice.iconClass;\n    }\n    /**\r\n     * @description\r\n     * This function links the outer css class with borderClass constant css class.\r\n     * @returns { string }\r\n     */\n\n\n    pictureBoxStyle() {\n      return `${this.class ? this.class : ''} ${this.border ? '' : 'borderClass'}\n            ${this.invert ? 'invertColors' : ''} ${this.originalSize ? 'originalSize' : ''}`;\n    }\n    /**\r\n     * Triggers doubleclick event\r\n     */\n\n\n    doubleClickHandler() {\n      this.doubleClicked.emit(new EventData('DoubleClicked', this.id, this.mapperId));\n    }\n    /**\r\n     * Triggers click event.\r\n     * @param event Event data\r\n     */\n\n\n    clickHandler(event) {\n      const data = new EventData(event, this.id, this.mapperId);\n      data.event['row'] = this.dataManagerContext ? this.dataManagerContext.rowIndex : -1;\n      this.clicked.emit(data);\n      this.clickedDatamanagerHandler(data);\n      Utils.preventPropagation(event);\n    }\n    /**\r\n     * When datamanager triggers a not column click\r\n     * @param data Event data.\r\n     */\n\n\n    clickedDatamanagerHandler(data) {\n      this.emitDataManagerEvent('clickedNotColumnControl', data);\n      this.sendObjectAtPointerCommand();\n    }\n    /**\r\n     * Focus event\r\n     * @param event Event data\r\n     */\n\n\n    focusIn(event) {\n      super.focusIn(event);\n    }\n    /**\r\n     * Focus out event\r\n     * @param event Event data\r\n     */\n\n\n    focusOut(event) {\n      super.focusOut(event);\n    }\n    /**\r\n     * Get the state of the control if should be disabled or not.\r\n     */\n\n\n    get imageDisabled() {\n      return this.disabled ? 'none' : 'auto';\n    }\n\n  }\n\n  BasePictureComponent.ɵfac = function BasePictureComponent_Factory(t) {\n    return new (t || BasePictureComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(IconsService), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n  };\n\n  BasePictureComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: BasePictureComponent,\n    selectors: [[\"ng-component\"]],\n    outputs: {\n      doubleClicked: \"doubleClicked\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function BasePictureComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n\n  __decorate([serverEvent('bndoubleclicked'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], BasePictureComponent.prototype, \"doubleClickHandler\", null);\n\n  __decorate([serverEvent('bnclicked'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], BasePictureComponent.prototype, \"clickHandler\", null);\n\n  __decorate([serverEvent('clicked'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], BasePictureComponent.prototype, \"clickedDatamanagerHandler\", null);\n\n  __decorate([serverEvent('bnsetfocus'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], BasePictureComponent.prototype, \"focusIn\", null);\n\n  __decorate([serverEvent('bnkillfocus'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], BasePictureComponent.prototype, \"focusOut\", null);\n\n  return BasePictureComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n// tslint:disable-next-line:directive-class-suffix\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\n\n\nlet BaseDateTimeComponent = /*#__PURE__*/(() => {\n  class BaseDateTimeComponent extends ColumnControlComponent {\n    /* c8 ignore start */\n    constructor(changeDetectorDWB, rendererDWB, elementDWB, lengthConverterB, emitterColumnDWB, maskFormat2B, dataMTabSequenceService) {\n      super(changeDetectorDWB, rendererDWB, elementDWB, lengthConverterB, emitterColumnDWB, maskFormat2B, dataMTabSequenceService);\n      this.changeDetectorDWB = changeDetectorDWB;\n      this.rendererDWB = rendererDWB;\n      this.elementDWB = elementDWB;\n      this.emitterColumnDWB = emitterColumnDWB;\n      this.maskFormat2B = maskFormat2B;\n      this.dataMTabSequenceService = dataMTabSequenceService;\n      /**\r\n       * Default mask value\r\n       */\n\n      this.defaultMask = 'hh:mm:ss';\n    }\n    /* Return undefined to show the formatplaceholder, otherwise show a empty field */\n\n\n    get emptyPlaceHolder() {\n      return this.spin ? undefined : '';\n    }\n\n    ngOnInit() {\n      super.ngOnInit();\n      this.initializeValue();\n    }\n\n    detectChanges() {\n      super.detectChanges();\n      this.getLogicValue();\n    }\n    /**\r\n     * Override the method of ColumnControl to not apply the style in this component\r\n     */\n    // eslint-disable-next-line @angular-eslint/no-empty-lifecycle-method\n\n\n    ngAfterViewChecked() {}\n    /**\r\n     * Applies detectChanges function and refresh\r\n     * the column values.\r\n     * @param data Data to be used in change detection.\r\n     */\n\n\n    columnDetectChanges(data) {\n      this.date = undefined;\n      this.initializeValue();\n      this.detectChanges();\n    }\n    /* property to show or hide the spin */\n\n\n    get spin() {\n      return this.model.Spin;\n    }\n    /**\r\n     * @description\r\n     * Returns a boolean value indicating if the control has a DropDownCalendar.\r\n     * notice that dw controls use Ddcalendar instead Dropdowncalendar\r\n     * @returns { boolean }\r\n     */\n\n\n    get dropdownCalendar() {\n      return this.model.Ddcalendar;\n    }\n    /**\r\n     * @description\r\n     * Returns the date value of the model.\r\n     * @returns { Date }\r\n     */\n\n\n    get value() {\n      return this.date;\n    }\n    /**\r\n     * @description\r\n     * Sets a date value in the component model.\r\n     * @param value A date with new value to set model property.\r\n     */\n\n\n    set value(value) {\n      this.date = value;\n      this.modelData = formatDate(this.date, this.mask);\n    }\n    /**\r\n     * @description\r\n     * Returns the mask processed by the EditMaskService.\r\n     * @returns { string }\r\n     */\n\n\n    get mask() {\n      return this.model && this.model.Mask ? DateTimeFunctions.processPBDateTimeMaskFormat(this.model.Mask) : this.defaultMask;\n    }\n\n    get formatPlaceholder() {\n      const obj = DateTimeFunctions.generateFormatPlaceholder(this.mask);\n      return DateTimeFunctions.GenerateZeroObjects(obj);\n    }\n    /**\r\n     * Method to allow each component to manage its own\r\n     * display property\r\n     */\n\n\n    getStyleDisplay() {\n      return 'flex';\n    }\n    /**\r\n     * Handle the item change event for this control.\r\n     * @param event The received event\r\n     */\n\n\n    itemChangeHandler(event, itemChanged) {\n      if (!this.focusApplied) {\n        this.disableFormatting = false;\n        const date = this.getValue();\n\n        if (Utils.isValidDate(date)) {\n          this.date = date;\n          const typeValidation = Utils.dateToString(date);\n          this.logicValue = this.isColumnEditable() ? typeValidation : this.logicValue;\n        } else if (date === null && itemChanged) {\n          this.date = null;\n          this.logicValue = this.isColumnEditable() ? null : this.logicValue;\n          this.resetDateValue();\n        }\n\n        this.disableFormatting = false;\n        this.displayValue = this.getDisplayValue();\n        this.modelData = this.displayValue;\n      }\n    }\n    /**\r\n     * Extension Handler for item change, builds arguments for the event.\r\n     * @param event event data\r\n     */\n\n\n    executeItemChangeHandler(event, itemChanged) {\n      const data = new EventData(event, this.id, this.mapperId);\n      data.avoidItemChanged = !(itemChanged && this.isLogicValueDifferentOfServerValue(false));\n      data.args = {\n        fieldName: this.name,\n        data: this.logicValue\n      };\n\n      if (!data.avoidItemChanged) {\n        this.emitterColumnDWB.commandService.run(CommandName.updateBundle, {\n          data,\n          context: this.dataManagerContext,\n          columnId: this.columnId\n        });\n      }\n\n      this.updateBuffer();\n      this.itemChanged.emit(data);\n      this.emitDataManagerEvent('change', data);\n    }\n    /**\r\n     * Handles the keyUp event\r\n     * if the Enter key was pressed then it\r\n     * must invoke the itemChangeHandler event\r\n     * @param event Ve\r\n     */\n\n\n    keyUpHandler(event) {\n      /* c8 ignore else */\n      if (event.keyCode === 13) {\n        // If Enter key was pressed\n        this.itemChangeHandler(event);\n        this.executeItemChangeHandler(event, true);\n        this.onKeyDownEnter(event);\n      }\n    }\n    /**\r\n     * Overrides the base behavior since the buffer is updated at\r\n     * every model change the value in buffer is the same as logic value\r\n     */\n\n\n    onKeyDownEnter(event) {\n      const dataEvent = new EventData(event, this.id, this.mapperId);\n      dataEvent.args = {\n        context: this.dataManagerContext,\n        columnId: this.columnId\n      };\n      this.applyFormat();\n      dataEvent.event.triggerNCCVC = true;\n      this.emitDataManagerEvent('EnterKeyPress', dataEvent);\n    }\n    /**\r\n     * Handle the blur event\r\n     * If the user type a partial value the control does not trigger\r\n     * the valueChange action so this event will review if a change\r\n     * occurs and trigger the expected event\r\n     * @param evt: the event object\r\n     */\n\n\n    blurHandler(event) {\n      event = event ? event : {};\n      /* c8 ignore else */\n\n      if (!this.value) {\n        const kendoDate = this.dropdownCalendar ? this.datePickerComponent.input.kendoDate : this.dateInputComponent['kendoDate'];\n        const maskValues = DateTimeFunctions.generateFormatPlaceholder(this.mask);\n        const modifiedValues = DateTimeFunctions.returnKendoModifiedValues(maskValues, kendoDate);\n        /* c8 ignore else */\n\n        if (modifiedValues.dirty()) {\n          const date = DateTimeFunctions.autoCompleteDate(kendoDate.value, modifiedValues);\n          this.value = date;\n          this.dropdownCalendar ? this.datePickerComponent.value = this.value : this.dateInputComponent.value = this.value;\n        }\n      }\n\n      this.itemChangeHandler(event, true);\n      this.executeItemChangeHandler(event, true);\n    }\n    /**\r\n     * Method to reset(clear) the date value input\r\n     */\n\n\n    resetDateValue() {\n      this.value = new Date();\n      this.detectChanges();\n      this.value = null;\n      this.logicValue = null;\n      this.detectChanges();\n    }\n    /**\r\n     * Method to overwrite the display for the component\r\n     * The {display: block} is generating problems to\r\n     * edit into the the control.\r\n     */\n\n\n    setMyStyle(style) {\n      if (this.emitterColumnDWB.cancelDynamicStyles) {\n        return null;\n      }\n\n      const customStyle = super.setMyStyle(style);\n      customStyle['display'] = this.visible ? 'flex' : 'none';\n      return customStyle;\n    }\n    /**\r\n     * Tab key handler to manage tab behavior.\r\n     * DataManagerTabSequence service determines which action\r\n     * should be performed after a tab key event.\r\n     * @param event TabKey event.\r\n     */\n\n\n    tabKeyHandler(event) {\n      super.tabKeyHandler(event);\n      const component = this.dateInputComponent || this.datePickerComponent;\n      /* c8 ignore else */\n\n      if (!this.isOnGrid && component) {\n        tabReadOnly(component, this, this.readOnly);\n      }\n    }\n    /**\r\n     * @description\r\n     * The 'classHandler' function call super and adds class if inside grid\r\n     * @returns { string }\r\n     */\n\n\n    classHandler() {\n      return `${super.classHandler()} ${this.isInsideGrid()}`;\n    }\n    /**\r\n     * Returns class to apply fro dropdowns in grid\r\n     */\n\n\n    isInsideGrid() {\n      return !!this.isOnGrid ? 'columnInGrid' : '';\n    }\n    /**\r\n     * Initializes the date time value in ngOnInit, when the\r\n     * column refreshes after scrolling or after dirty.\r\n     */\n\n\n    initializeValue() {\n      this.maskFormat2B.initFormatArrays(this.format, this.validateColumn(this.columnId), `${this.columnId}`);\n      this.modelData = this.logicValue;\n      this.getLogicValue();\n      this.applyFormat();\n    }\n    /**\r\n     * Returns the displayed value of the\r\n     * current component\r\n     */\n\n\n    getValue() {\n      return this.datePickerComponent ? this.datePickerComponent.value : parseDate(this.getDisplayValue(), this.mask);\n    }\n    /**\r\n     * Returns the displayed value of the\r\n     * current component\r\n     */\n\n\n    getDisplayValue() {\n      return this.dateInputComponent ? this.dateInputComponent['currentValue'] : this.datePickerComponent.input['ariaValueText'];\n    }\n    /**\r\n     * Converts the corresponding logic value to date\r\n     */\n\n\n    getLogicValue() {\n      const newDate = Utils.stringToDate(this.logicValue) || this.date;\n\n      if (this.date == null || this.date.getTime() !== newDate.getTime()) {\n        this.date = newDate;\n      }\n\n      return this.date;\n    }\n\n  }\n\n  BaseDateTimeComponent.ɵfac = function BaseDateTimeComponent_Factory(t) {\n    return new (t || BaseDateTimeComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MaskFormatService), i0.ɵɵdirectiveInject(DataManagerTabSequenceService, 8));\n  };\n\n  BaseDateTimeComponent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: BaseDateTimeComponent,\n    viewQuery: function BaseDateTimeComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(DateInputComponent, 5);\n        i0.ɵɵviewQuery(DatePickerComponent, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dateInputComponent = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.datePickerComponent = _t.first);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return BaseDateTimeComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n// tslint:disable-next-line:directive-class-suffix\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\n\n\nlet DropDownBaseComponent = /*#__PURE__*/(() => {\n  class DropDownBaseComponent extends ColumnControlComponent {\n    /* c8 ignore start */\n    constructor(changeDetector, maskFormat2, renderer2, element, lengthConverter, emitter, dataMTabSequenceService) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter, maskFormat2, dataMTabSequenceService);\n      this.changeDetector = changeDetector;\n      this.maskFormat2 = maskFormat2;\n      this.renderer2 = renderer2;\n      this.element = element;\n      this.emitter = emitter;\n      this.dataMTabSequenceService = dataMTabSequenceService;\n      this.selectionChanged = new EventEmitter();\n      /**\r\n       * Normalize a custom input value into a readable object.\r\n       */\n      // tslint:disable-next-line: no-shadowed-variable\n\n      this.valueNormalizer = text => text.pipe(map(text => {\n        return {\n          value: text,\n          text\n        };\n      }));\n    }\n\n    ngAfterViewInit() {\n      super.ngAfterViewInit();\n      this.blurHandler();\n    }\n\n    ngOnDestroy() {\n      /* c8 ignore else */\n      if (this.clickListener) {\n        this.clickListener();\n      }\n    }\n    /**\r\n     * After the control get focused then apply the\r\n     * expected readonly behavior if it is disabled.\r\n     * @param event The current event data\r\n     */\n\n\n    focusHandler(event) {\n      if (this.inputElement) {\n        if (this.disabled) {\n          this.renderer2.setAttribute(this.inputElement, 'readonly', 'true');\n        } else {\n          this.renderer2.removeAttribute(this.inputElement, 'readonly');\n        }\n      }\n\n      this.removeOrApplyArrow(this.isValidTabSequence() && !this.showList);\n      this.applyFocus();\n      this.detectChanges();\n    }\n    /**\r\n     * After control blur\r\n     * @param event  current event data\r\n     */\n\n\n    blurHandler() {\n      this.removeOrApplyArrow(this.useAsBorder && !this.showList);\n    }\n    /**\r\n     * @description\r\n     * Returns a boolean value indicating if the dropdow arrow is visible or not.\r\n     * @returns { boolean }\r\n     */\n\n\n    get useAsBorder() {\n      return !!this.model.UseAsBorder;\n    }\n    /**\r\n     * Whether the ListBox portion of the DropDownDataWindow displays when the column has focus.\r\n     * A down arrow does not display at the right end of the DropDownDataWindow when dddw.ShowList is yes.\r\n     */\n\n\n    get showList() {\n      return !!this.model.ShowList;\n    }\n    /**\r\n     * @description\r\n     * Gets focusable element inside of the component\r\n     */\n\n\n    get focusableElement() {\n      return this.combobox;\n    }\n    /**\r\n     * Removes arrow button\r\n     */\n\n\n    removeOrApplyArrow(display) {\n      this.bindingClickToToggle();\n      const arrow = this.element.nativeElement.querySelector('span .k-select');\n\n      if (arrow) {\n        this.renderer2.setAttribute(arrow, 'style', `display: ${display ? 'true' : 'none'}`);\n      }\n    }\n    /**\r\n     * Binding click to toggle\r\n     */\n\n\n    bindingClickToToggle() {\n      this.inputElement = this.element.nativeElement.querySelector('.k-input');\n\n      if (this.inputElement) {\n        this.clickListener = this.renderer2.listen(this.inputElement, 'click', event => {\n          if (!this.disabled && this.combobox) {\n            this.combobox.toggle(true);\n          }\n        });\n      }\n    }\n    /**\r\n     * Removes padding of the input\r\n     */\n\n\n    removePadding() {\n      const paddingElement = this.element.nativeElement.querySelector('.k-input');\n\n      if (paddingElement) {\n        this.renderer2.setAttribute(paddingElement, 'style', 'padding-right: 0px');\n      }\n    }\n    /**\r\n     * Is triggered when another component is selected\r\n     * @param event event parameter\r\n     */\n\n\n    selectionChangeHandler(event) {\n      event.ignoreEditChange = WebMapService.currentService.config.useBundleEvent;\n      event.triggerNCCVC = event.ddwtriggerNCCVC !== undefined ? event.ddwtriggerNCCVC : true;\n      const data = this.selectionChangeLogic(event, false);\n      data.isNCCVC = true;\n      this.emitDataManagerEvent('change', data);\n    }\n    /**\r\n     * Shared logic between selectionChangeHandler and selectionChangeHandlerWithKeyPress\r\n     * @param event event parameter\r\n     * @param isKeyPress isKeyPress parameter\r\n     */\n\n\n    selectionChangeLogic(event, isKeyPress) {\n      const data = this.buildEventData(event, isKeyPress);\n\n      if (this.isEdited) {\n        this.isEdited = false;\n        this.applyFormat();\n      }\n\n      this.triggerMouseDownClick = false;\n      this.emitter.commandService.run(CommandName.updateBundle, {\n        data,\n        context: this.dataManagerContext,\n        columnId: this.columnId\n      });\n      this.selectionChanged.emit(data);\n      this.updateBuffer();\n      return data;\n    }\n    /**\r\n     * Is triggered when typing in the input\r\n     * @param event event parameter\r\n     */\n\n\n    selectionChangeHandlerWithKeyPress(event) {\n      const data = this.selectionChangeLogic(event, true);\n      data.isNCCVC = false;\n      this.emitDataManagerEvent('change', data);\n    }\n    /**\r\n     * Builds event data object for DropDown events.\r\n     * @param event event parameter\r\n     */\n\n\n    buildEventData(event, isKeyPress) {\n      if (!event) {\n        event = {};\n        event.text = this.combobox.text;\n      }\n\n      const data = new EventData(event, this.id, this.mapperId);\n      const value = isKeyPress ? event.value : this.logicValue;\n      data.args = {\n        fieldName: this.name,\n        data: value,\n        computedExpressions: this.dataManagerContext.computedExpressions\n      };\n      return data;\n    }\n    /**\r\n     * Returns true if the API's data manager response\r\n     * has dddwDisplay section and it has one or more\r\n     * default values for columns of type DropDownDataManager\r\n     */\n\n\n    hasDDDWDisplayValues() {\n      return this.dataManagerContext && this.dataManagerContext.row && this.dataManagerContext.row[0] && this.dataManagerContext.row[0].dddwDisplay && Object.keys(this.dataManagerContext.row[0].dddwDisplay).length > 0;\n    }\n    /**\r\n     * Returns true if the API's data manager response\r\n     * has a dddwDisplay value for the current column Id\r\n     */\n\n\n    hasInitialValue() {\n      return this.hasDDDWDisplayValues() && this.dataManagerContext.row[0].dddwDisplay[this.columnId] && this.dataManagerContext.row[0].dddwDisplay[this.columnId][this.name] != null;\n    }\n    /**\r\n     * After any value change ddwDisplay value should be null to avoid\r\n     * re apply when Backend does not send dirty\r\n     */\n\n\n    clearddwDisplay() {\n      if (this.hasInitialValue() != null) {\n        this.dataManagerContext.row[0].dddwDisplay[this.columnId][this.name] = null;\n      }\n    }\n\n    ngAfterViewChecked() {\n      /* c8 ignore else */\n      if (!this.emitter.cancelDynamicStyles) {\n        const style = this.setMyStyle();\n        /* c8 ignore else */\n\n        if (style) {\n          const element = this.el.nativeElement.querySelector('.k-widget');\n\n          if (element) {\n            for (const key in style) {\n              /* c8 ignore else */\n              if (style.hasOwnProperty(key)) {\n                this.renderer.setStyle(element, key, style[key]);\n              }\n            }\n          }\n        }\n      }\n    }\n\n  }\n\n  DropDownBaseComponent.ɵfac = function DropDownBaseComponent_Factory(t) {\n    return new (t || DropDownBaseComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(MaskFormatService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(DataManagerTabSequenceService, 8));\n  };\n\n  DropDownBaseComponent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: DropDownBaseComponent,\n    viewQuery: function DropDownBaseComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c1, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.combobox = _t.first);\n      }\n    },\n    outputs: {\n      selectionChanged: \"selectionChanged\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return DropDownBaseComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nvar LineStyle = /*#__PURE__*/(() => {\n  (function (LineStyle) {\n    LineStyle[LineStyle[\"continuous\"] = 0] = \"continuous\";\n    LineStyle[LineStyle[\"dash\"] = 1] = \"dash\";\n    LineStyle[LineStyle[\"dashdot\"] = 2] = \"dashdot\";\n    LineStyle[LineStyle[\"dashdotdot\"] = 3] = \"dashdotdot\";\n    LineStyle[LineStyle[\"dot\"] = 4] = \"dot\";\n    LineStyle[LineStyle[\"transparent\"] = 5] = \"transparent\";\n  })(LineStyle || (LineStyle = {}));\n\n  return LineStyle;\n})();\nvar SVGLineStyle = /*#__PURE__*/(() => {\n  (function (SVGLineStyle) {\n    SVGLineStyle[\"continuous\"] = \"0\";\n    SVGLineStyle[\"dash\"] = \"15\";\n    SVGLineStyle[\"dashdot\"] = \"20,10,5,10\";\n    SVGLineStyle[\"dashdotdot\"] = \"20,10,5,5,5,10\";\n    SVGLineStyle[\"dot\"] = \"3\";\n    SVGLineStyle[\"transparent\"] = \"-1\";\n  })(SVGLineStyle || (SVGLineStyle = {}));\n\n  return SVGLineStyle;\n})();\n\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n/**\r\n * This enum is used by the SVG components inside a DataWindow. The order and value for the\r\n * linestyles is different to the linestyles used by the SVG in the windows\r\n */\nvar DWSVGLineStyle = /*#__PURE__*/(() => {\n  (function (DWSVGLineStyle) {\n    DWSVGLineStyle[DWSVGLineStyle[\"solid\"] = 0] = \"solid\";\n    DWSVGLineStyle[DWSVGLineStyle[\"dash\"] = 1] = \"dash\";\n    DWSVGLineStyle[DWSVGLineStyle[\"dotted\"] = 2] = \"dotted\";\n    DWSVGLineStyle[DWSVGLineStyle[\"dashdot\"] = 3] = \"dashdot\";\n    DWSVGLineStyle[DWSVGLineStyle[\"dashdotdot\"] = 4] = \"dashdotdot\";\n    DWSVGLineStyle[DWSVGLineStyle[\"transparent\"] = 5] = \"transparent\";\n  })(DWSVGLineStyle || (DWSVGLineStyle = {}));\n\n  return DWSVGLineStyle;\n})();\nlet GraphicsComponent = /*#__PURE__*/(() => {\n  class GraphicsComponent extends BaseControlComponent {\n    constructor(changeDetector, renderer2, element, lengthConverter, emitter, mTabOrderService) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter, mTabOrderService);\n      this.mTabOrderService = mTabOrderService;\n    }\n\n    get lineColor() {\n      return this.model.LineColor || 'rgb(0,0,0)';\n    }\n\n    get lineStyle() {\n      return this.model.LineStyle || LineStyle.continuous;\n    }\n    /** Gets the lineStyle for a graphic inside a DataWindow */\n\n\n    get dwLineStyle() {\n      return this.model.LineStyle || DWSVGLineStyle.solid;\n    }\n\n    get lineThickness() {\n      return this.model.LineThickness || 2;\n    }\n\n    get lineWidth() {\n      return this.model.Position && this.model.Position.Width ? this.model.Position.Width : 0;\n    }\n\n    get svgStyle() {\n      switch (this.lineStyle) {\n        case LineStyle.continuous:\n          return SVGLineStyle.continuous;\n\n        case LineStyle.dash:\n          return SVGLineStyle.dash;\n\n        case LineStyle.dashdot:\n          return SVGLineStyle.dashdot;\n\n        case LineStyle.dashdotdot:\n          return SVGLineStyle.dashdotdot;\n\n        case LineStyle.dot:\n          return SVGLineStyle.dot;\n\n        case LineStyle.transparent:\n          return SVGLineStyle.transparent;\n      }\n    }\n    /**\r\n     * @description\r\n     * Method to apply the svgstyle for the graphics components inside a DataWindows\r\n     */\n\n\n    get dwSVGStyle() {\n      switch (this.dwLineStyle) {\n        case DWSVGLineStyle.solid:\n          return SVGLineStyle.continuous;\n\n        case DWSVGLineStyle.dash:\n          return SVGLineStyle.dash;\n\n        case DWSVGLineStyle.dotted:\n          return SVGLineStyle.dot;\n\n        case DWSVGLineStyle.dashdot:\n          return SVGLineStyle.dashdot;\n\n        case DWSVGLineStyle.dashdotdot:\n          return SVGLineStyle.dashdotdot;\n\n        case DWSVGLineStyle.transparent:\n          return SVGLineStyle.transparent;\n      }\n    }\n\n  }\n\n  GraphicsComponent.ɵfac = function GraphicsComponent_Factory(t) {\n    return new (t || GraphicsComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8));\n  };\n\n  GraphicsComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: GraphicsComponent,\n    selectors: [[\"ng-component\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function GraphicsComponent_Template(rf, ctx) {},\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return GraphicsComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // /***********************************************************************\n\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet FocusManagerService = /*#__PURE__*/(() => {\n  class FocusManagerService {\n    constructor(updFocusedService) {\n      this.updFocusedService = updFocusedService;\n      this.focusRectangleRegex = / enableFocusRect/g;\n    }\n    /**\r\n     * Sets active component and set active context copy.\r\n     * @param component ActiveComponent\r\n     * @param context ActiveComponentContext\r\n     */\n\n\n    setActive(component, context) {\n      this.activeComponent = component;\n      this.activeComponentContext = context;\n    }\n    /**\r\n     * Sets old component and set old context copy.\r\n     * @param component OldComponent\r\n     * @param context OldComponentContext\r\n     */\n\n\n    setOld(component, context) {\n      this.oldComponent = component;\n      this.oldComponentContext = context;\n    }\n    /**\r\n     * Handle the focus action for the application\r\n     * @param component The new focused component\r\n     * @param data the event data parameter.\r\n     * @returns true if focus was applied.\r\n     */\n\n\n    focus(component, data) {\n      if (this.shouldAvoidFocus(component)) {\n        this.applyFocusClassToColumnAfterRefresh(component);\n        return;\n      } // Update old references\n\n\n      this.activeComponent ? this.setOld(this.activeComponent, this.activeComponentContext) : this.setOld(component, component.dataManagerContext); // Set new active component\n\n      this.setActive(component, component.dataManagerContext); // Call notify dataManager current row\n\n      this.activeComponent.notifyDataManagerCurrentRow();\n      this.updateFocusedControlCommand();\n      /* c8 ignore else */\n\n      if (this.oldComponent) {\n        /* c8 ignore else */\n        if (!this.isSameComponent(this.oldComponent, this.activeComponent, this.oldComponent.dataManagerContext, this.activeComponentContext)) {\n          this.removeFocusClass(this.oldComponent);\n          this.oldComponent.postBlur(data.event);\n          this.oldComponent.detectChanges();\n        }\n      }\n\n      this.updateNCCCTextBuffer();\n      this.applyFocusClass(this.activeComponent);\n      this.validateData(data);\n      this.triggerDMEvents(data);\n    }\n    /**\r\n     * Sends the Update focused control command\r\n     */\n\n\n    updateFocusedControlCommand() {\n      /* c8 ignore else */\n      if (this.shouldUpdateFocusedControlCommand()) {\n        const dmId = getDataManagerId(this.activeComponent);\n        this.updFocusedService.runner({\n          ctrlId: dmId != null ? dmId : this.activeComponent.id\n        });\n      }\n    }\n    /**\r\n     * Verify is the update focused control command should be send to the server\r\n     * Only when it is a component inside the window or a datamanager that gets the focus\r\n     * but excluding the columns\r\n     * @returns true to send it otherwise false\r\n     */\n\n\n    shouldUpdateFocusedControlCommand() {\n      return (!this.isColumnControlComponentInstance(this.activeComponent) || getDataManagerId(this.oldComponent) !== getDataManagerId(this.activeComponent)) && !this.activeComponent.isColumnInsideDDDW() && this.updFocusedService != null;\n    }\n    /**\r\n     * Validates if focus should be applied to component\r\n     * @param component Component to validate\r\n     */\n\n\n    shouldAvoidFocus(component) {\n      return this.isSameComponent(component, this.activeComponent, component.dataManagerContext, this.activeComponentContext, true) || this.disableTrigger || component.isColumnInsideDDDW();\n    }\n    /**\r\n     * Determines whether column control component instance is\r\n     * @param component\r\n     * @returns true if column control component instance\r\n     */\n\n\n    isColumnControlComponentInstance(component) {\n      return component instanceof ColumnControlComponent;\n    }\n    /**\r\n     * Determines if focus classes should be applied after refresh. The classes\r\n     * are applied only if the component is an instance of column component and\r\n     * it is the same column with the focus before refresh and it is not inside\r\n     *  of a DDDW\r\n     * @param component Component to be validated.\r\n     * @returns true if apply focus to column after refresh otherwise false.\r\n     */\n\n\n    shouldApplyFocusToColumnAfterRefresh(component) {\n      return this.isColumnControlComponentInstance(component) && !component.isColumnInsideDDDW() && component.isFocusable() && this.isSameComponent(component, this.activeComponent, component.dataManagerContext, this.activeComponentContext);\n    }\n    /**\r\n     * Trigger data manager events if required\r\n     * @param data the focus event data\r\n     */\n\n\n    triggerDMEvents(data) {\n      // Is it a different DataManager?\n      if ((data.event?.isTrusted || data.event.event?.isTrusted) && getDataManagerId(this.oldComponent) !== getDataManagerId(this.activeComponent)) {\n        if (this.oldComponent) {\n          this.oldComponent.emitDataManagerEvent('loseFocusDM', data);\n        }\n\n        this.activeComponent.emitDataManagerEvent('getfocus', data);\n      }\n    }\n    /**\r\n     * Handle the focus In events\r\n     * Sets the new element as focused\r\n     * @param component the component instance that whose focus event will be called\r\n     * @note ***Please note that there is a special case when the focus must be applied to a column\r\n     * that it is not focusable but is inside of a row where all the columns are not accessible by\r\n     * TabSequence***.\r\n     */\n\n\n    applyFocusClass(component) {\n      /* c8 ignore else */\n      if (component) {\n        const event = {\n          target: this.activeComponent,\n          context: this.activeComponentContext\n        };\n\n        if (component.isFocusable()) {\n          component.focusIn(event);\n\n          if (component instanceof ColumnControlComponent) {\n            this.applyFocusHighlightRect(component, true);\n          }\n        } else if (isSingleColumn(component)) {\n          event.singleColumn = true;\n          component.focusIn(event);\n        }\n      }\n    }\n    /**\r\n     * Handle the focus Out events\r\n     * Sets the new element as focused\r\n     * @param target the html element that will be focused\r\n     * @param component the component instance that whose focus event will be called\r\n     */\n\n\n    removeFocusClass(component) {\n      /* c8 ignore else */\n      if (component) {\n        const event = {\n          target: this.oldComponent,\n          context: this.oldComponentContext\n        };\n        component.focusOut(event);\n        this.applyFocusHighlightRect(component, false);\n        this.oldComponent.removeHighLight();\n        this.oldComponent.removeActiveClass();\n      }\n    }\n    /**\r\n     * Applies focus highlight rectangle classes.\r\n     * @param component Component to apply focus rectangle classes.\r\n     * @param apply Whether true, it applies the classes and false it removes the classes.\r\n     */\n\n\n    applyFocusHighlightRect(component, apply) {\n      if (component.class && !component.isContainer) {\n        if (apply) {\n          /* c8 ignore else */\n          if (this.shouldApplyFocusRectControl(component)) {\n            component.class = component.class.concat(` ${BaseControlBaseComponent.enableFocusRectCssClass}`);\n          }\n        } else {\n          component.class = component.class.replace(this.focusRectangleRegex, '');\n        }\n      }\n    }\n    /**\r\n     * This is to determine if the control should apply the focusRect style\r\n     * @param component\r\n     * @returns true if the control shpuld apply focus rec\r\n     */\n\n\n    shouldApplyFocusRectControl(component) {\n      /* Scenarios\r\n       1) if the control is a wm-dw-radio the focusRect style should be applied even if it is inside a window or datamanager or\r\n          datawindow. This component does not includes the focusRectangle prop\r\n       2) if the control is inside a ColumnControlComponent and the focusRectangle property is true\r\n       */\n      return component instanceof ColumnControlComponent && (component.focusRectangle || component.constructor.name === 'DwRadioButtonComponent') && component.class.indexOf(BaseControlBaseComponent.enableFocusRectCssClass) === -1;\n    }\n    /**\r\n     * Applies focus class to column after refresh data by a dirty\r\n     * flag in DataManager.\r\n     * @param component Column control component.\r\n     */\n\n\n    applyFocusClassToColumnAfterRefresh(component) {\n      if (this.shouldApplyFocusToColumnAfterRefresh(component)) {\n        component.applyHighlightClasses();\n        this.applyFocusHighlightRect(component, true);\n      }\n    }\n    /**\r\n     * Updates NotifyCurrentControlChanging flag when active component\r\n     * is inside of a DataManager\r\n     */\n\n\n    updateNCCCTextBuffer() {\n      if (getDataManagerId(this.activeComponent)) {\n        this.activeComponent['dataManagerEmitter'].currentTextBufferService.preventNotifyCurrentControlChanging = false;\n      }\n    }\n    /**\r\n     * Clears current focused component\r\n     */\n\n\n    clearFocusedComponent() {\n      this.activeComponent = undefined;\n      this.oldComponent = undefined;\n    }\n\n    validateData(data) {\n      if (!data.event) {\n        data.event = {\n          target: this.activeComponent,\n          context: this.activeComponentContext\n        };\n      }\n    }\n    /**\r\n     * Clears focus of current application.\r\n     */\n\n\n    clearFocus() {\n      /* c8 ignore else */\n      if (this.activeComponent && document.activeElement && document.activeElement !== document.body) {\n        this.activeComponent.removeHighLight();\n        this.activeComponent.removeActiveClass();\n        this.applyFocusHighlightRect(this.activeComponent, false);\n        this.activeComponent.prepareClearFocusAction();\n        this.activeComponent.focusApplied = true;\n        document.activeElement.blur();\n        this.activeComponent.focusApplied = false;\n      }\n    }\n    /**\r\n     * Determines whether active component is inside of data manager with\r\n     * id pass as parameter.\r\n     * @param dataManagerId DataManager id to be validated.\r\n     * @returns true if active component is inside of data manager.\r\n     */\n\n\n    isActiveComponentInDataManager(dataManagerId) {\n      return this.activeComponent && dataManagerId && getDataManagerId(this.activeComponent) === dataManagerId;\n    }\n    /**\r\n     * Determines whether column pass as parameter is the active component of\r\n     * FocusManagerService.\r\n     * @param column Column to be validated.\r\n     * @returns true if column is the active component\r\n     */\n\n\n    isThisColumnTheActiveComponent(column) {\n      return this.activeComponent && areColumns(this.activeComponent, column) && this.isSameComponentColumn(this.activeComponent, column, this.activeComponentContext, column.dataManagerContext);\n    }\n    /**\r\n     * Determines whether component pass as parameter is the active component.\r\n     * @param component Component to be validated.\r\n     * @returns true if component the active component\r\n     */\n\n\n    isThisComponentTheActiveComponent(component) {\n      return this.activeComponent && this.isSameComponent(this.activeComponent, component, this.activeComponentContext, component.dataManagerContext);\n    }\n    /**\r\n     * Returns a column component if activeComponent is defined and it\r\n     * is an instance of ColumnControlComponent\r\n     * @returns active component column.\r\n     */\n\n\n    getActiveComponentColumn() {\n      return this.activeComponent && this.activeComponent instanceof ColumnControlComponent ? this.activeComponent : null;\n    }\n    /**\r\n     * Determines whether the first component (comp1) is the\r\n     * same that the second component (comp2), it compares id and\r\n     * DataManager contexts when they are columns\r\n     * @param comp1 First component to be compared\r\n     * @param comp2 Second component to be compared\r\n     * @param context1 First DataManager context\r\n     * @param context2 Second DataManager context\r\n     * @param [assign] Optional parameter to determine whether the comp1 should be\r\n     * assign as ActiveComponent\r\n     * @returns true if same component\r\n     */\n\n\n    isSameComponent(comp1, comp2, context1, context2, assign = false) {\n      if (comp1 && comp2) {\n        return areColumns(comp1, comp2) ? this.isSameComponentColumn(comp1, comp2, context1, context2, assign) : comp1.id === comp2.id;\n      }\n\n      return false;\n    }\n    /**\r\n     * Determines whether the first column (comp1) is the same than the second\r\n     * column (comp2)\r\n     * @param comp1 First column to be compared\r\n     * @param comp2 Second column to be compared\r\n     * @param context1 First DataManager context\r\n     * @param context2 Second DataManager context\r\n     * @param [assign] Optional parameter to determine whether the comp1 should be\r\n     * assign as ActiveComponent\r\n     * @returns true if same column\r\n     */\n\n\n    isSameComponentColumn(comp1, comp2, context1, context2, assign = false) {\n      if (context1.dataManagerId === context2.dataManagerId && context1.rowIndex === context2.rowIndex && comp1.id === comp2.id) {\n        if (assign) {\n          // There are some cases where the column is the same, however the angular component\n          // is outdated because the column components are being reused. This happens when the\n          // DataManager is multi-row and the current column is shifted or updated in the same\n          // visible page to a different component instance.\n          this.setActive(comp1, context1);\n        }\n\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n  }\n\n  FocusManagerService.ɵfac = function FocusManagerService_Factory(t) {\n    return new (t || FocusManagerService)(i0.ɵɵinject(UpdateFocusedControlService, 8));\n  };\n\n  FocusManagerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: FocusManagerService,\n    factory: FocusManagerService.ɵfac,\n    providedIn: 'root'\n  });\n  return FocusManagerService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction isSingleColumn(component) {\n  return component instanceof ColumnControlComponent && ColumnControlComponent.allColumnsAreDisabledByTabSequence(component);\n}\n\nfunction getDataManagerId(comp) {\n  return comp && comp['dataManagerEmitter'] ? comp['dataManagerEmitter'].currentDataManagerId : undefined;\n}\n\nfunction areColumns(comp1, comp2) {\n  return comp1.dataManagerContext && comp2.dataManagerContext;\n}\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet WindowFocusElementService = /*#__PURE__*/(() => {\n  class WindowFocusElementService {\n    /**\r\n     * set the Focus element into the service\r\n     * @param component\r\n     */\n    focusElement(component) {\n      this.lastfocusElement = component;\n    }\n    /**\r\n     * Gets window focus element\r\n     * @returns window focus element\r\n     */\n\n\n    getWindowFocusElement() {\n      return this.lastfocusElement;\n    }\n\n  }\n\n  WindowFocusElementService.ɵfac = function WindowFocusElementService_Factory(t) {\n    return new (t || WindowFocusElementService)();\n  };\n\n  WindowFocusElementService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: WindowFocusElementService,\n    factory: WindowFocusElementService.ɵfac,\n    providedIn: 'root'\n  });\n  return WindowFocusElementService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet FocusableDirective = /*#__PURE__*/(() => {\n  class FocusableDirective {\n    constructor(element, view, render, focusManagerService, cdRef, windowFocusElementService, mainTabOrderService) {\n      this.element = element;\n      this.view = view;\n      this.render = render;\n      this.focusManagerService = focusManagerService;\n      this.cdRef = cdRef;\n      this.windowFocusElementService = windowFocusElementService;\n      this.mainTabOrderService = mainTabOrderService;\n      /**\r\n       * String Array with kendo classes available to focus\r\n       */\n\n      this.kClasses = '.k-input, .k-textbox, .k-textarea, .k-radio-label, .k-checkbox, .k-button';\n    }\n\n    ngAfterViewChecked() {\n      this.applyFocus();\n    }\n    /*Handle the focusIn event */\n\n\n    focusHandler(event, rowclicked, datamanagercontext) {\n      const domEvent = event ? event : window.event;\n      const component = this.hostComponent;\n      /* c8 ignore else */\n\n      if (this.windowFocusElementService && !component.isColumnInsideDDDW()) {\n        this.windowFocusElementService.focusElement(component);\n      }\n\n      const editable = component.editable;\n      const applySelection = component.applySelection();\n\n      if (editable && !applySelection) {\n        editable.selectionEnd = 0; // Set caret (cursor) to start of input\n      }\n\n      const data = new EventData(domEvent, component.id, component.mapperId);\n      this.focusManagerService.focus(component, data);\n\n      if (applySelection) {\n        component.selectText();\n      }\n\n      if (domEvent && domEvent.isTrusted === false && !component.isColumnInsideDDDW()) {\n        this.applyFocusToInnerInput(component);\n      }\n    }\n    /**\r\n     * Hosts listener for focus in to validate that event no being\r\n     * transmitted to parent elements.\r\n     * @param event Event parameter\r\n     */\n\n\n    focusInHandler(event) {\n      /* c8 ignore else */\n      if (this.hostComponent && this.hostComponent.managePropagation) {\n        this.hostComponent.managePropagation(event);\n      }\n    }\n    /**\r\n     * FocusOut Handler\r\n     * Used to validate fields marked as required\r\n     * @param event\r\n     */\n\n\n    focusOutHandler(event) {\n      // Check if currentComponent is a column or component contained inside\n      // of DataManager\n\n      /* c8 ignore else */\n      if (this.hostComponent instanceof ColumnControlComponent) {\n        if (event.target && event.relatedTarget) {\n          this.manageFocusOutCases(event);\n        } // When is cycling tab it works as it never leaves the DataManager.\n        // So probably relatedTarget is going to be null so check the isCyclingTab\n        // separately.\n\n\n        if (this.mainTabOrderService.isCyclingTab) {\n          this.validateColumn(event);\n        }\n      }\n    }\n    /**\r\n     * Apply focus to inner input\r\n     * @param component The component to apply the focus\r\n     */\n\n\n    applyFocusToInnerInput(component) {\n      if (component.isContainer) {\n        return;\n      }\n      /* c8 ignore else */\n\n\n      if (this.focusManagerService.pendingUpdateFocus) {\n        clearTimeout(this.focusManagerService.pendingUpdateFocus);\n      }\n\n      this.focusManagerService.pendingUpdateFocus = setTimeout(() => {\n        this.applyFocusInner(component);\n      }, 0);\n    }\n    /**\r\n     * Determines whether a component needs to be focus\r\n     */\n\n\n    applyFocus() {\n      const component = this.hostComponent;\n\n      if (this.isFocusedComponent(component)) {\n        component.isFocused = false;\n        setTimeout(() => {\n          component.applyFocus();\n          component.detectChanges();\n        }, 100);\n      }\n    }\n    /**\r\n     * validate if the element is Focus from the model and have a DOM element\r\n     * @param component component to check the focus status\r\n     */\n\n\n    isFocusedComponent(component) {\n      return component.shouldApplyChangeFocusedControlCommand() && component.focusableElement;\n    }\n\n    validateColumn(event) {\n      /* c8 ignore else */\n      if (shouldValidateColumn(this.hostComponent, event)) {\n        validateColumn(this.hostComponent, event);\n      }\n    }\n    /**\r\n     * Manages focus out cases to determine when value should be validate or\r\n     * TextBuffer must be updated\r\n     * @param event Event argument.\r\n     */\n\n\n    manageFocusOutCases(event) {\n      // Check if column is focusing out to another element inside or\n      // outside of current DataManager\n      const dataManager = event.target.closest('.dataManager');\n\n      if (dataManager && dataManager.contains(event.relatedTarget)) {\n        // Check if it is a DDDW popup inside of the same DataManager\n\n        /* c8 ignore else */\n        if (!event.relatedTarget.closest('.dddw-content')) {\n          this.validateColumn(event);\n        }\n      } else {\n        // It must be inside of the same window\n        const currentWindow = event.target.closest('wm-window');\n        /* c8 ignore else */\n\n        if (currentWindow && currentWindow.contains(event.relatedTarget)) {\n          // Update text buffer without validations, if validation is false\n          // updateBuffer with flag allowInvalidValues with true\n          const validation = this.hostComponent.applyFormat(true);\n          this.hostComponent.updateBuffer(false, true, !validation);\n        }\n      }\n    }\n    /**\r\n     * Applies focus to inner element kClasses\r\n     * @param component Component to apply focus\r\n     */\n\n\n    applyFocusInner(component) {\n      const innerElement = component.el?.nativeElement.querySelector(this.kClasses);\n      /* c8 ignore else */\n\n      if (innerElement && innerElement !== document.activeElement) {\n        this.focusManagerService.disableTrigger = true;\n        innerElement.focus();\n        this.focusManagerService.disableTrigger = false;\n      }\n\n      this.notifyDataManagerGridBusyLoader(component);\n    }\n    /**\r\n     * Notifies to data manager grid when focus was applied to remove busy loader\r\n     * @param component The column control component\r\n     */\n\n\n    notifyDataManagerGridBusyLoader(component) {\n      /* c8 ignore else */\n      if (component instanceof ColumnControlComponent && component.isOnGrid) {\n        component.emitGridBusyLoader();\n      }\n    }\n\n  }\n\n  FocusableDirective.ɵfac = function FocusableDirective_Factory(t) {\n    return new (t || FocusableDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(FocusManagerService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(WindowFocusElementService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8));\n  };\n\n  FocusableDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: FocusableDirective,\n    selectors: [[\"\", \"wmFocusable\", \"\"]],\n    hostBindings: function FocusableDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"focus\", function FocusableDirective_focus_HostBindingHandler($event) {\n          return ctx.focusHandler($event);\n        })(\"focusin\", function FocusableDirective_focusin_HostBindingHandler($event) {\n          return ctx.focusInHandler($event);\n        })(\"focusout\", function FocusableDirective_focusout_HostBindingHandler($event) {\n          return ctx.focusOutHandler($event);\n        });\n      }\n    },\n    inputs: {\n      isFocused: \"isFocused\",\n      hostComponent: \"hostComponent\"\n    }\n  });\n  return FocusableDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet MaskValidatorDirective = /*#__PURE__*/(() => {\n  class MaskValidatorDirective {\n    constructor(view, element, renderer) {\n      this.view = view;\n      this.element = element;\n      this.renderer = renderer;\n    }\n\n    ngAfterViewInit() {\n      const comp = this.hostComponent;\n      this.renderer.setStyle(this.element.nativeElement, 'color', comp.textColor);\n    }\n    /*Handle the blur event */\n\n\n    blurHandler(event) {\n      const comp = this.hostComponent;\n      const maskFormatClass = comp;\n      WMLogger.instance().info('mask: ', maskFormatClass);\n      const validData = comp.displayValue === comp.modelData || !comp.displayValue ? maskFormatClass.applyFormatWithOutValidation() : maskFormatClass.applyFormat(); // make validations\n\n      const regFormat = new RegExp(/ invalidFormat/g);\n\n      if (!validData && !comp.disabled) {\n        // Add invalidFormat class\n        if (maskFormatClass.class) {\n          if (!regFormat.test(maskFormatClass.class)) {\n            maskFormatClass.class = maskFormatClass.class.concat(' invalidFormat');\n          }\n        } else {\n          maskFormatClass.class = '';\n        }\n\n        Utils.preventPropagation(event);\n      } else {\n        // Remove invalidFormat class and continue\n        maskFormatClass.class = maskFormatClass.class ? maskFormatClass.class.replace(regFormat, '') : ''; // Remove previous class to avoid dirty colors after leave column component\n\n        this.renderer.removeStyle(this.element.nativeElement, 'color');\n        this.renderer.setStyle(this.element.nativeElement, 'color', comp.color);\n      }\n\n      comp.detectChanges();\n    }\n\n    focusHandler(event) {\n      const comp = this.hostComponent;\n\n      if (Utils.isDefaultValue(comp.class, '').indexOf('invalidFormat') === -1 && !comp.disabled) {\n        this.renderer.setStyle(this.element.nativeElement, 'color', comp.defaultColor);\n        const component = this.hostComponent;\n        component.applyEditFormat();\n        return;\n      }\n\n      Utils.preventPropagation(event);\n    }\n\n  }\n\n  MaskValidatorDirective.ɵfac = function MaskValidatorDirective_Factory(t) {\n    return new (t || MaskValidatorDirective)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n\n  MaskValidatorDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: MaskValidatorDirective,\n    selectors: [[\"\", \"wmMaskValidator\", \"\"]],\n    hostBindings: function MaskValidatorDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"focusout\", function MaskValidatorDirective_focusout_HostBindingHandler($event) {\n          return ctx.blurHandler($event);\n        })(\"focus\", function MaskValidatorDirective_focus_HostBindingHandler($event) {\n          return ctx.focusHandler($event);\n        });\n      }\n    },\n    inputs: {\n      hostComponent: \"hostComponent\"\n    }\n  });\n  return MaskValidatorDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet UCalendarComponent = /*#__PURE__*/(() => {\n  class UCalendarComponent extends BaseDateTimeComponent {\n    constructor(\n    /* c8 ignore next 8 */\n    changeDetectorDW, rendererDW, elementDW, lengthConverter, emitterDW, emitterColumnDW, maskFormat2, dataMTabSequence) {\n      super(changeDetectorDW, rendererDW, elementDW, lengthConverter, emitterDW, maskFormat2, dataMTabSequence);\n      this.changeDetectorDW = changeDetectorDW;\n      this.rendererDW = rendererDW;\n      this.elementDW = elementDW;\n      this.emitterDW = emitterDW;\n      this.emitterColumnDW = emitterColumnDW;\n      this.maskFormat2 = maskFormat2;\n      this.dataMTabSequence = dataMTabSequence;\n      this.componentCreated = new EventEmitter();\n      this.background = 'background-color';\n    }\n\n    ngOnInit() {\n      super.ngOnInit();\n      this.componentCreated.emit(this);\n      this.defaultUcalendarValues();\n    }\n    /**\r\n     * Overrides Handler for the blur event\r\n     * If the user type a partial value the control does not trigger\r\n     * the valueChange action so this event will review if a change\r\n     * occurs and trigger the expected event\r\n     * @param evt: the event object\r\n     */\n\n\n    blurHandler(event) {\n      event = event ? event : {};\n\n      if (!this.value) {\n        const dateInput = this.dropdownCalendar ? this.datePickerComponent.input : this.dateInputComponent;\n        const kendoDate = dateInput.kendoDate;\n        const maskValues = DateTimeFunctions.generateFormatPlaceholder(this.mask);\n        const modifiedValues = DateTimeFunctions.returnKendoModifiedValues(maskValues, kendoDate);\n\n        if (modifiedValues.dirty()) {\n          const dataEvent = new EventData(event, this.id, this.mapperId);\n          dataEvent.args = {\n            itemError: dateInput.currentValue,\n            column: this\n          };\n          this.emitDataManagerEvent('itemError', dataEvent);\n          Utils.preventPropagation(event);\n        }\n      }\n\n      this.itemChangeHandler(event, true);\n    }\n    /**\r\n     * PostBlur event is called by the focusManager\r\n     * when the old and the active component are different.\r\n     * the idea is to clean up the control before leaving it.\r\n     * Override the method from the BaseComponent\r\n     * @param data data to be used in the postBlur\r\n     */\n\n\n    postBlur(data) {\n      this.isOpened = false;\n    }\n    /**\r\n     * prepareClearFocusAction event is called by the focusService.clearFocus\r\n     * before the blur event\r\n     * Override the method from the BaseComponent\r\n     * @param data data to be used in the prepareClearFocusAction\r\n     */\n\n\n    prepareClearFocusAction(data) {\n      if (this.dropdownCalendar) {\n        this.isOpened = this.datePickerComponent.isOpen;\n      }\n    }\n    /**\r\n     * Focus handler of the datePickerComponent\r\n     */\n\n\n    focusHandler() {\n      if (this.isOpened) {\n        this.datePickerComponent.toggle(true);\n      }\n\n      this.isOpened = false;\n    }\n    /**\r\n     * Applies some styling to inner elements in order to correctly reflect\r\n     * some styling attributes that are applied to the current component\r\n     * some of them need to be applied to the inner span or the inner date-input-wrap\r\n     * like border and background-color\r\n     * IMPORTANT: when we set the border to be none we are also hiding the dropdown button\r\n     * since this is a customized user-control to support the pfc hiding feature\r\n     */\n\n\n    ngAfterViewChecked() {\n      /* c8 ignore else */\n      if (this.el.nativeElement) {\n        // This element is the span should receive background-color styling\n        const inputWrap = this.el.nativeElement.querySelector('.k-dateinput-wrap'); // This element has the border settings for the widget\n\n        const dateInput = this.el.nativeElement.querySelector('.k-widget .k-dateinput'); // This is the selector dropdown button and should be hidden on border none\n\n        const selectorButton = this.el.nativeElement.querySelector('.k-select');\n\n        if (inputWrap && this.backColor) {\n          const backgroundColor = this.background;\n          const color = this.style[backgroundColor] || this.backColor;\n          this.renderer.setStyle(inputWrap, this.background, color);\n        }\n\n        if (inputWrap && this.textColor) {\n          this.renderer.setStyle(inputWrap, 'color', this.textColor);\n        }\n\n        if (dateInput && this.borderStyle) {\n          this.renderer.setStyle(dateInput, 'border', this.borderStyle);\n\n          if (this.borderStyle === 'none' && this.protect && selectorButton) {\n            this.renderer.setStyle(selectorButton, 'display', 'none');\n          }\n        }\n      }\n    }\n    /**\r\n     * Replaces kendoCalendar icon into an arrow.\r\n     */\n\n\n    ngAfterViewInit() {\n      const defaultIcon = this.elementDW.nativeElement.querySelector('.k-icon');\n      /* c8 ignore else */\n\n      if (defaultIcon) {\n        this.rendererDW.removeClass(defaultIcon, 'k-i-calendar');\n        this.rendererDW.addClass(defaultIcon, 'k-i-arrow-s');\n      }\n    }\n    /**\r\n     * Initialize default u_calendar values\r\n     */\n\n\n    defaultUcalendarValues() {\n      this.model.Ddcalendar = true;\n      this.model.Mask = this.model && this.model.Mask ? this.model.Mask : moment.localeData().longDateFormat('L').toLocaleLowerCase().replace('mm', 'MM');\n    }\n    /**\r\n     * Method to allow each component to manage its own\r\n     * display property\r\n     */\n\n\n    getStyleDisplay() {\n      return 'block';\n    }\n\n  }\n\n  UCalendarComponent.ɵfac = function UCalendarComponent_Factory(t) {\n    return new (t || UCalendarComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MaskFormatService), i0.ɵɵdirectiveInject(DataManagerTabSequenceService, 8));\n  };\n\n  UCalendarComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: UCalendarComponent,\n    selectors: [[\"wm-dw-u-calendar\"]],\n    outputs: {\n      componentCreated: \"componentCreated\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 2,\n    vars: 2,\n    consts: [[\"wmPBControls\", \"\", \"wmFocusable\", \"\", \"wmMaskValidator\", \"\", 3, \"ngClass\", \"readonly\", \"formatPlaceholder\", \"placeholder\", \"value\", \"format\", \"hostComponent\", \"ngStyle\", \"spinners\", \"keyup\", \"valueChange\", \"click\", \"mousedown\", \"blur\", \"keydown.tab\", \"keydown.shift.tab\", 4, \"ngIf\"], [\"wmPBControls\", \"\", \"wmFocusable\", \"\", \"wmMaskValidator\", \"\", 3, \"ngClass\", \"readonly\", \"formatPlaceholder\", \"placeholder\", \"value\", \"format\", \"hostComponent\", \"ngStyle\", \"valueChange\", \"keyup\", \"focus\", \"click\", \"mousedown\", \"blur\", \"keydown.tab\", \"keydown.shift.tab\", 4, \"ngIf\"], [\"wmPBControls\", \"\", \"wmFocusable\", \"\", \"wmMaskValidator\", \"\", 3, \"ngClass\", \"readonly\", \"formatPlaceholder\", \"placeholder\", \"value\", \"format\", \"hostComponent\", \"ngStyle\", \"spinners\", \"keyup\", \"valueChange\", \"click\", \"mousedown\", \"blur\", \"keydown.tab\", \"keydown.shift.tab\"], [\"focusElement\", \"\"], [\"wmPBControls\", \"\", \"wmFocusable\", \"\", \"wmMaskValidator\", \"\", 3, \"ngClass\", \"readonly\", \"formatPlaceholder\", \"placeholder\", \"value\", \"format\", \"hostComponent\", \"ngStyle\", \"valueChange\", \"keyup\", \"focus\", \"click\", \"mousedown\", \"blur\", \"keydown.tab\", \"keydown.shift.tab\"]],\n    template: function UCalendarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, UCalendarComponent_kendo_dateinput_0_Template, 2, 9, \"kendo-dateinput\", 0);\n        i0.ɵɵtemplate(1, UCalendarComponent_kendo_datepicker_1_Template, 2, 8, \"kendo-datepicker\", 1);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !ctx.dropdownCalendar);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.dropdownCalendar);\n      }\n    },\n    directives: [i5.DateInputComponent, i5.DatePickerComponent, i6.NgIf, ControlsPowerDirective, FocusableDirective, MaskValidatorDirective, i6.NgClass, i6.NgStyle],\n    styles: [\".k-datepicker .k-select{width:auto!important}\"]\n  });\n  return UCalendarComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet ResizeDataManagerService = /*#__PURE__*/(() => {\n  class ResizeDataManagerService {\n    constructor() {\n      this.windowResizeEmitted = new Subject();\n      this.dataManagerResizeEmitted = new Subject();\n    }\n    /**\r\n     * Sends window resize message\r\n     * @param data Message data\r\n     */\n\n\n    emitWindowResize(data) {\n      this.windowResizeEmitted.next(data);\n    }\n    /**\r\n     * Sends data manager resize message\r\n     * @param data Message data\r\n     */\n\n\n    emitDataManagerResize(data) {\n      this.dataManagerResizeEmitted.next(data);\n    }\n    /**\r\n     * Gets current subscribers list to window\r\n     */\n\n\n    get events() {\n      return this.windowResizeEmitted.asObservable();\n    }\n    /**\r\n     * Gets current subscribers list to datamanager\r\n     */\n\n\n    get eventsDM() {\n      return this.dataManagerResizeEmitted.asObservable();\n    }\n\n  }\n\n  ResizeDataManagerService.ɵfac = function ResizeDataManagerService_Factory(t) {\n    return new (t || ResizeDataManagerService)();\n  };\n\n  ResizeDataManagerService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ResizeDataManagerService,\n    factory: ResizeDataManagerService.ɵfac,\n    providedIn: 'root'\n  });\n  return ResizeDataManagerService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nclass CalculatorHelper {\n  /**\r\n   * Gets result\r\n   * Evaluate a given expression\r\n   * @param expression The expression to be evaluated, must be valid JS\r\n   * @returns result a numberic value\r\n   */\n  static getResult(expression) {\n    // tslint:disable-next-line: no-eval\n    return expression ? eval(expression) : 0;\n  }\n\n}\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet UCalculatorComponent = /*#__PURE__*/(() => {\n  class UCalculatorComponent extends DropDownBaseComponent {\n    constructor(\n    /* c8 ignore next 8 */\n    changeDetector, maskFormat2, renderer2, lengthConverter, element, emitter, resizeDataManagerService, dataMTSequenceService) {\n      super(changeDetector, maskFormat2, renderer2, element, lengthConverter, emitter, dataMTSequenceService);\n      this.changeDetector = changeDetector;\n      this.maskFormat2 = maskFormat2;\n      this.renderer2 = renderer2;\n      this.element = element;\n      this.emitter = emitter;\n      this.resizeDataManagerService = resizeDataManagerService;\n      this.dataMTSequenceService = dataMTSequenceService;\n      this.componentCreated = new EventEmitter();\n      this.subText = '';\n      this.mainText = '';\n      this.operator = '';\n      this.calculationString = '0';\n      this.answered = false;\n      this.operatorSet = false;\n      this.clearSubtext = false;\n      this.mainTextDirty = false;\n      /**\r\n       * Is used to validate if popup is opened\r\n       */\n\n      this.show = false;\n    }\n\n    ngOnInit() {\n      this.componentCreated.emit(this);\n      this.maskFormat2.initFormatArrays(this.format, this.validateColumn(this.columnId), `${this.columnId}`);\n      this.modelData = parseFloat(this.logicValue);\n      this.applyFormatTo(this.modelData, this.validateColumn(this.columnId), this.validateLengthColumn(this.columnId));\n      this.detectChanges();\n    }\n\n    ngAfterViewInit() {\n      super.ngAfterViewInit();\n      this.removeOrApplyArrow(true);\n    }\n    /**\r\n     * Use to handle popUp open and close\r\n     */\n\n\n    onToggle(event) {\n      if (this.disabled) {\n        this.show = false;\n        return;\n      }\n\n      this.show = !this.show;\n      this.detectChanges();\n    }\n    /**\r\n     * @description\r\n     * Method to handle the click on the keys of the calculator\r\n     * @param event the click event\r\n     * @param key the string of the clicked key\r\n     */\n\n\n    pressOperatorKey(event, key) {\n      this.operatorSet = false;\n      const lastKey = this.mainText[this.mainText.length - 1];\n\n      if (this.isOperator(lastKey)) {\n        this.operatorSet = true;\n      }\n\n      if (this.operatorSet || this.mainText === '') {\n        return;\n      }\n\n      this.operand1 = parseFloat(this.mainText);\n      this.operator = key;\n      this.operatorSet = true; // This is to operate consecutively if is possible when an operator is pressed\n      // Exmaple: '1 + 1 +' will be equal to 2.\n\n      this.operand2 = parseFloat(this.mainText.split(this.operator)[1]);\n\n      if (this.operand2) {\n        this.getAnswer(event);\n        this.mainText = this.subText = this.calculationString;\n        this.show = true;\n      }\n\n      this.pressKey(event, key);\n    }\n\n    pressKey(event, key) {\n      this.mainText += key;\n\n      if (this.isOperator(key)) {\n        this.clearSubtext = true;\n        this.mainTextDirty = false;\n      } else if (this.clearSubtext) {\n        this.clearSubtext = false;\n        this.subText = key;\n      } else {\n        this.subText += key;\n\n        if (this.mainTextDirty) {\n          this.mainText = this.subText;\n          this.mainTextDirty = false;\n        }\n      }\n\n      Utils.preventPropagation(event);\n    }\n\n    isOperator(key) {\n      return key && !!key.match(/^[\\/\\*\\-\\+]$/);\n    }\n    /**\r\n     * @description\r\n     * Method to clear the memory and values of the calculator\r\n     * @param event The click event\r\n     */\n\n\n    allClear(event) {\n      Utils.preventPropagation(event);\n      this.calculationString = this.mainText = this.subText = '';\n      this.operatorSet = false;\n      this.logicValue = this.modelData = this.calculationString;\n      this.detectChanges();\n    }\n    /**\r\n     * @description\r\n     * Method to get the answer for operations of the calculator\r\n     * @param event The click event\r\n     */\n\n\n    getAnswer(event) {\n      try {\n        const result = this.operatorSet ? CalculatorHelper.getResult(this.mainText) : CalculatorHelper.getResult(this.subText);\n        this.calculationString = result ? result.toString() : '0';\n        this.modelData = parseFloat(this.calculationString);\n        this.triggerItemChange(event);\n        this.mainText = this.calculationString;\n        this.subText = '';\n        this.operatorSet = false;\n        this.mainTextDirty = true;\n      } catch (error) {\n        this.calculationString = '0';\n        this.mainText = this.subText = '';\n      }\n\n      Utils.preventPropagation(event);\n      this.detectChanges();\n    }\n    /**\r\n     * Handles the change event\r\n     * @param event\r\n     */\n\n\n    itemChangeHandler(event) {\n      this.modelData = !!this.combobox ? this.combobox.text : this.logicValue;\n      this.triggerItemChange(event);\n    }\n    /**\r\n     * applies format to modelData and notifies changes to the server\r\n     * @param event\r\n     */\n\n\n    triggerItemChange(event) {\n      this.applyFormatTo(parseFloat(this.modelData), this.validateColumn(this.columnId), this.validateLengthColumn(this.columnId));\n      this.logicValue = this.modelData;\n      this.show = false;\n      const text = [this.modelData, this.logicValue];\n      const itemChangeEvent = {\n        text,\n        value: event\n      };\n      this.selectionChangeHandlerWithKeyPress(itemChangeEvent);\n    }\n\n  }\n\n  UCalculatorComponent.ɵfac = function UCalculatorComponent_Factory(t) {\n    return new (t || UCalculatorComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(MaskFormatService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(ResizeDataManagerService, 8), i0.ɵɵdirectiveInject(DataManagerTabSequenceService, 8));\n  };\n\n  UCalculatorComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: UCalculatorComponent,\n    selectors: [[\"wm-dw-u-calculator\"]],\n    outputs: {\n      componentCreated: \"componentCreated\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"tabindex\", \"click\", \"keydown.tab\", \"keydown.shift.tab\", 4, \"ngIf\"], [3, \"tabindex\", \"click\", \"keydown.tab\", \"keydown.shift.tab\"], [\"dwcontainer\", \"\"], [1, \"input-hidden\", 3, \"ngClass\", \"ngStyle\"], [\"anchor\", \"\"], [\"wmPBControls\", \"\", \"wmFocusable\", \"\", 1, \"cmb\", 3, \"ngStyle\", \"allowCustom\", \"clearButton\", \"ngClass\", \"readonly\", \"hostComponent\", \"value\", \"focus\", \"click\", \"valueChange\", \"change\"], [\"combobox\", \"\"], [\"class\", \"popup\", 3, \"anchor\", 4, \"ngIf\"], [1, \"popup\", 3, \"anchor\"], [1, \"dddw-content\"], [1, \"base\"], [1, \"maindisplay\"], [1, \"subdisplay\"], [1, \"keypad\"], [2, \"width\", \"100%\"], [\"colspan\", \"3\", 1, \"keys\", \"ackey\", 3, \"click\"], [\"colspan\", \"1\", 1, \"keys\", \"opkey\", 3, \"click\"], [1, \"keys\", \"numkey\", 3, \"click\"], [1, \"keys\", \"opkey\", 3, \"click\"], [\"colspan\", \"2\", 1, \"keys\", \"numkey\", 3, \"click\"], [1, \"keys\", \"equalkey\", 3, \"click\"]],\n    template: function UCalculatorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, UCalculatorComponent_div_0_Template, 8, 11, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.model);\n      }\n    },\n    directives: [i6$1.ComboBoxComponent, i3.PopupComponent, i6.NgIf, i6.NgClass, i6.NgStyle, ControlsPowerDirective, FocusableDirective],\n    styles: [\".base[_ngcontent-%COMP%]{background:#807b7b;width:100%}.maindisplay[_ngcontent-%COMP%]{background:lightgrey;height:100%;font-size:15px;text-align:right;font-family:Courier,monospace;overflow:auto}.subdisplay[_ngcontent-%COMP%]{border-bottom:1px solid black;height:30px;font-size:15px;overflow:auto;overflow-y:scroll}.keypad[_ngcontent-%COMP%]{height:66.6666666667%}.keys[_ngcontent-%COMP%]{margin:0;height:6px;width:15px;background:whitesmoke;color:#000;font-size:9px;text-align:center;cursor:pointer;opacity:.9;border-style:ridge;background-color:#fff;padding:2px}.keys[_ngcontent-%COMP%]:hover{opacity:1}.ackey[_ngcontent-%COMP%]{color:red;background-color:#fff}.equalkey[_ngcontent-%COMP%], .numkey[_ngcontent-%COMP%], .opkey[_ngcontent-%COMP%]{color:#000;background-color:#fff}.input-hidden[_ngcontent-%COMP%]{visibility:hidden!important;z-index:-1}\"],\n    changeDetection: 0\n  });\n  return UCalculatorComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DateTimeUCalendarComponent = /*#__PURE__*/(() => {\n  class DateTimeUCalendarComponent extends BaseDateTimeComponent {\n    /* c8 ignore start */\n    constructor(changeDetectorDW, rendererDW, elementDW, lengthConverter, emitterColumnDW, maskFormat2, dataMTSequenceService) {\n      super(changeDetectorDW, rendererDW, elementDW, lengthConverter, emitterColumnDW, maskFormat2, dataMTSequenceService);\n      this.changeDetectorDW = changeDetectorDW;\n      this.rendererDW = rendererDW;\n      this.elementDW = elementDW;\n      this.emitterColumnDW = emitterColumnDW;\n      this.maskFormat2 = maskFormat2;\n      this.dataMTSequenceService = dataMTSequenceService;\n      /* c8 ignore stop */\n\n      this.componentCreated = new EventEmitter();\n      /**\r\n       * Default mask value\r\n       */\n\n      this.defaultMask = 'M/d/y h:mm a';\n    }\n\n    ngOnInit() {\n      super.ngOnInit();\n      this.componentCreated.emit(this);\n    }\n    /**\r\n     * Handle the blur event\r\n     * If the user type a date but not type the time part\r\n     * the control not triggers the valueChange action so\r\n     * this event will review if a change occurs and trigger the\r\n     * expected event\r\n     * @param evt: the event object\r\n     */\n\n\n    blurHandler(evt) {\n      const typedDate = this.dateTimePickerComponent.input.inputValue.split(' ')[0];\n      const dateJS = parseDate(typedDate);\n\n      if (dateJS && dateJS.getFullYear() > 0 && !this.value) {\n        this.value = dateJS;\n        this.dateTimePickerComponent.value = this.value;\n        this.itemChangeHandler(undefined);\n      }\n    }\n    /**\r\n     * Returns the displayed value of the\r\n     * current component\r\n     * Overrides the original component behavior because this\r\n     * component uses a kendoDateTimePicker as display component\r\n     */\n\n\n    getValue() {\n      return this.dateTimePickerComponent ? this.dateTimePickerComponent.value : undefined;\n    }\n    /**\r\n     * Returns the displayed value of the\r\n     * current component\r\n     */\n\n\n    getDisplayValue() {\n      return this.dateTimePickerComponent ? formatDate(this.dateTimePickerComponent.value, this.mask) : undefined;\n    }\n\n    get mask() {\n      return this.model && this.model.Mask ? DateTimeFunctions.processPBDateTimeMaskFormat(this.model.Mask) : this.format ? DateTimeFunctions.processPBDateTimeMaskFormat(this.format) : this.defaultMask;\n    }\n\n  }\n\n  DateTimeUCalendarComponent.ɵfac = function DateTimeUCalendarComponent_Factory(t) {\n    return new (t || DateTimeUCalendarComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MaskFormatService), i0.ɵɵdirectiveInject(DataManagerTabSequenceService, 8));\n  };\n\n  DateTimeUCalendarComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: DateTimeUCalendarComponent,\n    selectors: [[\"wm-dw-date-time-u-calendar\"]],\n    viewQuery: function DateTimeUCalendarComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(DateTimePickerComponent, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dateTimePickerComponent = _t.first);\n      }\n    },\n    outputs: {\n      componentCreated: \"componentCreated\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 2,\n    vars: 9,\n    consts: [[\"wmPBControls\", \"\", \"wmFocusable\", \"\", \"wmMaskValidator\", \"\", 3, \"ngClass\", \"readonly\", \"formatPlaceholder\", \"placeholder\", \"value\", \"format\", \"hostComponent\", \"ngStyle\", \"valueChange\", \"blur\", \"keyup\", \"click\", \"mousedown\", \"keydown.tab\", \"keydown.shift.tab\"], [\"focusElement\", \"\"]],\n    template: function DateTimeUCalendarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"kendo-datetimepicker\", 0, 1);\n        i0.ɵɵlistener(\"valueChange\", function DateTimeUCalendarComponent_Template_kendo_datetimepicker_valueChange_0_listener($event) {\n          return ctx.value = $event;\n        })(\"blur\", function DateTimeUCalendarComponent_Template_kendo_datetimepicker_blur_0_listener($event) {\n          return ctx.blurHandler($event);\n        })(\"keyup\", function DateTimeUCalendarComponent_Template_kendo_datetimepicker_keyup_0_listener($event) {\n          return ctx.keyUpHandler($event);\n        })(\"valueChange\", function DateTimeUCalendarComponent_Template_kendo_datetimepicker_valueChange_0_listener($event) {\n          return ctx.itemChangeHandler($event);\n        })(\"click\", function DateTimeUCalendarComponent_Template_kendo_datetimepicker_click_0_listener($event) {\n          return ctx.clickColumn($event);\n        })(\"mousedown\", function DateTimeUCalendarComponent_Template_kendo_datetimepicker_mousedown_0_listener($event) {\n          return ctx.mouseDownHandler($event);\n        })(\"keydown.tab\", function DateTimeUCalendarComponent_Template_kendo_datetimepicker_keydown_tab_0_listener($event) {\n          return ctx.tabKeyHandler($event);\n        })(\"keydown.shift.tab\", function DateTimeUCalendarComponent_Template_kendo_datetimepicker_keydown_shift_tab_0_listener($event) {\n          return ctx.tabKeyHandler($event);\n        });\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngClass\", ctx.classHandler())(\"readonly\", ctx.disabled)(\"formatPlaceholder\", ctx.formatPlaceholder)(\"placeholder\", ctx.emptyPlaceHolder)(\"value\", ctx.value)(\"format\", ctx.mask)(\"hostComponent\", ctx)(\"ngStyle\", ctx.setMyStyle())(\"ngStyle\", ctx.setMyStyle());\n      }\n    },\n    directives: [i5.DateTimePickerComponent, ControlsPowerDirective, FocusableDirective, MaskValidatorDirective, i6.NgClass, i6.NgStyle],\n    styles: [\"\"]\n  });\n  return DateTimeUCalendarComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/* c8 ignore file */\n\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet DataBundle = /*#__PURE__*/(() => {\n  class DataBundle {\n    /**\r\n     * Constructs a new <c>DataBundle</c> object for the given array of data.\r\n     * @param data - an array with the following structure: [metadata object, column types, computed fields, rows]\r\n     */\n    constructor(data) {\n      this.data = data;\n    }\n\n    getOriginalData() {\n      return this.data;\n    }\n    /**\r\n     * Checks if this <c>DataBundle</c> object contains valid data or not.\r\n     * @returns true if this <c>DataBundle</c> object is valid data, false otherwise.\r\n     */\n\n\n    hasData() {\n      return this.data.length && this.data.length > 2;\n    }\n    /**\r\n     * Checks if this <c>DataBundle</c> object has rows or not.\r\n     * @returns true if this <c>DataBundle</c> object has rows, false otherwise.\r\n     */\n\n\n    hasRows() {\n      return this.getRows().length > 0;\n    }\n    /**\r\n     * Gets the first row contained by this <c>DataBundle</c> object.\r\n     * @returns an array of objects containing first row data or undefined if no rows.\r\n     */\n\n\n    getFirstRow() {\n      if (this.hasRows()) {\n        const rows = this.getRows();\n        return rows[0];\n      }\n\n      return undefined;\n    }\n    /**\r\n     * Gets the total items managed by this <c>DataBundle</c> object.  The total items are not currently\r\n     * handled locally because data bundle could be paged.\r\n     */\n\n\n    getTotalItems() {\n      return this.data[DataBundle.METADATA_INDEX].totalItems;\n    }\n    /**\r\n     * Gets the metadata of every column datatype.\r\n     */\n\n\n    getColumnTypes() {\n      return this.data[DataBundle.COLUMN_TYPES_INDEX];\n    }\n    /**\r\n     *  Returns the names of the columns inside the databundle\r\n     */\n\n\n    getColumnNames() {\n      return this.data[DataBundle.COLUMN_NAMES_INDEX];\n    }\n    /**\r\n     *  Returns the names of the columns inside the databundle\r\n     */\n\n\n    getComputedColumns() {\n      return this.data[DataBundle.COMPUTED_FIELDS_INDEX];\n    }\n    /**\r\n     *  Returns the names and value of the computes inside the databundle\r\n     */\n\n\n    getComputedOutOfDetail() {\n      return this.data[DataBundle.COMPUTED_OUT_OF_DETAIL_INDEX];\n    }\n    /**\r\n     * Returns the total amount of displayed groups and trailer bands in the data manager control\r\n     */\n\n\n    getTotalGroupBands() {\n      return this.data.length > DataBundle.TOTAL_GROUP_BANDS_INDEX ? this.data[DataBundle.TOTAL_GROUP_BANDS_INDEX] : undefined;\n    }\n    /**\r\n     * Creates a new <c>DataBundle</c> object using this as base but with new rows and no\r\n     * metadata object.\r\n     */\n\n\n    duplicateWithNewRows(newRows) {\n      return new DataBundle([this.data[DataBundle.COLUMN_TYPES_INDEX], this.data[DataBundle.COMPUTED_FIELDS_INDEX], newRows, this.data[DataBundle.COLUMN_NAMES_INDEX]]);\n    }\n    /**\r\n     * Gets all rows (or rows in current page) handled by this <c>DataBundle</c> object.\r\n     */\n\n\n    getRows() {\n      if (this.data.length && this.data[DataBundle.ROWS_INDEX].length) {\n        return this.data[DataBundle.ROWS_INDEX];\n      }\n\n      return [];\n    }\n\n  }\n\n  DataBundle.METADATA_INDEX = 0;\n  DataBundle.COLUMN_TYPES_INDEX = 1;\n  DataBundle.COMPUTED_FIELDS_INDEX = 2;\n  DataBundle.ROWS_INDEX = 3;\n  DataBundle.COLUMN_NAMES_INDEX = 4;\n  DataBundle.COMPUTED_OUT_OF_DETAIL_INDEX = 6;\n  DataBundle.TOTAL_GROUP_BANDS_INDEX = 7;\n  /*****************************************************************************\r\n   * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n   *\r\n   * This file is part of the Mobilize Frameworks, which is\r\n   * proprietary and confidential.\r\n   *\r\n   * NOTICE:  All information contained herein is, and remains\r\n   * the property of Mobilize.Net Corporation.\r\n   * The intellectual and technical concepts contained herein are\r\n   * proprietary to Mobilize.Net Corporation and may be covered\r\n   * by U.S. Patents, and are protected by trade secret or copyright law.\r\n   * Dissemination of this information or reproduction of this material\r\n   * is strictly forbidden unless prior written permission is obtained\r\n   * from Mobilize.Net Corporation.\r\n   ******************************************************************************/\n\n  return DataBundle;\n})();\nlet DMDataService = /*#__PURE__*/(() => {\n  class DMDataService {\n    constructor(http) {\n      this.http = http; // The base controller url\n\n      this.controllerUrl = 'dataManagerController';\n    }\n    /**\r\n     * Get current page for DataManger\r\n     * @param dataManagerId the current dataManagerId\r\n     * @param start The start point number\r\n     * @param count The amount of rows per page\r\n     * @param filter The data filter\r\n     * @param successCallback A function to handle the response\r\n     */\n\n\n    getPage(dataManagerId, start, count, filter, successCallback) {\n      const params = {\n        dataManagerId: Utils.formatUID(dataManagerId),\n        start,\n        count,\n        filter\n      };\n      this.doCall('getDataBundlePage', params, data => successCallback(new DataBundle(data)));\n    }\n    /**\r\n     * Get DataManager Current Row\r\n     * @param dataManagerId the current dataManager Id\r\n     * @param successCallback A function to handle the response\r\n     */\n\n\n    getCurrentRow(dataManagerId, successCallback) {\n      const params = {\n        dataManagerId: Utils.formatUID(dataManagerId)\n      };\n      this.doCall('getDataBundleCurrentRow', params, data => successCallback(new DataBundle(data)));\n    }\n    /**\r\n     * Get the row value for display column\r\n     * @param dataManagerId the current dataManager Id\r\n     * @param displayColumn the display column value\r\n     * @param valueColumn the value column value\r\n     * @param displayValue the display value\r\n     * @param successCallback A function to handle the response\r\n     */\n\n\n    getRowValueForDisplayColumn(dataManagerId, displayColumn, valueColumn, displayValue, successCallback) {\n      const params = {\n        dataManagerId: Utils.formatUID(dataManagerId),\n        displayColumn,\n        valueColumn,\n        displayValue\n      };\n      this.doCall('getRowValueForDisplayColumn', params, data => successCallback(new DataBundle(data)));\n    }\n    /**\r\n     * Get the display value for Row value\r\n     * @param dataManagerId the current dataManager Id\r\n     * @param rowValue the current row value\r\n     * @param displayColumnName  the display column value\r\n     * @param valueColumnName  the value column name\r\n     * @param successCallback A function to handle the response\r\n     */\n\n\n    getDisplayValueForRowValue(dataManagerId, rowValue, displayColumnName, valueColumnName, successCallback) {\n      const params = {\n        dataManagerId: Utils.formatUID(dataManagerId),\n        rowValue,\n        displayColumnName,\n        valueColumnName\n      };\n      this.doCall('getDisplayValueForRowValue', params, data => successCallback(new DataBundle(data)));\n    }\n    /**\r\n     * Get Grid Columns\r\n     * @param dataManagerId the current dataManager Id\r\n     * @param successCallback A function to handle the response\r\n     */\n\n\n    getGridColumns(dataManagerId, successCallback) {\n      const params = {\n        dataManagerId: Utils.formatUID(dataManagerId)\n      };\n      this.doCall('getGridStructure', params, data => successCallback(data));\n    }\n\n    doCall(service, params, successCallback) {\n      const serviceUrl = `api/${this.controllerUrl}/${service}/${params.dataManagerId}`;\n      const headers = WebMapUtils.getWebApiHeaders();\n      this.http.get(serviceUrl, {\n        headers,\n        params\n      }).subscribe(response => {\n        successCallback(response);\n      });\n    }\n\n  }\n\n  DMDataService.ɵfac = function DMDataService_Factory(t) {\n    return new (t || DMDataService)(i0.ɵɵinject(i1$1.HttpClient));\n  };\n\n  DMDataService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: DMDataService,\n    factory: DMDataService.ɵfac,\n    providedIn: 'root'\n  });\n  return DMDataService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet BaseDataManagerBaseComponent = /*#__PURE__*/(() => {\n  class BaseDataManagerBaseComponent extends BaseControlComponent {\n    constructor() {\n      super(...arguments);\n      /**\r\n       * Used as a range to request pages\r\n       */\n\n      this.skip = 1;\n      /**\r\n       * Contains DataBundle information\r\n       */\n\n      this.myDataManager = {};\n      /**\r\n       * Page size variable\r\n       */\n\n      this.pageSize = 10;\n      /**\r\n       * The expected with for the scrollbar element in\r\n       * the freeform\r\n       */\n\n      this.scrollbarWidth = 17;\n      /**\r\n       * The set of column Models\r\n       */\n\n      this.columnModels = {};\n      /**\r\n       * The set of Headers Models\r\n       */\n\n      this.columnHeadersModels = {};\n      /**\r\n       * property used to save the last value of the height\r\n       */\n\n      this.internalHeightContainer = 0;\n      /**\r\n       * property used to save the last value of the width\r\n       */\n\n      this.internalWidthContainer = 0;\n    }\n    /**\r\n     * Gets visible page start\r\n     */\n\n\n    get visiblePageStart() {\n      return this._visiblePageStart;\n    }\n    /**\r\n     * Sets visible page start\r\n     */\n\n\n    set visiblePageStart(value) {\n      this._visiblePageStart = value;\n    }\n    /**\r\n     * Gets visible end\r\n     */\n\n\n    get visiblePageEnd() {\n      return this._visiblePageEnd;\n    }\n    /**\r\n     * Sets visible page end\r\n     */\n\n\n    set visiblePageEnd(value) {\n      this._visiblePageEnd = value;\n    }\n    /**\r\n     * Returns the height of the header band\r\n     */\n\n\n    get headerHeight() {\n      return Utils.obtainHeightValue(this.model, 'header');\n    }\n    /**\r\n     * Returns the height of the details band\r\n     */\n\n\n    get detailsHeight() {\n      return Utils.obtainHeightValue(this.model, 'detail');\n    }\n    /**\r\n     * Returns the height of the summary band\r\n     */\n\n\n    get summaryHeight() {\n      return Utils.obtainHeightValue(this.model, 'summary');\n    }\n    /**\r\n     * Returns the height of the footer band\r\n     */\n\n\n    get footerHeight() {\n      return Utils.obtainHeightValue(this.model, 'footer');\n    }\n    /**\r\n     * Returns the height of the title band\r\n     */\n\n\n    get titleHeight() {\n      return Utils.obtainHeightValue(this.model, 'title');\n    }\n    /**\r\n     * Returns the height of the trailer band\r\n     */\n\n\n    get trailerHeight() {\n      return Utils.obtainHeightValue(this.model, 'trailer');\n    }\n    /**\r\n     * Returns the current datamanager type name\r\n     */\n\n\n    get dataManagerType() {\n      return undefined;\n    }\n    /**\r\n     * Gets if the current component has\r\n     * draggable rows.\r\n     */\n\n\n    get draggable() {\n      return this.model.Draggable;\n    }\n    /**\r\n     * Gets if the current component\r\n     * should emit the drop event to the server side\r\n     */\n\n\n    get droppable() {\n      return this.model.Droppable;\n    }\n\n    get isContainer() {\n      return true;\n    }\n    /**\r\n     * Gets processing\r\n     */\n\n\n    get processing() {\n      return this.model.Processing;\n    }\n\n  }\n\n  BaseDataManagerBaseComponent.ɵfac = /* @__PURE__ */function () {\n    let ɵBaseDataManagerBaseComponent_BaseFactory;\n    return function BaseDataManagerBaseComponent_Factory(t) {\n      return (ɵBaseDataManagerBaseComponent_BaseFactory || (ɵBaseDataManagerBaseComponent_BaseFactory = i0.ɵɵgetInheritedFactory(BaseDataManagerBaseComponent)))(t || BaseDataManagerBaseComponent);\n    };\n  }();\n\n  BaseDataManagerBaseComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: BaseDataManagerBaseComponent,\n    selectors: [[\"ng-component\"]],\n    contentQueries: function BaseDataManagerBaseComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, _c2, 5);\n        i0.ɵɵcontentQuery(dirIndex, _c3, 5);\n        i0.ɵɵcontentQuery(dirIndex, _c4, 5);\n        i0.ɵɵcontentQuery(dirIndex, _c5, 5);\n        i0.ɵɵcontentQuery(dirIndex, _c6, 5);\n        i0.ɵɵcontentQuery(dirIndex, _c7, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.header = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.details = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.summary = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.footer = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.groupHeader = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.groupTrailer = _t.first);\n      }\n    },\n    viewQuery: function BaseDataManagerBaseComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c8, 5);\n        i0.ɵɵviewQuery(_c9, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.headerContainer = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.detailsContainer = _t.first);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function BaseDataManagerBaseComponent_Template(rf, ctx) {},\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return BaseDataManagerBaseComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nclass Context {\n  constructor() {}\n\n}\n/***********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n\nclass AffectedCells {\n  constructor() {\n    this.affectedRows = [];\n    this.affectedColumns = [];\n  }\n  /**\r\n   * Determines whether affected cell collections has or has not elements\r\n   * @returns true if there are affected items\r\n   */\n\n\n  hasAffectedItems() {\n    return this.affectedRows.length > 0 && this.affectedColumns.length > 0;\n  }\n  /**\r\n   * Adds affected cell to the dictionary and add the indices to the collections\r\n   * @param cell Cell to be added to the dictionary\r\n   */\n\n\n  addAffectedCell(cell) {\n    const row = cell.Row;\n    const col = cell.Col + 1; // Initialize dictionary of affected cells\n\n    if (!this[row]) {\n      this[row] = {};\n    } // Add cell to affected cells\n\n\n    this[row][col] = cell;\n\n    if (this.affectedRows.indexOf(row) === -1) {\n      this.affectedRows.push(row);\n    }\n\n    if (this.affectedColumns.indexOf(col) === -1) {\n      this.affectedColumns.push(col);\n    }\n  }\n  /**\r\n   * Determines whether cell is affected or not\r\n   * @param row Row index\r\n   * @param col Column index\r\n   * @returns true if cell is affected\r\n   */\n\n\n  isCellAffected(row, col) {\n    return this.affectedRows.indexOf(row) !== -1 && this.affectedColumns.indexOf(col) !== -1;\n  }\n\n}\n\nlet BaseDataManagerComponent = /*#__PURE__*/(() => {\n  class BaseDataManagerComponent extends BaseDataManagerBaseComponent {\n    /* c8 ignore start */\n    constructor(changeDetectorB, rendererB, elementB, emitterB, webMapServiceB, dataServiceB, focusMService, messageCommandService, dmInteractionB, lengthConverter, dataManagerTabSequenceService, tabControlService) {\n      super(changeDetectorB, rendererB, elementB, lengthConverter, emitterB);\n      this.changeDetectorB = changeDetectorB;\n      this.rendererB = rendererB;\n      this.elementB = elementB;\n      this.emitterB = emitterB;\n      this.webMapServiceB = webMapServiceB;\n      this.dataServiceB = dataServiceB;\n      this.focusMService = focusMService;\n      this.messageCommandService = messageCommandService;\n      this.dmInteractionB = dmInteractionB;\n      this.dataManagerTabSequenceService = dataManagerTabSequenceService;\n      this.tabControlService = tabControlService;\n      this.timeDelay = 300;\n      this.timeout = null;\n      this.affectedCells = new AffectedCells();\n    }\n    /* c8 ignore start */\n\n\n    ngOnInit() {\n      super.ngOnInit();\n\n      if (this.emitterB) {\n        const eventData = new EventData({}, this.id, null);\n        eventData.args = this;\n        this.emitterB.emitEvent('registerDataManager', eventData);\n      }\n\n      this.currentRowColumnSelectedSubscription = this.emitterB.currentRowColumnSelected.subscribe(currentRowCol => this.updateCurrentRowSelected(currentRowCol));\n      this.textBufferSubscription = this.emitterB.currentTextBufferService.textBufferObservable.subscribe(param => this.updateTextBuffer(param));\n      this.pendingBufferSubscription = this.emitterB.currentTextBufferService.pendingBufferObservable.subscribe(() => this.acceptPendingTextBuffer());\n      this.setDMSubscription = this.webMapServiceB.core.getEvent().subscribe(Events.SetDMText, event => {\n        this.setDMTextHandler(event);\n      });\n      this.emitterB.dataManagerType = this.dataManagerType;\n    }\n    /* c8 ignore stop */\n\n\n    ngOnDestroy() {\n      super.ngOnDestroy();\n      /* c8 ignore else */\n\n      if (this.emitterB) {\n        const eventData = new EventData({}, null, null);\n        eventData.args = null;\n        this.emitterB.emitEvent('registerDataManager', eventData);\n      }\n\n      if (this.currentRowColumnSelectedSubscription && this.currentRowColumnSelectedSubscription.unsubscribe) {\n        this.currentRowColumnSelectedSubscription.unsubscribe();\n      }\n\n      this.textBufferSubscription.unsubscribe();\n      this.pendingBufferSubscription.unsubscribe();\n      this.webMapServiceB.core.getEvent().unSubscribe(this.setDMSubscription);\n\n      if (this.filterSubscription) {\n        this.filterSubscription.unsubscribe();\n      }\n\n      if (this.dddwKeyBoardInteractionSubscription) {\n        this.dddwKeyBoardInteractionSubscription.unsubscribe();\n      }\n    }\n\n    ngDoCheck() {\n      if (this.dmCellValues) {\n        this.processDMCellUpdates();\n        this.dmCellValues = undefined;\n        this.emitterB.emitColDetectChanges(this.affectedCells);\n        this.affectedCells = new AffectedCells();\n      }\n    }\n    /**\r\n     * Process dmcell updates\r\n     * Update DMCell Values\r\n     */\n\n\n    processDMCellUpdates() {\n      this.dmCellValues.forEach(dirtyCell => {\n        if (dirtyCell.Row >= this.rangeStart && dirtyCell.Row <= this.rangeEnd) {\n          this.updateDirtyCell(dirtyCell);\n        }\n      });\n    }\n    /**\r\n     * Updates dirty cell\r\n     * @param dirtyCell current dirtyCell to be updated\r\n     */\n\n\n    updateDirtyCell(dirtyCell) {\n      let isDirty = false;\n      const normalizedRowIndex = dirtyCell.Row - this.rangeStart;\n\n      if (dirtyCell.Col > -1) {\n        const cellColumn = dirtyCell.Col + 1;\n\n        if (dirtyCell.Value !== undefined && this.currentPage[normalizedRowIndex][cellColumn] !== dirtyCell.Value) {\n          this.currentPage[normalizedRowIndex][cellColumn] = dirtyCell.Value;\n          const command = this.emitterB.commandService.getCommand(CommandName.updateBundle);\n\n          if (command) {\n            command.updateOriginalData(normalizedRowIndex + 1, cellColumn, dirtyCell.Value);\n          }\n\n          isDirty = true;\n        }\n      }\n\n      if (dirtyCell.VisualsValues) {\n        initIfNull(this.currentPage[normalizedRowIndex][0], 'visual');\n        this.currentPage[normalizedRowIndex][0].visual[dirtyCell.Name] = dirtyCell.VisualsValues;\n        isDirty = true;\n      }\n\n      if (dirtyCell.ComputedValues) {\n        initIfNull(this.currentPage[normalizedRowIndex][0], 'computed');\n        this.updateCalculatedValues(normalizedRowIndex, 'computed', dirtyCell.ComputedValues);\n        isDirty = true;\n      }\n\n      if (dirtyCell.DisplayValues) {\n        initIfNull(this.currentPage[normalizedRowIndex][0], 'dddwDisplay');\n        this.updateCalculatedValues(normalizedRowIndex, 'dddwDisplay', dirtyCell.DisplayValues);\n        isDirty = true;\n      }\n\n      if (isDirty) {\n        this.affectedCells.addAffectedCell(dirtyCell);\n      }\n    }\n    /**\r\n     * Handle the set DMText Event\r\n     */\n\n\n    setDMTextHandler(command) {\n      if (command.dataManagerId === this.id) {\n        this.currentDMText = {\n          column: command.column,\n          row: command.row,\n          text: command.text,\n          name: command.controlName\n        };\n        this.emitterB.currentDMTextToColumn(this.currentDMText);\n      }\n    }\n    /**\r\n     * Gets rows per detail, indicates the number of logical rows\r\n     * that should be shown for each visual row.\r\n     */\n\n\n    get rowsPerDetail() {\n      return this.model.RowsPerDetail;\n    }\n    /**\r\n     * Gets the total items obtained from page request\r\n     */\n\n\n    get totalItems() {\n      return this.isDropDownDataWindow() ? this.model.InnerTotalItems : this.model.TotalItems;\n    }\n    /*\r\n     *  Sets TotalItems obtained from page request\r\n     */\n\n\n    set totalItems(value) {\n      if (this.isDropDownDataWindow()) {\n        this.model.InnerTotalItems = value;\n      } else {\n        this.model.TotalItems = value;\n      }\n    }\n    /**\r\n     * Gets dm cell values\r\n     */\n\n\n    get dmCellValues() {\n      return this.model.dirtyCells;\n    }\n    /**\r\n     * Sets dmCell Values\r\n     */\n\n\n    set dmCellValues(value) {\n      this.model.dirtyCells = value;\n    }\n    /**\r\n     * Returns the height of the container.\r\n     * This property is NOT send in the model, but it is set in the currentDM of the data-manager-control.component\r\n     */\n\n\n    get widthContainer() {\n      this.internalWidthContainer = this.model.widthContainer !== undefined ? this.model.widthContainer : this.internalWidthContainer;\n      return this.internalWidthContainer;\n    }\n    /**\r\n     * Returns the height of the container.\r\n     * This property is NOT send in the model, but it is set in the currentDM of the data-manager-control.component\r\n     */\n\n\n    get heightContainer() {\n      this.internalHeightContainer = this.model.heightContainer !== null ? this.model.heightContainer : this.internalHeightContainer;\n      return this.internalHeightContainer;\n    }\n    /**\r\n     * Reports the number of the current rows (row with focus)\r\n     * Returns rows number.\r\n     */\n\n\n    get currentSelectedRows() {\n      return WebMapService.currentService.config.webMapVersion === WMConstants.version5 && this.model.SelectedRows ? JSON.parse(this.model.SelectedRows) : this.model.SelectedRows;\n    }\n    /**\r\n     *  Sets SelectedRows array\r\n     */\n\n\n    set currentSelectedRows(value) {\n      this.model.SelectedRows = WebMapService.currentService.config.webMapVersion === WMConstants.version5 && value ? JSON.stringify(value) : value;\n    }\n    /**\r\n     * Gets the VScrollBar property value\r\n     */\n\n\n    get vScrollBar() {\n      return this.model.VScrollBar;\n    }\n    /**\r\n     * Gets the HScrollBar property value\r\n     */\n\n\n    get hScrollBar() {\n      return this.model.HScrollBar === true; // If it is something different to true then it must be false.\n    }\n    /**\r\n     * Calcs the size of the details area.\r\n     */\n\n\n    get detailsContainerHeight() {\n      const reduceScroll = this.hScrollBar ? this.scrollbarWidth : 0;\n      return this.heightContainer - this.headerHeight - this.footerHeight - (this.reserveSummaryHeight ? 0 : this.summaryHeight) - reduceScroll;\n    }\n    /**\r\n     * Calculates visibleRows\r\n     * linesIndddw is a function used from dropdowndatawindowControl if required.\r\n     */\n\n\n    get visibleRows() {\n      if (this.linesIndddw()) {\n        return this.linesIndddw();\n      } else {\n        /* if the details height is not defined and there is no linesIndddw property */\n        if (this.detailsHeight <= 0) {\n          return 0;\n        } else {\n          let lines = this.detailsContainerHeight / this.detailsHeight;\n          lines = lines > 0 && lines < 1 ? 1 : Math.floor(lines);\n          return lines;\n        }\n      }\n    }\n    /**\r\n     * Determines if the summary height should be reserved\r\n     * It reserves an extra space only if the summary is tiny\r\n     * When the summary height is greater than half of the row height a extra row\r\n     * space is added.\r\n     * Return the number of lines to be reserved\r\n     */\n\n\n    get reserveSummaryHeight() {\n      return this.summary && this.summaryHeight > 0 && this.detailsHeight > 0 ? Math.round(this.summaryHeight / this.detailsHeight) : 0;\n    }\n    /**\r\n     * Gets the height of the DM content.\r\n     * Returns percentage, auto or pixels\r\n     */\n\n\n    get dmViewHeight() {\n      return this.webMapServiceB.config.usePercentage ? '100%' : this.dataManagerControlHeight === 0 ? 'auto' : `${this.dataManagerControlHeight}px`;\n    }\n    /**\r\n     *  Obtains the height's datamanager in pixels\r\n     */\n\n\n    get dataManagerControlHeight() {\n      return this.linesIndddw() !== undefined && this.detailsContainer ? // Review if the currentVisibleRows < linesIndddw to avoid extra space at the end of the dropdown\n      this.calculateHeightDDDW() : this.heightContainer;\n    }\n    /**\r\n     * Returns an array of RowTabSequenceDirective\r\n     * This getter is overwritten by FreeForm\r\n     */\n\n\n    get rows() {\n      return null;\n    }\n    /**\r\n     * Gets the data manager control container\r\n     * to extract data info\r\n     */\n\n\n    get parentElement() {\n      return this.el.nativeElement.closest('.dataManager');\n    }\n    /**\r\n     * Returns the value of the dirty flag\r\n     */\n\n\n    get dirty() {\n      return this.model.Dirty;\n    }\n    /**\r\n     * Sets the value of the dirty flag\r\n     */\n\n\n    set dirty(value) {\n      this.model.Dirty = value;\n    }\n    /**\r\n     * Returns the value of the forceDirty flag\r\n     */\n\n\n    get forceDirty() {\n      return this.model.ForceDirty;\n    }\n\n    set forceDirty(value) {\n      this.model.ForceDirty = value;\n    }\n    /**\r\n     * Gets datamanager current column\r\n     */\n\n\n    get currentColumn() {\n      return this.model.CurrentColumn;\n    }\n    /**\r\n     * Sets datamanager current column\r\n     */\n\n\n    set currentColumn(value) {\n      this.model.CurrentColumn = value;\n    }\n    /**\r\n     * Gets datamanager current control name\r\n     */\n\n\n    get currentControlName() {\n      return this.model.CurrentControlName;\n    }\n    /**\r\n     * Sets datamanager current control name\r\n     */\n\n\n    set currentControlName(value) {\n      this.model.CurrentControlName = value;\n    }\n    /**\r\n     * Gets the value of the current row.\r\n     */\n\n\n    get currentRow() {\n      return this.model.CurrentRow;\n    }\n    /**\r\n     * Sets the value of the current row\r\n     */\n\n\n    set currentRow(value) {\n      this.model.CurrentRow = value;\n    }\n    /**\r\n     * Gets the value of the current displayed row.\r\n     */\n\n\n    get displayedRow() {\n      return this.model.DisplayedRow;\n    }\n    /**\r\n     * Sets the value of the current displayed row\r\n     */\n\n\n    set displayedRow(value) {\n      this.model.DisplayedRow = value;\n    }\n    /**\r\n     * Draggable handler\r\n     * @param item Row context\r\n     */\n\n\n    dragHandler(item) {\n      return this.draggable && this.isRowDraggable(item);\n    }\n    /**\r\n     *  Validates if a row is draggable\r\n     * @param item row context\r\n     */\n\n\n    isRowDraggable(item) {\n      return item[0].draggable;\n    }\n    /**\r\n     * Sets the TextBuffer property\r\n     */\n\n\n    set textBuffer(value) {\n      this.model.TextBuffer = value;\n    }\n    /**\r\n     * Gets the TextBuffer property from the model for the datamanager\r\n     */\n\n\n    get textBuffer() {\n      return this.model.TextBuffer;\n    }\n    /**\r\n     * Sets the oldTextBuffer property for the disableServerBundle feature\r\n     */\n\n\n    set oldTextBuffer(value) {\n      this.model.OldTextBuffer = value;\n    }\n    /**\r\n     * Gets the oldTextBuffer property from the model for the datamanager\r\n     * for the disableServerBundle feature\r\n     */\n\n\n    get oldTextBuffer() {\n      return this.model.OldTextBuffer;\n    }\n    /**\r\n     * Sets the currentRowBuffer property for the disableServerBundle feature\r\n     */\n\n\n    set currentRowBuffer(value) {\n      this.model.CurrentRowBuffer = value;\n    }\n    /**\r\n     * Gets the currentRowBuffer property from the model for the datamanager\r\n     * for the disableServerBundle feature\r\n     */\n\n\n    get currentRowBuffer() {\n      return this.model.CurrentRowBuffer;\n    }\n    /**\r\n     * Sets the currentControlNameBuffer property for the disableServerBundle feature\r\n     */\n\n\n    set currentControlNameBuffer(value) {\n      this.model.CurrentControlNameBuffer = value;\n    }\n    /**\r\n     * Gets the currentControlNameBuffer property from the model for the datamanager\r\n     * for the disableServerBundle feature\r\n     */\n\n\n    get currentControlNameBuffer() {\n      return this.model.CurrentControlNameBuffer;\n    }\n    /**\r\n     * Sets the columnIdBuffer property for the disableServerBundle feature\r\n     */\n\n\n    set columnIdBuffer(value) {\n      this.model.ColumnIdBuffer = value;\n    }\n    /**\r\n     * Gets the columnIdBuffer property from the model for the datamanager\r\n     * for the disableServerBundle feature\r\n     */\n\n\n    get columnIdBuffer() {\n      return this.model.ColumnIdBuffer;\n    }\n    /**\r\n     * Sets the dirtyBuffer property for the disableServerBundle feature\r\n     */\n\n\n    set dirtyBuffer(value) {\n      this.model.DirtyBuffer = value;\n    }\n    /**\r\n     * Gets the dirtyBuffer property from the model for the datamanager\r\n     * for the disableServerBundle feature\r\n     */\n\n\n    get dirtyBuffer() {\n      return this.model.DirtyBuffer;\n    }\n    /**\r\n     * Gets data manager control model for the current\r\n     * data manager id registered in DataManagerEventService\r\n     */\n\n\n    get dataManagerControlModel() {\n      return WebMapService.currentService.core.getModel(this.emitterB.currentDataManagerId);\n    }\n    /**\r\n     * Gets groups definitions\r\n     * for the current data manager component\r\n     */\n\n\n    get groups() {\n      return this.model.Groups;\n    }\n    /**\r\n     * Verifies if the displayedRow has changed in the backend\r\n     * and a scrolling action its required\r\n     */\n\n\n    shouldScrollTo() {\n      // Short cut to speed up the action\n      if (this.oldDisplayedRow === this.displayedRow) {\n        return false;\n      }\n\n      let value = false; // If it's in a different page\n\n      if (this.notDisplayedRowInPage()) {\n        value = true;\n      } // Update value for different page or if it's in the same page\n      // but is a different row\n\n\n      this.oldDisplayedRow = this.displayedRow;\n      return value;\n    }\n    /* Returns the corresponding visual size using dimensions in percentages or pixels values */\n\n\n    obtainVisibleValue(property, parentDimension = 'H') {\n      if (this.lengthConverter.isUsePercentage) {\n        const currentValuePx = this[property];\n        const parentValue = parentDimension === 'H' ? this.heightContainer : this.widthContainer;\n        return this.addUnits(this.lengthConverter.convertToPercentage(currentValuePx, parentValue));\n      }\n\n      return this.addUnits(this[property]);\n    }\n\n    createRows(data, totalRows, rangeStart, rangeEnd) {\n      throw new Error('Not Implemented');\n    }\n    /**\r\n     * MUST BE OVERRIDEN BY SPECIFIC DATAMANAGER CLASS\r\n     * Nots displayed row in page\r\n     * @returns true if row is not displayed in page\r\n     */\n\n\n    notDisplayedRowInPage() {\n      return true;\n    }\n    /**\r\n     * Load the data received from server\r\n     * @param pageData The data received from server\r\n     * @param rangeStart The index of the first element retrieved\r\n     * @param rangeEnd The index of the last element retrieved\r\n     * @param params An object that contains special control parameters\r\n     */\n\n\n    loadData(pageData, rangeStart, rangeEnd, params) {\n      this.initialized = true;\n      let rows;\n      let bundle;\n      let applyDetectChanges = false;\n      this.totalItems = pageData.getTotalItems();\n      this.myDataManager.columnTypes = pageData.getColumnTypes();\n      this.myDataManager.columnNames = pageData.getColumnNames();\n      this.myDataManager.computedColumns = pageData.getComputedColumns();\n      this.myDataManager.computedOutOfDetail = pageData.getComputedOutOfDetail();\n      this.myDataManager.totalGroupBands = pageData.getTotalGroupBands();\n\n      if (pageData.hasRows()) {\n        this.myDataManager.bundleData = pageData;\n        bundle = this.myDataManager.bundleData.data;\n        this.createRows(pageData.getRows(), this.totalItems, rangeStart, rangeEnd);\n\n        if (this.afterDataLoadedEvent !== undefined) {\n          applyDetectChanges = this.afterDataLoadedEvent(params);\n        }\n\n        this.myDataManager.rows = pageData.getRows();\n        rows = this.myDataManager.rows;\n        this.sendDatamanager(this.myDataManager);\n        this.messageCommandService.sendMessage({\n          id: this.id,\n          rows,\n          stIndex: rangeStart,\n          bundle\n        });\n      } else {\n        if (this.afterClearActionEvent !== undefined) {\n          this.afterClearActionEvent();\n        }\n      }\n\n      if (applyDetectChanges) {\n        this.detectChanges();\n      }\n    }\n    /**\r\n     * This property is handled by dropdown datawindow control to handle the amount of rows\r\n     */\n\n\n    linesIndddw() {\n      return this.model.DddwLines;\n    }\n    /**\r\n     * This function determines if this datamanager is inside of a DropDownDataWindow.\r\n     */\n\n\n    isDropDownDataWindow() {\n      return this.model.DddwLines !== undefined && this.model.DddwLines !== null;\n    }\n    /**\r\n     * Get the items in an specified range\r\n     * @param rangeStart The index of the first element to retrieve\r\n     * @param items The amount of items to retrieve from server\r\n     * @param params An object that contains special control parameters\r\n     */\n\n\n    getPage(rangeStart, items, params, filter) {\n      if (this.tabControlService && !this.tabControlService.isSelected) {\n        this.tabControlService.registerPendingRetrieve(this.id, () => {\n          this.getPage(rangeStart, items, params, filter);\n        });\n        return;\n      }\n\n      let busyLoaderTimeout = null;\n\n      if (WebMapService.currentService.config.dataManagerBusyLoaderTime) {\n        busyLoaderTimeout = setTimeout(() => {\n          this.showBusyLoader = true;\n        }, WebMapService.currentService.config.dataManagerBusyLoaderTime);\n      } else {\n        this.showBusyLoader = true;\n      }\n\n      this.isSynchronizing = true;\n      this.dataServiceB.getPage(this.id, rangeStart, items, filter ? filter : null, data => {\n        if (WebMapService.currentService.config.dataManagerBusyLoaderTime && busyLoaderTimeout) {\n          clearTimeout(busyLoaderTimeout);\n        }\n\n        this.isSynchronizing = false;\n        this.deactivateBusyLoader();\n        this.loadData(data, rangeStart, rangeStart + items - 1, params);\n      });\n    }\n    /**\r\n     * Returns numeric position value of row\r\n     * @param row current row\r\n     */\n\n\n    getCurrentRow(row) {\n      if (row && row.length > 0) {\n        return this.currentPage.indexOf(row) + this.rangeStart;\n      }\n    }\n    /**\r\n     * Returns DataManagerContext\r\n     * @param item contains a row\r\n     */\n\n\n    getDataManagerContext(item) {\n      const currentRow = this.getCurrentRow(item);\n      return new DataManagerContext(this.context(currentRow, item, currentRow));\n    }\n    /**\r\n     * Returns DataManagerContext\r\n     * @param row contains a row number\r\n     */\n\n\n    getDataManagerBandContext(row) {\n      if (this.currentVisibleRows && this.currentVisibleRows.length > 0) {\n        const item = this.currentVisibleRows[row];\n        const currentRow = item ? this.getCurrentRow(item) : 0;\n        return currentRow > 0 ? new DataManagerContext(this.context(currentRow, item, 0)) : null;\n      } else if (row === 0 || this.haveComputedColumns()) {\n        return new DataManagerContext(this.context(0, null, 0, true));\n      }\n\n      return null;\n    }\n    /**\r\n     * @description\r\n     * Method to know if the DataManager has computed values\r\n     * @returns A boolean value\r\n     */\n\n\n    haveComputedColumns() {\n      return this.myDataManager.computedColumns && Object.getOwnPropertyNames(this.myDataManager.computedColumns).length > 0;\n    }\n    /**\r\n     * Handle the focus action for Data Manager column in a row.\r\n     * @param rowElement The DOM element that represents the Data Manager row.\r\n     * @param columnName The name of the column that is going to be focused.\r\n     * @param isFirst Determines if it should be the first (true) or the last column (false) element by tabindex order\r\n     * which has to be focused.\r\n     * @param avoidScrolling Determines if only has to apply focus behavior without scrolling to the column\r\n     * @param [immediately] Determines if focus should be applied immediately or\r\n     * it is going to be applied at the end of stack execution\r\n     */\n\n\n    applyFocusToSelectedColumn(rowElement, columnName, isFirst, avoidScrolling, immediately) {\n      if (columnName) {\n        this.dispatchColumnFocusEvent(columnName, rowElement, avoidScrolling, immediately);\n      } else {\n        const validColumns = this.getValidColumns();\n\n        if (validColumns) {\n          if (validColumns.length > 0) {\n            const col = isFirst ? this.lastColumn : this.firstColumn;\n            this.dispatchColumnFocusEvent(col.Name, rowElement, avoidScrolling, immediately);\n            return;\n          } else {\n            rowElement.parentElement.focus({\n              preventScroll: true\n            });\n          }\n        }\n\n        this.notifyBusyLoaderEnd();\n      }\n    }\n    /**\r\n     * Dispatches focus event to columnElement with the columnName\r\n     * that is contained inside of rowElement.\r\n     * @param columnName ColumnName\r\n     * @param rowElement HTMLElement that contains the columnElement\r\n     * @param avoidScrolling Determines if only has to apply focus without scrolling\r\n     * @param [immediately] Determines if focus should be applied immediately or\r\n     * it is going to be applied at the end of stack execution\r\n     */\n\n\n    dispatchColumnFocusEvent(columnName, rowElement, avoidScrolling, immediately) {\n      const columnElement = this.columnElementQuerySelected(rowElement, columnName);\n\n      if (columnElement) {\n        const columnInput = this.queryKClasses(columnElement);\n\n        if (columnInput) {\n          this.applyFocusToColumnInput(columnInput, avoidScrolling, immediately);\n          this.selectTextInControl(columnInput);\n          return;\n        }\n      }\n\n      this.notifyBusyLoaderEnd();\n    }\n    /**\r\n     * Applies focus to column input, if determines when focus should be apply\r\n     * directly to the input or it should apply using dispatchEvent function.\r\n     * Also scroll down or up to the selected column input.\r\n     * @param columnInput DOM element that represents the input to receive focus.\r\n     * @param avoidScrolling Determines when the scroll must be canceled after\r\n     * focus the column input.\r\n     * @param immediately Determines when the focus should be executed immediately\r\n     * using focus function or if it must applied using dispatchEvent\r\n     * (Using by ChangeFocusedControl command)\r\n     */\n\n\n    applyFocusToColumnInput(columnInput, avoidScrolling, immediately) {\n      const eventObject = new FocusEvent('focus');\n\n      if (immediately) {\n        columnInput.focus();\n      } else {\n        columnInput.dispatchEvent(eventObject);\n      }\n\n      if (!avoidScrolling) {\n        this.scrollToColumn(columnInput);\n      }\n    }\n    /**\r\n     * Selects the text in cell control\r\n     * @param columnInput the cell input\r\n     */\n\n\n    selectTextInControl(columnInput) {\n      if (columnInput.setSelectionRange && this.applySelection()) {\n        this.selectRange(columnInput);\n      }\n    }\n    /**\r\n     * Scrolls to column using HTML scrollIntoView or scrollIntoViewIfNeeded methods.\r\n     * @param columnInput The column to apply scroll.\r\n     */\n\n\n    scrollToColumn(columnInput) {\n      columnInput.scrollIntoViewIfNeeded ? columnInput.scrollIntoViewIfNeeded() : scrollIfNeeded(columnInput);\n    }\n    /**\r\n     * Returns a valid column element when datamanager is static or Dynamic.\r\n     */\n\n\n    columnElementQuerySelected(rowDOM, columnName) {\n      const rowElement = rowDOM.nativeElement ? rowDOM.nativeElement : rowDOM; // tslint:disable-next-line: prefer-template\n\n      return rowElement.querySelector(`#${columnName}`) || rowElement.querySelector('#' + columnName + '_' + '\\\\' + '#' + this.currentRow);\n    }\n    /**\r\n     * Finds html input classes\r\n     */\n\n\n    queryKClasses(nextColumnDOM) {\n      return nextColumnDOM ? nextColumnDOM.querySelector('.k-input, .k-textbox, .k-textarea, .k-checkbox, .k-radio-label, .k-dropdown') : null;\n    }\n    /**\r\n     * return context of DataManagerContext\r\n     * @param currentRow current row index\r\n     * @param item current row\r\n     */\n\n\n    context(currentRow, item, bandRow, onlyComputed) {\n      let dmText = null;\n\n      if (this.currentDMText && this.currentDMText.row === currentRow) {\n        dmText = this.currentDMText;\n      }\n\n      const context = new Context();\n      context.computedInformation = this.model.ComputedInformation;\n      context.columns = this.model.Column;\n      context.columnTypes = this.myDataManager.columnTypes;\n      context.dataManagerId = this.id;\n      context.dataManagerType = this.dataManagerType;\n      context.computedExpressions = this.getComputedExpressions(this.myDataManager.computedColumns);\n      context.dmText = dmText;\n      context.isDynamic = this.model.IsDynamic || null;\n      context.bandRow = bandRow;\n      context.computedOutOfDetail = this.myDataManager.computedOutOfDetail;\n\n      if (onlyComputed) {\n        context.rowIndex = null;\n        context.row = null;\n        context.pagination = null;\n        context.currentPage = null;\n        context.maxTabSequence = null;\n      } else {\n        context.rowIndex = currentRow;\n        context.row = item;\n        context.pagination = this.paginationInfo(currentRow);\n        context.currentPage = this.currentPage;\n        context.maxTabSequence = this.lastColumn ? this.lastColumn.TabSequence : undefined;\n      }\n\n      return context;\n    }\n    /**\r\n     * Returns pagination information used for UPDATE_DM_ROW_AND_COL\r\n     * @param currentRow current selected row\r\n     */\n\n\n    paginationInfo(currentRow) {\n      return {\n        currentpage: this.currentPageIndex(currentRow),\n        currentRow,\n        displayedRowCount: this.pageSize,\n        rangeStart: this.rangeStart,\n        totalRows: this.totalItems,\n        visiblePageStart: this.visiblePageStart\n      };\n    }\n    /**\r\n     *  Calculates the page number of current row\r\n     * @param currentRow current selected row\r\n     */\n\n\n    currentPageIndex(currentRow) {\n      return (currentRow - currentRow % this.pageSize) / this.pageSize + (currentRow % this.pageSize > 0 ? 1 : 0);\n    }\n    /**\r\n     * This is used to comunicate clicked items with  drop down data window.\r\n     * Execute command\r\n     *\r\n     * @param rowclicked item selected\r\n     */\n\n\n    itemClick(event, rowclicked, datamanagercontext) {\n      this.detectChanges();\n      this.dataManagerContext = datamanagercontext;\n      this.notifyDataManagerCurrentRow();\n      this.notifyClickedRowToDDDW(rowclicked, false);\n      event.row = this.lastSelectionChangedRow;\n      const dataEvent = new EventData(event, this.columnContext.id, this.mapperId);\n      this.emitDataManagerEvent('DMClick', dataEvent);\n\n      if (!this.emitterB.webMapService.core.getModel(this.getDataManagerContext(rowclicked).dataManagerId).DddwLines) {\n        Utils.preventPropagation(event);\n      }\n    }\n    /**\r\n     * Sends Datamanager to Dropdown data window\r\n     * @param datamanager DataManager object\r\n     */\n\n\n    sendDatamanager(datamanager) {\n      this.emitterB.datamanagerData(datamanager);\n    }\n    /**\r\n     * Gests the computed expressions\r\n     * @param {any} computedColumns information of the computed columns\r\n     * @returns { any }\r\n     */\n\n\n    getComputedExpressions(computedColumns) {\n      const computedExpressions = [];\n\n      for (const computed in computedColumns) {\n        if (computedColumns[computed] && this.model[computedColumns[computed]]) {\n          computedExpressions.push(this.model[computedColumns[computed]].Expression);\n        }\n      }\n\n      return computedExpressions;\n    }\n    /**\r\n     * Collect the column Models for this dataManager\r\n     */\n\n\n    collectColumnModels() {\n      const models = Utils.collectColumnModels(this.model);\n      this.columnModels = models.columnModels;\n      this.columnHeadersModels = models.columnHeadersModels;\n    }\n    /**\r\n     * Handles the drop Event for the freeform component\r\n     * Verifies if droppable area is active and it comes from a different\r\n     * datawindow.\r\n     * @param source Source datamanager item object\r\n     * @param target End target datamanager item object\r\n     */\n\n\n    dropEvent(source, target) {\n      if (this.droppable && source.dropData && source.dropData.dataManagerId !== this.id && source.dropData.pagination) {\n        const context = {\n          sourceId: source.dropData.dataManagerId,\n          sourceRowIndex: source.dropData.pagination.currentRow,\n          sourceMapperId: this.emitterB.webMapService.core.getModel(source.dropData.dataManagerId).mapperId,\n          targetId: target.dataManagerId,\n          targetRowIndex: target.pagination.currentRow,\n          targetMapperId: this.mapperId\n        };\n        const dataEvent = new EventData(context, this.id, this.mapperId);\n        this.emitDataManagerEvent('DropEvent', dataEvent);\n      }\n    }\n    /**\r\n     * Updates textBuffer property.\r\n     * @param data Current data with textbuffer and\r\n     * usePending properties.\r\n     */\n\n\n    updateTextBuffer(data) {\n      if (data.textBuffer !== undefined) {\n        const textBufferValue = data.textBuffer === null ? data.textBuffer : data.textBuffer.toString();\n\n        if (data.usePending) {\n          this.pendingTextBuffer = textBufferValue;\n        } else {\n          this.textBuffer = textBufferValue;\n          this.updateDisableServerBundleValues(data);\n        }\n      }\n    }\n    /**\r\n     * Updates the values needed for the backend to update the data correctly if the\r\n     * disableServerBundle variable is true.\r\n     * @param data Current data with textbuffer and\r\n     * usePending properties.\r\n     */\n\n\n    updateDisableServerBundleValues(data) {\n      if (this.dataManagerControlModel && this.dataManagerControlModel.DisableServerBundle) {\n        const oldTextBufferValue = data.oldTextBuffer == null ? data.oldTextBuffer : data.oldTextBuffer.toString();\n        this.oldTextBuffer = oldTextBufferValue;\n        this.dirtyBuffer = true;\n        this.currentControlNameBuffer = data.currentControlNameBuffer;\n        this.currentRowBuffer = data.currentRowBuffer;\n        this.columnIdBuffer = data.columnIdBuffer;\n      }\n    }\n    /**\r\n     * Updates current row selected\r\n     * @param currentRowCol Current column context\r\n     */\n\n\n    updateCurrentRowSelected(currentRowCol) {\n      this.columnContext = currentRowCol;\n      this.lastSelectionChangedRow = currentRowCol['dmContext'].rowIndex;\n      this.currentColumn = currentRowCol['model'].ColumnId;\n      this.currentSelectedRowObject = currentRowCol['dmContext'].row;\n      this.currentRow = currentRowCol['dmContext'].rowIndex;\n\n      if (this.currentColumn !== undefined) {\n        this.currentControlName = currentRowCol['model'].Name;\n      }\n    }\n    /**\r\n     * Accepts pending text buffer value and commits the\r\n     * value to textBuffer property.\r\n     */\n\n\n    acceptPendingTextBuffer() {\n      if (this.pendingTextBuffer != null) {\n        this.textBuffer = this.pendingTextBuffer.toString();\n        this.pendingTextBuffer = null;\n      }\n    }\n    /**\r\n     * Notifies to DataManagerControl that currentRow has changed.\r\n     */\n\n\n    updateDataManagerControlCurrentRow() {\n      if (!this.isDropDownDataWindow()) {\n        const event = {\n          row: this.currentRow\n        };\n        const dataEvent = new EventData(event, this.id, this.mapperId);\n        this.emitDataManagerEvent('UpdateDMCurrentRow', dataEvent);\n      }\n    }\n    /**\r\n     * method to select the row / column of the data manager.\r\n     * This method has to be overwritten for each specific implementation.\r\n     */\n\n\n    selectCurrentRowColumn(useFirstColumn) {\n      return;\n    }\n    /**\r\n     * Should select current row column. Determines if the DataManager is the\r\n     * actual focused element or DataManager is being focused using the\r\n     * 'isFocused' property marked by the CHANGE_FOCUSED_COMMAND\r\n     * @returns true if select current row column\r\n     */\n\n\n    shouldSelectCurrentRowColumn() {\n      return this.focusMService.isActiveComponentInDataManager(this.emitterB.currentDataManagerId) ? true : this.dataManagerControlModel && this.dataManagerControlModel.isFocused && !this.lengthConverter.getMessageBoxV4OK().thereArePendingOkMsgBoxes();\n    }\n    /**\r\n     * Marks datamanager control is focused\r\n     * @param value Value to set isFocused property.\r\n     */\n\n\n    markDataManagerControlIsFocused(value) {\n      /* c8 ignore else */\n      if (this.dataManagerControlModel) {\n        this.dataManagerControlModel.isFocused = value;\n      }\n    }\n    /**\r\n     * Handle the click event\r\n     * @param event the current javascript event data\r\n     */\n\n\n    clickDMEventHandler(event) {\n      const dataEvent = new EventData(event, this.id, this.mapperId);\n      dataEvent.event['row'] = 0;\n      this.emitDataManagerEvent('DMClick', dataEvent);\n    }\n    /**\r\n     * Keys down event triggered to DataManagerControl\r\n     * @param event Key down event\r\n     */\n\n\n    keyDownEvent(event, arrowNCCC) {\n      event.row = this.currentRow;\n      event.arrowNCCC = arrowNCCC;\n      const dataEvent = new EventData(event, this.id, this.mapperId);\n      dataEvent.args = {\n        fieldName: this.currentControlName\n      };\n      this.emitDataManagerEvent('keydown', dataEvent);\n    }\n    /**\r\n     * Keys down event triggered to DataManagerControl with delay\r\n     * @param event Key down event\r\n     */\n\n\n    keyDownEventWithDelay(event, arrowNCCC) {\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n      }\n\n      this.timeout = setTimeout(() => {\n        this.keyDownEvent(event, arrowNCCC);\n      }, this.timeDelay);\n    }\n    /**\r\n     * Gets an array of the column models that are\r\n     * able to receive an input from the user\r\n     * @returns valid columns\r\n     */\n\n\n    getValidColumns() {\n      if (this.columnModels && Object['values'](this.columnModels).length > 0) {\n        const validColumns = Object['values'](this.columnModels).filter(col => col.TabSequence && col.TabSequence !== 32766 && col.Visible);\n\n        if (validColumns && validColumns.length > 0) {\n          this.lastColumn = Utils.getMax(validColumns, 'TabSequence');\n          this.firstColumn = Utils.getMin(validColumns, 'TabSequence');\n        }\n\n        return validColumns;\n      }\n\n      return null;\n    }\n    /**\r\n     * Verifies if current DataManager Instance has no data.\r\n     */\n\n\n    isEmptyDatamanager() {\n      return this.totalItems === 0;\n    }\n    /**\r\n     * Determines if the position is out of the sector (VisiblePage) range.\r\n     */\n\n\n    isInVisiblePage(position) {\n      return position >= this.visiblePageStart && position <= this.visiblePageEnd;\n    }\n    /**\r\n     * Gets current selected row context when current context is undefined but there is a selected item/*\r\n     * @param currentRow\r\n     * @param visiblePageStart\r\n     * @returns current selected row context\r\n     */\n\n\n    getCurrentSelectedRowContext(currentRow, visiblePageStart) {\n      const currentItem = currentRow - visiblePageStart;\n      this.dataManagerContext = this.getDataManagerContext(this.rowCollection.toArray()[currentItem]);\n      return this.rowCollection ? this.dataManagerContext : null;\n    }\n    /**\r\n     * This method must be implemented in the specific\r\n     * DW types in order to handle the keyboard interaction\r\n     * over the dropdown datawindow control.\r\n     * @param event the current javascript event\r\n     */\n\n\n    dropDDWKeyboardInteractionHandler(event) {// Do Nothing\n    }\n    /**\r\n     * Updates selected row with current row\r\n     */\n\n\n    updateSelectedRowWithCurrentRow() {}\n    /**\r\n     * Calculates the height property for a DDDW\r\n     * @returns ddwheight\r\n     */\n\n\n    calculateHeightDDDW() {\n      return this.currentVisibleRows && this.currentVisibleRows.length < this.linesIndddw() ? this.currentVisibleRows.length * this.detailsHeight + this.scrollbarWidth : this.linesIndddw() * this.detailsHeight + this.scrollbarWidth;\n    }\n    /**\r\n     * After dddwdata loaded method to load the filter result in the\r\n     * searchbar (editable) or select the first filter option in DDDW\r\n     * popup (non editable)\r\n     * @param params Parameters\r\n     */\n\n\n    afterDataLoadedDDDW(params) {\n      if (this.isDropDownDataWindow() && params && params.filter) {\n        if (!params.editable && this.currentPage.length > 0) {\n          this.notifyClickedRowToDDDW(this.currentVisibleRows[this.currentRow - this.visiblePageStart], true);\n        }\n\n        if (params.editable && this.currentPage.length === 1) {\n          this.notifyClickedRowToDDDW(this.currentVisibleRows[0], true);\n        }\n      }\n    }\n    /**\r\n     * Dddws update displayed rows\r\n     * @param rows The amount of rows to be displayed in the dropdownDW\r\n     */\n\n\n    updateDisplayedRowsDDDW(rows) {\n      /* c8 ignore else */\n      if (this.updateDDDWEventTimer && rows === 0) {\n        clearTimeout(this.updateDDDWEventTimer);\n      }\n\n      this.updateDDDWEventTimer = setTimeout(() => {\n        if (this.dmInteractionB) {\n          this.dmInteractionB.setRetrievedRows(rows);\n        }\n      }, 300);\n    }\n    /**\r\n     * Notifys clicked row to DDDW\r\n     * @param rowClicked Row instance clicked.\r\n     * @param [autocomplete] Send a click notification to the DDDW in order to autocomplete the selected option\r\n     */\n\n\n    notifyClickedRowToDDDW(rowClicked, autocomplete) {\n      const clickedRowData = {\n        row: rowClicked,\n        rowIndex: this.lastSelectionChangedRow,\n        datamanagerContext: this.dataManagerContext ? this.dataManagerContext : this.getCurrentSelectedRowContext(this.currentRow, this.visiblePageStart),\n        autocomplete\n      };\n      this.emitterB.clickedRow(clickedRowData);\n    }\n    /**\r\n     * Deactivates busy loader after data received from API\r\n     * NOTE: WMGrid overrides the event to remove busy loader after apply focus\r\n     * to column\r\n     */\n\n\n    deactivateBusyLoader() {\n      this.showBusyLoader = false;\n    }\n    /**\r\n     * Notifies busy loader end, it must be overridden by WMGrid\r\n     */\n\n\n    notifyBusyLoaderEnd() {}\n    /**\r\n     * Updates display values in the currentPage object\r\n     * @param normalizedRowIndex the row that will be updated\r\n     * @param displayValues the new values\r\n     */\n\n\n    updateCalculatedValues(normalizedRowIndex, collection, newVals) {\n      Object.keys(newVals).forEach(key => {\n        this.currentPage[normalizedRowIndex][0][collection][key] = newVals[key];\n      });\n    }\n\n  }\n\n  BaseDataManagerComponent.ɵfac = function BaseDataManagerComponent_Factory(t) {\n    return new (t || BaseDataManagerComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(i1.WebMapService), i0.ɵɵdirectiveInject(DMDataService), i0.ɵɵdirectiveInject(FocusManagerService), i0.ɵɵdirectiveInject(MessageCommandService), i0.ɵɵdirectiveInject(DmInteractionService, 8), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerTabSequenceService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n  };\n\n  BaseDataManagerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: BaseDataManagerComponent,\n    selectors: [[\"ng-component\"]],\n    viewQuery: function BaseDataManagerComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c10, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.rowCollection = _t);\n      }\n    },\n    inputs: {\n      timeDelay: \"timeDelay\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function BaseDataManagerComponent_Template(rf, ctx) {},\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  __decorate([NotifyChange('dmCellValues'), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], BaseDataManagerComponent.prototype, \"dmCellValues\", null);\n\n  __decorate([NotifyChange('Dirty'), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], BaseDataManagerComponent.prototype, \"dirty\", null);\n\n  __decorate([NotifyChange('DisplayedRow'), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], BaseDataManagerComponent.prototype, \"displayedRow\", null);\n\n  __decorate([NotifyChange('TextBuffer'), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], BaseDataManagerComponent.prototype, \"textBuffer\", null);\n\n  __decorate([NotifyChange('CurrentRowBuffer'), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], BaseDataManagerComponent.prototype, \"currentRowBuffer\", null);\n\n  __decorate([NotifyChange('CurrentControlNameBuffer'), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], BaseDataManagerComponent.prototype, \"currentControlNameBuffer\", null);\n\n  __decorate([NotifyChange('ColumnIdBuffer'), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], BaseDataManagerComponent.prototype, \"columnIdBuffer\", null);\n\n  return BaseDataManagerComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * Scrolls if needed\r\n * Applies a similar behavior than the scrollIntoViewIfNeeded\r\n * for those browser that does not implement such functionality\r\n * @param element the current focused element.\r\n */\n\n\nfunction scrollIfNeeded(element) {\n  if (element && !elementInViewPort(element)) {\n    element.scrollIntoView();\n  }\n}\n/**\r\n * Initialize the object if it is not already defined\r\n * @param obj the value to be veried\r\n * @returns an initialized object\r\n */\n\n\nfunction initIfNull(obj, prop) {\n  if (!obj[prop]) {\n    obj[prop] = {};\n  }\n}\n\nlet DwSimpleNumericEditMaskComponent = /*#__PURE__*/(() => {\n  let DwSimpleNumericEditMaskComponent = class DwSimpleNumericEditMaskComponent extends ColumnControlComponent {\n    constructor(\n    /* c8 ignore next 8 */\n    changeDetectorDW, maskFormat2, rendererDW, elementDW, lengthConverter, focusManagerService, emitterDW, dataMTabSequenceService) {\n      super(changeDetectorDW, rendererDW, elementDW, lengthConverter, emitterDW, maskFormat2, dataMTabSequenceService);\n      this.changeDetectorDW = changeDetectorDW;\n      this.maskFormat2 = maskFormat2;\n      this.rendererDW = rendererDW;\n      this.elementDW = elementDW;\n      this.focusManagerService = focusManagerService;\n      this.emitterDW = emitterDW;\n      this.dataMTabSequenceService = dataMTabSequenceService; // Is necessary to track when a value really change in order to trigger itemChange event\n\n      this.valueChange = false;\n      this.textAlign = 'text-align';\n      /**\r\n       * Indicates if a numeric value is going to be treated as a number\r\n       */\n\n      this.IsNumericValue = false;\n      /**\r\n       * Array with valid characters for the simple numeric edit mask\r\n       */\n\n      this.validCharactersNumericMask = ['.', '$', '%'];\n    }\n    /**\r\n     * Gets whether is selected\r\n     * Used to show or hide the modalDiv in the control\r\n     */\n\n\n    get isSelected() {\n      return this.validateCurrentControl();\n    }\n\n    ngAfterViewChecked() {\n      this.applyDivStyle();\n      this.modifyChildStyle();\n    }\n\n    ngOnInit() {\n      super.ngOnInit();\n      this.style = new PBStyle();\n      this.maskFormat2.initFormatArrays(this.format, this.validateColumn(this.columnId), `${this.columnId}`);\n      this.modelData = this.logicValue;\n      this.applyFormat();\n    }\n    /**\r\n     * after view init\r\n     * Moved the modelData asignment value to\r\n     * be refreshed by the columnDetectChanges event\r\n     */\n\n\n    ngAfterViewInit() {\n      this.hideSpinners();\n\n      if (!this.changeDetectionDisabled) {\n        this.detectChanges();\n      }\n    }\n    /**\r\n     * Columns detect changes\r\n     * Refresh value for simple numeric-edit\r\n     * because it is related to the value in the model data\r\n     * @param data the refresh data\r\n     */\n\n\n    columnDetectChanges(data) {\n      this.numericModelData = null;\n      this.modelData = this.logicValue;\n      this.applyFormat();\n      super.columnDetectChanges(undefined);\n    }\n    /**\r\n     * @description\r\n     * Returns a string representation of the maximum value allowed by the mask.\r\n     * @returns { string }\r\n     */\n\n\n    get maximum() {\n      if (!this.model.Mask || this.model.Maximun !== undefined) {\n        return this.model.Maximun;\n      } else {\n        return EditMaskService.getNumericMaskMaxValueAsString(this.model.Mask);\n      }\n    }\n    /**\r\n     * Gets numeric model data from modelData\r\n     */\n\n\n    get numericModelData() {\n      return this.modelData != null && this.modelData !== '' ? parseNumber(this.modelData) : null;\n    }\n    /**\r\n     * Sets numeric model data\r\n     */\n\n\n    set numericModelData(value) {\n      this.modelData = value != null ? value : null;\n    }\n    /**\r\n     * Gets string model data from modelData when is a string\r\n     */\n\n\n    get stringModelData() {\n      return this.modelData != null ? this.modelData.toString() : null;\n    }\n    /**\r\n     * Sets string model data, number and period only\r\n     */\n\n\n    set stringModelData(value) {\n      let newValue = '';\n\n      for (let i = 0; i < value.length; i++) {\n        if (value.charCodeAt(i) > 48 && value.charCodeAt(i) < 57 || value.charCodeAt(i) === 46 && i + 1 !== value.length) {\n          newValue += value.charAt(i);\n        }\n      }\n\n      this.modelData = newValue;\n    }\n    /**\r\n     * @description\r\n     * Returns a string representation of the minimum value allowed by the mask.\r\n     * @returns { string }\r\n     */\n\n\n    get minimum() {\n      if (!this.model.Mask || this.model.Minimum !== undefined) {\n        return this.model.Minimum;\n      } else {\n        return EditMaskService.getNumericMaskMinValueAsString(this.model.Mask);\n      }\n    }\n    /**\r\n     * @description\r\n     * Returns string format of the model.\r\n     * @returns { string }\r\n     */\n\n\n    get format() {\n      return this.model.Format;\n    }\n    /**\r\n     * @description\r\n     * Returns the mask processed by the EditMaskService.\r\n     * @returns { string }\r\n     */\n\n\n    get mask() {\n      const sMask = this.model.Mask ? this.model.Mask : null;\n      return EditMaskService.getNumericMask(sMask);\n    }\n    /**\r\n     * Returns the value of the isNumericValue flag\r\n     */\n\n\n    get isNumericValue() {\n      return this.IsNumericValue;\n    }\n    /**\r\n     * Sets whether is numeric value\r\n     */\n\n\n    set isNumericValue(value) {\n      this.IsNumericValue = value;\n    }\n    /**\r\n     * Returns Spin control boolean value\r\n     */\n\n\n    get spinControl() {\n      return this.model.Spin;\n    }\n    /**\r\n     * Returns Spin control boolean value\r\n     */\n\n\n    get spinIncrement() {\n      return this.model.SpinIncr && this.spinControl && this.model.SpinIncr > 0 ? this.model.SpinIncr : 1;\n    }\n    /**\r\n     * Even if Spin property is set to false or step property is false or undefined, spinners does not dissapear,\r\n     * this function hides spinner in that case.\r\n     */\n\n\n    hideSpinners() {\n      const input = this.elementDW.nativeElement.querySelector('span .k-select');\n\n      if (!this.spinControl && input) {\n        this.rendererDW.setStyle(input, 'display', 'none');\n      }\n    }\n    /**\r\n     * @event itemChanged Triggered when the checkbox change.\r\n     * @param event Event data parameter.\r\n     */\n\n\n    itemChangeHandler(event) {\n      if (!this.focusApplied) {\n        this.disableFormatting = false;\n        this.isNumericValue = false;\n        this.applyFormat();\n        event = event ? event : {};\n        const data = new EventData(event, this.id, this.mapperId);\n        data.avoidItemChanged = !this.isLogicValueDifferentOfServerValue(false);\n        this.updateBuffer();\n        data.args = {\n          fieldName: this.name,\n          data: this.logicValue\n        };\n        /* c8 ignore else */\n\n        if (!data.avoidItemChanged) {\n          this.emitterDW.commandService.run(CommandName.updateBundle, {\n            data,\n            context: this.dataManagerContext,\n            columnId: this.columnId\n          });\n        }\n\n        this.itemChanged.emit(data);\n        this.triggerLastColumnNCCVC(data);\n        this.emitDataManagerEvent('change', data);\n        this.detectChanges();\n      }\n    }\n    /**\r\n     * @event focusInHandler Triggered when the control gets the focus.\r\n     * @param event Event data parameter.\r\n     */\n\n\n    focusInHandler(event) {\n      if (this.focusApplied) {\n        this.isNumericValue = true;\n        this.focusApplied = false;\n        this.detectChanges();\n\n        if (this.focusElement) {\n          this.focusElement.focus();\n        }\n      }\n    }\n    /**\r\n     * Overridden base clickEvent handler to call visual\r\n     * change after all events were triggered\r\n     */\n\n\n    clickEvent(name, event) {\n      super.clickEvent(name, event);\n      this.isNumericValue = true;\n      this.detectChanges();\n      this.applyHighlightClasses();\n      /* c8 ignore else */\n\n      if (this.focusElement) {\n        this.focusElement.focus();\n      }\n    }\n    /**\r\n     * Adds highlight style. If autoselect is true it also calls\r\n     * select() function the first time that column is clicked.\r\n     * Id autoselect is false clears selection the first time that\r\n     * column is clicked.\r\n     */\n\n\n    addHighLight() {\n      /* c8 ignore else */\n      const element = this.focusableElement?.numericInput?.nativeElement;\n\n      if (element) {\n        /* c8 ignore else */\n        if (!element.classList.contains(BaseControlBaseComponent.enableHighLightCssClass)) {\n          this.renderer.addClass(element, BaseControlBaseComponent.enableHighLightCssClass);\n        }\n\n        this.applyAutoSelect(element);\n      }\n    }\n    /**\r\n     * Event used to handle the click over the modalDiv.\r\n     * Set the isSelected property in true, to hide the modalDiv\r\n     */\n\n\n    mouseDownDivHandler(event) {\n      if (!this.validateCurrentControl()) {\n        /* c8 ignore else */\n        if (this.focusElement && this.focusElement['numericWrap'] && this.focusElement['numericWrap'].nativeElement) {\n          const e = document.createEvent('Event');\n          e.initEvent('focus', false, true);\n          this.focusElement['hostElement'].nativeElement.dispatchEvent(e);\n        }\n        /* change event should fire before any of losefocus, getfocus, clickdown, lbuttondown or lbuttonup.\r\n         * Please see the mouseDownHandler in the column-control-component.component.ts with the same effect.\r\n         * Bug 262883 - Bug 262884 - Bug 260084\r\n         */\n\n\n        this.clickColumn(event);\n      }\n\n      this.detectChanges();\n    }\n    /**\r\n     * Determines whether numeric input is MaskedTextBox or\r\n     * a NumericTextBox, it depends of it column has some kind of\r\n     * format. Without format it always be a NumericTextBox.\r\n     * @returns true if it should be shown as a NumericTextBox.\r\n     */\n\n\n    isNumericInput() {\n      return this.model && (this.useFormat || this.editFormat || this.format && this.format.toLowerCase() !== '[general]') ? this.isNumericValue : true;\n    }\n    /**\r\n     * @description\r\n     * Method to update the TextBuffer for the DataWindow\r\n     * @param usePending Indicates if a pending notification should be used.\r\n     * @returns a boolean value indicating if the buffer was updated\r\n     */\n\n\n    updateBuffer() {\n      this.valueChange = true;\n      return super.updateBuffer(false, true);\n    }\n    /**\r\n     * Overrides SetMyStyle to apply styling to the inner components\r\n     * inside the kendo numeric textbox\r\n     * @returns the style object\r\n     */\n\n\n    setMyStyle() {\n      if (this.emitterDW.cancelDynamicStyles) {\n        return null;\n      }\n\n      const result = super.setMyStyle();\n\n      if (result[this.textAlign]) {\n        this.applyAlignment(result);\n      }\n      /* c8 ignore else */\n\n\n      if (this.model.Position) {\n        const widthValue = this.model.Position.Width;\n        result['width'] = `${widthValue}px`;\n        const heightValue = this.model.Position.Height;\n        result['height'] = `${heightValue}px`;\n        const inputElem = this.el.nativeElement.querySelector('.k-input');\n        /* c8 ignore else */\n\n        if (inputElem != null) {\n          this.renderer.setStyle(inputElem, 'height', '100%');\n        }\n      }\n\n      return result;\n    }\n    /**\r\n     * Avoid the bubble of the event,\r\n     * because we need to stay in the same control\r\n     * @param e event object created by angular\r\n     */\n\n\n    arrowKeys(e) {\n      if (!this.disabled) {\n        Utils.preventPropagation(e);\n      }\n    }\n    /**\r\n     * Validate if the activeComponent is the same instance\r\n     */\n\n\n    validateCurrentControl() {\n      return this.focusManagerService.isThisColumnTheActiveComponent(this);\n    }\n    /**\r\n     * Override method to set the correct value mask for empty or null value\r\n     * @param columnType the curent column type\r\n     */\n\n\n    applyFormatForEmptyValue(columnType) {\n      super.applyFormatForEmptyValue(columnType);\n\n      if (columnType === 'decimal') {\n        const decimalMask = this.numericPartMask();\n        this.modelData = decimalMask;\n      }\n    }\n    /**\r\n     * @description\r\n     * The 'classHandler' function call super and adds class if inside grid\r\n     * @returns { string }\r\n     */\n\n\n    classHandler() {\n      return `${super.classHandler()} ${this.isOnGrid && !this.isOnDynamicDatamanager ? 'columnInGrid' : ''}`;\n    }\n    /**\r\n     * Get the valid numeric values from the mask\r\n     * when the value is null or empty\r\n     */\n\n\n    numericPartMask() {\n      let numeric = '';\n      const maskArray = this.powerMask ? this.powerMask.split('') : [];\n\n      for (const c of maskArray) {\n        if (!isNaN(parseInt(c, 10)) || this.validCharactersNumericMask.indexOf(c) > -1) {\n          numeric += c;\n        }\n      }\n\n      return numeric;\n    }\n    /**\r\n     * Applys alignment to the closest input element\r\n     * It should contains the numeric value and it requires\r\n     * to be moved to the position according the text-align value\r\n     * @param style the applied style.\r\n     */\n\n\n    applyAlignment(style) {\n      const textElement = this.el.nativeElement.querySelector('.k-textbox');\n      /* c8 ignore else */\n\n      if (textElement) {\n        this.renderer.setStyle(textElement, this.textAlign, style[this.textAlign]);\n      }\n    }\n    /**\r\n     * Apply 4 style properties to the modaldiv from the hostElement\r\n     * and the element wrap:\r\n     * 1. top\r\n     * 2. left\r\n     * 3.width\r\n     * 4. height\r\n     * Also apply a new z-index and new background for the modaldiv\r\n     */\n\n\n    applyDivStyle() {\n      const nativeElement = this.modalDiv?.nativeElement;\n\n      if (nativeElement) {\n        let properties = ['top', 'left'];\n        let DOMelement = 'hostElement';\n\n        if (this.dataManagerContext.datamanagerType === 'GridComponent') {\n          this.renderer.setStyle(nativeElement, 'position', 'absolute');\n        } else {\n          this.applyStyle(properties, DOMelement);\n        }\n\n        properties = ['width', 'height'];\n        DOMelement = 'numericWrap';\n        this.applyStyle(properties, DOMelement);\n        this.renderer.setStyle(nativeElement, 'z-index', 3);\n        this.renderer.setStyle(nativeElement, 'background-color', 'Transparent');\n      }\n    }\n    /**\r\n     * Apply style to the modalDiv with the renderer function if the properti exist\r\n     * @param properties array of properties to apply\r\n     * @param DOMelement element to get the value properties\r\n     */\n\n\n    applyStyle(properties, DOMelement) {\n      properties.forEach(element => {\n        const property = this.focusElement && this.focusElement[DOMelement] && this.focusElement[DOMelement].nativeElement ? getComputedStyle(this.focusElement[DOMelement].nativeElement)[element] : null;\n        /* c8 ignore next 3 */\n\n        if (property != null && this.modalDiv && this.modalDiv.nativeElement) {\n          this.renderer.setStyle(this.modalDiv.nativeElement, element, property);\n        }\n      });\n    }\n    /**\r\n     * Modify the style from element ref that can't be reach in the kendo component\r\n     */\n\n\n    modifyChildStyle() {\n      if (this.el && this.el.nativeElement) {\n        const numericWrap = this.el.nativeElement.querySelector('.k-numeric-wrap');\n        const visualColor = this.backMode === 1 ? 'transparent' : this.backColorFromVisuals;\n\n        if (numericWrap && visualColor != null) {\n          this.renderer.setStyle(numericWrap, 'background-color', visualColor);\n        }\n      }\n    }\n\n  };\n\n  DwSimpleNumericEditMaskComponent.ɵfac = function DwSimpleNumericEditMaskComponent_Factory(t) {\n    return new (t || DwSimpleNumericEditMaskComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(MaskFormatService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(FocusManagerService), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(DataManagerTabSequenceService, 8));\n  };\n\n  DwSimpleNumericEditMaskComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: DwSimpleNumericEditMaskComponent,\n    selectors: [[\"wm-dw-simple-numeric-edit-mask\"]],\n    viewQuery: function DwSimpleNumericEditMaskComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c11, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.modalDiv = _t.first);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 3,\n    consts: [[3, \"click\", 4, \"ngIf\"], [\"wmMaskValidator\", \"\", \"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"hostComponent\", \"value\", \"min\", \"max\", \"autoCorrect\", \"readonly\", \"format\", \"ngStyle\", \"spinners\", \"step\", \"ngClass\", \"border\", \"box-shadow\", \"valueChange\", \"blur\", \"click\", \"dblclick\", \"keydown.tab\", \"keydown.arrowup\", \"keydown.arrowdown\", \"keydown.shift.tab\", 4, \"ngIf\"], [\"wmPBControls\", \"\", \"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"readonly\", \"ngStyle\", \"hostComponent\", \"ngClass\", \"ngModel\", \"border\", \"box-shadow\", \"ngModelChange\", \"blur\", \"focus\", \"click\", \"dblclick\", \"keydown.tab\", \"keydown.shift.tab\", \"keydown.arrowup\", \"keydown.arrowdown\", 4, \"ngIf\"], [3, \"click\"], [\"modalDiv\", \"\"], [\"wmMaskValidator\", \"\", \"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"hostComponent\", \"value\", \"min\", \"max\", \"autoCorrect\", \"readonly\", \"format\", \"ngStyle\", \"spinners\", \"step\", \"ngClass\", \"valueChange\", \"blur\", \"click\", \"dblclick\", \"keydown.tab\", \"keydown.arrowup\", \"keydown.arrowdown\", \"keydown.shift.tab\"], [\"focusElement\", \"\"], [\"wmPBControls\", \"\", \"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"readonly\", \"ngStyle\", \"hostComponent\", \"ngClass\", \"ngModel\", \"ngModelChange\", \"blur\", \"focus\", \"click\", \"dblclick\", \"keydown.tab\", \"keydown.shift.tab\", \"keydown.arrowup\", \"keydown.arrowdown\"]],\n    template: function DwSimpleNumericEditMaskComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, DwSimpleNumericEditMaskComponent_div_0_Template, 2, 0, \"div\", 0);\n        i0.ɵɵtemplate(1, DwSimpleNumericEditMaskComponent_kendo_numerictextbox_1_Template, 2, 15, \"kendo-numerictextbox\", 1);\n        i0.ɵɵtemplate(2, DwSimpleNumericEditMaskComponent_kendo_maskedtextbox_2_Template, 2, 9, \"kendo-maskedtextbox\", 2);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !ctx.isSelected && ctx.isNumericInput() && ctx.spinControl);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isNumericInput());\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isNumericInput());\n      }\n    },\n    directives: [i5$1.NumericTextBoxComponent, i5$1.MaskedTextBoxComponent, i6.NgIf, MaskValidatorDirective, ControlsPowerDirective, FocusableDirective, i6.NgStyle, i6.NgClass, i9.NgControlStatus, i9.NgModel],\n    styles: [\"::ng-deep .k-maskedtextbox{display:inline-flex!important}.k-numerictextbox{min-height:unset!important}::ng-deep .k-numeric-wrap .k-input{height:auto!important}.k-textbox{background-color:inherit}\\n\"],\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  DwSimpleNumericEditMaskComponent = __decorate([dataTransfer(['DWsmpNumEdtMsk']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, MaskFormatService, Renderer2, ElementRef, LengthConverter, FocusManagerService, DataManagerEventService, DataManagerTabSequenceService])], DwSimpleNumericEditMaskComponent);\n  return DwSimpleNumericEditMaskComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DwComplexNumericEditMaskComponent = /*#__PURE__*/(() => {\n  let DwComplexNumericEditMaskComponent = class DwComplexNumericEditMaskComponent extends ColumnControlComponent {\n    /* c8 ignore start */\n    constructor(changeDetectorDW, rendererDW, elementDW, lengthConverter, emitterDW, maskFormat2, dataMTabSequenceService) {\n      super(changeDetectorDW, rendererDW, elementDW, lengthConverter, emitterDW, maskFormat2, dataMTabSequenceService);\n      this.changeDetectorDW = changeDetectorDW;\n      this.rendererDW = rendererDW;\n      this.elementDW = elementDW;\n      this.emitterDW = emitterDW;\n      this.maskFormat2 = maskFormat2;\n      this.dataMTabSequenceService = dataMTabSequenceService;\n    }\n    /* c8 ignore stop */\n\n    /**\r\n     * @description\r\n     * Returns the mask processed by the EditMaskService.\r\n     * @returns { string }\r\n     */\n\n\n    get mask() {\n      return EditMaskService.getNumericComplexMask(this.model.Mask);\n    }\n    /**\r\n     * @description\r\n     * Returns the max length of characters that the mask allows.\r\n     * @returns { number }\r\n     */\n\n\n    get maxlength() {\n      return this.model.Maxlength ? this.model.Maxlength : null;\n    }\n    /**\r\n     * Overrides SetMyStyle to apply styling to the inner components\r\n     * inside the kendo masked textbox\r\n     * @returns the style object\r\n     */\n\n\n    setMyStyle() {\n      if (this.emitterDW.cancelDynamicStyles) {\n        return null;\n      }\n\n      const result = super.setMyStyle();\n      /* c8 ignore else */\n\n      if (this.el && this.el.nativeElement.firstElementChild && this.el.nativeElement.firstElementChild.firstElementChild) {\n        this.renderer.setStyle(this.el.nativeElement.firstElementChild.firstElementChild, 'background-color', this.backColor);\n      }\n\n      return result;\n    }\n    /**\r\n     * Gets value\r\n     */\n\n\n    get value() {\n      if (this.shouldForceMask()) {\n        // Force the value to match the mask. Ex: $1.000 to $001.000 by using a mask like $999.000\n        this.modelData = formatNumber(this.logicValue, EditMaskService.formatMaskForIntl(this.mask));\n      }\n\n      return this.modelData;\n    }\n    /**\r\n     * Sets value\r\n     * newValue: typed value in the component\r\n     */\n\n\n    set value(newValue) {\n      // Updates the modelData value. Ex: If placeHolder is 0 then the assigned value will be $022.899\n      // otherwise $22.899\n      this.modelData = newValue; // Set the new value parsed to number. Ex: $123.88 to 123.88\n\n      this.logicValue = parseNumber(newValue != null ? newValue : undefined);\n    }\n    /**\r\n     * Determines if the value must be forced to match the mask to avoid wrong character positioning\r\n     */\n\n\n    shouldForceMask() {\n      return this.logicValue != null && this.modelData != null && this.isNumericMask() && this.mask.length > this.modelData.length; // When current modelData value does not have the same length of the mask (performance)\n    }\n    /**\r\n     * Determines whether is a numeric mask\r\n     * @returns true if numeric mask\r\n     */\n\n\n    isNumericMask() {\n      return this.model.MaskDataType && EditMaskService.isNumericMask(this.model.MaskDataType);\n    }\n    /**\r\n     * Gets prompt character: If the mask is numeric then 0 placehoder is returned otherwise blank (default)\r\n     */\n\n\n    get promptCharacter() {\n      return this.isNumericMask() ? '0' : '';\n    }\n\n  };\n\n  DwComplexNumericEditMaskComponent.ɵfac = function DwComplexNumericEditMaskComponent_Factory(t) {\n    return new (t || DwComplexNumericEditMaskComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MaskFormatService), i0.ɵɵdirectiveInject(DataManagerTabSequenceService, 8));\n  };\n\n  DwComplexNumericEditMaskComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: DwComplexNumericEditMaskComponent,\n    selectors: [[\"wm-dw-complex-numeric-edit-mask\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"ngClass\", \"mask\", \"ngModel\", \"includeLiterals\", \"promptPlaceholder\", \"hostComponent\", \"ngStyle\", \"border\", \"box-shadow\", \"ngModelChange\", \"blur\", \"click\", \"mousedown\", \"dblclick\", \"keydown.tab\", \"keydown.shift.tab\", 4, \"ngIf\"], [\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"ngClass\", \"mask\", \"ngModel\", \"includeLiterals\", \"promptPlaceholder\", \"hostComponent\", \"ngStyle\", \"ngModelChange\", \"blur\", \"click\", \"mousedown\", \"dblclick\", \"keydown.tab\", \"keydown.shift.tab\"], [\"focusElement\", \"\"]],\n    template: function DwComplexNumericEditMaskComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, DwComplexNumericEditMaskComponent_kendo_maskedtextbox_0_Template, 2, 11, \"kendo-maskedtextbox\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.model);\n      }\n    },\n    directives: [i5$1.MaskedTextBoxComponent, i6.NgIf, ControlsPowerDirective, FocusableDirective, i6.NgClass, i9.NgControlStatus, i9.NgModel, i6.NgStyle],\n    styles: [\"\"],\n    changeDetection: 0\n  });\n  DwComplexNumericEditMaskComponent = __decorate([dataTransfer(['DWclxNuEdtMsk']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, LengthConverter, DataManagerEventService, MaskFormatService, DataManagerTabSequenceService])], DwComplexNumericEditMaskComponent);\n  return DwComplexNumericEditMaskComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DwDateTimeEditMaskComponent = /*#__PURE__*/(() => {\n  let DwDateTimeEditMaskComponent = class DwDateTimeEditMaskComponent extends BaseDateTimeComponent {\n    /* c8 ignore start */\n    constructor(changeDetectorDW, rendererDW, elementDW, lengthConverter, emitterDW, emitterColumnDW, maskFormat2, dataMTSequenceService) {\n      super(changeDetectorDW, rendererDW, elementDW, lengthConverter, emitterColumnDW, maskFormat2, dataMTSequenceService);\n      this.changeDetectorDW = changeDetectorDW;\n      this.rendererDW = rendererDW;\n      this.elementDW = elementDW;\n      this.emitterDW = emitterDW;\n      this.emitterColumnDW = emitterColumnDW;\n      this.maskFormat2 = maskFormat2;\n      this.dataMTSequenceService = dataMTSequenceService;\n    }\n    /* c8 ignore stop */\n\n    /**\r\n     * Returns the displayed value of the\r\n     * current component\r\n     */\n\n\n    getValue() {\n      return this.datePickerComponent ? this.datePickerComponent.value : this.dateInputComponent ? this.dateInputComponent.value : parseDate(this.getDisplayValue(), this.mask);\n    }\n\n  };\n\n  DwDateTimeEditMaskComponent.ɵfac = function DwDateTimeEditMaskComponent_Factory(t) {\n    return new (t || DwDateTimeEditMaskComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MaskFormatService), i0.ɵɵdirectiveInject(DataManagerTabSequenceService, 8));\n  };\n\n  DwDateTimeEditMaskComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: DwDateTimeEditMaskComponent,\n    selectors: [[\"wm-dw-date-time-edit-mask\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 2,\n    vars: 2,\n    consts: [[\"wmPBControls\", \"\", \"wmFocusable\", \"\", \"wmMaskValidator\", \"\", 3, \"ngClass\", \"readonly\", \"disabled\", \"formatPlaceholder\", \"placeholder\", \"value\", \"format\", \"hostComponent\", \"ngStyle\", \"spinners\", \"border\", \"box-shadow\", \"keyup\", \"valueChange\", \"blur\", \"click\", \"mousedown\", \"keydown.tab\", \"keydown.shift.tab\", 4, \"ngIf\"], [\"wmPBControls\", \"\", \"wmFocusable\", \"\", \"wmMaskValidator\", \"\", 3, \"ngClass\", \"readonly\", \"disabled\", \"formatPlaceholder\", \"placeholder\", \"value\", \"format\", \"hostComponent\", \"ngStyle\", \"border\", \"box-shadow\", \"valueChange\", \"blur\", \"keyup\", \"click\", \"mousedown\", \"keydown.tab\", \"keydown.shift.tab\", 4, \"ngIf\"], [\"wmPBControls\", \"\", \"wmFocusable\", \"\", \"wmMaskValidator\", \"\", 3, \"ngClass\", \"readonly\", \"disabled\", \"formatPlaceholder\", \"placeholder\", \"value\", \"format\", \"hostComponent\", \"ngStyle\", \"spinners\", \"keyup\", \"valueChange\", \"blur\", \"click\", \"mousedown\", \"keydown.tab\", \"keydown.shift.tab\"], [\"focusElement\", \"\"], [\"wmPBControls\", \"\", \"wmFocusable\", \"\", \"wmMaskValidator\", \"\", 3, \"ngClass\", \"readonly\", \"disabled\", \"formatPlaceholder\", \"placeholder\", \"value\", \"format\", \"hostComponent\", \"ngStyle\", \"valueChange\", \"blur\", \"keyup\", \"click\", \"mousedown\", \"keydown.tab\", \"keydown.shift.tab\"]],\n    template: function DwDateTimeEditMaskComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, DwDateTimeEditMaskComponent_kendo_dateinput_0_Template, 2, 14, \"kendo-dateinput\", 0);\n        i0.ɵɵtemplate(1, DwDateTimeEditMaskComponent_kendo_datepicker_1_Template, 2, 13, \"kendo-datepicker\", 1);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !ctx.dropdownCalendar);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.dropdownCalendar);\n      }\n    },\n    directives: [i5.DateInputComponent, i5.DatePickerComponent, i6.NgIf, ControlsPowerDirective, FocusableDirective, MaskValidatorDirective, i6.NgClass, i6.NgStyle],\n    styles: [\".k-select .k-link .k-icon{font-size:100%}\"],\n    changeDetection: 0\n  });\n  DwDateTimeEditMaskComponent = __decorate([dataTransfer(['DWdteTmEdtMsk']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, LengthConverter, DataManagerEventService, DataManagerEventService, MaskFormatService, DataManagerTabSequenceService])], DwDateTimeEditMaskComponent);\n  return DwDateTimeEditMaskComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DwTimeEditMaskComponent = /*#__PURE__*/(() => {\n  let DwTimeEditMaskComponent = class DwTimeEditMaskComponent extends ColumnControlComponent {\n    /* c8 ignore start */\n    constructor(changeDetector, maskFormat2, renderer2, element, lengthConverter, emitter, dataMTabSequenceService) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter, maskFormat2, dataMTabSequenceService);\n      this.changeDetector = changeDetector;\n      this.maskFormat2 = maskFormat2;\n      this.renderer2 = renderer2;\n      this.element = element;\n      this.emitter = emitter;\n      this.dataMTabSequenceService = dataMTabSequenceService;\n    }\n\n    ngOnInit() {\n      super.ngOnInit();\n      this.style = new PBStyle();\n      this.maskFormat2.initFormatArrays(this.format, this.validateColumn(this.columnId), `${this.columnId}`);\n      this.modelData = this.logicValue;\n      this.applyFormat();\n    }\n    /**\r\n     * @description\r\n     * Gets default mask\r\n     */\n\n\n    get defaultMask() {\n      return EditMaskService.isDateMask(this.maskDataType) ? 'MM/dd/yyyy' : 'hh:mm:ss';\n    }\n    /**\r\n     * @description\r\n     * Returns the mask type received from model.\r\n     * @returns { string }\r\n     */\n\n\n    get maskDataType() {\n      return this.model.MaskDataType;\n    }\n    /**\r\n     * @description\r\n     * Returns the date value of the model.\r\n     * @returns { Date }\r\n     */\n\n\n    get value() {\n      const newDate = Utils.stringToDate(this.logicValue);\n\n      if (this.date == null || this.date.getTime() !== newDate.getTime()) {\n        this.date = newDate;\n      }\n\n      return this.date;\n    }\n    /**\r\n     * @description\r\n     * Sets a date value in the component model.\r\n     * @param value A date with new value to set model property.\r\n     */\n\n\n    set value(value) {\n      this.modelData = value;\n    }\n    /**\r\n     * @description\r\n     * Returns the mask processed by the EditMaskService.\r\n     * Returns a default mask if it does not exists in the model.\r\n     * @returns { string }\r\n     */\n\n\n    get mask() {\n      if (this.model != null && this.model.Mask != null) {\n        return DateTimeFunctions.processPBDateTimeMaskFormat(this.model.Mask);\n      } else {\n        return this.defaultMask;\n      }\n    }\n\n  };\n\n  DwTimeEditMaskComponent.ɵfac = function DwTimeEditMaskComponent_Factory(t) {\n    return new (t || DwTimeEditMaskComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(MaskFormatService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(DataManagerTabSequenceService, 8));\n  };\n\n  DwTimeEditMaskComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: DwTimeEditMaskComponent,\n    selectors: [[\"wm-dw-time-edit-mask\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 2,\n    vars: 11,\n    consts: [[\"wmPBControls\", \"\", \"wmFocusable\", \"\", \"wmMaskValidator\", \"\", \"wmMaskValidator\", \"\", 3, \"format\", \"value\", \"ngClass\", \"readonly\", \"hostComponent\", \"ngStyle\", \"valueChange\", \"blur\", \"click\", \"mousedown\", \"keydown.tab\", \"keydown.shift.tab\"], [\"focusElement\", \"\"]],\n    template: function DwTimeEditMaskComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"kendo-timepicker\", 0, 1);\n        i0.ɵɵlistener(\"valueChange\", function DwTimeEditMaskComponent_Template_kendo_timepicker_valueChange_0_listener($event) {\n          return ctx.value = $event;\n        })(\"blur\", function DwTimeEditMaskComponent_Template_kendo_timepicker_blur_0_listener($event) {\n          return ctx.itemChangeHandler($event);\n        })(\"click\", function DwTimeEditMaskComponent_Template_kendo_timepicker_click_0_listener($event) {\n          return ctx.clickColumn($event);\n        })(\"mousedown\", function DwTimeEditMaskComponent_Template_kendo_timepicker_mousedown_0_listener($event) {\n          return ctx.mouseDownHandler($event);\n        })(\"valueChange\", function DwTimeEditMaskComponent_Template_kendo_timepicker_valueChange_0_listener() {\n          return ctx.updateBuffer();\n        })(\"keydown.tab\", function DwTimeEditMaskComponent_Template_kendo_timepicker_keydown_tab_0_listener($event) {\n          return ctx.tabKeyHandler($event);\n        })(\"keydown.shift.tab\", function DwTimeEditMaskComponent_Template_kendo_timepicker_keydown_shift_tab_0_listener($event) {\n          return ctx.tabKeyHandler($event);\n        });\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"border\", ctx.borderStyle)(\"box-shadow\", ctx.boxBorder);\n        i0.ɵɵproperty(\"format\", ctx.mask)(\"value\", ctx.value)(\"ngClass\", ctx.classHandler())(\"readonly\", ctx.disabled)(\"hostComponent\", ctx)(\"ngStyle\", ctx.setMyStyle())(\"hostComponent\", ctx);\n      }\n    },\n    directives: [i5.TimePickerComponent, ControlsPowerDirective, FocusableDirective, MaskValidatorDirective, i6.NgClass, i6.NgStyle],\n    styles: [\"\"],\n    changeDetection: 0\n  });\n  DwTimeEditMaskComponent = __decorate([dataTransfer(['DWtmEdtMsk']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, MaskFormatService, Renderer2, ElementRef, LengthConverter, DataManagerEventService, DataManagerTabSequenceService])], DwTimeEditMaskComponent);\n  return DwTimeEditMaskComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DwStringEditMaskComponent = /*#__PURE__*/(() => {\n  let DwStringEditMaskComponent = class DwStringEditMaskComponent extends ColumnControlComponent {\n    /* c8 ignore start */\n    constructor(changeDetectorDW, maskFormat2, rendererDW, elementDW, lengthConverter, emitterDW, dataMTabSequenceService) {\n      super(changeDetectorDW, rendererDW, elementDW, lengthConverter, emitterDW, maskFormat2, dataMTabSequenceService);\n      this.changeDetectorDW = changeDetectorDW;\n      this.maskFormat2 = maskFormat2;\n      this.rendererDW = rendererDW;\n      this.elementDW = elementDW;\n      this.emitterDW = emitterDW;\n      this.dataMTabSequenceService = dataMTabSequenceService;\n      /* c8 ignore stop */\n\n      /**\r\n       *  Constant: Rules to be validated in the input value.\r\n       */\n\n      this.rules = EditMaskService.getMaskRules();\n      /**\r\n       * Input of dw string edit mask component to define a character\r\n       * which represents an empty position in the raw value.\r\n       */\n\n      this.promptPlaceholder = '';\n      /**\r\n       * Input of dw string edit mask component.\r\n       * It represents a prompt character for the masked value.\r\n       */\n\n      this.prompt = ' ';\n      /**\r\n       * Determines whether area text box is\r\n       */\n\n      this.IsAreaTextBox = true;\n      /**\r\n       * Reserved characters of dw string edit mask component\r\n       */\n\n      this.reservedChars = ['!', '^', '#', 'a', 'X'];\n      this.internalMask = '';\n    }\n\n    ngOnInit() {\n      this.useEditMask = this.useMaskFormat;\n      /* c8 ignore else */\n\n      if (this.autoSkip) {\n        const obj = EditMaskService.getStringMaskLengthAndLastPosition(this.mask);\n        this.maskLength = obj.length;\n        this.lastInputCharacter = obj.position;\n      }\n\n      super.ngOnInit();\n    }\n\n    ngAfterViewChecked() {\n      if (this.model && this.mask && !this.isAreaTextBox && !this.displayAsPicture) {\n        const input = this.el.nativeElement.querySelector('input');\n        /* c8 ignore else */\n\n        if (input) {\n          const style = this.innerStyle();\n\n          for (const property in style) {\n            if (style.hasOwnProperty(property)) {\n              this.renderer.setStyle(input, property.toString(), style[property]);\n            }\n          }\n        }\n      }\n    }\n    /**\r\n     * @description\r\n     * Method to choose the editable component to apply the selectText.\r\n     * The input elementRef of the BaseComponent is assigned here\r\n     */\n\n\n    get editable() {\n      return this.isAreaTextBox && this.textArea ? this.textArea.nativeElement : this.maskedTextBox && this.maskedTextBox.hostElement ? this.maskedTextBox.hostElement.nativeElement.firstElementChild : undefined;\n    }\n    /**\r\n     * @description\r\n     * Returns the mask of the model.\r\n     * @returns { boolean }\r\n     */\n\n\n    get useMaskFormat() {\n      return !this.useFormat;\n    }\n    /**\r\n     * @description\r\n     * Returns the mask of the model.\r\n     * @returns { string }\r\n     */\n\n\n    get mask() {\n      return this.model.Mask;\n    }\n    /**\r\n     * Gets fixed mask to support literals in the mask\r\n     */\n\n\n    getFixedMask() {\n      let tmpMask = '';\n\n      if (this.model && this.model.Mask) {\n        const currentMask = this.model.Mask;\n        const backslash = '\\\\';\n\n        for (const element of currentMask) {\n          tmpMask += this.reservedChars.indexOf(element) !== -1 ? element : `${backslash}${element}`;\n        }\n      }\n\n      this.fixedMask = tmpMask;\n    }\n    /**\r\n     * Returns the value of the isAreaTextBox flag\r\n     */\n\n\n    get isAreaTextBox() {\n      return this.IsAreaTextBox || this.IsAreaTextBox === undefined || !this.mask;\n    }\n    /**\r\n     * Sets the value of the isAreaTextBox flag\r\n     */\n\n\n    set isAreaTextBox(value) {\n      this.IsAreaTextBox = value;\n    }\n    /**\r\n     * Returns a string version of the model data\r\n     */\n\n\n    get maskedModelData() {\n      return this.modelData ? this.modelData.toString() : null;\n    }\n\n    set maskedModelData(value) {\n      this.modelData = value;\n    }\n    /**\r\n     * @description\r\n     * Gets focusable element inside of the component\r\n     */\n\n\n    get focusableElement() {\n      return this.textArea ? this.validateFocusElement(this.textArea) : this.maskedTextBox;\n    }\n    /**\r\n     * Overriden base clickEvent handler to call visual\r\n     * change after all events were triggered\r\n     */\n\n\n    clickEvent(name, event) {\n      super.clickEvent(name, event);\n      this.isAreaTextBox = false;\n      this.detectChanges();\n\n      if (this.maskedTextBox) {\n        this.maskedTextBox.focus();\n      }\n    }\n    /**\r\n     * @event itemChanged Triggered when the checkbox change.\r\n     * @param event Event data parameter.\r\n     */\n\n\n    itemChangeHandler(event) {\n      this.disableFormatting = false;\n      this.isAreaTextBox = true;\n      this.updateBuffer();\n      super.itemChangeHandler(event);\n    }\n    /**\r\n     * @event itemChanged Triggered when the checkbox change.\r\n     * @param event Event data parameter.\r\n     */\n\n\n    focusOutHandler(event) {\n      this.isAreaTextBox = true;\n      this.detectChanges();\n    }\n    /**\r\n     * Focus in handler\r\n     * @param event Event argument\r\n     */\n\n\n    focusInHandler(event) {\n      if (!event.isTrusted || this.focusApplied) {\n        this.isAreaTextBox = false;\n        this.focusApplied = false;\n        this.detectChanges();\n\n        if (this.maskedTextBox) {\n          this.maskedTextBox.focus();\n        }\n      }\n    }\n    /**\r\n     * Inners style for the input inside the kendo-maskedtextbox\r\n     * @returns the style for the input without the position properties\r\n     */\n\n\n    innerStyle() {\n      const style = _.clone(this.style);\n\n      removePositionProperties(style);\n      removeDisplayProperties(style);\n      return style;\n    }\n    /**\r\n     * @description\r\n     * The 'classHandler' function links the outer css class with borderClass constant css class.\r\n     * @returns { string }\r\n     */\n\n\n    classHandler() {\n      const original = super.classHandler();\n      return ` ${original} ${this.disabledHighLight()} ${this.disabledFocusRect()}`;\n    }\n    /**\r\n     * Overriden function from ColumnControlComponent\r\n     */\n\n\n    applyFormatTo(typeValidation, columnType, columnLength) {\n      const maskObject = this.maskFormat2.applyFormat(typeValidation, this.getControlFormatProperty(), `${this.columnId}`, columnLength, this.useEditMask);\n      this.displayValue = maskObject && maskObject.value ? maskObject.value : this.modelData;\n      this.textColor = maskObject && maskObject.color ? maskObject.color : null;\n      this.displayValue = this.getSparseColumValue() ? this.displayValue : null; // Edit string mask doesn't have to update modelData with displayValue\n      // And it must use noMaskValue with an uppercase or lowercase masks\n\n      if (maskObject.noMaskValue != null) {\n        this.logicValue = this.modelData = maskObject.noMaskValue;\n      }\n    }\n    /**\r\n     * Overriden function from ColumnControlComponent\r\n     */\n\n\n    applyEditFormat() {\n      this.modelData = this.logicValue;\n\n      if (this.modelData && !this.returnModelFromValues() && this.editFormat) {\n        const maskObject = this.maskFormat2.applyEditFormat(this.modelData, this.editFormat, `${this.columnId}`);\n        this.displayValue = maskObject && maskObject.value ? maskObject.value : this.displayValue;\n        this.detectChanges();\n      }\n    }\n    /**\r\n     * Applys auto skip\r\n     */\n\n\n    applyAutoSkip() {\n      if (this.autoSkip && this.maskLength && this.maskedTextBox && this.maskedModelData && this.maskedModelData.length === this.maskLength) {\n        // Checks if caret is positioned after last editable character\n        const input = this.maskedTextBox.hostElement.nativeElement.firstElementChild;\n\n        if (input && input.selectionStart === this.lastInputCharacter + 1) {\n          const internalEvent = {\n            shiftKey: false\n          };\n          this.tabKeyHandler(internalEvent);\n        }\n      }\n    }\n\n    ngDoCheck() {\n      if (this.mask !== this.internalMask) {\n        this.internalMask = this.mask;\n        this.getFixedMask();\n      }\n\n      super.ngDoCheck();\n    }\n    /**\r\n     * Keys down handler. Checks if the mask was completed and\r\n     * autoSkip behavior should be triggered.\r\n     * @param event KeyDown event object.\r\n     */\n\n\n    keyDownHandler(event) {\n      setTimeout(() => this.applyAutoSkip(), 50);\n    }\n    /**\r\n     * Extends original implementation to clear the maskedModelData object\r\n     * Applies detectChanges function and call ngAfterViewInit method to refresh\r\n     * the column values.\r\n     * @param data Data to be used in change detection.\r\n     */\n\n\n    columnDetectChanges(data) {\n      this.maskedModelData = null;\n      super.columnDetectChanges(data);\n    }\n\n  };\n\n  DwStringEditMaskComponent.ɵfac = function DwStringEditMaskComponent_Factory(t) {\n    return new (t || DwStringEditMaskComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(MaskFormatService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(DataManagerTabSequenceService, 8));\n  };\n\n  DwStringEditMaskComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: DwStringEditMaskComponent,\n    selectors: [[\"wm-dw-string-edit-mask\"]],\n    viewQuery: function DwStringEditMaskComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c12, 5);\n        i0.ɵɵviewQuery(_c13, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.maskedTextBox = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.textArea = _t.first);\n      }\n    },\n    inputs: {\n      promptPlaceholder: \"promptPlaceholder\",\n      prompt: \"prompt\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 3,\n    consts: [[3, \"src\", \"ngClass\", \"error\", 4, \"ngIf\"], [\"class\", \"divInput\", \"wmFocusable\", \"\", \"wmPBControls\", \"\", 3, \"ngClass\", \"ngStyle\", \"hostComponent\", 4, \"ngIf\"], [\"kendoTextArea\", \"\", \"wmMaskValidator\", \"\", \"wmFocusable\", \"\", \"wmPBControls\", \"\", \"class\", \"k-form-field\", 3, \"hostComponent\", \"value\", \"ngClass\", \"height\", \"ngStyle\", \"border\", \"box-shadow\", \"readonly\", \"change\", \"click\", \"mousedown\", \"dblclick\", \"focus\", \"keydown.tab\", \"keydown.shift.tab\", 4, \"ngIf\"], [3, \"src\", \"ngClass\", \"error\"], [\"wmFocusable\", \"\", \"wmPBControls\", \"\", 1, \"divInput\", 3, \"ngClass\", \"ngStyle\", \"hostComponent\"], [\"wmMaskValidator\", \"\", \"wmFocusable\", \"\", \"wmPBControls\", \"\", 1, \"edit-mask\", 3, \"hostComponent\", \"mask\", \"value\", \"promptPlaceholder\", \"prompt\", \"rules\", \"readonly\", \"valueChange\", \"change\", \"click\", \"mousedown\", \"dblclick\", \"blur\", \"keydown.tab\", \"keydown.shift.tab\", \"keydown\"], [\"maskedTextbox\", \"\"], [\"kendoTextArea\", \"\", \"wmMaskValidator\", \"\", \"wmFocusable\", \"\", \"wmPBControls\", \"\", 1, \"k-form-field\", 3, \"hostComponent\", \"value\", \"ngClass\", \"ngStyle\", \"readonly\", \"change\", \"click\", \"mousedown\", \"dblclick\", \"focus\", \"keydown.tab\", \"keydown.shift.tab\"], [\"textarea\", \"\"]],\n    template: function DwStringEditMaskComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, DwStringEditMaskComponent_img_0_Template, 1, 2, \"img\", 0);\n        i0.ɵɵtemplate(1, DwStringEditMaskComponent_div_1_Template, 3, 14, \"div\", 1);\n        i0.ɵɵtemplate(2, DwStringEditMaskComponent_textarea_2_Template, 2, 11, \"textarea\", 2);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.visible && ctx.displayAsPicture && ctx.showImage);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.model && ctx.visible && ctx.mask && !ctx.isAreaTextBox && !ctx.displayAsPicture);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.model && ctx.visible && ctx.isAreaTextBox && !ctx.displayAsPicture);\n      }\n    },\n    directives: [i5$1.MaskedTextBoxComponent, i6.NgIf, i6.NgClass, FocusableDirective, ControlsPowerDirective, i6.NgStyle, MaskValidatorDirective, i5$1.TextAreaDirective],\n    styles: [\".k-maskedtextbox .k-textbox{width:99%!important;height:initial!important;border:none!important;padding:0!important;box-shadow:none!important}.divInput[_ngcontent-%COMP%]{background-color:#fff}  .k-textarea{min-height:initial;padding:0}.edit-mask[_ngcontent-%COMP%]{width:100%}\"],\n    changeDetection: 0\n  });\n  DwStringEditMaskComponent = __decorate([dataTransfer(['strDWEdtMask']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, MaskFormatService, Renderer2, ElementRef, LengthConverter, DataManagerEventService, DataManagerTabSequenceService])], DwStringEditMaskComponent);\n  return DwStringEditMaskComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * Removes position properties\r\n * @param style\r\n */\n\n\nfunction removePositionProperties(style) {\n  deleteProperty(style, 'top');\n  deleteProperty(style, 'left');\n  deleteProperty(style, 'right');\n  deleteProperty(style, 'bottom');\n  deleteProperty(style, 'width');\n  deleteProperty(style, 'height');\n}\n/**\r\n * Removes display properties\r\n * @param style object to check\r\n */\n\n\nfunction removeDisplayProperties(style) {\n  deleteProperty(style, 'border-style');\n  deleteProperty(style, 'position');\n}\n/**\r\n * Deletes property from the object\r\n * @param style object to delete property\r\n * @param property string name of the property\r\n */\n\n\nfunction deleteProperty(style, property) {\n  if (style && style[property]) {\n    delete style[property];\n  }\n}\n\nlet DwEditMaskComponent = /*#__PURE__*/(() => {\n  let DwEditMaskComponent = class DwEditMaskComponent {\n    /* c8 ignore next */\n    constructor(renderer2, element) {\n      this.renderer2 = renderer2;\n      this.element = element;\n      this.componentCreated = new EventEmitter();\n    }\n    /**\r\n     * Gets column component inside of DwEditMaskComponent\r\n     * wrapper.\r\n     */\n\n\n    get column() {\n      return this.columnInternal;\n    }\n    /**\r\n     * @description\r\n     * Returns the type of mask according with the mask type received from model.\r\n     * @returns { string }\r\n     */\n\n\n    get controlType() {\n      if (EditMaskService.isNumericMask(this.maskDataType)) {\n        if (EditMaskService.isSimpleNumericMask(this.mask)) {\n          return 'SimpleNumericMask';\n        } else {\n          return 'ComplexNumericMask';\n        }\n      } else {\n        if (EditMaskService.isDateTimeMask(this.maskDataType)) {\n          return 'DateTimeMask';\n        } else {\n          if (EditMaskService.isTimeMask(this.maskDataType)) {\n            return 'TimeMask';\n          } else {\n            return 'StringMask';\n          }\n        }\n      }\n    }\n\n    ngOnInit() {\n      this.componentCreated.emit(this);\n    }\n\n    ngAfterViewInit() {\n      Utils.removeClasses(this.class, this.element.nativeElement, this.renderer2);\n    }\n    /**\r\n     * @description\r\n     * Returns the mask type received from model.\r\n     * @returns { string }\r\n     */\n\n\n    get maskDataType() {\n      return this.model.MaskDataType;\n    }\n    /**\r\n     * @description\r\n     * Returns the mask definition received from model.\r\n     * @returns { string }\r\n     */\n\n\n    get mask() {\n      return this.model.Mask;\n    }\n\n  };\n\n  DwEditMaskComponent.ɵfac = function DwEditMaskComponent_Factory(t) {\n    return new (t || DwEditMaskComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  DwEditMaskComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: DwEditMaskComponent,\n    selectors: [[\"wm-dw-edit-mask\"]],\n    viewQuery: function DwEditMaskComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c14, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.columnInternal = _t.first);\n      }\n    },\n    inputs: {\n      model: \"model\",\n      dataManagerContext: \"dataManagerContext\",\n      class: \"class\"\n    },\n    outputs: {\n      componentCreated: \"componentCreated\"\n    },\n    decls: 5,\n    vars: 5,\n    consts: [[3, \"class\", \"model\", \"dataManagerContext\", 4, \"ngIf\"], [3, \"model\", \"dataManagerContext\"], [\"column\", \"\"]],\n    template: function DwEditMaskComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, DwEditMaskComponent_wm_dw_simple_numeric_edit_mask_0_Template, 2, 4, \"wm-dw-simple-numeric-edit-mask\", 0);\n        i0.ɵɵtemplate(1, DwEditMaskComponent_wm_dw_complex_numeric_edit_mask_1_Template, 2, 4, \"wm-dw-complex-numeric-edit-mask\", 0);\n        i0.ɵɵtemplate(2, DwEditMaskComponent_wm_dw_date_time_edit_mask_2_Template, 2, 4, \"wm-dw-date-time-edit-mask\", 0);\n        i0.ɵɵtemplate(3, DwEditMaskComponent_wm_dw_time_edit_mask_3_Template, 2, 4, \"wm-dw-time-edit-mask\", 0);\n        i0.ɵɵtemplate(4, DwEditMaskComponent_wm_dw_string_edit_mask_4_Template, 2, 4, \"wm-dw-string-edit-mask\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.controlType == \"SimpleNumericMask\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.controlType == \"ComplexNumericMask\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.controlType == \"DateTimeMask\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.controlType == \"TimeMask\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.controlType == \"StringMask\");\n      }\n    },\n    directives: [DwSimpleNumericEditMaskComponent, DwComplexNumericEditMaskComponent, DwDateTimeEditMaskComponent, DwTimeEditMaskComponent, DwStringEditMaskComponent, i6.NgIf],\n    styles: [\"\"],\n    changeDetection: 0\n  });\n  DwEditMaskComponent = __decorate([dataTransfer(['DWmskTxtBx']), __metadata(\"design:paramtypes\", [Renderer2, ElementRef])], DwEditMaskComponent);\n  return DwEditMaskComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nclass TabSequenceUtils {\n  getDataManagerTabSequenceComponent(component) {\n    /* c8 ignore next 3 */\n    if (component instanceof DwEditMaskComponent) {\n      return component.column;\n    }\n\n    return component;\n  }\n\n}\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet ElementTabSequenceDirective = /*#__PURE__*/(() => {\n  class ElementTabSequenceDirective {\n    constructor(hostElement) {\n      this.hostElement = hostElement;\n    }\n\n    get componentInstance() {\n      if (this.hostElement.nativeElement && this.hostElement.nativeElement._childComponent) {\n        const hostComponent = this.hostElement.nativeElement._childComponent;\n        /* c8 ignore else */\n\n        if (hostComponent) {\n          const utils = new TabSequenceUtils();\n          return utils.getDataManagerTabSequenceComponent(hostComponent);\n        }\n      }\n\n      return null;\n    }\n\n  }\n\n  ElementTabSequenceDirective.ɵfac = function ElementTabSequenceDirective_Factory(t) {\n    return new (t || ElementTabSequenceDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  ElementTabSequenceDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: ElementTabSequenceDirective,\n    selectors: [[\"\", \"tabSequence\", \"\"]],\n    inputs: {\n      tabSequenceInternal: [\"tabSequence\", \"tabSequenceInternal\"]\n    }\n  });\n  return ElementTabSequenceDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet RowTabSequenceDirective = /*#__PURE__*/(() => {\n  class RowTabSequenceDirective {\n    constructor(element) {\n      this.element = element;\n    }\n\n    get components() {\n      const baseControlArray = [];\n      this.rowElementsInternal.forEach(element => {\n        if (element.componentInstance && element.componentInstance.tabSequence !== -1 && element.componentInstance.visible && !element.componentInstance.protect) {\n          baseControlArray.push(element.componentInstance);\n        }\n      });\n      /* c8 ignore next 4 */\n\n      return baseControlArray.sort((a, b) => a.tabSequence > b.tabSequence ? 1 : -1);\n    }\n\n    get nativeElement() {\n      return this.element.nativeElement;\n    }\n\n  }\n\n  RowTabSequenceDirective.ɵfac = function RowTabSequenceDirective_Factory(t) {\n    return new (t || RowTabSequenceDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  RowTabSequenceDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: RowTabSequenceDirective,\n    selectors: [[\"\", \"wmRow\", \"\"]],\n    contentQueries: function RowTabSequenceDirective_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, ElementTabSequenceDirective, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.rowElementsInternal = _t);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function RowTabSequenceDirective_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"position\", \"relative\");\n      }\n    }\n  });\n  return RowTabSequenceDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet FreeFormBaseComponent = /*#__PURE__*/(() => {\n  class FreeFormBaseComponent extends BaseDataManagerComponent {\n    constructor(changeDetector, renderer2, element, emitter, dmInteraction, webMapService, dataService, focusManagerService, messageCommandService, lengthConverter, resizeDataManagerService, dataMTabSequenceService, tabControlService) {\n      super(changeDetector, renderer2, element, emitter, webMapService, dataService, focusManagerService, messageCommandService, dmInteraction, lengthConverter, dataMTabSequenceService, tabControlService); // Control flags\n\n      this.lastScrollEventTriggered = 0; // The flag to avoid call the scrollHandle\n\n      this.scrollBarClicked = false; // The flag to avoid move the scroll bar\n\n      this.totalPages = 0; // Indicates the amount of pages in the current DM\n\n      this.totalRows = 0; // Indicates the total amount of rows retrieved from the server side\n\n      this.scrollTop = 0;\n\n      this.scrollContainerScrollListener = () => {};\n    }\n    /**\r\n     * Event Handlers\r\n     */\n\n    /**\r\n     * send the RButtonDown event to the dataManager.\r\n     * @param event default object for every angular event\r\n     * @param context object that contains the data related with the row.\r\n     */\n\n\n    onRightClick(event, context) {\n      let returnValue = false;\n\n      if (this.model[this.currentControlName] !== undefined && WebMapService.currentService.config.showBrowserContextMenu != undefined) {\n        if ((this.model[this.currentControlName].VisualControlType == StyleType.Edit || this.model[this.currentControlName].VisualControlType == StyleType.EditMask) && WebMapService.currentService.config.showBrowserContextMenu) {\n          returnValue = true;\n        }\n      }\n\n      if (!returnValue) {\n        Utils.preventPropagation(event);\n      }\n\n      const data = new EventData(event, this.id, this.mapperId);\n      data.args = {\n        xpos: event.offsetX,\n        ypos: event.offsetY,\n        row: context ? context.rowIndex : null\n      };\n      Utils.setPointerOffset(event.clientX, event.clientY);\n      this.emitDataManagerEvent('RButtonDown', data);\n      return returnValue;\n    }\n    /**\r\n     * Handle the double click event\r\n     * @param event the current javascript event data\r\n     */\n\n\n    doubleClickHandler(event, row) {\n      const dataEvent = new EventData(event, this.id, this.mapperId);\n      dataEvent.event['row'] = this.getEventRow(row);\n      this.emitDataManagerEvent('DWdoubleClick', dataEvent);\n      Utils.preventPropagation(event);\n    }\n    /**\r\n     * Handle the double click event in scrollbar to avoid the propagation\r\n     * @param event the current javascript event data\r\n     */\n\n\n    scrollDoubleClickHandler(event) {\n      Utils.preventPropagation(event);\n    }\n    /**\r\n     * Handle the focus event\r\n     * @param event the current javascript event data\r\n     */\n\n\n    focusDMEventHandler(event) {\n      const dataEvent = new EventData(event, this.id, this.mapperId);\n      this.emitDataManagerEvent('getfocus', dataEvent);\n    }\n    /**\r\n     * Returns an array of RowTabSequenceDirective\r\n     * type that represents the visual dom rows\r\n     */\n\n\n    get rows() {\n      return this.tabRowCollection ? this.tabRowCollection.toArray() : [];\n    }\n    /**\r\n     * Returns the current data manager type name\r\n     */\n\n\n    get dataManagerType() {\n      return DatamanagerType.freeFormComponent;\n    }\n    /**\r\n     * Gets the last displayed row\r\n     */\n\n\n    get lastVisibleRow() {\n      return this.currentVisibleRows ? this.currentVisibleRows.length - 1 : null;\n    }\n    /**\r\n     * Gets the row number for events\r\n     */\n\n\n    getEventRow(row) {\n      return row === 0 ? row : this.lastSelectionChangedRow;\n    }\n    /**\r\n     * Gets row focus indicator value\r\n     */\n\n\n    get rowFocusIndicatorValue() {\n      return this.model.RowFocusIndicatorValue;\n    }\n    /**\r\n     * Shows summary at the end of the registries\r\n     */\n\n\n    get showSummary() {\n      return this.totalItems > 0 && this.visiblePageEnd >= this.totalItems;\n    }\n\n    validatesContainerWidth(columnModels) {\n      let maxLeft = 0;\n\n      if (columnModels) {\n        const columns = Object['values'](columnModels); // eslint-disable-next-line prefer-spread\n\n        maxLeft = Math.max.apply(Math, Array.prototype.map.call(columns, e => {\n          return e.Visible ? Utils.getPositionValue(e, 'X') + Utils.getPositionValue(e, 'Width') : 0;\n        }));\n      }\n\n      return maxLeft;\n    }\n    /**\r\n     * Determines if the position is out of the total items range.\r\n     */\n\n\n    isOutOfBounds(position) {\n      if (position > this.totalItems) {\n        return {\n          position: this.totalItems,\n          outOfBounds: true\n        };\n      } else if (position < 1) {\n        return {\n          position: 1,\n          outOfBounds: true\n        };\n      }\n\n      return {\n        position,\n        outOfBounds: false\n      };\n    }\n    /**\r\n     * Get the items in an specified range\r\n     * Overrides original behavior to include fix for #158029\r\n     * Skip adjustment is not necessary in grids then moved to freeformbase implementation.\r\n     * @param rangeStart The index of the first element to retrieve\r\n     * @param items The amount of items to retrieve from server\r\n     * @param params An object that contains special control parameters\r\n     */\n\n\n    getPage(rangeStart, items, params, filter) {\n      this.skip = rangeStart;\n      super.getPage(rangeStart, items, params, filter);\n    }\n    /**\r\n     * Method to know if the freeform haven't data\r\n     */\n\n\n    isEmptyDatamanager() {\n      return this.rowCollection && this.rowCollection.length === 0 && this.totalRows === 0;\n    }\n    /**\r\n     * Set class of clicked row.\r\n     * @param rowIndex index base 0 of row selected.\r\n     */\n\n\n    isSelected(rowIndex) {\n      const normalizedIndex = this.visiblePageStart + rowIndex;\n      return this.visibleRows > 1 && this.currentSelectedRows && this.currentSelectedRows.indexOf(normalizedIndex) > -1;\n    }\n    /**\r\n     * Determines whether current row is\r\n     * @param rowIndex row index\r\n     * @returns true if current row\r\n     */\n\n\n    isCurrentRow(rowIndex) {\n      if (this.rowFocusIndicatorValue) {\n        const normalizedIndex = this.visiblePageStart + rowIndex;\n        return this.currentRow === normalizedIndex;\n      }\n\n      return false;\n    }\n    /**\r\n     * Apply custom css to prevent overlapping\r\n     */\n\n\n    detailsContainerClass() {\n      return this.linesIndddw() ? 'detailsContainerDddw' : 'detailsContainer';\n    }\n    /**\r\n     * Gets scrollWidth of first row element\r\n     * @returns get scrollWidth of first row element\r\n     */\n\n\n    tryGetWidthRow() {\n      return this.rowCollection && this.rowCollection.first && this.rowCollection.first.nativeElement && this.rowCollection.first.nativeElement.firstElementChild ? this.rowCollection.first.nativeElement.firstElementChild.scrollWidth : 0;\n    }\n    /**\r\n     * Gets scrollWidth of header element\r\n     * @returns get scrollWidth of header\r\n     */\n\n\n    tryGetWidthHeader() {\n      return this.headerContainer && this.headerContainer.nativeElement ? this.headerContainer.nativeElement.scrollWidth : 0;\n    }\n    /**\r\n     * Move the DW to the first page\r\n     */\n\n\n    moveToFirstVisiblePage() {\n      this.getPage(1, this.pageSize);\n    }\n    /**\r\n     * Move the DW to the last page\r\n     */\n\n\n    moveToLastVisiblePage() {\n      this.getPage(this.totalRows - this.pageSize, this.pageSize);\n    }\n    /**\r\n     * Custom focus created to handle focus on details when a single div is focus.\r\n     * @param event focus event\r\n     * @param datamanagercontext datamanagercontext\r\n     */\n\n\n    divFocusHandler(event, datamanagercontext) {\n      if (!this.focusApplied) {\n        this.detectChanges();\n        this.dataManagerContext = datamanagercontext;\n        this.notifyDataManagerCurrentRow();\n        this.focusIn(event);\n      }\n    }\n    /**\r\n     * Selects current row when it comes from\r\n     * server update\r\n     */\n\n\n    selectCurrentRowColumn(useFirstColumn) {\n      if (!this.isDropDownDataWindow() && this.isInVisiblePage(this.currentRow)) {\n        const logicRowIndex = this.currentRow - this.visiblePageStart;\n        const domRow = !!this.rowCollection ? this.rowCollection.toArray()[logicRowIndex] : undefined;\n        /* c8 ignore else */\n\n        if (domRow) {\n          const column = useFirstColumn ? null : this.currentControlName ? this.currentControlName : null;\n          this.applyFocusToSelectedColumn(domRow.nativeElement, column, false);\n          this.detectChanges();\n        }\n      }\n    }\n    /**\r\n     * Calls get page function and move to previous page\r\n     * @param newPosition New row position\r\n     * @param params An object that contains special control parameters\r\n     */\n\n\n    moveToPreviousPage(newPosition, params) {\n      // Calculates start position of page.\n      let start = this.visiblePageEnd - this.pageSize + 1; // Validate Range\n\n      start = start < 1 ? 1 : start; // Retrieve page.\n\n      this.getPage(start, this.pageSize, params);\n    }\n    /**\r\n     * Calls get page from a new position\r\n     * @param newPosition New row position\r\n     * @param params An object that contains special control parameters\r\n     */\n\n\n    moveToNextPage(newPosition, params, filter) {\n      // If it moves just one or it moves an entire visible sector.\n      const start = newPosition === 1 ? this.visiblePageStart : this.scrollPosition; // Validate Range.\n\n      const pageSize = start + this.pageSize - 1 > this.totalItems ? this.totalItems - start + 1 : this.pageSize; // Retrieve page.\n\n      this.getPage(start, pageSize, params, filter);\n    }\n    /**\r\n     * Determines if the event should apply key move. Key move only is\r\n     * applied if datamanager is not requesting data (isSynchronizing) to\r\n     * server and there is a current column; optional a move can be perform if\r\n     * there isn't a current column but movement is perform with arrow keys over\r\n     * a compute component.\r\n     * @param event Event\r\n     * @returns true if move should be applied.\r\n     */\n\n\n    shouldApplyKeyMove(event) {\n      return (this.currentColumn || event.key === 'ArrowDown' || event.key === 'ArrowUp') && !this.isSynchronizing;\n    }\n    /**\r\n     * Updates the values of start and end of current visible sector.\r\n     * @param moves The number of moves to be applied.\r\n     * @returns true if page changed and false if it didn't.\r\n     */\n\n\n    updatePageStartAndPageEnd(moves) {\n      let start = this.visiblePageStart + moves;\n      let end = this.visiblePageEnd + moves;\n\n      if (end > this.totalItems) {\n        start = this.totalItems - this.visibleRows + 1;\n        end = this.totalItems;\n        return this.updatePageValuesIfNeeded(start, end, true);\n      }\n\n      if (start < 1) {\n        start = 1;\n        end = this.visibleRows;\n        return this.updatePageValuesIfNeeded(start, end, false);\n      }\n\n      this.visiblePageStart = start;\n      this.visiblePageEnd = end;\n      return true;\n    }\n    /**\r\n     * Updates page values if needed\r\n     * @param start value start\r\n     * @param end value end\r\n     * @param scroll check if scrollPosition should be updated.\r\n     * @returns true if page is updated and false if it wasn't.\r\n     */\n\n\n    updatePageValuesIfNeeded(start, end, scroll) {\n      if (start !== this.visiblePageStart || end !== this.visiblePageEnd) {\n        this.visiblePageStart = start;\n        this.visiblePageEnd = end;\n        /* c8 ignore else */\n\n        if (scroll) {\n          this.scrollPosition = start;\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n    /**\r\n     * Calls get page function\r\n     * @param skip Skip index\r\n     */\n\n\n    pageChange(skip, params, filter) {\n      this.skip = skip;\n      this.pageSize = this.visibleRows > this.pageSize ? this.visibleRows : this.pageSize;\n      this.getPage(this.skip, this.pageSize, params, filter);\n    }\n    /**\r\n     * Returns true when the displayed row is inside the\r\n     * current visible page\r\n     */\n\n\n    notDisplayedRowInPage() {\n      return (this.displayedRow > this.visiblePageEnd || this.displayedRow < this.visiblePageStart) && this.displayedRow > 0;\n    }\n    /**\r\n     * Should display group header\r\n     * @param item the current row\r\n     * @returns true if display group header\r\n     */\n\n\n    shouldDisplayGroupHeader(item) {\n      if (this.groupHeader && this.groups) {\n        return item[0].isHeader;\n      }\n\n      return false;\n    }\n    /**\r\n     * Should display group trailer\r\n     * @param item  the current row\r\n     * @returns true if display group trailer\r\n     */\n\n\n    shouldDisplayGroupTrailer(item) {\n      if (this.groupTrailer && this.groups) {\n        return item[0].isTrailer;\n      }\n\n      return false;\n    }\n    /**\r\n     * Gets group column\r\n     * @param index The group index\r\n     * @returns group column\r\n     */\n\n\n    getGroupColumn(index) {\n      return this.groups[index].by[0];\n    }\n    /**\r\n     * Gets group column index\r\n     * @param columnName the column\r\n     * @returns group column index\r\n     */\n\n\n    getGroupColumnIndex(columnName) {\n      return this.columnModels[columnName].ColumnId;\n    }\n\n  }\n\n  FreeFormBaseComponent.ɵfac = function FreeFormBaseComponent_Factory(t) {\n    return new (t || FreeFormBaseComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(DmInteractionService, 8), i0.ɵɵdirectiveInject(i1.WebMapService), i0.ɵɵdirectiveInject(DMDataService), i0.ɵɵdirectiveInject(FocusManagerService), i0.ɵɵdirectiveInject(MessageCommandService), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(ResizeDataManagerService, 8), i0.ɵɵdirectiveInject(DataManagerTabSequenceService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n  };\n\n  FreeFormBaseComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: FreeFormBaseComponent,\n    selectors: [[\"ng-component\"]],\n    contentQueries: function FreeFormBaseComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, RowTabSequenceDirective, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tabRowCollection = _t);\n      }\n    },\n    viewQuery: function FreeFormBaseComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c15, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollContainer = _t.first);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function FreeFormBaseComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return FreeFormBaseComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet ButtonsService = /*#__PURE__*/(() => {\n  class ButtonsService {\n    constructor() {\n      this.defaultButtons = [];\n      this.cancelButtons = [];\n    }\n    /**\r\n     * Register new command buttons\r\n     * @param button CommandButton reference that is going to be added\r\n     */\n\n\n    registerDefaultButton(button) {\n      /* c8 ignore else*/\n      if (this.defaultButtons.indexOf(button) === -1) {\n        this.defaultButtons.push(button);\n      }\n    }\n    /**\r\n     * Register new command cancel buttons\r\n     * @param button CommandButton reference that is going to be added\r\n     */\n\n\n    registerCancelButton(button) {\n      /* c8 ignore else*/\n      if (this.cancelButtons.indexOf(button) === -1) {\n        this.cancelButtons.push(button);\n      }\n    }\n    /**\r\n     * Validates if the window has default buttons\r\n     */\n\n\n    hasDefaultButtons() {\n      return this.defaultButtons.length > 0;\n    }\n    /**\r\n     * Validates if the window has cancel buttons\r\n     */\n\n\n    hasCancelButtons() {\n      return this.cancelButtons.length > 0;\n    }\n    /**\r\n     * Gets las default button in the collection\r\n     */\n\n\n    get lastDefaultButton() {\n      return this.defaultButtons[this.defaultButtons.length - 1];\n    }\n    /**\r\n     * Gets last cancel button in the collection\r\n     */\n\n\n    get lastCancelButton() {\n      return this.cancelButtons[this.cancelButtons.length - 1];\n    }\n    /**\r\n     * Gets las default button in the collection\r\n     */\n\n\n    get defaultButtonsCollection() {\n      return this.defaultButtons;\n    }\n    /**\r\n     * Gets the cancel button collection\r\n     */\n\n\n    get cancelButtonsCollection() {\n      return this.cancelButtons;\n    }\n    /**\r\n     * Removes the default buttons from the list\r\n     */\n\n\n    removeDefaultButton(button) {\n      const index = this.defaultButtons.indexOf(button);\n      /* c8 ignore else*/\n\n      if (index > -1) {\n        this.defaultButtons.splice(index, 1);\n      }\n    }\n    /**\r\n     * Removes the cancel buttons from the list\r\n     */\n\n\n    removeCancelButton(button) {\n      const index = this.cancelButtons.indexOf(button);\n      /* c8 ignore else*/\n\n      if (index > -1) {\n        this.cancelButtons.splice(index, 1);\n      }\n    }\n    /**\r\n     * Removes the buttons from the list\r\n     */\n\n\n    removeRegisters() {\n      this.defaultButtons = [];\n    }\n\n  }\n\n  ButtonsService.ɵfac = function ButtonsService_Factory(t) {\n    return new (t || ButtonsService)();\n  };\n\n  ButtonsService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ButtonsService,\n    factory: ButtonsService.ɵfac,\n    providedIn: 'root'\n  });\n  return ButtonsService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nvar MoveFrame = /*#__PURE__*/(() => {\n  (function (MoveFrame) {\n    MoveFrame[MoveFrame[\"OutOfBounds\"] = 0] = \"OutOfBounds\";\n    MoveFrame[MoveFrame[\"InVisiblePage\"] = 1] = \"InVisiblePage\";\n    MoveFrame[MoveFrame[\"NextPage\"] = 2] = \"NextPage\";\n    MoveFrame[MoveFrame[\"PrevPage\"] = 3] = \"PrevPage\";\n    MoveFrame[MoveFrame[\"UpdateVisibleRows\"] = 4] = \"UpdateVisibleRows\";\n    MoveFrame[MoveFrame[\"DoNothing\"] = 5] = \"DoNothing\";\n  })(MoveFrame || (MoveFrame = {}));\n\n  return MoveFrame;\n})();\n\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\nlet WmPagerComponent = /*#__PURE__*/(() => {\n  class WmPagerComponent {\n    constructor() {\n      /**\r\n       * Input properties\r\n       */\n      this.totalPages = 0;\n      this.currentPage = 0;\n      /**\r\n       * Event Emitters\r\n       */\n\n      this.FirstPage = new EventEmitter();\n      this.PreviousPage = new EventEmitter();\n      this.NextPage = new EventEmitter();\n      this.LastPage = new EventEmitter();\n    }\n\n    get value() {\n      return `${this.currentPage}\\\\${this.totalPages}`;\n    }\n    /**\r\n     * Move to the first page\r\n     * @param event the current event object\r\n     */\n\n\n    firstPage(event) {\n      this.FirstPage.emit(event);\n    }\n    /**\r\n     * Move to previous page\r\n     * @param event the current event object\r\n     */\n\n\n    previousPage(event) {\n      this.PreviousPage.emit(event);\n    }\n    /**\r\n     * Move to the next page\r\n     * @param event the current event object\r\n     */\n\n\n    nextPage(event) {\n      this.NextPage.emit(event);\n    }\n    /**\r\n     * Move to the last page\r\n     * @param event the current event object\r\n     */\n\n\n    lastPage(event) {\n      this.LastPage.emit(event);\n    }\n\n  }\n\n  WmPagerComponent.ɵfac = function WmPagerComponent_Factory(t) {\n    return new (t || WmPagerComponent)();\n  };\n\n  WmPagerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: WmPagerComponent,\n    selectors: [[\"wm-pager\"]],\n    inputs: {\n      totalPages: \"totalPages\",\n      currentPage: \"currentPage\"\n    },\n    outputs: {\n      FirstPage: \"FirstPage\",\n      PreviousPage: \"PreviousPage\",\n      NextPage: \"NextPage\",\n      LastPage: \"LastPage\"\n    },\n    decls: 15,\n    vars: 1,\n    consts: [[1, \"pager\"], [\"id\", \"first_page\", 3, \"click\"], [1, \"material-icons\"], [\"id\", \"previous_page\", 3, \"click\"], [\"disabled\", \"\", 1, \"summary\"], [\"id\", \"next_page\", 3, \"click\"], [\"id\", \"last_page\", 3, \"click\"]],\n    template: function WmPagerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"button\", 1);\n        i0.ɵɵlistener(\"click\", function WmPagerComponent_Template_button_click_1_listener($event) {\n          return ctx.firstPage($event);\n        });\n        i0.ɵɵelementStart(2, \"i\", 2);\n        i0.ɵɵtext(3, \"first_page\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(4, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function WmPagerComponent_Template_button_click_4_listener($event) {\n          return ctx.previousPage($event);\n        });\n        i0.ɵɵelementStart(5, \"i\", 2);\n        i0.ɵɵtext(6, \" navigate_before \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"span\", 4);\n        i0.ɵɵtext(8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function WmPagerComponent_Template_button_click_9_listener($event) {\n          return ctx.nextPage($event);\n        });\n        i0.ɵɵelementStart(10, \"i\", 2);\n        i0.ɵɵtext(11, \" navigate_next \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(12, \"button\", 6);\n        i0.ɵɵlistener(\"click\", function WmPagerComponent_Template_button_click_12_listener($event) {\n          return ctx.lastPage($event);\n        });\n        i0.ɵɵelementStart(13, \"i\", 2);\n        i0.ɵɵtext(14, \"last_page\");\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵtextInterpolate(ctx.value);\n      }\n    },\n    styles: [\".pager[_ngcontent-%COMP%]{display:inline-block;font-size:20px;width:100%}.summary[_ngcontent-%COMP%]{display:inline-block;width:18%;text-align:center;line-height:24px;margin-left:1%;margin-right:1%}button[_ngcontent-%COMP%]{width:20%}button[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{font-size:20px}\"]\n  });\n  return WmPagerComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet BusyloaderComponent = /*#__PURE__*/(() => {\n  class BusyloaderComponent {\n    constructor(changeDetector) {\n      this.changeDetector = changeDetector;\n    }\n    /**\r\n     * @description\r\n     * Returns the component model.\r\n     * @returns { boolean }\r\n     */\n\n\n    get model() {\n      return this._model;\n    }\n    /**\r\n     * @description\r\n     * Sets the component model.\r\n     * @param value The new value to set model property.\r\n     */\n\n\n    set model(value) {\n      this._model = value;\n    }\n\n    detectChanges() {\n      if (!this.changeDetector['destroyed']) {\n        this.changeDetector.detectChanges();\n      }\n    }\n\n  }\n\n  BusyloaderComponent.ɵfac = function BusyloaderComponent_Factory(t) {\n    return new (t || BusyloaderComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  BusyloaderComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: BusyloaderComponent,\n    selectors: [[\"wm-busyloader\"]],\n    inputs: {\n      model: \"model\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[\"kendogridloading\", \"\", \"class\", \"k-loading-color\", \"style\", \"z-index: 1\", 4, \"ngIf\"], [\"kendogridloading\", \"\", 1, \"k-loading-color\", 2, \"z-index\", \"1\"], [1, \"k-loading-text\"], [1, \"k-loading-image\"], [1, \"k-loading-color\"]],\n    template: function BusyloaderComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, BusyloaderComponent_div_0_Template, 5, 0, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.model);\n      }\n    },\n    directives: [i6.NgIf],\n    styles: [\"\"]\n  });\n  return BusyloaderComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DwPressButtonComponent = /*#__PURE__*/(() => {\n  let DwPressButtonComponent = class DwPressButtonComponent {\n    constructor() {\n      this.press = new EventEmitter();\n      /* c8 ignore next 4 */\n\n      this.step = 0;\n      this.isPressing = false;\n      this.stepTime = this.time ? this.time : 100;\n    }\n    /**\r\n     * Apply step function that emits press event.\r\n     * @param event DOM event action.\r\n     */\n\n\n    applyStep(event) {\n      this.step += 1;\n      event['step'] = this.step;\n      this.press.emit(event);\n    }\n    /**\r\n     * Mouse click handler.\r\n     * It is triggered when mouse down and mouse up are too fast\r\n     * to call applyStep function in the interval.\r\n     * @param event Click event.\r\n     */\n\n\n    mouseClick(event) {\n      if (this.isPressing) {\n        this.isPressing = false;\n        event['step'] = this.step;\n        this.press.emit(event);\n      }\n    }\n    /**\r\n     * Mouse down handler.\r\n     * When button mouses down, the interval to call applyStep is initialized.\r\n     * @param event Mouse down event.\r\n     */\n\n\n    mouseDown(event) {\n      if (event.buttons && event.buttons === 1) {\n        this.step = 0;\n        window.clearInterval(this.interval);\n        this.isPressing = true;\n        this.interval = setInterval(() => {\n          this.applyStep(event);\n        }, this.stepTime);\n      }\n    }\n    /**\r\n     * Mouse up handler.\r\n     * When button mouses up, the interval to call applyStep is cleared.\r\n     * @param event Mouse up event.\r\n     */\n\n\n    mouseUp(event) {\n      this.clearIntervalHandler();\n    }\n    /**\r\n     * Mouse leave handler.\r\n     * When mouse button leaves the button, the interval is cleared.\r\n     * @param event Mouse leave event.\r\n     */\n\n\n    mouseLeave(event) {\n      this.clearIntervalHandler();\n    }\n    /**\r\n     * Mouse move handler.\r\n     * When mouse is moved over the button while click is being pressed,\r\n     * the interval is initialized.\r\n     * @param event Mouse move event.\r\n     */\n\n\n    mouseMove(event) {\n      if (event.buttons && event.buttons === 1) {\n        window.clearInterval(this.interval);\n        this.isPressing = true;\n        this.interval = setInterval(() => {\n          this.applyStep(event);\n        }, this.stepTime);\n      }\n    }\n    /**\r\n     * Clears interval handler and resets isPressing and step flags.\r\n     */\n\n\n    clearIntervalHandler() {\n      if (this.step !== 0) {\n        this.isPressing = false;\n        this.step = 0;\n      }\n\n      window.clearInterval(this.interval);\n    }\n\n  };\n\n  DwPressButtonComponent.ɵfac = function DwPressButtonComponent_Factory(t) {\n    return new (t || DwPressButtonComponent)();\n  };\n\n  DwPressButtonComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: DwPressButtonComponent,\n    selectors: [[\"wm-dw-press-button\"]],\n    viewQuery: function DwPressButtonComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c16, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.pressButton = _t.first);\n      }\n    },\n    inputs: {\n      time: \"time\"\n    },\n    outputs: {\n      press: \"press\"\n    },\n    decls: 2,\n    vars: 0,\n    consts: [[3, \"mouseup\", \"mouseleave\", \"mousemove\", \"mousedown\", \"click\"], [\"pressButton\", \"\"]],\n    template: function DwPressButtonComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0, 1);\n        i0.ɵɵlistener(\"mouseup\", function DwPressButtonComponent_Template_div_mouseup_0_listener($event) {\n          return ctx.mouseUp($event);\n        })(\"mouseleave\", function DwPressButtonComponent_Template_div_mouseleave_0_listener($event) {\n          return ctx.mouseLeave($event);\n        })(\"mousemove\", function DwPressButtonComponent_Template_div_mousemove_0_listener($event) {\n          return ctx.mouseMove($event);\n        })(\"mousedown\", function DwPressButtonComponent_Template_div_mousedown_0_listener($event) {\n          return ctx.mouseDown($event);\n        })(\"click\", function DwPressButtonComponent_Template_div_click_0_listener($event) {\n          return ctx.mouseClick($event);\n        });\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"div[_ngcontent-%COMP%]{min-width:10px;min-height:10px;position:absolute;width:100%;height:100%}\"]\n  });\n  DwPressButtonComponent = __decorate([dataTransfer(['DWprssBtn']), __metadata(\"design:paramtypes\", [])], DwPressButtonComponent);\n  return DwPressButtonComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet FreeformComponent = /*#__PURE__*/(() => {\n  class FreeformComponent extends FreeFormBaseComponent {\n    /* c8 ignore next */\n    constructor(changeDetector, renderer2, element, emitter, dmInteraction, webMapService, dataService, focusManagerService, messageCommandService, lengthConverter, resizeDataManagerService, dataMTabSequenceService, buttonsService, tabControlService, windowFocusElementService) {\n      super(changeDetector, renderer2, element, emitter, dmInteraction, webMapService, dataService, focusManagerService, messageCommandService, lengthConverter, resizeDataManagerService, dataMTabSequenceService, tabControlService);\n      this.changeDetector = changeDetector;\n      this.renderer2 = renderer2;\n      this.element = element;\n      this.emitter = emitter;\n      this.dmInteraction = dmInteraction;\n      this.webMapService = webMapService;\n      this.dataService = dataService;\n      this.focusManagerService = focusManagerService;\n      this.resizeDataManagerService = resizeDataManagerService;\n      this.dataMTabSequenceService = dataMTabSequenceService;\n      this.buttonsService = buttonsService;\n      this.tabControlService = tabControlService;\n      this.windowFocusElementService = windowFocusElementService;\n      /**\r\n       * After the current page is loaded\r\n       */\n\n      this.afterDataLoadedEvent = params => {\n        const isKeyDown = params && params.step != null;\n        const isNgOnInit = params && params.isNgOnInit;\n        this.updateDisplayedRows(isKeyDown, isNgOnInit);\n\n        if (isKeyDown) {\n          setTimeout(() => {\n            this.afterKeyDown(params.event, params.step, params.rowContainer, false);\n          }, 50);\n        }\n\n        if (!this.rowloadedFlag) {\n          this.calculateRowContainerWidth();\n          this.rowloadedFlag = true;\n        }\n\n        this.updateDataManagerControlCurrentRow();\n        this.afterDataLoadedDDDW(params);\n        return true;\n      };\n      /**\r\n       * After a Clear Action event\r\n       */\n\n\n      this.afterClearActionEvent = () => {\n        this.totalItems = 0;\n        this.currentVisibleRows = [];\n        this.currentPage = [];\n        this.visiblePageStart = 1;\n        this.visiblePageEnd = this.visibleRows;\n        this.skip = 1;\n        this.detectChanges();\n        this.emitter.emitColDetectChanges();\n      };\n    }\n    /**\r\n     * Calculates the scroll bar height\r\n     */\n\n\n    get scrollHeight() {\n      const groupBands = this.myDataManager.totalGroupBands;\n      let groupBandAdjust = 0;\n\n      if (groupBands) {\n        groupBandAdjust = this.detailsHeight * groupBands.totalHeaderBands + this.detailsHeight * groupBands.totalTrailerBands;\n      }\n\n      return this.firstRowLastPage() * this.detailsHeight + this.dataManagerControlHeight + groupBandAdjust;\n    }\n    /* Get the current DM content width */\n\n\n    get dmViewWidth() {\n      const widthReduction = this.vScrollBar ? this.widthContainer - this.scrollbarWidth : this.widthContainer;\n      return this.hScrollBar && this.scrollHeight > this.detailsHeight ? widthReduction : this.widthContainer;\n    }\n    /**\r\n     * Gets the HScrollBar property value\r\n     */\n\n\n    get hScrollBar() {\n      return this.model.HScrollBar === true && this.rowWidth > this.widthContainer;\n    }\n    /**\r\n     * Sets the scrollbar that request new records\r\n     */\n\n\n    get recordScrollbar() {\n      return this.vScrollBar && this.totalItems > this.visibleRows;\n    }\n    /**\r\n     * Gets freeform BackGround Color\r\n     */\n\n\n    get color() {\n      return this.model.BackColor ? this.model.BackColor : Utils.validColorMapped(this.model.Color) ? this.model.Color : undefined;\n    }\n    /**\r\n     * Returns true if the pager must be used\r\n     * instead of the virtual scrolling.\r\n     */\n\n\n    get usePager() {\n      if (this.model.UsePager) {\n        this.pageSize = this.visibleRows;\n        this.model.VScrollBar = false;\n        return true;\n      }\n\n      return false;\n    }\n\n    get RowContainerWidth() {\n      return `${this.rowWidth}px`;\n    }\n    /**\r\n     * Returns the current RowWidth container\r\n     */\n\n\n    get rowWidth() {\n      if (!this.rowContainerWidth) {\n        this.calculateRowContainerWidth();\n      }\n\n      return this.rowContainerWidth;\n    }\n    /**\r\n     * Gets the total items obtained from page request\r\n     */\n\n\n    get totalItems() {\n      return this.isDropDownDataWindow() ? this.model.InnerTotalItems : this.model.TotalItems + this.reserveSummaryHeight;\n    }\n    /*\r\n     *  Sets TotalItems obtained from page request\r\n     */\n\n\n    set totalItems(value) {\n      if (this.isDropDownDataWindow()) {\n        this.model.InnerTotalItems = value;\n      } else {\n        this.model.TotalItems = value;\n      }\n    }\n    /* c8 ignore start */\n\n\n    ngOnInit() {\n      super.ngOnInit();\n      this.skip = 1;\n      this.visiblePageStart = 1;\n      this.scrollPosition = 1; // Sets the logical page size with value received from model that was\n      // set by DataManager control from an Angular input.\n\n      if (this.model.pageSize) {\n        this.pageSize = this.model.pageSize;\n      }\n\n      if (this.isDropDownDataWindow() && this.currentRow > 1) {\n        this.displayedRow = this.currentRow;\n      }\n\n      this.collectColumnModels();\n      this.visiblePageEnd = this.visibleRows;\n      this.previousVisibleRows = this.visibleRows;\n      this.callCommandFirstVisibleRow();\n      this.prePageChange({\n        isNgOnInit: true\n      });\n      this.resizeSubscription = this.resizeDataManagerService.eventsDM.subscribe(event => this.resizeHandler(event));\n      this.filterSubscription = this.emitter.filterRows.subscribe(filterObject => {\n        if (filterObject.iterate) {\n          this.changeToNextResult(filterObject);\n        } else {\n          this.currentRow = this.scrollPosition = 1;\n          this.afterClearActionEvent();\n          this.getPage(1, this.pageSize, filterObject, filterObject.filter);\n        }\n      }); // Set the last column model in the current DW.\n\n      this.getValidColumns();\n\n      if (!this.isDropDownDataWindow()) {\n        this.dataMTabSequenceService.registerDataManager(this);\n      }\n\n      this.dmInteraction.registerInternalDataManager(this);\n    }\n    /* c8 ignore stop */\n\n\n    ngOnDestroy() {\n      super.ngOnDestroy();\n\n      if (this.wheelListener) {\n        this.wheelListener();\n      }\n\n      if (this.scrollListener) {\n        this.scrollListener();\n      }\n\n      this.scrollContainerScrollListener();\n      this.unsubScrollFF();\n      this.webMapService.core.getEvent().unSubscribe(this.detectChangeSub);\n      this.resizeSubscription.unsubscribe();\n    }\n\n    ngDoCheck() {\n      super.ngDoCheck();\n      const isDirty = this.dirty || this.forceDirty;\n\n      if (isDirty || this.shouldScrollTo()) {\n        this.prePageChange();\n\n        if (isDirty) {\n          this.setForceDirty(false);\n        }\n      }\n\n      if (this.syncCurrentColumn() && !isDirty) {\n        this.selectCurrentRowColumn(false);\n      }\n    }\n    /**\r\n     * Syncs the currentColumn prop when the currentControlName is modified in the\r\n     * model by a server response\r\n     */\n\n\n    syncCurrentColumn() {\n      if (this.currentControlName && this.currentColumn && this.columnModels) {\n        // Gets the ColumnId of the currentControlControlName from columnModels\n        const currentControlNameColId = this.columnModels[this.currentControlName]?.ColumnId; // If the currentColumn value is not the same that ColumnId in columnModels\n\n        if (currentControlNameColId && this.currentColumn !== currentControlNameColId) {\n          // Updates the ColumnId from columnModels\n          this.currentColumn = currentControlNameColId; // Select the column\n\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /**\r\n     * Register two event handlers, MouseWheelEvent for safari, wheel for the others.\r\n     */\n\n\n    ngAfterViewInit() {\n      super.ngAfterViewInit();\n\n      if (this.detailsContainer && this.detailsContainer.nativeElement) {\n        this.scrollTop = this.scrollContainer ? this.scrollContainer.nativeElement.scrollTop : 0;\n        this.wheelListener = this.renderer2.listen(this.detailsContainer.nativeElement, 'wheel', event => this.executeWheelEvent(event));\n        this.scrollListener = this.renderer2.listen(this.detailsContainer.nativeElement, Utils.isFirefoxBrowser() ? 'DOMMouseScroll' : 'scroll', event => this.executeWheelEvent(event));\n\n        if (!Utils.isFirefoxBrowser()) {\n          // If using a good browser\n          this.scrollContainerScrollListener = this.renderer2.listen(this.scrollContainer.nativeElement, 'scroll', event => this.scrollHandler(event));\n        } else {\n          // If using firefox\n          this.fireFoxScrollingRoutine();\n        }\n      } // To review the dirty flag after a server action\n\n\n      this.detectChangeSub = this.webMapService.core.getEvent().subscribe('detectChanges', url => {\n        this.ngDoCheck();\n      }); // Initialize cancel dynamics style flag\n\n      this.emitter.cancelDynamicStyles = this.cancelDynamicStyles;\n    }\n\n    ngAfterViewChecked() {\n      this.scrollLeft();\n    }\n    /**\r\n     * Overrides original empty method to handle the dddw keyboard interaction with the\r\n     * freeforms datamanagers\r\n     * @param event the current javascript event\r\n     */\n\n\n    dropDDWKeyboardInteractionHandler(event) {\n      this.currentColumn = 1;\n      this.scrollPosition = this.currentRow;\n      this.displayedRow = this.scrollPosition;\n      const currentRowContainer = this.el.nativeElement.querySelector('.selectedRow');\n      this.keyDownHandler(event, currentRowContainer);\n    }\n    /**\r\n     * Selects row column of dddw popup.\r\n     * @param row Row index of row to be selected\r\n     * @param select Determines whether row should be selected(true) or be unselected(false).\r\n     */\n\n\n    selectRowColumnDDDW(row, select) {\n      if (this.isDropDownDataWindow() && this.isInVisiblePage(row)) {\n        const logicRowIndex = row - this.visiblePageStart;\n        const domRow = this.rowCollection.toArray()[logicRowIndex];\n        this.applySelectionToRowAndColDDDW(domRow, select);\n      }\n    }\n    /**\r\n     * Clears selection of dddw popup.\r\n     */\n\n\n    clearSelectionDDDW() {\n      /* c8 ignore else */\n      if (this.rowCollection && this.rowCollection.length > 0) {\n        const domRow = this.rowCollection.find(row => row.nativeElement.classList.contains(BaseControlBaseComponent.selectedRowCssClass));\n        this.applySelectionToRowAndColDDDW(domRow, false);\n      }\n    }\n    /**\r\n     * Applies selection to first column in a row of a DDDW.\r\n     * @param domRow Row DOM element to apply selection.\r\n     * @param select Determines whether row should be selected(true) or be unselected(false).\r\n     */\n\n\n    applySelectionToRowAndColDDDW(domRow, select) {\n      if (domRow && domRow.nativeElement) {\n        let rowDOM;\n        const column = Object.keys(this.columnModels)[0];\n\n        if (column != null) {\n          rowDOM = domRow.nativeElement.querySelector(`#${column}`);\n        } else {\n          if (domRow.nativeElement.querySelector('.computedContent')) {\n            rowDOM = domRow.nativeElement;\n          }\n        }\n\n        const columnDOM = this.queryKClasses(rowDOM);\n\n        if (columnDOM) {\n          this.applyCSSSelectionToRowAndColDDDW(domRow.nativeElement, columnDOM, select);\n        }\n      }\n    }\n    /**\r\n     * Apply CSS selection clases to row and column of dddw\r\n     * elements in popup.\r\n     * @param rowElement DOM row element.\r\n     * @param colElement DOM column element.\r\n     * @param select Determines whether row should be selected(true) or be unselected(false).\r\n     */\n\n\n    applyCSSSelectionToRowAndColDDDW(rowElement, colElement, select) {\n      if (select) {\n        rowElement.classList.add(BaseControlBaseComponent.selectedRowCssClass);\n        colElement.classList.add(BaseControlBaseComponent.enableHighLightCssClass, BaseControlBaseComponent.enableFocusRectCssClass);\n        colElement.classList.remove(BaseControlBaseComponent.disableHighLightCssClass, BaseControlBaseComponent.disableFocusRectCssClass);\n      } else {\n        rowElement.classList.remove(BaseControlBaseComponent.selectedRowCssClass);\n        colElement.classList.remove(BaseControlBaseComponent.enableHighLightCssClass, BaseControlBaseComponent.enableFocusRectCssClass);\n        colElement.classList.add(BaseControlBaseComponent.disableHighLightCssClass, BaseControlBaseComponent.disableFocusRectCssClass);\n      }\n    }\n    /**\r\n     * Changes to next result retrieved by filtered request.\r\n     */\n\n\n    changeToNextResult(filterObject) {\n      this.selectRowColumnDDDW(this.currentRow, false);\n\n      if (this.currentRow === this.totalItems) {\n        this.visiblePageStart = this.currentRow = 1;\n        this.visiblePageEnd = this.visibleRows;\n        this.pageChange(1, filterObject, filterObject.filter);\n      } else {\n        this.currentRow += 1;\n        const value = this.moveFrame(1, filterObject, false, filterObject.filter);\n\n        if (value === MoveFrame.InVisiblePage || value === MoveFrame.UpdateVisibleRows) {\n          this.selectRowColumnDDDW(this.currentRow, true);\n          this.notifyClickedRowToDDDW(this.currentVisibleRows[this.currentRow - this.visiblePageStart], true);\n        }\n      }\n    }\n    /**\r\n     * Calls pageChange function and change dirty.\r\n     */\n\n\n    prePageChange(params) {\n      let skipRecords;\n\n      if (this.isDropDownDataWindow()) {\n        skipRecords = params ? this.scrollToPosition() : this.scrollPosition;\n      } else {\n        skipRecords = this.scrollToPosition();\n      } // Reload the current data window\n\n\n      this.pageChange(skipRecords, params);\n      this.dirty = false;\n      this.forceDirty = false;\n    }\n    /**\r\n     * After the current selected row has changed\r\n     * We need to calculate the amount of pages to move\r\n     * to load the current expected page\r\n     */\n\n\n    scrollToPosition() {\n      return this.notDisplayedRowInPage() ? this.adjustVisiblePageIndexes(this.displayedRow) : this.skip;\n    }\n    /**\r\n     * Update the value of the current page start\r\n     * and page end according to a given position\r\n     * @param currentIndex the given position\r\n     */\n\n\n    adjustVisiblePageIndexes(currentIndex) {\n      this.visiblePageStart = currentIndex;\n      this.visiblePageEnd = this.visiblePageStart + this.visibleRows - 1; // Validate when the displayedRow is a new row so it is not\n      // included in totalItems yet\n\n      const amountItems = this.totalItems > currentIndex ? this.totalItems : currentIndex;\n\n      if (this.visiblePageEnd > amountItems) {\n        this.visiblePageStart = amountItems - this.visibleRows + 1;\n        this.visiblePageEnd = amountItems;\n        this.callCommandFirstVisibleRow();\n        return this.visiblePageStart;\n      }\n\n      this.callCommandFirstVisibleRow();\n      return currentIndex;\n    }\n    /**\r\n     * Overrides the function that sets current page and ranges\r\n     * @param dataRows The data rows obtained from Bundle\r\n     * @param totalRows  Total rows number\r\n     * @param rangeStart Page range start\r\n     * @param rangeEnd  Page rangeEnd\r\n     */\n\n\n    createRows(dataRows, totalRows, rangeStart, rangeEnd) {\n      this.currentPage = dataRows;\n      this.rangeEnd = rangeEnd;\n      this.rangeStart = rangeStart;\n      this.totalRows = totalRows;\n      this.totalPages = Math.floor(totalRows / this.visibleRows);\n    }\n    /**\r\n     * Used to call the correct method that depends of the parameters.\r\n     * @param event object with the information\r\n     */\n\n\n    executeWheelEvent(event) {\n      this.scrollBarClicked = false;\n\n      if (this.totalItems <= 1) {\n        return;\n      }\n\n      Utils.preventPropagation(event);\n\n      if (!this.isSynchronizing && !this.model.UsePager) {\n        event.deltaY > 0 ? this.moveScrollDown(event) : this.moveScrollUp(event);\n      }\n    }\n    /**\r\n     * event called when the wheel of the mouse was triggered to down direction\r\n     */\n\n\n    moveScrollDown(event) {\n      this.scrollPosition = this.visiblePageStart;\n      this.moveFrame(this.visibleRows);\n    }\n    /**\r\n     * Event called when the wheel of the mouse was triggered to up direction\r\n     */\n\n\n    moveScrollUp(event) {\n      this.scrollPosition = this.visiblePageStart;\n      this.moveFrame(-this.visibleRows);\n    }\n    /**\r\n     * Determines the next or previous DOM sibling of the current row container and\r\n     * calls focusColumn method to apply focus to next row.\r\n     * @param moves The number of moves to be applied. Negative:Previous and Positive:Next\r\n     * @param rowContainer The DOM element of the row that is going to receive focus.\r\n     * @param columnName The name of the column that is going to be focused.\r\n     * @note **navDirection**: Determines direction of the navigation, whether moves variable\r\n     * is positive navigation goes forwards that means that is moving down\r\n     * through DataManager and if moves variable is negative goes upwards\r\n     * that means is moving up through DataManager.\r\n     */\n\n\n    applyFocusToSelectedRow(moves, rowContainer, columnName) {\n      const navDirection = moves > 0;\n      let rowDOM = navDirection ? rowContainer.nextElementSibling ? rowContainer.nextElementSibling.firstElementChild : undefined : rowContainer.previousElementSibling ? rowContainer.previousElementSibling.firstElementChild : undefined;\n\n      if (!rowDOM) {\n        rowDOM = this.rowCollection.toArray()[navDirection ? this.rowCollection.length - 1 : 0];\n      }\n\n      this.applyFocusToSelectedColumn(rowDOM, columnName, !navDirection);\n    }\n    /**\r\n     * Handle the focus event\r\n     * @param event the current javascript event data\r\n     */\n\n\n    focusDMEventHandler(event) {\n      if (!this.isDropDownDataWindow()) {\n        /* c8 ignore else */\n        if (this.windowFocusElementService) {\n          this.windowFocusElementService.focusElement(this);\n        }\n\n        const data = new EventData(event, this.id, this.mapperId);\n        this.focusManagerService.focus(this, data);\n      }\n    }\n    /**\r\n     * Event called when the keydown is triggered\r\n     * 'Enter' key should move to the next row\r\n     * @param event The javascript event object.\r\n     * @param rowContainer The DOM element of the row that is going to receive focus.\r\n     * @param rowClicked Clicked row index\r\n     * @param dataManagerContext Datamanager context\r\n     */\n\n\n    keyDownHandler(event, rowContainer, rowClicked, dataManagerContext) {\n      if (this.shouldApplyKeyMove(event)) {\n        let step = 0;\n\n        switch (event.key) {\n          case 'Enter':\n            this.triggerClickKeyActionDDDW(rowContainer);\n\n            if (this.buttonsService.hasDefaultButtons()) {\n              this.keyDownEvent(event);\n              return;\n            }\n\n            step = 1;\n            break;\n\n          case 'ArrowDown':\n            Utils.preventPropagation(event);\n            step = 1;\n            break;\n\n          case 'ArrowUp':\n            Utils.preventPropagation(event);\n            step = -1;\n            break;\n\n          case 'Tab':\n            if (!this.triggerClickKeyActionDDDW(rowContainer)) {\n              this.keyDownEvent(event);\n            }\n\n            return;\n\n          default:\n            this.keyDownEventWithDelay(event);\n            return;\n        }\n\n        this.applyKeyMove(step, event, rowContainer);\n      } else {\n        this.tryCallClick(event, rowClicked, dataManagerContext);\n        this.keyDownEventWithDelay(event);\n      }\n    }\n    /**\r\n     * Event called when the space bar is pressed\r\n     * 'Enter' key should click the first row\r\n     * @param event The javascript event object.\r\n     * @param rowClicked Clicked row index\r\n     * @param dataManagerContext Datamanager context\r\n     */\n\n\n    tryCallClick(event, rowClicked, dataManagerContext) {\n      if (event.code === 'Space' && rowClicked && dataManagerContext && ColumnControlComponent.allColumnsAreDisabledByTabSequence(this)) {\n        this.itemClick(event, rowClicked, dataManagerContext);\n      }\n    }\n    /**\r\n     * Applies a move made by a key down event.\r\n     * @param step Step to move frame.\r\n     * @param event The javascript event object.\r\n     * @param rowContainer The DOM element of the row that is going to receive focus.\r\n     */\n\n\n    applyKeyMove(step, event, rowContainer) {\n      /* c8 ignore else */\n      if (step) {\n        const params = {\n          step,\n          event,\n          rowContainer\n        };\n        const result = this.isOutOfBounds(this.currentRow + step);\n\n        if (result.outOfBounds) {\n          this.keyDownEvent(event, true);\n        } else {\n          if (this.isInVisiblePage(this.currentRow + step)) {\n            this.afterKeyDown(event, step, rowContainer, true);\n          } else {\n            this.updateKeyDownCurrentRow(step);\n            const value = this.moveFrame(step, params, true);\n\n            if (value === MoveFrame.UpdateVisibleRows) {\n              setTimeout(() => {\n                this.afterKeyDown(event, step, rowContainer, false);\n              }, 50);\n            } else if (value === MoveFrame.DoNothing) {\n              this.updateKeyDownCurrentRow(-step);\n              this.keyDownEvent(event, true);\n            }\n          }\n        }\n      }\n    }\n    /**\r\n     * After key down action.\r\n     * @param event KeyDown event.\r\n     * @param step Position of rows moved with key down action.\r\n     * @param rowContainer DOM row element of row where key action was executed.\r\n     * @param select Determines if row should be selected inside this method, otherwise\r\n     * selection was executed in updateDisplayedRows method before.\r\n     */\n\n\n    afterKeyDown(event, step, rowContainer, select) {\n      if (!this.isDropDownDataWindow()) {\n        if (select) {\n          this.applyFocusToSelectedRow(step, rowContainer, this.getValidColumnName());\n        }\n\n        this.keyDownEvent(event, true);\n      } else if (step !== 0) {\n        this.selectRowColumnDDDW(this.currentRow, false);\n        this.currentRow = this.currentRow + step;\n        this.selectRowColumnDDDW(this.currentRow, true);\n      }\n    }\n    /**\r\n     * Moves the visibleRows window across the\r\n     * retrieved page and moves to the next page\r\n     * or the previous page according to the indicated moves\r\n     * @param moves the number of rows to move forward or backward\r\n     * @param params arguments to control the page movements in the control.\r\n     * @param fromScroll avoids visible page validation.\r\n     * @param filter\r\n     */\n\n\n    moveFrame(moves, params, fromScroll, filter) {\n      // It can't be outside of total items and moves can't be 0\n      const result = this.isOutOfBounds(this.scrollPosition + moves);\n      this.scrollPosition = result.position;\n      this.displayedRow = this.scrollPosition; // Just move focus to selected row.\n\n      if (this.isInVisiblePage(this.scrollPosition) && !fromScroll) {\n        return result.outOfBounds ? MoveFrame.OutOfBounds : MoveFrame.InVisiblePage;\n      } // Updates visible page start and end, returns true if they changed and false\n      // if they didn't.\n\n\n      if (!this.updatePageStartAndPageEnd(moves)) {\n        return MoveFrame.DoNothing;\n      }\n\n      this.callCommandFirstVisibleRow();\n      this.triggerScrollVerticalEvent(); // Move to next page\n\n      if (this.visiblePageEnd > this.rangeEnd) {\n        this.moveToNextPage(moves, params, filter);\n        return MoveFrame.NextPage;\n      } // Move to previous page\n\n\n      if (this.visiblePageStart < this.rangeStart) {\n        this.moveToPreviousPage(moves, params);\n        return MoveFrame.PrevPage;\n      } // Update visible rows\n\n\n      this.updateDisplayedRows();\n      return MoveFrame.UpdateVisibleRows;\n    }\n    /**\r\n     * Triggers scrollVertical event\r\n     */\n\n\n    triggerScrollVerticalEvent() {\n      const data = new EventData({}, this.id);\n      const scrollPos = (this.scrollPosition - 1) * this.detailsHeight;\n      data.args = {\n        scrollpos: scrollPos\n      };\n      this.emitDataManagerEvent('scrollVertical', data);\n    }\n    /**\r\n     *  Calls firstVisibleRowCommand\r\n     */\n\n\n    callCommandFirstVisibleRow() {\n      if (this.visiblePageStart) {\n        const data = {\n          dataManagerId: this.id,\n          firstRow: this.visiblePageStart\n        };\n        this.emitter.commandService.run(CommandName.updateFirstRowOnPage, data);\n      }\n    }\n    /**\r\n     * Updates displayed rows.\r\n     * @param [isKeyDown] Determines if is a key down action\r\n     * @param [isNgOnInit] Determines if it comes from ngOnInit\r\n     */\n\n\n    updateDisplayedRows(isKeyDown, isNgOnInit) {\n      if (this.currentVisibleRows && this.currentVisibleRows.length > 0) {\n        this.currentVisibleRows.length = 0;\n      } // Validate visiblepageEnd to be at least the visibleRowSize\n\n\n      if (this.visiblePageEnd < this.visibleRows) {\n        this.visiblePageEnd = this.visibleRows;\n      } // Validate if updateDisplayedRows was called by ngOnInit to\n      // recalculate visiblePageEnd after DOM renderer\n\n\n      if (isNgOnInit) {\n        this.calculateRowContainerWidth();\n        this.visiblePageEnd = this.visiblePageStart + this.visibleRows - 1;\n        this.scrollPosition = this.visiblePageStart;\n      } // If size change occurs and the pageSize is lower than the visible rows\n\n\n      if (this.visibleRows > this.pageSize) {\n        this.resizeHandler({\n          id: this.id\n        });\n      } // Slice function end not included, that's why a 1 is added.\n\n\n      this.currentVisibleRows = this.currentPage.slice(this.visiblePageStart - this.rangeStart, this.visiblePageEnd - this.rangeStart + 1);\n      const scrollPos = this.firstRowLastPage() === this.visiblePageStart ? this.firstRowLastPage() * this.detailsHeight : (this.visiblePageStart - 1) * this.detailsHeight;\n      this.scrollTop = scrollPos;\n      this.updateDisplayedRowsDDDW(this.currentVisibleRows.length);\n\n      if (!isNgOnInit) {\n        // Clear focus of current row and column component.\n        this.clearInnerFocus();\n      } // Apply Angular changes to visual column components.\n\n\n      this.detectChanges();\n      this.moveScrollBar(scrollPos);\n      let timeToSelect = 300;\n\n      if (!isNgOnInit) {\n        this.getValidColumns(); // If components are being reused time to rendering is less than\n        // when they are built from zero.\n\n        timeToSelect = 50;\n      }\n\n      this.emitter.emitColDetectChanges();\n      setTimeout(() => {\n        // Apply focus to current row and column component.\n        this.applyInnerFocus(isKeyDown);\n      }, timeToSelect);\n    }\n    /**\r\n     * Applies focus to FreeForm.\r\n     */\n\n\n    applyInnerFocus(isKeyDown) {\n      if (this.isDropDownDataWindow()) {\n        if (!isKeyDown) {\n          this.selectRowColumnDDDW(this.currentRow, true);\n        }\n      } else if (this.shouldSelectCurrentRowColumn()) {\n        this.syncCurrentColumn();\n        this.selectCurrentRowColumn();\n      }\n    }\n    /**\r\n     * Clears focus of FreeForm.\r\n     */\n\n\n    clearInnerFocus() {\n      if (this.isDropDownDataWindow()) {\n        this.clearSelectionDDDW();\n      } else if (this.shouldSelectCurrentRowColumn()) {\n        this.focusManagerService.clearFocus();\n      }\n    }\n    /*\r\n     *Handle the scroll action over the scroll container element\r\n     */\n\n\n    scrollHandler(event, moves) {\n      Utils.preventPropagation(event);\n\n      if (Date.now() - this.lastScrollEventTriggered < 500) {\n        this.emitter.scrollFlag(false);\n        this.lastScrollEventTriggered = Date.now();\n      } else {\n        if (moves) {\n          this.scrollBarClicked = false;\n          this.lastScrollEventTriggered = Date.now();\n          this.emitter.scrollFlag(true);\n          this.moveFrame(moves, null, true);\n        } else {\n          this.scrollBarClicked = true;\n\n          if (this.scrollEventTimer) {\n            clearTimeout(this.scrollEventTimer);\n          }\n\n          this.scrollEventTimer = setTimeout(() => {\n            this.scrollEventFunction(event);\n          }, this.scrollHandlerDelayValue());\n        }\n      }\n    }\n\n    scrollHandlerDelayValue() {\n      return Utils.isFirefoxBrowser() ? 300 : 100;\n    }\n\n    scrollEventFunction(event) {\n      this.scrollTop = this.scrollContainer.nativeElement.scrollTop;\n      const newRowPos = Math.round(this.scrollTop / this.detailsHeight);\n\n      if (newRowPos !== this.scrollPosition) {\n        this.emitter.scrollFlag(true);\n        const moves = newRowPos > this.scrollPosition ? newRowPos - this.scrollPosition : -(this.scrollPosition - newRowPos);\n        this.moveFrame(moves, null, true);\n      }\n    }\n    /**\r\n     * @description\r\n     * Move the scrollbar to a fixed position in the y-axis\r\n     * @param pos the new position of the scrollbar\r\n     */\n\n\n    moveScrollBar(pos) {\n      if (this.recordScrollbar && this.scrollContainer && this.scrollContainer.nativeElement) {\n        if (!this.scrollBarClicked) {\n          this.scrollContainer.nativeElement.scrollTo(0, pos);\n        }\n\n        this.lastScrollEventTriggered = Date.now();\n      }\n    }\n    /* Applies dmView css if data window is not DddwData */\n\n\n    dmView() {\n      let result = '';\n\n      if (this.isDropDownDataWindow()) {\n        result += this.hScrollBar ? 'dmViewDddw dmViewHScroll dddwHorizontalScrollHeight' : 'dmViewDddw dmViewNoHorizontalScroll';\n      } else {\n        result += this.hScrollBar ? 'dmView dmViewHScroll ' : 'dmView dmViewNoHorizontalScroll';\n        result += this.vScrollBar && this.totalRows === 1 ? ' dmViewVScroll' : '';\n      }\n\n      return result;\n    }\n    /**\r\n     * Calculates the position of the max left positioned element\r\n     */\n\n\n    calculateRowContainerWidth() {\n      let detailColumns = this.validatesContainerWidth(this.columnModels);\n      let headerColumns = this.validatesContainerWidth(this.columnHeadersModels);\n\n      if (detailColumns === 0) {\n        detailColumns = this.tryGetWidthRow();\n      }\n\n      if (headerColumns === 0) {\n        headerColumns = this.tryGetWidthHeader();\n      }\n\n      this.rowContainerWidth = Math.max(detailColumns, headerColumns, this.widthContainer);\n    }\n    /*\r\n     * Calls UPDATE_BUNDLE command and sets forceDirty\r\n     * @param value UPDATE_BUNDLE forceDirty property\r\n     */\n\n\n    getForceDirty() {\n      const command = this.emitter.commandService.getCommand(CommandName.updateBundle);\n\n      if (command) {\n        return command.getForceDirty();\n      }\n\n      return false;\n    }\n    /**\r\n     * Calls UPDATE_BUNDLE command and sets delay\r\n     * @param value UPDATE_BUNDLE delay property\r\n     */\n\n\n    setForceDirty(value) {\n      const command = this.emitter.commandService.getCommand(CommandName.updateBundle);\n      /* c8 ignore else */\n\n      if (command) {\n        command.setForceDirtyOption(value);\n      }\n    }\n    /**\r\n     * Apply custom css to headers to show scrollbar when needed\r\n     */\n\n\n    headerContainerClass() {\n      return `headerContainer ${this.hScrollBar ? 'dmViewHScroll' : ''}`;\n    }\n    /**\r\n     * Gets the position of the scroll box in the second portion\r\n     * of the horizontal scroll bar when the scroll bar is split\r\n     */\n\n\n    get horizontalScrollPosition() {\n      return this.model.HorizontalScrollPosition2;\n    }\n\n    scrollLeft() {\n      if (this.dmViewElement?.nativeElement && !!this.horizontalScrollPosition && this.dmViewElement?.nativeElement.scrollLeft != this.horizontalScrollPosition) {\n        this.dmViewElement.nativeElement.scrollLeft = this.horizontalScrollPosition;\n      }\n    }\n    /**\r\n     * Tracks by fn to recycle components rendered in freeform.\r\n     * @param index The row index\r\n     * @param item The for each data\r\n     */\n\n\n    trackByFn(index, item) {\n      return index;\n    }\n    /**\r\n     * Gets details height\r\n     * Validates if the row should display groups header or trailer band\r\n     * and reserve space for them in the row container div\r\n     * @param item\r\n     * @returns details height\r\n     */\n\n\n    getDetailsHeight(item) {\n      if (this.groups) {\n        let sum = this.shouldDisplayGroupHeader(item) ? +this.detailsHeight : 0;\n        sum += this.shouldDisplayGroupTrailer(item) ? +this.detailsHeight + 3 : 0;\n        return this.detailsHeight + sum;\n      }\n\n      return this.detailsHeight;\n    }\n    /**\r\n     * Returns first row of last page\r\n     */\n\n\n    firstRowLastPage() {\n      return this.totalItems - this.visibleRows + 1;\n    }\n    /**\r\n     * Trigger a detect changes after parent's\r\n     * window resize event\r\n     * @param event the current event data\r\n     */\n\n\n    resizeHandler(event) {\n      /* c8 ignore else */\n      if (this.id === event.id && this.totalItems > this.previousVisibleRows) {\n        this.calculateRowContainerWidth();\n        this.visiblePageStart = this.scrollPosition;\n        this.visiblePageEnd = this.visiblePageStart + this.visibleRows - 1;\n        this.previousVisibleRows = this.visibleRows;\n        this.pageChange(this.scrollPosition);\n      }\n    }\n    /**\r\n     * Updates key down current row for key down actions.\r\n     * @param step Number of steps.\r\n     */\n\n\n    updateKeyDownCurrentRow(step) {\n      if (!this.isDropDownDataWindow()) {\n        this.currentRow = this.currentRow + step;\n      }\n    }\n    /**\r\n     * Triggers click dddwkey action\r\n     * @returns a boolean value indicating if the keyboard action was applied\r\n     */\n\n\n    triggerClickKeyActionDDDW(rowContainer) {\n      if (this.isDropDownDataWindow() && rowContainer) {\n        rowContainer.click();\n        return true;\n      }\n\n      return false;\n    }\n    /**\r\n     * Gets valid column name\r\n     * Returns the right column name when there is none selectable column,\r\n     * i.e. the first visible column in the column models collection\r\n     * @returns  a column name\r\n     */\n\n\n    getValidColumnName() {\n      return this.columnContext ? this.columnContext.getValidColumnName() : undefined;\n    }\n    /**\r\n     * Fires fox scrolling routine\r\n     */\n\n\n    fireFoxScrollingRoutine() {\n      this.mouseenter$ = fromEvent(this.scrollContainer.nativeElement, 'mouseenter');\n      this.mousemove$ = fromEvent(this.scrollContainer.nativeElement, 'scroll');\n      this.mouseleave$ = fromEvent(this.scrollContainer.nativeElement, 'mouseleave');\n      this.ffscrollenter = this.mouseenter$.subscribe(e => {\n        this.ffmousedown = true;\n      });\n      this.ffscrollsub = this.mousemove$.subscribe(e => {\n        if (this.ffmousedown) {\n          this.scrollHandler(e);\n        }\n      });\n      this.ffscrollleave = this.mouseleave$.subscribe(e => {\n        this.ffmousedown = false;\n      });\n    }\n    /**\r\n     * Unsubs all the Scrolling event subscription for\r\n     * Firefox browser\r\n     */\n\n\n    unsubScrollFF() {\n      if (this.ffscrollsub) {\n        this.ffscrollsub.unsubscribe();\n        this.ffscrollenter.unsubscribe();\n        this.ffscrollleave.unsubscribe();\n      }\n    }\n\n  }\n\n  FreeformComponent.ɵfac = function FreeformComponent_Factory(t) {\n    return new (t || FreeformComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(DmInteractionService, 8), i0.ɵɵdirectiveInject(i1.WebMapService), i0.ɵɵdirectiveInject(DMDataService), i0.ɵɵdirectiveInject(FocusManagerService), i0.ɵɵdirectiveInject(MessageCommandService), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(ResizeDataManagerService, 8), i0.ɵɵdirectiveInject(DataManagerTabSequenceService, 8), i0.ɵɵdirectiveInject(ButtonsService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8), i0.ɵɵdirectiveInject(WindowFocusElementService, 8));\n  };\n\n  FreeformComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: FreeformComponent,\n    selectors: [[\"wm-freeform\"]],\n    viewQuery: function FreeformComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c17, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dmViewElement = _t.first);\n      }\n    },\n    inputs: {\n      cancelDynamicStyles: \"cancelDynamicStyles\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"ngClass\", \"tabindex\", \"dblclick\", \"click\", \"focus\", 4, \"ngIf\"], [3, \"ngClass\", \"tabindex\", \"dblclick\", \"click\", \"focus\"], [3, \"totalPages\", \"currentPage\", \"FirstPage\", \"PreviousPage\", \"NextPage\", \"LastPage\", 4, \"ngIf\"], [1, \"dmContainer\"], [3, \"ngClass\", \"contextmenu\"], [\"dmViewElement\", \"\"], [1, \"dataManagerContent\"], [3, \"ngClass\", \"height\", \"dblclick\", 4, \"ngIf\"], [\"mwlDraggableScrollContainer\", \"\", 3, \"ngClass\"], [\"detailsContainer\", \"\"], [4, \"ngIf\"], [\"class\", \"summaryContainer\", \"class\", \"summaryContainer\", 3, \"dblclick\", 4, \"ngIf\"], [1, \"footerContainer\", 3, \"dblclick\"], [3, \"model\"], [1, \"scrollParent\", 3, \"hidden\", \"dblclick\"], [1, \"blanketUp\", 3, \"press\"], [1, \"scrollContainer\"], [\"scrollContainer\", \"\"], [1, \"list-filler\"], [1, \"blanketDown\", 3, \"press\"], [3, \"totalPages\", \"currentPage\", \"FirstPage\", \"PreviousPage\", \"NextPage\", \"LastPage\"], [3, \"ngClass\", \"dblclick\"], [\"headerContainer\", \"\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"mwlDroppable\", \"\", 3, \"tabindex\", \"width\", \"height\", \"drop\", \"contextmenu\", \"click\", \"keydown\", \"focus\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"mwlDroppable\", \"\", 3, \"tabindex\", \"drop\", \"contextmenu\", \"click\", \"keydown\", \"focus\"], [\"rowContainer\", \"\"], [\"class\", \"groupHeader\", 3, \"width\", \"height\", 4, \"ngIf\"], [\"class\", \"rowContainer\", 3, \"ngClass\", \"width\", \"height\", 4, \"ngIf\"], [\"class\", \"rowContainer\", \"dragCursor\", \"move\", \"mwlDraggable\", \"\", 3, \"ngClass\", \"dropData\", \"width\", \"height\", 4, \"ngIf\"], [\"class\", \"groupTrailer\", 3, \"width\", \"height\", 4, \"ngIf\"], [1, \"groupHeader\"], [1, \"rowContainer\", 3, \"ngClass\"], [\"row\", \"\"], [\"dragCursor\", \"move\", \"mwlDraggable\", \"\", 1, \"rowContainer\", 3, \"ngClass\", \"dropData\"], [1, \"groupTrailer\"], [1, \"summaryContainer\", 3, \"dblclick\"]],\n    template: function FreeformComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, FreeformComponent_div_0_Template, 20, 31, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.model);\n      }\n    },\n    directives: [WmPagerComponent, BusyloaderComponent, DwPressButtonComponent, i6.NgIf, i6.NgClass, i6.NgTemplateOutlet, i17.DraggableScrollContainerDirective, i6.NgForOf, i17.DroppableDirective, i17.DraggableDirective],\n    styles: [\".headerContainer[_ngcontent-%COMP%]{margin:0;padding:0;top:0;width:100%;z-index:0;position:relative;overflow:hidden;display:table}.detailsContainer[_ngcontent-%COMP%]{position:relative;width:100%}.detailsContainerDddw[_ngcontent-%COMP%]{z-index:1;width:100%;height:100%}.footerContainer[_ngcontent-%COMP%]{position:absolute;bottom:0;width:100%;z-index:3}.summaryContainer[_ngcontent-%COMP%]{position:relative;width:100%;height:auto}.containerRows[_ngcontent-%COMP%]{width:100%}ng-container[_ngcontent-%COMP%]{position:relative}.groupHeader[_ngcontent-%COMP%], .groupTrailer[_ngcontent-%COMP%], .rowContainer[_ngcontent-%COMP%]{position:relative;overflow:hidden}.selectedRow[_ngcontent-%COMP%]{background-color:Highlight;width:100%}.currentRow[_ngcontent-%COMP%]{background-color:#d5e4f7;width:100%}.list-filler[_ngcontent-%COMP%]{position:absolute;top:0;right:-1px;width:1px;box-sizing:border-box}.dmView[_ngcontent-%COMP%], .dmViewNoScroll[_ngcontent-%COMP%]{position:absolute;float:left;overflow-x:auto;overflow-y:hidden;height:100%!important;width:100%!important}.dmViewDddw[_ngcontent-%COMP%]{overflow-y:hidden}.dmViewVScroll[_ngcontent-%COMP%]{overflow-y:auto}.dmViewHScroll[_ngcontent-%COMP%]{overflow-x:auto}.dmViewNoScroll[_ngcontent-%COMP%]{overflow:hidden}.dmViewNoHorizontalScroll[_ngcontent-%COMP%]{overflow-x:hidden!important}.scrollContainer[_ngcontent-%COMP%]{top:0;right:0;width:15px;overflow-y:auto;overflow-x:hidden;float:left;position:absolute;z-index:4}@-moz-document url-prefix(){.scrollContainer{width:18px!important}}.draggedElement[_ngcontent-%COMP%]{z-index:2147483647!important}.dddwHorizontalScrollHeight[_ngcontent-%COMP%]{padding-bottom:16px}.scrollParent[_ngcontent-%COMP%]{top:0;right:0;width:15px;position:absolute}.blanketUp[_ngcontent-%COMP%]{height:17px;width:15px;top:0;position:absolute;z-index:6}.blanketUp[_ngcontent-%COMP%]:hover{opacity:75%;background-color:#d3d3d3}.blanketDown[_ngcontent-%COMP%]{height:17px;width:15px;bottom:0;position:absolute;z-index:6}.blanketDown[_ngcontent-%COMP%]:hover{opacity:75%;background-color:#d3d3d3}\"]\n  });\n  return FreeformComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet EventCollection = /*#__PURE__*/(() => {\n  class EventCollection {\n    constructor() {\n      this.eventDictionary = new Dictionary();\n    }\n\n    registrateEvent(key, eventHandler) {\n      this.eventDictionary.add(key, eventHandler);\n    }\n\n    getEvent(key) {\n      return this.eventDictionary.value(key);\n    }\n\n  }\n\n  EventCollection.ɵfac = function EventCollection_Factory(t) {\n    return new (t || EventCollection)();\n  };\n\n  EventCollection.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: EventCollection,\n    factory: EventCollection.ɵfac,\n    providedIn: 'root'\n  });\n  return EventCollection;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet DataManagerControlExtractors = /*#__PURE__*/(() => {\n  class DataManagerControlExtractors {\n    /**\r\n     * Argument extractor for lbuttondown event\r\n     * @param event the current event data\r\n     * @param component the current component instance\r\n     */\n    static RButtonArgsExtractor(event, component) {\n      const args = event.args;\n      return [args.xpos, args.ypos, args.row, {\n        Id: event.Id,\n        MapperId: event.mapperId\n      }];\n    }\n    /**\r\n     *  Argument extractor for lbuttondown event\r\n     * @param event the current event data\r\n     * @param component the current component instance\r\n     */\n\n\n    static scrollVerticalArgsExtractor(event, component) {\n      const args = event.args;\n      return [args.scrollpos, {\n        Id: event.Id,\n        MapperId: event.mapperId\n      }];\n    }\n    /**\r\n     *  Argument extractor for lbuttondown event\r\n     * @param event the current event data\r\n     * @param component the current component instance\r\n     */\n\n\n    static dwnProcessEnterExtractor(event, component) {\n      return [{\n        Id: event.Id,\n        MapperId: event.mapperId\n      }];\n    }\n    /**\r\n     *  Argument extractor for lbuttondown event\r\n     * @param event the current event data\r\n     * @param component the current component instance\r\n     */\n\n\n    static lButtonArgsExtractor(event, component) {\n      return [Utils.getMouseEventFlags(event.event), component.xPos, component.yPos];\n    }\n    /**\r\n     * Argument extractor for clicked event\r\n     * If header is clicked, 0 index should be sended\r\n     * @param event the current event data\r\n     * @param component the current component instance\r\n     */\n\n\n    static clickEventArgsExtractor(event, component) {\n      const index = Utils.isDefaultValue(component.row, 0);\n      return [component.xPos, component.yPos, index, {\n        Id: event.Id,\n        MapperId: event.mapperId\n      }];\n    }\n    /**\r\n     * Argument extractor for clicked event\r\n     * If header is clicked, 0 index should be sended\r\n     * @param event the current event data\r\n     * @param component the current component instance\r\n     */\n\n\n    static buttonClickedEventArgsExtractor(event, component) {\n      const index = Utils.isDefaultValue(component.row, 0);\n      return [index, DataManagerControlExtractors.defaultActionReturnCode, {\n        Id: event.Id,\n        MapperId: event.mapperId\n      }];\n    }\n    /**\r\n     * Argument extractor for NotifyCurrentControlChanging event\r\n     * @param event the current event data\r\n     * @param component the current component instance\r\n     */\n\n\n    static notifyCurrentControlChangingArgsExtractor(event, component) {\n      if (event && event.args && event.event) {\n        return [event.event.row, event.args.fieldName, {\n          Id: event.Id,\n          MapperId: event.mapperId\n        }];\n      }\n\n      return null;\n    }\n    /**\r\n     * Argument extractor for notifyCurrentControlValueChanged event\r\n     * @param event the current event data\r\n     * @param component the current component instance\r\n     */\n\n\n    static notifyCurrentControlValueChangedArgsExtractor(event, component) {\n      if (event && event.args && event.event) {\n        return [{\n          Id: event.Id,\n          MapperId: event.mapperId\n        }];\n      }\n\n      return null;\n    }\n    /**\r\n     * Argument extractor for buttonClicking event\r\n     * @param event the current event data\r\n     * @param component the current component instance\r\n     */\n\n\n    static buttonClickingEventArgsExtractor(event, component) {\n      const index = component.row;\n      return [index, {\n        Id: event.Id,\n        MapperId: event.mapperId\n      }];\n    }\n    /**\r\n     * Argument extractor for clicked event\r\n     * @param event the current event data\r\n     * @param component the current component instance\r\n     */\n\n\n    static ItemChangedArgsExtractor(event, component) {\n      return [event.args.row ? event.args.row : component.row, {\n        Id: event.Id,\n        MapperId: event.mapperId\n      }, Utils.validateNullUndefined(event.args.data) ? event.args.data.toString() : null];\n    }\n    /**\r\n     * Argument extractor for selection changed event\r\n     * @param event the current event data\r\n     * @param component the current component instance\r\n     */\n\n\n    static SelectionChangedArgsExtractor(event, component) {\n      return [{\n        Id: event.Id,\n        MapperId: event.mapperId\n      }, {\n        currentrow: component.newCurrentRow\n      }];\n    }\n    /**\r\n     * Argument extractor for selection changing event\r\n     * @param event the current event data\r\n     * @param component the current component instance\r\n     */\n\n\n    static SelectionChangingArgsExtractor(event, component) {\n      return [{\n        Id: event.Id,\n        MapperId: event.mapperId\n      }, {\n        currentrow: component.row,\n        newrow: component.newCurrentRow\n      }];\n    }\n    /**\r\n     * Argument extractor for selection changing event\r\n     * @param event the current event data\r\n     * @param component the current component instance\r\n     */\n\n\n    static KeyDownArgsExtractor(event, component) {\n      return [component.key, component.keyflags];\n    }\n    /**\r\n     * Argument extractor for rowFocusChanging event\r\n     * @param event the current event data\r\n     * @param component the current component instance\r\n     * Args : [currentRow, newRow]\r\n     */\n\n\n    static RowFocusChangingArgsExtractor(event, component) {\n      if (event['triggerRowChangeEvents']) {\n        return [component.oldRow, component.row];\n      } else {\n        const focusedComp = event.event.target;\n        return [component.row, focusedComp.dataManagerContext.rowIndex];\n      }\n    }\n    /**\r\n     * Argument extractor for rowFocusChanging event\r\n     * @param event the current event data\r\n     * @param component the current component instance\r\n     * Args : [currentRow, newRow]\r\n     */\n\n\n    static RowFocusChangedArgsExtractor(event, component) {\n      return [component.row];\n    }\n    /**\r\n     * Argument extractor for item focus changed event\r\n     * @param event the current event data\r\n     * @param component the current component instance\r\n     */\n\n\n    static ItemFocusChangedArgsExtractor(event, component) {\n      return [component.row, {\n        Id: event.Id,\n        MapperId: event.mapperId\n      }];\n    }\n    /**\r\n     * Is executed after a new item is selected\r\n     * @param context Current Datamanager\r\n     * @param event event parameter\r\n     */\n\n\n    static itemChangedCallback(context, event) {\n      // v4 version of itemchanged event\n      if (!event.avoidItemChanged && !WebMapService.currentService.config.useBundleEvent) {\n        context.setUpdateData(true);\n        context.setDelay(true);\n\n        if (context.isBindedEvent('dwnitemchange')) {\n          context.itemChangedHandler(event);\n        } else {\n          context.setDelay(false);\n          DataManagerControlExtractors.sendAction('dataManagerController', 'forceBundleUpdate', null, context.id, null, null, true);\n        }\n      } // v5 version of itemchanged event (only for RadioButton, CheckBox, DDDW, DDLB)\n\n\n      if (event.isNCCVC) {\n        DataManagerControlExtractors.notifyCurrentControlValueChangedCallback(context, event); // reset flags after call callback function.\n\n        event.isNCCVC = false;\n        /* c8 ignore else */\n\n        if (event.event) {\n          event.event.triggerNCCVC = false;\n        }\n      }\n    }\n    /**\r\n     * Is executed after a new item is selected\r\n     * @param context Current Datamanager\r\n     * @param event event parameter\r\n     */\n\n\n    static notifyCurrentControlChangingCallback(context, event) {\n      if (WebMapService.currentService.config.useBundleEvent && !event.isNotColumnControl) {\n        if (!context.preventNCCC) {\n          context.preventNCCC = true;\n          /* c8 ignore else */\n\n          if (!context.externalCancelNCCC) {\n            const args = DataManagerControlExtractors.notifyCurrentControlChangingArgsExtractor(event, context);\n\n            if (!context.disableServerBundle) {\n              DataManagerControlExtractors.sendAction(null, DataManagerControlExtractors.notifyCurrentControlChanging, args, context.id, context.model, null, false);\n            } else {\n              //Args\n              const arg = new EventData({\n                TextBuffer: context.model.DataManager.TextBuffer,\n                OldTextBuffer: context.model.DataManager.OldTextBuffer,\n                DirtyBuffer: context.model.DataManager.DirtyBuffer,\n                CurrentRowBuffer: context.model.DataManager.CurrentRow,\n                CurrentControlNameBuffer: context.model.DataManager.CurrentControlName,\n                ColumnIdBuffer: context.model.DataManager.ColumnIdBuffer,\n                Args: args,\n                Context: context\n              }, context.id);\n              context.model.DataManager.DirtyBuffer = false;\n              context.NotifyCurrentControl.emit(arg);\n            }\n          }\n        }\n\n        if (event.isNCCVC) {\n          DataManagerControlExtractors.notifyCurrentControlValueChangedCallback(context, event);\n        }\n      }\n\n      if (event.event.serverEvent === 'clicked') {\n        context.lButtonUpHandler(event);\n      }\n    }\n    /**\r\n     * Is executed after a new item is selected\r\n     * @param context Current Datamanager\r\n     * @param event event parameter\r\n     */\n\n\n    static notifyCurrentControlValueChangedCallback(context, event) {\n      /* c8 ignore else */\n      if (WebMapService.currentService.config.useBundleEvent) {\n        context.blockUserInteraction();\n        context.pendingBufferNotify();\n        const args = DataManagerControlExtractors.notifyCurrentControlValueChangedArgsExtractor(event, context);\n        DataManagerControlExtractors.sendAction(null, DataManagerControlExtractors.notifyCurrentControlValueChanged, args, context.id, context.model, response => DataManagerControlExtractors.restoreUserInteractionCallback(context), false);\n      }\n    }\n    /**\r\n     * Nccvcs callback action\r\n     * A function that is called after a nccvc action\r\n     * @param context The current DataManager component instance\r\n     */\n\n\n    static restoreUserInteractionCallback(context) {\n      context.enableUserInteraction();\n    }\n    /**\r\n     * Argument extractor for item focus changed event\r\n     * @param event the current event data\r\n     * @param component the current component instance\r\n     */\n\n\n    static DropEventExtractor(event, component) {\n      const context = event.event;\n      return [{\n        Id: context.sourceId,\n        MapperId: context.sourceMapperId\n      }, context.sourceRowIndex, {\n        Id: context.targetId,\n        MapperId: context.targetMapperId\n      }, context.targetRowIndex];\n    }\n    /**\r\n     * Argument extractor for drag event\r\n     * @param event the current event data\r\n     * @param component the current component instance\r\n     * @returns source the reference to the control being dragged\r\n     */\n\n\n    static DragEventExtractor(event, component) {\n      const context = event.dropData || event.event.dropData;\n      return [{\n        Id: context.id,\n        MapperId: context.mapperId\n      }];\n    }\n    /**\r\n     * Argument extractor for drop event\r\n     * @param event the current event data\r\n     * @param component the current component instance\r\n     * @returns source the reference to the control being dropped\r\n     */\n\n\n    static DragDropEventExtractor(event, component) {\n      const context = event.dropData || event.event.dropData;\n      return [{\n        Id: context.id,\n        MapperId: context.mapperId\n      }, Utils.isDefaultValue(context.row, 0), {\n        Id: context.id,\n        MapperId: context.mapperId\n      }];\n    }\n\n    static sendAction(controller, action, args, idV5, modelV4, callback, highPriority, queryString) {\n      const actionService = WebMapService.currentService.config.webMapVersion === WMConstants.version4 ? new ActionModel(modelV4?.Name ?? controller, action, modelV4, args, callback, null, highPriority, queryString) : new ActionModelV5(idV5, action, controller, action, args, callback, highPriority, queryString);\n      WebMapService.currentService.sendAction(actionService);\n    }\n\n  }\n\n  /**\r\n   * Event name constants for v5 PBNet data manager\r\n   * server notification\r\n   */\n  DataManagerControlExtractors.notifyCurrentControlChanging = 'notifyCurrentControlChanging';\n  DataManagerControlExtractors.notifyCurrentControlValueChanged = 'notifyCurrentControlValueChanged';\n  DataManagerControlExtractors.defaultActionReturnCode = 0;\n  return DataManagerControlExtractors;\n})();\nlet DataManagerControlBaseComponent = /*#__PURE__*/(() => {\n  class DataManagerControlBaseComponent extends BaseWindowComponent {\n    /* c8 ignore start */\n    constructor(cd2, rnd, elem2, lengthConverter, focusManagerService, popupService, em2, mTabOService, tPOService) {\n      super(cd2, rnd, elem2, lengthConverter, em2, mTabOService, tPOService);\n      this.cd2 = cd2;\n      this.rnd = rnd;\n      this.elem2 = elem2;\n      this.focusManagerService = focusManagerService;\n      this.popupService = popupService;\n      this.em2 = em2;\n      this.mTabOService = mTabOService;\n      this.tPOService = tPOService;\n      /* c8 ignore stop */\n\n      /**\r\n       * Emitters properties\r\n       */\n\n      this.LButtonDown = new EventEmitter();\n      this.Clicked = new EventEmitter();\n      this.MouseUp = new EventEmitter();\n      this.ButtonClicking = new EventEmitter();\n      this.ButtonClicked = new EventEmitter();\n      this.LButtonUp = new EventEmitter();\n      this.DoubleClicked = new EventEmitter();\n      this.ItemChanged = new EventEmitter();\n      this.EditChanged = new EventEmitter();\n      this.SelectionChanging = new EventEmitter();\n      this.SelectionChanged = new EventEmitter();\n      this.KeyDown = new EventEmitter();\n      this.Enter = new EventEmitter();\n      this.DownArrow = new EventEmitter();\n      this.TabOut = new EventEmitter();\n      this.GetFocus = new EventEmitter();\n      this.LoseFocus = new EventEmitter();\n      this.ItemFocusChanged = new EventEmitter();\n      this.RowFocusChanged = new EventEmitter();\n      this.RowFocusChanging = new EventEmitter();\n      this.RButtonDown = new EventEmitter();\n      this.ScrollVertical = new EventEmitter();\n      this.dwnProcessEnter = new EventEmitter();\n      this.Drop = new EventEmitter();\n      this.DragDrop = new EventEmitter();\n      this.DragEnter = new EventEmitter();\n      this.DragLeave = new EventEmitter();\n      this.DragWithin = new EventEmitter();\n      /**\r\n       * Event used to expose the notify current control behavior to the client code\r\n       * in favor to customize the bundle event actions\r\n       */\n\n      this.NotifyCurrentControl = new EventEmitter();\n    }\n    /**\r\n     * Input to enable/disable the disableServerBundle feature, used to avoid\r\n     * sending the normal NCCC if true, instead sends the args to a\r\n     * custom handler in the client code to trigger the NCCC when needed.\r\n     */\n\n\n    set disableServerBundle(value) {\n      this.model.DisableServerBundle = value;\n    }\n\n    get disableServerBundle() {\n      return this.model.DisableServerBundle;\n    }\n    /**\r\n     * Returns true if there is a valid height value in model\r\n     */\n\n\n    isValidHeight() {\n      return this.model.Position && // Should have Position defined\n      this.model.Position.Height > 0 && // Should have Height defined and should be more than 0\n      !this.isOnGrid && // Shouldn't be inside of a grid\n      !this.model.DddwLines && // Shouldn't be a DropDownDataManager\n      this.model.DddwLines !== 0 // Shouldn't be a DropDownDataManager with 0 rows\n      ;\n    }\n    /**\r\n     * @description\r\n     * Returns the height value in pixels of the model. Returns 'null' if it does not exists in the model.\r\n     * @returns { number }\r\n     */\n\n\n    get height() {\n      return this.isValidHeight() ? this.model.Position.Height : null;\n    }\n    /**\r\n     * @description\r\n     * Returns the model for the corresponding dataManager\r\n     * @returns { any }\r\n     */\n\n\n    getModelDataManager() {\n      return this.model.DataManager || this.model.DddwData;\n    }\n\n    get hScrollBar() {\n      return this.model.HScrollBar;\n    }\n\n    get vScrollBar() {\n      return this.model.VScrollBar;\n    }\n    /**\r\n     * Error state of data manager control base component\r\n     */\n\n\n    get errorState() {\n      return this.em2.dataManagerError;\n    }\n\n    set errorState(value) {\n      this.em2.dataManagerError = value;\n    }\n    /**\r\n     * Indicates if the current DataManager is a report\r\n     */\n\n\n    get isReport() {\n      return this.getModelDataManager() && this.getModelDataManager().Report;\n    }\n    /**\r\n     * Indicates wether the current Data Manager is dynamic or not\r\n     */\n\n\n    get isDynamic() {\n      return this.getModelDataManager() && this.getModelDataManager().IsDynamic;\n    }\n    /**\r\n     * @description\r\n     * Gets focusable element inside of the component\r\n     */\n\n\n    get focusableElement() {\n      return this.validateFocusElement(this.getElementToValidate());\n    }\n    /**\r\n     * @description\r\n     * Returns whether a Minimize Box displays in the title bar.\r\n     * @returns { boolean }\r\n     */\n\n\n    get maxBox() {\n      return Utils.isDefaultValue(this.model.MaxBox, false);\n    }\n    /**\r\n     * @description\r\n     * Returns whether a Minimize Box displays in the title bar.\r\n     * @returns { boolean }\r\n     */\n\n\n    get minBox() {\n      return Utils.isDefaultValue(this.model.MinBox, false);\n    }\n    /**\r\n     * Gets whether is container\r\n     */\n\n\n    get isContainer() {\n      return true;\n    }\n    /**\r\n     * Gets drag enabled value\r\n     */\n\n\n    get dragEnabled() {\n      return this.dragAuto && this.getModelDataManager() && !this.getModelDataManager().draggable;\n    }\n    /**\r\n     * @description\r\n     * Returns whether a title bar displays.\r\n     * @returns { boolean }\r\n     */\n\n\n    get titleBar() {\n      return Utils.isDefaultValue(this.model.TitleBar, false);\n    }\n    /**\r\n     * @description\r\n     * Returns whether a Minimize Box displays in the title bar.\r\n     * @returns { boolean }\r\n     */\n\n\n    get controlMenu() {\n      return Utils.isDefaultValue(this.model.ControlMenu, false);\n    }\n    /**\r\n     * Gets element to validate in order to verify if the object has the\r\n     * accessor 'el'\r\n     * @returns element to validate\r\n     */\n\n\n    getElementToValidate() {\n      return this.dataManagerControl && this.dataManagerControl.el ? this.dataManagerControl.el : this.dataManagerControl;\n    }\n    /**\r\n     * Get the name class for the disabled feature\r\n     */\n\n\n    getDisabled() {\n      return this.enabled ? '' : 'removeEvents';\n    }\n    /**\r\n     * Returns the dataManger id doesn't matter if the core is v4 or v5\r\n     */\n\n\n    getDataManagerId() {\n      return this.getModelDataManager().id ? this.getModelDataManager().id : this.getModelDataManager().UniqueID;\n    }\n    /**\r\n     * Returns the dataManger id doesn't matter if the core is v4 or v5\r\n     */\n\n\n    getDataManagerValidationError() {\n      return this.itemError;\n    }\n    /**\r\n     * Validations error handler\r\n     * Receives a notification of a type valuid\r\n     * @param event the item error event object\r\n     */\n\n\n    validationErrorHandler(event) {\n      this.errorState = true;\n      this.itemError = event.args.itemError;\n      this.columnError = event.args.column;\n      this.togglePopup(this.errorTemplate); // Disabling the server calls until the error message dialog is closed\n\n      this.allowServerInteraction(false);\n    }\n    /**\r\n     * Validations error handler\r\n     * Receives a notification of a type valuid\r\n     * @param event the item error event object\r\n     */\n\n\n    validationRequiredErrorHandler(event) {\n      this.errorState = true;\n      this.togglePopup(this.errorTemplate);\n      this.itemError = undefined;\n      this.columnError = event.args.column;\n    }\n    /**\r\n     * Hides item error dialog when the user press over the ok button\r\n     * @param event the current event object\r\n     */\n\n\n    itemErrorClosed(event) {\n      this.errorState = false;\n      this.togglePopup(this.errorTemplate); // Enabling the server calls when error dialog is closed\n\n      this.allowServerInteraction(true);\n      this.itemError = '';\n\n      if (this.columnError) {\n        if (this.columnError.applyFocus) {\n          this.externalCancelNCCC = true;\n          this.columnError.notifyDataManagerCurrentRow();\n          this.columnError.applyFocus();\n          this.externalCancelNCCC = false;\n        }\n\n        this.columnError.itemErrorFailed = false;\n        this.columnError.editRequiredFailed = false;\n      }\n    }\n    /**\r\n     * Allows server interaction\r\n     * It means to stop the server calls\r\n     * @param allow True to enable the server calls otherwise false\r\n     */\n\n\n    allowServerInteraction(allow) {\n      WebMapService.currentService.enabledServerEvents = allow;\n    }\n\n    dwnProcessEnterHandler(event) {\n      this.dwnProcessEnter.emit(event);\n    }\n\n    clickedHandler(event) {\n      this.Clicked.emit(event);\n    }\n\n    mouseUpHandler(event) {\n      this.MouseUp.emit(event);\n    }\n\n    buttonClickingHandler(event) {\n      this.ButtonClicking.emit(event);\n    }\n\n    buttonClickedHandler(event) {\n      this.ButtonClicked.emit(event);\n    }\n\n    lButtonUpHandler(event) {\n      this.LButtonUp.emit(event);\n    }\n\n    lButtonDownHandler(event) {\n      this.LButtonDown.emit(event);\n    }\n\n    doubleClickedHandler(event) {\n      this.DoubleClicked.emit(event);\n    }\n\n    itemChangedHandler(event) {\n      this.ItemChanged.emit(event);\n    }\n\n    editChangedHandler(event) {\n      this.EditChanged.emit(event);\n    }\n\n    selectionChangedHandler(event) {\n      this.SelectionChanged.emit(event);\n    }\n\n    selectionChangingHandler(event) {\n      this.SelectionChanging.emit(event);\n    }\n\n    keyDownHandler(event) {\n      this.KeyDown.emit(event);\n    }\n\n    enterHandler(lastRow, event) {\n      this.Enter.emit(event);\n\n      if (lastRow) {\n        this.tabHandler(lastRow, event);\n      }\n    }\n\n    arrowDownKeyHandler(lastRow, event) {\n      if (!lastRow) {\n        return true;\n      }\n\n      this.DownArrow.emit(event);\n      return false; // Continue execution\n    }\n\n    tabHandler(lastRow, event) {\n      if (!lastRow) {\n        return true;\n      }\n\n      this.TabOut.emit(event);\n      return false; // Continue execution\n    }\n\n    getfocusHandler(event) {\n      this.GetFocus.emit(event);\n    }\n\n    losefocusHandler(event) {\n      this.LoseFocus.emit(event);\n    }\n\n    rButtonDownHandler(event) {\n      this.RButtonDown.emit(event);\n    }\n\n    scrollVerticalHandler(event) {\n      this.ScrollVertical.emit(event);\n    }\n\n    itemFocusChangeHandler(event) {\n      this.ItemFocusChanged.emit(event);\n    }\n\n    rowFocusChangedHandler(event) {\n      this.RowFocusChanged.emit(event);\n    }\n\n    rowFocusChangingHandler(event) {\n      this.RowFocusChanging.emit(event);\n    }\n\n    dwnDropEventHandler(event) {\n      this.Drop.emit(event);\n    }\n\n    dragDrop(event) {\n      const context = event.dropData || event.event.dropData;\n\n      if (context instanceof ColumnComponent) {\n        return true;\n        /* Exit execution */\n      }\n\n      this.em2.commandService.run(CommandName.updateDraggedObject, {\n        id: context.id,\n        mapperId: context.mapperId\n      });\n      this.DragDrop.emit(event);\n      return false;\n      /* Continue execution */\n    }\n\n    dragEnter(event) {\n      this.DragEnter.emit(event);\n    }\n\n    dragLeave(event) {\n      this.DragLeave.emit(event);\n    }\n\n    dragWithin(event) {\n      this.DragWithin.emit(event);\n    }\n    /**\r\n     * @override BaseControlComponent\r\n     * Should apply change focused control command\r\n     * @returns true if apply change focused control command\r\n     */\n\n\n    shouldApplyChangeFocusedControlCommand() {\n      return super.shouldApplyChangeFocusedControlCommand() && this.shouldNotContainsActiveComponent() && this.currentDataManagerInstance && this.currentDataManagerInstance.isSynchronizing != null && !this.currentDataManagerInstance.isSynchronizing;\n    }\n    /**\r\n     * Should not contains active component\r\n     * @returns true if not contains active component\r\n     */\n\n\n    shouldNotContainsActiveComponent() {\n      if (this.focusManagerService.isActiveComponentInDataManager(this.id)) {\n        this.isFocused = false;\n        return false;\n      }\n\n      return true;\n    }\n    /**\r\n     * Blocks user interaction\r\n     * Disables the user interaction to avoid receiving new\r\n     * data when the current dataManager is synchronizing.\r\n     */\n\n\n    blockUserInteraction() {\n      this.currentfocusedColumn = this.focusManagerService.activeComponent;\n\n      if (this.currentfocusedColumn) {\n        this.currentfocusedColumn.compontentBlockUserInteraction = true;\n      }\n\n      this.detectChanges();\n    }\n    /**\r\n     * Enables user interaction\r\n     * Restores the user interaction after a\r\n     * synchronization event occurs\r\n     */\n\n\n    enableUserInteraction() {\n      setTimeout(() => {\n        this.currentfocusedColumn.compontentBlockUserInteraction = false;\n        this.markForCheck();\n        this.currentDataManagerInstance.markForCheck();\n      }, 20);\n    }\n    /**\r\n     * Creates or destroy an instance of Kendo Popup component\r\n     * using the Kendo popup service\r\n     * @param template the popup template\r\n     */\n\n\n    togglePopup(template) {\n      if (this.popupRef) {\n        this.popupRef.close();\n        this.popupRef = null;\n      } else {\n        this.popupRef = this.popupService.open({\n          content: template,\n          offset: {\n            top: 60,\n            left: 30\n          }\n        });\n      }\n    }\n\n  }\n\n  DataManagerControlBaseComponent.ɵfac = function DataManagerControlBaseComponent_Factory(t) {\n    return new (t || DataManagerControlBaseComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(FocusManagerService), i0.ɵɵdirectiveInject(i3.PopupService), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n  };\n\n  DataManagerControlBaseComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: DataManagerControlBaseComponent,\n    selectors: [[\"ng-component\"]],\n    viewQuery: function DataManagerControlBaseComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c23, 5);\n        i0.ɵɵviewQuery(_c24, 5);\n        i0.ɵɵviewQuery(_c25, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dataManagerControl = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.errorTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.anchorElement = _t.first);\n      }\n    },\n    inputs: {\n      pageSize: \"pageSize\",\n      disableServerBundle: \"disableServerBundle\"\n    },\n    outputs: {\n      LButtonDown: \"LButtonDown\",\n      Clicked: \"Clicked\",\n      MouseUp: \"MouseUp\",\n      ButtonClicking: \"ButtonClicking\",\n      ButtonClicked: \"ButtonClicked\",\n      LButtonUp: \"LButtonUp\",\n      DoubleClicked: \"DoubleClicked\",\n      ItemChanged: \"ItemChanged\",\n      EditChanged: \"EditChanged\",\n      SelectionChanging: \"SelectionChanging\",\n      SelectionChanged: \"SelectionChanged\",\n      KeyDown: \"KeyDown\",\n      Enter: \"Enter\",\n      DownArrow: \"DownArrow\",\n      TabOut: \"TabOut\",\n      GetFocus: \"GetFocus\",\n      LoseFocus: \"LoseFocus\",\n      ItemFocusChanged: \"ItemFocusChanged\",\n      RowFocusChanged: \"RowFocusChanged\",\n      RowFocusChanging: \"RowFocusChanging\",\n      RButtonDown: \"RButtonDown\",\n      ScrollVertical: \"ScrollVertical\",\n      dwnProcessEnter: \"dwnProcessEnter\",\n      Drop: \"Drop\",\n      DragDrop: \"DragDrop\",\n      DragEnter: \"DragEnter\",\n      DragLeave: \"DragLeave\",\n      DragWithin: \"DragWithin\",\n      NotifyCurrentControl: \"NotifyCurrentControl\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function DataManagerControlBaseComponent_Template(rf, ctx) {},\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  __decorate([serverEvent('dwnprocessenter', DataManagerControlExtractors.dwnProcessEnterExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [EventData]), __metadata(\"design:returntype\", void 0)], DataManagerControlBaseComponent.prototype, \"dwnProcessEnterHandler\", null);\n\n  __decorate([serverEvent('dwnlbuttonclk', DataManagerControlExtractors.clickEventArgsExtractor, null, DataManagerControlExtractors.notifyCurrentControlChangingCallback), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [EventData]), __metadata(\"design:returntype\", void 0)], DataManagerControlBaseComponent.prototype, \"clickedHandler\", null);\n\n  __decorate([serverEvent('mouseUp', DataManagerControlExtractors.clickEventArgsExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [EventData]), __metadata(\"design:returntype\", void 0)], DataManagerControlBaseComponent.prototype, \"mouseUpHandler\", null);\n\n  __decorate([serverEvent('dwnbuttonclicking', DataManagerControlExtractors.buttonClickingEventArgsExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [EventData]), __metadata(\"design:returntype\", void 0)], DataManagerControlBaseComponent.prototype, \"buttonClickingHandler\", null);\n\n  __decorate([serverEvent('dwnbuttonclicked', DataManagerControlExtractors.buttonClickedEventArgsExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [EventData]), __metadata(\"design:returntype\", void 0)], DataManagerControlBaseComponent.prototype, \"buttonClickedHandler\", null);\n\n  __decorate([serverEvent('lbuttonup', DataManagerControlExtractors.lButtonArgsExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [EventData]), __metadata(\"design:returntype\", void 0)], DataManagerControlBaseComponent.prototype, \"lButtonUpHandler\", null);\n\n  __decorate([serverEvent('lbuttondown', DataManagerControlExtractors.lButtonArgsExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [EventData]), __metadata(\"design:returntype\", void 0)], DataManagerControlBaseComponent.prototype, \"lButtonDownHandler\", null);\n\n  __decorate([serverEvent('dwnlbuttondblclk', DataManagerControlExtractors.clickEventArgsExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [EventData]), __metadata(\"design:returntype\", void 0)], DataManagerControlBaseComponent.prototype, \"doubleClickedHandler\", null);\n\n  __decorate([serverEvent('dwnitemchange', DataManagerControlExtractors.ItemChangedArgsExtractor, null, null, true), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [EventData]), __metadata(\"design:returntype\", void 0)], DataManagerControlBaseComponent.prototype, \"itemChangedHandler\", null);\n\n  __decorate([serverEvent('dwnchanging', DataManagerControlExtractors.ItemChangedArgsExtractor, null, DataManagerControlExtractors.itemChangedCallback), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [EventData]), __metadata(\"design:returntype\", void 0)], DataManagerControlBaseComponent.prototype, \"editChangedHandler\", null);\n\n  __decorate([serverEvent('selectionChanged', DataManagerControlExtractors.SelectionChangedArgsExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [EventData]), __metadata(\"design:returntype\", void 0)], DataManagerControlBaseComponent.prototype, \"selectionChangedHandler\", null);\n\n  __decorate([serverEvent('selectionChanging', DataManagerControlExtractors.SelectionChangingArgsExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [EventData]), __metadata(\"design:returntype\", void 0)], DataManagerControlBaseComponent.prototype, \"selectionChangingHandler\", null);\n\n  __decorate([serverEvent('dwnkey', DataManagerControlExtractors.KeyDownArgsExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [EventData]), __metadata(\"design:returntype\", void 0)], DataManagerControlBaseComponent.prototype, \"keyDownHandler\", null);\n\n  __decorate([serverEvent('processEnter', DataManagerControlExtractors.clickEventArgsExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Boolean, EventData]), __metadata(\"design:returntype\", void 0)], DataManagerControlBaseComponent.prototype, \"enterHandler\", null);\n\n  __decorate([serverEvent('tabDown', DataManagerControlExtractors.clickEventArgsExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Boolean, EventData]), __metadata(\"design:returntype\", Boolean)], DataManagerControlBaseComponent.prototype, \"arrowDownKeyHandler\", null);\n\n  __decorate([serverEvent('tabOut', DataManagerControlExtractors.clickEventArgsExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Boolean, EventData]), __metadata(\"design:returntype\", Boolean)], DataManagerControlBaseComponent.prototype, \"tabHandler\", null);\n\n  __decorate([serverEvent('dwnsetfocus'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [EventData]), __metadata(\"design:returntype\", void 0)], DataManagerControlBaseComponent.prototype, \"getfocusHandler\", null);\n\n  __decorate([serverEvent('dwnkillfocus'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [EventData]), __metadata(\"design:returntype\", void 0)], DataManagerControlBaseComponent.prototype, \"losefocusHandler\", null);\n\n  __decorate([serverEvent('dwnrbuttondown', DataManagerControlExtractors.RButtonArgsExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [EventData]), __metadata(\"design:returntype\", void 0)], DataManagerControlBaseComponent.prototype, \"rButtonDownHandler\", null);\n\n  __decorate([serverEvent('dwnvscroll', DataManagerControlExtractors.scrollVerticalArgsExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [EventData]), __metadata(\"design:returntype\", void 0)], DataManagerControlBaseComponent.prototype, \"scrollVerticalHandler\", null);\n\n  __decorate([serverEvent('dwnitemchangefocus', DataManagerControlExtractors.ItemFocusChangedArgsExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [EventData]), __metadata(\"design:returntype\", void 0)], DataManagerControlBaseComponent.prototype, \"itemFocusChangeHandler\", null);\n\n  __decorate([serverEvent('dwnrowchange', DataManagerControlExtractors.RowFocusChangedArgsExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [EventData]), __metadata(\"design:returntype\", void 0)], DataManagerControlBaseComponent.prototype, \"rowFocusChangedHandler\", null);\n\n  __decorate([serverEvent('dwnrowchanging', DataManagerControlExtractors.RowFocusChangingArgsExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [EventData]), __metadata(\"design:returntype\", void 0)], DataManagerControlBaseComponent.prototype, \"rowFocusChangingHandler\", null);\n\n  __decorate([serverEvent('dwndrop', DataManagerControlExtractors.DropEventExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [EventData]), __metadata(\"design:returntype\", void 0)], DataManagerControlBaseComponent.prototype, \"dwnDropEventHandler\", null);\n\n  __decorate([serverEvent('dwndragdrop', DataManagerControlExtractors.DragDropEventExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", Boolean)], DataManagerControlBaseComponent.prototype, \"dragDrop\", null);\n\n  __decorate([serverEvent('dwndragenter', DataManagerControlExtractors.DragEventExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [EventData]), __metadata(\"design:returntype\", void 0)], DataManagerControlBaseComponent.prototype, \"dragEnter\", null);\n\n  __decorate([serverEvent('dwndragleave', DataManagerControlExtractors.DragEventExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [EventData]), __metadata(\"design:returntype\", void 0)], DataManagerControlBaseComponent.prototype, \"dragLeave\", null);\n\n  __decorate([serverEvent('dwndragwithin', DataManagerControlExtractors.DragDropEventExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [EventData]), __metadata(\"design:returntype\", void 0)], DataManagerControlBaseComponent.prototype, \"dragWithin\", null);\n\n  return DataManagerControlBaseComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet DropLockService = /*#__PURE__*/(() => {\n  class DropLockService {\n    constructor() {\n      this.timer = 300;\n    }\n    /**\r\n     * Gets lock time\r\n     */\n\n\n    get lockTime() {\n      return this.timer;\n    }\n    /**\r\n     * Sets lock time\r\n     */\n\n\n    set lockTime(value) {\n      this.timer = value;\n    }\n    /**\r\n     * Triggers to server\r\n     * Handle a semaphore to  avoid triggering duplicate drop\r\n     * events. This is necessary since the angular-draggable-droppable\r\n     * library does not filter the first element that receives the drop\r\n     * events and propagates the event over the windows behind it.\r\n     * @returns true if to server\r\n     */\n\n\n    triggerToServer() {\n      if (!this.lock) {\n        this.lock = true;\n        clearTimeout(this.timeout);\n        this.timeout = setTimeout(() => {\n          this.clearFlag();\n        }, this.lockTime);\n        return true;\n      }\n\n      return false;\n    }\n    /**\r\n     * Clears flag\r\n     */\n\n\n    clearFlag() {\n      this.lock = false;\n    }\n\n  }\n\n  DropLockService.ɵfac = function DropLockService_Factory(t) {\n    return new (t || DropLockService)();\n  };\n\n  DropLockService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: DropLockService,\n    factory: DropLockService.ɵfac,\n    providedIn: 'root'\n  });\n  return DropLockService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet GlobalConfigurationService = /*#__PURE__*/(() => {\n  class GlobalConfigurationService {}\n\n  GlobalConfigurationService.ɵfac = function GlobalConfigurationService_Factory(t) {\n    return new (t || GlobalConfigurationService)();\n  };\n\n  GlobalConfigurationService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: GlobalConfigurationService,\n    factory: GlobalConfigurationService.ɵfac,\n    providedIn: 'root'\n  });\n  return GlobalConfigurationService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet DataWindowErrorComponent = /*#__PURE__*/(() => {\n  class DataWindowErrorComponent {\n    constructor(globals) {\n      this.globals = globals;\n      this.closed = new EventEmitter();\n      this.openChange = new EventEmitter();\n      /**\r\n       * Title  of data window error component\r\n       */\n\n      this.title = 'DataWindow Error';\n    }\n    /**\r\n     * Gets DM error message\r\n     */\n\n\n    get message() {\n      return this.itemError ? `Item ${this.itemError} does not pass the validation test` : 'Value required for this item';\n    }\n    /**\r\n     * on init.\r\n     * Verifies GlobalConfiguration Service to get the Titlebar value\r\n     */\n\n\n    ngOnInit() {\n      if (this.globals) {\n        this.title = this.globals.dataManagerErrorsTitle ? this.globals.dataManagerErrorsTitle : this.title;\n      }\n    }\n    /**\r\n     * After view init to set focus to default button.\r\n     */\n\n\n    ngAfterViewInit() {\n      if (this.defaultButton) {\n        this.applyFocus(this.defaultButton);\n      }\n    }\n    /**\r\n     * Applies focus to default or selectable element in\r\n     * component. It triggers dom element focus()\r\n     */\n\n\n    applyFocus(element) {\n      element.nativeElement.focus();\n    }\n    /**\r\n     * Avoids user interaction\r\n     * @param event the current javascript event\r\n     */\n\n\n    avoidInteraction(event) {\n      Utils.preventPropagation(event);\n    }\n    /**\r\n     * Closes data window error component\r\n     */\n\n\n    close(event) {\n      this.open = false;\n      this.openChange.emit(this.open);\n      this.closed.emit(event);\n    }\n\n  }\n\n  DataWindowErrorComponent.ɵfac = function DataWindowErrorComponent_Factory(t) {\n    return new (t || DataWindowErrorComponent)(i0.ɵɵdirectiveInject(GlobalConfigurationService, 8));\n  };\n\n  DataWindowErrorComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: DataWindowErrorComponent,\n    selectors: [[\"wm-data-window-error\"]],\n    viewQuery: function DataWindowErrorComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c26, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.defaultButton = _t.first);\n      }\n    },\n    inputs: {\n      open: \"open\",\n      itemError: \"itemError\"\n    },\n    outputs: {\n      closed: \"closed\",\n      openChange: \"openChange\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"title\", \"minWidth\", \"width\", \"close\", 4, \"ngIf\"], [3, \"title\", \"minWidth\", \"width\", \"close\"], [2, \"margin\", \"30px\", \"text-align\", \"center\"], [1, \"material-icons\", \"icon-image\"], [\"kendoButton\", \"\", \"primary\", \"true\", 1, \"okError\", 3, \"keydown.tab\", \"keydown.shift.tab\", \"blur\", \"click\"], [\"default\", \"\"]],\n    template: function DataWindowErrorComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, DataWindowErrorComponent_kendo_dialog_0_Template, 9, 4, \"kendo-dialog\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.open);\n      }\n    },\n    directives: [i13.DialogComponent, i13.DialogActionsComponent, i6.NgIf, i6$2.ButtonDirective],\n    styles: [\".icon-image[_ngcontent-%COMP%]{margin-right:20px;font-size:xx-large;vertical-align:middle}\"],\n    changeDetection: 0\n  });\n  return DataWindowErrorComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/***********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n\nlet DynamicContainerComponent = /*#__PURE__*/(() => {\n  class DynamicContainerComponent extends ContainerComponent {\n    constructor(ref, diffs, service) {\n      super(diffs, service);\n      this.ref = ref;\n      this.diffs = diffs;\n      this.service = service;\n      this.internalDMContext = {};\n      this.pendingContextComponents = [];\n    }\n\n    set context(value) {\n      this.internalDMContext = value;\n\n      if (value && this.pendingContextComponents.length > 0) {\n        while (this.pendingContextComponents.length > 0) {\n          const comp = this.pendingContextComponents.pop();\n          comp.dataManagerContext = this.internalDMContext;\n          comp.ref.detectChanges();\n        }\n      }\n\n      if (value) {\n        const keys = Object.keys(this.openedComponents);\n        keys.forEach(element => {\n          this.openedComponents[element].instance.dataManagerContext = this.internalDMContext;\n          this.openedComponents[element].instance.detectChanges();\n        });\n      }\n\n      this.ref.detectChanges();\n    }\n\n    get context() {\n      return this.internalDMContext;\n    }\n    /**\r\n     * Load the components\r\n     * @param id the component's id\r\n     * @param componentToLoad the component prototype\r\n     * @param model the model of the current component\r\n     */\n\n\n    loadComponent(id, componentToLoad, model) {\n      super.loadComponent(id, componentToLoad, model);\n\n      if (this.context) {\n        this.openedComponents[id].instance.dataManagerContext = this.context;\n        this.openedComponents[id].instance.ref.detectChanges();\n      } else {\n        this.pendingContextComponents.push(this.openedComponents[id].instance);\n      }\n    }\n    /**\r\n     * Creates a new instance of the component\r\n     * @param id the current control id\r\n     */\n\n\n    addControl(id) {\n      const model = this.controlModels[id];\n      const componentType = this.service.config.webMapVersion === WMConstants.version4 ? TypeResolver.getType(model.Name) : TypeResolver.getType(model.MapperId);\n\n      if (componentType) {\n        this.loadComponent(id, componentType, model);\n      }\n    }\n\n  }\n\n  DynamicContainerComponent.ɵfac = function DynamicContainerComponent_Factory(t) {\n    return new (t || DynamicContainerComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.KeyValueDiffers), i0.ɵɵdirectiveInject(i1.WebMapService));\n  };\n\n  DynamicContainerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: DynamicContainerComponent,\n    selectors: [[\"wm-dynamic-container\"]],\n    inputs: {\n      controlModels: \"controlModels\",\n      context: \"context\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 0,\n    consts: [[\"wm-content\", \"\"]],\n    template: function DynamicContainerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementContainer(0, 0);\n      }\n    },\n    directives: [i2.ContainerDirective],\n    encapsulation: 2\n  });\n  return DynamicContainerComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet DynamicRowTabSequenceDirective = /*#__PURE__*/(() => {\n  class DynamicRowTabSequenceDirective {\n    constructor(host, view, element) {\n      this.host = host;\n      this.view = view;\n      this.element = element;\n    }\n\n    get components() {\n      const baseControlArray = [];\n      /* c8 ignore else */\n\n      if (this.host) {\n        Object.keys(this.host.openedComponents).forEach(id => {\n          const utils = new TabSequenceUtils();\n          const comp = this.host.openedComponents[id].instance;\n\n          if (comp.tabSequence !== -1 && !comp.disabled && comp.visible) {\n            const dwComp = utils.getDataManagerTabSequenceComponent(comp);\n            baseControlArray.push(dwComp);\n          }\n        });\n      }\n\n      return baseControlArray.sort((a, b) => a.tabSequence > b.tabSequence ? 1 : -1);\n    }\n\n    get nativeElement() {\n      return this.element.nativeElement;\n    }\n\n  }\n\n  DynamicRowTabSequenceDirective.ɵfac = function DynamicRowTabSequenceDirective_Factory(t) {\n    return new (t || DynamicRowTabSequenceDirective)(i0.ɵɵdirectiveInject(DynamicContainerComponent), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  DynamicRowTabSequenceDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: DynamicRowTabSequenceDirective,\n    selectors: [[\"\", \"wmDynamicRow\", \"\"]]\n  });\n  return DynamicRowTabSequenceDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nvar ProcessingTypes = /*#__PURE__*/(() => {\n  (function (ProcessingTypes) {\n    ProcessingTypes[\"Default\"] = \"0\";\n    ProcessingTypes[\"Grid\"] = \"1\";\n    ProcessingTypes[\"Label\"] = \"2\";\n    ProcessingTypes[\"Graph\"] = \"3\";\n    ProcessingTypes[\"CrossTab\"] = \"4\";\n    ProcessingTypes[\"Composite\"] = \"5\";\n    ProcessingTypes[\"OLE\"] = \"6\";\n    ProcessingTypes[\"RichText\"] = \"7\";\n    ProcessingTypes[\"TreeView\"] = \"8\";\n    ProcessingTypes[\"TreeviewWithGrid\"] = \"9\";\n  })(ProcessingTypes || (ProcessingTypes = {}));\n\n  return ProcessingTypes;\n})();\n\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\nlet UpdateCurrentKeyService = /*#__PURE__*/(() => {\n  class UpdateCurrentKeyService {\n    /* c8 ignore start */\n    constructor(service, activeWindow) {\n      this.service = service;\n      this.activeWindow = activeWindow;\n      /**\r\n       * Internal field that holds the currentKey value\r\n       */\n\n      this.currentKey = undefined;\n    }\n\n    registerEvent() {\n      this.bindCommandGenerator = this.commandGenerator.bind(this);\n      this.service.core.getEvent().publish(Events.PreActionCommandGeneratorRegistration, this.commandGenerator.bind(this));\n    }\n    /**\r\n     * Generates the UPDATE_CURRENT_KEY command.\r\n     */\n\n\n    commandGenerator() {\n      const receiverId = this.activeWindow.getActiveWindow();\n      const model = receiverId ? this.service.core.getModel(receiverId) : undefined;\n\n      if (!receiverId || !model) {\n        return null;\n      }\n\n      this.command = {\n        receiverId,\n        command: 'UPDATE_CURRENT_KEY',\n        data: {\n          key: this.currentKey ? this.currentKey : 'none'\n        }\n      };\n      return this.command;\n    }\n    /**\r\n     * Clear commands\r\n     */\n\n\n    clear() {\n      setTimeout(() => {\n        this.currentKey = undefined;\n      }, 200);\n      return true;\n    }\n    /**\r\n     * Sets the value of the current key that will be send by\r\n     * the UPDATE_CURRENT_KEY command.\r\n     * @param key the new value of the current key.\r\n     */\n\n\n    setCurrentKey(key) {\n      this.currentKey = key;\n    }\n\n    ngOnDestroy() {\n      this.service.core.getEvent().publish(Events.PreActionCommandGeneratorDeregistration, this.bindCommandGenerator);\n    }\n\n  }\n\n  UpdateCurrentKeyService.ɵfac = function UpdateCurrentKeyService_Factory(t) {\n    return new (t || UpdateCurrentKeyService)(i0.ɵɵinject(i1.WebMapService), i0.ɵɵinject(ActiveWindowService));\n  };\n\n  UpdateCurrentKeyService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UpdateCurrentKeyService,\n    factory: UpdateCurrentKeyService.ɵfac,\n    providedIn: 'root'\n  });\n  return UpdateCurrentKeyService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet MdiWindowsService = /*#__PURE__*/(() => {\n  class MdiWindowsService {\n    constructor() {\n      this.mdiWindows = [];\n    }\n    /**\r\n     * method to add a new mdi window in the collection\r\n     * @param mdi window to be added in the collection\r\n     */\n\n\n    addNewMDIWindow(mdi) {\n      if (mdi.windowType === WindowType.mdi || mdi.windowType === WindowType.mdihelp) {\n        const index = this.mdiWindows.lastIndexOf(mdi);\n\n        if (index === -1) {\n          this.mdiWindows.push(mdi);\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /**\r\n     * method to find a specify window\r\n     * @param mdiId id to search in the collection\r\n     */\n\n\n    findMDIWindow(mdiId) {\n      const mdi = this.mdiWindows.find(element => element.id === mdiId);\n      return mdi ? mdi : null;\n    }\n    /**\r\n     * remove a specify window from the collection\r\n     * @param mdi window to be removed\r\n     */\n\n\n    removeMDIWindow(mdi) {\n      const index = this.mdiWindows.lastIndexOf(mdi);\n\n      if (index !== -1) {\n        this.mdiWindows.splice(index, 1);\n      }\n    }\n\n  }\n\n  MdiWindowsService.ɵfac = function MdiWindowsService_Factory(t) {\n    return new (t || MdiWindowsService)();\n  };\n\n  MdiWindowsService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MdiWindowsService,\n    factory: MdiWindowsService.ɵfac,\n    providedIn: 'root'\n  });\n  return MdiWindowsService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet HotKeysCommandService = /*#__PURE__*/(() => {\n  class HotKeysCommandService {\n    constructor(mdiWindowsService) {\n      this.mdiWindowsService = mdiWindowsService;\n      this.subject = new Subject();\n    }\n    /**\r\n     * Sends message\r\n     * @param data Message data\r\n     */\n\n\n    sendMessage(data) {\n      this.subject.next(data);\n    }\n    /**\r\n     * Clear message\r\n     */\n\n\n    clearMessage() {\n      this.subject.next();\n    }\n    /**\r\n     * Gets current message\r\n     */\n\n\n    getMessage() {\n      return this.subject.asObservable();\n    }\n\n  }\n\n  HotKeysCommandService.ɵfac = function HotKeysCommandService_Factory(t) {\n    return new (t || HotKeysCommandService)(i0.ɵɵinject(MdiWindowsService));\n  };\n\n  HotKeysCommandService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: HotKeysCommandService,\n    factory: HotKeysCommandService.ɵfac,\n    providedIn: 'root'\n  });\n  return HotKeysCommandService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/* c8 ignore file */\n\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet UpdateScreenResolution = /*#__PURE__*/(() => {\n  class UpdateScreenResolution {\n    /* c8 ignore start */\n    constructor(service, activeWindow) {\n      this.service = service;\n      this.activeWindow = activeWindow;\n    }\n\n    registerEvent() {\n      this.bindCommandGenerator = this.commandGenerator.bind(this);\n      this.service.core.getEvent().publish(Events.PreActionCommandGeneratorRegistration, this.commandGenerator.bind(this));\n    }\n    /**\r\n     * Generates the UPDATE_CURRENT_KEY command.\r\n     */\n\n\n    commandGenerator() {\n      const width = document.documentElement.clientWidth;\n      const height = document.documentElement.clientHeight;\n      const receiverId = this.activeWindow.getActiveWindow();\n\n      if (receiverId && (this.clientHeight !== height || this.clientWidth !== width)) {\n        this.clientHeight = height;\n        this.clientWidth = width;\n        return this.command = {\n          receiverId: this.activeWindow.getActiveWindow(),\n          command: 'UPDATE_SCREEN_RESOLUTION',\n          data: {\n            width: document.documentElement.clientWidth,\n            height: document.documentElement.clientHeight\n          }\n        };\n      }\n\n      return null;\n    }\n\n    ngOnDestroy() {\n      this.service.core.getEvent().publish(Events.PreActionCommandGeneratorDeregistration, this.bindCommandGenerator);\n    }\n\n  }\n\n  UpdateScreenResolution.ɵfac = function UpdateScreenResolution_Factory(t) {\n    return new (t || UpdateScreenResolution)(i0.ɵɵinject(i1.WebMapService), i0.ɵɵinject(ActiveWindowService));\n  };\n\n  UpdateScreenResolution.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UpdateScreenResolution,\n    factory: UpdateScreenResolution.ɵfac,\n    providedIn: 'root'\n  });\n  return UpdateScreenResolution;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet UserObjectEventService = /*#__PURE__*/(() => {\n  class UserObjectEventService {\n    constructor() {}\n    /**\r\n     * Gets instance\r\n     */\n\n\n    get instance() {\n      return this.userObjectInstance;\n    }\n    /**\r\n     * Sets instance\r\n     */\n\n\n    set instance(value) {\n      this.userObjectInstance = value;\n    }\n\n  }\n\n  UserObjectEventService.ɵfac = function UserObjectEventService_Factory(t) {\n    return new (t || UserObjectEventService)();\n  };\n\n  UserObjectEventService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UserObjectEventService,\n    factory: UserObjectEventService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserObjectEventService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet AcceleratorService = /*#__PURE__*/(() => {\n  class AcceleratorService {\n    constructor() {\n      /**\r\n       * Components instances dictionary of accelerator service\r\n       */\n      this.componentsInstances = new Dictionary(); // represents the size of the list\n\n      this.listLength = 0;\n    }\n    /**\r\n     * Registers the instance pass as parameter when ngOnInit\r\n     * cycle is called by the component.\r\n     * @param componentInstance The component instance to be added to\r\n     * componentInstance dictionary\r\n     */\n\n\n    registerInstance(componentInstance) {\n      const shortcut = this.retrieveComponentShortCut(componentInstance);\n\n      if (shortcut && !this.isRegister(shortcut)) {\n        componentInstance.shortcut = shortcut;\n        this.componentsInstances.add(shortcut, componentInstance);\n        this.listLength++;\n      }\n    }\n    /**\r\n     * Unregisters the instance pass as parameter when ngOnDestroy\r\n     * cycle is called by the component.\r\n     * @param componentInstance The component instance to be removed of\r\n     * componentInstances dictionary\r\n     */\n\n\n    unregisterInstance(componentInstance) {\n      if (this.isRegister(componentInstance.shortcut)) {\n        this.componentsInstances.remove(componentInstance.shortcut);\n        this.listLength--;\n      }\n    }\n    /**\r\n     * Resolves short cut pass as parameter.\r\n     * @param key The key part of combination of alt + 'key'\r\n     * @param event Event data of key combination event\r\n     */\n\n\n    resolveShortCut(event) {\n      const key = this.obtainEventKeyCombination(event);\n\n      if (key && this.isRegister(key)) {\n        const component = this.componentsInstances.value(key);\n\n        if (component.enabled && component.visible) {\n          component.applyFocus();\n          component.detectChanges();\n          component.clickHandler(event);\n          return true;\n        }\n\n        return false;\n      }\n\n      return false;\n    }\n    /**\r\n     * Determines whether component is register or not in the\r\n     * componentInstances dictionary.\r\n     * @param key The key part of combination of alt + 'key'\r\n     * @returns true if register\r\n     */\n\n\n    isRegister(key) {\n      return this.componentsInstances.containsKey(key);\n    }\n    /**\r\n     * Retrieves component shortcut if it exists.\r\n     * @param componentInstance The component instance to be check.\r\n     * @returns component shortcut.\r\n     */\n\n\n    retrieveComponentShortCut(componentInstance) {\n      if (componentInstance) {\n        const text = componentInstance.model.Text;\n        const regex = new RegExp(/&{1}([^& ]|$)/, 'g');\n        const result = regex.exec(text);\n        return result && result.length > 0 ? result[1].toUpperCase() : '';\n      }\n\n      return '';\n    }\n    /**\r\n     * Obtains event key combination\r\n     * @param event Event parameter to extract key combination\r\n     * @returns event key combination\r\n     */\n\n\n    obtainEventKeyCombination(event) {\n      const keyCode = event.keyCode; // Excludes function key codes\n\n      return keyCode && (keyCode < 112 || keyCode > 123) ? String.fromCharCode(keyCode).toUpperCase() : null;\n    }\n\n  }\n\n  AcceleratorService.ɵfac = function AcceleratorService_Factory(t) {\n    return new (t || AcceleratorService)();\n  };\n\n  AcceleratorService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: AcceleratorService,\n    factory: AcceleratorService.ɵfac,\n    providedIn: 'root'\n  });\n  return AcceleratorService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet DropDownDataWindowRulesService = /*#__PURE__*/(() => {\n  class DropDownDataWindowRulesService {\n    constructor(webMapService) {\n      this.webMapService = webMapService;\n    }\n    /**\r\n     * Determines whether the model represents a simple DDDW\r\n     * @param model DDDW model\r\n     * @returns true if simple drop down data window\r\n     */\n\n\n    isSimpleDropDownDataWindow(model) {\n      return this.isFeatureActivated() && ruleIsNotAllowEdit(model) && ruleMaxItemsAllowed(model) && ruleIsSimpleColumn(model) && ruleDisplayAndDataColumnMustNotBeCompute(model);\n    }\n\n    isFeatureActivated() {\n      return this.webMapService && this.webMapService.config && this.webMapService.config.useSimpleDDDW;\n    }\n\n  }\n\n  DropDownDataWindowRulesService.MAX_ITEMS = 6000;\n\n  DropDownDataWindowRulesService.ɵfac = function DropDownDataWindowRulesService_Factory(t) {\n    return new (t || DropDownDataWindowRulesService)(i0.ɵɵinject(i1.WebMapService));\n  };\n\n  DropDownDataWindowRulesService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: DropDownDataWindowRulesService,\n    factory: DropDownDataWindowRulesService.ɵfac,\n    providedIn: 'root'\n  });\n  return DropDownDataWindowRulesService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * Must not contain more items than the maximum allowed by Kendo\r\n */\n\n\nfunction ruleMaxItemsAllowed(model) {\n  return model && model.DddwData && model.DddwData.TotalItems != null && model.DddwData.TotalItems < DropDownDataWindowRulesService.MAX_ITEMS;\n}\n/**\r\n * Must not be editable\r\n */\n\n\nfunction ruleIsNotAllowEdit(model) {\n  return model && !model.AllowEdit;\n}\n/**\r\n * Display and Data columns must not be compute\r\n */\n\n\nfunction ruleDisplayAndDataColumnMustNotBeCompute(model) {\n  if (model && model.DddwData) {\n    if (model.DddwData.ComputedInformation) {\n      return !model.DddwData.ComputedInformation[model.DddwDataColumn] && !model.DddwData.ComputedInformation[model.DddwDisplayColumn];\n    }\n\n    return true;\n  }\n\n  return false;\n}\n/**\r\n * Must be simple column (It must not have multiple columns)\r\n */\n\n\nfunction ruleIsSimpleColumn(model) {\n  if (model && model.DddwData) {\n    if (!model.ColumnModels) {\n      const models = Utils.collectColumnModels(model.DddwData, true);\n      model.ColumnModels = models.columnModels;\n    }\n\n    const columnArray = model.ColumnModels ? Object.keys(model.ColumnModels) : null;\n    return columnArray && columnArray.length > 0 && columnArray.length <= 2;\n  }\n\n  return false;\n}\n/* c8 ignore file */\n\n/* c8 ignore file */\n\n\nlet WMGridComponent = /*#__PURE__*/(() => {\n  class WMGridComponent extends BaseDataManagerComponent {\n    /* c8 ignore start */\n    constructor(changeDetector, renderer2, element, emitter, dmInteraction, dataService, webmapService, formBuilder, focusManagerService, messageCommandService, lengthConverter, resizeDataManagerService, dataMTabSequenceService, tabControlService, buttonsService) {\n      super(changeDetector, renderer2, element, emitter, webmapService, dataService, focusManagerService, messageCommandService, dmInteraction, lengthConverter, dataMTabSequenceService, tabControlService);\n      this.emitter = emitter;\n      this.dmInteraction = dmInteraction;\n      this.dataService = dataService;\n      this.webmapService = webmapService;\n      this.formBuilder = formBuilder;\n      this.focusManagerService = focusManagerService;\n      this.resizeDataManagerService = resizeDataManagerService;\n      this.dataMTabSequenceService = dataMTabSequenceService;\n      this.tabControlService = tabControlService;\n      this.buttonsService = buttonsService;\n      /**\r\n       * Original columns without filter to get\r\n       * the column template on getColumnTemplate method\r\n       */\n\n      this.originalColumns = [];\n      /**\r\n       * Input  of wmgrid component\r\n       * Allows to configure the amount of items to be\r\n       * displayed per grid page\r\n       */\n\n      this.pageSizes = [10, 20, 50, 100, 200];\n      /**\r\n       * After the current page is loaded\r\n       */\n\n      this.afterDataLoadedEvent = params => {\n        setTimeout(() => {\n          this.isRetrievingDataFromServer = false;\n          this.isVirtualMode() ? this.afterDataLoadedEventVirtual(params) : this.afterDataLoadedEventPager(params);\n          this.updateDataManagerControlCurrentRow();\n          this.afterDataLoadedDDDW(params);\n        }, 50);\n        return true;\n      };\n      /**\r\n       * After a Clear Action event\r\n       */\n\n\n      this.afterClearActionEvent = () => {\n        this.totalItems = 0;\n        this.currentVisibleRows = [];\n        this.skip = 0;\n        this.currentPage = [];\n        this.gridView = undefined;\n        this.isRetrievingDataFromServer = false;\n        this.detectChanges();\n      };\n\n      this.gridElement = element;\n      this.setSelectableSettings();\n    }\n    /**\r\n     * Called at the component\r\n     * initialization\r\n     */\n\n\n    ngOnInit() {\n      super.ngOnInit();\n      this.displayedRowDoubleCheck = 0;\n      this.skip = 0;\n      this.pageSize = this.isDropDownDataWindow() ? 100 : this.pageSize ? this.pageSize : 10;\n      this.pagerSettings = {\n        buttonCount: 5,\n        info: true,\n        type: 'numeric',\n        pageSizes: this.pageSizes,\n        previousNext: true\n      };\n      this.collectColumnModels();\n      this.getColumns();\n      this.loadPage();\n      this.eventSubscription = this.emitter.events.subscribe(evt => this.columnEventHandler(evt));\n      this.resizeSubscription = this.resizeDataManagerService.eventsDM.subscribe(event => this.resizeHandler()); // To review the dirty flag after a server action\n\n      this.detectChangeSub = this.webmapService.core.getEvent().subscribe('detectChanges', () => {\n        this.detectChangesFromServer();\n      });\n\n      if (this.isDropDownDataWindow() && this.currentRow > 1) {\n        this.displayedRow = this.currentRow;\n        this.updateSelectedRowWithCurrentRow();\n      }\n\n      if (!this.isDropDownDataWindow() && this.dataMTabSequenceService) {\n        this.dataMTabSequenceService.registerDataManager(this);\n      }\n\n      this.dmInteraction.registerInternalDataManager(this); // Set the last column model in the current DW.\n\n      this.getValidColumns();\n      /* c8 ignore next 4 */\n\n      this.filterSubscription = this.emitter.filterRows.subscribe(filterObject => {\n        this.applyFilter(filterObject);\n      });\n      this.gridBusyLoaderSubscription = this.emitter.gridBusyLoaderEmit.subscribe(() => {\n        this.notifyBusyLoaderEnd();\n      });\n    }\n    /**\r\n     * Applies filter\r\n     * @param filterObject\r\n     */\n\n\n    applyFilter(filterObject) {\n      if (filterObject.iterate) {\n        this.changeToNextResult(filterObject);\n      } else {\n        this.currentRow = 1;\n        this.afterClearActionEvent();\n        this.getPage(1, this.pageSize, filterObject, filterObject.filter);\n      }\n    }\n    /**\r\n     * Changes to next result retrieved by filtered request.\r\n     */\n\n\n    changeToNextResult(filterObject) {\n      if (this.currentRow === this.totalItems) {\n        this.skip = 0;\n        this.getPage(1, this.pageSize, filterObject, filterObject.filter);\n      } else {\n        this.moveFocusDown(true);\n        this.setDDDWCurrentRow(this.currentRow - 1);\n      }\n    }\n    /**\r\n     * Updates from server when the grid uses pager.\r\n     */\n\n\n    updateFromServerPager() {\n      /* c8 ignore else */\n      if (this.dirty || this.forceDirty) {\n        // Reload current data window\n        this.getColumns();\n        this.loadPage();\n        this.dirty = false;\n        this.forceDirty = false;\n      }\n    }\n    /**\r\n     * Detects changes event called from server for Grid with virtual scrolling.\r\n     * Method to update the currentRow whenever it is changed from the\r\n     * server side. It only applies when the grid is in virtual mode.\r\n     */\n\n\n    updateFromServerVirtual() {\n      // Meanwhile the grid is retrieving data from server cancel server updates\n      // to avoid collisions.\n      if (this.isRetrievingDataFromServer) {\n        return;\n      } // Check displayedRow before dirty to cancel dirty if scroll should load\n      // a new virtual page. This avoid double refresh.\n\n\n      const shouldScrollTo = this.shouldScrollToVirtual();\n      let isOut = false;\n\n      if (shouldScrollTo) {\n        isOut = this.isDisplayedRowOutOfVirtualPage();\n\n        if (isOut) {\n          // Reassign total with total items due a possible insert or remove\n          this.checkAndReflectTotalItemsChange();\n          this.dirty = false;\n          this.forceDirty = false;\n        }\n      }\n\n      if (this.dirty || this.forceDirty) {\n        // Reload current data window\n        this.getColumns();\n        this.loadPage();\n        this.dirty = false;\n        this.forceDirty = false;\n        this.updateSelectedRowWithCurrentRow(); // Due an async call scrollToPosition and selectCurrentRowColumn lines\n        // are going to be executed after request's response in AfterDataLoadedEvent.\n\n        return;\n      }\n\n      if (shouldScrollTo) {\n        this.oldDisplayedRow = this.displayedRow;\n        this.scrollToPositionVirtual(); // It could or couldn't call an async request depending if the\n        // displayedRow is inside of a different virtual page that current\n        // virtual page.\n\n        if (isOut) {\n          this.displayedRowDoubleCheck = this.displayedRow;\n          return;\n        }\n      }\n\n      if (this.shouldSelectCurrentRowColumn() && this.shouldApplyGridSelectionVirtual()) {\n        // It only happens when the currentRow and/or currentControlName were\n        // changed but they remains inside the same range of current visible page.\n        this.selectCurrentRowColumn();\n        this.updateSelectedRowWithCurrentRow();\n      }\n    }\n    /**\r\n     * Should apply grid selection to Grid component. It returns true if Grid is\r\n     * using virtual scrolling, currentRow or CurrentControlName have changed and\r\n     * the currentRow is inside the visible page.\r\n     * @returns true if apply grid selection\r\n     */\n\n\n    shouldApplyGridSelectionVirtual() {\n      return (this.internalCurrentRow !== this.currentRow || this.internalControlName !== this.currentControlName) && this.isInVisiblePage(this.currentRow);\n    }\n    /**\r\n     * Determines whether virtual grid should scroll to the position of\r\n     * the displayedRow property.\r\n     * @returns true if should scroll\r\n     */\n\n\n    shouldScrollToVirtual() {\n      return this.oldDisplayedRow !== this.displayedRow && this.displayedRow > 0 && this.displayedRow <= this.totalItems;\n    }\n    /**\r\n     * Double checks displayed row using displayedRowDoubleCheck flag, if the\r\n     * flag is different of 0 and it is different of the displayedRow means that\r\n     * something wrong happens with the scrollTo (kendoGridComponent) method.\r\n     * @returns true if displayedRow is wrong\r\n     */\n\n\n    doubleCheckDisplayedRow() {\n      if (this.displayedRowDoubleCheck !== 0 && this.displayedRowDoubleCheck !== this.displayedRow) {\n        this.displayedRow = this.displayedRowDoubleCheck;\n        this.callCommandFirstVisibleRow(this.displayedRow);\n        this.displayedRowDoubleCheck = 0;\n        return true;\n      }\n\n      this.displayedRowDoubleCheck = 0;\n      return false;\n    }\n    /**\r\n     * Determines whether virtual mode is active\r\n     * @returns true if virtual mode is active\r\n     */\n\n\n    isVirtualMode() {\n      return this.scrollMode === 'virtual';\n    }\n\n    ngAfterViewInit() {\n      super.ngAfterViewInit();\n      this.emitter.cancelDynamicStyles = this.cancelDynamicStyles;\n    }\n\n    ngAfterContentInit() {\n      this.initializeScrollMode();\n    }\n    /**\r\n     * after view checked life cycle of angular.\r\n     * set the background color for the grid component\r\n     */\n\n\n    ngAfterViewChecked() {\n      this.setDataManagerBackground();\n      this.setPagerBackground();\n    }\n    /**\r\n     * Sets style property for a specify element\r\n     * @param element element to apply the property\r\n     * @param property style property name to apply\r\n     * @param value style property value to apply\r\n     */\n\n\n    setStyleProperty(element, property, value) {\n      this.renderer.setStyle(element, property, value);\n    }\n    /**\r\n     * Gets back grid color from the model,\r\n     * returns undefined if the color is not exist in the model\r\n     */\n\n\n    get backGridColor() {\n      return this.model.Color && Utils.validColorMapped(this.model.Color) ? this.model.Color : undefined;\n    }\n    /**\r\n     * Gets the height of the DM content.\r\n     * Returns percentage, auto or pixels\r\n     * Overrides original function in order to display\r\n     * the right size if is under a DDDW or under a DMC\r\n     */\n\n\n    get dmViewHeight() {\n      if (this.isDropDownDataWindow()) {\n        return this.dataManagerControlHeight;\n      }\n\n      return this.detailsContainerHeight;\n    }\n\n    resizeHandler() {\n      this.pageSize = this.visibleRows;\n      this.loadPage();\n    }\n\n    ngOnDestroy() {\n      super.ngOnDestroy();\n      this.webmapService.core.getEvent().unSubscribe(this.detectChangeSub);\n      this.eventSubscription.unsubscribe();\n      this.resizeSubscription.unsubscribe();\n      this.gridBusyLoaderSubscription.unsubscribe();\n    }\n\n    setSelectableSettings() {\n      this.selectableSettings = {\n        mode: 'multiple',\n        enabled: true,\n        checkboxOnly: false\n      };\n    }\n    /**\r\n     * Determines whether displayed row is out of the current virtual page.\r\n     * @returns true if displayed row is not in the current virtual page.\r\n     */\n\n\n    isDisplayedRowOutOfVirtualPage() {\n      return (this.displayedRow < this.skip || this.displayedRow > this.skip + this.pageSize) && this.displayedRow > 0;\n    }\n    /**\r\n     * Verifies if the displayedRow has changed in the backend\r\n     * and a scrolling action its required\r\n     */\n\n\n    shouldScrollTo() {\n      // Short cut to speed up the action\n      if (this.oldDisplayedRow === this.displayedRow) {\n        return false;\n      } // If it's in a different page\n\n\n      if (this.isDisplayedRowOutOfVirtualPage()) {\n        this.oldDisplayedRow = this.displayedRow;\n        return true;\n      } // Update value for different page or if it's in the same page\n      // but is a different row\n\n\n      this.oldDisplayedRow = this.displayedRow;\n      this.scrollToPosition();\n      return false;\n    }\n    /**\r\n     * Scrolls to position\r\n     */\n\n\n    scrollToPosition() {\n      /* c8 ignore else */\n      if (!this.isVirtualMode() && this.isDisplayedRowOutOfVirtualPage()) {\n        this.updateSkipValue(this.displayedRow);\n        this.callCommandFirstVisibleRow(this.displayedRow);\n        const scrollTo = this.displayedRow - this.skip;\n        setTimeout(() => {\n          // Wait for rows to be displayed\n          const selector = `kendo-grid-list > div > div.k-grid-table-wrap > table > tbody > tr:nth-child(${scrollTo})`;\n          const scrollRow = this.gridElement.nativeElement.querySelector(selector);\n\n          if (scrollRow) {\n            scrollRow.scrollIntoViewIfNeeded ? scrollRow.scrollIntoViewIfNeeded() : scrollRow.scrollIntoView();\n          }\n        }, 25);\n      }\n    }\n\n    scrollToPositionVirtual() {\n      // Arranged because KendoGrid is 0 basis and PB is 1 basis\n      const logicRowIndex = this.displayedRow - 1;\n      this.kendoGridComponent?.scrollTo({\n        row: logicRowIndex\n      });\n    }\n    /**\r\n     *  Calls firstVisibleRowCommand\r\n     */\n\n\n    callCommandFirstVisibleRow(firstRow) {\n      const data = {\n        dataManagerId: this.id,\n        firstRow\n      };\n      this.emitter.commandService.run(CommandName.updateFirstRowOnPage, data);\n    }\n    /**\r\n     * Updates skip value according to a row index\r\n     * @param row the current row to be displayed\r\n     */\n\n\n    updateSkipValue(row) {\n      this.skip = Math.floor(row / this.pageSize) * this.pageSize;\n    }\n    /**\r\n     * Columns event handler\r\n     * @param event the event any\r\n     */\n\n\n    columnEventHandler(event) {\n      if (event.event.serverEvent && event.event.serverEvent === 'clicked' && event.args && event.target && event.mouseEvent) {\n        const currentFocusedRow = event.target.dataManagerContext.rowIndex;\n\n        if (event.mouseEvent.ctrlKey && this.selectedRows) {\n          const currentSelection = this.selectedRows;\n          currentSelection.push(currentFocusedRow);\n          this.selectedRows = currentSelection;\n        } else {\n          this.selectedRows = [currentFocusedRow];\n        }\n\n        this.detectChanges();\n      } else if (event.event.key === 'Tab' && this.currentRow && this.selectedRows[0] !== this.currentRow) {\n        this.updateSelectedRowWithCurrentRow();\n      }\n    }\n    /**\r\n     * Handle the double click event\r\n     * @param event the current javascript event data\r\n     */\n\n\n    doubleClickHandler(event, row) {\n      const dataEvent = new EventData(event, this.id, this.mapperId);\n      dataEvent.event['row'] = row === 0 ? row : this.lastSelectionChangedRow;\n      this.emitDataManagerEvent('DWdoubleClick', dataEvent);\n      Utils.preventPropagation(event);\n    }\n    /**\r\n     * Gets the template according to the column index\r\n     * @param column the current column value\r\n     */\n\n    /* c8 ignore next */\n\n\n    getColumnTemplate(column) {\n      if (this.columnsTemplates.length > 0) {\n        const columnName = column.Name;\n        const templateIndex = this.columnsTemplateDictionary ? this.columnsTemplateDictionary[columnName] : this.originalColumns.findIndex(c => c.Details.Name === columnName);\n        return this.columnsTemplates.toArray()[templateIndex];\n      }\n    }\n    /**\r\n     * Gets header template\r\n     * @param header currentHeaderTemplate\r\n     * @returns header template\r\n     */\n\n\n    getHeaderTemplate(header) {\n      if (this.headerTemplates.length > 0) {\n        const templateIndex = this.headerTemplateDictionary ? this.headerTemplateDictionary[header.Name] : -1;\n        return templateIndex >= 0 ? this.headerTemplates.toArray()[templateIndex] : null;\n      }\n    }\n    /**\r\n     * Gets footer template\r\n     * @param column the current column value\r\n     * @returns footer template\r\n     */\n\n\n    getFooterTemplate(column) {\n      if (this.footerTemplates.length > 0) {\n        const columnName = column.Name;\n        const templateIndex = this.footerTemplateDictionary ? this.footerTemplateDictionary[columnName] : this.originalColumns.findIndex(c => c.Details.Name === columnName);\n        return this.footerTemplates.toArray()[templateIndex];\n      }\n    }\n    /**\r\n     * Gets loaded rows\r\n     */\n\n\n    get rows() {\n      return this.rowsInternal;\n    }\n    /**\r\n     * Sets loaded rows\r\n     */\n\n\n    set rows(value) {\n      this.rowsInternal = value;\n    }\n    /*\r\n     * Gets selected rows\r\n     */\n\n\n    get selectedRows() {\n      return this.currentSelectedRows || [];\n    }\n    /**\r\n     * Sets selected rows\r\n     */\n\n\n    set selectedRows(value) {\n      this.currentSelectedRows = value;\n    }\n    /**\r\n     * Gets selected keys\r\n     * Normalize selection to be shown by grid\r\n     */\n\n\n    get selectedKeys() {\n      return this.selectedRows.map(x => x - 1);\n    }\n    /**\r\n     * Gets the last displayed row\r\n     */\n\n\n    get lastVisibleRow() {\n      return this.currentPage ? this.currentPage.length - 1 : null;\n    }\n    /**\r\n     * Get the value to set the height of the Row\r\n     */\n\n\n    get rowHeight() {\n      return this.model.RowHeight ? this.model.RowHeight : this.detailsHeight;\n    }\n    /**\r\n     * Initializes scroll mode\r\n     * The current scrolling mode for the grid\r\n     */\n\n\n    initializeScrollMode() {\n      if (this.linesIndddw()) {\n        this.scrollable = 'virtual';\n      }\n\n      const isVirtual = this.scrollable && this.scrollable === 'virtual';\n\n      if (this.kendoGridComponent) {\n        this.kendoGridComponent.rowHeight = isVirtual ? this.rowHeight : undefined;\n      }\n\n      this.scrollMode = isVirtual ? 'virtual' : 'scrollable';\n\n      if (isVirtual && !this.linesIndddw()) {\n        this.scrollbarWidth = 0;\n      }\n    }\n    /**\r\n     * Gets data manager type\r\n     */\n\n\n    get dataManagerType() {\n      return DatamanagerType.gridComponent;\n    }\n    /**\r\n     * The index of the first visible row\r\n     */\n\n\n    get visiblePageStart() {\n      return this.skip + 1;\n    }\n    /**\r\n     * The index of the last visible row\r\n     * Note: Skip is 0 basis due a KendoGrid implementation, that is different\r\n     * of PB 1 basis so in a page of 10 elements indices should be from 1 (\r\n     * visiblePageStart) to 10 (visiblePageEnd) and Skip must be 0.\r\n     */\n\n\n    get visiblePageEnd() {\n      return this.skip + this.pageSize;\n    }\n    /**\r\n     * @description\r\n     * This function links the outer css class with borderClass constant css class.\r\n     * @returns { string }\r\n     */\n\n\n    gidClass() {\n      return `${this.class ? this.class : ''} ${this.isVirtualMode() ? '' : 'wm-pager-grid'}`;\n    }\n    /**\r\n     * creates form group object used in the grid's edition\r\n     */\n\n\n    createFormGroup(dataItem) {\n      return this.formBuilder.group(dataItem);\n    }\n    /**\r\n     * Handles the row selection of the grid.\r\n     * @param event the event.\r\n     */\n\n\n    isRowSelected(event) {\n      return event.index === this.currentRow - 1;\n    }\n    /**\r\n     * Validates if the component is under a\r\n     * DDDW and sets the custom selectable function instead\r\n     * @param event the current event action\r\n     */\n\n\n    DDDWSelection() {\n      return e => this.isRowSelected(e);\n    }\n    /**\r\n     * Specific implementation for the WMGRID component\r\n     * that handle the dropdown datawindow\r\n     * @param event the current javascript event\r\n     */\n\n\n    dropDDWKeyboardInteractionHandler(event) {\n      this.keyDownHandler(event);\n    }\n    /**\r\n     * Handles the page change event.\r\n     * @param event The pageChange event object\r\n     */\n\n\n    pageChange(event) {\n      this.forceBusyLoader();\n      this.skip = event.skip;\n      this.pageSize = event.take;\n      this.displayedRow = this.oldDisplayedRow = this.skip + 1;\n      this.callCommandFirstVisibleRow(this.displayedRow);\n      this.loadPage();\n    }\n    /**\r\n     * Retrieves the data from the back-end\r\n     */\n\n\n    loadPage() {\n      this.isRetrievingDataFromServer = true;\n      this.getPage(this.skip + 1, this.pageSize);\n    }\n    /**\r\n     * Get the Grid's Columns object\r\n     */\n\n\n    getColumns() {\n      this.dataService.getGridColumns(this.id, data => this.loadColumns(data));\n    }\n    /**\r\n     * Loads the collection of columns with the\r\n     * data received from the server side\r\n     * @param data the columns data received from the server\r\n     */\n\n\n    loadColumns(data) {\n      data = this.processData(data);\n      this.columns = data.filter(col => col.Details.Visible);\n      /** Assignation to get the original columns to filter from the columnsTemplates.\r\n       *  Assignation on this method to avoid another request to get grid columns\r\n       */\n\n      this.originalColumns = data;\n      this.detectChanges();\n    }\n    /**\r\n     * Returns pagination information used for UPDATE_DM_ROW_AND_COL\r\n     * @param currentRow current selected row\r\n     */\n\n\n    paginationInfo(currentRow) {\n      const result = super.paginationInfo(currentRow);\n      result.pagerMode = this.scrollMode;\n      return result;\n    }\n    /**\r\n     * Override the function that sets current page and ranges\r\n     * @param dataRows The data rows obtained from bundle\r\n     * @param totalRows  Total rows number\r\n     * @param rangeStart Page range start\r\n     * @param rangeEnd  Page rangeEnd\r\n     */\n\n\n    createRows(dataRows, totalRows, rangeStart, rangeEnd) {\n      this.rows = [];\n      this.rangeEnd = rangeEnd;\n      this.rangeStart = rangeStart;\n      this.currentPage = dataRows;\n      this.currentVisibleRows = this.currentPage;\n      this.updateDisplayedRowsDDDW(this.currentPage.length);\n      dataRows.forEach(row => {\n        /**\r\n         * Format the retrieved rows into an object expected\r\n         * by the kendo grid component.\r\n         */\n        const formattedRow = row.reduce((rowObj, cur, i) => {\n          if (i > 0) {\n            rowObj[this.myDataManager.bundleData.getColumnNames()[i - 1]] = cur;\n          }\n\n          return rowObj;\n        }, {});\n        this.rows.push(formattedRow);\n      });\n      this.gridView = {\n        data: this.rows,\n        total: totalRows\n      };\n    }\n    /**\r\n     * After data loaded event for DataManager grid virtual\r\n     * @param [params] params data\r\n     */\n\n\n    afterDataLoadedEventVirtual(params) {\n      // Call to refresh all columns bound\n      this.emitter.emitColDetectChanges(); // Check the displayedRow again\n\n      this.doubleCheckDisplayedRow(); // Scroll to displayed row if is needed\n\n      /* c8 ignore else */\n\n      if (this.shouldScrollToVirtual() && !this.isDisplayedRowOutOfVirtualPage()) {\n        this.oldDisplayedRow = this.displayedRow;\n        this.scrollToPositionVirtual();\n      } // Select and focus current row and column if is needed\n\n      /* c8 ignore else */\n\n\n      if (this.isInVisiblePage(this.currentRow) && this.shouldSelectCurrentRowColumn()) {\n        this.selectCurrentRowColumn(false, false, true);\n      }\n\n      this.detectChanges();\n    }\n    /**\r\n     * After data loaded event for DataManager grid pager\r\n     * @param [params]  params data\r\n     */\n\n\n    afterDataLoadedEventPager(params) {\n      // Call to refresh all columns bound\n      this.emitter.emitColDetectChanges(); // Select and focus current row column\n\n      if (this.shouldSelectCurrentRowColumn()) {\n        this.selectCurrentRowColumn();\n      }\n\n      this.detectChanges();\n    }\n    /**\r\n     * Selects current row when it comes from server update\r\n     * @param [useFirstColumn] Determines whether selection should select the\r\n     * first column in row, by default it uses the column of CurrentControlName\r\n     * @param [dddwFocus] Optional parameter to apply focus when action comes\r\n     * from a DropDownDataWindow\r\n     * @param [avoidScrolling] Determines whether selection should avoid scroll\r\n     * to the column when is applying focus behavior.\r\n     * @param [immediately] Determines whether focus should be applied immediately\r\n     * or if it going to apply at the end of stack execution.\r\n     */\n\n\n    selectCurrentRowColumn(useFirstColumn, dddwFocus, avoidScrolling, immediately) {\n      /* c8 ignore next */\n      if (this.currentRow >= this.visiblePageStart && this.currentRow <= this.visiblePageEnd) {\n        const logicRowIndex = this.currentRow - this.visiblePageStart;\n        const columnName = this.currentControlName ? this.currentControlName : null;\n        this.internalControlName = this.currentControlName;\n        this.internalCurrentRow = this.currentRow;\n        const rowDOM = this.getRowDOMElement(logicRowIndex);\n        /* c8 ignore else */\n\n        if (rowDOM) {\n          if (dddwFocus) {\n            rowDOM.scrollIntoView();\n            this.notifyBusyLoaderEnd();\n          } else {\n            this.applyFocusToSelectedColumn(rowDOM, columnName, false, avoidScrolling, immediately);\n          }\n        } else if (this.kendoGridComponent && this.kendoGridComponent.navigable) {\n          const column = this.currentColumn ? this.currentColumn : 0;\n          this.kendoGridComponent?.focusCell(logicRowIndex, column);\n          this.kendoGridComponent?.scrollTo({\n            row: logicRowIndex + 1\n          });\n          this.notifyBusyLoaderEnd();\n        }\n      }\n    }\n    /**\r\n     * Scrolls to column using HTML scrollIntoView method.\r\n     * If scrollable is virtual scroll into view is applied with\r\n     * a delay of 50 ms.\r\n     * @param columnInput The column to apply scroll.\r\n     */\n\n\n    scrollToColumn(columnInput) {\n      if (this.isVirtualMode()) {\n        setTimeout(() => {\n          super.scrollToColumn(columnInput);\n        }, 50);\n      } else {\n        super.scrollToColumn(columnInput);\n      }\n    }\n    /**\r\n     * Returns a row DOM element\r\n     * @param rowIndex Row index to retrieve\r\n     */\n\n\n    getRowDOMElement(rowIndex) {\n      const gridList = this.gridElement.nativeElement.getElementsByTagName('kendo-grid-list')[0];\n\n      if (gridList) {\n        const rowList = gridList.getElementsByTagName('tr');\n\n        if (rowList.length > 0) {\n          return rowList[rowIndex];\n        }\n      }\n\n      return null;\n    }\n\n    getRowOriginalObject(rowIndex) {\n      const normalIndex = rowIndex - this.rangeStart + 1;\n      return this.currentPage[normalIndex];\n    }\n    /**\r\n     * Handle the selection events in the grid\r\n     * Sets the new datamanager current row value\r\n     * @param event The selectionEvent data\r\n     */\n\n\n    selectionChangeHandler(event) {\n      this.currentRow = event.selectedRows[0].index;\n      this.internalCurrentRow = this.currentRow;\n      this.selectedRows = event.selectedRows.map(rows => rows.index);\n    }\n    /**\r\n     * Is triggered when a click\r\n     * @param e event parameter\r\n     */\n\n\n    clickHandler(e) {\n      this.currentRow = e.rowIndex;\n      this.internalCurrentRow = this.currentRow;\n      this.currentColumn = e.columnIndex + 1;\n      /* c8 ignore else */\n\n      if (e.type === 'click') {\n        const data = new EventData(e, this.id, this.mapperId);\n        const dataCommand = {\n          dataManagerId: this.id,\n          row: this.currentRow\n        };\n        this.emitter.commandService.run(CommandName.updateClickedDmRow, dataCommand);\n        this.emitter.emitEvent('clicked', data);\n        this.shouldEditCell(e);\n      }\n\n      return false;\n    }\n    /**\r\n     * Contexts menu handler\r\n     * Executes the notification of the contexMenu event\r\n     * @param e the current JS event object\r\n     */\n\n\n    contextMenuHandler(e) {\n      Utils.preventPropagation(e);\n      const data = new EventData(e, this.id, this.mapperId);\n      data.args = {\n        xpos: e.clientX,\n        ypos: e.clientY,\n        row: this.currentRow\n      };\n      Utils.setPointerOffset(e.clientX, e.clientY);\n      this.emitDataManagerEvent('RButtonDown', data);\n    }\n    /**\r\n     * The event is triggerd after saving or canceling the changes, but before the cell is closed.\r\n     * @param args Event parameter\r\n     */\n\n\n    cellCloseHandler(args) {\n      const {\n        formGroup\n      } = args;\n      const data = new EventData(args, this.id, this.mapperId);\n\n      if (!formGroup.valid) {\n        // prevent closing the edited cell if there are invalid values.\n        args.preventDefault();\n      } else if (formGroup.dirty) {\n        const column = this.columns[this.currentColumn - 1];\n        const row = this.currentPage[this.currentRow - this.rangeStart];\n        row[this.currentColumn + 1] = formGroup.value[column.name];\n        this.emitter.commandService.run(CommandName.updateBundle, {\n          data,\n          context: this.getDataManagerContext(row),\n          columnId: column.columnId\n        });\n      }\n    }\n    /**\r\n     * Event called when the keydown is triggered\r\n     * @param event The javascript event object.\r\n     */\n\n\n    keyDownHandler(event) {\n      switch (event.key) {\n        case 'Enter':\n          this.enterAction(event);\n          break;\n\n        case 'ArrowDown':\n          this.arrowDownAction(event);\n          break;\n\n        case 'ArrowUp':\n          this.arrowUpAction(event);\n          break;\n\n        case 'Tab':\n          this.tabAction(event);\n          break;\n\n        default:\n          this.keyDownEvent(event);\n          break;\n      }\n    }\n    /**\r\n     * Handles tab leave to pass responsability to MainTabOrderService\r\n     * @param event Tab key event\r\n     * @returns true if tab action is triggered from first column of first\r\n     * row or last column of last row\r\n     */\n\n\n    handleTabAction(event) {\n      const activeCell = this.kendoGridComponent.activeCell;\n\n      if (activeCell && this.kendoGridComponent.columns.length > 0 && this.firstColumn && this.lastColumn) {\n        const kendoColumnObject = this.kendoGridComponent.columns.toArray()[activeCell.colIndex]; // If focus is the first or the last cell of DataManager trigger gridLeave\n\n        /* c8 ignore else */\n\n        if (this.isActiveCellFirstColOfFirstRow(activeCell, kendoColumnObject) && event.shiftKey || this.isActiveCellLastColOfLastRow(activeCell, kendoColumnObject) && !event.shiftKey) {\n          this.gridLeaveEvent(event);\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    isActiveCellLastColOfLastRow(activeCell, kendoColumnObject) {\n      return activeCell.rowIndex === this.totalItems && kendoColumnObject.field === this.lastColumn.Name;\n    }\n\n    isActiveCellFirstColOfFirstRow(activeCell, kendoColumnObject) {\n      return activeCell.rowIndex === 1 && kendoColumnObject.field === this.firstColumn.Name;\n    }\n    /**\r\n     * Emits TabKeyLeaveEvent\r\n     */\n\n\n    gridLeaveEvent(event) {\n      event.gridLeave = true;\n      const eventData = new EventData(event, this.id);\n      this.emitDataManagerEvent('tabKeyLeaveEvent', eventData);\n    }\n    /*\r\n     * Gets color from model for the background property\r\n     */\n\n\n    getBackgroundColor() {\n      const color = this.backGridColor;\n      return !!color ? {\n        'background-color': color\n      } : '';\n    }\n    /**\r\n     * Returns the corresponding element from the current page array\r\n     * @param rowIndex The absolute index of row\r\n     */\n\n\n    getRowObject(rowIndex) {\n      return this.currentPage && this.currentPage.length > 0 ? this.currentPage[rowIndex + 1 - this.rangeStart] : null;\n    }\n    /**\r\n     * Gets the corresponding with for each column\r\n     * according the column control model\r\n     * @param col the current column value\r\n     */\n\n\n    getColumnWidth(col) {\n      return col.Details ? col.Details.Width : null;\n    }\n    /**\r\n     * Method to know if grid does not have any data\r\n     */\n\n\n    isEmptyDatamanager() {\n      return this.totalItems === 0 && !this.rows;\n    }\n    /**\r\n     * Drops column\r\n     * Handles the dropColumn event.\r\n     * Verifies the dropped column component index\r\n     * and the target column to change its position\r\n     * Supports reordering columns while using custom templates for the headers\r\n     * @param event current drop column event\r\n     * @param targetColumn the div containing the current table header\r\n     */\n\n\n    dropColumn(event, targetColumn) {\n      const index = Array.from(targetColumn.parentElement.parentElement.children).indexOf(targetColumn.parentElement);\n      /* c8 ignore else */\n\n      if (this.kendoGridComponent && index > -1) {\n        this.kendoGridComponent.reorderColumn(event.dropData, index, {\n          before: true\n        });\n      }\n    }\n    /**\r\n     * Overwrrite methods to set the height of sections for the grid\r\n     * due to the empty possible sections on the generation of the grid\r\n     */\n\n    /**\r\n     * Returns the height of the header band\r\n     */\n\n\n    get headerHeight() {\n      return this.header ? Utils.obtainHeightValue(this.model, 'header') : 0;\n    }\n    /**\r\n     * Returns the height of the summary band\r\n     */\n\n\n    get summaryHeight() {\n      return this.summary ? Utils.obtainHeightValue(this.model, 'summary') : 0;\n    }\n    /**\r\n     * Returns the height of the footer band\r\n     */\n\n\n    get footerHeight() {\n      return this.footer ? Utils.obtainHeightValue(this.model, 'footer') : 0;\n    }\n    /**\r\n     * Returns the BackColor of the footer band\r\n     */\n\n\n    get footerBackColor() {\n      return this.model.footer && this.model.footer.BackColor ? this.model.footer.BackColor : 'inherit';\n    }\n    /**\r\n     * Updates current row selected. It is triggered by user click action\r\n     * so it updates internal values to avoid trigger unnecessary row column\r\n     * selection when detectChanges.\r\n     * @param currentRowCol Current column context\r\n     */\n\n\n    updateCurrentRowSelected(currentRowCol) {\n      super.updateCurrentRowSelected(currentRowCol);\n      this.internalCurrentRow = this.currentRow;\n      this.internalControlName = this.currentControlName;\n    }\n    /**\r\n     * Focus in handler to call focus event trough focusable directive.\r\n     * @param event Event\r\n     */\n\n\n    focusInHandler(event) {\n      if (!this.isDropDownDataWindow() && this.isVirtualMode() && !event.stopGridPropagation) {\n        this.focusDirective?.focusHandler(event);\n      }\n    }\n    /**\r\n     * Deactivates busy loader if Grid should not apply focus or is being used\r\n     * inside of a DropDownDataWindow\r\n     */\n\n\n    deactivateBusyLoader() {\n      /* c8 ignore else */\n      if (!(this.isInVisiblePage(this.currentRow) && this.shouldSelectCurrentRowColumn()) || this.isDropDownDataWindow()) {\n        super.deactivateBusyLoader();\n      }\n    }\n    /**\r\n     * Notifies busy loader that should be off after reload data and apply\r\n     * focus to column\r\n     */\n\n\n    notifyBusyLoaderEnd() {\n      /* c8 ignore else */\n      if (this.showBusyLoader) {\n        this.showBusyLoader = false;\n        this.detectChanges();\n      }\n    }\n    /**\r\n     * Updates selected row with current row\r\n     */\n\n\n    updateSelectedRowWithCurrentRow() {\n      this.selectedRows = [this.currentRow];\n    }\n    /**\r\n     * Gets style display and return null to avoid attribute css display\r\n     * to be applied\r\n     * @returns null\r\n     */\n\n\n    getStyleDisplay() {\n      return null;\n    }\n    /**\r\n     * Moves selection to the row sent as parameter\r\n     * @param lastCurrent The last current row that should be selected\r\n     */\n\n\n    moveSelection(lastCurrent) {\n      /* c8 ignore else */\n      if (lastCurrent <= this.totalItems && lastCurrent >= 1) {\n        this.selectedRows = [lastCurrent];\n      }\n    }\n    /**\r\n     * Moves focus down to the next row.\r\n     * @param [dddwFocus] Determine if is a DropDownDataWindow\r\n     * @param [immediately] Determines if focus should be applied immediately or\r\n     * it is going to be applied at the end of stack execution\r\n     */\n\n\n    moveFocusDown(dddwFocus, immediately) {\n      const nextCurrentRow = this.currentRow + 1;\n\n      if (nextCurrentRow <= this.totalItems && this.kendoGridComponent && this.kendoGridComponent.navigable) {\n        // Increment currentRow\n        // Update internal currentRow value\n        this.currentRow = this.internalCurrentRow = nextCurrentRow;\n        this.selectCurrentRowColumn(false, dddwFocus, null, immediately);\n      }\n    }\n    /**\r\n     * Moves focus up to previous row.\r\n     * @param [dddwFocus] Determine if is a DropDownDataWindow\r\n     * @param [immediately] Determines if focus should be applied immediately or\r\n     * it is going to be applied at the end of stack execution\r\n     */\n\n\n    moveFocusUp(dddwFocus, immediately) {\n      const previousCurrentRow = this.currentRow - 1;\n\n      if (previousCurrentRow >= 1 && this.kendoGridComponent && this.kendoGridComponent.navigable) {\n        // Decrement currentRow\n        // Update internal currentRow value\n        this.currentRow = this.internalCurrentRow = previousCurrentRow;\n        this.selectCurrentRowColumn(false, dddwFocus, null, immediately);\n      }\n    }\n    /**\r\n     * Is triggered when shouldEditCell\r\n     * @param e event parameter\r\n     */\n\n\n    shouldEditCell(e) {\n      /* c8 ignore else */\n      if (this.columns[e.columnIndex].allowUpdate) {\n        this.formGroup = this.createFormGroup(e.dataItem);\n        e.sender.editCell(e.rowIndex, e.columnIndex, this.formGroup);\n        this.detectChanges();\n      }\n    }\n    /**\r\n     * iterate for each column to modify the header style\r\n     * @param data the columns data for the grid component\r\n     */\n\n\n    processData(data) {\n      data.forEach(column => {\n        column.Header.Text = column.Header.Text ? column.Header.Text : '';\n        column.Header.HeaderStyle = this.processHeaderStyle(column.Header);\n      });\n      return data;\n    }\n    /*\r\n     * Process the style of the headers for the grid component\r\n     */\n\n\n    processHeaderStyle(header) {\n      const pbStyle = new PBStyle();\n      const fontProp = header.Font;\n      const style = {\n        Color: fontProp ? fontProp.Color : undefined,\n        Weight: fontProp ? fontProp.Weight : undefined,\n        Size: fontProp ? fontProp.Size : undefined,\n        Italic: !fontProp ? 'normal' : fontProp.Italic ? 'italic' : 'normal',\n        BackColor: header.Backcolor,\n        BorderStyle: header.Border,\n        Alignment: Utils.getCurrentAlignment(header.Alignment)\n      };\n      return this.processStyle(style, pbStyle);\n    }\n    /**\r\n     * Sets pager background from the model color\r\n     */\n\n\n    setPagerBackground() {\n      if (!this.isVirtualMode() && this.el && this.el.nativeElement && this.el.nativeElement.querySelector) {\n        this.applyBackColor(this.el.nativeElement.querySelector('.k-pager-wrap'));\n      }\n    }\n    /**\r\n     * Sets data manager background from the model\r\n     */\n\n\n    setDataManagerBackground() {\n      if (this.backGridColor != null) {\n        this.applyBackColor(this.parentElement);\n        this.applyBackColor(this.el.nativeElement.querySelector ? this.el.nativeElement.querySelector('.k-grid-content') : null);\n      }\n    }\n\n    applyBackColor(element) {\n      if (element) {\n        this.setStyleProperty(element, 'background-color', this.backGridColor);\n      }\n    }\n    /**\r\n     * Sets dddwcurrent row\r\n     * Report the change to the dropdownDW\r\n     * @param index the index to select\r\n     */\n\n\n    setDDDWCurrentRow(index) {\n      if (this.isDropDownDataWindow() && index >= 0) {\n        this.currentRow = index + 1;\n        this.lastSelectionChangedRow = this.currentRow;\n        const rowclicked = this.getRowOriginalObject(index);\n        this.updateSelectedRowWithCurrentRow();\n        this.notifyClickedRowToDDDW(rowclicked, false);\n        this.detectChanges();\n      }\n    }\n\n    forceBusyLoader() {\n      this.showBusyLoader = true;\n      /* c8 ignore else */\n\n      if (this.busyLoader) {\n        this.busyLoader.model = true;\n        this.busyLoader.detectChanges();\n      }\n    }\n\n    detectChangesFromServer() {\n      if (this.detectChangesFromCoreTimer) {\n        clearTimeout(this.detectChangesFromCoreTimer);\n      }\n\n      this.detectChangesFromCoreTimer = setTimeout(() => this.isVirtualMode() ? this.updateFromServerVirtual() : this.updateFromServerPager(), 10);\n    }\n    /**\r\n     * Checks and reflect total items change if information of kendoGridView\r\n     * is different of model totalItems due an insert, remove or search.\r\n     */\n\n\n    checkAndReflectTotalItemsChange() {\n      if (this.gridView.total !== this.totalItems) {\n        this.gridView.total = this.totalItems;\n        this.detectChanges();\n      }\n    }\n    /**\r\n     * Handles tab key action\r\n     * @param event Event data\r\n     */\n\n\n    tabAction(event) {\n      if (this.currentColumn && !this.isSynchronizing && !this.isDropDownDataWindow()) {\n        this.emitter.keyPressNotifyAction = true;\n        this.keyDownEvent(event);\n        this.handleTabAction(event);\n      } else {\n        event.preventDefault();\n      }\n    }\n    /**\r\n     * Handles arrow down action\r\n     * @param event Event data\r\n     */\n\n\n    arrowDownAction(event) {\n      event.preventDefault();\n      /* c8 ignore else */\n\n      if (!this.isSynchronizing) {\n        this.emitter.keyPressNotifyAction = true;\n        this.moveSelection(this.currentRow + 1);\n        this.moveFocusDown(false, !this.isDropDownDataWindow());\n        this.setDDDWCurrentRow(this.currentRow - 1);\n        this.keyDownEvent(event);\n      }\n    }\n    /**\r\n     * Handles arrow up action\r\n     * @param event Event data\r\n     */\n\n\n    arrowUpAction(event) {\n      event.preventDefault();\n      /* c8 ignore else */\n\n      if (!this.isSynchronizing) {\n        this.emitter.keyPressNotifyAction = true;\n        this.moveSelection(this.currentRow - 1);\n        this.moveFocusUp(false, !this.isDropDownDataWindow());\n        this.setDDDWCurrentRow(this.currentRow - 1);\n        this.keyDownEvent(event);\n      }\n    }\n    /**\r\n     * Handles enter action\r\n     * @param event Event data\r\n     */\n\n\n    enterAction(event) {\n      event.preventDefault();\n      /* c8 ignore else */\n\n      if (!this.isSynchronizing) {\n        const arrowNCCC = !this.buttonsService.hasDefaultButtons() && !this.isDropDownDataWindow();\n        /* c8 ignore else */\n\n        if (arrowNCCC) {\n          this.emitter.keyPressNotifyAction = true;\n          this.moveSelection(this.currentRow + 1);\n          this.moveFocusDown(false, true);\n        }\n\n        this.keyDownEvent(event);\n      }\n    }\n\n  }\n\n  WMGridComponent.ɵfac = function WMGridComponent_Factory(t) {\n    return new (t || WMGridComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(DmInteractionService, 8), i0.ɵɵdirectiveInject(DMDataService), i0.ɵɵdirectiveInject(i1.WebMapService), i0.ɵɵdirectiveInject(i9.FormBuilder), i0.ɵɵdirectiveInject(FocusManagerService), i0.ɵɵdirectiveInject(MessageCommandService), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(ResizeDataManagerService, 8), i0.ɵɵdirectiveInject(DataManagerTabSequenceService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8), i0.ɵɵdirectiveInject(ButtonsService, 8));\n  };\n\n  WMGridComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: WMGridComponent,\n    selectors: [[\"wm-grid\"]],\n    contentQueries: function WMGridComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, _c27, 5);\n        i0.ɵɵcontentQuery(dirIndex, _c14, 5);\n        i0.ɵɵcontentQuery(dirIndex, _c28, 4);\n        i0.ɵɵcontentQuery(dirIndex, _c29, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.noRecords = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.columnsTemplates = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.headerTemplates = _t);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.footerTemplates = _t);\n      }\n    },\n    viewQuery: function WMGridComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(GridComponent, 5);\n        i0.ɵɵviewQuery(BusyloaderComponent, 5);\n        i0.ɵɵviewQuery(FocusableDirective, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.kendoGridComponent = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.busyLoader = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.focusDirective = _t.first);\n      }\n    },\n    inputs: {\n      columnsTemplateDictionary: \"columnsTemplateDictionary\",\n      headerTemplateDictionary: \"headerTemplateDictionary\",\n      footerTemplateDictionary: \"footerTemplateDictionary\",\n      pageSizes: \"pageSizes\",\n      pageSize: \"pageSize\",\n      scrollable: \"scrollable\",\n      cancelDynamicStyles: \"cancelDynamicStyles\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"ngClass\", \"dblclick\", \"focusin\", 4, \"ngIf\"], [3, \"ngClass\", \"dblclick\", \"focusin\"], [\"class\", \"headerContainer\", 3, \"height\", 4, \"ngIf\"], [4, \"ngIf\"], [\"class\", \"detailsContainer\", 3, \"height\", 4, \"ngIf\"], [\"class\", \"summaryContainer\", 4, \"ngIf\"], [\"class\", \"footerContainer\", 3, \"height\", \"background-color\", 4, \"ngIf\"], [1, \"headerContainer\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"detailsContainer\"], [\"detailsContainer\", \"\"], [\"wmFocusable\", \"\", \"wmPBControls\", \"\", \"kendoGridSelectBy\", \"\", 3, \"navigable\", \"hostComponent\", \"data\", \"selectable\", \"ngClass\", \"reorderable\", \"skip\", \"pageSize\", \"pageable\", \"resizable\", \"loading\", \"scrollable\", \"height\", \"maxHeight\", \"selectedKeys\", \"pageChange\", \"cellClick\", \"contextmenu\", \"cellClose\", \"selectionChange\", \"keydown\", 4, \"ngIf\"], [\"class\", \"virtual-grid\", \"tabindex\", \"-1\", \"wmFocusable\", \"\", \"wmPBControls\", \"\", \"kendoGridSelectBy\", \"\", 3, \"data\", \"skip\", \"pageSize\", \"scrollable\", \"rowHeight\", \"height\", \"navigable\", \"ngClass\", \"hostComponent\", \"selectable\", \"reorderable\", \"resizable\", \"maxHeight\", \"selectedKeys\", \"pageable\", \"pageChange\", \"contextmenu\", \"cellClose\", \"keydown\", 4, \"ngIf\"], [3, \"model\", 4, \"ngIf\"], [\"wmFocusable\", \"\", \"wmPBControls\", \"\", \"kendoGridSelectBy\", \"\", 3, \"navigable\", \"hostComponent\", \"data\", \"selectable\", \"ngClass\", \"reorderable\", \"skip\", \"pageSize\", \"pageable\", \"resizable\", \"loading\", \"scrollable\", \"height\", \"selectedKeys\", \"pageChange\", \"cellClick\", \"contextmenu\", \"cellClose\", \"selectionChange\", \"keydown\"], [\"grid\", \"\"], [4, \"ngFor\", \"ngForOf\"], [\"kendoGridNoRecordsTemplate\", \"\"], [3, \"field\", \"title\", \"width\", \"headerStyle\"], [\"gridColumn\", \"\"], [\"kendoGridHeaderTemplate\", \"\"], [\"kendoGridCellTemplate\", \"\"], [\"mwlDroppable\", \"\", 3, \"drop\"], [\"targetColumn\", \"\"], [\"dragCursor\", \"move\", \"mwlDraggable\", \"\", 3, \"dropData\"], [3, \"click\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\", 4, \"ngIf\"], [3, \"click\"], [\"kendoGridFooterTemplate\", \"\"], [3, \"ngTemplateOutlet\"], [\"tabindex\", \"-1\", \"wmFocusable\", \"\", \"wmPBControls\", \"\", \"kendoGridSelectBy\", \"\", 1, \"virtual-grid\", 3, \"data\", \"skip\", \"pageSize\", \"scrollable\", \"rowHeight\", \"height\", \"navigable\", \"ngClass\", \"hostComponent\", \"selectable\", \"reorderable\", \"resizable\", \"selectedKeys\", \"pageable\", \"pageChange\", \"contextmenu\", \"cellClose\", \"keydown\"], [\"id\", \"noRecordTemp\", 3, \"click\"], [3, \"model\"], [\"wmFocusable\", \"\", \"wmPBControls\", \"\", \"kendoGridSelectBy\", \"\", 3, \"navigable\", \"hostComponent\", \"data\", \"selectable\", \"ngClass\", \"reorderable\", \"skip\", \"pageSize\", \"pageable\", \"resizable\", \"loading\", \"rowSelected\", \"scrollable\", \"height\", \"selectedKeys\", \"pageChange\", \"cellClick\", \"cellClose\", \"selectionChange\", \"keydown\"], [3, \"id\", \"mousedown\", 4, \"ngIf\"], [3, \"id\", \"mousedown\"], [\"wmFocusable\", \"\", \"wmFocusable\", \"\", \"wmPBControls\", \"\", \"kendoGridSelectBy\", \"\", 3, \"navigable\", \"hostComponent\", \"data\", \"selectable\", \"reorderable\", \"skip\", \"pageSize\", \"pageable\", \"resizable\", \"rowHeight\", \"height\", \"selectedKeys\", \"pageChange\", \"cellClick\", \"cellClose\", \"selectionChange\", \"keydown\"], [3, \"field\", \"title\", \"width\", \"headerStyle\", \"editable\"], [1, \"summaryContainer\"], [1, \"footerContainer\"]],\n    template: function WMGridComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, WMGridComponent_div_0_Template, 7, 7, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.model);\n      }\n    },\n    directives: [i13$1.GridComponent, i13$1.ColumnComponent, BusyloaderComponent, i6.NgIf, i6.NgClass, i6.NgTemplateOutlet, FocusableDirective, ControlsPowerDirective, i13$1.SelectionDirective, i6.NgForOf, i13$1.HeaderTemplateDirective, i17.DroppableDirective, i17.DraggableDirective, i13$1.CellTemplateDirective, i13$1.FooterTemplateDirective, i13$1.NoRecordsTemplateDirective],\n    styles: [\".headerContainer[_ngcontent-%COMP%]{margin:0;padding:0;top:0;width:100%;z-index:0;position:relative;overflow-y:hidden;display:table}.detailsContainer[_ngcontent-%COMP%]{position:relative;z-index:1;width:100%;height:100%}.footerContainer[_ngcontent-%COMP%]{position:absolute;bottom:0;width:100%;z-index:3}.summaryContainer[_ngcontent-%COMP%]{position:relative;width:100%;height:auto}wm-grid[_ngcontent-%COMP%]   .k-grid-aria-root[_ngcontent-%COMP%]{height:calc(100% - 30px)}wm-grid[_ngcontent-%COMP%]   .k-grid-pager[_ngcontent-%COMP%]{height:30px}\"],\n    changeDetection: 0\n  });\n\n  __decorate([NotifyChange('SelectedRows'), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], WMGridComponent.prototype, \"selectedRows\", null);\n\n  return WMGridComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet DynamicGridComponent = /*#__PURE__*/(() => {\n  class DynamicGridComponent extends WMGridComponent {\n    /* c8 ignore start */\n    constructor(dchangeDetector, drenderer2, delement, demitter, ddmInteraction, ddataService, dwebmapService, dformBuilder, dfocusManagerService, dmessageCommandService, dlengthConverter, dresizeDataManagerService, ddataMTabSequenceService, tabControlService, buttonsService) {\n      super(dchangeDetector, drenderer2, delement, demitter, ddmInteraction, ddataService, dwebmapService, dformBuilder, dfocusManagerService, dmessageCommandService, dlengthConverter, dresizeDataManagerService, ddataMTabSequenceService, tabControlService, buttonsService);\n      this.dwebmapService = dwebmapService;\n      /**\r\n       * Column header models references of dynamic grid component\r\n       */\n\n      this.columnHeaderModelsReferences = {};\n    }\n    /**\r\n     * Gets column ids\r\n     * The set of recovered column ids retrieved\r\n     * to be displayed by the grid\r\n     */\n\n\n    get ColumnIds() {\n      const columnsId = [];\n\n      if (this.columns != null) {\n        this.columns.forEach(element => {\n          columnsId.push(element.Header.Name);\n        });\n      }\n\n      return columnsId;\n    }\n    /**\r\n     * Get disabledSelection property from model\r\n     */\n\n\n    get disabledSelection() {\n      return this.model?.disabledSelection;\n    }\n    /**\r\n     * Determines whether the grid has columns to be displayed or if is an empty component\r\n     * @returns true if data\r\n     */\n\n\n    containsData() {\n      return this.bandModels && this.bandModels.headerModels && Object.keys(this.bandModels.headerModels).length > 0;\n    }\n    /**\r\n     * Gets header properties\r\n     * @param id the id of the current header control\r\n     * @param property the name of property to be retreived\r\n     * @returns header properties values\r\n     */\n\n\n    getHeaderProperties(id, property) {\n      /* c8 ignore else */\n      if (this.bandModels.headerModels[id]) {\n        const modId = this.bandModels.headerModels[id]['Id'];\n        return this.dwebmapService.core.getModel(modId) ? this.dwebmapService.core.getModel(modId)[property] : undefined;\n      }\n    }\n    /**\r\n     * Gets controls element\r\n     * @param id the current element id\r\n     * @returns controls element object that is\r\n     * used by the dynamic container to display the corresponding\r\n     * element\r\n     */\n\n\n    getControlsElement(id) {\n      const controls = {};\n      controls[id] = true;\n      return controls;\n    }\n    /**\r\n     * Gets current cell id\r\n     * @param colName The current column unique name\r\n     * @returns current cell id\r\n     */\n\n\n    getCurrentCellId(colName) {\n      const column = this.columns.find(col => col.Header.Name === colName);\n      const models = this.bandModels.detailsModels;\n\n      for (const id in models) {\n        if (column && models[id].Name === column.Details.Name) {\n          return this.getControlsElement(id);\n        }\n      }\n\n      return undefined;\n    }\n    /**\r\n     * Gets column width\r\n     * @param column The current column model\r\n     * @returns column width\r\n     */\n\n\n    getColumnWidth(column) {\n      if (this.bandModels.headerModels[column]) {\n        const modId = this.bandModels.headerModels[column]['Id'];\n        const mod = this.dwebmapService.core.getModel(modId);\n        return mod && mod.Position ? mod.Position.Width : undefined;\n      }\n\n      return undefined;\n    }\n    /**\r\n     * Handles the page change event.\r\n     * @param event The pageChange event object\r\n     */\n\n\n    pageChange(event) {\n      this.showBusyLoader = true;\n      super.pageChange(event);\n    }\n    /**\r\n     * Drops column\r\n     * Handles the dropColumn event.\r\n     * Verifies the dropped column component index\r\n     * and the target column to change its position\r\n     * Supports reordering columns while using custom templates for the headers\r\n     * @param event current drop column event\r\n     * @param targetColumn the div containing the current table header\r\n     */\n\n\n    dropColumn(event, targetColumn) {\n      const index = Array.from(targetColumn.parentElement.parentElement.children).indexOf(targetColumn.parentElement);\n\n      if (this.kendoGridComponent && index > -1) {\n        this.kendoGridComponent.reorderColumn(event.dropData, index, {\n          before: true\n        });\n      }\n    }\n    /**\r\n     * Columns hidden\r\n     * Returns a value indicating if the current column is hidden or not\r\n     * Verifies if Visible property is strictly false otherwise is true\r\n     * and with must be above 0 to be a visible column\r\n     * @param col the id of the column\r\n     * @returns true if the column is hidden\r\n     */\n\n\n    columnHidden(col) {\n      return this.getHeaderProperties(col, 'Visible') === false || this.getColumnWidth(col) === 0;\n    }\n    /**\r\n     * Set selection setting base on the disabled selection property from model\r\n     */\n\n\n    modifySelectableSettings() {\n      if (this.disabledSelection) {\n        this.selectableSettings.enabled = false;\n      }\n\n      return this.selectableSettings;\n    }\n\n  }\n\n  DynamicGridComponent.ɵfac = function DynamicGridComponent_Factory(t) {\n    return new (t || DynamicGridComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(DmInteractionService, 8), i0.ɵɵdirectiveInject(DMDataService), i0.ɵɵdirectiveInject(i1.WebMapService), i0.ɵɵdirectiveInject(i9.FormBuilder), i0.ɵɵdirectiveInject(FocusManagerService), i0.ɵɵdirectiveInject(MessageCommandService), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(ResizeDataManagerService, 8), i0.ɵɵdirectiveInject(DataManagerTabSequenceService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8), i0.ɵɵdirectiveInject(ButtonsService, 8));\n  };\n\n  DynamicGridComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: DynamicGridComponent,\n    selectors: [[\"wm-dynamic-grid\"]],\n    inputs: {\n      bandModels: \"bandModels\",\n      bandControls: \"bandControls\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"ngClass\", 4, \"ngIf\"], [3, \"ngClass\"], [1, \"detailsContainer\"], [\"detailsContainer\", \"\"], [\"wmFocusable\", \"\", \"wmPBControls\", \"\", \"kendoGridSelectBy\", \"\", 3, \"navigable\", \"data\", \"hostComponent\", \"selectable\", \"ngClass\", \"reorderable\", \"skip\", \"loading\", \"height\", \"pageSize\", \"pageable\", \"resizable\", \"scrollable\", \"rowHeight\", \"selectedKeys\", \"pageChange\", \"cellClick\", \"cellClose\", \"selectionChange\", \"keydown\", 4, \"ngIf\"], [1, \"summaryContainer\"], [4, \"ngIf\"], [1, \"footerContainer\"], [1, \"dynamicFooter\", 3, \"controlModels\", \"context\", \"controls\"], [\"wmFocusable\", \"\", \"wmPBControls\", \"\", \"kendoGridSelectBy\", \"\", 3, \"navigable\", \"data\", \"hostComponent\", \"selectable\", \"ngClass\", \"reorderable\", \"skip\", \"loading\", \"height\", \"pageSize\", \"pageable\", \"resizable\", \"scrollable\", \"rowHeight\", \"selectedKeys\", \"pageChange\", \"cellClick\", \"cellClose\", \"selectionChange\", \"keydown\"], [\"grid\", \"\"], [4, \"ngFor\", \"ngForOf\"], [3, \"field\", \"width\", \"hidden\", \"title\"], [\"gridColumn\", \"\"], [\"kendoGridHeaderTemplate\", \"\"], [\"kendoGridCellTemplate\", \"\"], [\"mwlDroppable\", \"\", 3, \"drop\"], [\"targetColumn\", \"\"], [\"dragCursor\", \"move\", \"mwlDraggable\", \"\", \"class\", \"dynamicHeader\", 3, \"dropData\", \"context\", \"controlModels\", \"controls\", 4, \"ngIf\"], [\"dragCursor\", \"move\", \"mwlDraggable\", \"\", 1, \"dynamicHeader\", 3, \"dropData\", \"context\", \"controlModels\", \"controls\"], [\"class\", \"dynamicCell\", 3, \"context\", \"controlModels\", \"controls\", 4, \"ngIf\"], [1, \"dynamicCell\", 3, \"context\", \"controlModels\", \"controls\"], [1, \"dynamicSummary\", 3, \"controlModels\", \"context\", \"controls\"]],\n    template: function DynamicGridComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, DynamicGridComponent_div_0_Template, 9, 8, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.model && ctx.bandControls && ctx.columns);\n      }\n    },\n    directives: [i13$1.GridComponent, i13$1.ColumnComponent, DynamicContainerComponent, i6.NgIf, i6.NgClass, FocusableDirective, ControlsPowerDirective, i13$1.SelectionDirective, i6.NgForOf, i13$1.HeaderTemplateDirective, i17.DroppableDirective, i17.DraggableDirective, i13$1.CellTemplateDirective],\n    styles: [\"wm-dynamic-grid .k-textarea{width:100%!important}  wm-dw-dropdowndatawindow>div>div>kendo-dropdownlist{position:absolute!important;top:0}  .k-grid td{vertical-align:middle!important}  .k-dropdown{width:auto}  .k-numerictextbox{position:absolute!important;top:0}.headerContainer[_ngcontent-%COMP%]{margin:0;padding:0;top:0;width:100%;z-index:0;position:relative;overflow-y:hidden;display:table}.detailsContainer[_ngcontent-%COMP%]{position:relative;z-index:1;width:100%;height:100%}.footerContainer[_ngcontent-%COMP%]{position:relative;bottom:0;width:100%;z-index:3}.summaryContainer[_ngcontent-%COMP%]{position:relative;width:100%;height:auto}wm-dynamic-grid[_ngcontent-%COMP%]   .k-grid-aria-root[_ngcontent-%COMP%]{height:inherit}\"]\n  });\n  return DynamicGridComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/***********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n/* c8 ignore start */\n\n\nlet DynamicDataManagerComponent = /*#__PURE__*/(() => {\n  class DynamicDataManagerComponent extends FreeformComponent {\n    constructor(cd, r2, el, em, dmi, wmsrv, dtsrv, fcsMgrSrv, msgCmdSrv, http, lengthConverter, resizeDataManager, dataMTSequenceService, buttonsBService, tabControlService) {\n      super(cd, r2, el, em, dmi, wmsrv, dtsrv, fcsMgrSrv, msgCmdSrv, lengthConverter, resizeDataManager, dataMTSequenceService, buttonsBService, tabControlService);\n      this.fcsMgrSrv = fcsMgrSrv;\n      this.http = http;\n      this.resizeDataManager = resizeDataManager;\n      this.dataMTSequenceService = dataMTSequenceService;\n      this.buttonsBService = buttonsBService;\n      this.tabControlService = tabControlService;\n      /* c8 ignore stop */\n\n      this.headerControls = {};\n      this.detailsControls = {};\n      this.summaryControls = {};\n      this.footerControls = {};\n      this.headerModels = {};\n      this.detailsModels = {};\n      this.summaryModels = {};\n      this.footerModels = {};\n    }\n\n    ngOnInit() {\n      super.ngOnInit();\n      this.retrieveDataManagerColumnsModels(data => this.loadModels(data));\n    }\n\n    ngDoCheck() {\n      /* c8 ignore else */\n      if (!this.isGridDM()) {\n        super.ngDoCheck();\n      }\n    }\n    /**\r\n     * Gets display footer section if there are controls available\r\n     */\n\n\n    get displayFooter() {\n      return Object.keys(this.footerControls).length > 0;\n    }\n    /**\r\n     * Gets display summary if there are controls available\r\n     */\n\n\n    get displaySummary() {\n      return Object.keys(this.summaryControls).length > 0;\n    }\n    /**\r\n     * Returns an array of RowTabSequenceDirective\r\n     * type that represents the visual dom rows\r\n     */\n\n\n    get rows() {\n      return this.dynamicTabRowCollection ? this.dynamicTabRowCollection.toArray() : [];\n    }\n    /**\r\n     * Gets band controls\r\n     * Returns a compiled object with the list of\r\n     * every single band controls to be passed to another type\r\n     * of bandcontrols\r\n     */\n\n\n    get bandControls() {\n      return {\n        headerControls: this.headerControls,\n        detailsControls: this.detailsControls,\n        summaryControls: this.summaryControls,\n        footerControls: this.footerControls\n      };\n    }\n\n    get bandModels() {\n      return {\n        headerModels: this.headerModels,\n        detailsModels: this.detailsModels,\n        summaryModels: this.summaryModels,\n        footerModels: this.footerModels\n      };\n    }\n    /**\r\n     * Loading the models from the controller\r\n     * @param data An array containing the models of the columns inside the\r\n     * datawindow\r\n     */\n\n\n    loadModels(data) {\n      data.forEach(element => {\n        this.classifyElements(element);\n      });\n      this.detectChanges();\n    }\n    /**\r\n     * Handle the focus action for Data Manager column in a row.\r\n     * @param rowDOM The DOM element that represents the Data Manager row.\r\n     * @param columnName The name of the column that is going to be focused.\r\n     * @param isFirst Determines if it should be the first (true) or the last column (false) element by tabindex order\r\n     * which has to be focused.\r\n     */\n\n    /* c8 ignore next */\n\n\n    applyFocusToSelectedColumn(rowDOM, columnName, isFirst) {\n      super.applyFocusToSelectedColumn(rowDOM, columnName, isFirst);\n    }\n    /**\r\n     * Retrieve the models of each column in the data manager\r\n     */\n\n\n    retrieveDataManagerColumnsModels(successCallback) {\n      const serviceUrl = `api/datamanagercontrols/GetDynamicControls/${this.id}`;\n      const params = {\n        dataManagerId: Utils.formatUID(this.id)\n      };\n      const headers = WebMapUtils.getWebApiHeaders();\n      this.http.get(serviceUrl, {\n        headers,\n        params\n      }).subscribe(response => {\n        successCallback(response);\n      });\n    }\n\n    isGridDM() {\n      return this.processing === ProcessingTypes.Grid;\n    }\n    /**\r\n     * Gets the models corresponding to each dataManager band\r\n     */\n\n\n    classifyElements(element) {\n      const key = element.Name;\n\n      switch (element.Band) {\n        case 'header':\n          this.headerControls[key] = true;\n          this.headerModels[key] = element;\n          this.columnHeadersModels[element.name] = element;\n          break;\n\n        case 'detail':\n          this.detailsControls[key] = true;\n          this.detailsModels[key] = element;\n          this.columnModels[element.name] = element;\n          break;\n\n        case 'summary':\n          this.summaryControls[key] = true;\n          this.summaryModels[key] = element;\n          break;\n\n        default:\n          this.footerControls[key] = true;\n          this.footerModels[key] = element;\n          break;\n      }\n    }\n\n  }\n\n  DynamicDataManagerComponent.ɵfac = function DynamicDataManagerComponent_Factory(t) {\n    return new (t || DynamicDataManagerComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(DmInteractionService, 8), i0.ɵɵdirectiveInject(i1.WebMapService), i0.ɵɵdirectiveInject(DMDataService), i0.ɵɵdirectiveInject(FocusManagerService), i0.ɵɵdirectiveInject(MessageCommandService), i0.ɵɵdirectiveInject(i1$1.HttpClient), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(ResizeDataManagerService, 8), i0.ɵɵdirectiveInject(DataManagerTabSequenceService, 8), i0.ɵɵdirectiveInject(ButtonsService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n  };\n\n  DynamicDataManagerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: DynamicDataManagerComponent,\n    selectors: [[\"wm-dynamic-data-manager\"]],\n    viewQuery: function DynamicDataManagerComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(DynamicRowTabSequenceDirective, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dynamicTabRowCollection = _t);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 2,\n    vars: 2,\n    consts: [[3, \"ngClass\", \"tabindex\", \"dblclick\", \"click\", \"focus\", 4, \"ngIf\"], [3, \"model\", \"bandModels\", \"bandControls\", 4, \"ngIf\"], [3, \"ngClass\", \"tabindex\", \"dblclick\", \"click\", \"focus\"], [3, \"totalPages\", \"currentPage\", \"FirstPage\", \"PreviousPage\", \"NextPage\", \"LastPage\", 4, \"ngIf\"], [1, \"dmContainer\"], [3, \"ngClass\"], [1, \"dataManagerContent\"], [1, \"headerContainer\", 3, \"dblclick\"], [\"class\", \"dynamicHeader\", 3, \"context\", \"controlModels\", \"controls\", 4, \"ngIf\"], [\"detailsContainer\", \"\"], [3, \"tabindex\", \"click\", \"keydown\", \"focus\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"summaryContainer\", \"class\", \"summaryContainer\", 3, \"dblclick\", 4, \"ngIf\"], [1, \"footerContainer\", 3, \"dblclick\"], [4, \"ngIf\"], [3, \"model\"], [1, \"scrollContainer\", 3, \"hidden\", \"scroll\"], [\"scrollContainer\", \"\"], [1, \"list-filler\"], [3, \"totalPages\", \"currentPage\", \"FirstPage\", \"PreviousPage\", \"NextPage\", \"LastPage\"], [1, \"dynamicHeader\", 3, \"context\", \"controlModels\", \"controls\"], [3, \"tabindex\", \"click\", \"keydown\", \"focus\"], [\"rowContainer\", \"\"], [1, \"rowContainer\", 3, \"ngClass\", \"contextmenu\"], [\"row\", \"\"], [\"wmDynamicRow\", \"\", 1, \"dynamicDetails\", 3, \"controlModels\", \"context\", \"controls\"], [1, \"summaryContainer\", 3, \"dblclick\"], [1, \"dynamicSummary\", 3, \"controlModels\", \"context\", \"controls\"], [1, \"dynamicFooter\", 3, \"controlModels\", \"context\", \"controls\"], [3, \"model\", \"bandModels\", \"bandControls\"]],\n    template: function DynamicDataManagerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, DynamicDataManagerComponent_div_0_Template, 17, 29, \"div\", 0);\n        i0.ɵɵtemplate(1, DynamicDataManagerComponent_wm_dynamic_grid_1_Template, 1, 3, \"wm-dynamic-grid\", 1);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.model && !ctx.isGridDM());\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.model && ctx.isGridDM());\n      }\n    },\n    directives: [WmPagerComponent, DynamicContainerComponent, BusyloaderComponent, DynamicGridComponent, i6.NgIf, i6.NgClass, i6.NgForOf, DynamicRowTabSequenceDirective],\n    styles: [\".headerContainer[_ngcontent-%COMP%]{margin:0;padding:0;top:0;width:100%;z-index:0;position:relative;overflow:hidden;display:table}.detailsContainer[_ngcontent-%COMP%], .dynamicDetails[_ngcontent-%COMP%]{position:relative;width:100%}.detailsContainerDddw[_ngcontent-%COMP%]{z-index:1;width:100%;height:100%}.footerContainer[_ngcontent-%COMP%]{position:absolute;bottom:0;width:100%;z-index:3}.dynamicSummary[_ngcontent-%COMP%]{position:relative}.summaryContainer[_ngcontent-%COMP%]{position:relative;width:100%;height:auto}.containerRows[_ngcontent-%COMP%]{width:100%}ng-container[_ngcontent-%COMP%]{position:relative}.rowContainer[_ngcontent-%COMP%]{position:relative;overflow:hidden}.selectedRow[_ngcontent-%COMP%]{background-color:Highlight;width:100%}.currentRow[_ngcontent-%COMP%]{background-color:#d5e4f7;width:100%}.list-filler[_ngcontent-%COMP%]{position:absolute;top:0;right:-1px;width:1px;box-sizing:border-box}.dmView[_ngcontent-%COMP%], .dmViewNoScroll[_ngcontent-%COMP%]{position:absolute;float:left;overflow-x:auto;overflow-y:hidden;height:100%!important;width:100%!important}.dmViewDddw[_ngcontent-%COMP%]{overflow-y:hidden}.dmViewVScroll[_ngcontent-%COMP%]{overflow-y:auto}.dmViewHScroll[_ngcontent-%COMP%]{overflow-x:auto}.dmViewNoScroll[_ngcontent-%COMP%]{overflow:hidden}.dmViewNoHorizontalScroll[_ngcontent-%COMP%]{overflow-x:hidden!important}.scrollContainer[_ngcontent-%COMP%]{top:0;right:0;width:15px;overflow-y:auto;overflow-x:hidden;float:left;position:absolute;z-index:4}@-moz-document url-prefix(){.scrollContainer{width:18px!important}}.draggedElement[_ngcontent-%COMP%]{z-index:2147483647!important}\"]\n  });\n  return DynamicDataManagerComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ReportViewerComponent = /*#__PURE__*/(() => {\n  class ReportViewerComponent extends BaseControlComponent {\n    /* c8 ignore start */\n    constructor(http, changeDetector, renderer2, element, webMapService, lengthConverter, emitter) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter);\n      this.http = http;\n      this.changeDetector = changeDetector;\n      this.renderer2 = renderer2;\n      this.element = element;\n      this.webMapService = webMapService;\n      this.emitter = emitter;\n      /* c8 ignore stop */\n\n      /**\r\n       * ng2-pdf-viewer variables representing options\r\n       */\n\n      this.currentPdf = null;\n      this.iframeURL = '';\n    }\n    /**\r\n     * Request pdf to server\r\n     */\n\n\n    requestPDF() {\n      this.loadUrl();\n      const httpOptions = {\n        headers: new HttpHeaders({\n          Accept: 'application/pdf',\n          'Cache-Control': 'no-cache',\n          'Content-Type': 'application/pdf',\n          Expires: 'Sat, 01 Jan 2000 00:00:00 GMT',\n          Pragma: 'no-cache',\n          'WM-API': 'true'\n        }),\n        responseType: 'blob'\n      };\n      /* c8 ignore else */\n\n      if (this.iframeURL.length > 0) {\n        // Avoid empty calls\n        this.isSynchronizing = true;\n        this.http.get(this.iframeURL, httpOptions).subscribe(response => {\n          this.isSynchronizing = false;\n          this.src = response;\n        }, errorResponse => {\n          this.webMapService.core.getEvent().publish(Events.Error, new NetworkException('It appears that there is an error trying to retrieve the report from the service. ' + 'If the error persists try to contact your administrator.', errorResponse.status));\n        });\n      }\n    }\n    /**\r\n     * Builds url\r\n     */\n\n\n    loadUrl() {\n      this.iframeURL = this.model && this.webMapService.config.webMapVersion === WMConstants.version4 ? `dataManagerController/printDataManager?dataManagerId=${this.id}` : `api/dataManagerController/printDataManager/${this.id}`;\n    }\n\n    ngDoCheck() {\n      if (this.dirty) {\n        this.dirty = false;\n        this.requestPDF();\n        this.detectChanges();\n      }\n    }\n    /**\r\n     * Indicates wether the currend Report needs to be reloaded\r\n     */\n\n\n    get dirty() {\n      return this.model.Dirty;\n    }\n\n    set dirty(value) {\n      this.model.Dirty = value;\n    }\n    /**\r\n     * Set current pdf url\r\n     */\n\n\n    set src(input) {\n      this.currentPdf = URL.createObjectURL(input);\n      PDFObject.embed(this.currentPdf, this.pdfComponent.nativeElement, {\n        fallbackLink: false\n      });\n      this.changeDetector.detectChanges();\n    }\n\n  }\n\n  ReportViewerComponent.ɵfac = function ReportViewerComponent_Factory(t) {\n    return new (t || ReportViewerComponent)(i0.ɵɵdirectiveInject(i1$1.HttpClient), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.WebMapService), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8));\n  };\n\n  ReportViewerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ReportViewerComponent,\n    selectors: [[\"wm-report-viewer\"]],\n    viewQuery: function ReportViewerComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c31, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.pdfComponent = _t.first);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 1,\n    consts: [[3, \"model\"], [1, \"pdfViewer\"], [\"pdfViewer\", \"\"]],\n    template: function ReportViewerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"wm-busyloader\", 0)(1, \"div\", 1, 2);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"model\", ctx.isSynchronizing);\n      }\n    },\n    directives: [BusyloaderComponent],\n    styles: [\".pdfViewer[_ngcontent-%COMP%]{width:100%;height:100%}\"],\n    changeDetection: 0\n  });\n\n  __decorate([NotifyChange('Dirty'), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], ReportViewerComponent.prototype, \"dirty\", null);\n\n  return ReportViewerComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DataManagerControlComponent = /*#__PURE__*/(() => {\n  let DataManagerControlComponent = class DataManagerControlComponent extends DataManagerControlBaseComponent {\n    /* c8 ignore start */\n    constructor(changeDetector, componentFactoryResolver, differs, renderer2, element, wmService, eventCollection, lengthConverter, emitter, maskFormatService, resizeDataManagerService, mTOService, dropLockService, fManagerService, ppService, tabPageOrderService) {\n      super(changeDetector, renderer2, element, lengthConverter, fManagerService, ppService, emitter, mTOService, tabPageOrderService);\n      this.changeDetector = changeDetector;\n      this.componentFactoryResolver = componentFactoryResolver;\n      this.differs = differs;\n      this.renderer2 = renderer2;\n      this.element = element;\n      this.wmService = wmService;\n      this.eventCollection = eventCollection;\n      this.emitter = emitter;\n      this.maskFormatService = maskFormatService;\n      this.resizeDataManagerService = resizeDataManagerService;\n      this.mTOService = mTOService;\n      this.dropLockService = dropLockService;\n      this.fManagerService = fManagerService;\n      this.ppService = ppService;\n      this.tabPageOrderService = tabPageOrderService;\n      this.xPos = 0;\n      this.yPos = 0;\n      this.row = 0;\n      this.oldRow = 0;\n      this.newCurrentRow = 0;\n      /**\r\n       * Determines whether the window of the dataManagerControl maximized is\r\n       */\n\n      this.isMaximized = false;\n      this.currentDataManager = null;\n      this.sizeCorrections = {\n        titleBarHeight: 34,\n        windowBorder: 2\n      };\n      eventCollection.registrateEvent('clicked', this.clickEventHandler);\n      eventCollection.registrateEvent('clickedNotColumnControl', this.clickEventNotColumnControlHandler);\n      eventCollection.registrateEvent('clickedDwComputeControl', this.clickedDwComputeControl);\n      eventCollection.registrateEvent('buttonclicked', this.buttonClickEventHandler);\n      eventCollection.registrateEvent('doubleclick', this.fireDoubleClickEvents);\n      eventCollection.registrateEvent('checkboxChanged', this.fireCheckBoxChangedEvent);\n      eventCollection.registrateEvent('change', this.fireChangeEvent);\n      eventCollection.registrateEvent('keydown', this.fireKeyDownEvent);\n      eventCollection.registrateEvent('getfocus', this.getfocusHandler);\n      eventCollection.registrateEvent('loseFocusDM', this.losefocusHandler);\n      eventCollection.registrateEvent('losefocus', this.losefocusHandler);\n      eventCollection.registrateEvent('RButtonDown', this.RButtonDownEvent);\n      eventCollection.registrateEvent('scrollVertical', this.scrollVerticalEvent);\n      eventCollection.registrateEvent('itemFocusChanged', this.fireItemFocusEvent);\n      eventCollection.registrateEvent('DWdoubleClick', this.fireDoubleClickEvents);\n      eventCollection.registrateEvent('DMClick', this.clickDMEventHandler);\n      eventCollection.registrateEvent('EnterKeyPress', this.keyPressHandler);\n      eventCollection.registrateEvent('DropEvent', this.fireDropEvent);\n      eventCollection.registrateEvent('tabKeyLeaveEvent', this.tabKeyHandler);\n      eventCollection.registrateEvent('itemError', this.validationErrorHandler);\n      eventCollection.registrateEvent('itemRequired', this.validationRequiredErrorHandler);\n      /*\r\n       * Updates DataManagerControl row property (CurrentRow) after\r\n       * a currentRow update received from server.\r\n       */\n\n      eventCollection.registrateEvent('UpdateDMCurrentRow', this.setCurrentRow);\n      eventCollection.registrateEvent('registerDataManager', this.setCurrentDM);\n      this.dcToken = WebMapService.currentService.core.getEvent().subscribe('detectChanges', () => {\n        this.detectChanges();\n      });\n    }\n    /**\r\n     * Gets component name\r\n     */\n\n\n    get componentName() {\n      return ComponentTypeName.DataManagerControl;\n    }\n    /**\r\n     * Applies focus to input or selectable element in\r\n     * component. It triggers dom element focus()\r\n     * If apply focus from tab, fisrt column must be selected\r\n     */\n\n\n    applyFocus(isFirst = false) {\n      // When dataManager is empty, just call dataManagerControl and applyFocus\n      if (this.isEmptyDataManager()) {\n        super.applyFocus();\n        return;\n      } // Whether or not DM has available columns, selects the column or the div row.\n\n\n      if (!this.hasValidTabSequenceColumns()) {\n        super.applyFocus();\n      } // After dataManager is focused and its events triggered, we still need to check for rows selected and bring the visual focus.\n\n\n      this.currentDataManagerInstance.selectCurrentRowColumn(isFirst); // Updates selected rows when focus is applied (Only for grid)\n\n      this.currentDataManagerInstance.updateSelectedRowWithCurrentRow();\n    }\n    /**\r\n     * When DataManager is focused by tab, this verifies if current dataManager has at least one column available.\r\n     */\n\n\n    hasValidTabSequenceColumns() {\n      const columns = this.currentDataManagerInstance ? this.currentDataManagerInstance.getValidColumns() : undefined;\n      return columns && columns.length > 0;\n    }\n    /**\r\n     * Verifies if current DataManager Instance has no data.\r\n     */\n\n\n    isEmptyDataManager() {\n      return this.currentDataManagerInstance && this.currentDataManagerInstance.isEmptyDatamanager();\n    }\n    /**\r\n     * Handler to set the current DM instance\r\n     */\n\n\n    setCurrentDM(event) {\n      this.currentDataManagerInstance = event.args;\n    }\n    /**\r\n     * after view init\r\n     */\n\n\n    ngAfterViewInit() {\n      super.ngAfterViewInit();\n\n      if (this.kendoWindow) {\n        // Fix after upgrade from 3.7.0 kendo-angular-dialog\n        this.kendoWindow['setInitialOffset']();\n        const form = this.kendoWindow.el.nativeElement;\n        form.style.zIndex = 'auto';\n      }\n    }\n    /**\r\n     * @description\r\n     * Returns an object with the current data window id and its binding value.\r\n     * @returns { [key: string]: boolean }\r\n     */\n\n\n    get currentDM() {\n      const controls = {};\n\n      if (this.getModelDataManager()) {\n        const controlId = this.getDataManagerId();\n\n        if (this.currentDataManager === null || this.currentDataManager === controlId) {\n          this.currentDataManager = controlId;\n          controls[controlId] = true;\n        } else {\n          /* c8 ignore else */\n          if (this.currentDataManager !== null && this.currentDataManager !== controlId) {\n            controls[this.currentDataManager] = false;\n            this.currentDataManager = controlId;\n            controls[controlId] = true;\n          }\n        }\n\n        this.setIdFreeForm();\n      }\n\n      return controls;\n    }\n\n    getDynamicDataManagerModel() {\n      this.setIdFreeForm();\n      return this.getModelDataManager();\n    }\n    /**\r\n     * @description\r\n     * Returns a string indicating the currentDataManager\r\n     * @returns { string }\r\n     */\n\n\n    get myCurrentDataManager() {\n      return this.currentDataManager;\n    }\n\n    set myCurrentDataManager(value) {\n      this.currentDataManager = value;\n    }\n    /**\r\n     * Indicates wether the currend DataManager has changed\r\n     */\n\n\n    get dirty() {\n      return this.model.DirtyContent;\n    }\n\n    set dirty(value) {\n      this.model.DirtyContent = value;\n    }\n\n    get preventNCCC() {\n      return this.emitter.currentTextBufferService.preventNotifyCurrentControlChanging;\n    }\n\n    set preventNCCC(value) {\n      this.emitter.currentTextBufferService.preventNotifyCurrentControlChanging = value;\n    }\n\n    getHeight() {\n      if (WebMapService.currentService.config.usePercentage) {\n        return null;\n      }\n\n      const height = this.height;\n      /* c8 ignore next */\n\n      const titleBarHeight = this.titleBar ? this.sizeCorrections.titleBarHeight : 0;\n      /* c8 ignore next */\n\n      return height ? height + titleBarHeight : this.baseDiv?.nativeElement.offsetHeight;\n    }\n\n    getWidth() {\n      return WebMapService.currentService.config.usePercentage ? null : this.width + this.sizeCorrections.windowBorder;\n    }\n    /**\r\n     * @description\r\n     * Method to apply the border style class according to the BorderStyle property value\r\n     */\n\n\n    applyBorderStyle() {\n      switch (this.model.BorderStyle) {\n        case DMControlBorderStyle.StyleBox:\n          return 'styleBox';\n\n        case DMControlBorderStyle.StyleLowered:\n          return 'styleLowered';\n\n        case DMControlBorderStyle.StyleRaised:\n          return 'styleRaised';\n\n        case DMControlBorderStyle.StyleShadowBox:\n          return 'styleShadowBox';\n\n        default:\n          return '';\n      }\n    }\n    /**\r\n     * Method to get the composed class for the datamanagercontrol\r\n     */\n\n\n    getClass() {\n      return `${this.class} ${this.removeScroll()} ${this.applyBorderStyle()} ${this.getDisabled()} ${this.rowFocusIndicator()}`;\n    }\n\n    ngOnInit() {\n      super.ngOnInit();\n      this.registerTabService();\n      this.emitter.currentDataManagerId = this.id;\n      this.eventSubscription = this.emitter.events.subscribe(event => this.eventsHandler(event));\n      this.resizeSubscription = this.resizeDataManagerService.events.subscribe(event => this.resizeHandler(event));\n    }\n\n    ngOnDestroy() {\n      super.ngOnDestroy();\n      this.eventSubscription.unsubscribe();\n      this.resizeSubscription.unsubscribe();\n      /* c8 ignore else */\n\n      if (this.wmService) {\n        this.wmService.core.getEvent().unSubscribe(this.dcToken);\n      }\n    }\n\n    ngDoCheck() {\n      super.ngDoCheck();\n      let callDetector = false;\n      const myStyle = this.setMyStyle();\n\n      if (!_.isEqual(myStyle, this.currentStyle)) {\n        this.setMyStyleProp = this.currentStyle = myStyle;\n        callDetector = true;\n      }\n\n      if (this.dirty) {\n        callDetector = true;\n        this.dirty = false;\n      }\n\n      if (callDetector) {\n        this.detectChanges();\n        this.dirty = false;\n      }\n    }\n    /**\r\n     * @description\r\n     * Returns the top position value in pixels.\r\n     * @returns { number }\r\n     */\n\n\n    get top() {\n      /* c8 ignore next */\n      return this.y ?? this.baseDiv?.nativeElement.offsetTop;\n    }\n    /**\r\n     * @description\r\n     * Returns the left position value in pixels.\r\n     * @returns { number }\r\n     */\n\n\n    get left() {\n      /* c8 ignore next */\n      return this.x ?? this.baseDiv?.nativeElement.offsetLeft;\n    }\n    /**\r\n     * Assigns the heightContainer property in the model of the dataManager\r\n     * @param modelId id to search a model\r\n     */\n\n\n    setIdInDataManager(modelId) {\n      this.wmService.getModel(modelId).then(model => {\n        /* c8 ignore else */\n        if (model) {\n          model.VScrollBar = this.vScrollBar;\n          model.HScrollBar = this.hScrollBar;\n          model.widthContainer = 0;\n          model.heightContainer = 0;\n          model.disabledSelection = this.disabledSelection;\n          model.RowFocusIndicatorValue = this.model.RowFocusIndicatorValue;\n          this.configurePageSize(model);\n          this.modifyStyle(model);\n        }\n      });\n    }\n    /**\r\n     * @description\r\n     * Invoke the corresponding handling for data window control\r\n     * events\r\n     * @param event The collected event information.\r\n     */\n\n\n    eventsHandler(event) {\n      if (event.event.serverEvent) {\n        this.setDelay(false);\n\n        switch (event.event.serverEvent) {\n          case 'loseFocusDM':\n            this.setDelay(true);\n            this.losefocusHandler(event);\n            break;\n\n          case 'DWdoubleClick':\n            const evt = this.dwEventFormatter(event);\n            this.fireDoubleClickEvents(evt);\n            break;\n\n          default:\n            this.eventCollection.getEvent(event.event.serverEvent).apply(this, [event]);\n        }\n      }\n    }\n    /**\r\n     *  Is triggered when the key enter is press downs\r\n     * @param event event data parameter\r\n     */\n\n\n    keyPressHandler(event) {\n      if (event.event.triggerNCCVC) {\n        DataManagerControlExtractors.notifyCurrentControlValueChangedCallback(this, event);\n      }\n\n      if (this.isBindedEvent('dwnprocessenter') && event.args && event.args.context) {\n        this.emitter.commandService.run(CommandName.updateBundle, {\n          event,\n          context: event.args.context,\n          columnId: event.args.columnId\n        });\n      }\n\n      this.dwnProcessEnterHandler(event);\n    }\n    /**\r\n     * Modify the received eventData from an action over the\r\n     * data manager directly and no over a column\r\n     * @param event The original received eventData object\r\n     */\n\n\n    dwEventFormatter(event) {\n      event.Id = this.id;\n      event.mapperId = this.mapperId;\n      return event;\n    }\n    /**\r\n     * Returns commandService\r\n     */\n\n\n    getCommandService() {\n      return this.emitter.commandService;\n    }\n    /**\r\n     *  Is triggered when item Focus Changed\r\n     * @param event event data parameter\r\n     */\n\n\n    fireItemFocusEvent(event) {\n      // Check if the item is in the current row\n      if (this.emitter.keyPressNotifyAction) {\n        DataManagerControlExtractors.notifyCurrentControlChangingCallback(this, event);\n        this.emitter.keyPressNotifyAction = false;\n      }\n\n      this.fireRowChangeEvents(event);\n\n      if (!(event.args && event.args.singleColumn)) {\n        this.itemFocusChangeHandler(event);\n      }\n    }\n    /**\r\n     * @description\r\n     * Overrides the click of DWCompute to trigger itemFocusChange\r\n     * @param event event data parameter\r\n     */\n\n\n    clickedDwComputeControl(event) {\n      event['triggerRowChangeEvents'] = event.event.row !== this.row;\n      this.clickEventNotColumnControlHandler(event);\n      this.fireRowChangeEvents(event);\n      this.itemFocusChangeHandler(event);\n    }\n    /**\r\n     *  Is trigered when RButtonDown\r\n     * @param event event parameter\r\n     */\n\n\n    RButtonDownEvent(event) {\n      event.Id = this.id;\n      this.rButtonDownHandler(event);\n    }\n    /**\r\n     * Is triggered when scrollVertical event occurs\r\n     * @param event event parameter\r\n     */\n\n\n    scrollVerticalEvent(event) {\n      this.scrollVerticalHandler(event);\n    }\n    /**\r\n     * @description\r\n     * Handle the click event for DataManagerControl.\r\n     * @param event The collected event information\r\n     * TODO: Set the old row and current row correct values\r\n     */\n\n\n    clickEventNotColumnControlHandler(event) {\n      event.isNotColumnControl = true;\n      this.clickEventHandler(event);\n    }\n    /**\r\n     * @description\r\n     * Handle the click event for DataManagerControl.\r\n     * @param event The collected event information\r\n     * TODO: Set the old row and current row correct values\r\n     */\n\n\n    clickEventHandler(event) {\n      if (event.cancelNCCC) {\n        this.preventNCCC = event.cancelNCCC;\n      }\n\n      this.xPos = event.event.offsetX;\n      this.yPos = event.event.offsetY;\n\n      if (event.event.serverEvent === 'clicked') {\n        this.lButtonDownHandler(event);\n      }\n\n      this.setCurrentRow(event);\n\n      if (!this.isBindedEvent('dwnlbuttonclk')) {\n        DataManagerControlExtractors.notifyCurrentControlChangingCallback(this, event);\n      }\n\n      this.clickedHandler(event);\n    }\n    /**\r\n     * @description\r\n     * Handle the buttonclick event for DataManagerControl.\r\n     * @param event The collected event information\r\n     * TODO: Set the old row and current row correct values\r\n     */\n\n\n    buttonClickEventHandler(event) {\n      this.xPos = event.event.offsetX;\n      this.yPos = event.event.offsetY;\n      this.setCurrentRow(event);\n      this.fireClickEvents(this.name, this.row, this.oldRow, this.currentDM, event, true);\n    }\n    /**\r\n     * @description\r\n     * Handle the click event for DataManagerControl.\r\n     * @param event The collected event information\r\n     * TODO: Set the old row and current row correct values\r\n     */\n\n\n    clickDMEventHandler(event) {\n      this.xPos = event.event.offsetX;\n      this.yPos = event.event.offsetY;\n      this.setCurrentRow(event);\n      event.Id = this.id;\n      this.fireClickEvents(this.name, this.row, this.oldRow, this.currentDM, event);\n    }\n    /**\r\n     * /////////////////////////////////////\r\n     *  Events Handling\r\n     * ////////////////////////////////////\r\n     */\n\n    /**\r\n     * Performs the click events for datamanagercontrol\r\n     * @param controlName The name of the current control\r\n     * @param row the index of the current row\r\n     * @param oldRow the index of the old row\r\n     * @param dataManager the datamanager\r\n     */\n\n\n    fireClickEvents(controlName, row, oldRow, dataManager, event, fromButton) {\n      event.isNotColumnControl = true;\n      this.lButtonDownHandler(event);\n      this.clickedHandler(event);\n\n      if (oldRow !== row) {\n        this.fireSelectionChangingEvent(event, dataManager.currentRow, row);\n        this.fireSelectionChangedEvent(event, row);\n      }\n\n      this.mouseUpHandler(event);\n\n      if (fromButton) {\n        this.buttonClickingHandler(event);\n        this.buttonClickedHandler(event);\n      }\n\n      this.lButtonUpHandler(event);\n    }\n    /**\r\n     * Is triggered when checkboxChanged event\r\n     * @param controlName The name of the current control\r\n     * @param fielName  Current field name\r\n     * @param row the index of the current row\r\n     * @param oldRow the index of the old row\r\n     * @param dataManager Current Datamanager\r\n     * @param event Event data parameter\r\n     */\n\n\n    fireClickAndChangeCheckBox(controlName, fielName, row, oldRow, dataManager, event) {\n      this.lButtonDownHandler(event);\n      this.clickEventHandler(event);\n\n      if (oldRow !== row) {\n        this.fireSelectionChangingEvent(event, dataManager.currentRow, row);\n        this.fireSelectionChangedEvent(event, row);\n      }\n\n      this.mouseUpHandler(event);\n      this.lButtonUpHandler(event);\n      this.isBindedEvent('dwnitemchange') ? this.setDelay(true) : this.setDelay(false);\n      this.itemChangedHandler(event);\n    }\n    /**\r\n     *\r\n     * @param event Event data parameter\r\n     * @param currentRow The index of the current row\r\n     * @param row The index of the current row\r\n     */\n\n\n    fireSelectionChangingEvent(event, currentRow, row) {\n      this.newCurrentRow = row;\n      this.selectionChangingHandler(event);\n    }\n    /**\r\n     * Sets new current row and triggers selectionChanged event\r\n     * @param event Event Data parameter\r\n     * @param row  The index of current row\r\n     */\n\n\n    fireSelectionChangedEvent(event, row) {\n      this.newCurrentRow = row;\n      this.selectionChangedHandler(event);\n    }\n    /**\r\n     * Handle the doubleclick events\r\n     * @param event The eventData for the double click event\r\n     */\n\n\n    fireDoubleClickEvents(event) {\n      if (event.cancelNCCC) {\n        this.preventNCCC = event.cancelNCCC;\n      }\n\n      this.xPos = event.event.offsetX;\n      this.yPos = event.event.offsetY;\n      this.setCurrentRow(event);\n      this.doubleClickedHandler(event);\n    }\n    /**\r\n     * Sends necessary parameters to execute fireClickAndChangeCheckBox\r\n     * @param event Event data parameter\r\n     */\n\n\n    fireCheckBoxChangedEvent(event) {\n      this.fieldName = event.args.fieldName;\n      this.fireClickAndChangeCheckBox(this.name, this.fieldName, this.row, this.oldRow, this.currentDM, event);\n    }\n    /**\r\n     *  Is Triggered when change event\r\n     * @param event Event data parameter\r\n     */\n\n\n    fireChangeEvent(event) {\n      this.setUpdateData(false);\n      this.setDelay(true);\n\n      if (!event.event.ignoreEditChange) {\n        this.editChangedHandler(event);\n      }\n\n      if (event.args && event.args.computedExpressions && event.args.computedExpressions.length > 0 && this.isRelatedWithComputed(event.args.computedExpressions, event.args.fieldName)) {\n        this.setForceDirty(true);\n      }\n      /* c8 ignore else */\n\n\n      if (!this.isBindedEvent('dwnchanging')) {\n        this.isBindedEvent('dwnitemchange') ? this.setDelay(true) : this.setDelay(false);\n        this.setUpdateData(true);\n        DataManagerControlExtractors.itemChangedCallback(this, event);\n      }\n\n      if (event.event.triggerNCCVC) {\n        DataManagerControlExtractors.notifyCurrentControlValueChangedCallback(this, event);\n      }\n    }\n    /**\r\n     * Fires row change events\r\n     * @param event the current event object\r\n     */\n\n\n    fireRowChangeEvents(event) {\n      const focusedComp = event.event.target;\n\n      if (focusedComp.dataManagerContext && focusedComp.dataManagerContext.rowIndex !== this.row || event['triggerRowChangeEvents']) {\n        this.rowFocusChangingHandler(event);\n\n        if (!event['triggerRowChangeEvents']) {\n          this.row = focusedComp.dataManagerContext.rowIndex;\n        }\n\n        this.rowFocusChangedHandler(event);\n      }\n    }\n    /**\r\n     * Calls UPDATE_BUNDLE command and sets delay\r\n     * @param value UPDATE_BUNDLE delay property\r\n     */\n\n\n    setDelay(value) {\n      const command = this.emitter.commandService.getCommand(CommandName.updateBundle);\n      /* c8 ignore else */\n\n      if (command) {\n        command.setDelayedOption(value);\n      }\n    }\n    /**\r\n     * Calls UPDATE_BUNDLE command and sets updateData\r\n     * @param value UPDATE_BUNDLE updateData property\r\n     */\n\n\n    setUpdateData(value) {\n      const command = this.emitter.commandService.getCommand(CommandName.updateBundle);\n      /* c8 ignore else */\n\n      if (command) {\n        command.setUpdateData(value);\n      }\n    }\n    /**\r\n     * Calls UPDATE_BUNDLE command and sets delay\r\n     * @param value UPDATE_BUNDLE delay property\r\n     */\n\n\n    setForceDirty(value) {\n      const command = this.emitter.commandService.getCommand(CommandName.updateBundle);\n      /* c8 ignore else */\n\n      if (command) {\n        command.setForceDirtyOption(value);\n      }\n    }\n    /**\r\n     * Calls UPDATE_BUNDLE command and sets delay\r\n     * @param value UPDATE_BUNDLE delay property\r\n     */\n\n\n    getForceDirty() {\n      const command = this.emitter.commandService.getCommand(CommandName.updateBundle);\n\n      if (command) {\n        return command.getForceDirty();\n      }\n\n      return false;\n    }\n    /**\r\n     *  Is triggered when key down event\r\n     * @param event Event data parameter\r\n     */\n\n\n    fireKeyDownEvent(event) {\n      this.key = !!event.event.keyCode ? event.event.keyCode : event.event.which;\n      this.keyflags = 13;\n      this.keyDownHandler(event);\n      const lastRow = true;\n\n      switch (this.key) {\n        case 13:\n          // enter key\n          this.triggerKeyDowNCCCCallback(event);\n          this.enterHandler(lastRow, event);\n          break;\n\n        case 40:\n          // arrow down key\n          this.triggerKeyDowNCCCCallback(event);\n          this.arrowDownKeyHandler(lastRow, event);\n          break;\n\n        case 38:\n          // arrow up key\n          this.triggerKeyDowNCCCCallback(event);\n          break;\n\n        case 9: // tab key\n\n        case 39:\n          // rightArrow key\n          this.tabHandler(lastRow, event);\n          break;\n      }\n    }\n    /**\r\n     * Removes scroll depending of what kind of DataManager\r\n     * is rendered inside DataManagerControl\r\n     * @returns scroll classes\r\n     */\n\n\n    removeScroll() {\n      if (this.isDropDownDataWindow()) {\n        return 'DMCustom';\n      } else if (this.isReport) {\n        return 'removeScroll reportContainer';\n      } else {\n        return 'removeScroll';\n      }\n    }\n    /**\r\n     * Adds class if rowFocusIndicatorValue is hand\r\n     * @returns scroll classes\r\n     */\n\n\n    rowFocusIndicator() {\n      return this.model.RowFocusIndicatorValue === 'HAND' ? 'rowFocusIndicator' : '';\n    }\n    /**\r\n     * Triggers arrow down, arrow up and enter keys nccccallback\r\n     * @param event Event Data information\r\n     */\n\n\n    triggerKeyDowNCCCCallback(event) {\n      if (event.event.arrowNCCC) {\n        DataManagerControlExtractors.notifyCurrentControlChangingCallback(this, event);\n      }\n    }\n    /**\r\n     * Indicates if a column is part of a computedfield\r\n     * @returns { boolean }\r\n     */\n\n\n    isRelatedWithComputed(computedExpressions, eventFieldName) {\n      if (computedExpressions) {\n        for (const computed of computedExpressions) {\n          if (computed && computed.indexOf(eventFieldName) >= 0) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n    /**\r\n     *  Is triggered when the key enter is press downs\r\n     * @param event event data parameter\r\n     */\n\n\n    fireDropEvent(event) {\n      if (this.dropLockService.triggerToServer()) {\n        this.events ? this.events['dwndrop'] = true : this.events = {\n          dwndrop: true\n        };\n        this.dwnDropEventHandler(event);\n      }\n    }\n    /**\r\n     * Method wrapper to call from extractor\r\n     * service method to call pending buffer\r\n     * notification\r\n     */\n\n\n    pendingBufferNotify() {\n      this.emitter.currentTextBufferService.pendingBufferNotify();\n    }\n    /**\r\n     * Tabs key handler that overwrites base\r\n     * handler to avoid call to DataManagerTabSequence service\r\n     * when DataManager is a grid.\r\n     * @param event Tab key event\r\n     */\n\n\n    tabKeyHandler(event) {\n      if (this.emitter.dataManagerType !== DatamanagerType.gridComponent) {\n        super.tabKeyHandler(event instanceof EventData ? event.event : event);\n      } else if ((event instanceof EventData ? event.event.gridLeave : undefined) || this.isEmptyDataManager()) {\n        super.tabKeyHandler(event instanceof EventData ? event.event : event);\n      }\n    }\n    /**\r\n     * Max box and Min box are visually related.\r\n     */\n\n\n    maxMinBox() {\n      return (this.maxBox || this.minBox) && this.controlMenu;\n    }\n    /**\r\n     * Validates if minbox should be disabled\r\n     */\n\n\n    disableMinBox() {\n      return !this.minBox;\n    }\n    /**\r\n     * Validates if maxbox should be disabled\r\n     */\n\n\n    disableMaxBox() {\n      return !this.maxBox;\n    }\n    /**\r\n     * States change handler\r\n     * Handle the maximized state size for\r\n     * DataManagers rendered as windows\r\n     * @param event the current statechange event\r\n     */\n\n\n    stateChangeHandler(event) {\n      if (event === 'maximized') {\n        this.isMaximized = true;\n        this.applyMaximizedStyle();\n      } else {\n        this.isMaximized = false;\n        this.restoreWindow();\n      }\n    }\n    /**\r\n     * Determines whether DataManagerControl is a Grid\r\n     * @returns true if is grid\r\n     */\n\n\n    isGrid() {\n      return this.emitter.dataManagerType === DatamanagerType.gridComponent;\n    }\n    /**\r\n     * This function determines if this DataManagerControl is inside of a DropDownDataWindow.\r\n     */\n\n\n    isDropDownDataWindow() {\n      return this.model.DddwData !== undefined && this.model.DddwData !== null;\n    }\n    /**\r\n     * Restores the window position and size\r\n     */\n\n\n    restoreWindow() {\n      this.maximizeHeight = this.maximizeWidth = null;\n      const window = this.kendoWindow.el.nativeElement;\n      this.renderer.setStyle(window, 'z-index', 0);\n      this.renderer.removeClass(window, 'maximized');\n      this.resizeHandler({});\n    }\n    /**\r\n     * Apply maximized style\r\n     * Limits the size of a maximized window dataManager\r\n     * to the current size of its containing window\r\n     */\n\n\n    applyMaximizedStyle() {\n      const parentWindow = this.el.nativeElement.closest ? this.el.nativeElement.closest('.k-window') : kendo.jQuery(this.el.nativeElement).closest('.k-window');\n      const window = this.kendoWindow.el.nativeElement;\n      /* c8 ignore else */\n\n      if (parentWindow && window) {\n        this.renderer.setStyle(window, 'width', '100%');\n        this.renderer.setStyle(window, 'height', '100%');\n        this.renderer.setStyle(window, 'left', '0px');\n        this.renderer.setStyle(window, 'top', '0px');\n        this.renderer.setStyle(window, 'bottom', '0px');\n        this.renderer.setStyle(window, 'z-index', 1, RendererStyleFlags2.Important + RendererStyleFlags2.DashCase);\n        this.renderer.addClass(window, 'maximized');\n        const contentWindow = window.querySelector('.k-window-content');\n        this.maximizeHeight = Utils.getComputedStyleNumber(contentWindow, 'height', null);\n        this.maximizeWidth = Utils.getComputedStyleNumber(contentWindow, 'width', null);\n        this.resizeHandler({});\n      }\n    }\n    /**\r\n     * if there is a dataManager, get the current model and call the 'setIdInDataManager'\r\n     */\n\n\n    setIdFreeForm() {\n      /* c8 ignore else */\n      if (this.getModelDataManager()) {\n        const controlId = this.getDataManagerId();\n        this.setIdInDataManager(controlId);\n      }\n    }\n    /**\r\n     * Sets the current row\r\n     * @param event the current event data\r\n     */\n\n\n    setCurrentRow(event) {\n      this.oldRow = event.event.row === this.row ? this.oldRow : this.row;\n      this.row = event.event.row;\n    }\n    /**\r\n     * Trigger a detect changes after parent's\r\n     * window resize event\r\n     * @param event the current event data\r\n     */\n\n\n    resizeHandler(event) {\n      /* c8 ignore else */\n      if (this.model.DataManager) {\n        if (this.isMaximized) {\n          this.model.DataManager.widthContainer = this.maximizeWidth;\n          this.model.DataManager.heightContainer = this.maximizeHeight;\n        } else {\n          const cont = this.elem.nativeElement.querySelector('.dataManager');\n\n          if (cont && !_.isEqual(this.model.DataManager.heightContainer, cont.clientHeight)) {\n            this.model.DataManager.widthContainer = cont.clientWidth;\n            this.model.DataManager.heightContainer = cont.clientHeight;\n            this.resizeDataManagerService.emitDataManagerResize({\n              id: Utils.getID(this.model.DataManager)\n            });\n          }\n        }\n\n        this.resizeDataManagerService.emitDataManagerResize({\n          id: Utils.getID(this.model.DataManager)\n        });\n      }\n    }\n    /**\r\n     * set the height and width style for the control\r\n     */\n\n\n    modifyStyle(model) {\n      if (this.isMaximized && (this.maximizeHeight || this.maximizeWidth)) {\n        this.setModelStyle(model, this.maximizeHeight, this.maximizeWidth);\n      } else if (isNumeric(this.height) && isNumeric(this.width)) {\n        // both are valid numeric values\n        this.setModelStyle(model, this.height, this.width);\n      } else {\n        // TODO: add test case for the .k-window-wrapper\n        const cont = this.elem.nativeElement.querySelector('.dataManager');\n\n        if (cont) {\n          model.heightContainer = cont.clientHeight;\n          model.disabledSelection = this.disabledSelection;\n          model.widthContainer = this.model.DddwPixelWidth !== undefined ? this.model.DddwPixelWidth : cont.clientWidth;\n        }\n      }\n    }\n    /**\r\n     * Configures page size for data manager host in data manager control.\r\n     * @param model Data manager model (freeform, grid, etc).\r\n     */\n\n\n    configurePageSize(model) {\n      const globalPageSize = WebMapService.currentService.config.globalPageSize; // Sets pageSize with the global page size property defined in\n      // app.component.ts of migrated app.\n\n      if (globalPageSize) {\n        model.pageSize = globalPageSize;\n      } // Sets pageSize with the input of data manager control,\n      // it has priority over global page size\n\n\n      if (this.pageSize) {\n        model.pageSize = this.pageSize;\n      }\n    }\n    /**\r\n     * Set the values in the model\r\n     */\n\n\n    setModelStyle(model, height, width) {\n      model.heightContainer = height ? height : 0;\n      model.disabledSelection = this.disabledSelection;\n      model.widthContainer = this.model.DddwPixelWidth !== undefined ? this.model.DddwPixelWidth : width;\n    }\n\n  };\n\n  DataManagerControlComponent.ɵfac = function DataManagerControlComponent_Factory(t) {\n    return new (t || DataManagerControlComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i0.KeyValueDiffers), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.WebMapService), i0.ɵɵdirectiveInject(EventCollection), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MaskFormatService, 8), i0.ɵɵdirectiveInject(ResizeDataManagerService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(DropLockService), i0.ɵɵdirectiveInject(FocusManagerService), i0.ɵɵdirectiveInject(i3.PopupService), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n  };\n\n  DataManagerControlComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: DataManagerControlComponent,\n    selectors: [[\"wm-data-manager-control\"]],\n    contentQueries: function DataManagerControlComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, _c32, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.header = _t.first);\n      }\n    },\n    viewQuery: function DataManagerControlComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(WindowComponent, 5);\n        i0.ɵɵviewQuery(_c33, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.kendoWindow = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.baseDiv = _t.first);\n      }\n    },\n    inputs: {\n      disabledSelection: \"disabledSelection\"\n    },\n    features: [i0.ɵɵProvidersFeature([DataManagerEventService, CommandsService, UpdateBundleService, UpdateClickedDmRowService, UpdateDMRowAndColumnService, MessageCommandService, MaskFormatService, ObjectAtPointerService, UpdateFirstRowOnPageService, TextBufferService, UpdateDraggedObjectService, DataManagerTabSequenceService, UpdateDDDMCurrentRowService]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c34,\n    decls: 12,\n    vars: 4,\n    consts: [[\"class\", \"dataManager\", \"mwlDroppable\", \"\", 3, \"border-style\", \"ngClass\", \"width\", \"height\", \"ngStyle\", \"dragEnter\", \"dragLeave\", \"dragOver\", \"drop\", 4, \"ngIf\"], [\"errorTemplate\", \"\"], [\"class\", \"dataManager\", \"wmFocusable\", \"\", 3, \"title\", \"width\", \"height\", \"ngClass\", \"top\", \"left\", \"hostComponent\", \"tabindex\", \"keydown.tab\", \"keydown.shift.tab\", \"stateChange\", 4, \"ngIf\"], [\"mwlDraggable\", \"\", \"dragCursor\", \"move\", \"class\", \"dataManager\", \"wmFocusable\", \"\", 3, \"dropData\", \"showOriginalElementWhileDragging\", \"ngClass\", \"ngStyle\", \"ghostElementTemplate\", \"dragActiveClass\", \"ghostElementAppendTo\", \"width\", \"height\", \"hostComponent\", \"tabindex\", \"keydown.tab\", \"keydown.shift.tab\", 4, \"ngIf\"], [\"class\", \"dataManager\", \"wmFocusable\", \"\", 3, \"ngClass\", \"ngStyle\", \"width\", \"height\", \"hostComponent\", \"tabindex\", \"keydown.tab\", \"keydown.shift.tab\", 4, \"ngIf\"], [\"dataManagerControl\", \"\"], [\"ghostTemplate\", \"\"], [1, \"ghostContainer\"], [\"ghostContainer\", \"\"], [\"mwlDroppable\", \"\", 1, \"dataManager\", 3, \"ngClass\", \"ngStyle\", \"dragEnter\", \"dragLeave\", \"dragOver\", \"drop\"], [\"baseDiv\", \"\"], [3, \"open\", \"itemError\", \"closed\"], [\"wmFocusable\", \"\", 1, \"dataManager\", 3, \"title\", \"width\", \"height\", \"ngClass\", \"top\", \"left\", \"hostComponent\", \"tabindex\", \"keydown.tab\", \"keydown.shift.tab\", \"stateChange\"], [\"dMControl\", \"\"], [3, \"ngClass\"], [1, \"custom-title-bar\"], [1, \"k-window-title\"], [\"kendoWindowMinimizeAction\", \"\", 3, \"disabled\", 4, \"ngIf\"], [\"kendoWindowMaximizeAction\", \"\", 3, \"disabled\", 4, \"ngIf\"], [\"kendoWindowRestoreAction\", \"\"], [\"kendoWindowCloseAction\", \"\", 4, \"ngIf\"], [\"class\", \"removeScroll\", 3, \"ngClass\", 4, \"ngTemplateOutlet\"], [\"kendoWindowMinimizeAction\", \"\", 3, \"disabled\"], [\"kendoWindowMaximizeAction\", \"\", 3, \"disabled\"], [\"kendoWindowCloseAction\", \"\"], [1, \"removeScroll\", 3, \"ngClass\"], [\"mwlDraggable\", \"\", \"dragCursor\", \"move\", \"wmFocusable\", \"\", 1, \"dataManager\", 3, \"dropData\", \"showOriginalElementWhileDragging\", \"ngClass\", \"ngStyle\", \"ghostElementTemplate\", \"dragActiveClass\", \"ghostElementAppendTo\", \"hostComponent\", \"tabindex\", \"keydown.tab\", \"keydown.shift.tab\"], [4, \"ngTemplateOutlet\"], [\"wmFocusable\", \"\", 1, \"dataManager\", 3, \"ngClass\", \"ngStyle\", \"hostComponent\", \"tabindex\", \"keydown.tab\", \"keydown.shift.tab\"], [3, \"model\", 4, \"ngIf\"], [3, \"controls\", 4, \"ngIf\"], [3, \"model\"], [3, \"controls\"], [1, \"rectangle\"]],\n    template: function DataManagerControlComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵtemplate(0, DataManagerControlComponent_div_0_Template, 2, 8, \"div\", 0);\n        i0.ɵɵtemplate(1, DataManagerControlComponent_ng_template_1_Template, 1, 2, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(3, DataManagerControlComponent_kendo_window_3_Template, 11, 14, \"kendo-window\", 2);\n        i0.ɵɵtemplate(4, DataManagerControlComponent_div_4_Template, 3, 14, \"div\", 3);\n        i0.ɵɵtemplate(5, DataManagerControlComponent_div_5_Template, 3, 9, \"div\", 4);\n        i0.ɵɵtemplate(6, DataManagerControlComponent_ng_template_6_Template, 4, 3, \"ng-template\", null, 5, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(8, DataManagerControlComponent_ng_template_8_Template, 1, 0, \"ng-template\", null, 6, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelement(10, \"div\", 7, 8);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.model && ctx.visible);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.model && ctx.visible && ctx.titleBar);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.model && ctx.visible && ctx.getModelDataManager() && !ctx.titleBar && ctx.dragEnabled);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.model && ctx.visible && ctx.getModelDataManager() && !ctx.titleBar && !ctx.dragEnabled);\n      }\n    },\n    directives: [DataWindowErrorComponent, i13.WindowComponent, i13.WindowTitleBarComponent, DynamicDataManagerComponent, i2.ContainerComponent, ReportViewerComponent, i6.NgIf, i17.DroppableDirective, i6.NgClass, i6.NgStyle, FocusableDirective, i13.WindowMinimizeActionDirective, i13.WindowMaximizeActionDirective, i13.WindowRestoreActionDirective, i13.WindowCloseActionDirective, i6.NgTemplateOutlet, i17.DraggableDirective],\n    styles: [\".hide-title-bar[_ngcontent-%COMP%]{display:none}.removeScroll[_ngcontent-%COMP%]{overflow:hidden;position:absolute}.DMCustom[_ngcontent-%COMP%]{position:static!important}.enableFocusRect[_ngcontent-%COMP%]{outline:unset!important}.removeEvents[_ngcontent-%COMP%]{pointer-events:none}.rectangle[_ngcontent-%COMP%]{height:20px;width:95px;border-style:solid;border-width:1px}.ghostContainer[_ngcontent-%COMP%]   .dragged[_ngcontent-%COMP%]{height:25px!important;width:100px!important;border:none;z-index:9999!important}.maximized[_ngcontent-%COMP%]{position:absolute!important}.hScrollBar[_ngcontent-%COMP%]{overflow-x:scroll}.k-widget.k-window.dataManager[_ngcontent-%COMP%]{z-index:auto}\"],\n    changeDetection: 0\n  });\n\n  __decorate([NotifyChange('Dirty'), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], DataManagerControlComponent.prototype, \"dirty\", null);\n\n  DataManagerControlComponent = __decorate([dataTransfer(['dtMngrCntrl']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, ComponentFactoryResolver, KeyValueDiffers, Renderer2, ElementRef, WebMapService, EventCollection, LengthConverter, DataManagerEventService, MaskFormatService, ResizeDataManagerService, MainTabOrderService, DropLockService, FocusManagerService, PopupService, ContainerControlTabOrderService])], DataManagerControlComponent);\n  return DataManagerControlComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DwRadioButtonComponent = /*#__PURE__*/(() => {\n  let DwRadioButtonComponent = class DwRadioButtonComponent extends ColumnControlComponent {\n    /* c8 ignore start */\n    constructor(changeDetector, maskFormat2, renderer2, element, lengthConverter, emitter, dataMTabSequenceService) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter, maskFormat2, dataMTabSequenceService);\n      this.changeDetector = changeDetector;\n      this.maskFormat2 = maskFormat2;\n      this.renderer2 = renderer2;\n      this.element = element;\n      this.emitter = emitter;\n      this.dataMTabSequenceService = dataMTabSequenceService;\n      /* c8 ignore stop */\n\n      this.radioButtonClicked = new EventEmitter();\n      this.componentCreated = new EventEmitter();\n    }\n\n    ngOnInit() {\n      super.ngOnInit();\n      this.componentCreated.emit(this);\n      this.loadValues();\n    }\n\n    ngAfterViewInit() {\n      super.ngAfterViewInit();\n      this.applyAlignment();\n    }\n\n    detectChanges() {\n      super.detectChanges();\n      this.applyAlignment();\n    }\n    /**\r\n     * Overrides original behavior to keep\r\n     * visible radiobuttons as flex instead of block elements\r\n     * @param [style] The original style value\r\n     * @returns the modified style\r\n     */\n\n\n    setMyStyle(style) {\n      if (this.emitter.cancelDynamicStyles) {\n        return null;\n      }\n\n      const baseStyle = super.setMyStyle(style);\n\n      if (baseStyle.display === 'block' && !this.model.Columns) {\n        baseStyle.display = 'flex';\n      } else if (this.model.Columns) {\n        baseStyle.display = 'block';\n        baseStyle['column-count'] = this.model.Columns;\n      }\n\n      baseStyle['pointer-events'] = this.disabled ? 'none' : 'auto';\n      return baseStyle;\n    }\n    /**\r\n     * @description\r\n     * Returns the checked value of the model.\r\n     * @returns { boolean }\r\n     */\n\n\n    get checked() {\n      return this.model.Checked;\n    }\n    /**\r\n     * @description\r\n     * Returns the RadioButtonColums value of the model\r\n     * @returns { number }\r\n     */\n\n\n    get radioButtonColumns() {\n      return this.model.RadioButtonColumns;\n    }\n    /**\r\n     * @description\r\n     * Returns the text value of the component model.\r\n     * @returns { string }\r\n     */\n\n\n    get text() {\n      return RemoveAmpersand.remove(this.model.Text);\n    }\n    /**\r\n     * @description\r\n     * Returns the parent DOM element that is used to calculate percentages.\r\n     * @returns { Element }\r\n     */\n\n\n    get parentElement() {\n      return this.renderer.parentNode(this.renderer.parentNode(this.el.nativeElement));\n    }\n    /**\r\n     * @description\r\n     * Returns an unique id composite by UniqueID plus row index.\r\n     * @returns { string }\r\n     */\n\n\n    get radioId() {\n      return `${this.id}${this.dataManagerContext.rowIndex}`;\n    }\n    /**\r\n     * @description\r\n     * Gets focusable element inside of the component\r\n     */\n\n\n    get focusableElement() {\n      return this.validateFocusElement(this.radioButtonComponent);\n    }\n    /**\r\n     * @description\r\n     * Method to remove the alignment class if is present\r\n     */\n\n\n    removeAlignClass() {\n      const element = this.radioButtonComponent.nativeElement;\n\n      if (element.classList.contains('radioButtonColumn')) {\n        this.renderer.removeClass(element, 'radioButtonColumn');\n      }\n\n      if (element.classList.contains('radioButtonRow')) {\n        this.renderer.removeClass(element, 'radioButtonRow');\n      }\n    }\n    /**\r\n     * @description\r\n     * Eval the RadioButtonColumns to style the align of the DWRadioButtonComponent\r\n     */\n\n\n    applyAlignment() {\n      if (this.radioButtonColumns && this.radioButtonComponent) {\n        const element = this.radioButtonComponent.nativeElement;\n        this.removeAlignClass();\n        this.radioButtonColumns > 1 ? this.renderer.addClass(element, 'radioButtonRow') : this.renderer.addClass(element, 'radioButtonColumn');\n      }\n    }\n    /**\r\n     * Applies focus to input or selectable element in\r\n     * component. It triggers dom element focus()\r\n     */\n\n\n    applyFocus() {\n      /* c8 ignore else */\n      if (this.radioCollection && this.radioCollection.length > 0) {\n        let checkedRadio = this.radioCollection.find(rad => {\n          return rad.nativeElement.checked === true;\n        });\n\n        if (!checkedRadio) {\n          checkedRadio = this.radioCollection.first;\n        }\n\n        this.focusApplied = true;\n        checkedRadio.nativeElement.focus();\n        this.focusApplied = false;\n      }\n    }\n    /**\r\n     * @event checkboxChanged Triggered when the checkbox change.\r\n     * @param event Event data parameter.\r\n     */\n\n\n    dmClickHandler(event, eventData) {\n      const data = new EventData(event, this.id, this.mapperId);\n      data.event['row'] = this.dataManagerContext ? this.dataManagerContext.rowIndex : -1;\n      data.isNCCVC = this.logicValue !== eventData;\n      this.logicValue = eventData;\n      this.modelData = eventData;\n      data.args = {\n        fieldName: this.name,\n        data: eventData\n      };\n      this.emitter.commandService.run(CommandName.updateBundle, {\n        data,\n        context: this.dataManagerContext,\n        columnId: this.columnId\n      });\n      this.radioButtonClicked.emit(data);\n      this.updateBuffer(true);\n      this.emitDataManagerEvent('checkboxChanged', data);\n      this.detectChanges(); // Stop propagation without call preventDefault when click is received\n      // by input element\n\n      if (event && event.target && event.target.tagName === 'INPUT') {\n        event.stopPropagation();\n      } else {\n        Utils.preventPropagation(event);\n      }\n    }\n\n  };\n\n  DwRadioButtonComponent.ɵfac = function DwRadioButtonComponent_Factory(t) {\n    return new (t || DwRadioButtonComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(MaskFormatService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(DataManagerTabSequenceService, 8));\n  };\n\n  DwRadioButtonComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: DwRadioButtonComponent,\n    selectors: [[\"wm-dw-radio-button\"]],\n    viewQuery: function DwRadioButtonComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c35, 5);\n        i0.ɵɵviewQuery(_c36, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.radioButtonComponent = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.radioCollection = _t);\n      }\n    },\n    outputs: {\n      radioButtonClicked: \"radioButtonClicked\",\n      componentCreated: \"componentCreated\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[\"class\", \"divContainer\", \"tabindex\", \"0\", 3, \"ngClass\", \"ngStyle\", \"keydown.tab\", \"keydown.shift.tab\", 4, \"ngIf\"], [\"tabindex\", \"0\", 1, \"divContainer\", 3, \"ngClass\", \"ngStyle\", \"keydown.tab\", \"keydown.shift.tab\"], [\"radioButtonComponent\", \"\"], [4, \"ngFor\", \"ngForOf\"], [\"wmPBControls\", \"\", 1, \"divRadioButton\", 3, \"hostComponent\", \"click\"], [\"class\", \"containerRadioButton\", 4, \"ngIf\"], [1, \"containerRadioButton\"], [\"type\", \"radio\", \"tabindex\", \"0\", \"wmFocusable\", \"\", 1, \"k-radio\", 3, \"id\", \"name\", \"readonly\", \"checked\", \"hostComponent\", \"dblclick\"], [\"radioInput\", \"\"], [\"tabindex\", \"0\", \"wmFocusable\", \"\", 1, \"k-radio-label\", \"rightTextRadioButton\", 3, \"for\", \"hostComponent\"], [\"tabindex\", \"0\", \"wmFocusable\", \"\", 1, \"k-radio-label\", \"leftTextRadioButton\", 3, \"for\", \"hostComponent\"]],\n    template: function DwRadioButtonComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, DwRadioButtonComponent_div_0_Template, 3, 3, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.visible);\n      }\n    },\n    directives: [i6.NgIf, i6.NgClass, i6.NgStyle, i6.NgForOf, ControlsPowerDirective, FocusableDirective, i9$1.LabelDirective],\n    styles: [\"\"],\n    changeDetection: 0\n  });\n  DwRadioButtonComponent = __decorate([dataTransfer(['DWrdBtn']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, MaskFormatService, Renderer2, ElementRef, LengthConverter, DataManagerEventService, DataManagerTabSequenceService])], DwRadioButtonComponent);\n  return DwRadioButtonComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DwCheckboxComponent = /*#__PURE__*/(() => {\n  let DwCheckboxComponent = class DwCheckboxComponent extends ColumnControlComponent {\n    /* c8 ignore start */\n    constructor(changeDetector, renderer2, element, maskFormat2, lengthConverter, emitter, dataMTabSequenceService) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter, maskFormat2, dataMTabSequenceService);\n      this.changeDetector = changeDetector;\n      this.renderer2 = renderer2;\n      this.element = element;\n      this.maskFormat2 = maskFormat2;\n      this.emitter = emitter;\n      this.dataMTabSequenceService = dataMTabSequenceService;\n      this.checkBoxChanged = new EventEmitter();\n      this.componentCreated = new EventEmitter();\n    }\n    /**\r\n     * @description\r\n     * Returns the parent DOM element that is used to calculate percentages.\r\n     * @returns { Element }\r\n     */\n\n\n    get parentElement() {\n      return this.renderer.parentNode(this.renderer.parentNode(this.el.nativeElement));\n    }\n    /**\r\n     * @description\r\n     * Returns the checked value of the model.\r\n     * @returns { boolean }\r\n     */\n\n\n    get checked() {\n      // Comparison case insensitive because in PB is how it works\n      return this.modelData && this.checkBoxOn != null ? this.modelData.toLowerCase() === this.checkBoxOn.toLowerCase() : false;\n    }\n    /**\r\n     * @description\r\n     * Sets the checked value for the checkbox\r\n     */\n\n\n    set checked(value) {\n      this.modelData = value ? this.checkBoxOn : this.checkBoxOff;\n    }\n    /**\r\n     * @description\r\n     * Returns the value when the checkBox is off\r\n     * @returns { any }\r\n     */\n\n\n    get checkBoxOff() {\n      return this.model.CheckBoxOff;\n    }\n    /**\r\n     * @description\r\n     * Returns the value when the checkBox is on\r\n     * @returns { any }\r\n     */\n\n\n    get checkBoxOn() {\n      return this.model.CheckBoxOn;\n    }\n    /**\r\n     * @description\r\n     * Returns the data associated to the checkBox\r\n     * @returns { any }\r\n     */\n\n\n    get data() {\n      return this.checked ? this.checkBoxOn : this.checkBoxOff;\n    }\n    /**\r\n     * @description\r\n     * Returns the text value for the current checkbox\r\n     */\n\n\n    get text() {\n      return RemoveAmpersand.remove(this.model.Text);\n    }\n    /**\r\n     * @description\r\n     * Returns the check Id and rowIndex as a checkID\r\n     */\n\n\n    get checkId() {\n      return `${this.id}${this.dataManagerContext.rowIndex}`;\n    }\n    /**\r\n     * @description\r\n     * Gets focusable element inside of the component\r\n     */\n\n\n    get focusableElement() {\n      return this.validateFocusElement(this.focusElement);\n    }\n\n    ngOnInit() {\n      super.ngOnInit();\n      this.componentCreated.emit(this);\n    }\n    /**\r\n     * Applies detectChanges function and call ngAfterViewInit method to refresh\r\n     * the column values.\r\n     * @param data Data to be used in change detection.\r\n     */\n\n\n    columnDetectChanges(data) {\n      this.modelData = this.logicValue ? this.logicValue.toString() : this.modelData;\n      this.setCheckedDOM();\n      super.columnDetectChanges(data);\n    }\n    /**\r\n     * @event checkboxChanged Triggered when the checkbox change.\r\n     * @param event Event data parameter.\r\n     */\n\n\n    clickCheckBoxColumn(event) {\n      this.checked = this.disabled ? this.checked : !this.checked;\n      const data = new EventData(event, this.id, this.mapperId);\n      this.logicValue = this.data;\n      data.args = {\n        fieldName: this.name,\n        data: this.data\n      };\n      data.event['row'] = this.dataManagerContext ? this.dataManagerContext.rowIndex : -1;\n      data.isNCCVC = true;\n      this.emitter.commandService.run(CommandName.updateBundle, {\n        data,\n        context: this.dataManagerContext,\n        columnId: this.columnId\n      });\n      this.checkBoxChanged.emit(data);\n      this.sendObjectAtPointerCommand();\n      this.notifyDataManagerCurrentRow();\n      this.updateBuffer(true);\n      this.emitDataManagerEvent('checkboxChanged', data);\n      this.detectChanges(); // Stop propagation without call preventDefault when click is received\n      // by input element\n\n      if (event && event.target && event.target.tagName === 'INPUT') {\n        event.stopPropagation();\n      } else {\n        Utils.preventPropagation(event);\n      }\n    }\n    /**\r\n     * Updates DOM with checked property to ensure synchronization\r\n     * Sets checked dom\r\n     */\n\n\n    setCheckedDOM() {\n      /* c8 ignore else */\n      if (this.focusElement && this.focusElement.nativeElement) {\n        this.focusElement.nativeElement.checked = this.checked;\n      }\n    }\n    /**\r\n     * Method to allow each component to manage its own\r\n     * display property\r\n     */\n\n\n    getStyleDisplay() {\n      return 'inline-block';\n    }\n    /**\r\n     * @description\r\n     * Returns a valid style object to\r\n     * be applied according to the styling information set in the control's model\r\n     * @returns { any }\r\n     */\n\n\n    setMyStyle() {\n      if (this.emitter.cancelDynamicStyles) {\n        return null;\n      }\n\n      const customStyle = super.setMyStyle();\n      const alignment = this.alignment;\n      const textAlign = 'text-align';\n\n      if (alignment) {\n        if (this.text === '') {\n          if (this.isOnGrid) {\n            customStyle[textAlign] = alignment;\n          } else if (alignment != null && this.checkboxContainer && this.checkboxContainer.nativeElement) {\n            this.checkboxContainer.nativeElement.style[textAlign] = alignment;\n            customStyle[textAlign] = 'left';\n          }\n        } else {\n          customStyle[textAlign] = 'left';\n        }\n      }\n\n      return customStyle;\n    }\n\n  };\n\n  DwCheckboxComponent.ɵfac = function DwCheckboxComponent_Factory(t) {\n    return new (t || DwCheckboxComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MaskFormatService), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(DataManagerTabSequenceService, 8));\n  };\n\n  DwCheckboxComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: DwCheckboxComponent,\n    selectors: [[\"wm-dw-checkbox\"]],\n    viewQuery: function DwCheckboxComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c37, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.checkboxContainer = _t.first);\n      }\n    },\n    outputs: {\n      checkBoxChanged: \"checkBoxChanged\",\n      componentCreated: \"componentCreated\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 4,\n    vars: 5,\n    consts: [[\"wmPBControls\", \"\", 1, \"removeBorders\", 3, \"ngClass\", \"ngStyle\", \"hostComponent\", \"click\", \"keydown.tab\", \"keydown.shift.tab\"], [\"containerDiv\", \"\"], [\"class\", \"containerCheckbox containerCheckboxRight\", 4, \"ngIf\"], [\"class\", \"containerCheckbox\", 4, \"ngIf\"], [1, \"containerCheckbox\", \"containerCheckboxRight\"], [\"chkBxcontainer\", \"\"], [\"kendoCheckBox\", \"\", \"type\", \"checkbox\", \"wmFocusable\", \"\", 1, \"k-checkbox\", \"rightText\", 3, \"id\", \"checked\", \"disabled\", \"hostComponent\"], [\"focusElement\", \"\"], [\"tabindex\", \"0\", \"wmFocusable\", \"\", 1, \"k-checkbox-label\", 3, \"for\", \"hostComponent\"], [1, \"containerCheckbox\"], [\"kendoCheckBox\", \"\", \"type\", \"checkbox\", \"wmFocusable\", \"\", 1, \"k-checkbox\", 3, \"id\", \"checked\", \"disabled\", \"hostComponent\"], [\"tabindex\", \"0\", \"wmFocusable\", \"\", 1, \"k-checkbox-label\", \"leftTextCheckBox\", 3, \"for\", \"hostComponent\"]],\n    template: function DwCheckboxComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0, 1);\n        i0.ɵɵlistener(\"click\", function DwCheckboxComponent_Template_div_click_0_listener($event) {\n          return ctx.clickCheckBoxColumn($event);\n        })(\"keydown.tab\", function DwCheckboxComponent_Template_div_keydown_tab_0_listener($event) {\n          return ctx.tabKeyHandler($event);\n        })(\"keydown.shift.tab\", function DwCheckboxComponent_Template_div_keydown_shift_tab_0_listener($event) {\n          return ctx.tabKeyHandler($event);\n        });\n        i0.ɵɵtemplate(2, DwCheckboxComponent_div_2_Template, 6, 7, \"div\", 2);\n        i0.ɵɵtemplate(3, DwCheckboxComponent_div_3_Template, 6, 7, \"div\", 3);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngClass\", ctx.class)(\"ngStyle\", ctx.setMyStyle())(\"hostComponent\", ctx);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", !ctx.leftText);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.leftText);\n      }\n    },\n    directives: [ControlsPowerDirective, i6.NgClass, i6.NgStyle, i6.NgIf, i5$1.CheckBoxDirective, FocusableDirective, i9$1.LabelDirective],\n    styles: [\".removeBorders[_ngcontent-%COMP%]{border-style:none!important}.rightText[_ngcontent-%COMP%]{display:inline-block}\"],\n    changeDetection: 0\n  });\n  DwCheckboxComponent = __decorate([dataTransfer(['DwChkBx']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, MaskFormatService, LengthConverter, DataManagerEventService, DataManagerTabSequenceService])], DwCheckboxComponent);\n  return DwCheckboxComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar DwDropdownlistboxComponent_1;\nlet DwDropdownlistboxComponent = DwDropdownlistboxComponent_1 = class DwDropdownlistboxComponent extends DropDownBaseComponent {\n  /* c8 ignore start */\n  constructor(changeDetector2, maskFormatService, lengthConverter, renderer2, element, emitter, dataMTSequenceService) {\n    super(changeDetector2, maskFormatService, renderer2, element, lengthConverter, emitter, dataMTSequenceService);\n    this.changeDetector2 = changeDetector2;\n    this.maskFormatService = maskFormatService;\n    this.renderer2 = renderer2;\n    this.element = element;\n    this.emitter = emitter;\n    this.dataMTSequenceService = dataMTSequenceService;\n    /**\r\n     * filterable value to set filterable on dropdownListbox\r\n     *\r\n     * @memberof dropdownListbox\r\n     */\n\n    this.filterableInternal = true;\n    this.componentCreated = new EventEmitter();\n    /**\r\n     * Normalizes the custom value received by the input.\r\n     */\n\n    this.valueNormalizer = text => text.pipe(map(txt => {\n      return normalizeValue(txt);\n    }));\n  }\n\n  get parentElement() {\n    return this.renderer.parentNode(this.renderer.parentNode(this.el.nativeElement));\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.componentCreated.emit(this);\n    this.loadValues();\n    this.filterCollection();\n    this.applyFormat();\n  }\n\n  ngAfterViewInit() {\n    /* c8 ignore else */\n    if (!this.focusableElement?.isFocused) {\n      super.ngAfterViewInit();\n    }\n\n    this.selectedItem = this.getInitialItem();\n    const input = this.element.nativeElement.querySelector('.k-input');\n\n    if (input) {\n      this.renderer2.setAttribute(input, 'maxlength', String(this.limit));\n    }\n  }\n\n  ngAfterContentChecked() {\n    if (this.combobox && this.combobox.hostElement && this.combobox.hostElement.nativeElement && this.combobox.hostElement.nativeElement.firstElementChild) {\n      this.setStyleProperty('border', this.borderStyle);\n      this.setStyleProperty('color', this.textColor);\n      const visualColor = this.backMode === 1 ? 'transparent' : this.backColorFromVisuals;\n\n      if (visualColor != null) {\n        this.setStyleProperty('background-color', visualColor);\n      }\n    }\n  }\n  /**\r\n   * Applies detectChanges function and call ngAfterViewInit method to refresh\r\n   * the column values.\r\n   * @param data Data to be used in change detection.\r\n   */\n\n\n  columnDetectChanges(data) {\n    this.loadValues();\n    this.filterCollection();\n    this.safeNgAfterViewInit();\n    this.detectChanges();\n  }\n  /**\r\n   * Gets/sets the filterable for combobox.\r\n   *\r\n   * @memberof GridComponent\r\n   */\n\n\n  set filterable(value) {\n    this.filterableInternal = value;\n  }\n\n  get filterable() {\n    return this.filterableInternal;\n  }\n  /**\r\n   * Sets a style property using renderer2\r\n   * @param propertyName: name of the property being set\r\n   * @param propertyValue\r\n   */\n\n\n  setStyleProperty(propertyName, propertyValue) {\n    this.renderer2.setStyle(this.combobox.hostElement.nativeElement.firstElementChild, propertyName, propertyValue);\n  }\n  /**\r\n   *Filter handler method\r\n   * @param value: value of the property\r\n   */\n\n\n  filterHandler(value) {\n    this.combobox.toggle(false);\n  }\n  /**\r\n   * Gets initial item\r\n   * @returns initial item\r\n   */\n\n\n  getInitialItem() {\n    // In some cases, the value key in the values array has a blank space\n    const initialItem = this.values && this.values.length > 0 ? this.originalValues.find(item => (item.value != null ? item.value.replace(/\\s/g, '') : item.value) === this.logicValue) : undefined;\n\n    if (initialItem) {\n      return initialItem;\n    }\n\n    return {\n      text: this.logicValue ? this.logicValue.toString().replace(/\\0/, '') : '',\n      value: this.logicValue\n    };\n  }\n  /**\r\n   * @description\r\n   * Returns a boolean value indicating if the control is editable.\r\n   * @returns { boolean }\r\n   */\n\n\n  get allowEdit() {\n    return this.model.AllowEdit;\n  }\n  /**\r\n   * @override\r\n   * Extracts the values collection data from column model.\r\n   * @param [column] Column with the values to set.\r\n   */\n\n\n  itemsExtractor(column) {\n    const result = [];\n\n    if (column && column.Values) {\n      for (const element of column.Values) {\n        if (element && element.length >= 2) {\n          result.push({\n            text: element[1],\n            value: element[0]\n          });\n        }\n      }\n    }\n\n    return result;\n  }\n  /**\r\n   * @description\r\n   * Returns the selected key pair item.\r\n   * Returns 'null' if there isn't a selected item.\r\n   * @returns { text, value }\r\n   */\n\n\n  get selectedItem() {\n    if (this.modelData !== undefined && this.modelData !== null && this.modelData !== '') {\n      // If it has a custom value and it is in allow edit mode return custom value.\n      if (this.allowEdit && this.customValue) {\n        return this.customValue;\n      } // Try to retrieve value from Values collection.\n\n\n      const returnValue = this.getValue(this.modelData);\n\n      if (!returnValue && this.values) {\n        // If it doesn't have a value in the Values collection, check if it has a defaultValue.\n        if (!this.defaultValue || this.defaultValue && this.defaultValue.value !== this.modelData) {\n          this.defaultValue = normalizeValue(this.modelData);\n        }\n\n        return this.defaultValue;\n      }\n\n      return returnValue;\n    }\n\n    return null;\n  }\n  /**\r\n   * @description\r\n   * Sets the selected key pair item of the model.\r\n   * @param { text, value } value The key pair item received\r\n   * from kendo combobox component.\r\n   */\n\n\n  set selectedItem(value) {\n    if (value) {\n      if (this.allowEdit && this.modified) {\n        value.text = Utils.convertTextCase(value.text, this.textCase);\n        value.value = Utils.convertTextCase(value.value, this.textCase);\n      }\n\n      const returnValue = this.getValue(value.value);\n\n      if (returnValue) {\n        this.customValue = null;\n        this.defaultValue = null;\n        this.modelData = String(returnValue.text);\n        this.logicValue = returnValue.value;\n      } else if (this.allowEdit) {\n        this.customValue = normalizeValue(value.text);\n        this.modelData = String(value.text);\n        this.logicValue = value.value;\n      } // There is an implicit else clause, this case is when defaultValue is set.\n\n    } else {\n      this.modelData = null;\n      this.customValue = null;\n      this.defaultValue = null;\n    }\n  }\n  /**\r\n   * Gets the current control TextCase value.\r\n   */\n\n\n  get textCase() {\n    return this.model.DdlbCase;\n  }\n  /**\r\n   * @description\r\n   * Finds an item by value member in the values collection.\r\n   * @param value The item value to find.\r\n   */\n\n\n  getValue(value) {\n    let result = null;\n\n    if (this.originalValues != null && this.originalValues.length > 0) {\n      value = Utils.nullToString(value);\n      result = this.originalValues.find(x => Utils.nullToString(x.value) === value);\n\n      if (result === undefined) {\n        result = this.originalValues.find(x => Utils.nullToString(x.text) === value);\n      }\n    }\n\n    return result;\n  }\n  /**\r\n   *  Is triggered when key dow event\r\n   * @param event event parameter\r\n   */\n\n\n  keyDownHandler(event) {\n    /* c8 ignore else */\n    if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n      Utils.preventPropagation(event);\n    }\n  }\n  /**\r\n   * Handle the open event\r\n   * Verify if the current component is disabled\r\n   * and avoid opening the list of available options.\r\n   * @param event The current event data\r\n   */\n\n\n  openHandler(event) {\n    if (this.disabled) {\n      event.preventDefault(); // Avoid opening the option list\n    }\n  }\n  /**\r\n   * Removes arrow button\r\n   * Override method from dropdown base to avoid problems\r\n   * to display items on click\r\n   */\n\n\n  removeOrApplyArrow(display) {\n    this.inputElement = this.element.nativeElement.querySelector('.k-input');\n    const visible = display ? 'true' : 'none';\n    const arrow = this.element.nativeElement.querySelector('span .k-select');\n\n    if (arrow) {\n      this.renderer2.setAttribute(arrow, 'style', `display: ${visible}`);\n    }\n  }\n  /**\r\n   * True if the modelData has a value otherwise False\r\n   * This is to avoid override the logicValue with a null with the applyFormat\r\n   */\n\n\n  shouldApplyFormat() {\n    return this.modelData != null;\n  }\n  /**\r\n   * @description\r\n   * The 'classHandler' function links the outer css class with upperCaseField constant css class.\r\n   * @returns { string }\r\n   */\n\n\n  classHandler() {\n    return `${super.classHandler()} ${this.textCase === TextCase.Upper ? DwDropdownlistboxComponent_1.upperCaseCSSClass : ''}`;\n  }\n  /**\r\n   * Is triggered when another component is selected\r\n   * @param event event parameter\r\n   */\n\n\n  selectionChangeHandler(event) {\n    this.modified = true;\n    this.selectedItem = event;\n    super.selectionChangeHandler(event);\n    this.detectChanges();\n    this.modified = false;\n  }\n  /**\r\n   * Filters collection\r\n   * Removes items with duplicated descriptions from the\r\n   * list of dropdown values\r\n   * Also keeps the original list of retrieved values in case that\r\n   * the server sends a value that is in the excluded ones.\r\n   */\n\n\n  filterCollection() {\n    if (this.values) {\n      this.originalValues = _.cloneDeep(this.values);\n      const filter = {};\n      const result = [];\n      this.values.forEach(item => {\n        if (!filter[item.text]) {\n          filter[item.text] = item;\n          result.push(item);\n        }\n      });\n      this.values = result;\n    }\n  }\n\n};\n\nDwDropdownlistboxComponent.ɵfac = function DwDropdownlistboxComponent_Factory(t) {\n  return new (t || DwDropdownlistboxComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(MaskFormatService), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(DataManagerTabSequenceService, 8));\n};\n\nDwDropdownlistboxComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DwDropdownlistboxComponent,\n  selectors: [[\"wm-dw-dropdownlistbox\"]],\n  inputs: {\n    filterable: \"filterable\"\n  },\n  outputs: {\n    componentCreated: \"componentCreated\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 2,\n  vars: 2,\n  consts: [[\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"filterable\", \"data\", \"value\", \"ngClass\", \"textField\", \"valueField\", \"readonly\", \"popupSettings\", \"hostComponent\", \"tabindex\", \"click\", \"mousedown\", \"valueChange\", \"dblclick\", \"open\", \"focus\", \"blur\", \"keydown\", \"keydown.tab\", \"keydown.shift.tab\", 4, \"ngIf\"], [\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"filterable\", \"data\", \"allowCustom\", \"valueNormalizer\", \"value\", \"ngClass\", \"textField\", \"valueField\", \"readonly\", \"popupSettings\", \"hostComponent\", \"clearButton\", \"tabindex\", \"click\", \"mousedown\", \"valueChange\", \"dblclick\", \"open\", \"focus\", \"blur\", \"keydown\", \"keydown.tab\", \"keydown.shift.tab\", \"filterChange\", 4, \"ngIf\"], [\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"filterable\", \"data\", \"value\", \"ngClass\", \"textField\", \"valueField\", \"readonly\", \"popupSettings\", \"hostComponent\", \"tabindex\", \"click\", \"mousedown\", \"valueChange\", \"dblclick\", \"open\", \"focus\", \"blur\", \"keydown\", \"keydown.tab\", \"keydown.shift.tab\"], [\"combobox\", \"\"], [\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"filterable\", \"data\", \"allowCustom\", \"valueNormalizer\", \"value\", \"ngClass\", \"textField\", \"valueField\", \"readonly\", \"popupSettings\", \"hostComponent\", \"clearButton\", \"tabindex\", \"click\", \"mousedown\", \"valueChange\", \"dblclick\", \"open\", \"focus\", \"blur\", \"keydown\", \"keydown.tab\", \"keydown.shift.tab\", \"filterChange\"]],\n  template: function DwDropdownlistboxComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, DwDropdownlistboxComponent_kendo_dropdownlist_0_Template, 2, 11, \"kendo-dropdownlist\", 0);\n      i0.ɵɵtemplate(1, DwDropdownlistboxComponent_kendo_combobox_1_Template, 2, 14, \"kendo-combobox\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.model && !ctx.allowEdit);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.model && ctx.allowEdit);\n    }\n  },\n  directives: [i6$1.DropDownListComponent, i6$1.ComboBoxComponent, i6.NgIf, ControlsPowerDirective, FocusableDirective, i6.NgClass],\n  styles: [\"\"],\n  changeDetection: 0\n});\nDwDropdownlistboxComponent = DwDropdownlistboxComponent_1 = __decorate([dataTransfer(['DWdrpDwnLstBx']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, MaskFormatService, LengthConverter, Renderer2, ElementRef, DataManagerEventService, DataManagerTabSequenceService])], DwDropdownlistboxComponent);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction normalizeValue(txt) {\n  return {\n    text: txt,\n    value: txt\n  };\n}\n\nlet DwEditComponent = /*#__PURE__*/(() => {\n  let DwEditComponent = class DwEditComponent extends ColumnControlComponent {\n    /* c8 ignore start */\n    constructor(changeDetector, renderer2, element, lengthConverter, emitter, maskFormat2, dataMTabSequenceService, mainTabOrder) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter, maskFormat2, dataMTabSequenceService);\n      this.changeDetector = changeDetector;\n      this.renderer2 = renderer2;\n      this.element = element;\n      this.emitter = emitter;\n      this.maskFormat2 = maskFormat2;\n      this.dataMTabSequenceService = dataMTabSequenceService;\n      this.mainTabOrder = mainTabOrder;\n      /* c8 ignore stop */\n\n      this.componentCreated = new EventEmitter();\n      this.itemChanged = new EventEmitter();\n      this.timeDelay = 0;\n      this.timeout = null;\n      /**\r\n       * Avoid change on format of dw edit component\r\n       * Avoids to trigger an extra itemchange event on applyformats calls\r\n       */\n\n      this.avoidChangeOnFormat = false;\n      element.nativeElement._component = this;\n    }\n\n    ngOnInit() {\n      super.ngOnInit();\n      this.componentCreated.emit(this);\n      this.loadValues();\n      this.style = new PBStyle();\n      this.maskFormat2.initFormatArrays(this.format, this.validateColumn(this.columnId), `${this.columnId}`);\n      this.modelData = this.logicValue;\n      this.applyFormat();\n    }\n    /**\r\n     * Columns detect changes\r\n     * Override to clean the textarea before applying new changes\r\n     * Note: this is a fix for textarea that does not detect input changes\r\n     * on automated tests and the modeldata remains dirty after a server refresh.\r\n     * @param affectedCells The cells modified that are being used by change detection\r\n     */\n\n\n    columnDetectChanges(affectedCells) {\n      if (!affectedCells) {\n        this.modelData = null;\n        this.modified = false;\n      }\n\n      super.columnDetectChanges(affectedCells);\n    }\n    /**\r\n     * @override\r\n     * retuns the value of the model in an internal variable\r\n     * @returns { any }\r\n     */\n\n\n    get modelData() {\n      return this.modelDataInternal && typeof this.modelDataInternal === 'object' ? '' : this.modelDataInternal;\n    }\n    /**\r\n     * @override\r\n     * save the value of the model in an internal variable\r\n     */\n\n\n    set modelData(value) {\n      if (this.modelDataInternal !== value) {\n        const textConverted = typeof value === 'string' ? Utils.convertTextCase(value, this.fontCase) : value;\n        this.currentAlternativeValue = this.findInValues(textConverted);\n        this.modelDataInternal = this.currentAlternativeValue?.text ?? textConverted;\n      }\n    }\n    /**\r\n     * Gets the current control FontCase value.\r\n     */\n\n\n    get fontCase() {\n      return (this.model.Edit && this.model.Edit.FontCase ? this.model.Edit.FontCase : this.case ? this.case : TextCase.AnyCase).toLowerCase();\n    }\n    /**\r\n     * @description\r\n     * Returns the parent DOM element that is used to calculate percentages.\r\n     * @returns { Element }\r\n     */\n\n\n    get parentElement() {\n      return this.renderer.parentNode(this.renderer.parentNode(this.el.nativeElement));\n    }\n    /**\r\n     * @description\r\n     * Returns a boolean indicating if the column uses code table.\r\n     * @returns { boolean }\r\n     */\n\n\n    get useCodeTable() {\n      return this.model.UseCodeTable;\n    }\n    /**\r\n     * @event checkboxChanged Triggered when the checkbox change.\r\n     * @param event Event data parameter.\r\n     */\n\n\n    itemChangeHandler(event) {\n      /* c8 ignore else */\n      if (!this.focusApplied || this.isLogicValueDifferentOfServerValue(false)) {\n        const dataEvent = new EventData(event, this.id, this.mapperId); // Validates that modelData is the same of the input\n\n        if (event.target && this.modelData !== event.target.value && this.isInput()) {\n          this.modelData = event.target.value;\n        }\n\n        this.applyFormat();\n        this.disableFormatting = false; // this is a temporary fix while we arrange the problem of the\n        // validations of the controls, update buffer only when there are not\n        // validations failed.\n\n        /* c8 ignore else */\n\n        if (!this.editRequiredFailed && !this.itemErrorFailed) {\n          this.updateBuffer();\n        }\n\n        dataEvent.args = this.createEventArguments();\n        this.emitter.commandService.run(CommandName.updateBundle, {\n          dataEvent,\n          context: this.dataManagerContext,\n          columnId: this.columnId\n        });\n        this.itemChanged.emit(dataEvent);\n        this.triggerLastColumnNCCVC(dataEvent);\n        this.emitDataManagerEvent('change', dataEvent);\n        this.modified = false;\n      }\n    }\n    /**\r\n     * Applies dynamic styles to dw-edit inside of grid component\r\n     * after leave.\r\n     * PATCH: Other columns does not have the same support of apply styles and\r\n     * update text buffer property when they are displayed inside of a grid with\r\n     * virtual scroll on, so basically this code is a patch for Dispatch project.\r\n     * @param event\r\n     */\n\n\n    focusOutHandler(event) {\n      if (this.isOnGrid) {\n        this.applyColumnStyle();\n      }\n    }\n    /**\r\n     * Creates the corresponding arguments object\r\n     * that will be send to the server side\r\n     */\n\n\n    createEventArguments() {\n      if (this.dataManagerContext.columnTypes[this.columnId - 1] === DataTypeNames.datetime) {\n        return {\n          fieldName: this.name,\n          data: this.displayValue,\n          computedExpressions: this.dataManagerContext.computedExpressions,\n          row: this.rowIndex\n        };\n      }\n\n      return {\n        fieldName: this.name,\n        data: this.logicValue,\n        computedExpressions: this.dataManagerContext.computedExpressions,\n        row: this.rowIndex\n      };\n    }\n    /**\r\n     * @description\r\n     * Returns the type value for the control.\r\n     * @returns { string }\r\n     */\n\n\n    get controlType() {\n      return this.isPassword ? 'password' : 'text';\n    }\n    /**\r\n     * return true if the property password is true.\r\n     * @returns { boolean }\r\n     */\n\n\n    get isPassword() {\n      return this.model.Password || this.model.Edit && this.model.Edit.Password;\n    }\n    /**\r\n     * this update the modified flag to know if the value of the control was changed\r\n     * @param e event parameter\r\n     */\n\n\n    wasWritten(e) {\n      this.modified = true;\n\n      if (this.timeDelay) {\n        if (this.timeout) {\n          clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout(() => {\n          this.itemChangeHandler(e);\n        }, this.timeDelay);\n      }\n    }\n    /**\r\n     * Return a value indicating whether this control\r\n     * has a multiline value\r\n     */\n\n\n    get multiline() {\n      return this.model.Multiline;\n    }\n    /**\r\n     * Return a value indicating the autocomplete value\r\n     * Global autocomplete property should be defined in app.component.ts of migrated app.\r\n     */\n\n\n    get autocomplete() {\n      return WebMapService.currentService.config.autocomplete ? WebMapService.currentService.config.autocomplete : 'on';\n    }\n    /**\r\n     * @description\r\n     * Gets focusable element inside of the component\r\n     */\n\n\n    get focusableElement() {\n      return this.validateFocusElement(this.focusElement);\n    }\n    /**\r\n     * @description\r\n     * The 'classHandler' function links the outer css class with borderClass constant css class.\r\n     * @returns { string }\r\n     */\n\n\n    classHandler() {\n      const original = super.classHandler();\n      return ` ${original} ${this.disabledHighLight()} ${this.disabledFocusRect()} ${this.isInsideGrid()}\n    ${this.editAutohScroll ? 'autoScroll' : ''} ${this.editVerticalScroll ? 'verticalScroll' : ''} ${this.fontCase === TextCase.Upper ? ColumnControlComponent.upperCaseCSSClass : ''}\n      `;\n    }\n    /**\r\n     * @description\r\n     * returns a boolean indicating if the control should be an input.\r\n     * @returns { boolean }\r\n     */\n\n\n    isInput() {\n      return !this.multiline && !this.displayAsPicture && (this.isOnGrid && !this.isPassword || !this.isOnGrid || this.isPassword);\n    }\n    /**\r\n     * @description\r\n     * returns string to apply styles for columns inside grid\r\n     * @returns { string }\r\n     */\n\n\n    isInsideGrid() {\n      return this.isOnGrid ? 'columnInGrid' : '';\n    }\n    /**\r\n     * Determines whether grid virtual scrolling is activated\r\n     * @returns true if grid virtual scrolling\r\n     */\n\n\n    isGridVirtualScrolling() {\n      return this.dataManagerContext.pagination.pagerMode && this.dataManagerContext.pagination.pagerMode === 'virtual';\n    }\n    /**\r\n     * Determines whether edit has or has not a format\r\n     * @returns true if it has a format\r\n     */\n\n\n    hasFormat() {\n      return this.model && (this.useFormat || this.editFormat && this.editFormat !== '[general]' || this.format && this.format !== '[general]');\n    }\n    /**\r\n     * OnKeyDownEnterHandler\r\n     * Overrides to avoid triggering an extra itemChangeEvent\r\n     * when the applyFormat is called\r\n     * @param event the current js event\r\n     */\n\n\n    onKeyDownEnter(event) {\n      if (validateDWColumnType(this, event)) {\n        Utils.preventPropagation(event);\n        return;\n      }\n\n      this.applyFormat();\n      const logicVal = this.logicValue;\n      const dataEvent = new EventData(event, this.id, this.mapperId);\n      dataEvent.args = {\n        context: this.dataManagerContext,\n        columnId: this.columnId\n      };\n      const changed = this.updateBuffer();\n      this.emitDataManagerEvent('EnterKeyPress', dataEvent);\n      this.modelData = logicVal; // Only when value was changed and it is the last row of the DataManager\n\n      if (changed && this.isLastRow()) {\n        this.disableFormatting = true;\n        event.triggerNCCVC = changed;\n        this.itemChangeHandler(event);\n      }\n    }\n    /**\r\n     * Arrows key handler, cancel event if there is an error on column\r\n     * @param event the current js event\r\n     */\n\n\n    arrowKeyHandler(event) {\n      if (validateDWColumnType(this, event)) {\n        Utils.preventPropagation(event);\n      }\n    }\n    /**\r\n     * Clicks column\r\n     * Override original function to allow preventDefault behavior\r\n     * @param event the original JS event object\r\n     */\n\n\n    clickColumn(event) {\n      if (!this.preventErrorPropagation(event)) {\n        event['shouldAllowPreventDefault'] = true;\n        super.clickColumn(event);\n      }\n    }\n    /**\r\n     * Validates item changes before send an update\r\n     * Verifies if the item contains a valid value if not\r\n     * notifies the datamanager by raising the itemError event\r\n     * @param event current javascript event object.\r\n     */\n\n\n    validateItemError(event) {\n      if (this.isModelDataContainedInValues()) {\n        return false;\n      }\n\n      return this.validateItemErrorBase(event);\n    }\n    /**\r\n     * @description\r\n     * Method to choose the editable component to apply the selectText.\r\n     * The input elementRef of the BaseComponent is assigned here\r\n     */\n\n\n    get editable() {\n      return this.multiline ? this.focusableElement : null;\n    }\n    /**\r\n     * Generic handler for the keydown event\r\n     * @param event\r\n     */\n\n\n    keyDownHandler(event) {\n      switch (event.key) {\n        case 'Enter':\n          this.onKeyDownEnter(event);\n          break;\n\n        case 'Tab':\n          this.tabKeyHandler(event);\n          break;\n\n        default:\n          break;\n      }\n    }\n    /**\r\n     * Checks if current modelData is contained in values array\r\n     * @returns true if modelData is inside of current values.\r\n     */\n\n\n    isModelDataContainedInValues() {\n      return !!this.findInValues(this.modelData);\n    }\n    /**\r\n     * Adjust textarea control height\r\n     */\n\n\n    calculateNewHeight() {\n      /* c8 ignore else */\n      if (this.element && this.element.nativeElement && this.element.nativeElement.firstElementChild) {\n        const textArea = this.element.nativeElement.firstElementChild;\n\n        if (this.isOnDynamicDatamanager && this.model.Position && this.model.Position.Height) {\n          textArea.style.height = `${this.model.Position.Height}px`;\n          textArea.style.height = `${textArea.scrollHeight}px`;\n        } else {\n          textArea.style.height = `${textArea.scrollHeight}px`;\n        }\n      }\n    }\n\n  };\n\n  DwEditComponent.ɵfac = function DwEditComponent_Factory(t) {\n    return new (t || DwEditComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MaskFormatService), i0.ɵɵdirectiveInject(DataManagerTabSequenceService, 8), i0.ɵɵdirectiveInject(MainTabOrderService));\n  };\n\n  DwEditComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: DwEditComponent,\n    selectors: [[\"wm-dw-edit\"]],\n    inputs: {\n      timeDelay: \"timeDelay\"\n    },\n    outputs: {\n      componentCreated: \"componentCreated\",\n      itemChanged: \"itemChanged\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 4,\n    vars: 4,\n    consts: [[3, \"src\", \"ngStyle\", \"ngClass\", \"error\", 4, \"ngIf\"], [\"kendoTextBox\", \"\", \"class\", \"k-form-field\", \"wmMaskValidator\", \"\", \"wmPBControls\", \"\", \"wmFocusable\", \"\", \"spellcheck\", \"false\", 3, \"ngStyle\", \"tabindex\", \"ngModel\", \"readonly\", \"type\", \"ngClass\", \"hostComponent\", \"border\", \"box-shadow\", \"autocomplete\", \"ngModelChange\", \"input\", \"blur\", \"change\", \"click\", \"mousedown\", \"dblclick\", \"keydown.enter\", \"keydown.tab\", \"keydown.shift.tab\", \"keydown.arrowup\", \"keydown.arrowdown\", 4, \"ngIf\"], [\"kendoTextArea\", \"\", \"class\", \"k-form-field\", \"wmMaskValidator\", \"\", \"wmPBControls\", \"\", \"wmFocusable\", \"\", \"spellcheck\", \"false\", 3, \"ngStyle\", \"tabindex\", \"ngModel\", \"readonly\", \"border\", \"box-shadow\", \"ngClass\", \"hostComponent\", \"ngModelChange\", \"blur\", \"input\", \"change\", \"click\", \"mousedown\", \"dblclick\", \"keydown.enter\", \"keydown.tab\", \"keydown.shift.tab\", \"keydown.arrowup\", \"keydown.arrowdown\", 4, \"ngIf\"], [\"kendoTextArea\", \"\", \"class\", \"k-form-field\", \"wmMaskValidator\", \"\", \"wmPBControls\", \"\", \"wmFocusable\", \"\", \"spellcheck\", \"false\", 3, \"ngStyle\", \"tabindex\", \"ngModel\", \"readonly\", \"border\", \"box-shadow\", \"ngClass\", \"hostComponent\", \"ngModelChange\", \"blur\", \"click\", \"mousedown\", \"input\", \"change\", \"dblclick\", \"keydown\", 4, \"ngIf\"], [3, \"src\", \"ngStyle\", \"ngClass\", \"error\"], [\"kendoTextBox\", \"\", \"wmMaskValidator\", \"\", \"wmPBControls\", \"\", \"wmFocusable\", \"\", \"spellcheck\", \"false\", 1, \"k-form-field\", 3, \"ngStyle\", \"tabindex\", \"ngModel\", \"readonly\", \"type\", \"ngClass\", \"hostComponent\", \"autocomplete\", \"ngModelChange\", \"input\", \"blur\", \"change\", \"click\", \"mousedown\", \"dblclick\", \"keydown.enter\", \"keydown.tab\", \"keydown.shift.tab\", \"keydown.arrowup\", \"keydown.arrowdown\"], [\"focusElement\", \"\"], [\"kendoTextArea\", \"\", \"wmMaskValidator\", \"\", \"wmPBControls\", \"\", \"wmFocusable\", \"\", \"spellcheck\", \"false\", 1, \"k-form-field\", 3, \"ngStyle\", \"tabindex\", \"ngModel\", \"readonly\", \"ngClass\", \"hostComponent\", \"ngModelChange\", \"blur\", \"input\", \"change\", \"click\", \"mousedown\", \"dblclick\", \"keydown.enter\", \"keydown.tab\", \"keydown.shift.tab\", \"keydown.arrowup\", \"keydown.arrowdown\"], [\"kendoTextArea\", \"\", \"wmMaskValidator\", \"\", \"wmPBControls\", \"\", \"wmFocusable\", \"\", \"spellcheck\", \"false\", 1, \"k-form-field\", 3, \"ngStyle\", \"tabindex\", \"ngModel\", \"readonly\", \"ngClass\", \"hostComponent\", \"ngModelChange\", \"blur\", \"click\", \"mousedown\", \"input\", \"change\", \"dblclick\", \"keydown\"]],\n    template: function DwEditComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, DwEditComponent_img_0_Template, 1, 3, \"img\", 0);\n        i0.ɵɵtemplate(1, DwEditComponent_input_1_Template, 2, 13, \"input\", 1);\n        i0.ɵɵtemplate(2, DwEditComponent_textarea_2_Template, 2, 11, \"textarea\", 2);\n        i0.ɵɵtemplate(3, DwEditComponent_textarea_3_Template, 2, 11, \"textarea\", 3);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.visible && ctx.displayAsPicture && ctx.showImage);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isInput());\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.displayAsPicture && !ctx.isOnGrid && !ctx.isPassword && ctx.multiline);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isOnGrid && !ctx.displayAsPicture && !ctx.isPassword && ctx.multiline);\n      }\n    },\n    directives: [i6.NgIf, i6.NgStyle, i6.NgClass, i5$1.TextBoxDirective, i9.DefaultValueAccessor, MaskValidatorDirective, ControlsPowerDirective, FocusableDirective, i9.NgControlStatus, i9.NgModel, i9.MaxLengthValidator, i5$1.TextAreaDirective],\n    styles: [\".autoScroll[_ngcontent-%COMP%]{white-space:pre}textarea[_ngcontent-%COMP%]{resize:none;font-weight:400}.columnInGrid[_ngcontent-%COMP%]{width:100%}.verticalScroll.enableHighLight[_ngcontent-%COMP%], .verticalScroll[ng-reflect-model][_ngcontent-%COMP%]{overflow-y:scroll}.verticalScroll[_ngcontent-%COMP%]:not([ng-reflect-model]):not(.enableHighLight){overflow-y:unset}\"],\n    changeDetection: 0\n  });\n  DwEditComponent = __decorate([dataTransfer(['DWEdit']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, LengthConverter, DataManagerEventService, MaskFormatService, DataManagerTabSequenceService, MainTabOrderService])], DwEditComponent);\n  return DwEditComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n// tslint:disable-next-line:directive-class-suffix\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\n\n\nlet DropDownDataWindowBaseComponent = /*#__PURE__*/(() => {\n  class DropDownDataWindowBaseComponent extends DropDownBaseComponent {\n    constructor() {\n      super(...arguments);\n      /**\r\n       * Is used to validate if popup is opened\r\n       */\n\n      this.internalShow = false;\n      /**\r\n       * Contains relevant datawindow information:\r\n       * METADATA, COLUMN_TYPES, COMPUTED_FIELDS, ROWS, COLUMN_NAMES;\r\n       */\n\n      this.dataManager = {};\n      /**\r\n       * Internal opened of drop down data window component\r\n       * Handle the display value for the validation error\r\n       * dialog.\r\n       */\n\n      this.internalOpened = false;\n      /**\r\n       * Avoid popup close of drop down data window component\r\n       */\n\n      this.avoidPopupClose = false; // scrollFlag is used to determine when the internalDataManager is moving, and prevents popUpClose\n\n      this.scrollFlag = undefined;\n      this.rows = -1;\n      this.filterString = '';\n      this.invalidValue = false;\n      this.wasClicked = false;\n      this.onBlurAction = false;\n      this.deleteFilterAction = false;\n      /**\r\n       * Save the last filter option of base data manager base component\r\n       */\n\n      this.lastFilter = '';\n    }\n\n  }\n\n  DropDownDataWindowBaseComponent.ɵfac = /* @__PURE__ */function () {\n    let ɵDropDownDataWindowBaseComponent_BaseFactory;\n    return function DropDownDataWindowBaseComponent_Factory(t) {\n      return (ɵDropDownDataWindowBaseComponent_BaseFactory || (ɵDropDownDataWindowBaseComponent_BaseFactory = i0.ɵɵgetInheritedFactory(DropDownDataWindowBaseComponent)))(t || DropDownDataWindowBaseComponent);\n    };\n  }();\n\n  DropDownDataWindowBaseComponent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: DropDownDataWindowBaseComponent,\n    viewQuery: function DropDownDataWindowBaseComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c39, 5);\n        i0.ɵɵviewQuery(_c40, 5, ElementRef);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dwcontainer = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.comboRef = _t.first);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature]\n  });\n  return DropDownDataWindowBaseComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nclass Expressions {\n  /**\r\n   * Returns valid date string by using the current or specified locale.\r\n   * @param value String date\r\n   */\n  getDate(value) {\n    const date = Utils.stringToDate(value);\n    return date.toLocaleDateString();\n  }\n  /**\r\n   * Returns a date converted to a string using Universal Coordinated Time (UTC)\r\n   */\n\n\n  getToday() {\n    const date = new Date();\n    return `${date.toUTCString()}`;\n  }\n  /**\r\n   * Returns valid dateTime string by using the current or specified locale.\r\n   * @param value String date\r\n   */\n\n\n  getDateTime(value) {\n    const date = Utils.stringToDate(value);\n    return `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;\n  }\n  /**\r\n   * Returns the day-of-the-month, using local time.\r\n   * @param value String date\r\n   */\n\n\n  getDay(value) {\n    const date = Utils.stringToDate(value);\n    return `${date.getDate()}`;\n  }\n  /**\r\n   * Returns the day name\r\n   * @param value String date\r\n   */\n\n\n  getDayName(value) {\n    const currentDate = Utils.stringToDate(value);\n    const dayOfWeek = currentDate ? currentDate.getDay() : null;\n    return `${isNaN(dayOfWeek) ? null : ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][dayOfWeek]}`;\n  }\n  /**\r\n   * Returns the month, using local time.\r\n   * @param value String date\r\n   */\n\n\n  getMonth(value) {\n    const date = Utils.stringToDate(value);\n    return `${date.getMonth() + 1}`;\n  }\n  /**\r\n   * Returnsa valid month name\r\n   * @param value String date\r\n   */\n\n\n  getMonthName(value) {\n    const month = Utils.stringToDate(value).getMonth();\n    return `${isNaN(month) ? null : ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'][month]}`;\n  }\n  /**\r\n   * Return the year, using local time\r\n   * @param value String date\r\n   */\n\n\n  getYear(value) {\n    const date = Utils.stringToDate(value);\n    return `${date.getFullYear()}`;\n  }\n  /**\r\n   * Returns Current local Date\r\n   */\n\n\n  getNow() {\n    const date = new Date();\n    return `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;\n  }\n  /**\r\n   * Returns  a valid time format\r\n   * @param value String date\r\n   */\n\n\n  getTime(value) {\n    const date = Utils.stringToDate(value);\n    return `${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\n  }\n  /**\r\n   * Returns days between two dates\r\n   * @param date01 Date  parameter\r\n   * @param date02 Date  parameter\r\n   */\n\n\n  daysAfter(date01, date02) {\n    const date1 = Utils.stringToDate(date01);\n    const date2 = Utils.stringToDate(date02);\n    const timeDiff = Math.abs(date2.getTime() - date1.getTime());\n    return Math.ceil(timeDiff / (1000 * 3600 * 24));\n  }\n  /**\r\n   * Returns a valid separated string\r\n   * @param character Character value\r\n   * @param len numeric length\r\n   */\n\n\n  charFill(character, len) {\n    return new Array(len + 1).join(character);\n  }\n\n  wordCapitalize(str) {\n    return str.replace(/\\w\\S*/g, function (txt) {\n      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    });\n  }\n  /**\r\n   * Returns a boolean value if parameter is valid date.\r\n   * @param value string value\r\n   */\n\n\n  isDate(value) {\n    return value instanceof Date || value.toString().indexOf(':') !== -1;\n  }\n\n  pbReplace(string1, start, n, string2) {\n    const preStr = string1.substring(0, start);\n    const postStr = string1.substring(start + n, string1.length);\n    return preStr + string2 + postStr;\n  }\n\n  processIfResult(value) {\n    if (typeof value !== 'string' && typeof value !== 'number') {\n      return null;\n    } else {\n      return value;\n    }\n  }\n  /**\r\n   * returns the sum of val1 and val2\r\n   * @param val1 Value 1\r\n   * @param val2 Value 2\r\n   */\n\n\n  plus(val1, val2) {\n    if (val1 != null && val2 != null) {\n      return val1 + val2;\n    }\n\n    return 'null';\n  }\n\n}\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nclass ComputedPropertyHelper {\n  constructor() {\n    this.ComputedInformation = null;\n    this.UtilityFunctions = null;\n    this.Expressions = null;\n    this.CurrentRow = null;\n    this.ComputedOutOfDetail = null;\n  }\n  /**\r\n   * Custom function mapping\r\n   */\n\n\n  getCustomFunctionMapping() {\n    const expressions = new Expressions();\n    return {\n      abs: Math.abs,\n      parseFloat,\n      parseLong: parseInt,\n      parseInt,\n      parseDec: parseFloat,\n      date: expressions.getDate,\n      today: expressions.getToday,\n      dateTime: expressions.getDateTime,\n      day: expressions.getDay,\n      dayName: expressions.getDayName,\n      month: expressions.getMonth,\n      year: expressions.getYear,\n      now: expressions.getNow,\n      time: expressions.getTime,\n      daysAfter: expressions.daysAfter,\n      charFill: expressions.charFill,\n      wordCapitalize: expressions.wordCapitalize,\n      isDate: expressions.isDate,\n      pbReplace: expressions.pbReplace,\n      processIfResult: expressions.processIfResult,\n      plus: expressions.plus\n    };\n  }\n  /**\r\n   * Returns whether value has expression\r\n   * @param computedInformation Current computed information\r\n   * @param controlName Control name value\r\n   */\n\n\n  valueHasExpression(computedInformation, controlName) {\n    return computedInformation && computedInformation.hasOwnProperty(controlName) && computedInformation[controlName].hasOwnProperty('expression');\n  }\n  /**\r\n   * get the value for the column from the bundle or the expression\r\n   */\n\n\n  getComputedControlValue(computedInfo, currentRow, computedOutOfDetail, controlName, utilityFunctions, expressions) {\n    let value = null;\n    const controNameWF = `${controlName}WF`;\n    /* c8 ignore else*/\n\n    if (currentRow) {\n      const comptd = this.getRowComputed(currentRow, 0);\n      value = this.getValueFromRow(comptd, value, controNameWF, controlName, computedOutOfDetail);\n      value = this.ValueFromExpression(value, computedInfo, controlName, utilityFunctions, expressions, currentRow);\n      value = this.parseValue(value, computedInfo, currentRow, controlName);\n      return value;\n    } else {\n      // TODO: There are two case:\n      // 1. Header or Footer does not have any row, because the total items from the bundle is 0.\n      // (By default, the header uses the row #0 and the footer use the lastrow to get the data)\n      // 2. The bundle is not processed yet, but the dw-computed is already render, so when try to get the data, is not available.\n      value = this.getComputeOutOfDetail(computedOutOfDetail, controlName);\n      value = this.ValueFromExpression(value, computedInfo, controlName, utilityFunctions, expressions, currentRow);\n      return value;\n    }\n  }\n  /**\r\n   * Get the value from computedOutOfDetail\r\n   * @param computedOutOfDetail Information about computed out of detail band\r\n   * @param name column name\r\n   */\n\n\n  getComputeOutOfDetail(computedOutOfDetail, name) {\n    return computedOutOfDetail != null && computedOutOfDetail[0].computed != null && computedOutOfDetail[0].computed[name] != null ? computedOutOfDetail[0].computed[name] : null;\n  }\n  /**\r\n   * Determines whether valid computed value is not null and not undefined.\r\n   * @param comptd Computed object.\r\n   * @param controlName Current column name.\r\n   * @returns true if valid computed value is not null and not undefined.\r\n   */\n\n\n  isValidComputedValue(comptd, controlName) {\n    return comptd[controlName] !== undefined && comptd[controlName] !== null;\n  }\n  /**\r\n   * Gets sparse information for the computedField\r\n   * @param currentRow row to be evaluated\r\n   * @param controlName name of the control\r\n   */\n\n\n  getSparseValue(currentRow, controlName, dataManagerContext) {\n    const controNameSparse = `${controlName}SPARSE`;\n    const comptd = this.getRowComputed(currentRow, 0);\n    return comptd && comptd[controNameSparse] ? comptd[controNameSparse] === 'true' || dataManagerContext.pagination.visiblePageStart === dataManagerContext.rowIndex : true;\n  }\n  /**\r\n   * Returns the type of the computed expression\r\n   * @param {any} computedInformation computed information\r\n   * @param {any} currentRow row to be evaluated\r\n   * @param {any} controlName name of the control\r\n   * @param {any} utilityFunctions functions\r\n   * @param {any} expressions expressions to evaluate\r\n   */\n\n\n  getComputedControlType(computedInformation, currentRow, controlName) {\n    if (this.valueHasExpression(computedInformation, controlName)) {\n      try {\n        return computedInformation[controlName]['resultingPbType'];\n      } catch (e) {\n        WMLogger.instance().error(e.message);\n        return null;\n      }\n    } else {\n      return computedInformation && computedInformation[controlName] ? computedInformation[controlName]['resultingPbType'] : null;\n    }\n  }\n\n  getComputedValue(controlName) {\n    return this.getComputedControlValue(this.ComputedInformation, this.CurrentRow, this.ComputedOutOfDetail, controlName, this.UtilityFunctions, this.Expressions);\n  }\n  /**\r\n   * pases a computed value\r\n   * @param {any} value data\r\n   * @param {string} type type of the data\r\n   * @returns { any }\r\n   */\n\n\n  parseComputeValue(value, type) {\n    return type === 'number' && value !== '' ? Number(value) : value;\n  }\n  /**\r\n   * Returns computed section of row\r\n   * @param {any} row Row\r\n   * @param {number} index Index\r\n   * @returns { any }\r\n   */\n\n\n  getRowComputed(row, index) {\n    return row && row[index] && row[index].computed ? row[index] && row[index].computed : null;\n  }\n  /**\r\n   * validate if the row has expression to get the value\r\n   */\n\n\n  hasExpression(value, computedInfo, controlName, utilityFunctions, expressions) {\n    return value === null && this.valueHasExpression(computedInfo, controlName) && utilityFunctions && expressions;\n  }\n  /**\r\n   * validate if the value comes from the expression\r\n   * @param value value to display\r\n   * @param computedInfo data for the row\r\n   * @param controlName name of the control's column\r\n   * @param utilityFunctions supported functions for the expressions\r\n   * @param expressions expression for the row\r\n   * @param currentRow the current row to be evaluated\r\n   */\n\n\n  ValueFromExpression(value, computedInfo, controlName, utilityFunctions, expressions, currentRow) {\n    if (this.hasExpression(value, computedInfo, controlName, utilityFunctions, expressions)) {\n      value = this.getValueFromExpression(computedInfo, utilityFunctions, expressions, currentRow, value, controlName);\n    }\n\n    return value;\n  }\n  /**\r\n   * try to get the value from the expression for the row\r\n   * @param computedInfo data for the row\r\n   * @param utilityFunctions supported functions for the expressions\r\n   * @param expressions expression for the row\r\n   * @param currentRow the current row to be evaluated\r\n   * @param value current value to display\r\n   * @param controlName name of the control's column\r\n   */\n\n\n  getValueFromExpression(computedInfo, utilityFunctions, expressions, currentRow, value, controlName) {\n    try {\n      this.ComputedInformation = computedInfo;\n      this.UtilityFunctions = utilityFunctions;\n      this.Expressions = expressions;\n      this.CurrentRow = currentRow; // tslint:disable-next-line:no-eval\n\n      value = eval(computedInfo[controlName]['expression'].replace('getComputedValue', 'this.getComputedValue')); // if some part of the expression returns null, in PB the string becomes empty\n\n      value = typeof value === 'string' && value.includes('null') ? '' : value;\n      return value;\n    } catch (e) {\n      WMLogger.instance().debug(e.message);\n      return null;\n    }\n  }\n\n  getValueFromRow(comptd, value, controNameWF, controlName, computedOutOfDetail) {\n    if (comptd) {\n      value = this.isValidComputedValue(comptd, controNameWF) ? comptd[controNameWF] : this.isValidComputedValue(comptd, controlName) ? comptd[controlName] : this.getComputeOutOfDetail(computedOutOfDetail, controlName) != null ? this.getComputeOutOfDetail(computedOutOfDetail, controlName) : null;\n    }\n\n    return value;\n  }\n  /**\r\n   * Parse the value for the right type if the value exist\r\n   */\n\n\n  parseValue(value, computedInfo, currentRow, controlName) {\n    if (value !== null) {\n      const type = this.getComputedControlType(computedInfo, currentRow, controlName);\n      value = this.parseComputeValue(value, type);\n    }\n\n    return value;\n  }\n\n}\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nvar columnIndex = /*#__PURE__*/(() => {\n  (function (columnIndex) {\n    columnIndex[columnIndex[\"notFoundIndex\"] = -1] = \"notFoundIndex\";\n    columnIndex[columnIndex[\"computedIndex\"] = -2] = \"computedIndex\";\n  })(columnIndex || (columnIndex = {}));\n\n  return columnIndex;\n})();\nlet DropDownDataWindowComponent = /*#__PURE__*/(() => {\n  class DropDownDataWindowComponent extends DropDownDataWindowBaseComponent {\n    /* c8 ignore start */\n    constructor(changeDetector, dminteraction, maskFormat2, dataServiceB, webMapService, renderer2, focusService, lengthConverter, element, emitter, resizeDataManagerService, dataMTSequenceService, buttonsService, popupService) {\n      super(changeDetector, maskFormat2, renderer2, element, lengthConverter, emitter, dataMTSequenceService);\n      this.changeDetector = changeDetector;\n      this.dminteraction = dminteraction;\n      this.maskFormat2 = maskFormat2;\n      this.dataServiceB = dataServiceB;\n      this.webMapService = webMapService;\n      this.renderer2 = renderer2;\n      this.focusService = focusService;\n      this.element = element;\n      this.emitter = emitter;\n      this.resizeDataManagerService = resizeDataManagerService;\n      this.dataMTSequenceService = dataMTSequenceService;\n      this.buttonsService = buttonsService;\n      this.popupService = popupService;\n      /* c8 ignore stop*/\n\n      this.componentCreated = new EventEmitter();\n      /**\r\n       * Row movement flag of drop down data window component.\r\n       */\n\n      this.rowMovement = false; // validates if a row is being selected\n\n      this.arrowValueSelectedFlag = false; // flag to hide popup when necessary\n\n      this.hiddenPopUp = false; // Flag to ensure a list object has been selected, and needs to be processed.\n\n      this.newItemSelected = false; // Tab event used as flag to trigger tab mechanism when necessary\n\n      this.selectionAndTabEvent = null; // temporary modeldata value to be used on shortcuts.\n\n      this.shortcutModelData = null; // Flag to ensure a list object has been filtered before.\n\n      this.hasBeenFiltered = false; // Updates this control when internalDatamanagerInstance finish synchronization\n\n      this.webMapService.core.getEvent().subscribe('syncUpdate', data => {\n        this.ngDoCheck();\n      });\n    }\n    /* c8 ignore start */\n\n\n    ngOnInit() {\n      super.ngOnInit();\n      this.componentCreated.emit(this);\n      this.style = new PBStyle();\n      this.clickedSubscription = this.dminteraction.clicked.subscribe(clicked => {\n        this.newItemSelected = true;\n        this.arrowValueSelectedFlag = false;\n        this.valueClicked = this.retrieveValueClicked(clicked['row'], clicked['datamanagerContext']);\n        this.currentSelectedRow = clicked['rowIndex'];\n\n        if (clicked['autocomplete']) {\n          this.autocomplete();\n        }\n\n        this.currentSelectedIndex = clicked['rowIndex'];\n        this.combobox.focus();\n        this.detectChanges();\n      });\n      this.datamanagerSubscription = this.dminteraction.datamanager.subscribe(datamanager => {\n        this.dataManager = datamanager;\n      }); // Gets Internal DataManager Instance. Is triggered when DataManager initialize\n\n      this.internalDataManagerSubscription = this.dminteraction.internalDataManager.subscribe(dataManagerInstance => {\n        this.dataManagerDropDown = dataManagerInstance;\n      });\n      this.scrollSubscription = this.dminteraction.scroll.subscribe(scroll => {\n        this.scrollFlag = scroll;\n      });\n      this.displayedRowsSubscription = this.dminteraction.rows.subscribe(rows => {\n        this.rows = rows;\n        this.detectChanges();\n      });\n      this.maskFormat2.initFormatArrays(this.format, this.validateColumn(this.columnId), `${this.columnId}`);\n      this.modelData = this.logicValue;\n      this.applyFormatTo(this.modelData, this.validateColumn(this.columnId), this.validateLengthColumn(this.columnId));\n\n      if (this.model.DddwData) {\n        this.focusManagerService = new FocusManagerService();\n        this.messageCommandService = new MessageCommandService();\n        this.dataManagerDropDown = new FreeformComponent(this.changeDetector, this.renderer2, this.element, this.emitter, this.dminteraction, this.webMapService, this.dataServiceB, this.focusManagerService, this.messageCommandService, this.lengthConverter, this.resizeDataManagerService, this.dataMTSequenceService, this.buttonsService);\n        this.dataManagerDropDown.model = this.model.DddwData;\n        this.dataManagerDropDown.currentPage = [];\n\n        if (!this.hasDDDWDisplayValues()) {\n          this.dataManagerDropDown.getPage(1, 1, null, this.createFilter());\n        }\n\n        this.model.DddwLines = this.validatedddwlines();\n        this.model.DddwData.DddwLines = this.model.DddwLines;\n      }\n    }\n    /* c8 ignore stop */\n\n\n    ngOnDestroy() {\n      this.clickedSubscription.unsubscribe();\n      this.datamanagerSubscription.unsubscribe();\n      this.scrollSubscription.unsubscribe();\n      this.displayedRowsSubscription.unsubscribe();\n      this.internalDataManagerSubscription.unsubscribe();\n\n      if (this.clickListener) {\n        this.clickListener();\n      }\n    }\n\n    ngAfterViewInit() {\n      super.ngAfterViewInit();\n      const input = this.element.nativeElement.querySelector('.k-input');\n\n      if (input) {\n        this.renderer2.setAttribute(input, 'maxlength', String(this.limit));\n      }\n\n      this.removePadding();\n    }\n\n    ngAfterContentChecked() {\n      const innerElement = this.isInnerSpanPresent();\n\n      if (innerElement) {\n        // sets border to the span within kendo-combobox\n        this.setStyleProperty('border', this.borderStyle, innerElement);\n        const visualColor = this.backMode === 1 ? 'transparent' : this.backColorFromVisuals; // sets background color to the span within the kendo control\n\n        this.setStyleProperty('background-color', visualColor, innerElement);\n        this.setStyleProperty('background-image', 'none', innerElement);\n        this.setStyleProperty('color', this.textColor, innerElement);\n      }\n    }\n    /**\r\n     * Override Should apply style\r\n     */\n\n\n    shouldApplyStyle(style, property, element) {\n      return false;\n    }\n    /**\r\n     * Returns DddwLines if is sended from dropdownDataControl\r\n     */\n\n\n    get dddwlines() {\n      return this.model.DddwLines;\n    }\n    /**\r\n     * Returns PopUp width\r\n     */\n\n\n    get dddwpercentwidth() {\n      const comb = this.element.nativeElement.querySelector('.cmb');\n\n      if (comb) {\n        const style = getComputedStyle(comb);\n        const width = style.width.includes('px') ? style.width.substring(0, style.width.length - 2) : '0';\n        const percentWidth = this.model.DddwPercentWidth < 1 ? 100 : this.model.DddwPercentWidth;\n        const pixelWidth = Number(width) * (percentWidth / 100);\n        this.model.DddwPixelWidth = pixelWidth;\n        return pixelWidth;\n      }\n\n      return null;\n    }\n    /**\r\n     * Returns a string with logic value column\r\n     */\n\n\n    get dddwDataColumn() {\n      return this.model.DddwDataColumn;\n    }\n    /**\r\n     * Returns a string with visual display column\r\n     */\n\n\n    get dddwDisplayColumn() {\n      return this.model.DddwDisplayColumn;\n    }\n    /**\r\n     * Match correct dddwDisplayColumn and returns it\r\n     * we need to add a + 1 to valuePosition and displayPosition because valueClicked array start showing data columns on index 1\r\n     */\n\n    /* c8 ignore start */\n\n\n    get value() {\n      if (this.valueClicked) {\n        return this.valueClicked;\n      } else {\n        if (this.hasInitialValue()) {\n          const dddwDisplayCurrentRow = this.dataManagerContext.row[0].dddwDisplay[this.columnId]['currentRow'];\n\n          if (dddwDisplayCurrentRow) {\n            this.currentSelectedRow = dddwDisplayCurrentRow;\n          }\n\n          return this.dataManagerContext.row[0].dddwDisplay[this.columnId][this.name];\n        } else if (this.dataManagerDropDown && this.dataManagerDropDown.currentPage) {\n          const descriptionValue = this.getDescriptionValue(this.logicValue);\n\n          if (!descriptionValue) {\n            this.currentSelectedRow = null;\n          }\n\n          return descriptionValue;\n        } else {\n          return this.modelData;\n        }\n      }\n    }\n    /* c8 ignore stop */\n\n    /**\r\n     * Sets display value when is editable\r\n     */\n\n\n    set value(value) {\n      if (this.allowEdit && !this.newItemSelected && !this.arrowValueSelectedFlag && value != null) {\n        this.disableFormatting = false;\n        this.modelData = value;\n        this.valueClicked = value;\n        this.applyFormat();\n        this.logicValue = Utils.isEmptyStringNull(this.modelData, this.nilIsNull, this.validateColumn(this.columnId)) ? null : this.modelData; // random values should clear currentRow\n\n        this.clearCurrentRow(); // edit change just need to be triggered when there is not a list item selected and when text is fully typed\n\n        /* c8 ignore next 3 */\n\n        if (this.shortcutModelData != null) {\n          this.itemChangeHandler(value);\n        } // there are some scenarios where kendoDropdown assign an un expected null value. when this happens input get clear unexpectedly\n\n      } else {\n        /* c8 ignore next 3 */\n        if (this.allowEdit && value === null) {\n          this.focusableElement.writeValue(this.value);\n        }\n      }\n    } // clears internal dataWindowIndex\n\n\n    clearCurrentRow() {\n      this.dataManagerDropDown.currentRow = 0;\n    }\n    /**\r\n     * Verifies if value typed match with any value from internal data.\r\n     */\n\n\n    filterNotFound() {\n      return this.dataManagerDropDown && this.dataManagerDropDown.currentPage != null && this.dataManagerDropDown.currentPage.length === 0;\n    }\n    /**\r\n     * @description\r\n     * Returns the parent DOM element that is used to calculate percentages.\r\n     * @returns { Element }\r\n     */\n\n\n    get parentElement() {\n      return this.element.nativeElement.offsetParent;\n    }\n    /**\r\n     * Gets whether is container\r\n     */\n\n\n    get isContainer() {\n      return false;\n    }\n    /**\r\n     * Gets show value\r\n     */\n\n\n    get show() {\n      return this.internalShow;\n    }\n    /**\r\n     * Sets show\r\n     */\n\n\n    set show(value) {\n      this.internalShow = value;\n    }\n    /**\r\n     * Override. Gets edit required\r\n     * The column must be filled prior leaving it\r\n     */\n\n\n    get editRequired() {\n      return Utils.isDefaultValue(this.model.Required, false);\n    }\n    /**\r\n     * Override\r\n     * Applies focus to inner input. If DDDW is AllowEdit mode the caret of\r\n     * cursor is positioned at the beginning of the input.\r\n     */\n\n\n    applyFocus() {\n      this.moveCursorCaret();\n      super.applyFocus();\n      /* c8 ignore next 3 */\n\n      if (this.value == null) {\n        this.clearCurrentRow();\n      }\n    }\n    /**\r\n     * Moves cursor caret at the beginning\r\n     */\n\n\n    moveCursorCaret() {\n      /* c8 ignore else */\n      if (this.allowEdit && this.focusableElement && this.comboRef) {\n        const editable = this.comboRef.nativeElement.querySelector('input');\n        /* c8 ignore else */\n\n        if (editable) {\n          editable.setSelectionRange(0, 0);\n        }\n      }\n    }\n    /**\r\n     * Sets a style property using renderer2\r\n     * @param propertyName: name of the property being set\r\n     * @param propertyValue\r\n     */\n\n\n    setStyleProperty(propertyName, propertyValue, innerElement) {\n      /* c8 ignore else */\n      if (innerElement) {\n        this.renderer2.setStyle(innerElement, propertyName, propertyValue);\n      }\n    }\n    /**\r\n     *  @description\r\n     * Returns true if the span within dwcontainer's descendants\r\n     * @returns boolean\r\n     */\n\n\n    isInnerSpanPresent() {\n      return this.dwcontainer && this.dwcontainer.nativeElement && this.dwcontainer.nativeElement['children'] && this.dwcontainer.nativeElement['children'][1] && this.dwcontainer.nativeElement['children'][1].firstElementChild;\n    }\n    /**\r\n     * Clicks column\r\n     * Overrides original behavior to avoid\r\n     * sending clicks after the control gets focused\r\n     * @param event the original event object\r\n     */\n\n\n    clickColumn(event) {\n      if (!this.wasClicked && !this.preventErrorPropagation(event)) {\n        super.clickColumn(event);\n        this.wasClicked = true;\n      }\n\n      Utils.preventPropagation(event);\n    }\n    /**\r\n     * Creates the filter for a getPage\r\n     * @returns { string }\r\n     */\n\n\n    createFilter() {\n      return `${this.dddwDataColumn}='${this.logicValue}'`;\n    }\n    /**\r\n     * Handles filter action over dropdown\r\n     * @param value the current value to filter\r\n     */\n\n\n    handleFilter(value) {\n      if (this.allowEdit) {\n        this.newItemSelected = this.combobox['searchbar'].value.toString() === value.toString() ? false : this.newItemSelected;\n      }\n\n      if (this.deleteFilterAction) {\n        this.deleteFilterAction = false;\n        return;\n      }\n\n      this.show = true;\n      this.togglePopup(this.show, this.popupTemplate, this.anchorElement);\n\n      if (this.filterTimeout) {\n        // Avoid triggering to many filter events\n        clearTimeout(this.filterTimeout);\n      }\n\n      this.filterTimeout = setTimeout(() => {\n        this.applyFilterOnDataWindow(value);\n\n        if (this.allowEdit) {\n          this.shortcutModelData = value;\n        }\n      }, 300);\n      this.isEdited = true;\n    }\n    /**\r\n     * Handles filtering over the keypress event for\r\n     * dropdownlistboxes.\r\n     * @param event the current keyboard event\r\n     */\n\n\n    keypressFilter(event) {\n      /* c8 ignore else */\n      if (event.key !== 'Enter') {\n        this.filterString = `${this.filterString}${event.key}`;\n        this.handleFilter(this.filterString);\n      }\n    }\n    /**\r\n     * Moves selection handler\r\n     * Handle the arrow keys events to move the current selected item in the\r\n     * data window.\r\n     * @param event\r\n     */\n\n\n    moveSelectionHandler(event) {\n      /* c8 ignore else */\n      if (this.dataManagerDropDown == null) {\n        return;\n      }\n\n      switch (event.key) {\n        case 'ArrowUp':\n        case 'ArrowDown':\n          /* c8 ignore else */\n          if (!this.show) {\n            this.hiddenPopUp = true; // To open the popup and load the data if the arrows was pressed.\n\n            this.onToggle(event);\n            Utils.preventPropagation(event);\n          }\n\n          this.rowMovement = true;\n          this.moveDDDWServiceCall(event);\n          /* c8 ignore next 3 */\n\n          if (this.allowEdit) {\n            // updates searchbar with selected value\n            this.focusableElement.searchbar.writeInputValue(this.valueClicked);\n            this.highlightInputValueAfterArrowMovements();\n          }\n\n          this.focusableElement.value = this.valueClicked;\n          this.focusableElement.focus();\n          break;\n\n        case 'Tab':\n          this.rowMovement = false;\n\n          if (this.show && (this.arrowValueSelectedFlag || this.lastFilter && !this.filterNotFound())) {\n            this.arrowValueSelectedFlag = false;\n            this.detectChanges(); // Store the event to be triggered later after itemChange\n\n            this.selectionAndTabEvent = event;\n            this.moveDDDWServiceCall(event);\n            Utils.preventPropagation(event);\n            break;\n          }\n\n          this.tabKeyHandler(event);\n          break;\n\n        case 'Enter':\n          /* c8 ignore else */\n          if (this.show && this.validatedddwlines() > 0) {\n            this.moveDDDWServiceCall(event);\n          }\n\n          break;\n\n        default:\n          // Do Nothing\n          break;\n      }\n    }\n    /**\r\n     * Highlights input value after arrow movements\r\n     */\n\n\n    highlightInputValueAfterArrowMovements() {\n      if (this.allowEdit && this.valueClicked != null) {\n        setTimeout(() => {\n          this.focusableElement.searchbar.input.nativeElement.setSelectionRange(0, this.valueClicked.length);\n        });\n      }\n    }\n    /**\r\n     * Filters delete\r\n     * Remove the last entered character to the filter string and applies\r\n     * the filter again to retrieve the desired results\r\n     * @param event the current keyboard event\r\n     */\n\n\n    filterDelete(event) {\n      this.filterString = this.filterString.slice(0, -1);\n      this.deleteFilterAction = true;\n      this.hasBeenFiltered = false;\n    }\n    /**\r\n     * Applys filter on data window\r\n     * @param value the value to apply filter;\r\n     */\n\n\n    applyFilterOnDataWindow(value) {\n      const filter = `${this.dddwDisplayColumn} like '${value}%'`;\n      const filterObject = {\n        filter,\n        iterate: !this.allowEdit && this.lastFilter.toUpperCase() === value.toUpperCase(),\n        editable: this.allowEdit\n      };\n      this.dminteraction.applyFilter(filterObject);\n      this.lastFilter = value;\n      this.filterString = '';\n      this.hasBeenFiltered = true;\n    }\n    /**\r\n     * Sometimes comboBox and SearchBar are not synchronized, this updates SearchBar input\r\n     * @param value to be updated on SearchBar\r\n     */\n\n\n    updateSearchbarValue(value) {\n      /* c8 ignore else */\n      if (this.allowEdit && this.combobox && this.combobox['searchbar']) {\n        this.combobox['searchbar'].writeInputValue(value);\n      }\n    }\n    /**\r\n     * Use to handle popUp open and close\r\n     */\n\n\n    onToggle(event) {\n      this.avoidPopupClose = false;\n      this.filterString = '';\n      this.lastFilter = '';\n      this.arrowValueSelectedFlag = false;\n\n      if (this.disabled) {\n        this.show = false;\n        return;\n      }\n\n      if (this.show && this.newItemSelected) {\n        const itemChangeEvent = {\n          ddwtriggerNCCVC: true\n        };\n        const tabKeyFlag = this.selectionAndTabEvent;\n        this.itemchangeDddw(itemChangeEvent);\n        Utils.preventPropagation(event); // when tab is pressed and a different row is selected whit arrow mechanism, is necessary to wait until control validates input\n        // and then trigger tabkey handler.\n\n        if (tabKeyFlag) {\n          this.tabKeyHandler(this.selectionAndTabEvent);\n        }\n\n        if (this.focusService && this.focusService.isThisComponentTheActiveComponent(this) && !this.onBlurAction) {\n          this.combobox.focus();\n        }\n      }\n\n      this.show = this.scrollFlag != null ? true : !this.show;\n      this.togglePopup(this.show, this.popupTemplate, this.anchorElement); // Select the previous selected item to show it as selected in the popup\n\n      /* c8 ignore next 4 */\n\n      if (this.show && this.currentSelectedRow) {\n        if (!this.hasBeenFiltered) {\n          this.model.DddwData.CurrentRow = this.currentSelectedRow;\n          this.model.DddwData.DisplayedRow = this.currentSelectedRow;\n          this.dataManagerDropDown.currentRow = this.currentSelectedRow;\n        }\n      }\n\n      this.model.DddwData.DddwLines = this.validatedddwlines();\n    }\n    /**\r\n     * Creates or destroy an instance of Kendo Popup component\r\n     * using the Kendo popup service\r\n     * @param show the current action\r\n     * @param template the popup template\r\n     * @param anchor the anchoring element\r\n     */\n\n\n    togglePopup(show, template, anchor) {\n      if (this.popupRef && !show) {\n        this.popupRef.close();\n        this.popupRef = null;\n      } else if (show && this.popupRef == null) {\n        this.popupRef = this.popupService.open({\n          anchor: anchor,\n          content: template\n        });\n      }\n    }\n    /**\r\n     * Focus handler\r\n     * Clears the wasclicked flag\r\n     * to enable click event to be triggered\r\n     * @param event the current event object\r\n     */\n\n\n    focusIn(event) {\n      super.focusIn(event); // selectionAndTabEvent gets clean when control takes focus to prevent nccv callback focus again when tab.\n\n      this.selectionAndTabEvent = null;\n      this.scrollFlag = undefined;\n      this.wasClicked = false;\n      this.filterString = '';\n      this.lastFilter = '';\n    }\n    /**\r\n     * Triggers ItemChangeEvent\r\n     */\n\n\n    itemchangeDddw(event) {\n      this.newItemSelected = false;\n      this.isEdited = false;\n      const text = [this.modelData, this.logicValue];\n      const itemChangeEvent = {\n        text,\n        value: this.logicValue,\n        ddwtriggerNCCVC: event.ddwtriggerNCCVC\n      };\n      this.selectionAndTabEvent = event;\n      this.selectionChangeHandler(itemChangeEvent);\n      this.clearddwDisplay();\n      this.moveCursorCaret();\n    }\n    /**\r\n     * Fires the EditChange event if it is binded.\r\n     * @param event the current keyboard event\r\n     */\n\n\n    itemChangeHandler(event) {\n      if (this.newItemSelected && this.show) {\n        this.onToggle(event);\n      } else if (this.allowEdit) {\n        const text = [this.modelData, this.logicValue];\n        const itemChangeEvent = {\n          text,\n          value: event\n        };\n        this.selectionChangeHandlerWithKeyPress(itemChangeEvent);\n        this.shortcutModelData = null;\n        this.clearddwDisplay();\n      }\n    }\n    /**\r\n     * Validate correct amount of lines in drop down.\r\n     */\n\n\n    validatedddwlines() {\n      return this.dddwlines && this.dddwlines > 0 ? this.dddwlines : 5;\n    }\n    /**\r\n     * Returns IndexOf the column\r\n     * @param {string} columnName stores dddwDisplayColumn or dddwDataColumn\r\n     */\n\n\n    indexOf(columnName) {\n      return this.isSimpleColumn(columnName, this.dataManager) ? this.dataManager.columnNames.indexOf(columnName) : this.isComputedColumn(columnName);\n    }\n    /**\r\n     * Returns whether a column is a simple column or not.\r\n     * @param {string} columnName The column name of the computed column to find\r\n     * @param {any} dataManager dataManager to evaluate\r\n     */\n\n\n    isSimpleColumn(columnName, dataManager) {\n      return dataManager.columnNames && dataManager.columnNames.indexOf(columnName) !== columnIndex.notFoundIndex;\n    }\n    /**\r\n     * Returns whether a column is computed or not.\r\n     * @param {string} columnName The column name of the computed column to find\r\n     */\n\n\n    isComputedColumn(columnName) {\n      if (this.dataManager.computedColumns) {\n        for (const cmptdcol in this.dataManager.computedColumns) {\n          /* c8 ignore else */\n          if (this.dataManager.computedColumns[cmptdcol] === columnName) {\n            return columnIndex.computedIndex;\n          }\n        }\n      }\n\n      return columnIndex.notFoundIndex;\n    }\n    /**\r\n     * Returns the value in the row for the column passed as parameter.\r\n     * @param {string} columnName The column name.\r\n     */\n\n\n    getValueFromRow(row, columnName, datamanagerContext) {\n      const index = this.indexOf(columnName);\n\n      if (index >= 0) {\n        return row[index + 1];\n      } else if (row[0].computed && row[0].computed[columnName]) {\n        // Related Item: 231525\n        return row[0].computed[columnName];\n      } else if (datamanagerContext && datamanagerContext.computedInformation && datamanagerContext.computedInformation[columnName]) {\n        const computedPropertyHelper = new ComputedPropertyHelper();\n        const expressions = new Expressions();\n        const utilityFunctions = computedPropertyHelper.getCustomFunctionMapping();\n        return computedPropertyHelper.getComputedControlValue(datamanagerContext.computedInformation, row, datamanagerContext.computedOutOfDetail, columnName, utilityFunctions, expressions);\n      }\n\n      return null;\n    }\n    /**\r\n     * Returns IndexOf a column in dddwData\r\n     * @param dddwData stores dddwDisplayColumn or dddwDataColumn\r\n     */\n\n\n    validateIndexOfDropDown(dddwData) {\n      if (this.dataManagerDropDown && this.dataManagerDropDown.myDataManager && this.dataManagerDropDown.myDataManager.columnNames) {\n        const index = this.dataManagerDropDown.myDataManager.columnNames.indexOf(dddwData);\n        return index !== -1 ? index : undefined;\n      }\n    }\n\n    retrieveValueClicked(value, datamanagerContext) {\n      datamanagerContext = datamanagerContext ? datamanagerContext : this.dataManagerDropDown.getCurrentSelectedRowContext(this.dataManagerDropDown.currentRow, this.dataManagerDropDown.visiblePageStart);\n      const displayData = this.getValueFromRow(value, this.dddwDisplayColumn, datamanagerContext);\n      const logicData = this.getValueFromRow(value, this.dddwDataColumn, datamanagerContext);\n      const displayType = this.getDisplayColumnType(this.dddwDisplayColumn, datamanagerContext);\n      const columnType = this.validateColumn(this.columnId);\n      const columnLength = this.validateLengthColumn(this.columnId);\n      const typeValidation = DataTypeValidator.validateType(logicData, columnType, this.nilIsNull, columnLength);\n\n      if (typeof typeValidation !== undefined && (typeValidation !== null || this.nilIsNull)) {\n        this.logicValue = typeValidation;\n        this.modelData = displayData;\n\n        if (displayType) {\n          this.applyFormatTo(displayData, displayType, columnLength);\n        }\n\n        return this.modelData;\n      } else {\n        return null;\n      }\n    }\n    /**\r\n     * Gets the type of the display column\r\n     * to set the appropiate format to the column\r\n     * @param dddwDisplayColumn: the current displayed column name\r\n     */\n\n\n    getDisplayColumnType(dddwDisplayColumn, dataManagerContext) {\n      const displayColumnIndex = this.indexOf(dddwDisplayColumn);\n\n      if (displayColumnIndex > -1 && dataManagerContext) {\n        return dataManagerContext.columnTypes[displayColumnIndex];\n      }\n\n      return undefined;\n    }\n    /**validateIndexOfDropDown\r\n     * Close pop up window after some DOM click.\r\n     */\n\n\n    onblur() {\n      this.scrollFlag = undefined;\n      this.removeOrApplyArrow(this.isValidTabSequence() && this.useAsBorder && !this.showList);\n\n      if (this.show && !this.avoidPopupClose && this.newItemSelected && this.allowEdit) {\n        this.itemchangeDddw({\n          ddwtriggerNCCVC: true\n        });\n      }\n\n      setTimeout(() => {\n        if (this.show && !this.avoidPopupClose) {\n          this.onToggle(null);\n          this.changeDetector.detectChanges();\n        }\n\n        this.onBlurAction = false;\n\n        if (this.arrowValueSelectedFlag) {\n          this.arrowValueSelectedFlag = false;\n        }\n\n        this.hiddenPopUp = false;\n      }, 100);\n    }\n    /**\r\n     * Pops up onfocus to avoid close popup when\r\n     * it receives the focus\r\n     */\n\n\n    popUpOnfocus() {\n      this.avoidPopupClose = true;\n    }\n    /**\r\n     * Call DDDW onblur function when popup leaves focus\r\n     */\n\n\n    popUpOnBlur() {\n      this.avoidPopupClose = false;\n      this.scrollFlag = undefined;\n      this.onblur();\n    }\n    /**\r\n     * Determines if current logic value is different from model data\r\n     * @returns true if logic value is different from model data\r\n     */\n\n\n    isLogicValueDifferentFromModelData() {\n      if (this.logicValue !== this.modelData) {\n        return true;\n      } else {\n        if (this.shortcutModelData && this.allowEdit) {\n          this.logicValue = this.modelData = Utils.isEmptyStringNull(this.shortcutModelData, this.nilIsNull, this.validateColumn(this.columnId)) ? null : this.shortcutModelData;\n          return true;\n        }\n\n        return false;\n      }\n    }\n    /**\r\n     * Returns descriptionValue of a column in dddwData\r\n     * @param {string} value valuekey to find its description\r\n     */\n\n\n    getDescriptionValue(value) {\n      const index = this.validateIndexOfDropDown(this.dddwDataColumn) + 1;\n      const ddwRow = this.dataManagerDropDown.currentPage.find(row => Utils.nullToString(row[index]) === Utils.nullToString(value));\n\n      if (ddwRow) {\n        return this.isSimpleColumn(this.dddwDisplayColumn, this.dataManagerDropDown.myDataManager) ? ddwRow[this.validateIndexOfDropDown(this.dddwDisplayColumn) + 1] : ddwRow[0].computed[this.dddwDisplayColumn];\n      } else {\n        return this.modelData || value;\n      }\n    }\n    /**\r\n     * Adds highlight style. If autoselect is true it also calls\r\n     * select() function the first time that column is clicked.\r\n     * If autoselect is false clears selection the first time that\r\n     * column is clicked.\r\n     */\n\n\n    addHighLight() {\n      /* c8 ignore else */\n      if (this.comboRef) {\n        const element = this.comboRef.nativeElement;\n        /* c8 ignore else */\n\n        if (element && !element.classList.contains(BaseControlBaseComponent.enableHighLightCssClass)) {\n          this.renderer.addClass(element, BaseControlBaseComponent.enableHighLightCssClass);\n          this.applyAutoSelect(element);\n        }\n      }\n    }\n    /**\r\n     * Removes highlight style. Is used by focus manager to\r\n     * remove highlight class when column loses focus.\r\n     */\n\n\n    removeHighLight() {\n      /* c8 ignore else */\n      if (this.comboRef) {\n        const element = this.comboRef.nativeElement;\n        /* c8 ignore else */\n\n        if (element) {\n          this.renderer.removeClass(element, BaseControlBaseComponent.enableHighLightCssClass);\n        }\n      }\n    }\n    /**\r\n     * Applys auto select to input element when DDDW\r\n     * is editable\r\n     */\n\n\n    applyAutoSelect(comboRef) {\n      if (this.allowEdit) {\n        const input = comboRef.querySelector('input');\n        /* c8 ignore else */\n\n        if (input) {\n          this.autoSelect && typeof input.select === 'function' ? setTimeout(() => {\n            if (document.activeElement === input) {\n              input.scrollLeft = 0;\n              return input.select();\n            }\n          }, 50) : input.selectionEnd = 0;\n        }\n      }\n    }\n    /**\r\n     * @override\r\n     * Prepares clear focus action before onblur execution.\r\n     * @param [data] Data sent by FocusManagerService.\r\n     */\n\n\n    prepareClearFocusAction(data) {\n      this.onBlurAction = true;\n    }\n    /**\r\n     * @description\r\n     * The 'classHandler' links css classes from parent and the gridDropdownClass if needed.\r\n     * @returns { string }\r\n     */\n\n\n    classHandler() {\n      return `${super.classHandler()} ${this.isInsideGrid()}`;\n    }\n    /**\r\n     * Returns class to apply fro dropdowns in grid\r\n     */\n\n\n    isInsideGrid() {\n      return !!this.isOnGrid ? 'gridDropdown' : '';\n    }\n    /**\r\n     * Applies detectChanges function and call ngAfterViewInit method to refresh\r\n     * the column values.\r\n     * @param data Data to be used in change detection.\r\n     */\n\n\n    columnDetectChanges(data) {\n      this.valueClicked = null;\n      this.loadValues();\n      this.modelData = this.logicValue;\n      this.applyFormatTo(this.modelData, this.validateColumn(this.columnId), this.validateLengthColumn(this.columnId));\n      super.columnDetectChanges(data);\n    }\n    /**\r\n     * Drops ddwkeyboard interaction handler\r\n     * Handle the keyboard interaction of popup\r\n     * when the freeform is displayed within a dropdownDW component\r\n     * @param event the current keyboard event\r\n     */\n\n\n    dropDDWKeyboardInteractionHandler(event) {\n      this.dataManagerDropDown.dropDDWKeyboardInteractionHandler(event);\n      this.hasBeenFiltered = true;\n    }\n\n    ngDoCheck() {\n      super.ngDoCheck(); // this validation is used to wait until dataManagerDropDown data fully load display rows value when arrowing\n\n      if (this.rowMovement && this.getInternalRowSelected()) {\n        /* c8 ignore else */\n        if (!this.dataManagerDropDown.isSynchronizing) {\n          const clickedRowData = this.getSelectedRowDataObject();\n          /* c8 ignore else */\n\n          if (clickedRowData['row']) {\n            this.valueClicked = this.retrieveValueClicked(clickedRowData['row'], clickedRowData['datamanagerContext']);\n            this.arrowValueSelectedFlag = true;\n            this.newItemSelected = true;\n            this.triggerArrowItemChangeDddwFunction();\n          }\n\n          this.rowMovement = false;\n          this.detectChanges();\n        }\n      }\n    }\n    /**\r\n     * Triggers itemchange when arrow down and when triggerArrowItemChangeDddw is true\r\n     */\n\n\n    triggerArrowItemChangeDddwFunction() {\n      if (this.rowMovementEventTimer) {\n        clearTimeout(this.rowMovementEventTimer);\n      }\n\n      this.rowMovementEventTimer = setTimeout(() => {\n        this.rowMovement = false;\n        const itemChangeEvent = {\n          ddwtriggerNCCVC: true\n        };\n        this.itemchangeDddw(itemChangeEvent);\n        this.highlightInputValueAfterArrowMovements();\n        this.newItemSelected = false;\n      }, 400);\n    }\n    /**\r\n     * Gets internal row selected\r\n     * @returns internal row selected\r\n     */\n\n\n    getInternalRowSelected() {\n      /* c8 ignore else */\n      if (this.dataManagerDropDown && this.dataManagerDropDown.currentVisibleRows) {\n        return this.dataManagerDropDown.currentVisibleRows[this.dataManagerDropDown.currentRow - this.dataManagerDropDown.visiblePageStart];\n      }\n    }\n    /**\r\n     * Gets selected row data object\r\n     * @returns selected row object\r\n     */\n\n\n    getSelectedRowDataObject() {\n      return {\n        row: this.getInternalRowSelected(),\n        rowIndex: this.dataManagerDropDown.lastSelectionChangedRow,\n        datamanagerContext: this.dataManagerDropDown.dataManagerContext\n      };\n    } // hides or shows the pop up\n\n\n    popUpHandler() {\n      return this.hiddenPopUp ? 'hiddenPopUp ' : 'showPopUp ';\n    }\n    /**\r\n     * Moves dddwservice call\r\n     * @param event the current keyboard event\r\n     */\n\n\n    moveDDDWServiceCall(event) {\n      this.dropDDWKeyboardInteractionHandler(event);\n      this.ngDoCheck(); // Avoid moving in the current DW when Arrow key was pressed over the popup\n\n      Utils.preventPropagation(event);\n    }\n    /**\r\n     * Validates item changes before send an update\r\n     * Verifies if the item contains a valid value if not\r\n     * notifies the datamanager by raising the itemError event\r\n     * @param event current javascript event object.\r\n     */\n\n\n    validateItemError(event) {\n      if (this.allowEdit) {\n        if (!(this.shortcutModelData == null || this.shortcutModelData === '')) {\n          this.modelData = this.shortcutModelData;\n        }\n\n        return this.validateItemErrorBase(event);\n      }\n\n      return false;\n    }\n    /**\r\n     * Autocompletes drop down data window component\r\n     * Should autocomplete the text in the dropdown\r\n     * whenever the user inputs a character that matchs\r\n     * the first character of a valid option and then\r\n     * leaves the control.\r\n     */\n\n\n    autocomplete() {\n      const originalTxt = this.combobox.text || '';\n      this.combobox.text = this.valueClicked;\n      this.detectChanges();\n      setTimeout(() => {\n        this.newItemSelected = true;\n\n        if (this.combobox['searchbar']) {\n          this.combobox['searchbar'].writeInputValue(this.valueClicked);\n          this.combobox['searchbar'].input.nativeElement.focus();\n          this.combobox['searchbar'].input.nativeElement.setSelectionRange(originalTxt.length, this.valueClicked.length);\n        } else {\n          this.focusableElement.focus();\n          this.detectChanges();\n        }\n      });\n    }\n\n  }\n\n  DropDownDataWindowComponent.ɵfac = function DropDownDataWindowComponent_Factory(t) {\n    return new (t || DropDownDataWindowComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(DmInteractionService), i0.ɵɵdirectiveInject(MaskFormatService), i0.ɵɵdirectiveInject(DMDataService), i0.ɵɵdirectiveInject(i1.WebMapService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(FocusManagerService), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(ResizeDataManagerService, 8), i0.ɵɵdirectiveInject(DataManagerTabSequenceService, 8), i0.ɵɵdirectiveInject(ButtonsService, 8), i0.ɵɵdirectiveInject(i3.PopupService));\n  };\n\n  DropDownDataWindowComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: DropDownDataWindowComponent,\n    selectors: [[\"wm-dw-dropdowndatawindow\"]],\n    viewQuery: function DropDownDataWindowComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c41, 5);\n        i0.ɵɵviewQuery(_c25, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.popupTemplate = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.anchorElement = _t.first);\n      }\n    },\n    outputs: {\n      componentCreated: \"componentCreated\"\n    },\n    features: [i0.ɵɵProvidersFeature([DmInteractionService]), i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"tabindex\", \"click\", \"keydown.tab\", \"keydown.shift.tab\", \"focus\", 4, \"ngIf\"], [3, \"tabindex\", \"click\", \"keydown.tab\", \"keydown.shift.tab\", \"focus\"], [1, \"dropdown\", \"popup-height\"], [\"dwcontainer\", \"\"], [1, \"input-hidden\", 3, \"ngClass\", \"ngStyle\"], [\"anchor\", \"\"], [\"class\", \"anchor\", \"class\", \"cmb\", \"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"ngStyle\", \"ngClass\", \"readonly\", \"hostComponent\", \"focus\", \"click\", \"blur\", \"keypress\", \"keydown\", \"keydown.backspace\", \"valueChange\", 4, \"ngIf\"], [\"class\", \"cmb\", \"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"filterable\", \"allowCustom\", \"readonly\", \"value\", \"ngStyle\", \"ngClass\", \"hostComponent\", \"clearButton\", \"click\", \"focus\", \"valueChange\", \"blur\", \"keydown\", \"keydown.backspace\", \"filterChange\", 4, \"ngIf\"], [\"popupTemplate\", \"\"], [\"wmPBControls\", \"\", \"wmFocusable\", \"\", 1, \"cmb\", 3, \"ngStyle\", \"ngClass\", \"readonly\", \"hostComponent\", \"focus\", \"click\", \"blur\", \"keypress\", \"keydown\", \"keydown.backspace\", \"valueChange\"], [\"combobox\", \"\", \"comboRef\", \"\"], [\"kendoDropDownListValueTemplate\", \"\"], [\"wmPBControls\", \"\", \"wmFocusable\", \"\", 1, \"cmb\", 3, \"filterable\", \"allowCustom\", \"readonly\", \"value\", \"ngStyle\", \"ngClass\", \"hostComponent\", \"clearButton\", \"click\", \"focus\", \"valueChange\", \"blur\", \"keydown\", \"keydown.backspace\", \"filterChange\"], [1, \"popup\", 3, \"tabindex\", \"ngClass\", \"click\", \"focusin\", \"focusout\"], [1, \"dddw-content\"], [3, \"model\", \"dataManagerContext\"], [4, \"ngIf\"], [1, \"k-icon\", \"k-i-warning\"]],\n    template: function DropDownDataWindowComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, DropDownDataWindowComponent_div_0_Template, 9, 7, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.model);\n      }\n    },\n    directives: [i6$1.DropDownListComponent, i6$1.ComboBoxComponent, DataManagerControlComponent, i6.NgIf, i6.NgClass, i6.NgStyle, ControlsPowerDirective, FocusableDirective, i6$1.ValueTemplateDirective],\n    styles: [\".k-nodata{display:none!important}  .k-popup{padding:0}.popup-height[_ngcontent-%COMP%]{position:relative}.input-hidden[_ngcontent-%COMP%]{visibility:hidden!important;z-index:-1;display:block!important}.popup[_ngcontent-%COMP%]{z-index:2147483638}.k-i-warning[_ngcontent-%COMP%]{font-size:2.5em}h4[_ngcontent-%COMP%]{font-size:1em;left:45%;position:relative}.gridDropdown[_ngcontent-%COMP%]{position:absolute;width:100%}.hiddenPopUp[_ngcontent-%COMP%]{display:none}.showPopUp[_ngcontent-%COMP%]{display:block}\"],\n    changeDetection: 0\n  });\n  return DropDownDataWindowComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet SimpleDropDownDataWindowComponent = /*#__PURE__*/(() => {\n  class SimpleDropDownDataWindowComponent extends DropDownBaseComponent {\n    /* c8 ignore start */\n    constructor(changeDetector, dmInteraction, maskFormat2, dataServiceB, webMapService, renderer2, focusService, lengthConverter, element, emitter, resizeDataManagerService, dataMTSService, buttonsService) {\n      super(changeDetector, maskFormat2, renderer2, element, lengthConverter, emitter, dataMTSService);\n      this.changeDetector = changeDetector;\n      this.dmInteraction = dmInteraction;\n      this.maskFormat2 = maskFormat2;\n      this.dataServiceB = dataServiceB;\n      this.webMapService = webMapService;\n      this.renderer2 = renderer2;\n      this.focusService = focusService;\n      this.element = element;\n      this.emitter = emitter;\n      this.resizeDataManagerService = resizeDataManagerService;\n      this.dataMTSService = dataMTSService;\n      this.buttonsService = buttonsService;\n      /* c8 ignore stop */\n\n      this.componentCreated = new EventEmitter();\n      this.defaultItem = {\n        text: null,\n        value: null\n      };\n    }\n\n    ngOnInit() {\n      super.ngOnInit();\n      this.componentCreated.emit(this);\n      this.style = new PBStyle();\n      this.values = [];\n      /* c8 ignore else */\n\n      if (!this.hasInitialValue()) {\n        this.fetchData();\n      }\n    }\n\n    ngDoCheck() {\n      if (this.dirty) {\n        this.dirty = false;\n        this.fetchData();\n      }\n    }\n\n    ngAfterContentChecked() {\n      this.setStyleProperty('border', this.borderStyle);\n      this.setStyleProperty('color', this.textColor);\n      this.setStyleProperty('background-color', this.backColor);\n    }\n    /**\r\n     * Gets total items\r\n     */\n\n\n    get totalItems() {\n      return this.model.DddwData ? this.model.DddwData.TotalItems : null;\n    }\n    /**\r\n     * Returns a string with logic value column\r\n     */\n\n\n    get dataColumn() {\n      return this.model.DddwDataColumn;\n    }\n    /**\r\n     * Returns a string with visual display column\r\n     */\n\n\n    get displayColumn() {\n      return this.model.DddwDisplayColumn;\n    }\n    /**\r\n     * Gets dirty property of internal data manager\r\n     */\n\n\n    get dirty() {\n      return this.model.DddwData && this.model.DddwData.Dirty;\n    }\n    /**\r\n     * Sets dirty property of internal data manager\r\n     */\n\n\n    set dirty(value) {\n      /* c8 ignore else */\n      if (this.model.DddwData) {\n        this.model.DddwData.Dirty = value;\n      }\n    }\n    /**\r\n     * @description\r\n     * Returns the selected key pair item.\r\n     * Returns 'null' if there isn't a selected item.\r\n     * @returns { text, value }\r\n     */\n\n\n    get selectedItem() {\n      if (this.values.length < 1 && this.hasInitialValue()) {\n        const val = this.dataManagerContext.row[0].dddwDisplay[this.columnId][this.name];\n        this.values.push({\n          text: val,\n          value: val\n        });\n        return this.values[0];\n      }\n\n      return this.values && this.values.length > 0 && this.modelData !== undefined && this.modelData !== null && this.modelData !== '' ? this.getValue(this.modelData) : null;\n    }\n    /**\r\n     * @description\r\n     * Sets the selected key pair item of the model.\r\n     * @param { text, value } value The key pair item received\r\n     * from kendo combobox component.\r\n     */\n\n\n    set selectedItem(value) {\n      if (value) {\n        const returnValue = this.getValue(value.value);\n        /* c8 ignore else */\n\n        if (returnValue) {\n          this.modelData = String(returnValue.text);\n          this.logicValue = returnValue.value;\n        }\n      } else {\n        this.modelData = null;\n      }\n    }\n    /**\r\n     * Applies detectChanges function and call ngAfterViewInit method to refresh\r\n     * the column values.\r\n     * @param data Data to be used in change detection.\r\n     */\n\n\n    columnDetectChanges(data) {\n      this.safeNgAfterViewInit();\n      this.detectChanges();\n    }\n    /**\r\n     * Retrieve internal item data\r\n     */\n\n\n    fetchData() {\n      /* c8 ignore else */\n      if (this.model.DddwData && this.totalItems > 0) {\n        this.dataServiceB.getPage(Utils.getID(this.model.DddwData), 1, this.totalItems, null, data => {\n          this.loadData(data);\n        });\n      }\n    }\n\n    loadData(data) {\n      this.values = [];\n      this.buildArrayData(data);\n      this.detectChanges();\n    }\n    /**\r\n     * Builds an array object with dropdown items, based on the internal DataManager control.\r\n     */\n\n\n    buildArrayData(data) {\n      const dataColumnNames = data.getColumnNames();\n      const dataGetRows = data.getRows();\n      const displayColumnIndex = dataColumnNames.indexOf(this.displayColumn) + 1;\n      const dataColumnIndex = dataColumnNames.indexOf(this.dataColumn) + 1;\n\n      for (const index of dataGetRows) {\n        const itemObject = {\n          text: index[displayColumnIndex],\n          value: index[dataColumnIndex]\n        };\n        this.values.push(itemObject);\n      }\n    }\n    /**\r\n     * @description\r\n     * Finds an item by value member in the values collection.\r\n     * @param value The item value to find.\r\n     */\n\n\n    getValue(value) {\n      let result = null;\n\n      if (value && this.values != null && this.values.length > 0) {\n        value = Utils.nullToString(value);\n        result = this.values.find(x => Utils.nullToString(x.value) === value);\n\n        if (result === undefined) {\n          result = this.values.find(x => Utils.nullToString(x.text) === value);\n        }\n      }\n\n      return result;\n    }\n    /**\r\n     * After the control get focused then apply the\r\n     * expected readonly behavior if it is disabled.\r\n     * @param event The current event data\r\n     */\n\n\n    focusHandler(event) {\n      this.applyFocus();\n      this.detectChanges();\n    }\n    /**\r\n     * Is triggered when key dow event\r\n     * @param event event parameter\r\n     */\n\n\n    keyDownHandler(event) {\n      /* c8 ignore else */\n      if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\n        Utils.preventPropagation(event);\n      }\n    }\n    /**\r\n     * Handle the open event\r\n     * Verify if the current component is disabled\r\n     * and avoid opening the list of available options.\r\n     * @param event The current event data\r\n     */\n\n\n    openHandler(event) {\n      /* c8 ignore else */\n      if (this.disabled) {\n        event.preventDefault(); // Avoid opening the option list\n      } else if (this.hasInitialValue()) {\n        this.clearddwDisplay();\n        this.fetchData();\n      }\n    }\n    /**\r\n     * Build event data when value change\r\n     */\n\n\n    valueChange(event) {\n      this.modelData = event.text;\n      this.logicValue = event.value;\n      const itemChangeEvent = {\n        ddwtriggerNCCVC: true\n      };\n      this.itemChangeDddw(itemChangeEvent);\n    }\n    /**\r\n     * builds event data when item value is selected\r\n     */\n\n\n    itemChangeDddw(event) {\n      const text = [this.modelData, this.logicValue];\n      const itemChangeEvent = {\n        text,\n        value: this.logicValue,\n        ddwtriggerNCCVC: event.ddwtriggerNCCVC\n      };\n      this.selectionChangeHandler(itemChangeEvent);\n      this.clearddwDisplay();\n    }\n    /**\r\n     * Sets a style property using renderer2\r\n     * @param propertyName: name of the property being set\r\n     * @param propertyValue\r\n     */\n\n\n    setStyleProperty(propertyName, propertyValue) {\n      const combo = this.combobox;\n      const ref = combo && combo.hostElement && combo.hostElement.nativeElement.firstElementChild;\n      /* c8 ignore else */\n\n      if (ref && propertyValue) {\n        this.renderer2.setStyle(ref, propertyName, propertyValue);\n      }\n    }\n    /**\r\n     * @override\r\n     * Binding click to toggle to overrides default binding of click.\r\n     * It is not necessary for simple DDDW\r\n     */\n\n\n    bindingClickToToggle() {// Do nothing\n    }\n\n  }\n\n  SimpleDropDownDataWindowComponent.ɵfac = function SimpleDropDownDataWindowComponent_Factory(t) {\n    return new (t || SimpleDropDownDataWindowComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(DmInteractionService), i0.ɵɵdirectiveInject(MaskFormatService), i0.ɵɵdirectiveInject(DMDataService), i0.ɵɵdirectiveInject(i1.WebMapService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(FocusManagerService), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(ResizeDataManagerService, 8), i0.ɵɵdirectiveInject(DataManagerTabSequenceService, 8), i0.ɵɵdirectiveInject(ButtonsService, 8));\n  };\n\n  SimpleDropDownDataWindowComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: SimpleDropDownDataWindowComponent,\n    selectors: [[\"wm-dw-simple-dropdowndatawindow\"]],\n    viewQuery: function SimpleDropDownDataWindowComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c40, 5, ElementRef);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.comboRef = _t.first);\n      }\n    },\n    outputs: {\n      componentCreated: \"componentCreated\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 11,\n    consts: [[\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"hostComponent\", \"ngStyle\", \"ngClass\", \"filterable\", \"data\", \"ngModel\", \"textField\", \"valueField\", \"readonly\", \"popupSettings\", \"ngModelChange\", \"click\", \"mousedown\", \"valueChange\", \"dblclick\", \"focus\", \"blur\", \"keydown\", \"keydown.tab\", \"keydown.shift.tab\", \"open\"], [\"combobox\", \"\", \"comboRef\", \"\"]],\n    template: function SimpleDropDownDataWindowComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"kendo-dropdownlist\", 0, 1);\n        i0.ɵɵlistener(\"ngModelChange\", function SimpleDropDownDataWindowComponent_Template_kendo_dropdownlist_ngModelChange_0_listener($event) {\n          return ctx.selectedItem = $event;\n        })(\"click\", function SimpleDropDownDataWindowComponent_Template_kendo_dropdownlist_click_0_listener($event) {\n          return ctx.clickColumn($event);\n        })(\"mousedown\", function SimpleDropDownDataWindowComponent_Template_kendo_dropdownlist_mousedown_0_listener($event) {\n          return ctx.mouseDownHandler($event);\n        })(\"valueChange\", function SimpleDropDownDataWindowComponent_Template_kendo_dropdownlist_valueChange_0_listener($event) {\n          return ctx.valueChange($event);\n        })(\"dblclick\", function SimpleDropDownDataWindowComponent_Template_kendo_dropdownlist_dblclick_0_listener($event) {\n          return ctx.doubleClickedHandler($event);\n        })(\"focus\", function SimpleDropDownDataWindowComponent_Template_kendo_dropdownlist_focus_0_listener($event) {\n          return ctx.focusHandler($event);\n        })(\"blur\", function SimpleDropDownDataWindowComponent_Template_kendo_dropdownlist_blur_0_listener() {\n          return ctx.blurHandler();\n        })(\"keydown\", function SimpleDropDownDataWindowComponent_Template_kendo_dropdownlist_keydown_0_listener($event) {\n          return ctx.keyDownHandler($event);\n        })(\"keydown.tab\", function SimpleDropDownDataWindowComponent_Template_kendo_dropdownlist_keydown_tab_0_listener($event) {\n          return ctx.tabKeyHandler($event);\n        })(\"keydown.shift.tab\", function SimpleDropDownDataWindowComponent_Template_kendo_dropdownlist_keydown_shift_tab_0_listener($event) {\n          return ctx.tabKeyHandler($event);\n        })(\"open\", function SimpleDropDownDataWindowComponent_Template_kendo_dropdownlist_open_0_listener($event) {\n          return ctx.openHandler($event);\n        });\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"hostComponent\", ctx)(\"ngStyle\", ctx.setMyStyle())(\"ngClass\", ctx.classHandler())(\"filterable\", false)(\"data\", ctx.values)(\"ngModel\", ctx.selectedItem)(\"textField\", \"text\")(\"valueField\", \"value\")(\"readonly\", ctx.disabled)(\"popupSettings\", i0.ɵɵpureFunction0(10, _c38));\n      }\n    },\n    directives: [i6$1.DropDownListComponent, ControlsPowerDirective, FocusableDirective, i6.NgStyle, i6.NgClass, i9.NgControlStatus, i9.NgModel],\n    styles: [\"\"],\n    changeDetection: 0\n  });\n  return SimpleDropDownDataWindowComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DwColumnComponent = /*#__PURE__*/(() => {\n  let DwColumnComponent = class DwColumnComponent {\n    constructor(\n    /* c8 ignore next 4 */\n    elementDW, dropDownRules, renderer) {\n      this.elementDW = elementDW;\n      this.dropDownRules = dropDownRules;\n      this.renderer = renderer;\n    }\n    /**\r\n     * Returns the corresponding component id\r\n     * to be used in automated tests.\r\n     */\n\n\n    get cid() {\n      return this.dataManagerContext ? `${this.model?.Name}_#${this.dataManagerContext.rowIndex}` : this.model?.Name;\n    }\n\n    ngAfterViewInit() {\n      Utils.removeClasses(this.class, this.elementDW.nativeElement, this.renderer);\n    }\n    /**\r\n     * Returns true when \"model\" is defined, the \"VisualControlType\" and\r\n     * the HTML template type are the same, \"dataManagerContext\" is defined and it\r\n     * has \"row\" property defined\r\n     * @param type The html template control type value\r\n     */\n\n\n    isValid(type) {\n      return this.model ? this.visualControlType === type && this.dataManagerContext && !!this.dataManagerContext.row : false;\n    }\n\n    registerComponent(component) {\n      /* c8 ignore else */\n      if (this.elementDW && this.elementDW.nativeElement) {\n        this.elementDW.nativeElement._childComponent = component;\n      }\n    }\n    /**\r\n     * Get the style type for the current column\r\n     * this property indicates the kind of control to\r\n     * be displayed by this column component\r\n     */\n\n\n    get visualControlType() {\n      return this.model.VisualControlType === StyleType.DropDownDW ? this.dropDownRules.isSimpleDropDownDataWindow(this.model) ? StyleType.SimpleDropDownDW : StyleType.DropDownDW : this.model.VisualControlType;\n    }\n\n  };\n\n  DwColumnComponent.ɵfac = function DwColumnComponent_Factory(t) {\n    return new (t || DwColumnComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(DropDownDataWindowRulesService), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n\n  DwColumnComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: DwColumnComponent,\n    selectors: [[\"wm-dw-column\"]],\n    inputs: {\n      model: \"model\",\n      dataManagerContext: \"dataManagerContext\",\n      avoidLengthValidation: \"avoidLengthValidation\",\n      timeDelay: \"timeDelay\",\n      class: \"class\"\n    },\n    decls: 10,\n    vars: 10,\n    consts: [[3, \"id\", \"model\", \"dataManagerContext\", \"class\", \"componentCreated\", 4, \"ngIf\"], [3, \"id\", \"model\", \"dataManagerContext\", \"class\", \"avoidLengthValidation\", \"timeDelay\", \"componentCreated\", 4, \"ngIf\"], [3, \"id\", \"model\", \"dataManagerContext\", \"componentCreated\"], [3, \"id\", \"model\", \"dataManagerContext\", \"avoidLengthValidation\", \"timeDelay\", \"componentCreated\"]],\n    template: function DwColumnComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, DwColumnComponent_wm_dw_checkbox_0_Template, 1, 5, \"wm-dw-checkbox\", 0);\n        i0.ɵɵtemplate(1, DwColumnComponent_wm_dw_dropdownlistbox_1_Template, 1, 5, \"wm-dw-dropdownlistbox\", 0);\n        i0.ɵɵtemplate(2, DwColumnComponent_wm_dw_edit_mask_2_Template, 1, 5, \"wm-dw-edit-mask\", 0);\n        i0.ɵɵtemplate(3, DwColumnComponent_wm_dw_radio_button_3_Template, 1, 5, \"wm-dw-radio-button\", 0);\n        i0.ɵɵtemplate(4, DwColumnComponent_wm_dw_edit_4_Template, 1, 7, \"wm-dw-edit\", 1);\n        i0.ɵɵtemplate(5, DwColumnComponent_wm_dw_dropdowndatawindow_5_Template, 1, 5, \"wm-dw-dropdowndatawindow\", 0);\n        i0.ɵɵtemplate(6, DwColumnComponent_wm_dw_u_calendar_6_Template, 1, 5, \"wm-dw-u-calendar\", 0);\n        i0.ɵɵtemplate(7, DwColumnComponent_wm_dw_date_time_u_calendar_7_Template, 1, 5, \"wm-dw-date-time-u-calendar\", 0);\n        i0.ɵɵtemplate(8, DwColumnComponent_wm_dw_u_calculator_8_Template, 1, 5, \"wm-dw-u-calculator\", 0);\n        i0.ɵɵtemplate(9, DwColumnComponent_wm_dw_simple_dropdowndatawindow_9_Template, 1, 5, \"wm-dw-simple-dropdowndatawindow\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.isValid(0));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isValid(2));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isValid(4));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isValid(6));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isValid(3));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isValid(1));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isValid(8));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isValid(9));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isValid(10));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.isValid(11));\n      }\n    },\n    directives: [DwCheckboxComponent, DwDropdownlistboxComponent, DwEditMaskComponent, DwRadioButtonComponent, DwEditComponent, DropDownDataWindowComponent, UCalendarComponent, DateTimeUCalendarComponent, UCalculatorComponent, SimpleDropDownDataWindowComponent, i6.NgIf],\n    styles: [\"\"],\n    changeDetection: 0\n  });\n  DwColumnComponent = __decorate([dataTransfer(['dwColumn']), __metadata(\"design:paramtypes\", [ElementRef, DropDownDataWindowRulesService, Renderer2])], DwColumnComponent);\n  return DwColumnComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks,\r\nwhich is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is,\r\nand remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents,\r\nand are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n/**\r\n * Change windings text to its equivalent in unicode\r\n * to be used in cross browser compatibility\r\n * Function created based on implementation in Wingdings Translator\r\n * at https://lingojam.com/WingdingsTranslator\r\n * @param text the wingdings text to translate\r\n */\n\n\nfunction TranslateWingdingsText(text) {\n  const charMap = {\n    '0': '📁︎',\n    '1': '📂︎',\n    '2': '📄︎',\n    '3': '🗏︎',\n    '4': '🗐︎',\n    '5': '🗄︎',\n    '6': '⌛︎',\n    '7': '🖮︎',\n    '8': '🖰︎',\n    '9': '🖲︎',\n    '!': '✏︎',\n    '\"': '✂︎',\n    '#': '✁︎',\n    $: '👓︎',\n    '%': '🕭︎',\n    '&': '🕮︎',\n    \"'\": '🕯︎',\n    '(': '🕿︎',\n    ')': '✆︎',\n    '*': '🖂︎',\n    '+': '🖃︎',\n    ',': '📪︎',\n    '-': '📫︎',\n    '.': '📬︎',\n    '/': '📭︎',\n    ':': '🖳︎',\n    ';': '🖴︎',\n    '<': '🖫︎',\n    '=': '🖬︎',\n    '>': '✇︎',\n    '?': '✍︎',\n    A: '✌︎',\n    B: '👌︎',\n    C: '👍︎',\n    D: '👎︎',\n    E: '☜︎',\n    F: '☞︎',\n    G: '☝︎',\n    H: '☟︎',\n    I: '✋︎',\n    J: '☺︎',\n    K: '😐︎',\n    L: '☹︎',\n    M: '💣︎',\n    N: '☠︎',\n    O: '⚐︎',\n    P: '🏱︎',\n    Q: '✈︎',\n    R: '☼︎',\n    S: '💧︎',\n    T: '❄︎',\n    U: '🕆︎',\n    V: '✞︎',\n    W: '🕈︎',\n    X: '✠︎',\n    Y: '✡︎',\n    Z: '☪︎',\n    '[': '☯︎',\n    '\\\\': 'ॐ︎',\n    ']': '☸︎',\n    '^': '♈︎',\n    _: '♉︎',\n    '`': '♊︎',\n    a: '♋︎',\n    b: '♌︎',\n    c: '♍︎',\n    d: '♎︎',\n    e: '♏︎',\n    f: '♐︎',\n    g: '♑︎',\n    h: '♒︎',\n    i: '♓︎',\n    j: '🙰',\n    k: '🙵',\n    l: '●︎',\n    m: '❍︎',\n    n: '■︎',\n    o: '□︎',\n    p: '◻︎',\n    q: '❑︎',\n    r: '❒︎',\n    s: '⬧︎',\n    t: '⧫︎',\n    u: '◆︎',\n    v: '❖︎',\n    w: '⬥︎',\n    x: '⌧︎',\n    y: '⍓︎',\n    z: '⌘︎',\n    '{': '❀︎',\n    '|': '✿︎',\n    '}': '❝︎',\n    '~': '❞︎',\n    '': '▯︎',\n    '€': '⓪︎',\n    '': '①︎',\n    '‚': '②︎',\n    ƒ: '③︎',\n    '„': '④︎',\n    '…': '⑤︎',\n    '†': '⑥︎',\n    '‡': '⑦︎',\n    ˆ: '⑧︎',\n    '‰': '⑨︎',\n    Š: '⑩︎',\n    '‹': '⓿︎',\n    Œ: '❶︎',\n    '': '❷︎',\n    Ž: '❸︎',\n    '': '❹︎',\n    '': '❺︎',\n    '‘': '❻︎',\n    '’': '❼︎',\n    '“': '❽︎',\n    '”': '❾︎',\n    '•': '❿︎',\n    '–': '◻︎',\n    '—': '◻︎',\n    '˜': '◻︎',\n    '™': '◻︎',\n    š: '◻︎',\n    '›': '◻︎',\n    œ: '◻︎',\n    '': '◻︎',\n    ž: '·︎',\n    Ÿ: '•︎',\n    '¡': '○︎',\n    '¢': '⭕︎',\n    '£': '◻︎',\n    '¤': '◉︎',\n    '¥': '◎︎',\n    '¦': '◻︎',\n    '§': '▪︎',\n    '¨': '◻︎',\n    '©': '◻︎',\n    ª: '✦︎',\n    '«': '★︎',\n    '¬': '✶︎',\n    '®': '✹︎',\n    '¯': '✵︎',\n    '°': '◻︎',\n    '±': '⌖︎',\n    '²': '⟡︎',\n    '³': '⌑︎',\n    '´': '◻︎',\n    µ: '✪︎',\n    '¶': '✰︎',\n    '·': '🕐︎',\n    '¸': '🕑︎',\n    '¹': '🕒︎',\n    º: '🕓︎',\n    '»': '🕔︎',\n    '¼': '🕕︎',\n    '½': '🕖︎',\n    '¾': '🕗︎',\n    '¿': '🕘︎',\n    À: '🕙︎',\n    Á: '🕚︎',\n    Â: '🕛︎',\n    Ã: '◻︎',\n    Ä: '◻︎',\n    Å: '◻︎',\n    Æ: '◻︎',\n    Ç: '◻︎',\n    È: '◻︎',\n    É: '◻︎',\n    Ê: '◻︎',\n    Ë: '◻︎',\n    Ì: '◻︎',\n    Í: '◻︎',\n    Î: '◻︎',\n    Ï: '◻︎',\n    Ð: '◻︎',\n    Ñ: '◻︎',\n    Ò: '◻︎',\n    Ó: '◻︎',\n    Ô: '◻︎',\n    Õ: '⌫︎',\n    Ö: '⌦︎',\n    '×': '◻︎',\n    Ø: '➢︎',\n    Ù: '◻︎',\n    Ú: '◻︎',\n    Û: '◻︎',\n    Ü: '➲︎',\n    Ý: '◻︎',\n    Þ: '◻︎',\n    ß: '◻︎',\n    à: '◻︎',\n    á: '◻︎',\n    â: '◻︎',\n    ã: '◻︎',\n    ä: '◻︎',\n    å: '◻︎',\n    æ: '◻︎',\n    ç: '◻︎',\n    è: '➔︎',\n    é: '◻︎',\n    ê: '◻︎',\n    ë: '◻︎',\n    ì: '◻︎',\n    í: '◻︎',\n    î: '◻︎',\n    ï: '⇦︎',\n    ð: '⇨︎',\n    ñ: '⇧︎',\n    ò: '⇩︎',\n    ó: '⬄︎',\n    ô: '⇳︎',\n    õ: '⬀︎',\n    ö: '⬁︎',\n    '÷': '⬃︎',\n    ø: '⬂︎',\n    ù: '▭︎',\n    ú: '▫︎',\n    û: '✗︎',\n    ü: '✓︎',\n    ý: '☒︎',\n    þ: '☑︎',\n    ÿ: '◻︎'\n  };\n  return text.split('').map(a => charMap[a] ? charMap[a] : a).join('');\n}\n\nlet DwComputeComponent = /*#__PURE__*/(() => {\n  let DwComputeComponent = class DwComputeComponent extends ColumnControlComponent {\n    /* c8 ignore start */\n    constructor(changeDetectorDW, rendererDW, elementDW, lengthConverter, emitterDW, maskFormat2, dataMTabSequenceService) {\n      super(changeDetectorDW, rendererDW, elementDW, lengthConverter, emitterDW, maskFormat2, dataMTabSequenceService);\n      this.changeDetectorDW = changeDetectorDW;\n      this.rendererDW = rendererDW;\n      this.elementDW = elementDW;\n      this.emitterDW = emitterDW;\n      this.maskFormat2 = maskFormat2;\n      this.dataMTabSequenceService = dataMTabSequenceService;\n      /**\r\n       * Image regex of dw compute component\r\n       */\n\n      this.imageRegex = /[\\/.](gif|jpg|jpeg|tiff|png)$/gi;\n\n      if (this.elementDW && this.elementDW.nativeElement) {\n        this.elementDW.nativeElement._childComponent = this;\n      }\n    }\n    /**\r\n     * Get computed values\r\n     */\n\n\n    get computedValue() {\n      const expressions = new Expressions();\n      const computedPropertyHelper = new ComputedPropertyHelper();\n      const utilityFunctions = computedPropertyHelper.getCustomFunctionMapping();\n      const computed = {\n        value: null,\n        type: null\n      };\n      computed.value = computedPropertyHelper.getComputedControlValue(this.dataManagerContext.computedInformation, this.dataManagerContext.row, this.dataManagerContext.computedOutOfDetail, this.name, utilityFunctions, expressions);\n      computed.type = computedPropertyHelper.getComputedControlType(this.dataManagerContext.computedInformation, this.dataManagerContext.row, this.name);\n\n      if (computed.type == null) {\n        // We will try to infer the column type from the format\n        computed.type = Utils.tryToGetType(this.format);\n      }\n\n      const value = computedPropertyHelper.parseComputeValue(computed.value, computed.type);\n      const result = this.format && computed.type && value != null ? this.formatComputeValue(value, this.format, computed.type, this.dataManagerContext.row, this.name) : value;\n\n      if (result && this.fontface && this.fontface.toLowerCase() === 'wingdings') {\n        return TranslateWingdingsText(result);\n      }\n\n      return result;\n    }\n    /**\r\n     * Gets fontface\r\n     * Returns the current component font face value\r\n     */\n\n\n    get fontface() {\n      return this.model.Font && this.model.Font.Face;\n    }\n    /**\r\n     * Computed fields are not\r\n     * editable under any circumstance.\r\n     */\n\n\n    get disabled() {\n      return true;\n    }\n    /**\r\n     * Returns a value indicating whether this controls contains\r\n     * a multiline data\r\n     */\n\n\n    get multiline() {\n      return !!this.multilineInput ? this.multilineInput : Utils.containsMultilineValue(this.computedValue);\n    }\n\n    get componentName() {\n      return 'DwComputeComponent';\n    }\n    /**\r\n     * @description\r\n     * Gets focusable element inside of the component\r\n     */\n\n\n    get focusableElement() {\n      return this.validateFocusElement(this.focusElement);\n    }\n    /**\r\n     * Gets display as picture\r\n     * Returns a boolean value indicating if the computed control\r\n     * should be displayed as a picture instead of a text value\r\n     */\n\n\n    get displayAsPicture() {\n      return this.dataManagerContextVisuals ? this.dataManagerContextVisuals['BitmapExpression'] : undefined;\n    }\n    /**\r\n     * Gets image source\r\n     * Returns the imageSource as needed\r\n     * serialized from base64 or as a resource from assets\r\n     */\n\n\n    get imageSource() {\n      return this.displayAsPicture === 'ServerImage' ? `data:image/png;base64,${this.computedValue}` : this.computedValue;\n    }\n    /**\r\n     * Gets valid image\r\n     */\n\n\n    get validImage() {\n      const computedValue = this.imageSource;\n      return this.displayAsPicture && this.showImage && computedValue && this.imageRegex.test(computedValue);\n    }\n    /**\r\n     * this event is trigged when the user type enter in the input\r\n     * @param event default event object created by Angular\r\n     */\n\n\n    onKeyDown(event) {\n      const dataEvent = new EventData(event, this.id, this.mapperId);\n      this.emitDataManagerEvent('EnterKeyPress', dataEvent);\n    }\n    /**\r\n     * Applies format to computed fields\r\n     * @param {any} value data\r\n     * @param {string} format format of the data\r\n     * @param {string} type type of the data\r\n     * @returns { any }\r\n     */\n\n\n    formatComputeValue(value, format, type, currentRow, controlName) {\n      const dataType = this.evaluateDataType(type);\n      const computedPropertyHelper = new ComputedPropertyHelper();\n      const valueLength = this.getComputeValueLength(dataType, value);\n      this.applyComputeFormatTo(value, dataType, valueLength);\n      /* c8 ignore else */\n\n      return computedPropertyHelper.getSparseValue(currentRow, controlName, this.dataManagerContext) ? this.modelData : null;\n    }\n    /**\r\n     * Gets compute value length\r\n     * @param value the current value to be analyzed\r\n     * @param dataType the current dataType\r\n     * @returns compute value length\r\n     */\n\n\n    getComputeValueLength(dataType, value) {\n      if (value != null && dataType === DataTypeNames.decimal) {\n        const decimals = value.toString().split('.');\n        return decimals.length > 1 ? decimals[1].length : 0;\n      }\n\n      return value.toString().length;\n    }\n    /**\r\n     * get the datatype of a computed field\r\n     * @param {string} type type of the data\r\n     * @returns { string }\r\n     */\n\n\n    evaluateDataType(type) {\n      switch (type.match(/[a-z]+/)[0]) {\n        case 'decimal':\n        case 'number':\n          return DataTypeNames.decimal;\n\n        case 'date':\n          return DataTypeNames.date;\n\n        default:\n          return DataTypeValidator.isDateTypeByFormat(this.format) ? DataTypeNames.date : DataTypeNames.string;\n      }\n    }\n    /**\r\n     * Overrides focus in function in order to prevent base-component to trigger datamanagerEvent\r\n     * @param event event parameter\r\n     */\n\n\n    focusIn(event) {\n      /* c8 ignore else*/\n      if (event && !event.isTrusted) {\n        this.focusableElement.focus();\n        const data = new EventData({\n          target: this\n        }, this.id, this.mapperId);\n        this.notifyDataManagerCurrentRow();\n        this.getfocus.emit(data);\n      }\n    }\n    /**\r\n     * Overrides focus out function in order to prevent base-component to trigger datamanagerEvent\r\n     * @param event  event parameter\r\n     */\n\n\n    focusOut(event) {\n      const data = new EventData({\n        target: this\n      }, this.id, this.mapperId);\n      this.losefocus.emit(data);\n    }\n    /**\r\n     * Is triggered  when a column component has been clicked\r\n     * @param event Event data parameter\r\n     */\n\n\n    clickColumn(event) {\n      /* c8 ignore else*/\n      if (!this.isColumnInsideDDDW()) {\n        if (event.detail === 1) {\n          this.clickEvent('clickedDwComputeControl', event);\n          /* c8 ignore else*/\n        } else if (event.detail === 2) {\n          this.clickEvent('doubleclick', event);\n        }\n      }\n    }\n    /**\r\n     * @description\r\n     * Returns a valid style object to\r\n     * be applied according to the styling information set in the control's model\r\n     * @returns { any }\r\n     */\n\n\n    setMyStyle() {\n      if (this.emitterDW.cancelDynamicStyles) {\n        return null;\n      }\n\n      const customStyle = super.setMyStyle();\n      customStyle['border'] = this.borderStyle;\n      return customStyle;\n    }\n    /**\r\n     * @description\r\n     * The 'classHandler' function call super and adds class if inside grid\r\n     * @returns { string }\r\n     */\n\n\n    classHandler() {\n      return `${super.classHandler()} ${this.isInsideGrid()}`;\n    }\n    /**\r\n     * @description\r\n     * returns string to apply styles for computes inside grid\r\n     * @returns { string }\r\n     */\n\n\n    isInsideGrid() {\n      return this.isOnGrid ? 'computeInGrid' : '';\n    }\n\n  };\n\n  DwComputeComponent.ɵfac = function DwComputeComponent_Factory(t) {\n    return new (t || DwComputeComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MaskFormatService), i0.ɵɵdirectiveInject(DataManagerTabSequenceService, 8));\n  };\n\n  DwComputeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: DwComputeComponent,\n    selectors: [[\"wm-dw-compute\"]],\n    inputs: {\n      multilineInput: \"multilineInput\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 4,\n    vars: 4,\n    consts: [[\"kendoTextBox\", \"\", \"wmFocusable\", \"\", \"wmMaskValidator\", \"\", \"type\", \"text\", \"class\", \"k-form-field computedContent\", \"wmPBControls\", \"\", 3, \"id\", \"tabindex\", \"value\", \"ngClass\", \"ngStyle\", \"hostComponent\", \"click\", \"dblclick\", \"keydown.enter\", \"keydown.tab\", \"keydown.shift.tab\", \"focus\", \"focusout\", 4, \"ngIf\"], [\"kendoTextArea\", \"\", \"wmFocusable\", \"\", \"wmMaskValidator\", \"\", \"type\", \"text\", \"class\", \"k-form-field computedContent\", \"wmPBControls\", \"\", 3, \"id\", \"tabindex\", \"value\", \"ngClass\", \"ngStyle\", \"hostComponent\", \"click\", \"dblclick\", \"keydown.enter\", \"keydown.tab\", \"keydown.shift.tab\", \"focus\", \"focusout\", 4, \"ngIf\"], [\"alt\", \"dwcomputeImage\", \"class\", \"computedContent\", 3, \"src\", \"ngStyle\", \"ngClass\", \"error\", 4, \"ngIf\"], [\"kendoTextBox\", \"\", \"wmFocusable\", \"\", \"wmMaskValidator\", \"\", \"type\", \"text\", \"wmPBControls\", \"\", 1, \"k-form-field\", \"computedContent\", 3, \"id\", \"tabindex\", \"value\", \"ngClass\", \"ngStyle\", \"hostComponent\", \"click\", \"dblclick\", \"keydown.enter\", \"keydown.tab\", \"keydown.shift.tab\", \"focus\", \"focusout\"], [\"focusElement\", \"\"], [\"kendoTextArea\", \"\", \"wmFocusable\", \"\", \"wmMaskValidator\", \"\", \"type\", \"text\", \"wmPBControls\", \"\", 1, \"k-form-field\", \"computedContent\", 3, \"id\", \"tabindex\", \"value\", \"ngClass\", \"ngStyle\", \"hostComponent\", \"click\", \"dblclick\", \"keydown.enter\", \"keydown.tab\", \"keydown.shift.tab\", \"focus\", \"focusout\"], [\"alt\", \"dwcomputeImage\", 1, \"computedContent\", 3, \"src\", \"ngStyle\", \"ngClass\", \"error\"]],\n    template: function DwComputeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, DwComputeComponent_input_0_Template, 2, 6, \"input\", 0);\n        i0.ɵɵtemplate(1, DwComputeComponent_textarea_1_Template, 2, 6, \"textarea\", 1);\n        i0.ɵɵtemplate(2, DwComputeComponent_img_2_Template, 1, 3, \"img\", 2);\n        i0.ɵɵtemplate(3, DwComputeComponent_textarea_3_Template, 2, 6, \"textarea\", 1);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.dataManagerContext && !ctx.multiline && !ctx.displayAsPicture && !ctx.isOnGrid);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.dataManagerContext && ctx.multiline && !ctx.displayAsPicture && !ctx.isOnGrid);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.dataManagerContext && ctx.validImage);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.dataManagerContext && ctx.isOnGrid && !ctx.displayAsPicture);\n      }\n    },\n    directives: [i6.NgIf, i5$1.TextBoxDirective, FocusableDirective, MaskValidatorDirective, ControlsPowerDirective, i6.NgClass, i6.NgStyle, i5$1.TextAreaDirective],\n    styles: [\".computeInGrid[_ngcontent-%COMP%]{width:100%}\"],\n    changeDetection: 0\n  });\n  DwComputeComponent = __decorate([dataTransfer(['DMCmptdFld']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, LengthConverter, DataManagerEventService, MaskFormatService, DataManagerTabSequenceService])], DwComputeComponent);\n  return DwComputeComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DWBitmapComponent = /*#__PURE__*/(() => {\n  let DWBitmapComponent = class DWBitmapComponent extends ColumnControlComponent {\n    /* c8 ignore start */\n    constructor(changeDetector, renderer2, element, maskFormat2, lengthConverter, emitter, dataMTabSequenceService) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter, maskFormat2, dataMTabSequenceService);\n      this.changeDetector = changeDetector;\n      this.renderer2 = renderer2;\n      this.element = element;\n      this.maskFormat2 = maskFormat2;\n      this.emitter = emitter;\n      this.dataMTabSequenceService = dataMTabSequenceService;\n    }\n\n    detectChanges() {\n      super.detectChanges();\n      this.changeOriginalSize();\n    }\n    /**\r\n     * @description\r\n     * Returns the PictureName property of the model\r\n     * @returns {string}\r\n     */\n\n\n    get pictureName() {\n      return this.model.PictureName;\n    }\n    /**\r\n     * @description\r\n     * Gets the OriginalSize property from the model\r\n     * @return {boolean}\r\n     */\n\n\n    get originalSize() {\n      return this.model.OriginalSize;\n    }\n    /**\r\n     * @description\r\n     * Sets height and width to auto applying the bmp-auto class if OriginalSize is true\r\n     */\n\n\n    changeOriginalSize() {\n      const bitMapElement = this.bitMap.nativeElement;\n\n      if (this.originalSize) {\n        this.renderer.addClass(bitMapElement, 'bmp-auto');\n      } else {\n        if (bitMapElement.classList.contains('bmp-auto')) {\n          this.renderer.removeClass(bitMapElement, 'bmp-auto');\n        }\n      }\n    }\n\n  };\n\n  DWBitmapComponent.ɵfac = function DWBitmapComponent_Factory(t) {\n    return new (t || DWBitmapComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MaskFormatService), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(DataManagerTabSequenceService, 8));\n  };\n\n  DWBitmapComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: DWBitmapComponent,\n    selectors: [[\"wm-dw-bitmap\"]],\n    viewQuery: function DWBitmapComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c42, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.bitMap = _t.first);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[\"wmFocusable\", \"\", 3, \"hostComponent\", 4, \"ngIf\"], [\"wmFocusable\", \"\", 3, \"hostComponent\"], [\"wmPBControls\", \"\", 3, \"ngStyle\", \"src\", \"alt\", \"ngClass\", \"hostComponent\"], [\"bitMap\", \"\"]],\n    template: function DWBitmapComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, DWBitmapComponent_div_0_Template, 3, 6, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.dataManagerContext && ctx.model);\n      }\n    },\n    directives: [i6.NgIf, FocusableDirective, ControlsPowerDirective, i6.NgStyle, i6.NgClass],\n    styles: [\".bmp-auto[_ngcontent-%COMP%]{height:auto!important;width:auto!important}\"],\n    changeDetection: 0\n  });\n  DWBitmapComponent = __decorate([dataTransfer(['btmp']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, MaskFormatService, LengthConverter, DataManagerEventService, DataManagerTabSequenceService])], DWBitmapComponent);\n  return DWBitmapComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nvar FillPattern = /*#__PURE__*/(() => {\n  (function (FillPattern) {\n    FillPattern[FillPattern[\"bdiagonal\"] = 0] = \"bdiagonal\";\n    FillPattern[FillPattern[\"diamond\"] = 1] = \"diamond\";\n    FillPattern[FillPattern[\"fdiagonal\"] = 2] = \"fdiagonal\";\n    FillPattern[FillPattern[\"horizontal\"] = 3] = \"horizontal\";\n    FillPattern[FillPattern[\"solid\"] = 4] = \"solid\";\n    FillPattern[FillPattern[\"square\"] = 5] = \"square\";\n    FillPattern[FillPattern[\"vertical\"] = 6] = \"vertical\";\n    FillPattern[FillPattern[\"transparent\"] = 7] = \"transparent\";\n  })(FillPattern || (FillPattern = {}));\n\n  return FillPattern;\n})();\nvar BrushHatch = /*#__PURE__*/(() => {\n  (function (BrushHatch) {\n    BrushHatch[BrushHatch[\"horizontal\"] = 0] = \"horizontal\";\n    BrushHatch[BrushHatch[\"bdiagonal\"] = 1] = \"bdiagonal\";\n    BrushHatch[BrushHatch[\"vertical\"] = 2] = \"vertical\";\n    BrushHatch[BrushHatch[\"cross\"] = 3] = \"cross\";\n    BrushHatch[BrushHatch[\"fdiagonal\"] = 4] = \"fdiagonal\";\n    BrushHatch[BrushHatch[\"dialogctoss\"] = 5] = \"dialogctoss\";\n    BrushHatch[BrushHatch[\"solid\"] = 6] = \"solid\";\n    BrushHatch[BrushHatch[\"transparent\"] = 7] = \"transparent\";\n    BrushHatch[BrushHatch[\"background\"] = 8] = \"background\";\n  })(BrushHatch || (BrushHatch = {}));\n\n  return BrushHatch;\n})();\nlet DwEllipseComponent = /*#__PURE__*/(() => {\n  let DwEllipseComponent = class DwEllipseComponent extends GraphicsComponent {\n    /* c8 ignore start */\n    constructor(changeDetector, renderer2, element, lengthConverter, emitter, mTabOService) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter, mTabOService);\n      this.changeDetector = changeDetector;\n      this.renderer2 = renderer2;\n      this.element = element;\n      this.emitter = emitter;\n      this.mTabOService = mTabOService;\n    }\n    /**\r\n     * @description\r\n     * Return the left position value in pixels of the model\r\n     */\n\n\n    get positionX() {\n      return this.model.Position ? this.model.Position.X || 0 : 0;\n    }\n    /**\r\n     * @description\r\n     * Return the top position value in pixels of the model\r\n     */\n\n\n    get positionY() {\n      return this.model.Position ? this.model.Position.Y || 0 : 0;\n    }\n    /**\r\n     * @description\r\n     * Returns the top position value in pixels of the model.\r\n     * @returns { number }\r\n     */\n\n\n    get radiusX() {\n      return this.model.Width;\n    }\n    /**\r\n     * Specifies the X position of one end of the line (the distance from the left edge of the window).\r\n     */\n\n\n    get radiusY() {\n      return this.model.Height;\n    }\n    /**\r\n     * returns the color of the ellipse\r\n     */\n\n\n    get backgroundColor() {\n      return this.model.BackColor === null || this.model.BackColor === 0 ? 'rgb(0,0,0)' : `${this.model.BackColor}`;\n    }\n    /**\r\n     * @description\r\n     * Return the brush color from the model\r\n     */\n\n\n    get brushColor() {\n      return this.model.BrushColor === null || this.model.BrushColor === 0 ? 'rgb(0,0,0)' : `${this.model.BrushColor}`;\n    }\n    /**\r\n     * Specifies the hatch pattern used to fill the control\r\n     */\n\n\n    get fillPattern() {\n      return this.model.BrushHatch || 0;\n    }\n    /**\r\n     * Return the pen color from the model\r\n     */\n\n\n    get penColor() {\n      return this.model.PenColor;\n    }\n    /**\r\n     * Return the pen style from the model\r\n     */\n\n\n    get penStyle() {\n      return this.model.PenStyle;\n    }\n\n    get lineStyle() {\n      return this.penStyle;\n    }\n    /**\r\n     * Gets svg style\r\n     */\n\n\n    get svgFillStyle() {\n      switch (this.fillPattern) {\n        case FillPattern.bdiagonal:\n          return 'url(#bdiagonal)';\n\n        case FillPattern.diamond:\n          return 'url(#diamond)';\n\n        case FillPattern.fdiagonal:\n          return 'url(#fdiagonal)';\n\n        case FillPattern.horizontal:\n          return 'url(#horizontal)';\n\n        case FillPattern.solid:\n          return this.brushColor;\n\n        case FillPattern.square:\n          return 'url(#square)';\n\n        case FillPattern.vertical:\n          return 'url(#vertical)';\n      }\n    }\n\n  };\n\n  DwEllipseComponent.ɵfac = function DwEllipseComponent_Factory(t) {\n    return new (t || DwEllipseComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8));\n  };\n\n  DwEllipseComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: DwEllipseComponent,\n    selectors: [[\"wm-dw-ellipse\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"hostComponent\", \"ngClass\", 4, \"ngIf\"], [\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"hostComponent\", \"ngClass\"], [\"id\", \"bdiagonal\", \"x\", \"0\", \"y\", \"0\", \"width\", \"7\", \"height\", \"7\", \"patternUnits\", \"userSpaceOnUse\"], [\"width\", \"7\", \"height\", \"7\", \"fill-opacity\", \"0\", \"stroke-opacity\", \"1\", \"stroke\", \"black\"], [\"x1\", \"0\", \"y1\", \"7\", \"x2\", \"7\", \"y2\", \"0\", \"fill-opacity\", \"0\", \"stroke-opacity\", \"1\", 2, \"stroke\", \"rgb(0,0,0)\", \"stroke-width\", \"1\"], [\"id\", \"fdiagonal\", \"x\", \"0\", \"y\", \"0\", \"width\", \"7\", \"height\", \"7\", \"patternUnits\", \"userSpaceOnUse\"], [\"x1\", \"0\", \"y1\", \"0\", \"x2\", \"7\", \"y2\", \"7\", 2, \"stroke\", \"rgb(0,0,0)\", \"stroke-width\", \"1\"], [\"id\", \"diamond\", \"x\", \"0\", \"y\", \"0\", \"width\", \"10\", \"height\", \"10\", \"patternUnits\", \"userSpaceOnUse\"], [\"width\", \"10\", \"height\", \"10\", \"fill-opacity\", \"0\", \"stroke-opacity\", \"1\", \"stroke\", \"black\"], [\"x1\", \"0\", \"y1\", \"10\", \"x2\", \"10\", \"y2\", \"0\", 2, \"stroke\", \"rgb(0,0,0)\", \"stroke-width\", \"1\"], [\"x1\", \"0\", \"y1\", \"0\", \"x2\", \"10\", \"y2\", \"10\", 2, \"stroke\", \"rgb(0,0,0)\", \"stroke-width\", \"1\"], [\"id\", \"horizontal\", \"x\", \"0\", \"y\", \"0\", \"width\", \"10\", \"height\", \"10\", \"patternUnits\", \"userSpaceOnUse\"], [\"x1\", \"0\", \"y1\", \"5\", \"x2\", \"10\", \"y2\", \"5\", 2, \"stroke\", \"rgb(0,0,0)\", \"stroke-width\", \"1\"], [\"id\", \"vertical\", \"x\", \"0\", \"y\", \"0\", \"width\", \"10\", \"height\", \"10\", \"patternUnits\", \"userSpaceOnUse\"], [\"x1\", \"0\", \"y1\", \"0\", \"x2\", \"0\", \"y2\", \"10\", 2, \"stroke\", \"rgb(0,0,0)\", \"stroke-width\", \"1\"], [\"id\", \"square\", \"width\", \"10\", \"height\", \"10\", \"x\", \"0\", \"y\", \"0\", \"patternUnits\", \"userSpaceOnUse\"]],\n    template: function DwEllipseComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, DwEllipseComponent_div_0_Template, 25, 15, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.visible);\n      }\n    },\n    directives: [i6.NgIf, ControlsPowerDirective, FocusableDirective, i6.NgClass],\n    styles: [\"\"],\n    changeDetection: 0\n  });\n  DwEllipseComponent = __decorate([dataTransfer(['dwellipse']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, LengthConverter, DataManagerEventService, MainTabOrderService])], DwEllipseComponent);\n  return DwEllipseComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/***********************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n *\r\n * This file is subject to the terms and conditions defined in\r\n * file 'LICENSE.txt', which is part of this source code package.\r\n ***********************************************************************/\n\n\nlet StubComponent = /*#__PURE__*/(() => {\n  class StubComponent extends BaseControlComponent {\n    /* c8 ignore start */\n    constructor(changeDetector, renderer2, element, lengthConverter, emitter, mTabOrderService, tabPageOrderService) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter, mTabOrderService, tabPageOrderService);\n      this.changeDetector = changeDetector;\n      this.renderer2 = renderer2;\n      this.element = element;\n      this.emitter = emitter;\n      this.mTabOrderService = mTabOrderService;\n      this.tabPageOrderService = tabPageOrderService;\n    }\n\n  }\n\n  StubComponent.ɵfac = function StubComponent_Factory(t) {\n    return new (t || StubComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n  };\n\n  StubComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: StubComponent,\n    selectors: [[\"wm-stub\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 7,\n    vars: 1,\n    consts: [[1, \"stub-component-borde\", 3, \"ngClass\"]],\n    template: function StubComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n        i0.ɵɵtext(2, \"Under construction\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"p\");\n        i0.ɵɵtext(4, \"Hold tight as we get our working robots together and produce the most astonishing product.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"p\");\n        i0.ɵɵtext(6, \"\\xA9Mobilize.net\");\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngClass\", ctx.class);\n      }\n    },\n    directives: [i6.NgClass],\n    styles: [\".stub-component-border[_ngcontent-%COMP%]{border-style:solid;overflow:hidden}\"],\n    changeDetection: 0\n  });\n  return StubComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet SafePipe = /*#__PURE__*/(() => {\n  class SafePipe {\n    /* c8 ignore next 4 */\n    constructor(sanitizer) {\n      this.sanitizer = sanitizer;\n    }\n\n    transform(url) {\n      return this.sanitizer.bypassSecurityTrustResourceUrl(url);\n    }\n\n  }\n\n  SafePipe.ɵfac = function SafePipe_Factory(t) {\n    return new (t || SafePipe)(i0.ɵɵdirectiveInject(i1$2.DomSanitizer, 16));\n  };\n\n  SafePipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n    name: \"safe\",\n    type: SafePipe,\n    pure: true\n  });\n  return SafePipe;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // /*****************************************************************************\n\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n/* c8 ignore start */\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\n\n\nlet KendoComponent = /*#__PURE__*/(() => {\n  class KendoComponent {\n    constructor(differs, elementRef, widgetName) {\n      this.differs = differs;\n      this.elementRef = elementRef;\n      this.widgetName = widgetName;\n      this.prefix = 'applyRefresh';\n      this.isViewInitialized = false;\n      this.eventQueue = [];\n      this.element = elementRef.nativeElement;\n    }\n    /**\r\n     * Return boundValue.\r\n     */\n\n\n    get bound() {\n      return this.boundValue;\n    }\n    /**\r\n     * @param value Cotains a new boundValue.\r\n     */\n\n\n    set bound(value) {\n      this.boundValue = value;\n    }\n    /**\r\n     * This sets a new model if the model changes\r\n     * @param value Value contains a new modelValue\r\n     */\n\n\n    set model(value) {\n      this.modelValue = value;\n\n      if (!this.differences && this.differs && value) {\n        this.differences = this.differs.find(this.modelValue).create();\n      }\n    }\n    /**\r\n     * Render method is the one in charge to set a refecence of k-widget and widget.\r\n     */\n\n\n    render() {\n      this.kWidget = kendo.jQuery(this.element)[this.widgetName](this.bound);\n      this.widget = kendo.jQuery(this.element).data(this.widgetName);\n    }\n    /**\r\n     * This is part of Angular lifecycle hook.\r\n     * By definition this is the one who detect and act upon changes that Angular can not or will not detect on its own.\r\n     * ngDoCheck notifies when model changes and send to applyChanges() method the changes.\r\n     */\n\n\n    ngDoCheck() {\n      if (this.differences) {\n        const changes = this.differences.diff(this.modelValue);\n\n        if (changes) {\n          this.applyChanges(changes);\n        }\n      }\n    }\n    /**\r\n     * This is part of Angular lifecycle hook.\r\n     * By definition this is the one who destroys a component.\r\n     * ngOnDestroy gets the native element reference and destroy its widget.\r\n     */\n\n\n    ngOnDestroy() {\n      const kElement = kendo.jQuery(this.element);\n\n      if (kElement.data(this.widgetName)) {\n        kElement.data(this.widgetName).destroy();\n        kElement.empty();\n      }\n    }\n    /**\r\n     * This function is a merge between a component property and a function,\r\n     * you have to use registerFunction when you need to execute a function after some property change\r\n     * @param property Contains the name of the property that you want to register,\r\n     * this string must has the first letter as a capital letter in order to follow the model's properties structure.\r\n     * @param fn contains the function required to call.\r\n     */\n\n\n    registerFunction(property, fn) {\n      const functionName = this.prefix + property;\n      this[functionName] = fn;\n    }\n    /**\r\n     * This is part of Angular lifecycle hook.\r\n     * By definition this is Called once after the first ngAfterContentChecked().\r\n     * Our ngAfterViewInit is the one incharge to process the eventQueue array whe the view is initialized.\r\n     */\n\n\n    ngAfterViewInit() {\n      this.isViewInitialized = true;\n      this.eventQueue.forEach(element => {\n        this[element['functionName']](element['value']);\n      });\n    }\n    /**\r\n     *  This method apply changes when any of the following actions in the model is triggered:\r\n     *  forEachRemovedItem: Something has been removed.\r\n     *  forEachAddedItem: Something has been added.\r\n     *  forEachChangedItem: Something has been changed.\r\n     * @param changes Value with any change in the model\r\n     */\n\n\n    applyChanges(changes) {\n      changes.forEachRemovedItem(record => this.updateComponent(record.key, null));\n      changes.forEachAddedItem(record => this.updateComponent(record.key, record.currentValue));\n      changes.forEachChangedItem(record => this.updateComponent(record.key, record.currentValue));\n    }\n    /**\r\n     * This function builds a registered function and push it to eventQueue array.\r\n     * @param key KeyValue corresponding to a property Name.\r\n     * @param value CurrentValue of a function.\r\n     */\n\n\n    updateComponent(key, value) {\n      const propertyName = normalizeName(key);\n      const functionName = this.prefix + propertyName;\n\n      if (this[functionName]) {\n        if (!this.isViewInitialized) {\n          this.eventQueue.push({\n            functionName,\n            value\n          });\n        } else {\n          this[functionName](value);\n        }\n      }\n    }\n\n  }\n\n  KendoComponent.ɵfac = function KendoComponent_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n\n  KendoComponent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: KendoComponent,\n    inputs: {\n      bound: \"bound\",\n      model: \"model\"\n    }\n  });\n  return KendoComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * This function sets name with the proper structure to be readed.\r\n * @param name  property Name\r\n */\n\n/* c8 ignore start */\n\n\nfunction normalizeName(name) {\n  let rname = 'dummy';\n\n  try {\n    rname = name.replace(/[\\./]/g, '_');\n  } catch (exception) {\n    WMLogger.instance().error(exception);\n  }\n\n  return rname;\n}\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n/* c8 ignore start */\n\n\nlet KendoListBoxComponent = /*#__PURE__*/(() => {\n  class KendoListBoxComponent extends KendoComponent {\n    constructor(ref, keyValueDiffer) {\n      super(keyValueDiffer, ref, 'kendoListBox');\n      this.ref = ref;\n      this.keyValueDiffer = keyValueDiffer;\n    }\n\n    ngOnInit() {\n      this.render();\n    }\n\n  }\n\n  KendoListBoxComponent.ɵfac = function KendoListBoxComponent_Factory(t) {\n    return new (t || KendoListBoxComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.KeyValueDiffers));\n  };\n\n  KendoListBoxComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: KendoListBoxComponent,\n    selectors: [[\"\", \"data-role\", \"listbox\"]],\n    inputs: {\n      role: \"role\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    attrs: _c43,\n    ngContentSelectors: _c34,\n    decls: 1,\n    vars: 0,\n    template: function KendoListBoxComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return KendoListBoxComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})(); // /***********************************************************************\n\n\nlet CommandButtonComponent = /*#__PURE__*/(() => {\n  let CommandButtonComponent = class CommandButtonComponent extends FontPropertiesComponent {\n    /* c8 ignore start */\n    constructor(changeDetector, renderer2, element, iconservice, lengthConverter, emitter, mTabOrderService, dataManagerTabSequenceService, acceleratorService, buttonsService, tabPageOrderService) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter, mTabOrderService, tabPageOrderService);\n      this.changeDetector = changeDetector;\n      this.renderer2 = renderer2;\n      this.element = element;\n      this.iconservice = iconservice;\n      this.emitter = emitter;\n      this.mTabOrderService = mTabOrderService;\n      this.dataManagerTabSequenceService = dataManagerTabSequenceService;\n      this.acceleratorService = acceleratorService;\n      this.buttonsService = buttonsService;\n      this.tabPageOrderService = tabPageOrderService;\n\n      if (this.element && this.element.nativeElement) {\n        this.element.nativeElement._childComponent = this;\n      }\n    }\n    /* c8 ignore start */\n\n\n    ngOnInit() {\n      super.ngOnInit();\n      this.registerTabService();\n      this.acceleratorService.registerInstance(this);\n\n      if (this.default) {\n        this.buttonsService.registerDefaultButton(this);\n      }\n\n      this.lastDefaultButton = this.default;\n\n      if (this.cancel) {\n        this.buttonsService.registerCancelButton(this);\n      }\n\n      this.lastCancelButton = this.cancel;\n    }\n    /* c8 ignore stop */\n\n\n    ngDoCheck() {\n      if (this.default !== this.lastDefaultButton) {\n        if (this.default) {\n          this.buttonsService.registerDefaultButton(this);\n        } else {\n          this.buttonsService.removeDefaultButton(this);\n        }\n\n        this.lastDefaultButton = this.default;\n      }\n\n      if (this.cancel !== this.lastCancelButton) {\n        if (this.cancel) {\n          this.buttonsService.registerCancelButton(this);\n        } else {\n          this.buttonsService.removeCancelButton(this);\n        }\n\n        this.lastCancelButton = this.cancel;\n      }\n    }\n\n    ngOnDestroy() {\n      this.acceleratorService.unregisterInstance(this);\n    }\n    /**\r\n     * Returns a valid style object to\r\n     * be applied according to the styling information set in the\r\n     * control's model\r\n     */\n\n\n    setMyStyle() {\n      if (this.emitter?.cancelDynamicStyles) {\n        return null;\n      }\n\n      const CustomStyle = {\n        TextSize: this.textSize,\n        Weight: this.weight,\n        FaceName: this.faceName\n      };\n      const style = super.setMyStyle(CustomStyle);\n      return style ? this.setIconStyle(style) : null;\n    }\n    /**\r\n     * Applies padding style if the element is a button with icon.\r\n     * @param style Style object.\r\n     */\n\n\n    setIconStyle(style) {\n      if (this.buttonItemName && style) {\n        style.padding = '0';\n      }\n\n      return style;\n    }\n    /**\r\n     * @description\r\n     * Gets the name of the icon to be represented in the button.\r\n     */\n\n\n    get buttonItemName() {\n      return this.iconservice.getItemName(this.model.PictureName);\n    }\n    /**\r\n     * @description\r\n     * Specifies the url of a image that is going to be loaded in the button.\r\n     */\n\n\n    get buttonItemNameSource() {\n      return this.iconservice.getItemNameSource(this.model.PictureName);\n    }\n    /**\r\n     * @description\r\n     * Returns the text value of the component model.\r\n     * @returns { string }\r\n     */\n\n\n    get text() {\n      return RemoveAmpersand.remove(this.model.Text, true);\n    }\n    /**\r\n     * Gets cancel\r\n     */\n\n\n    get cancel() {\n      return this.model.Cancel;\n    }\n    /**\r\n     * Gets default\r\n     */\n\n\n    get default() {\n      return this.model.Default ? this.model.Default : this.model.DefaultButton;\n    }\n    /**\r\n     * If button is part of a datamanager, exclude it from the tab order of the content\r\n     */\n\n\n    iscolumntab() {\n      return this.dataManagerContext ? -1 : this.tabOrder;\n    }\n    /**\r\n     * @description\r\n     * Gets focusable element inside of the component\r\n     */\n\n\n    get focusableElement() {\n      return this.el?.nativeElement?.lastElementChild;\n    }\n    /**\r\n     * @description\r\n     * Gets iconclass from icon service\r\n     * @returns {string}\r\n     */\n\n\n    get buttonClass() {\n      return `${this.class} ${this.buttonItemName ? this.iconservice.iconClass : ''}${this.default ? ' wmdefault ' : ''}`;\n    }\n\n    get innerHTML() {\n      return `${this.text ? this.text : ''}${this.buttonItemName ? this.buttonItemName : ''}`;\n    }\n\n    clickHandler(event) {\n      const data = new EventData(event, this.id, this.mapperId);\n      data.event['row'] = this.dataManagerContext ? this.dataManagerContext.rowIndex : -1;\n      this.clicked.emit(data);\n      this.clickedDatamanagerHandler(data);\n      Utils.preventPropagation(event);\n    }\n\n    clickedDatamanagerHandler(data) {\n      this.emitDataManagerEvent('buttonclicked', data);\n      this.sendObjectAtPointerCommand();\n    }\n\n    focusIn(event) {\n      /* c8 ignore else */\n      if (event) {\n        const data = new EventData({\n          target: this\n        }, this.id, this.mapperId);\n        this.getfocus.emit(data);\n      }\n    }\n\n    focusOut(event) {\n      const data = new EventData({\n        target: this\n      }, this.id, this.mapperId);\n      this.losefocus.emit(data);\n    }\n    /**\r\n     * Tab key handler to manage tab behavior.\r\n     * MainTabOrder or DataManagerTabSequence service determines which action\r\n     * should be performed after a tab key event.\r\n     * @param event TabKey event.\r\n     */\n\n\n    tabKeyHandler(event) {\n      Utils.preventPropagation(event);\n\n      if (this.emitter) {\n        this.dataManagerTabSequenceService.resolveTab(this, event.shiftKey, event);\n      } else {\n        this.currentTabService.resolveTab(this.tabNodeReference, event.shiftKey, event);\n      }\n    }\n\n  };\n\n  CommandButtonComponent.ɵfac = function CommandButtonComponent_Factory(t) {\n    return new (t || CommandButtonComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(IconsService), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(DataManagerTabSequenceService, 8), i0.ɵɵdirectiveInject(AcceleratorService, 8), i0.ɵɵdirectiveInject(ButtonsService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n  };\n\n  CommandButtonComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CommandButtonComponent,\n    selectors: [[\"wm-command-button\"]],\n    viewQuery: function CommandButtonComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c44, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.button = _t.first);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[\"kendoButton\", \"\", \"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"id\", \"disabled\", \"ngClass\", \"ngStyle\", \"imageUrl\", \"hostComponent\", \"primary\", \"tabindex\", \"innerHTML\", \"click\", \"keydown.tab\", \"keydown.shift.tab\", 4, \"ngIf\"], [\"kendoButton\", \"\", \"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"id\", \"disabled\", \"ngClass\", \"ngStyle\", \"imageUrl\", \"hostComponent\", \"primary\", \"tabindex\", \"innerHTML\", \"click\", \"keydown.tab\", \"keydown.shift.tab\"], [\"button\", \"\"]],\n    template: function CommandButtonComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, CommandButtonComponent_button_0_Template, 2, 9, \"button\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.model && ctx.visible);\n      }\n    },\n    directives: [i6.NgIf, i6$2.ButtonDirective, ControlsPowerDirective, FocusableDirective, i6.NgClass, i6.NgStyle],\n    styles: [\"\"]\n  });\n\n  __decorate([serverEvent('bnclicked'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], CommandButtonComponent.prototype, \"clickHandler\", null);\n\n  __decorate([serverEvent('clicked'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], CommandButtonComponent.prototype, \"clickedDatamanagerHandler\", null);\n\n  __decorate([serverEvent('bnsetfocus'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], CommandButtonComponent.prototype, \"focusIn\", null);\n\n  __decorate([serverEvent('bnkillfocus'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], CommandButtonComponent.prototype, \"focusOut\", null);\n\n  CommandButtonComponent = __decorate([dataTransfer(['cmdBtn']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, IconsService, LengthConverter, DataManagerEventService, MainTabOrderService, DataManagerTabSequenceService, AcceleratorService, ButtonsService, ContainerControlTabOrderService])], CommandButtonComponent);\n  return CommandButtonComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet CheckboxComponent = /*#__PURE__*/(() => {\n  let CheckboxComponent = class CheckboxComponent extends CommonStyleComponent {\n    /* c8 ignore start */\n    constructor(changeDetector, renderer2, element, lengthConverter, emitter, mTabOrderService, acceleratorService, tabPageOrderService) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter, mTabOrderService, tabPageOrderService);\n      this.changeDetector = changeDetector;\n      this.renderer2 = renderer2;\n      this.element = element;\n      this.emitter = emitter;\n      this.mTabOrderService = mTabOrderService;\n      this.acceleratorService = acceleratorService;\n      this.tabPageOrderService = tabPageOrderService;\n    }\n\n    ngOnInit() {\n      super.ngOnInit();\n      this.registerTabService();\n      this.acceleratorService.registerInstance(this);\n    }\n\n    ngAfterViewInit() {\n      super.ngAfterViewInit();\n\n      if (this.threeState && this.thirdState) {\n        const target = this.el.nativeElement.querySelector('.k-checkbox');\n        target.indeterminate = true;\n      }\n    }\n    /**\r\n     * @description\r\n     * Gets focusable element inside of the component\r\n     */\n\n\n    get focusableElement() {\n      return this.validateFocusElement(this.checkboxInput);\n    }\n    /**\r\n     * @description\r\n     * Returns the checked value of the model.\r\n     * @returns { boolean }\r\n     */\n\n\n    get checked() {\n      return this.model.Checked;\n    }\n    /**\r\n     * Sets the value of the checked property\r\n     */\n\n\n    set checked(value) {\n      this.model.Checked = value;\n    }\n    /**\r\n     * Returns true if the checkbox is automatic\r\n     */\n\n\n    get automatic() {\n      return this.model.Automatic;\n    }\n    /**\r\n     * Enables the checkbox third state value\r\n     */\n\n\n    get threeState() {\n      return this.model.ThreeState;\n    }\n    /**\r\n     * @description\r\n     * Returns the text value of the component model.\r\n     * @returns { string }\r\n     */\n\n\n    get text() {\n      return RemoveAmpersand.remove(this.model.Text);\n    }\n    /**\r\n     * Returns true if the checkbox is on the third state\r\n     */\n\n\n    get thirdState() {\n      return this.model.ThirdState;\n    }\n    /**\r\n     * Sets the thirdState value\r\n     */\n\n\n    set thirdState(value) {\n      this.model.ThirdState = value;\n    }\n    /**\r\n     * Handles the click event for the checkbox\r\n     * @param event The current event data\r\n     */\n\n\n    clickHandler(event) {\n      if (this.automatic !== false) {\n        if (this.threeState) {\n          // Handle the Third State\n          if (this.checked) {\n            // to unchecked\n            this.checked = false;\n            event.target.indeterminate = false;\n            this.thirdState = false;\n          } else if (this.thirdState) {\n            this.checked = true; // to checked\n\n            event.target.indeterminate = false;\n            this.thirdState = false;\n          } else {\n            this.thirdState = true; // to indeterminate\n\n            this.checked = false;\n            event.target.indeterminate = true;\n          }\n        } else {\n          this.checked = !this.checked;\n        }\n      }\n\n      this.setCheckedDOM();\n      super.clickHandler(event);\n    }\n    /**\r\n     * Updates DOM with checked property to ensure synchronization\r\n     * Sets checked dom\r\n     */\n\n\n    setCheckedDOM() {\n      /* c8 ignore else */\n      if (this.checkboxInput && this.checkboxInput.nativeElement) {\n        this.checkboxInput.nativeElement.checked = this.checked;\n      }\n    }\n\n    focusIn(event) {\n      super.focusIn(event);\n    }\n\n    focusOut(event) {\n      super.focusOut(event);\n    }\n    /**\r\n     * Method to allow each component to manage its own\r\n     * display property\r\n     */\n\n\n    getStyleDisplay() {\n      return 'inline-block';\n    }\n\n  };\n\n  CheckboxComponent.ɵfac = function CheckboxComponent_Factory(t) {\n    return new (t || CheckboxComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(AcceleratorService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n  };\n\n  CheckboxComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: CheckboxComponent,\n    selectors: [[\"wm-checkbox\"]],\n    viewQuery: function CheckboxComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c45, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.checkboxInput = _t.first);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 5,\n    vars: 1,\n    consts: [[3, \"ngClass\", \"tabindex\", \"ngStyle\", 4, \"ngIf\"], [\"rightTextTemplate\", \"\"], [\"leftTextTemplate\", \"\"], [3, \"ngClass\", \"tabindex\", \"ngStyle\"], [\"class\", \"containerCheckbox\", 4, \"ngIf\"], [1, \"containerCheckbox\"], [4, \"ngTemplateOutlet\"], [\"type\", \"checkbox\", \"wmPBControls\", \"\", \"wmFocusable\", \"\", 1, \"k-checkbox\", \"rightText\", 3, \"id\", \"disabled\", \"tabindex\", \"checked\", \"hostComponent\", \"change\", \"keydown.tab\", \"keydown.shift.tab\"], [\"checkbox\", \"\"], [1, \"k-checkbox-label\", 3, \"for\"], [\"type\", \"checkbox\", \"wmPBControls\", \"\", \"wmFocusable\", \"\", 1, \"k-checkbox\", 3, \"id\", \"disabled\", \"tabindex\", \"checked\", \"hostComponent\", \"change\", \"keydown.tab\", \"keydown.shift.tab\"], [1, \"k-checkbox-label\", \"leftTextCheckBox\", 3, \"for\"]],\n    template: function CheckboxComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, CheckboxComponent_div_0_Template, 3, 5, \"div\", 0);\n        i0.ɵɵtemplate(1, CheckboxComponent_ng_template_1_Template, 4, 7, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(3, CheckboxComponent_ng_template_3_Template, 4, 7, \"ng-template\", null, 2, i0.ɵɵtemplateRefExtractor);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.model && ctx.visible);\n      }\n    },\n    directives: [i6.NgIf, i6.NgClass, i6.NgStyle, i6.NgTemplateOutlet, ControlsPowerDirective, FocusableDirective, i9$1.LabelDirective],\n    styles: [\".rightText[_ngcontent-%COMP%]{display:inline-block}.leftText[_ngcontent-%COMP%]{display:inline!important;padding-right:5px;margin:0;min-height:16px;line-height:22px;vertical-align:text-top;align-items:flex-start;position:relative;cursor:pointer}.containerCheckbox[_ngcontent-%COMP%]{display:inline}\"]\n  });\n\n  __decorate([NotifyChange('Checked'), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], CheckboxComponent.prototype, \"checked\", null);\n\n  __decorate([NotifyChange('ThirdState'), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], CheckboxComponent.prototype, \"thirdState\", null);\n\n  __decorate([serverEvent('bnclicked'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], CheckboxComponent.prototype, \"clickHandler\", null);\n\n  __decorate([serverEvent('bnsetfocus'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], CheckboxComponent.prototype, \"focusIn\", null);\n\n  __decorate([serverEvent('bnkillfocus'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], CheckboxComponent.prototype, \"focusOut\", null);\n\n  CheckboxComponent = __decorate([dataTransfer(['chkBx']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, LengthConverter, DataManagerEventService, MainTabOrderService, AcceleratorService, ContainerControlTabOrderService])], CheckboxComponent);\n  return CheckboxComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ComplexNumericEditMaskComponent = /*#__PURE__*/(() => {\n  let ComplexNumericEditMaskComponent = class ComplexNumericEditMaskComponent extends BaseMaskComponent {\n    /* c8 ignore start */\n    constructor(changeDetector, renderer2, element, lengthConverter, emitter, mTabOService, tabPageOrderService) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter, mTabOService, tabPageOrderService);\n      this.mTabOService = mTabOService;\n      this.tabPageOrderService = tabPageOrderService;\n    }\n    /**\r\n     * @description\r\n     * Returns the mask processed by the EditMaskService.\r\n     * @returns { string }\r\n     */\n\n\n    get mask() {\n      return EditMaskService.getNumericComplexMask(this.model.Mask);\n    }\n    /**\r\n     * @description\r\n     * Returns the max length of characters that the mask allows.\r\n     * @returns { number }\r\n     */\n\n\n    get maxlength() {\n      return this.model.Maxlength ? this.model.Maxlength : null;\n    }\n    /**\r\n     * @description\r\n     * Gets focusable element inside of the component\r\n     */\n\n\n    get focusableElement() {\n      return this.complexEl;\n    }\n\n  };\n\n  ComplexNumericEditMaskComponent.ɵfac = function ComplexNumericEditMaskComponent_Factory(t) {\n    return new (t || ComplexNumericEditMaskComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n  };\n\n  ComplexNumericEditMaskComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ComplexNumericEditMaskComponent,\n    selectors: [[\"wm-complex-numeric-edit-mask\"]],\n    viewQuery: function ComplexNumericEditMaskComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c46, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.complexEl = _t.first);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"ngClass\", \"mask\", \"ngModel\", \"hostComponent\", \"tabindex\", \"disabled\", \"change\", \"ngModelChange\", \"keydown.tab\", \"keydown.shift.tab\", 4, \"ngIf\"], [\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"ngClass\", \"mask\", \"ngModel\", \"hostComponent\", \"tabindex\", \"disabled\", \"change\", \"ngModelChange\", \"keydown.tab\", \"keydown.shift.tab\"], [\"complexEl\", \"\"]],\n    template: function ComplexNumericEditMaskComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ComplexNumericEditMaskComponent_kendo_maskedtextbox_0_Template, 2, 6, \"kendo-maskedtextbox\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.model);\n      }\n    },\n    directives: [i5$1.MaskedTextBoxComponent, i6.NgIf, ControlsPowerDirective, FocusableDirective, i6.NgClass, i9.NgControlStatus, i9.NgModel],\n    styles: [\".borderClass .k-textbox{border-width:0px}\"]\n  });\n  ComplexNumericEditMaskComponent = __decorate([dataTransfer(['clxNuEdtMsk']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, LengthConverter, DataManagerEventService, MainTabOrderService, ContainerControlTabOrderService])], ComplexNumericEditMaskComponent);\n  return ComplexNumericEditMaskComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet DateTimeEditMaskComponent = /*#__PURE__*/(() => {\n  let DateTimeEditMaskComponent = class DateTimeEditMaskComponent extends BaseMaskComponent {\n    /* c8 ignore start */\n    constructor(changeDetector, renderer2, element, lengthConverter, emitter, mTabOService, userObjectEventService, tabPageOrderService) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter, mTabOService, tabPageOrderService);\n      this.mTabOService = mTabOService;\n      this.userObjectEventService = userObjectEventService;\n      this.tabPageOrderService = tabPageOrderService;\n      /* c8 ignore stop */\n\n      this.KeyDown = new EventEmitter();\n    }\n    /**\r\n     * @description\r\n     * Gets default mask\r\n     */\n\n\n    get defaultMask() {\n      return EditMaskService.isDateMask(this.maskDataType) ? 'MM/dd/yyyy' : 'hh:mm:ss';\n    }\n    /**\r\n     * @description\r\n     * Gets focusable element inside of the component\r\n     */\n\n\n    get focusableElement() {\n      return this.dateTimeEdit;\n    }\n    /**\r\n     * @description\r\n     * Returns a boolean value indicating if the control has a DropDownCalendar.\r\n     * @returns { boolean }\r\n     */\n\n\n    get dropdownCalendar() {\n      return this.model.DropdownCalendar;\n    }\n    /* Return undefined to show the formatplaceholder, otherwise show a empty field */\n\n\n    get emptyPlaceHolder() {\n      if (!this.spin) {\n        return this.model.Text === '00/00/0000' ? '00/00/0000' : '';\n      }\n\n      return undefined;\n    }\n    /* property to show or hide the spin */\n\n\n    get spin() {\n      return this.model.Spin;\n    }\n    /**\r\n     * @description\r\n     * Returns the date value of the model.\r\n     * @returns { Date }\r\n     */\n\n\n    get value() {\n      const currDate = parseDate(this.model.Text, this.mask);\n\n      if (currDate instanceof Date && !Number.isNaN(currDate.getTime())) {\n        const newDate = parseDate(this.model.Text, this.mask);\n\n        if (this.date == null || this.date.getTime() !== newDate.getTime()) {\n          this.date = newDate;\n        }\n      } else {\n        this.date = undefined;\n      }\n\n      return this.date;\n    }\n    /**\r\n     * @description\r\n     * Sets a date value in the component model.\r\n     * @param value A date with new value to set model property.\r\n     */\n\n\n    set value(value) {\n      this.model.Text = value ? kendo.toString(formatDate(value, this.mask), this.mask) : '';\n    }\n    /**\r\n     * @description\r\n     * Returns the mask processed by the EditMaskService.\r\n     * @returns { string }\r\n     */\n\n\n    get mask() {\n      return this.model && this.model.Mask ? DateTimeFunctions.processPBDateTimeMaskFormat(this.model.Mask) : this.defaultMask;\n    }\n\n    isInnerElementPresent() {\n      return this.dateInputComponent && this.dateInputComponent.dateInput && this.dateInputComponent.dateInput.nativeElement;\n    }\n    /**\r\n     * @description\r\n     * Returns a valid style object to\r\n     * be applied according to the styling information set in the control's model\r\n     * @returns { [key: string]: any; }\r\n     */\n\n\n    setMyStyle(style) {\n      const myStyle = super.setMyStyle(style);\n\n      if (this.isInnerElementPresent()) {\n        this.dateInputComponent.dateInput.nativeElement.style.color = this.textColor;\n      }\n    }\n    /**\r\n     * Method to allow component to manage its own\r\n     * display property\r\n     */\n\n\n    getStyleDisplay() {\n      return 'flex';\n    }\n\n    clickHandler(event) {\n      super.clickHandler(event);\n    }\n\n    focusIn(event) {\n      this.currentValue = this.value;\n      super.focusIn(event);\n    }\n\n    focusOut(event) {\n      super.focusOut(event);\n    }\n    /**\r\n     * Handles blur\r\n     * Validates if the value has changed before triggering the\r\n     * enmodified event.\r\n     */\n\n\n    handleBlur() {\n      if (this.currentValue !== this.value) {\n        this.currentValue = this.value;\n        super.handleBlur();\n      }\n    }\n    /**\r\n     * Keys down event. If it is inside of\r\n     * a UserObject the event is triggered by UserObject too.\r\n     * @param event KeyBoard event object.\r\n     */\n\n\n    keyDown(event) {\n      this.KeyDown.emit(event);\n\n      if (this.userObjectEventService.instance) {\n        this.userObjectEventService.instance.keyDownHandler(event);\n      }\n    }\n\n    get formatPlaceholder() {\n      const obj = DateTimeFunctions.generateFormatPlaceholder(this.mask);\n      return DateTimeFunctions.GenerateZeroObjects(obj);\n    }\n    /**\r\n     * Override the parentElement\r\n     */\n\n\n    get parentElement() {\n      return this.renderer.parentNode(this.renderer.parentNode(this.el.nativeElement));\n    }\n    /**\r\n     * Tab key handler to manage tab behavior.\r\n     * DataManagerTabSequence service determines which action\r\n     * should be performed after a tab key event.\r\n     * @param event TabKey event.\r\n     */\n\n\n    tabKeyHandler(event) {\n      super.tabKeyHandler(event);\n      const component = this.dateInputComponent || this.datePickerComponent;\n      /* c8 ignore else */\n\n      if (component) {\n        tabReadOnly(component, this, this.disabled);\n      }\n    }\n\n  };\n\n  DateTimeEditMaskComponent.ɵfac = function DateTimeEditMaskComponent_Factory(t) {\n    return new (t || DateTimeEditMaskComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(UserObjectEventService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n  };\n\n  DateTimeEditMaskComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: DateTimeEditMaskComponent,\n    selectors: [[\"wm-date-time-edit-mask\"]],\n    viewQuery: function DateTimeEditMaskComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c47, 5);\n        i0.ɵɵviewQuery(DateInputComponent, 5);\n        i0.ɵɵviewQuery(DatePickerComponent, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dateTimeEdit = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dateInputComponent = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.datePickerComponent = _t.first);\n      }\n    },\n    outputs: {\n      KeyDown: \"KeyDown\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 2,\n    vars: 2,\n    consts: [[\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"ngStyle\", \"disabled\", \"formatPlaceholder\", \"placeholder\", \"ngClass\", \"value\", \"format\", \"hostComponent\", \"tabindex\", \"spinners\", \"blur\", \"valueChange\", \"keydown.tab\", \"keydown.shift.tab\", \"keydown\", 4, \"ngIf\"], [\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"ngStyle\", \"disabled\", \"formatPlaceholder\", \"placeholder\", \"ngClass\", \"value\", \"format\", \"hostComponent\", \"tabindex\", \"blur\", \"valueChange\", \"keydown.tab\", \"keydown.shift.tab\", \"keydown\", 4, \"ngIf\"], [\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"ngStyle\", \"disabled\", \"formatPlaceholder\", \"placeholder\", \"ngClass\", \"value\", \"format\", \"hostComponent\", \"tabindex\", \"spinners\", \"blur\", \"valueChange\", \"keydown.tab\", \"keydown.shift.tab\", \"keydown\"], [\"dateTimeEdit\", \"\"], [\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"ngStyle\", \"disabled\", \"formatPlaceholder\", \"placeholder\", \"ngClass\", \"value\", \"format\", \"hostComponent\", \"tabindex\", \"blur\", \"valueChange\", \"keydown.tab\", \"keydown.shift.tab\", \"keydown\"]],\n    template: function DateTimeEditMaskComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, DateTimeEditMaskComponent_kendo_dateinput_0_Template, 2, 10, \"kendo-dateinput\", 0);\n        i0.ɵɵtemplate(1, DateTimeEditMaskComponent_kendo_datepicker_1_Template, 2, 9, \"kendo-datepicker\", 1);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", !ctx.dropdownCalendar);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.dropdownCalendar);\n      }\n    },\n    directives: [i5.DateInputComponent, i5.DatePickerComponent, i6.NgIf, ControlsPowerDirective, FocusableDirective, i6.NgStyle, i6.NgClass],\n    styles: [\".borderClass>span{border-width:0}\"]\n  });\n\n  __decorate([NotifyChange('Text'), __metadata(\"design:type\", Date), __metadata(\"design:paramtypes\", [Date])], DateTimeEditMaskComponent.prototype, \"value\", null);\n\n  __decorate([serverEvent('lbuttondown'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], DateTimeEditMaskComponent.prototype, \"clickHandler\", null);\n\n  __decorate([serverEvent('ensetfocus'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], DateTimeEditMaskComponent.prototype, \"focusIn\", null);\n\n  __decorate([serverEvent('enkillfocus'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], DateTimeEditMaskComponent.prototype, \"focusOut\", null);\n\n  DateTimeEditMaskComponent = __decorate([dataTransfer(['dteTmEdtMsk']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, LengthConverter, DataManagerEventService, MainTabOrderService, UserObjectEventService, ContainerControlTabOrderService])], DateTimeEditMaskComponent);\n  return DateTimeEditMaskComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar DropDownListBoxComponent_1;\nlet DropDownListBoxComponent = DropDownListBoxComponent_1 = class DropDownListBoxComponent extends ListBoxBaseComponent {\n  constructor(changeDetector, serviceRef, renderer2, element, lengthConverter, emitter, mTabOrderService, tabPageOrderService) {\n    super(changeDetector, renderer2, element, lengthConverter, emitter, mTabOrderService, tabPageOrderService);\n    this.changeDetector = changeDetector;\n    this.serviceRef = serviceRef;\n    this.renderer2 = renderer2;\n    this.element = element;\n    this.emitter = emitter;\n    this.mTabOrderService = mTabOrderService;\n    this.tabPageOrderService = tabPageOrderService;\n    /**\r\n     * Default url to collect items.\r\n     */\n\n    this.defaultDataUrl = 'api/dropdownlistbox';\n    this.SelectionChanged = new EventEmitter();\n    this.Modified = new EventEmitter();\n    /**\r\n     * Normalizes the custom value received by the input.\r\n     */\n\n    this.valueNormalizer = text => text.pipe(map(txt => {\n      return {\n        value: -1,\n        text: txt\n      };\n    }));\n  }\n\n  static modifiedArgsExtractor(event, component) {\n    return [component.items.indexOf(event) + 1]; // Adding 1 to correct base one index.\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.registerTabService();\n    this.fetchItems();\n  }\n\n  ngAfterViewInit() {\n    super.ngAfterViewInit();\n    const input = this.element.nativeElement.querySelector('.k-input');\n    this.renderer2.setAttribute(input, 'maxlength', String(this.limit));\n  }\n  /**\r\n   * Override the style for the dropdownlistbox\r\n   */\n\n\n  setMyStyle() {\n    const style = super.setMyStyle();\n\n    if (this.serviceRef.config.webMapVersion === WMConstants.version5 && this.combo && this.combo.wrapper) {\n      const element = this.combo.wrapper.nativeElement || this.combo.wrapper;\n      const value = Utils.getComputedStyleNumber(element, 'fontSize', 11);\n      style.height = `${value * 2}px`;\n    }\n\n    this.setBackground();\n    return style;\n  }\n\n  ngDoCheck() {\n    if (this.dirty) {\n      this.fetchItems();\n      this.dirty = false;\n    }\n  }\n\n  setBackground() {\n    if (this.combo && this.combo.hostElement && this.combo.hostElement.firstElementChild) {\n      this.renderer2.setStyle(this.combo.hostElement.firstElementChild, 'background-color', this.backColor);\n    }\n  }\n\n  popupSettings() {\n    return '{width: ' + (!!this.width ? this.width + 'px' : \"'auto'\") + '}';\n  }\n  /**\r\n   * @description\r\n   * Gets focusable element inside of the component\r\n   */\n\n\n  get focusableElement() {\n    return this.combo;\n  }\n  /**\r\n   * @description\r\n   * Returns a collection with the items received in the model or an API.\r\n   */\n\n\n  fetchItems() {\n    this.loading = true;\n    this.serviceRef.fetch(this.url, this.id, null, this.model, this.itemsExtractor.bind(this)).subscribe(data => {\n      this.items = data.data;\n      this.loading = false;\n      this.detectChanges();\n    });\n  }\n  /**\r\n   * Extracts the Items collection data from model component.\r\n   * @param model\r\n   */\n\n\n  itemsExtractor(model) {\n    return model.Items ? model.Items.map(item => ({\n      text: item,\n      value: item\n    })) : null;\n  }\n  /**\r\n   * Returns the data source URL of this component.\r\n   */\n\n\n  get url() {\n    if (this.dataUrl && this.dataUrl.length > 0) {\n      return this.dataUrl;\n    }\n\n    return this.defaultDataUrl;\n  }\n  /**\r\n   * @description\r\n   * Returns a boolean value indicating if the control is editable.\r\n   * @returns { boolean }\r\n   */\n\n\n  get allowEdit() {\n    return this.model.AllowEdit;\n  }\n  /**\r\n   * @description\r\n   * Returns a string value that represents the text model property.\r\n   * @returns { string }\r\n   */\n\n\n  get text() {\n    return this.model.Text;\n  }\n  /**\r\n   * Sets the Text model property.\r\n   * @param value The new text value.\r\n   */\n\n\n  set text(value) {\n    this.model.Text = value;\n  }\n  /**\r\n   * @description\r\n   * Returns a string value that represents the selected model property.\r\n   * @returns { string }\r\n   */\n\n\n  get selected() {\n    return this.model.Selected;\n  }\n  /**\r\n   * Sets the Selected model property.\r\n   * @param value The new selected value.\r\n   */\n\n\n  set selected(value) {\n    this.model.Selected = value;\n  }\n  /**\r\n   * @description\r\n   * Returns the selected item. Returns 'null' if there isn't a selected item.\r\n   * @returns { any }\r\n   */\n\n\n  get selectedItem() {\n    let currentItem = null;\n\n    if ((this.text || this.selected) && this.items) {\n      currentItem = this.findInItems();\n\n      if (!currentItem && this.allowEdit) {\n        currentItem = this.assignCustomValue(this.text);\n      }\n    }\n\n    return currentItem;\n  }\n  /**\r\n   * @description\r\n   * Sets the selected item of the model.\r\n   * @param value The item to set model property.\r\n   */\n\n\n  set selectedItem(value) {\n    if (this.items && value) {\n      const index = this.items.indexOf(value);\n      this.text = this.selected = index !== -1 || this.allowEdit ? Utils.convertCase(value.text, this.case) : '';\n    }\n  }\n  /**\r\n   * @description\r\n   * Assigns a new value to the custom value class field.\r\n   * @param value The string value to set 'customValue' field.\r\n   */\n\n\n  assignCustomValue(value) {\n    if (!this.customValue) {\n      this.customValue = {\n        text: value,\n        value\n      };\n    } else {\n      this.customValue.text = this.customValue.value = value;\n    }\n\n    return this.customValue;\n  }\n  /**\r\n   * @description\r\n   * Finds an element by text in the items collection.\r\n   */\n\n\n  findInItems() {\n    return this.items.find(item => item.value === this.text || item.value === this.selected);\n  }\n  /**\r\n   * @event selectionchanged The selection changed event implementation.\r\n   * This event is triggered when selected index changes.\r\n   * @param event The event received by the component.\r\n   */\n\n\n  selectionChanged(event) {\n    if (!event) {\n      return true;\n    }\n\n    this.text = this.selected = event.text;\n    this.SelectionChanged.emit(new EventData(event, this.id, this.mapperId));\n  }\n  /**\r\n   * @event modified The modified event implementation.\r\n   * This event is triggered when selected index changes or text property is modified\r\n   * by the user.\r\n   * @param event The event received by the component.\r\n   */\n\n\n  modified(event) {\n    if (!event) {\n      return true;\n    }\n\n    this.Modified.emit(new EventData(event, this.id, this.mapperId));\n  }\n\n  focusIn(event) {\n    super.focusIn(event);\n  }\n\n  focusOut(event) {\n    super.focusOut(event);\n  }\n  /**\r\n   * Gets whether is container\r\n   */\n\n\n  get isContainer() {\n    return false;\n  }\n\n};\n\nDropDownListBoxComponent.ɵfac = function DropDownListBoxComponent_Factory(t) {\n  return new (t || DropDownListBoxComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.WebMapService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n};\n\nDropDownListBoxComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: DropDownListBoxComponent,\n  selectors: [[\"wm-dropdownlistbox\"]],\n  viewQuery: function DropDownListBoxComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c48, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.combo = _t.first);\n    }\n  },\n  inputs: {\n    dataUrl: \"dataUrl\"\n  },\n  outputs: {\n    SelectionChanged: \"SelectionChanged\",\n    Modified: \"Modified\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 2,\n  vars: 2,\n  consts: [[\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"data\", \"ngModel\", \"ngClass\", \"loading\", \"textField\", \"valueField\", \"allowCustom\", \"valueNormalizer\", \"readonly\", \"disabled\", \"ngStyle\", \"hostComponent\", \"tabindex\", \"ngModelChange\", \"valueChange\", \"selectionChange\", \"keydown.tab\", \"keydown.shift.tab\", 4, \"ngIf\"], [\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"filterable\", \"data\", \"ngModel\", \"textField\", \"valueField\", \"readonly\", \"disabled\", \"ngClass\", \"popupSettings\", \"hostComponent\", \"ngStyle\", \"tabindex\", \"ngModelChange\", \"selectionChange\", \"valueChange\", \"keydown.tab\", \"keydown.shift.tab\", 4, \"ngIf\"], [\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"data\", \"ngModel\", \"ngClass\", \"loading\", \"textField\", \"valueField\", \"allowCustom\", \"valueNormalizer\", \"readonly\", \"disabled\", \"ngStyle\", \"hostComponent\", \"tabindex\", \"ngModelChange\", \"valueChange\", \"selectionChange\", \"keydown.tab\", \"keydown.shift.tab\"], [\"combo\", \"\"], [\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"filterable\", \"data\", \"ngModel\", \"textField\", \"valueField\", \"readonly\", \"disabled\", \"ngClass\", \"popupSettings\", \"hostComponent\", \"ngStyle\", \"tabindex\", \"ngModelChange\", \"selectionChange\", \"valueChange\", \"keydown.tab\", \"keydown.shift.tab\"]],\n  template: function DropDownListBoxComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, DropDownListBoxComponent_kendo_combobox_0_Template, 2, 13, \"kendo-combobox\", 0);\n      i0.ɵɵtemplate(1, DropDownListBoxComponent_kendo_dropdownlist_1_Template, 2, 12, \"kendo-dropdownlist\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.allowEdit);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.allowEdit);\n    }\n  },\n  directives: [i6$1.ComboBoxComponent, i6$1.DropDownListComponent, i6.NgIf, ControlsPowerDirective, FocusableDirective, i9.NgControlStatus, i9.NgModel, i6.NgClass, i6.NgStyle],\n  styles: [\".borderClass>span{border-width:0}\"]\n});\n\n__decorate([NotifyChange('Text'), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DropDownListBoxComponent.prototype, \"text\", null);\n\n__decorate([NotifyChange('Selected'), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], DropDownListBoxComponent.prototype, \"selected\", null);\n\n__decorate([serverEvent('cbnselchange', DropDownListBoxComponent_1.modifiedArgsExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", Boolean)], DropDownListBoxComponent.prototype, \"selectionChanged\", null);\n\n__decorate([serverEvent('cbnmodified'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", Boolean)], DropDownListBoxComponent.prototype, \"modified\", null);\n\n__decorate([serverEvent('cbnsetfocus'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], DropDownListBoxComponent.prototype, \"focusIn\", null);\n\n__decorate([serverEvent('cbnkillfocus'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], DropDownListBoxComponent.prototype, \"focusOut\", null);\n\nDropDownListBoxComponent = DropDownListBoxComponent_1 = __decorate([dataTransfer(['drpDwnLstBx']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, WebMapService, Renderer2, ElementRef, LengthConverter, DataManagerEventService, MainTabOrderService, ContainerControlTabOrderService])], DropDownListBoxComponent);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet GroupBoxComponent = /*#__PURE__*/(() => {\n  let GroupBoxComponent = class GroupBoxComponent extends CommonStyleComponent {\n    /* c8 ignore start */\n    constructor(changeDetector, renderer2, element, lengthConverter, emitter, mTabOrderService, tabPageOrderService) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter, mTabOrderService, tabPageOrderService);\n      this.changeDetector = changeDetector;\n      this.renderer2 = renderer2;\n      this.element = element;\n      this.emitter = emitter;\n      this.mTabOrderService = mTabOrderService;\n      this.tabPageOrderService = tabPageOrderService;\n    }\n\n    ngOnInit() {\n      super.ngOnInit();\n      const groupName = this.tabOrder != -1 ? `radio_${this.name}` : null;\n      this.registerTabService(groupName);\n    }\n    /**\r\n     * @description\r\n     * Returns the text value of the component model.\r\n     * @returns { string }\r\n     */\n\n\n    get text() {\n      return RemoveAmpersand.remove(this.model.Text);\n    }\n    /**\r\n     * Gets whether is container\r\n     */\n\n\n    get isContainer() {\n      return true;\n    }\n    /**\r\n     * Gets whether is Group Box\r\n     */\n\n\n    get isGroupBox() {\n      return true;\n    }\n    /**\r\n     * Applies focus to inner subscribe component if it exists\r\n     * @param [isShiftPressed] Optional parameter used by TabOrder service\r\n     * @returns true if focus was applied\r\n     */\n\n\n    applyFocus(isShiftPressed) {\n      const component = this.currentTabService.getGroupFocusComponent(this.name, isShiftPressed);\n\n      if (component) {\n        component.applyFocus();\n        return true;\n      }\n\n      return false;\n    }\n    /**\r\n     * Applies focus control to inner component from TabOrder service\r\n     * @param [isShiftPressed] Optional parameter used by TabOrder service\r\n     */\n\n\n    applyFocusControl(isShiftPressed) {\n      if (!this.applyFocus(isShiftPressed)) {\n        this.currentTabService.resolveTab(this.tabNodeReference, isShiftPressed);\n      }\n    }\n    /**\r\n     * @description\r\n     * The 'classHandler' function links the outer css class with disabledClass constant css class.\r\n     * @returns { string }\r\n     */\n\n\n    classHandler() {\n      return `${this.class} ${this.disabled ? 'disabledClass' : ''}`;\n    }\n\n  };\n\n  GroupBoxComponent.ɵfac = function GroupBoxComponent_Factory(t) {\n    return new (t || GroupBoxComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n  };\n\n  GroupBoxComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: GroupBoxComponent,\n    selectors: [[\"wm-group-box\"]],\n    viewQuery: function GroupBoxComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c49, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.groupbox = _t.first);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c34,\n    decls: 1,\n    vars: 1,\n    consts: [[\"class\", \"wm-container\", \"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"ngClass\", \"ngStyle\", \"hostComponent\", \"tabindex\", \"keydown.tab\", \"keydown.shift.tab\", 4, \"ngIf\"], [\"wmPBControls\", \"\", \"wmFocusable\", \"\", 1, \"wm-container\", 3, \"ngClass\", \"ngStyle\", \"hostComponent\", \"tabindex\", \"keydown.tab\", \"keydown.shift.tab\"], [\"groupbox\", \"\"], [1, \"group-legend\"]],\n    template: function GroupBoxComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵtemplate(0, GroupBoxComponent_fieldset_0_Template, 5, 5, \"fieldset\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.model);\n      }\n    },\n    directives: [i6.NgIf, ControlsPowerDirective, FocusableDirective, i6.NgClass, i6.NgStyle],\n    styles: [\"fieldset[_ngcontent-%COMP%]{padding:0;pointer-events:none;background-color:transparent!important}.group-legend[_ngcontent-%COMP%]{color:inherit}\"]\n  });\n  GroupBoxComponent = __decorate([dataTransfer(['grpBx']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, LengthConverter, DataManagerEventService, MainTabOrderService, ContainerControlTabOrderService])], GroupBoxComponent);\n  return GroupBoxComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet StaticTextComponent = /*#__PURE__*/(() => {\n  let StaticTextComponent = class StaticTextComponent extends CommonStyleComponent {\n    /* c8 ignore start */\n    constructor(changeDetector, renderer2, element, lengthConverter, emitter, mainTabOrder, dataManagerTabSequenceService, tabPageOrderService) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter, mainTabOrder, tabPageOrderService);\n      this.changeDetector = changeDetector;\n      this.renderer2 = renderer2;\n      this.element = element;\n      this.emitter = emitter;\n      this.mainTabOrder = mainTabOrder;\n      this.dataManagerTabSequenceService = dataManagerTabSequenceService;\n      this.tabPageOrderService = tabPageOrderService;\n      this.doubleClicked = new EventEmitter();\n\n      if (this.element && this.element.nativeElement) {\n        this.element.nativeElement._childComponent = this;\n      }\n    }\n\n    ngOnInit() {\n      super.ngOnInit();\n      this.registerTabService();\n    }\n    /**\r\n     * @description\r\n     * Gets focusable element inside of the component\r\n     */\n\n\n    get focusableElement() {\n      return this.validateFocusElement(this.staticText);\n    }\n    /**\r\n     * @description\r\n     * The 'classHandler' function links the outer css class with borderClass constant css class.\r\n     * @returns { string }\r\n     */\n\n\n    classHandler() {\n      return `${this.class} ${BaseControlBaseComponent.disableHighLightCssClass} ${this.border ? 'borderClass' : ''} ${this.isOnGrid ? 'labelOnGrid' : ''}`;\n    }\n    /**\r\n     * @description\r\n     * Returns the text value of the component model.\r\n     * @returns { string }\r\n     */\n\n\n    get text() {\n      return RemoveAmpersand.remove(this.model.Text);\n    }\n    /**\r\n     * @description\r\n     * Returns if the text has change line character.\r\n     * @returns { string }\r\n     */\n\n\n    get multiline() {\n      return this.text ? this.text.includes('\\r') : false;\n    }\n    /**\r\n     * @description\r\n     * Method to apply style to component with custom alignment\r\n     */\n\n\n    setMyStyle() {\n      if (this.emitter?.cancelDynamicStyles) {\n        return null;\n      }\n\n      const style = super.setMyStyle();\n      const alignment = this.alignment;\n      const underline = this.underline;\n\n      if (alignment) {\n        style['text-align'] = alignment;\n      }\n\n      if (underline) {\n        style['text-decoration'] = underline;\n      }\n\n      if ((!this.dataManagerEmitter || this.myCurrentDataManager != null) && this.model.Border && this.model.BorderStyle != null) {\n        // if it is not within a datamanager, border should be used as a boolean\n        style['border'] = Utils.getBorderStyle(this.model.BorderStyle);\n        style['box-shadow'] = Utils.getBoxShadow(this.model.BorderStyle);\n      } else {\n        style['color'] = this.dataManagerContextVisuals && this.dataManagerContextVisuals.Color ? this.dataManagerContextVisuals.Color : this.textColor;\n\n        if (this.model.Border != null) {\n          style['border'] = Utils.getBorderStyle(this.model.Border);\n          style['box-shadow'] = Utils.getBoxShadow(this.model.Border);\n        }\n      }\n\n      return style;\n    }\n    /**\r\n     * Triggers doubleclicked event\r\n     */\n\n\n    doubleClickHandler(event) {\n      const data = new EventData(event, this.id, this.mapperId);\n      this.sendObjectAtPointerCommand();\n      this.emitDataManagerEvent('doubleclick', data);\n      this.doubleClicked.emit(data);\n    }\n\n    clickHandler(event) {\n      if (event.detail === 1) {\n        const data = new EventData(event, this.id, this.mapperId);\n        this.clicked.emit(data);\n        this.clickedDatamanagerHandler(data);\n        Utils.preventPropagation(event);\n      } else if (event.detail === 2) {\n        this.doubleClickHandler(event);\n      }\n    }\n    /**\r\n     * Triggered when is inside datamanager\r\n     * @param data event data\r\n     */\n\n\n    clickedDatamanagerHandler(data) {\n      data.mapperId = 'dwText';\n      this.emitDataManagerEvent('clickedNotColumnControl', data);\n      this.sendObjectAtPointerCommand();\n    }\n\n    focusIn(event) {\n      /* c8 ignore else */\n      if (event) {\n        const data = new EventData({\n          target: this\n        }, this.id, this.mapperId);\n        this.getfocus.emit(data);\n      }\n    }\n\n    focusOut(event) {\n      const data = new EventData({\n        target: this\n      }, this.id, this.mapperId);\n      this.losefocus.emit(data);\n    }\n    /**\r\n     * Tab key handler to manage tab behavior.\r\n     * MainTabOrder or DataManagerTabSequence service determines which action\r\n     * should be performed after a tab key event.\r\n     * @param event TabKey event.\r\n     */\n\n\n    tabKeyHandler(event) {\n      Utils.preventPropagation(event);\n\n      if (this.emitter) {\n        this.dataManagerTabSequenceService.resolveTab(this, event.shiftKey, event);\n      } else {\n        this.currentTabService.resolveTab(this.tabNodeReference, event.shiftKey, event);\n      }\n    }\n\n  };\n\n  StaticTextComponent.ɵfac = function StaticTextComponent_Factory(t) {\n    return new (t || StaticTextComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(DataManagerTabSequenceService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n  };\n\n  StaticTextComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: StaticTextComponent,\n    selectors: [[\"wm-static-text\"]],\n    viewQuery: function StaticTextComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c50, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.staticText = _t.first);\n      }\n    },\n    outputs: {\n      doubleClicked: \"doubleClicked\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 2,\n    vars: 2,\n    consts: [[\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"ngClass\", \"ngStyle\", \"hostComponent\", \"tabindex\", \"click\", \"keydown.tab\", \"keydown.shift.tab\", 4, \"ngIf\"], [\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"ngClass\", \"ngStyle\", \"hostComponent\", \"tabindex\", \"click\", \"keydown.tab\", \"keydown.shift.tab\"], [\"staticText\", \"\"]],\n    template: function StaticTextComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, StaticTextComponent_label_0_Template, 3, 6, \"label\", 0);\n        i0.ɵɵtemplate(1, StaticTextComponent_textarea_1_Template, 2, 6, \"textarea\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.model && ctx.visible && !ctx.multiline);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.model && ctx.visible && ctx.multiline);\n      }\n    },\n    directives: [i6.NgIf, ControlsPowerDirective, FocusableDirective, i6.NgClass, i6.NgStyle],\n    styles: [\".borderClass[_ngcontent-%COMP%]{border:1px solid rgba(0,0,0,.08)}.labelOnGrid[_ngcontent-%COMP%]{width:100%}\"]\n  });\n\n  __decorate([serverEvent('bndoubleclicked'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], StaticTextComponent.prototype, \"doubleClickHandler\", null);\n\n  __decorate([serverEvent('bnclicked'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], StaticTextComponent.prototype, \"clickHandler\", null);\n\n  __decorate([serverEvent('clicked'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [EventData]), __metadata(\"design:returntype\", void 0)], StaticTextComponent.prototype, \"clickedDatamanagerHandler\", null);\n\n  __decorate([serverEvent('bnsetfocus'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], StaticTextComponent.prototype, \"focusIn\", null);\n\n  __decorate([serverEvent('bnkillfocus'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], StaticTextComponent.prototype, \"focusOut\", null);\n\n  StaticTextComponent = __decorate([dataTransfer(['stcTxt', 'dwText']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, LengthConverter, DataManagerEventService, MainTabOrderService, DataManagerTabSequenceService, ContainerControlTabOrderService])], StaticTextComponent);\n  return StaticTextComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet SimpleNumericEditMaskComponent = /*#__PURE__*/(() => {\n  let SimpleNumericEditMaskComponent = class SimpleNumericEditMaskComponent extends BaseMaskComponent {\n    /* c8 ignore start */\n    constructor(changeDetector, render2, element, lengthConverter, emitter, mTabOService, tabPageOrderService) {\n      super(changeDetector, render2, element, lengthConverter, emitter, mTabOService, tabPageOrderService);\n      this.render2 = render2;\n      this.mTabOService = mTabOService;\n      this.tabPageOrderService = tabPageOrderService;\n      /* c8 ignore stop */\n\n      this.otherEmitter = new EventEmitter(); // Rule set when numeric mask is able\n\n      this.rules = EditMaskService.getMaskRules();\n    }\n\n    ngAfterViewInit() {\n      super.ngAfterViewInit();\n      this.validateEmptyText();\n      this.detectChanges();\n      this.applyMaxLength();\n    }\n    /**\r\n     * @description\r\n     * Gets focusable element inside of the component\r\n     */\n\n\n    get focusableElement() {\n      return this.numEditMask;\n    }\n    /**\r\n     * @description\r\n     * Returns a string representation of the maximun value allowed by the mask.\r\n     * @returns { string }\r\n     */\n\n\n    get maximum() {\n      if (this.model.Mask === null) {\n        return this.model.Maximun;\n      } else {\n        return EditMaskService.getNumericMaskMaxValueAsString(this.model.Mask);\n      }\n    }\n    /**\r\n     * @description\r\n     * Returns a string representation of the minimun value allowed by the mask.\r\n     * @returns { string }\r\n     */\n\n\n    get minimum() {\n      if (this.model.Mask === null) {\n        return this.model.Minimum;\n      } else {\n        return EditMaskService.getNumericMaskMinValueAsString(this.model.Mask);\n      }\n    }\n    /**\r\n     * @description\r\n     * Gets number of decimals that allow input. By default value is null that means\r\n     * allow unlimited decimals.\r\n     */\n\n\n    get decimals() {\n      return this.model.Mask ? EditMaskService.getNumericMaskDecimals(this.model.Mask) : null;\n    }\n    /**\r\n     * @description\r\n     * Returns the value of the model.\r\n     * @returns { number }\r\n     */\n\n\n    get value() {\n      return this.model.Text !== '' ? parseNumber(this.model.Text) : '';\n    }\n    /**\r\n     * @description\r\n     * Sets value of the model.\r\n     * @param value The numeric value to set model property.\r\n     */\n\n\n    set value(value) {\n      this.model.Text = value != null ? value.toString() : '';\n    }\n    /**\r\n     *  Returns spinners property state\r\n     */\n\n\n    get spinners() {\n      return this.model.Spin;\n    }\n    /**\r\n     * @description\r\n     * Returns string format of the model.\r\n     * @returns { string }\r\n     */\n\n\n    get format() {\n      return this.model.Format;\n    }\n    /**\r\n     * @description\r\n     * Returns the mask processed by the EditMaskService.\r\n     * @returns { string }\r\n     */\n\n\n    get mask() {\n      const sMask = this.model.Mask ? this.model.Mask : null;\n      return EditMaskService.getNumericMask(sMask);\n    }\n    /**\r\n     * Override the parentElement\r\n     */\n\n\n    get parentElement() {\n      return this.renderer.parentNode(this.renderer.parentNode(this.el.nativeElement));\n    }\n    /**\r\n     * trigger the other event for the simple numeric\r\n     * @param event the object from the event\r\n     */\n\n\n    otherHandler(value) {\n      this.value = value != null ? value.toString() : '';\n      this.otherEmitter.emit(new EventData('other', this.id, this.mapperId));\n    }\n\n    focusIn(event) {\n      super.focusIn(event);\n    }\n\n    focusOut(event) {\n      super.focusOut(event);\n    }\n    /**\r\n     * @description\r\n     * Method to apply style to component with custom alignment\r\n     */\n\n\n    setMyStyle() {\n      const style = super.setMyStyle();\n      const alignment = this.alignment;\n\n      if (alignment) {\n        style['text-align'] = alignment;\n        this.applyTextAlignment(alignment);\n      }\n    } // Is necessary to validate if the value is an empty string on the model to reflect it on the component value\n\n\n    validateEmptyText() {\n      this.value = this.mask == null && this.model.Text !== '' ? this.model.Text : this.getMaskedText();\n    }\n\n    getMaskedText() {\n      return this.model.Text !== '' ? String(NumericFunctions.numberOnly(Number(this.model.Text), this.model.Mask)) : '';\n    }\n\n    applyMaxLength() {\n      /* c8 ignore else */\n      if (this.maximum && this.kendoNumericTextBoxInstance && this.kendoNumericTextBoxInstance.numericInput) {\n        this.render2.setAttribute(this.kendoNumericTextBoxInstance.numericInput.nativeElement, 'maxlength', `${this.maximum.length}`);\n      }\n    }\n    /**\r\n     * Applys text alignment\r\n     * @param alignment current alignment value\r\n     */\n\n\n    applyTextAlignment(alignment) {\n      /* c8 ignore else */\n      if (this.kendoNumericTextBoxInstance) {\n        this.render2.setStyle(this.kendoNumericTextBoxInstance.numericInput.nativeElement, 'text-align', `${alignment}`);\n      }\n    }\n\n  };\n\n  SimpleNumericEditMaskComponent.ɵfac = function SimpleNumericEditMaskComponent_Factory(t) {\n    return new (t || SimpleNumericEditMaskComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n  };\n\n  SimpleNumericEditMaskComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: SimpleNumericEditMaskComponent,\n    selectors: [[\"wm-simple-numeric-edit-mask\"]],\n    viewQuery: function SimpleNumericEditMaskComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c51, 5);\n        i0.ɵɵviewQuery(NumericTextBoxComponent, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.numEditMask = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.kendoNumericTextBoxInstance = _t.first);\n      }\n    },\n    outputs: {\n      otherEmitter: \"otherEmitter\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 2,\n    vars: 13,\n    consts: [[\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"disabled\", \"hostComponent\", \"value\", \"min\", \"max\", \"decimals\", \"format\", \"spinners\", \"ngClass\", \"autoCorrect\", \"tabindex\", \"readonly\", \"ngStyle\", \"valueChange\", \"change\", \"keydown.tab\", \"keydown.shift.tab\"], [\"numEditMask\", \"\"]],\n    template: function SimpleNumericEditMaskComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"kendo-numerictextbox\", 0, 1);\n        i0.ɵɵlistener(\"valueChange\", function SimpleNumericEditMaskComponent_Template_kendo_numerictextbox_valueChange_0_listener($event) {\n          return ctx.otherHandler($event);\n        })(\"change\", function SimpleNumericEditMaskComponent_Template_kendo_numerictextbox_change_0_listener() {\n          return ctx.handleBlur();\n        })(\"keydown.tab\", function SimpleNumericEditMaskComponent_Template_kendo_numerictextbox_keydown_tab_0_listener($event) {\n          return ctx.tabKeyHandler($event);\n        })(\"keydown.shift.tab\", function SimpleNumericEditMaskComponent_Template_kendo_numerictextbox_keydown_shift_tab_0_listener($event) {\n          return ctx.tabKeyHandler($event);\n        });\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"disabled\", ctx.disabled)(\"hostComponent\", ctx)(\"value\", ctx.value)(\"min\", ctx.minimum)(\"max\", ctx.maximum)(\"decimals\", ctx.decimals)(\"format\", ctx.mask)(\"spinners\", ctx.spinners)(\"ngClass\", ctx.classHandler())(\"autoCorrect\", false)(\"tabindex\", ctx.tabOrder)(\"readonly\", ctx.displayOnly)(\"ngStyle\", ctx.setMyStyle());\n      }\n    },\n    directives: [i5$1.NumericTextBoxComponent, ControlsPowerDirective, FocusableDirective, i6.NgClass, i6.NgStyle],\n    styles: [\".borderClass>span{border-width:0}\"]\n  });\n\n  __decorate([NotifyChange('Text'), __metadata(\"design:type\", Object), __metadata(\"design:paramtypes\", [Object])], SimpleNumericEditMaskComponent.prototype, \"value\", null);\n\n  __decorate([serverEvent('other'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], SimpleNumericEditMaskComponent.prototype, \"otherHandler\", null);\n\n  __decorate([serverEvent('ensetfocus'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], SimpleNumericEditMaskComponent.prototype, \"focusIn\", null);\n\n  __decorate([serverEvent('enkillfocus'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], SimpleNumericEditMaskComponent.prototype, \"focusOut\", null);\n\n  SimpleNumericEditMaskComponent = __decorate([dataTransfer(['smpNumEdtMsk']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, LengthConverter, DataManagerEventService, MainTabOrderService, ContainerControlTabOrderService])], SimpleNumericEditMaskComponent);\n  return SimpleNumericEditMaskComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/* c8 ignore start */\n\n\nlet TimeEditMaskComponent = /*#__PURE__*/(() => {\n  let TimeEditMaskComponent = class TimeEditMaskComponent extends BaseMaskComponent {\n    constructor(changeDetector, renderer2, element, lengthConverter, emitter, mTabOService, tabPageOrderService) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter, mTabOService, tabPageOrderService);\n      this.mTabOService = mTabOService;\n      this.tabPageOrderService = tabPageOrderService;\n      this.date = null;\n      this.defaultMask = 'hh:mm:ss';\n    }\n    /**\r\n     * @description\r\n     * Gets focusable element inside of the component\r\n     */\n\n\n    get focusableElement() {\n      return this.timeEdit;\n    }\n    /**\r\n     * @description\r\n     * Returns the date value of the model.\r\n     * @returns { Date }\r\n     */\n\n\n    get value() {\n      const text = this.model.Text;\n      const newDate = isValidTime(text) ? new Date('1900-01-01 ' + text) : new Date(text);\n\n      if (isValidDate(newDate) && (this.date == null || isValidDate(this.date) && this.date.getTime() !== newDate.getTime())) {\n        this.date = newDate;\n      }\n\n      return this.date;\n    }\n    /**\r\n     * @description\r\n     * Sets a date value in the component model.\r\n     * @param value A date with new value to set model property.\r\n     */\n\n\n    set value(value) {\n      this.text = value ? this.formatValue(value) : undefined;\n    }\n    /**\r\n     * Formats date\r\n     * @param value\r\n     * @returns value\r\n     */\n\n\n    formatValue(value) {\n      return `${value.toLocaleDateString()} ${formatDate(value, this.mask)}`;\n    }\n    /**\r\n     * @description\r\n     * Returns the mask processed by the EditMaskService.\r\n     * Returns a default mask if it does not exists in the model.\r\n     * @returns { string }\r\n     */\n\n\n    get mask() {\n      return this.model && this.model.Mask ? DateTimeFunctions.processPBDateTimeMaskFormat(this.model.Mask) : this.defaultMask;\n    }\n    /**\r\n     * Gets placeholder\r\n     * Returns a default value to replace null or empty values in the control\r\n     */\n\n\n    get placeholder() {\n      return this.mask.replace(/[a-z]/gi, '0');\n    }\n    /**\r\n     * Overrides handleBlur to update the value\r\n     * @param event\r\n     */\n\n\n    handleBlur(event) {\n      this.value = event;\n      super.handleBlur(event);\n    }\n\n  };\n\n  TimeEditMaskComponent.ɵfac = function TimeEditMaskComponent_Factory(t) {\n    return new (t || TimeEditMaskComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n  };\n\n  TimeEditMaskComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TimeEditMaskComponent,\n    selectors: [[\"wm-time-edit-mask\"]],\n    viewQuery: function TimeEditMaskComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c52, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.timeEdit = _t.first);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 2,\n    vars: 7,\n    consts: [[\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"disabled\", \"format\", \"value\", \"ngClass\", \"hostComponent\", \"tabindex\", \"placeholder\", \"keydown.tab\", \"keydown.shift.tab\", \"valueChange\"], [\"timeEdit\", \"\"]],\n    template: function TimeEditMaskComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"kendo-timepicker\", 0, 1);\n        i0.ɵɵlistener(\"keydown.tab\", function TimeEditMaskComponent_Template_kendo_timepicker_keydown_tab_0_listener($event) {\n          return ctx.tabKeyHandler($event);\n        })(\"keydown.shift.tab\", function TimeEditMaskComponent_Template_kendo_timepicker_keydown_shift_tab_0_listener($event) {\n          return ctx.tabKeyHandler($event);\n        })(\"valueChange\", function TimeEditMaskComponent_Template_kendo_timepicker_valueChange_0_listener($event) {\n          return ctx.handleBlur($event);\n        })(\"valueChange\", function TimeEditMaskComponent_Template_kendo_timepicker_valueChange_0_listener($event) {\n          return ctx.value = $event;\n        });\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"disabled\", ctx.disabled)(\"format\", ctx.mask)(\"value\", ctx.value)(\"ngClass\", ctx.classHandler())(\"hostComponent\", ctx)(\"tabindex\", ctx.tabOrder)(\"placeholder\", ctx.placeholder);\n      }\n    },\n    directives: [i5.TimePickerComponent, ControlsPowerDirective, FocusableDirective, i6.NgClass],\n    styles: [\".borderClass>span{border-width:0}\"]\n  });\n  TimeEditMaskComponent = __decorate([dataTransfer(['tmEdtMsk']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, LengthConverter, DataManagerEventService, MainTabOrderService, ContainerControlTabOrderService])], TimeEditMaskComponent);\n  return TimeEditMaskComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet StringEditMaskComponent = /*#__PURE__*/(() => {\n  let StringEditMaskComponent = class StringEditMaskComponent extends BaseMaskComponent {\n    constructor(\n    /* c8 ignore start */\n    changeDetector, renderer2, element, lengthConverter, emitter, mTabOService, tabPageOrderService\n    /* c8 ignore stop */\n    ) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter, mTabOService, tabPageOrderService);\n      this.mTabOService = mTabOService;\n      this.tabPageOrderService = tabPageOrderService;\n      /**\r\n       *  Constant: Rules to be validated in the input value.\r\n       */\n\n      this.rules = EditMaskService.getMaskRules();\n    }\n    /**\r\n     * @description\r\n     * Returns the mask of the model.\r\n     * @returns { string }\r\n     */\n\n\n    get mask() {\n      return this.model.Mask;\n    }\n    /**\r\n     * Gets include literals\r\n     * Dates should include literals\r\n     */\n\n\n    get includeLiterals() {\n      return this.isDateMask(this.mask);\n    }\n    /**\r\n     * @description\r\n     * Gets focusable element inside of the component\r\n     */\n\n\n    get focusableElement() {\n      return this.stringEdit;\n    }\n    /**\r\n     * Determines whether the mask is of type date\r\n     * @param value the current mask\r\n     * @returns true if date mask\r\n     */\n\n\n    isDateMask(value) {\n      return value ? value === '##/##/##' : false;\n    }\n\n  };\n\n  StringEditMaskComponent.ɵfac = function StringEditMaskComponent_Factory(t) {\n    return new (t || StringEditMaskComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n  };\n\n  StringEditMaskComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: StringEditMaskComponent,\n    selectors: [[\"wm-string-edit-mask\"]],\n    viewQuery: function StringEditMaskComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c53, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.stringEdit = _t.first);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"disabled\", \"mask\", \"includeLiterals\", \"ngModel\", \"rules\", \"ngClass\", \"hostComponent\", \"keydown.tab\", \"keydown.shift.tab\", \"change\", \"ngModelChange\", 4, \"ngIf\"], [\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"disabled\", \"mask\", \"includeLiterals\", \"ngModel\", \"rules\", \"ngClass\", \"hostComponent\", \"keydown.tab\", \"keydown.shift.tab\", \"change\", \"ngModelChange\"], [\"stringEdit\", \"\"]],\n    template: function StringEditMaskComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, StringEditMaskComponent_kendo_maskedtextbox_0_Template, 2, 7, \"kendo-maskedtextbox\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.model);\n      }\n    },\n    directives: [i5$1.MaskedTextBoxComponent, i6.NgIf, ControlsPowerDirective, FocusableDirective, i9.NgControlStatus, i9.NgModel, i6.NgClass],\n    styles: [\".borderClass>input{border-width:0}\"]\n  });\n  StringEditMaskComponent = __decorate([dataTransfer(['strEdtMask']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, LengthConverter, DataManagerEventService, MainTabOrderService, ContainerControlTabOrderService\n  /* c8 ignore stop */\n  ])], StringEditMaskComponent);\n  return StringEditMaskComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MaskedTextBoxComponent = /*#__PURE__*/(() => {\n  let MaskedTextBoxComponent = class MaskedTextBoxComponent extends BaseControlComponent {\n    /* c8 ignore start */\n    constructor(changeDetector, renderer2, element, lengthConverter, emitter, mTabOrderService) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter, mTabOrderService);\n      this.changeDetector = changeDetector;\n      this.renderer2 = renderer2;\n      this.element = element;\n      this.emitter = emitter;\n      this.mTabOrderService = mTabOrderService;\n    }\n\n    ngOnInit() {\n      super.ngOnInit();\n    }\n    /**\r\n     * @description\r\n     * Returns the type of mask according with the mask type received from model.\r\n     * @returns { string }\r\n     */\n\n\n    get controlType() {\n      if (EditMaskService.isNumericMask(this.maskDataType)) {\n        if (EditMaskService.isSimpleNumericMask(this.mask)) {\n          return 'SimpleNumericMask';\n        } else {\n          return 'ComplexNumericMask';\n        }\n      } else {\n        if (EditMaskService.isDateTimeMask(this.maskDataType)) {\n          return 'DateTimeMask';\n        } else {\n          if (EditMaskService.isTimeMask(this.maskDataType)) {\n            return 'TimeMask';\n          } else {\n            return 'StringMask';\n          }\n        }\n      }\n    }\n    /**\r\n     * Gets component inside of MaskComponent\r\n     * wrapper.\r\n     */\n\n\n    get component() {\n      return this.componentInternal;\n    }\n    /**\r\n     * @description\r\n     * Returns the mask type received from model.\r\n     * @returns { string }\r\n     */\n\n\n    get maskDataType() {\n      return this.model.MaskDataType;\n    }\n    /**\r\n     * @description\r\n     * Returns the mask definition received from model.\r\n     * @returns { string }\r\n     */\n\n\n    get mask() {\n      return this.model.Mask;\n    }\n\n    focusIn(event) {\n      super.focusIn(event);\n    }\n\n    focusOut(event) {\n      super.focusOut(event);\n    }\n    /**\r\n     * Applies focus to input or selectable element in\r\n     * component. It triggers dom element focus()\r\n     */\n\n\n    applyFocus() {\n      /* c8 ignore else */\n      if (this.component) {\n        this.component.applyFocus();\n      }\n    }\n\n  };\n\n  MaskedTextBoxComponent.ɵfac = function MaskedTextBoxComponent_Factory(t) {\n    return new (t || MaskedTextBoxComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8));\n  };\n\n  MaskedTextBoxComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MaskedTextBoxComponent,\n    selectors: [[\"wm-editmask\"]],\n    viewQuery: function MaskedTextBoxComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c54, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.componentInternal = _t.first);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[\"wmFocusable\", \"\", 3, \"hostComponent\", 4, \"ngIf\"], [\"wmFocusable\", \"\", 3, \"hostComponent\"], [3, \"class\", \"model\", 4, \"ngIf\"], [3, \"model\"], [\"component\", \"\"]],\n    template: function MaskedTextBoxComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, MaskedTextBoxComponent_div_0_Template, 6, 6, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.model && ctx.visible);\n      }\n    },\n    directives: [SimpleNumericEditMaskComponent, ComplexNumericEditMaskComponent, DateTimeEditMaskComponent, TimeEditMaskComponent, StringEditMaskComponent, i6.NgIf, FocusableDirective],\n    styles: [\"\"]\n  });\n\n  __decorate([serverEvent('ensetfocus'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], MaskedTextBoxComponent.prototype, \"focusIn\", null);\n\n  __decorate([serverEvent('enkillfocus'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], MaskedTextBoxComponent.prototype, \"focusOut\", null);\n\n  MaskedTextBoxComponent = __decorate([dataTransfer(['edtMsk']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, LengthConverter, DataManagerEventService, MainTabOrderService])], MaskedTextBoxComponent);\n  return MaskedTextBoxComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar MultiLineEditComponent_1;\nlet MultiLineEditComponent = MultiLineEditComponent_1 = class MultiLineEditComponent extends CommonStyleComponent {\n  /* c8 ignore start */\n  constructor(changeDetector, renderer2, element, lengthConverter, emitter, mTabOrderService, tabPageOrderService) {\n    super(changeDetector, renderer2, element, lengthConverter, emitter, mTabOrderService, tabPageOrderService);\n    this.changeDetector = changeDetector;\n    this.renderer2 = renderer2;\n    this.element = element;\n    this.emitter = emitter;\n    this.mTabOrderService = mTabOrderService;\n    this.tabPageOrderService = tabPageOrderService;\n    this.modified = new EventEmitter();\n    this.keyup = new EventEmitter();\n  }\n  /**\r\n   * Creates an array of elements with the arguments for keyup handler in the backend\r\n   *\r\n   * @param {*} event\r\n   * @param {MultiLineEditComponent} component\r\n   * @memberof MultiLineEditComponent\r\n   * @returns the event args necessary for the keyup event\r\n   */\n\n\n  static KeyUpArgsExtractor(event, component) {\n    const key = !!event.keyCode ? event.keyCode : event.which;\n    let keyFlags = 0;\n\n    if (event.ctrlKey && event.shiftKey) {\n      keyFlags = 3;\n    } else if (event.ctrlKey) {\n      keyFlags = 2;\n    } else if (event.shiftKey) {\n      keyFlags = 1;\n    }\n\n    return [key, keyFlags];\n  }\n  /**\r\n   * @description\r\n   * Gets focusable element inside of the component\r\n   */\n\n\n  get focusableElement() {\n    return this.validateFocusElement(this.multiLine);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.registerTabService();\n  }\n\n  ngAfterContentChecked() {\n    const textarea = this.el.nativeElement.firstElementChild;\n\n    if (textarea) {\n      if (!!this.displayOnly) {\n        this.renderer2.setAttribute(textarea, 'readonly', 'true');\n      } else if (textarea.getAttribute('readonly') != null) {\n        this.renderer2.removeAttribute(textarea, 'readonly');\n      }\n    }\n  }\n  /**\r\n   * @description\r\n   * Returns the max length of characters that the mask allows.\r\n   * @returns { number }\r\n   */\n\n\n  get maxlength() {\n    return this.model.Limit ? this.model.Limit : null;\n  }\n  /**\r\n   * Gets the VScrollBar property value\r\n   */\n\n\n  get vScrollBar() {\n    return !!this.model.VScrollBar;\n  }\n  /**\r\n   * @description\r\n   * The 'classHandler' function links the outer css class with borderClass constant css class.\r\n   * @returns { string }\r\n   */\n\n\n  classHandler() {\n    const original = super.classHandler();\n    return ` ${original} ${this.vScrollBar ? 'mleVScroll' : ''}\n    ${this.textCase === Case.Upper ? BaseControlBaseComponent.upperCaseCSSClass : ''}`;\n  }\n  /**\r\n   * Gets the current control TextCase value.\r\n   */\n\n\n  get textCase() {\n    return this.model.TextCase;\n  }\n  /**\r\n   * @description\r\n   * Returns the corresponding style for the MultiLine control\r\n   */\n\n\n  getMultiLineStyle() {\n    const style = super.setMyStyle();\n    style['color'] = this.textColor;\n    const alignment = this.alignment;\n\n    if (alignment) {\n      style['text-align'] = alignment;\n    }\n\n    return style;\n  }\n\n  focusIn(event) {\n    super.focusIn(event);\n  }\n\n  focusOut(event) {\n    super.focusOut(event);\n    this.selectionStart = Number(this.multiLine.nativeElement.selectionStart);\n  }\n  /**\r\n   * @event modified Is triggered when the control text has been changed and\r\n   * the user presses Enter or Tab or changes focus to another control.\r\n   * @param event Event data parameter.\r\n   */\n\n\n  modifiedHandler(event) {\n    this.modified.emit(new EventData(event, this.id, this.mapperId));\n  }\n  /**\r\n   * @event keyup Is triggered when a key is pressed and released over the component.\r\n   * @param event Event data parameter.\r\n   */\n\n\n  keyUpHandler(event) {\n    this.keyup.emit(new EventData(event, this.id, this.mapperId));\n  }\n  /**\r\n   * Manage context menu event of spellchecker\r\n   * @param event the current context menu event\r\n   */\n\n\n  contextMenuHandler(event) {\n    event.spellchecker = true;\n  }\n\n};\n\nMultiLineEditComponent.ɵfac = function MultiLineEditComponent_Factory(t) {\n  return new (t || MultiLineEditComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n};\n\nMultiLineEditComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MultiLineEditComponent,\n  selectors: [[\"wm-multi-line-edit\"]],\n  viewQuery: function MultiLineEditComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c55, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.multiLine = _t.first);\n    }\n  },\n  hostBindings: function MultiLineEditComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"contextmenu\", function MultiLineEditComponent_contextmenu_HostBindingHandler($event) {\n        return ctx.contextMenuHandler($event);\n      });\n    }\n  },\n  inputs: {\n    activeKeyEvents: \"activeKeyEvents\"\n  },\n  outputs: {\n    modified: \"modified\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[\"kendoTextArea\", \"\", \"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"ngModel\", \"ngStyle\", \"maxlength\", \"ngClass\", \"readonly\", \"disabled\", \"hostComponent\", \"tabindex\", \"ngModelChange\", \"change\", \"keydown.tab\", \"keydown.shift.tab\", \"keyup\", \"focusout\", 4, \"ngIf\"], [\"kendoTextArea\", \"\", \"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"ngModel\", \"ngStyle\", \"maxlength\", \"ngClass\", \"readonly\", \"disabled\", \"hostComponent\", \"tabindex\", \"ngModelChange\", \"change\", \"keydown.tab\", \"keydown.shift.tab\", \"keyup\", \"focusout\"], [\"multiLine\", \"\"]],\n  template: function MultiLineEditComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, MultiLineEditComponent_textarea_0_Template, 2, 8, \"textarea\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.model && ctx.visible);\n    }\n  },\n  directives: [i6.NgIf, i5$1.TextAreaDirective, i9.DefaultValueAccessor, ControlsPowerDirective, FocusableDirective, i9.NgControlStatus, i9.NgModel, i6.NgStyle, i9.MaxLengthValidator, i6.NgClass],\n  styles: [\".borderClass[_ngcontent-%COMP%]{border-width:0px}.mleVScroll[_ngcontent-%COMP%]{overflow-y:auto}\"]\n});\n\n__decorate([serverEvent('ensetfocus'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], MultiLineEditComponent.prototype, \"focusIn\", null);\n\n__decorate([serverEvent('enkillfocus'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], MultiLineEditComponent.prototype, \"focusOut\", null);\n\n__decorate([serverEvent('enmodified'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], MultiLineEditComponent.prototype, \"modifiedHandler\", null);\n\n__decorate([serverEvent('keyup', MultiLineEditComponent_1.KeyUpArgsExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], MultiLineEditComponent.prototype, \"keyUpHandler\", null);\n\nMultiLineEditComponent = MultiLineEditComponent_1 = __decorate([dataTransfer(['mltLnEdt']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, LengthConverter, DataManagerEventService, MainTabOrderService, ContainerControlTabOrderService])], MultiLineEditComponent);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar PictureComponent_1;\nlet PictureComponent = PictureComponent_1 = class PictureComponent extends BasePictureComponent {\n  constructor(cd, rnd2, elem, lengthConverter, em, is, mTabOService, tabPageOrderService) {\n    super(cd, rnd2, elem, lengthConverter, em, is, mTabOService, tabPageOrderService);\n    this.em = em;\n    this.is = is;\n    this.mTabOService = mTabOService;\n    this.tabPageOrderService = tabPageOrderService;\n    /* c8 ignore stop */\n\n    this.dropEmitter = new EventEmitter();\n  }\n  /**\r\n   *\r\n   * @param event Current event data\r\n   * @param component Current component\r\n   */\n\n  /* c8 ignore start */\n\n\n  static dropExtractor(event, component) {\n    return [{\n      Id: event.dropData.dataManagerId,\n      MapperId: event.mapperId\n    }, event.dropData.pagination.currentRow, {\n      Id: component.id,\n      MapperId: component.mapperId\n    }];\n  }\n  /**\r\n   * Custom Drop event for picture box\r\n   * @param event Event data\r\n   */\n\n\n  dropEvent(event) {\n    event.mapperId = this.em ? this.em.webMapService.core.getModel(event.dropData.dataManagerId).mapperId : '';\n    const data = new EventData(event, this.id, this.mapperId);\n    this.dropEmitter.emit(data);\n  }\n  /**\r\n   * @description\r\n   * Gets focusable element inside of the component\r\n   */\n\n\n  get focusableElement() {\n    return this.validateFocusElement(this.picture);\n  }\n\n};\n\nPictureComponent.ɵfac = function PictureComponent_Factory(t) {\n  return new (t || PictureComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(IconsService), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n};\n\nPictureComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: PictureComponent,\n  selectors: [[\"wm-picture\"]],\n  viewQuery: function PictureComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c56, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.picture = _t.first);\n    }\n  },\n  outputs: {\n    dropEmitter: \"dropEmitter\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[\"wmControl\", \"\", \"kendoTooltip\", \"\", \"mwlDroppable\", \"\", \"wmFocusable\", \"\", 3, \"pointerEvents\", \"ngClass\", \"tabindex\", \"ngStyle\", \"hostComponent\", \"keydown.tab\", \"keydown.shift.tab\", \"drop\", 4, \"ngIf\"], [\"wmControl\", \"\", \"kendoTooltip\", \"\", \"mwlDroppable\", \"\", \"wmFocusable\", \"\", 3, \"ngClass\", \"tabindex\", \"ngStyle\", \"hostComponent\", \"keydown.tab\", \"keydown.shift.tab\", \"drop\"], [\"picture\", \"\"], [3, \"pointerEvents\", \"title\", \"width\", \"height\", \"src\", \"dblclick\", \"click\", 4, \"ngIf\"], [3, \"pointerEvents\", \"ngClass\", \"title\", \"width\", \"height\", 4, \"ngIf\"], [3, \"title\", \"src\", \"dblclick\", \"click\"], [3, \"ngClass\", \"title\"]],\n  template: function PictureComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, PictureComponent_div_0_Template, 4, 8, \"div\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.model && ctx.visible);\n    }\n  },\n  directives: [i6.NgIf, i7.TooltipDirective, i17.DroppableDirective, FocusableDirective, i6.NgClass, i6.NgStyle],\n  styles: [\".borderClass>img{border:0}.borderClass[_ngcontent-%COMP%]{overflow:hidden}.invertColors[_ngcontent-%COMP%]{filter:invert(100%)}.originalSize[_ngcontent-%COMP%]{width:auto!important;height:auto!important}\"]\n});\n\n__decorate([serverEvent('dwndrop', PictureComponent_1.dropExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], PictureComponent.prototype, \"dropEvent\", null);\n\nPictureComponent = PictureComponent_1 = __decorate([dataTransfer(['picBx']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, LengthConverter, DataManagerEventService, IconsService, MainTabOrderService, ContainerControlTabOrderService])], PictureComponent);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet RadioButtonComponent = /*#__PURE__*/(() => {\n  let RadioButtonComponent = class RadioButtonComponent extends CommonStyleComponent {\n    /* c8 ignore start */\n    constructor(changeDetector, renderer2, webmapService, element, ngZone, lengthConverter, emitter, mTabOrderService, tabPageOrderService) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter, mTabOrderService, tabPageOrderService);\n      this.changeDetector = changeDetector;\n      this.renderer2 = renderer2;\n      this.webmapService = webmapService;\n      this.element = element;\n      this.ngZone = ngZone;\n      this.emitter = emitter;\n      this.mTabOrderService = mTabOrderService;\n      this.tabPageOrderService = tabPageOrderService;\n    }\n    /**\r\n     * @description\r\n     * Gets focusable element inside of the component\r\n     */\n\n\n    get focusableElement() {\n      return this.validateFocusElement(this.radioButton);\n    }\n    /**\r\n     * @description\r\n     * Returns the checked value of the model.\r\n     * @returns { boolean }\r\n     */\n\n\n    get checked() {\n      return this.model.Checked;\n    }\n\n    set checked(value) {\n      this.model.Checked = value;\n    }\n    /**\r\n     * @description\r\n     * Returns the automatic value of the model.\r\n     * @returns { boolean }\r\n     */\n\n\n    get automatic() {\n      return Utils.isDefaultValue(this.model.Automatic, true);\n    }\n    /**\r\n     * @description\r\n     * Returns the text value of the component model.\r\n     * @returns { string }\r\n     */\n\n\n    get text() {\n      return RemoveAmpersand.remove(this.model.Text);\n    }\n    /**\r\n     * Gets position order of a grouped radio button if its inside of GroupBox or\r\n     * any other container.\r\n     */\n\n\n    get positionOrder() {\n      return this.model.PositionOrder;\n    }\n\n    clickHandler(event) {\n      event['parentName'] = this.group;\n      this.webmapService.core.getEvent().publish('unchecked', event);\n      this.checked = true;\n      setTimeout(() => {\n        this.radioButton.nativeElement.checked = this.checked;\n      });\n      super.clickHandler(event);\n    }\n\n    focusIn(event) {\n      if (this.automatic) {\n        this.checked = true;\n      }\n\n      this.internalChecked = this.checked;\n      super.focusIn(event);\n    }\n\n    focusOut(event) {\n      super.focusOut(event);\n    }\n\n    ngOnInit() {\n      super.ngOnInit();\n      const groupName = this.tabOrder != -1 ? null : this.group;\n      this.registerTabService(groupName);\n      this.originalGroupName = this.group;\n\n      if (!!this.parentElement?.className) {\n        this.group += `_${this.parentElement.className}`;\n      }\n\n      this.tokenEvent = this.webmapService.core.getEvent().subscribe('unchecked', event => {\n        this.uncheckedHandler(event);\n      });\n      this.internalChecked = this.checked;\n    }\n\n    ngAfterViewInit() {\n      super.ngAfterViewInit();\n\n      if (this.visible) {\n        this.radioButton.nativeElement.checked = this.checked;\n      }\n    }\n\n    ngDoCheck() {\n      if (this.internalChecked !== this.checked) {\n        this.internalChecked = this.checked;\n\n        if (this.checked) {\n          const event = {};\n          event['parentName'] = this.group;\n          this.webmapService.core.getEvent().publish('unchecked', event);\n          this.checked = true;\n        }\n      }\n    }\n\n    ngAfterViewChecked() {\n      this.detectChanges();\n    }\n    /* c8 ignore next 3 */\n\n\n    ngOnDestroy() {\n      this.webmapService.core.getEvent().unSubscribe(this.tokenEvent);\n    }\n    /**\r\n     * Set the checked property to false\r\n     * when another radiobutton of the same group is selected\r\n     * @param event The current event object\r\n     */\n\n\n    uncheckedHandler(event) {\n      if (event.parentName === this.group && this.checked && this.radioButton) {\n        this.checked = false;\n        this.radioButton.nativeElement.checked = false;\n      }\n    }\n    /**\r\n     * Applies focus to input or selectable element in\r\n     * component. It triggers dom element focus()\r\n     */\n\n\n    applyFocus() {\n      /* c8 ignore else */\n      if (this.focusableElement) {\n        this.focusApplied = true;\n\n        if (this.checked === false && this.automatic) {\n          this.clickHandler({});\n        }\n\n        this.focusableElement.focus();\n        this.focusApplied = false;\n      }\n    }\n    /**\r\n     * Determines whether the component is focusable\r\n     * @returns true if focusable.\r\n     */\n\n\n    isFocusable() {\n      return !this.isContainer && this.model.TabOrder != null;\n    }\n    /**\r\n     * Tab key handler to manage tab behavior.\r\n     * MaintTabOrder service determines which action\r\n     * should be performed after a tab key event.\r\n     * @param event TabKey event.\r\n     */\n\n\n    tabKeyHandler(event) {\n      Utils.preventPropagation(event);\n      let tabNodeReference = this.tabNodeReference;\n      const groupManager = this.currentTabService.getGroup(this.originalGroupName);\n      /* c8 ignore else */\n\n      if (groupManager && groupManager.group && this.tabOrder == -1) {\n        tabNodeReference = groupManager.group.tabNodeReference;\n      }\n      /* c8 ignore else */\n\n\n      if (tabNodeReference) {\n        this.currentTabService.resolveTab(tabNodeReference, event.shiftKey, event);\n      }\n    }\n\n  };\n\n  RadioButtonComponent.ɵfac = function RadioButtonComponent_Factory(t) {\n    return new (t || RadioButtonComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.WebMapService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n  };\n\n  RadioButtonComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: RadioButtonComponent,\n    selectors: [[\"wm-radio-button\"]],\n    viewQuery: function RadioButtonComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c57, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.radioButton = _t.first);\n      }\n    },\n    inputs: {\n      group: [\"name\", \"group\"]\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 5,\n    vars: 1,\n    consts: [[3, \"ngClass\", \"ngStyle\", 4, \"ngIf\"], [\"rightTextTemplate\", \"\"], [\"leftTextTemplate\", \"\"], [3, \"ngClass\", \"ngStyle\"], [\"class\", \"containerRadioButton\", 4, \"ngIf\"], [1, \"containerRadioButton\"], [4, \"ngTemplateOutlet\"], [\"type\", \"radio\", \"wmPBControls\", \"\", \"wmFocusable\", \"\", 1, \"k-radio\", 3, \"name\", \"disabled\", \"id\", \"checked\", \"hostComponent\", \"click\", \"keydown.tab\", \"keydown.shift.tab\"], [\"rbutton\", \"\"], [1, \"k-radio-label\", \"rightTextRadioButton\", 3, \"for\"], [\"type\", \"radio\", \"wmPBControls\", \"\", \"wmFocusable\", \"\", 1, \"k-radio\", \"leftTextInputRadioButton\", 3, \"name\", \"disabled\", \"id\", \"checked\", \"hostComponent\", \"click\", \"keydown.tab\", \"keydown.shift.tab\"], [1, \"k-radio-label\", \"leftTextRadioButton\", 3, \"for\"]],\n    template: function RadioButtonComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, RadioButtonComponent_div_0_Template, 3, 4, \"div\", 0);\n        i0.ɵɵtemplate(1, RadioButtonComponent_ng_template_1_Template, 4, 7, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(3, RadioButtonComponent_ng_template_3_Template, 4, 7, \"ng-template\", null, 2, i0.ɵɵtemplateRefExtractor);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.visible);\n      }\n    },\n    directives: [i6.NgIf, i6.NgClass, i6.NgStyle, i6.NgTemplateOutlet, ControlsPowerDirective, FocusableDirective, i9$1.LabelDirective],\n    styles: [\".rightText[_ngcontent-%COMP%]{display:inline-block}.leftText[_ngcontent-%COMP%]{display:inline!important;padding-right:5px;margin:0;min-height:16px;line-height:22px;vertical-align:text-top;align-items:flex-start;position:relative;cursor:pointer}.containerRadioButton[_ngcontent-%COMP%]{display:inline}\"],\n    changeDetection: 0\n  });\n\n  __decorate([NotifyChange('Checked'), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], RadioButtonComponent.prototype, \"checked\", null);\n\n  __decorate([serverEvent('bnclicked'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], RadioButtonComponent.prototype, \"clickHandler\", null);\n\n  __decorate([serverEvent('bnsetfocus'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], RadioButtonComponent.prototype, \"focusIn\", null);\n\n  __decorate([serverEvent('bnkillfocus'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], RadioButtonComponent.prototype, \"focusOut\", null);\n\n  RadioButtonComponent = __decorate([dataTransfer(['rdBtn']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, WebMapService, ElementRef, NgZone, LengthConverter, DataManagerEventService, MainTabOrderService, ContainerControlTabOrderService])], RadioButtonComponent);\n  return RadioButtonComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar SingleLineEditComponent_1;\nlet SingleLineEditComponent = SingleLineEditComponent_1 = class SingleLineEditComponent extends CommonStyleComponent {\n  /* c8 ignore start */\n  constructor(changeDetector, renderer2, element, lengthConverter, emitter, mTabOrderService, tabPageOrderService, focusManager) {\n    super(changeDetector, renderer2, element, lengthConverter, emitter, mTabOrderService, tabPageOrderService);\n    this.changeDetector = changeDetector;\n    this.renderer2 = renderer2;\n    this.element = element;\n    this.emitter = emitter;\n    this.mTabOrderService = mTabOrderService;\n    this.tabPageOrderService = tabPageOrderService;\n    this.focusManager = focusManager;\n    this.modified = new EventEmitter();\n    this.enchange = new EventEmitter();\n    this.KeyUp = new EventEmitter();\n    this.timeDelay = 600;\n    this.timeout = null;\n  }\n\n  static eventCallBack(context, event) {\n    context.isSynchronizing = false;\n    context.displayOnly = false;\n  }\n\n  static KeyUpArgsExtractor(event, component) {\n    const key = !!event.keyCode ? event.keyCode : event.which;\n    let keyFlags = 0;\n\n    if (event.ctrlKey && event.shiftKey) {\n      keyFlags = 3;\n    } else if (event.ctrlKey) {\n      keyFlags = 2;\n    } else if (event.shiftKey) {\n      keyFlags = 1;\n    }\n\n    return [key, keyFlags];\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.registerTabService();\n    this.cachedSelectionStart = this.selectionStart;\n    this.cachedSelectionLength = this.selectionLength;\n  }\n  /**\r\n   * Applies atrributes on runtime\r\n   */\n\n\n  ngAfterViewChecked() {\n    const displayFlag = String(this.displayOnly);\n    const native = this.el.nativeElement.querySelector('.k-textbox');\n    /* c8 ignore else */\n\n    if (native && this.displayOnly) {\n      this.renderer2.setAttribute(native, 'readonly', displayFlag);\n    }\n  }\n\n  ngDoCheck() {\n    this.updateSelection();\n  }\n  /**\r\n   * @description\r\n   * Gets focusable element inside of the component\r\n   */\n\n\n  get focusableElement() {\n    return this.validateFocusElement(this.singleLine);\n  }\n  /**\r\n   * Gets the current control TextCase value.\r\n   */\n\n\n  get textCase() {\n    return this.model.TextCase;\n  }\n  /**\r\n   * @description\r\n   * Returns the max length of characters that input allows.\r\n   * @returns { number }\r\n   */\n\n\n  get maxlength() {\n    return this.model.MaxLength ? this.model.MaxLength : this.model.Limit ? this.model.Limit : null;\n  }\n  /**\r\n   * @event modified Is triggered when the control text has been changed and\r\n   * the user presses Enter or Tab or changes focus to another control.\r\n   * @param event Event data parameter.\r\n   */\n\n\n  modifiedHandler(event) {\n    this.modified.emit(new EventData(event, this.id, this.mapperId));\n  }\n  /**\r\n   * @event enchange Is triggered when the control text has been changed and\r\n   * the user presses Enter or Tab or changes focus to another control.\r\n   * @param event Event data parameter.\r\n   */\n\n\n  enchangeHandler(event) {\n    if (this.isBindedEvent('enchange')) {\n      this.isSynchronizing = true;\n      this.displayOnly = true;\n    }\n\n    const data = new EventData(event, this.id, this.mapperId);\n    data.args = {\n      fieldName: this.name,\n      data: this.text\n    };\n    this.enchange.emit(data);\n  }\n  /**\r\n   * Delay enchance event\r\n   * @param event Event parameter\r\n   */\n\n\n  enchangeDelay(event) {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n    }\n\n    this.timeout = setTimeout(() => {\n      this.enchangeHandler(event);\n    }, this.timeDelay);\n  }\n  /**\r\n   * @description\r\n   * Returns the DisplayOnly value of the model.\r\n   * @returns { boolean }\r\n   */\n\n\n  get displayOnly() {\n    return this.model ? this.model.DisplayOnly : false;\n  }\n  /**\r\n   * @description\r\n   * Returns the DisplayOnly value of the model.\r\n   * @returns { boolean }\r\n   */\n\n\n  set displayOnly(value) {\n    this.model.DisplayOnly = value;\n  }\n  /**\r\n   * @description\r\n   * Returns the type value for the control.\r\n   * @returns { string }\r\n   */\n\n\n  get controlType() {\n    return this.model.Password || this.model.Edit && this.model.Edit.Password ? 'password' : 'text';\n  }\n  /**\r\n   * @description\r\n   * Method to choose the editable component to apply the selectText.\r\n   * The input elementRef of the BaseComponent is assigned here\r\n   */\n\n\n  get editable() {\n    return this.focusableElement;\n  }\n\n  classHandler() {\n    const classFlag = super.classHandler();\n    return `${classFlag}\n      ${this.displayOnly ? BaseControlBaseComponent.disableHighLightCssClass : ''}\n      ${this.textCase === Case.Upper ? BaseControlBaseComponent.upperCaseCSSClass : ''}\n      `;\n  }\n\n  focusIn(event) {\n    super.focusIn(event);\n  }\n\n  focusOut(event) {\n    super.focusOut(event);\n\n    if (this.textCase === Case.Upper) {\n      this.text = this.text.toUpperCase();\n    }\n  }\n  /**\r\n   * Key up event\r\n   * @param event Event parameter\r\n   */\n\n\n  onKeyUp(event) {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n    }\n\n    this.timeout = setTimeout(() => {\n      this.keyUpHandler(event);\n    }, 300);\n  }\n  /**\r\n   * Keys up handler.\r\n   * @param event KeyUp event object.\r\n   */\n\n\n  keyUpHandler(event) {\n    this.KeyUp.emit(event);\n  }\n  /**\r\n   * @description\r\n   * Applies the SelectText to editable control\r\n   */\n\n\n  selectText() {\n    super.selectText();\n    this.cachedSelectionStart = this.selectionStart;\n    this.cachedSelectionLength = this.selectionLength;\n  }\n  /**\r\n   * Updates selection if the values of selectionStart and selectionLength change meanwhile\r\n   * the component is focused.\r\n   */\n\n\n  updateSelection() {\n    if (this.applySelection() && this.lastSelectionChange() && this.focusManager?.isThisComponentTheActiveComponent(this)) {\n      this.selectText();\n    }\n  }\n  /**\r\n   * Checks selection range against the cached values.\r\n   * @returns true if selection range has changed\r\n   */\n\n\n  lastSelectionChange() {\n    return this.selectionStart !== this.cachedSelectionStart || this.selectionLength !== this.cachedSelectionLength;\n  }\n\n};\n\nSingleLineEditComponent.ɵfac = function SingleLineEditComponent_Factory(t) {\n  return new (t || SingleLineEditComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8), i0.ɵɵdirectiveInject(FocusManagerService, 8));\n};\n\nSingleLineEditComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: SingleLineEditComponent,\n  selectors: [[\"wm-single-line-edit\"]],\n  viewQuery: function SingleLineEditComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c58, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.singleLine = _t.first);\n    }\n  },\n  inputs: {\n    timeDelay: \"timeDelay\"\n  },\n  outputs: {\n    modified: \"modified\",\n    enchange: \"enchange\",\n    KeyUp: \"KeyUp\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngIf\"], [\"kendoTextBox\", \"\", \"wmPBControls\", \"\", \"wmFocusable\", \"\", 1, \"k-form-field\", 3, \"ngModel\", \"type\", \"tabindex\", \"ngClass\", \"ngStyle\", \"maxlength\", \"readonly\", \"disabled\", \"hostComponent\", \"ngModelChange\", \"change\", \"input\", \"keydown.tab\", \"keyup\", \"keydown.shift.tab\"], [\"singleLine\", \"\"], [3, \"model\"]],\n  template: function SingleLineEditComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, SingleLineEditComponent_div_0_Template, 4, 10, \"div\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.model);\n    }\n  },\n  directives: [BusyloaderComponent, i6.NgIf, i5$1.TextBoxDirective, i9.DefaultValueAccessor, ControlsPowerDirective, FocusableDirective, i9.NgControlStatus, i9.NgModel, i6.NgClass, i6.NgStyle, i9.MaxLengthValidator],\n  styles: [\".borderClass[_ngcontent-%COMP%]{border-width:0px}\"]\n});\n\n__decorate([serverEvent('enmodified'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], SingleLineEditComponent.prototype, \"modifiedHandler\", null);\n\n__decorate([serverEvent('enchange', null, null, SingleLineEditComponent_1.eventCallBack), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], SingleLineEditComponent.prototype, \"enchangeHandler\", null);\n\n__decorate([serverEvent('ensetfocus'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], SingleLineEditComponent.prototype, \"focusIn\", null);\n\n__decorate([serverEvent('enkillfocus'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], SingleLineEditComponent.prototype, \"focusOut\", null);\n\n__decorate([serverEvent('keyup', SingleLineEditComponent_1.KeyUpArgsExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [EventData]), __metadata(\"design:returntype\", void 0)], SingleLineEditComponent.prototype, \"keyUpHandler\", null);\n\nSingleLineEditComponent = SingleLineEditComponent_1 = __decorate([dataTransfer(['sngLneEdt']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, LengthConverter, DataManagerEventService, MainTabOrderService, ContainerControlTabOrderService, FocusManagerService])], SingleLineEditComponent);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ToolBarItemComponent = /*#__PURE__*/(() => {\n  class ToolBarItemComponent extends ToolBarToolComponent {\n    /**\r\n     * Constructor for the menu component\r\n     * @param iconservice service to access icons.\r\n     */\n    constructor(iconservice, ref) {\n      super();\n      this.iconservice = iconservice;\n      this.ref = ref;\n      this.clicked = new EventEmitter();\n      this.ToolBarItemMouseOver = new EventEmitter();\n      this.ToolBarItemMouseOut = new EventEmitter();\n      this.currentToolBarItem = {};\n    }\n\n    getStyleDisplay() {\n      return 'block';\n    }\n    /**\r\n     * @description\r\n     * Specifies the text that displays in the toolbar item when the display text option is on for toolbars.\r\n     */\n\n\n    get toolbarItemText() {\n      return this.model.toolbarItemText || '';\n    }\n    /**\r\n     * Returns the expected tooltip for this component\r\n     */\n\n\n    get tooltipText() {\n      const toolbarTextArray = this.toolbarItemText.split(',');\n\n      if (toolbarTextArray && toolbarTextArray.length === 2) {\n        return toolbarTextArray[1];\n      }\n\n      return toolbarTextArray[0];\n    }\n    /**\r\n     * Returns the expected text to be displayed under the button\r\n     */\n\n\n    get buttonText() {\n      const toolbarTextArray = this.toolbarItemText.split(',');\n      return toolbarTextArray[0];\n    }\n    /**\r\n     * @description\r\n     * Specifies the name of a stock toolbar picture you want to use to represent an item in the toolbar.\r\n     */\n\n\n    get toolbarItemName() {\n      return this.iconservice.getItemName(this.model.toolbarItemName);\n    }\n    /**\r\n     * @description\r\n     * Specifies the url of a image that you want to use to represent an item in the toolbar.\r\n     */\n\n\n    get toolbarItemNameSource() {\n      return this.iconservice.getItemNameSource(this.model.toolbarItemName);\n    }\n    /**\r\n     * @description\r\n     * Specifies whether the toolbar item displays.\r\n     */\n\n\n    get visible() {\n      return this.model.toolbarItemVisible;\n    }\n    /**\r\n     * @description\r\n     * Specifies whether the toolbar item is enabled.\r\n     */\n\n\n    get enabled() {\n      return this.model.enabled;\n    }\n    /**\r\n     * @description\r\n     * The component unique identifier.\r\n     * @returns { string }\r\n     */\n\n\n    get id() {\n      return this.model.id;\n    }\n    /**\r\n     * @description\r\n     * Returns a dictionary of all bound events that are in the model.\r\n     * @returns { [name: string]: boolean }\r\n     */\n\n\n    get events() {\n      return this.model.events;\n    }\n    /**\r\n     * @description\r\n     * Returns the corresponding toolbar item name\r\n     */\n\n\n    get name() {\n      return this.model.name;\n    }\n    /**\r\n     * @description\r\n     * Gets iconclass from icon service\r\n     * @returns {string}\r\n     */\n\n\n    get iconClass() {\n      return this.iconservice.iconClass;\n    }\n    /**\r\n     * @description\r\n     * Indicates if an event is binded in the server or not.\r\n     * @param event The name of the event in the server.\r\n     */\n\n\n    isBindedEvent(event) {\n      return this.events && this.events[event];\n    }\n    /**\r\n     * @description\r\n     * Applies changes meanwhile component is not destroyed.\r\n     */\n\n\n    detectChanges() {\n      if (!this.ref['destroyed']) {\n        this.ref.detectChanges();\n      }\n    }\n    /**\r\n     * Trigger the Click event when a toolbar item was clicked.\r\n     */\n\n    /* ignore next c8 */\n\n\n    clickHandler(event) {\n      this.clicked.emit(new EventData(event, this.id));\n    }\n    /**\r\n     * @property toolbarItemOrder r\r\n     */\n\n\n    addToolbarItemOrder() {}\n    /**\r\n     * ToolBar Mouse Over event to expose micro help message handler to be bound by\r\n     * external code handler\r\n     * @param item ToolBar item data.\r\n     */\n\n\n    toolbarItemMouseOver(item) {\n      this.ToolBarItemMouseOver.emit(item.model);\n    }\n    /**\r\n     * ToolBar Mouse Out event to hide micro help message handler to be bound by\r\n     * external code handler\r\n     * @param item ToolBar item data.\r\n     */\n\n\n    toolbarItemMouseOut(item) {\n      this.ToolBarItemMouseOut.emit(item);\n    }\n\n  }\n\n  ToolBarItemComponent.ɵfac = function ToolBarItemComponent_Factory(t) {\n    return new (t || ToolBarItemComponent)(i0.ɵɵdirectiveInject(IconsService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n  };\n\n  ToolBarItemComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ToolBarItemComponent,\n    selectors: [[\"wm-toolbaritem\"]],\n    viewQuery: function ToolBarItemComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c59, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.toolbarTemplate = _t.first);\n      }\n    },\n    inputs: {\n      model: \"model\"\n    },\n    outputs: {\n      clicked: \"clicked\",\n      ToolBarItemMouseOver: \"ToolBarItemMouseOver\",\n      ToolBarItemMouseOut: \"ToolBarItemMouseOut\"\n    },\n    features: [i0.ɵɵProvidersFeature([{\n      provide: ToolBarToolComponent,\n      useExisting: forwardRef(() => ToolBarItemComponent)\n    }]), i0.ɵɵInheritDefinitionFeature],\n    decls: 2,\n    vars: 0,\n    consts: [[\"toolbarTemplate\", \"\"], [4, \"ngIf\"], [\"kendoButton\", \"\", 1, \"toolbarItem\", 3, \"disabled\", \"click\", \"mouseover\", \"mouseout\"], [\"toolitem\", \"\"], [\"class\", \"imageContainer\", 4, \"ngIf\"], [3, \"ngClass\", 4, \"ngIf\"], [1, \"imageContainer\"], [\"onerror\", \"this.style.display='none'\", 1, \"toolbarImage\", 3, \"src\", \"alt\"], [3, \"ngClass\"]],\n    template: function ToolBarItemComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ToolBarItemComponent_ng_template_0_Template, 1, 1, \"ng-template\", null, 0, i0.ɵɵtemplateRefExtractor);\n      }\n    },\n    directives: [i6.NgIf, i6$2.ButtonDirective, i6.NgClass],\n    styles: [\".toolbarItem[_ngcontent-%COMP%]{margin:0 .2em;vertical-align:middle;display:grid;padding:0 10px;text-align:center;line-height:24px}.imageContainer[_ngcontent-%COMP%]{display:block;margin:auto;min-height:24px}.toolbarImage[_ngcontent-%COMP%]{vertical-align:middle}.buttonText[_ngcontent-%COMP%]{font-family:initial}\"]\n  });\n\n  __decorate([serverEvent('clicked'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], ToolBarItemComponent.prototype, \"clickHandler\", null);\n\n  return ToolBarItemComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet ToolbarComponent = /*#__PURE__*/(() => {\n  class ToolbarComponent extends BaseControlComponent {\n    /**\r\n     * Constructor for the menu component\r\n     * @param changeDetector service to track the change in the model\r\n     * @param service service to use the Mobilize core\r\n     */\n\n    /* c8 ignore start */\n    constructor(changeDetector, renderer2, element, service, lengthConverter, emitter) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter);\n      this.changeDetector = changeDetector;\n      this.renderer2 = renderer2;\n      this.element = element;\n      this.service = service;\n      this.emitter = emitter;\n      this.clicked = new EventEmitter();\n      this.ToolBarMouseOver = new EventEmitter();\n      this.ToolBarMouseOut = new EventEmitter();\n    }\n    /**\r\n     * ToolBar clicked event to expose handler to be bound by\r\n     * external code handler\r\n     * @param event ToolBar even data.\r\n     */\n\n\n    toolbarClicked(event) {\n      this.clicked.emit(event);\n    }\n    /**\r\n     * ToolBar Mouse Over event to expose micro help message handler to be bound by\r\n     * external code handler\r\n     * @param event ToolBar event data.\r\n     */\n\n\n    toolbarMouseOver(event) {\n      this.ToolBarMouseOver.emit(event);\n    }\n    /**\r\n     * ToolBar Mouse Out event to hide micro help message handler to be bound by\r\n     * external code handler\r\n     * @param event ToolBar event data.\r\n     */\n\n\n    toolbarMouseOut(event) {\n      this.ToolBarMouseOut.emit(event);\n    }\n\n  }\n\n  ToolbarComponent.ɵfac = function ToolbarComponent_Factory(t) {\n    return new (t || ToolbarComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.WebMapService), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8));\n  };\n\n  ToolbarComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ToolbarComponent,\n    selectors: [[\"wm-toolbar\"]],\n    inputs: {\n      toolbarModel: \"toolbarModel\"\n    },\n    outputs: {\n      clicked: \"clicked\",\n      ToolBarMouseOver: \"ToolBarMouseOver\",\n      ToolBarMouseOut: \"ToolBarMouseOut\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[\"kendoTooltip\", \"\", 4, \"ngIf\"], [\"kendoTooltip\", \"\"], [\"ngFor\", \"\", 3, \"ngForOf\"], [3, \"model\", \"clicked\", \"ToolBarItemMouseOver\", \"ToolBarItemMouseOut\"]],\n    template: function ToolbarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ToolbarComponent_kendo_toolbar_0_Template, 2, 1, \"kendo-toolbar\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.toolbarModel);\n      }\n    },\n    directives: [i4.ToolBarComponent, ToolBarItemComponent, i6.NgIf, i7.TooltipDirective, i6.NgForOf],\n    styles: [\"\"]\n  });\n  return ToolbarComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/* c8 ignore start */\n\n\nlet UserObjectComponent = /*#__PURE__*/(() => {\n  class UserObjectComponent extends BaseControlComponent {\n    constructor(detector, render, elem, lengthConverter, mTabOService, uObjectEventService, emitter, tabPageOrderService) {\n      super(detector, render, elem, lengthConverter, emitter, mTabOService, tabPageOrderService);\n      this.detector = detector;\n      this.render = render;\n      this.elem = elem;\n      this.mTabOService = mTabOService;\n      this.uObjectEventService = uObjectEventService;\n      this.emitter = emitter;\n      this.tabPageOrderService = tabPageOrderService;\n      /* c8 ignore stop */\n\n      this.KeyDown = new EventEmitter();\n      /* c8 ignore next 3 */\n\n      if (this.uObjectEventService) {\n        this.uObjectEventService.instance = this;\n      }\n    }\n\n    static KeyDownArgsExtractor(event, component) {\n      const key = !!event.keyCode ? event.keyCode : event.which;\n      let keyFlags = 0;\n\n      if (event.ctrlKey && event.shiftKey) {\n        keyFlags = 3;\n      } else if (event.ctrlKey) {\n        keyFlags = 2;\n      } else if (event.shiftKey) {\n        keyFlags = 1;\n      }\n\n      return [key, keyFlags];\n    }\n\n    ngOnInit() {\n      super.ngOnInit();\n      this.registerTabService();\n      this.registerTabPageOrderService();\n    }\n    /**\r\n     * @description\r\n     * Method to get the VScrollBar from the model\r\n     */\n\n\n    get vScrollBar() {\n      return this.model.VScrollBar;\n    }\n    /**\r\n     * @description\r\n     * Method to get the HScrollBar from the model\r\n     */\n\n\n    get hScrollBar() {\n      return this.model.HScrollBar;\n    }\n    /**\r\n     * Gets whether is user control\r\n     */\n\n\n    get isUserControl() {\n      return true;\n    }\n    /**\r\n     * Override registers tab service\r\n     * Register current component instance\r\n     */\n\n\n    registerTabService() {\n      /* c8 ignore else */\n      if (this.mTabOService) {\n        this.mTabOService.registerInstance(this);\n        this.currentTabService = this.mTabOService;\n      }\n    }\n    /**\r\n     * Register current component instance in TabPageOrder\r\n     */\n\n\n    registerTabPageOrderService() {\n      /* c8 ignore else */\n      if (this.tabPageOrderService) {\n        this.tabPageOrderService.tabPageTabOutService.subscribe(evt => {\n          Utils.preventPropagation(evt);\n          this.mTabOService.resolveTab(this.tabNodeReference, evt.shiftKey, event);\n        });\n      }\n    }\n    /**\r\n     * Applies focus to a selectable element in\r\n     * user control. It triggers dom element focus()\r\n     * @param isShiftPressed If shift key is pressed\r\n     */\n\n\n    applyFocusControl(isShiftPressed) {\n      /* c8 ignore else */\n      if (this.tabPageOrderService) {\n        const tabNode = !isShiftPressed ? this.tabPageOrderService.startTabNode : this.tabPageOrderService.endTabNode;\n        const availableTabNode = this.tabPageOrderService.availableNextNode(tabNode, isShiftPressed, null, 1);\n        /* c8 ignore else */\n\n        if (availableTabNode) {\n          availableTabNode.currentInstance.applyFocus();\n        }\n      }\n    }\n    /**\r\n     * Sets my style to UserObject components, it applies [BaseControlComponent]\r\n     * visual properties and UO custom Enabled property.\r\n     * @param [style] Custom style to be overriden by setMyStyle mechanism.\r\n     * @returns A css inline style object with visual properties.\r\n     */\n\n\n    setMyStyle(style) {\n      const pStyle = super.setMyStyle(style);\n\n      if (!this.enabled) {\n        pStyle['pointer-events'] = 'none';\n      }\n\n      if (this.vScrollBar) {\n        pStyle['overflow-y'] = 'scroll';\n      }\n\n      if (this.hScrollBar) {\n        pStyle['overflow-x'] = 'scroll';\n      }\n\n      return pStyle;\n    }\n    /**\r\n     * Keys down handler\r\n     * @param event\r\n     */\n\n\n    keyDownHandler(event) {\n      this.KeyDown.emit(event);\n    }\n\n  }\n\n  UserObjectComponent.ɵfac = function UserObjectComponent_Factory(t) {\n    return new (t || UserObjectComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(UserObjectEventService, 8), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n  };\n\n  UserObjectComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: UserObjectComponent,\n    selectors: [[\"ng-component\"]],\n    outputs: {\n      KeyDown: \"KeyDown\"\n    },\n    features: [i0.ɵɵProvidersFeature([ContainerControlTabOrderService]), i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function UserObjectComponent_Template(rf, ctx) {},\n    encapsulation: 2,\n    changeDetection: 0\n  });\n\n  __decorate([serverEvent('keydown', UserObjectComponent.KeyDownArgsExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [EventData]), __metadata(\"design:returntype\", void 0)], UserObjectComponent.prototype, \"keyDownHandler\", null);\n\n  return UserObjectComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/***********************************************************************\r\n\r\n* Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n\r\n*\r\n\r\n * This file is part of the Mobilize Frameworks, which is\r\n\r\n * proprietary and confidential.\r\n\r\n*\r\n\r\n * NOTICE:  All information contained herein is, and remains\r\n\r\n* the property of Mobilize.Net Corporation.\r\n\r\n* The intellectual and technical concepts contained herein are\r\n\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n\r\n* Dissemination of this information or reproduction of this material\r\n\r\n* is strictly forbidden unless prior written permission is obtained\r\n\r\n* from Mobilize.Net Corporation.\r\n\r\n * This file is subject to the terms and conditions defined in\r\n\r\n* file 'LICENSE.txt', which is part of this source code package.\r\n\r\n***********************************************************************/\n\n\nclass ListBoxStyle extends PBStyle {\n  constructor() {\n    super(...arguments);\n    this['font-size'] = '8.25pt';\n    this['font-weight'] = 'inherit';\n    this['font-family'] = 'inherit';\n    this['border-style'] = 'solid';\n  }\n\n}\n\nvar ListBoxComponent_1;\nlet ListBoxComponent = ListBoxComponent_1 = class ListBoxComponent extends ListBoxBaseComponent {\n  /* c8 ignore start */\n  constructor(changeDetector, renderer2, element, service, iconservice, lengthConverter, emitter, mTabOrderService, tabPageOrderService) {\n    super(changeDetector, renderer2, element, lengthConverter, emitter, mTabOrderService, tabPageOrderService);\n    this.changeDetector = changeDetector;\n    this.renderer2 = renderer2;\n    this.element = element;\n    this.service = service;\n    this.iconservice = iconservice;\n    this.emitter = emitter;\n    this.mTabOrderService = mTabOrderService;\n    this.tabPageOrderService = tabPageOrderService;\n    this.defaultDataUrl = 'api/listbox';\n    this.doubleClicked = new EventEmitter();\n    this.selectionChanged = new EventEmitter();\n    this.keyDownHandled = new EventEmitter();\n    this.fetchItems = this.fetchItems.bind(this);\n    this.keyDownHandler = this.keyDownHandler.bind(this);\n    this.selectionChange = this.selectionChange.bind(this);\n    this.selectableType = this.selectableType.bind(this);\n    this.refreshable = this.refreshable.bind(this);\n    this.selectedItems = this.selectedItems.bind(this);\n  }\n  /**\r\n   * Retrieve the last selectedIndex\r\n   */\n\n\n  static indexExtractor(domEvent, comp) {\n    const source = comp.listboxEl['widget'];\n    const itemIds = source.dataItems().map(function (val) {\n      return val.uid;\n    });\n    return source.select().last().toArray().map(function (value) {\n      return itemIds.indexOf(value.id) + 1;\n    });\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.style = new ListBoxStyle();\n    this.registerTabService();\n  }\n\n  ngAfterViewChecked() {\n    const style = this.setMyStyle();\n    const element = this.el.nativeElement.querySelector('.k-widget');\n    /* c8 ignore else */\n\n    if (element) {\n      for (const key in style) {\n        /* c8 ignore else */\n        if (style.hasOwnProperty(key)) {\n          this.renderer.setStyle(element, key, style[key]);\n        }\n      }\n    }\n  }\n\n  ngDoCheck() {\n    super.ngDoCheck();\n\n    if (this.dirty && this.listboxEl) {\n      this.fetchItems();\n      this.dirty = false;\n    }\n  }\n  /**\r\n   * Returns the expected item template displaying\r\n   * images if required\r\n   */\n\n\n  get pictureListBoxTemplate() {\n    return kendo.template(`<img  src=\"#: data.image#\" onerror=\"this.style.display=\\'none\\'\"/>\n            <i class=\"${this.iconClass}\">#: data.icon || '' #</i>\n            <span class=\"k-state-default\">#: data.text #</span>`);\n  }\n  /**\r\n   * Returns current selected item text\r\n   */\n\n\n  get currentSelectedText() {\n    return this.model.Selected === undefined ? '' : this.model.Selected;\n  }\n\n  registerFunctions() {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const context = this;\n    this.listboxEl['registerFunction']('Enabled', this.disabledKendo);\n    this.listboxEl['registerFunction']('MultiSelect', this.selectableType);\n    this.listboxEl['registerFunction']('Dirty', this.refreshable);\n    this.listboxEl['registerFunction']('Selected', this.selectedItems);\n    this.listboxEl['widget'].wrapper.on('dblclick', e => {\n      context.doubleClickAction(e);\n    });\n  }\n\n  ngAfterViewInit() {\n    super.ngAfterViewInit();\n    /* c8 ignore else */\n\n    if (this.listboxEl) {\n      this.registerFunctions();\n    }\n\n    if (this.id && this.listboxEl) {\n      this.fetchItems();\n    }\n  }\n  /**\r\n   * @description\r\n   * Returns a collection with the items received in the model or an API.\r\n   */\n\n\n  fetchItems() {\n    this.service.fetch(this.url, this.id, null, this.model, this.itemsExtractor.bind(this)).subscribe(data => {\n      this.items = data.data;\n      this.listboxEl['widget'].setDataSource(this.items);\n      this.disabledKendo();\n      this.selectableType();\n      this.selectedItems();\n      this.detectChanges();\n    });\n  }\n  /**\r\n   * @description\r\n   * Gets iconclass from icon service\r\n   * @returns {string}\r\n   */\n\n\n  get iconClass() {\n    return this.iconservice.iconClass;\n  }\n  /*\r\n   * Gets the itemPictureIndex array\r\n   */\n\n\n  get itemPictureIndex() {\n    return this.model.ItemPictureIndex;\n  }\n  /**\r\n   * Gets the images names array\r\n   */\n\n\n  get pictureName() {\n    return this.model.PictureName;\n  }\n  /**\r\n   * Extracts the Items collection data from model component.\r\n   * @param model\r\n   */\n\n\n  itemsExtractor(model) {\n    return model.Items ? model.Items.map((item, index) => this.createItemData(item, index)) : null;\n  }\n  /**\r\n   * Creates a template for the listbox item\r\n   * @param currentValue The current collection item\r\n   * @param index the current item index\r\n   */\n\n\n  createItemData(currentValue, index) {\n    const item = {\n      text: currentValue,\n      value: currentValue,\n      icon: undefined,\n      image: undefined\n    };\n    const currentImgIndex = this.itemPictureIndex ? this.itemPictureIndex[index] : -1;\n    let imageName = this.pictureName ? this.pictureName[currentImgIndex] : undefined;\n    const iconName = this.iconservice.getItemName(imageName) || '';\n\n    if (imageName && iconName) {\n      item.icon = iconName;\n      imageName = undefined;\n    }\n\n    item.image = imageName;\n    return item;\n  }\n  /**\r\n   * Handler the key down event, move the scroll to the first element that starts with that letter pressed.\r\n   * @param event {any}\r\n   */\n\n\n  keyDownHandler(event) {\n    const keyLowerCase = event.key.toLocaleLowerCase();\n    const index = this.model.Items.findIndex(item => keyLowerCase === item.charAt(0).toLocaleLowerCase()) + 1;\n    /* c8 ignore else */\n\n    if (index && index > 0) {\n      this.el.nativeElement.querySelector(`.k-reset li:nth-child(${index})`).scrollIntoView();\n      /* c8 ignore next */\n\n      this.selectedIndexes = this.multiSelect ? [index] : [...this.selectedIndexes, index];\n      this.selectedItems();\n    }\n\n    this.keyDownHandled.emit(event);\n  }\n  /**\r\n   * Double click action handler\r\n   * @param event DOM Event\r\n   */\n\n\n  doubleClickAction(event) {\n    this.updateSelectedIndices();\n    this.dblClkHandler(event);\n  }\n  /**\r\n   * Selection change handler\r\n   * @param event DOM Event\r\n   */\n\n\n  selectionChange(event) {\n    this.updateSelectedIndices();\n\n    if (this.isSelectIndices) {\n      this.isSelectIndices = false;\n    } else {\n      this.selChangeHandler(event);\n    }\n  }\n  /**\r\n   * Triggers lbndblclk event to server if it is bound\r\n   * @param event The current event data triggered by the widget\r\n   */\n\n\n  dblClkHandler(event) {\n    const data = new EventData(event, this.id, this.mapperId);\n    this.doubleClicked.emit(data);\n  }\n  /**\r\n   * Triggers lbnselchange event to server if it is bound\r\n   * @param event The current event data triggered by the widget\r\n   */\n\n\n  selChangeHandler(event) {\n    const data = new EventData(event, this.id, this.mapperId);\n    this.selectionChanged.emit(data);\n  }\n  /**\r\n   * Updates selected indices with the new values of select widget array\r\n   */\n\n\n  updateSelectedIndices() {\n    const source = this.listboxEl['widget'];\n    const itemIds = source.dataItems().map(function (val) {\n      return val.uid;\n    });\n    this.selectedIndexes = source.select().toArray().map(function (value) {\n      return itemIds.indexOf(value.id) + 1;\n    });\n  }\n  /**\r\n   * Sets custom Url.\r\n   * @param url custom url\r\n   */\n\n\n  set url(url) {\n    this.dataUrl = url;\n  }\n  /**\r\n   * Get custom or default Url.\r\n   */\n\n\n  get url() {\n    if (this.dataUrl && this.dataUrl.length > 0) {\n      return this.dataUrl;\n    }\n\n    return this.defaultDataUrl;\n  }\n  /**\r\n   * Get dataTextField of datasource items.\r\n   */\n\n\n  get dataTextField() {\n    return this.model.DataTextField || 'text';\n  }\n  /**\r\n   * Get dataValueField of datasource items.\r\n   */\n\n\n  get dataValueField() {\n    return this.model.DataValueField || 'value';\n  }\n\n  get extended() {\n    return this.model.ExtendedSelect || this.model.Extended;\n  }\n  /**\r\n   * Boolean value whether a listbox is multiselectable\r\n   */\n\n\n  get multiSelect() {\n    return this.model.MultiSelect || this.extended || false;\n  }\n  /**\r\n   * Gets selected indexes\r\n   */\n\n\n  get selectedIndexes() {\n    if (this.model.SelectedIndexes && this.model.SelectedIndexes.length > 0) {\n      return this.service.config.webMapVersion === WMConstants.version5 ? this.model.SelectedIndexes : JSON.parse(this.model.SelectedIndexes);\n    } else {\n      return [];\n    }\n  }\n  /**\r\n   * Sets selected indexes and notify server changes\r\n   */\n\n\n  set selectedIndexes(value) {\n    if (value) {\n      this.model.SelectedIndexes = this.service.config.webMapVersion === WMConstants.version5 ? value : JSON.stringify(value);\n    }\n  }\n  /**\r\n   * Gets the value of the border style\r\n   */\n\n\n  get borderStyle() {\n    switch (this.model.BorderStyle) {\n      case BorderStyle.StyleLowered:\n        return 'inset';\n\n      case BorderStyle.StyleRaised:\n        return 'outset';\n\n      case BorderStyle.StyleShadowBox:\n      case BorderStyle.StyleBox:\n      default:\n        return 'solid';\n    }\n  }\n  /**\r\n   * Disable listbox options.\r\n   */\n\n\n  disabledKendo() {\n    this.listboxEl['widget'].enable('.k-item', this.enabled);\n  }\n  /**\r\n   * Selectable function .\r\n   * @param selection sel could be single or multiple in order to select listbox items.\r\n   */\n\n\n  selectableType() {\n    this.listboxEl['widget'].selectable.options.multiple = this.multiSelect;\n  }\n  /**\r\n   * Refresh listbox.\r\n   */\n\n\n  refreshable() {\n    this.fetchItems();\n  }\n  /**\r\n   * Sets Current selected items\r\n   */\n\n\n  selectedItems() {\n    this.listboxEl['widget'].clearSelection(); // PowerBuilder use the array with base one.\n\n    const selectedItems = this.selectedIndexes;\n\n    if (selectedItems && selectedItems.length > 0 && this.currentSelectedText !== '') {\n      this.selectedIndices(selectedItems);\n    }\n  }\n  /**\r\n   * Calls listbox reference and sets rows\r\n   * @param indexSelected array with selected indices\r\n   */\n\n\n  selectedIndices(indexSelected) {\n    if (indexSelected.forEach) {\n      indexSelected.forEach(element => {\n        this.isSelectIndices = true;\n        this.listboxEl['widget'].select(this.listboxEl['widget'].items()[element - 1]);\n\n        if (!this.multiSelect) {\n          this.listboxEl['widget'].items()[element - 1]?.scrollIntoView();\n        }\n      });\n    }\n  }\n  /**\r\n   * Returns a valid style object to\r\n   * be applied according to the styling information set in the\r\n   * control's model\r\n   */\n\n\n  setMyStyle() {\n    const CustomStyle = {\n      BorderStyle: this.borderStyle\n    };\n    return super.setMyStyle(CustomStyle);\n  }\n\n  focusIn(event) {\n    super.focusIn(event);\n  }\n\n  focusOut(event) {\n    super.focusOut(event);\n  }\n  /**\r\n   * @description\r\n   * Gets focusable element inside of the component\r\n   */\n\n\n  get focusableElement() {\n    return this.listboxEl;\n  }\n\n};\n\nListBoxComponent.ɵfac = function ListBoxComponent_Factory(t) {\n  return new (t || ListBoxComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.WebMapService), i0.ɵɵdirectiveInject(IconsService), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n};\n\nListBoxComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ListBoxComponent,\n  selectors: [[\"wm-listbox\"]],\n  viewQuery: function ListBoxComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c60, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listboxEl = _t.first);\n    }\n  },\n  inputs: {\n    dataUrl: \"dataUrl\"\n  },\n  outputs: {\n    doubleClicked: \"doubleClicked\",\n    selectionChanged: \"selectionChanged\",\n    keyDownHandled: \"keyDownHandled\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[3, \"keydown.tab\", \"keydown.shift.tab\", \"keydown\", 4, \"ngIf\"], [3, \"keydown.tab\", \"keydown.shift.tab\", \"keydown\"], [\"wmPBControls\", \"\", \"wmFocusable\", \"\", \"data-role\", \"listbox\", 3, \"hostComponent\", \"model\", \"ngClass\", \"tabindex\", \"ngStyle\", \"bound\", 4, \"ngIf\"], [\"wmPBControls\", \"\", \"wmFocusable\", \"\", \"data-role\", \"listbox\", 3, \"hostComponent\", \"model\", \"ngClass\", \"tabindex\", \"ngStyle\", \"bound\"], [\"listbox\", \"\"]],\n  template: function ListBoxComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, ListBoxComponent_div_0_Template, 2, 1, \"div\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.model && ctx.visible);\n    }\n  },\n  directives: [KendoListBoxComponent, i6.NgIf, ControlsPowerDirective, FocusableDirective, i6.NgClass, i6.NgStyle],\n  styles: [\"select[_ngcontent-%COMP%]{display:none!important}\"]\n});\n\n__decorate([serverEvent('lbndblclk', ListBoxComponent_1.indexExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], ListBoxComponent.prototype, \"dblClkHandler\", null);\n\n__decorate([serverEvent('lbnselchange', ListBoxComponent_1.indexExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], ListBoxComponent.prototype, \"selChangeHandler\", null);\n\n__decorate([NotifyChange('SelectedIndexes'), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], ListBoxComponent.prototype, \"selectedIndexes\", null);\n\n__decorate([serverEvent('lbnsetfocus'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], ListBoxComponent.prototype, \"focusIn\", null);\n\n__decorate([serverEvent('lbnkillfocus'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], ListBoxComponent.prototype, \"focusOut\", null);\n\nListBoxComponent = ListBoxComponent_1 = __decorate([dataTransfer(['lstBx']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, WebMapService, IconsService, LengthConverter, DataManagerEventService, MainTabOrderService, ContainerControlTabOrderService])], ListBoxComponent);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar MonthCalendarComponent_1;\nlet MonthCalendarComponent = MonthCalendarComponent_1 = class MonthCalendarComponent extends CommonStyleComponent {\n  /* c8 ignore start */\n  constructor(changeDetector, renderer2, element, lengthConverter, emitter, mTabOrderService, tabPageOrderService) {\n    super(changeDetector, renderer2, element, lengthConverter, emitter, mTabOrderService, tabPageOrderService);\n    this.changeDetector = changeDetector;\n    this.renderer2 = renderer2;\n    this.element = element;\n    this.emitter = emitter;\n    this.mTabOrderService = mTabOrderService;\n    this.tabPageOrderService = tabPageOrderService;\n    /* c8 ignore stop */\n    // Used to validate  when caledar is displayed\n\n    this.showCalendar = false;\n    this.dateselected = new EventEmitter();\n    this.doubleClicked = new EventEmitter();\n  }\n  /**\r\n   * @description\r\n   * Gets focusable element inside of the component\r\n   */\n\n  /* c8 ignore next 3 */\n\n\n  get focusableElement() {\n    return this.monthCalendar;\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.registerTabService(); // Workaround, There is a kendo bug when kendo-calendar is inside a kendo window.\n\n    setTimeout(() => {\n      this.showCalendar = true;\n    });\n  }\n\n  dateSelected(value) {\n    const data = new EventData(value.toString(), this.id, this.mapperId);\n    this.dateselected.emit(data);\n    this.emitDataManagerEvent('change', data);\n  }\n  /***\r\n   * @description Gets the arguments to send with the dateSelect Event\r\n   * @param event event from the dom\r\n   * @returns date selected\r\n   */\n\n\n  static dateSelectedArgsExtractor(event) {\n    const date = new Date(event);\n    const res = Utils.dateToString(date);\n    return [res];\n  }\n\n  doubleClickHandler(event) {\n    const data = new EventData(event, this.id, this.mapperId);\n    this.doubleClicked.emit(data);\n  }\n\n};\n\nMonthCalendarComponent.ɵfac = function MonthCalendarComponent_Factory(t) {\n  return new (t || MonthCalendarComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n};\n\nMonthCalendarComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MonthCalendarComponent,\n  selectors: [[\"wm-month-calendar\"]],\n  viewQuery: function MonthCalendarComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c62, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.monthCalendar = _t.first);\n    }\n  },\n  outputs: {\n    dateselected: \"dateselected\",\n    doubleClicked: \"doubleClicked\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"ngClass\", \"hostComponent\", \"keydown.tab\", \"keydown.shift.tab\", \"valueChange\", \"dblclick\", 4, \"ngIf\"], [\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"ngClass\", \"hostComponent\", \"keydown.tab\", \"keydown.shift.tab\", \"valueChange\", \"dblclick\"], [\"monthCalendar\", \"\"]],\n  template: function MonthCalendarComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, MonthCalendarComponent_kendo_calendar_0_Template, 2, 2, \"kendo-calendar\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.showCalendar);\n    }\n  },\n  directives: [i5.CalendarComponent, i6.NgIf, ControlsPowerDirective, FocusableDirective, i6.NgClass],\n  styles: [\"\"]\n});\n\n__decorate([serverEvent('dateselected', MonthCalendarComponent_1.dateSelectedArgsExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], MonthCalendarComponent.prototype, \"dateSelected\", null);\n\n__decorate([serverEvent('dwnlbuttondblclk'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], MonthCalendarComponent.prototype, \"doubleClickHandler\", null);\n\nMonthCalendarComponent = MonthCalendarComponent_1 = __decorate([dataTransfer(['mthCldr']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, LengthConverter, DataManagerEventService, MainTabOrderService, ContainerControlTabOrderService])], MonthCalendarComponent);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nvar htextAlign = /*#__PURE__*/(() => {\n  (function (htextAlign) {\n    htextAlign[htextAlign[\"Left\"] = 0] = \"Left\";\n    htextAlign[htextAlign[\"Center\"] = 1] = \"Center\";\n    htextAlign[htextAlign[\"Right\"] = 2] = \"Right\";\n  })(htextAlign || (htextAlign = {}));\n\n  return htextAlign;\n})();\n\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\nvar vtextAlign = /*#__PURE__*/(() => {\n  (function (vtextAlign) {\n    vtextAlign[vtextAlign[\"Bottom\"] = 0] = \"Bottom\";\n    vtextAlign[vtextAlign[\"MultiLine\"] = 1] = \"MultiLine\";\n    vtextAlign[vtextAlign[\"Top\"] = 2] = \"Top\";\n    vtextAlign[vtextAlign[\"VCenter\"] = 3] = \"VCenter\";\n  })(vtextAlign || (vtextAlign = {}));\n\n  return vtextAlign;\n})();\nlet PictureButtonComponent = /*#__PURE__*/(() => {\n  let PictureButtonComponent = class PictureButtonComponent extends BasePictureComponent {\n    /* c8 ignore start */\n    constructor(cd, rnd2, elem, lengthConverter, em, is, mTabOService, tabPageOrderService) {\n      super(cd, rnd2, elem, lengthConverter, em, is, mTabOService, tabPageOrderService);\n      this.em = em;\n      this.is = is;\n      this.mTabOService = mTabOService;\n      this.tabPageOrderService = tabPageOrderService;\n    }\n    /**\r\n     * @description\r\n     * Gets focusable element inside of the component\r\n     */\n\n\n    get focusableElement() {\n      return this.validateFocusElement(this.picture);\n    }\n    /**\r\n     * Gets the picture disabled name.\r\n     */\n\n\n    get disabledName() {\n      return this.is.getItemName(this.model.DisabledName) || this.model.DisabledName;\n    }\n    /**\r\n     * Gets the htextAlign.\r\n     */\n\n\n    get htextAlign() {\n      return this.model.HtextAlign || 0;\n    }\n    /**\r\n     * Gets the vtextAlign.\r\n     */\n\n\n    get vtextAlign() {\n      return this.model.VtextAlign || 0;\n    }\n    /**\r\n     * Returns image whether enabled state.\r\n     */\n\n\n    stateMode() {\n      return this.enabled ? this.pictureName : this.disabledName;\n    }\n    /**\r\n     * @description\r\n     * Returns the url source to load the image.\r\n     * @returns { string }\r\n     */\n\n\n    get source() {\n      if (this.enabled && Icons[this.model.PictureName]) {\n        return this.model.PictureName;\n      } else if (!this.enabled && Icons[this.model.DisabledName]) {\n        return this.model.DisabledName;\n      }\n\n      return undefined;\n    }\n    /**\r\n     *\r\n     * @param alignClass HalfClass string statement\r\n     */\n\n\n    buildHtextAlign(alignClass) {\n      const align = this.htextAlign;\n\n      switch (align) {\n        case htextAlign.Center:\n          return `${alignClass}-centered`;\n\n        case htextAlign.Right:\n          return `${alignClass}-right`;\n\n        case htextAlign.Left:\n        default:\n          return `${alignClass}-left`;\n      }\n    }\n    /**\r\n     *\r\n     * @param alignClass HalfClass string statement\r\n     */\n\n\n    buildVtextAlign() {\n      const align = this.vtextAlign;\n\n      switch (align) {\n        case vtextAlign.MultiLine:\n          return 'top';\n\n        case vtextAlign.Top:\n          return 'top';\n\n        case vtextAlign.VCenter:\n          return 'centered';\n\n        case vtextAlign.Bottom:\n        default:\n          return 'bottom';\n      }\n    }\n    /**\r\n     * Align text with parameters specified on model.\r\n     */\n\n\n    alignStyle() {\n      const buildClass = this.buildVtextAlign();\n      return this.buildHtextAlign(buildClass);\n    }\n    /**\r\n     * This function selects lower Width or height value in order to prevent icon to overincrease\r\n     */\n\n\n    myFontSize() {\n      return this.model.Position.Height > this.model.Position.Width ? {\n        'font-size.px': this.model.Position.Width\n      } : {\n        'font-size.px': this.model.Position.Height\n      };\n    }\n\n  };\n\n  PictureButtonComponent.ɵfac = function PictureButtonComponent_Factory(t) {\n    return new (t || PictureButtonComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(IconsService), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n  };\n\n  PictureButtonComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: PictureButtonComponent,\n    selectors: [[\"wm-picture-button\"]],\n    viewQuery: function PictureButtonComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c56, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.picture = _t.first);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[\"wmControl\", \"\", \"kendoTooltip\", \"\", \"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"pointerEvents\", \"ngClass\", \"tabindex\", \"hostComponent\", \"keydown.tab\", \"keydown.shift.tab\", \"click\", 4, \"ngIf\"], [\"wmControl\", \"\", \"kendoTooltip\", \"\", \"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"ngClass\", \"tabindex\", \"hostComponent\", \"keydown.tab\", \"keydown.shift.tab\", \"click\"], [\"picture\", \"\"], [\"class\", \"containerImage\", 3, \"pointerEvents\", 4, \"ngIf\"], [1, \"containerImage\"], [3, \"title\", \"src\", \"dblclick\", \"click\"], [3, \"ngClass\"], [1, \"centered\", 3, \"dblclick\", \"click\"], [3, \"ngClass\", \"title\", \"ngStyle\"]],\n    template: function PictureButtonComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, PictureButtonComponent_div_0_Template, 4, 7, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.model && ctx.visible);\n      }\n    },\n    directives: [i6.NgIf, i7.TooltipDirective, ControlsPowerDirective, FocusableDirective, i6.NgClass, i6.NgStyle],\n    styles: [\".borderClass>img{border:0}.invertColors[_ngcontent-%COMP%]{filter:invert(100%)}.containerImage[_ngcontent-%COMP%]{position:absolute;text-align:center;width:100%;height:100%}.bottom-left[_ngcontent-%COMP%]{position:absolute;bottom:8px;left:16px;z-index:10}.bottom-centered[_ngcontent-%COMP%]{position:absolute;bottom:1px;left:50%;transform:translate(-50%,-50%);z-index:10}.bottom-right[_ngcontent-%COMP%]{position:absolute;bottom:8px;right:16px;z-index:10}.top-left[_ngcontent-%COMP%]{position:absolute;top:8px;left:16px;z-index:10}.top-centered[_ngcontent-%COMP%]{position:absolute;top:16px;left:50%;transform:translate(-50%,-50%);z-index:10}.top-right[_ngcontent-%COMP%]{position:absolute;top:8px;right:16px;z-index:10}.centered-left[_ngcontent-%COMP%]{position:absolute;top:50%;left:16px;z-index:10}.centered-centered[_ngcontent-%COMP%]{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);z-index:10}.centered-right[_ngcontent-%COMP%]{position:absolute;top:50%;right:16px;z-index:10}\"]\n  });\n  PictureButtonComponent = __decorate([dataTransfer(['picBttn']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, LengthConverter, DataManagerEventService, IconsService, MainTabOrderService, ContainerControlTabOrderService])], PictureButtonComponent);\n  return PictureButtonComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet WDropDownPictureListBoxComponent = /*#__PURE__*/(() => {\n  let WDropDownPictureListBoxComponent = class WDropDownPictureListBoxComponent extends DropDownListBoxComponent {\n    /* c8 ignore start */\n    constructor(changeDetectorEx, serviceRefEx, renderer2Ex, elementEx, iconservice, lengthConverter, emitterEx, mTOService, tabPageOrderService) {\n      super(changeDetectorEx, serviceRefEx, renderer2Ex, elementEx, lengthConverter, emitterEx, mTOService, tabPageOrderService);\n      this.changeDetectorEx = changeDetectorEx;\n      this.serviceRefEx = serviceRefEx;\n      this.renderer2Ex = renderer2Ex;\n      this.elementEx = elementEx;\n      this.iconservice = iconservice;\n      this.emitterEx = emitterEx;\n      this.mTOService = mTOService;\n      this.tabPageOrderService = tabPageOrderService;\n      /**\r\n       * Default url to collect items.\r\n       */\n\n      this.defaultDataUrl = 'api/dropdownpicturelistbox';\n    }\n    /**\r\n     * @description\r\n     * Gets focusable element inside of the component\r\n     */\n\n\n    get focusableElement() {\n      return this.combo;\n    }\n\n    ngOnInit() {\n      super.ngOnInit();\n    }\n    /**\r\n     * @description\r\n     * Gets iconclass from icon service\r\n     * @returns {string}\r\n     */\n\n\n    get iconClass() {\n      return this.iconservice.iconClass;\n    }\n    /**\r\n     * @description\r\n     * Returns a collection with the items received in the model or an API.\r\n     */\n\n\n    fetchItems() {\n      this.loading = true;\n      this.serviceRefEx.fetch(this.url, this.id, null, this.model, this.itemsExtractor.bind(this)).subscribe(data => {\n        this.items = data.data;\n        this.pictures = data.pictures;\n        this.loading = false;\n        this.detectChanges();\n      });\n    }\n    /**\r\n     * Extracts the Items collection data from model component.\r\n     * @param model\r\n     */\n\n\n    itemsExtractor(model) {\n      return model.Items ? model.Items.map(item => ({\n        text: item.text,\n        value: item.value,\n        picture: item.picture\n      })) : null;\n    }\n    /**\r\n     * Gets the current icon name\r\n     * @param pictureIndex the current item picture index\r\n     * @returns icon name\r\n     */\n\n\n    getIconName(pictureIndex) {\n      return this.iconservice.getItemName(this.pictures[pictureIndex]);\n    }\n    /**\r\n     * Gets item image source if applies\r\n     * @param pictureIndex the current item picture index\r\n     * @returns image source path\r\n     */\n\n\n    getIconSource(pictureIndex) {\n      return this.iconservice.getItemNameSource(this.pictures[pictureIndex]);\n    }\n\n  };\n\n  WDropDownPictureListBoxComponent.ɵfac = function WDropDownPictureListBoxComponent_Factory(t) {\n    return new (t || WDropDownPictureListBoxComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.WebMapService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(IconsService), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n  };\n\n  WDropDownPictureListBoxComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: WDropDownPictureListBoxComponent,\n    selectors: [[\"wm-dropdownpicturelistbox\"]],\n    viewQuery: function WDropDownPictureListBoxComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c48, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.combo = _t.first);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 10,\n    consts: [[\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"data\", \"ngModel\", \"ngClass\", \"loading\", \"textField\", \"valueField\", \"readonly\", \"ngStyle\", \"hostComponent\", \"tabindex\", \"ngModelChange\", \"valueChange\", \"selectionChange\", \"keydown.tab\", \"keydown.shift.tab\"], [\"combo\", \"\"], [\"kendoDropDownListItemTemplate\", \"\"], [\"class\", \"imageContainer\", 4, \"ngIf\"], [3, \"ngClass\", 4, \"ngIf\"], [1, \"imageContainer\"], [\"alt\", \"icon\", \"onerror\", \"this.style.display='none'\", 1, \"toolbarImage\", 3, \"src\"], [3, \"ngClass\"]],\n    template: function WDropDownPictureListBoxComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"kendo-dropdownlist\", 0, 1);\n        i0.ɵɵlistener(\"ngModelChange\", function WDropDownPictureListBoxComponent_Template_kendo_dropdownlist_ngModelChange_0_listener($event) {\n          return ctx.selectedItem = $event;\n        })(\"valueChange\", function WDropDownPictureListBoxComponent_Template_kendo_dropdownlist_valueChange_0_listener($event) {\n          return ctx.modified($event);\n        })(\"selectionChange\", function WDropDownPictureListBoxComponent_Template_kendo_dropdownlist_selectionChange_0_listener($event) {\n          return ctx.selectionChanged($event);\n        })(\"keydown.tab\", function WDropDownPictureListBoxComponent_Template_kendo_dropdownlist_keydown_tab_0_listener($event) {\n          return ctx.tabKeyHandler($event);\n        })(\"keydown.shift.tab\", function WDropDownPictureListBoxComponent_Template_kendo_dropdownlist_keydown_shift_tab_0_listener($event) {\n          return ctx.tabKeyHandler($event);\n        });\n        i0.ɵɵtemplate(2, WDropDownPictureListBoxComponent_ng_template_2_Template, 4, 3, \"ng-template\", 2);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"data\", ctx.items)(\"ngModel\", ctx.selectedItem)(\"ngClass\", ctx.classHandler())(\"loading\", ctx.loading)(\"textField\", \"text\")(\"valueField\", \"value\")(\"readonly\", ctx.disabled)(\"ngStyle\", ctx.setMyStyle())(\"hostComponent\", ctx)(\"tabindex\", ctx.tabOrder);\n      }\n    },\n    directives: [i6$1.DropDownListComponent, ControlsPowerDirective, FocusableDirective, i9.NgControlStatus, i9.NgModel, i6.NgClass, i6.NgStyle, i6$1.ItemTemplateDirective, i6.NgIf],\n    styles: [\".imageContainer[_ngcontent-%COMP%]{display:inline-block;margin:auto;min-height:24px}.toolbarImage[_ngcontent-%COMP%]{vertical-align:middle}.buttonText[_ngcontent-%COMP%]{font-family:initial}\"]\n  });\n  WDropDownPictureListBoxComponent = __decorate([dataTransfer(['drpDwnPicLstBx']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, WebMapService, Renderer2, ElementRef, IconsService, LengthConverter, DataManagerEventService, MainTabOrderService, ContainerControlTabOrderService])], WDropDownPictureListBoxComponent);\n  return WDropDownPictureListBoxComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nclass VScrollBarExtractors {\n  /**\r\n   * Extracts the position value\r\n   * @param event event to call\r\n   * @param component component used to get the position.\r\n   */\n  static PositionExtractor(event, component) {\n    return [component.position];\n  }\n\n}\n\nlet VScrollBarComponent = /*#__PURE__*/(() => {\n  let VScrollBarComponent = class VScrollBarComponent extends BaseControlComponent {\n    constructor(\n    /* c8 ignore start */\n    changeDetector, renderer2, element, emitter, lengthConverter\n    /* c8 ignore stop */\n    ) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter);\n      this.changeDetector = changeDetector;\n      this.renderer2 = renderer2;\n      this.avoidScroll = false;\n      this.thumbEvent = false;\n      this.internalPosition = 0;\n      this.scrollTop = 0;\n      this.scrollElementHeight = 17;\n      this.lineup = new EventEmitter();\n      this.linedown = new EventEmitter();\n      this.pageup = new EventEmitter();\n      this.pagedown = new EventEmitter();\n      this.thumbtrack = new EventEmitter();\n    }\n    /**\r\n     * Gets max position\r\n     */\n\n\n    get maxPosition() {\n      return this.model.MaxPosition;\n    }\n    /**\r\n     * Gets min position\r\n     */\n\n\n    get minPosition() {\n      return this.model.MinPosition;\n    }\n    /**\r\n     * Gets position\r\n     */\n\n\n    get position() {\n      return this.model.VPosition;\n    }\n\n    set position(value) {\n      this.model.VPosition = value;\n    }\n    /**\r\n     * Gets scroll height\r\n     * Ensure that the scrollbar is always visible even if there is no maxPosition Setted\r\n     */\n\n\n    get scrollHeight() {\n      return this.maxPosition * this.scrollElementHeight + this.height + 1;\n    }\n    /**\r\n     * Get if the component should be displayed as a scrollbar\r\n     * or if should be displayed as stackedbuttons\r\n     */\n\n\n    get isScrollBar() {\n      return this.height >= 34;\n    }\n    /* c8 ignore start */\n\n\n    ngAfterViewInit() {\n      super.ngAfterViewInit();\n\n      if (this.isScrollBar && this.scrollContainer) {\n        this.scrollTop = this.getScrollPosition();\n        this.scrollListener = this.renderer2.listen(this.scrollContainer.nativeElement, Utils.isFirefoxBrowser() ? 'DOMMouseScroll' : 'scroll', event => this.scrollHandler(event));\n        this.scrollMouseDownListener = this.renderer2.listen(this.scrollContainer.nativeElement, 'mousedown', event => this.scrollMouseDown(event));\n      }\n    }\n    /* c8 ignore stop */\n\n\n    ngDoCheck() {\n      if (this.internalPosition !== this.position) {\n        this.internalPosition = this.position;\n        this.moveScrollBar(this.position);\n      }\n    }\n\n    ngOnDestroy() {\n      if (this.scrollListener) {\n        this.scrollListener();\n      }\n\n      if (this.scrollMouseDownListener) {\n        this.scrollMouseDownListener();\n      }\n    }\n\n    getScrollPosition() {\n      return this.scrollContainer ? this.scrollContainer.nativeElement.scrollTop : 0;\n    }\n    /**\r\n     * Determines whether scroll gray box clicked is\r\n     * @param posX X position from click\r\n     * @param posY Y position from click\r\n     * @returns true if scroll gray box was clicked\r\n     */\n\n\n    isScrollGrayBoxClicked(posX, posY) {\n      const clientRect = this.scrollContainer?.nativeElement?.getBoundingClientRect();\n      /* c8 ignore else */\n\n      if (clientRect != null) {\n        // Calculating the top and bottom coordenates for the gray scroll box\n        const boxTop = clientRect.top + this.getScrollPosition();\n        const boxBottom = clientRect.bottom - (this.scrollHeight - this.height - this.getScrollPosition());\n        /* c8 ignore else */\n\n        if (posY >= boxTop && posY <= boxBottom && posX >= clientRect.left && posX <= clientRect.right) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /**\r\n     * Scrolls handler\r\n     * Handler for scrolling action to send the event\r\n     * to the server side\r\n     * @param $event The js event object\r\n     * @param moves the direction of movement\r\n     */\n\n\n    scrollHandler(event, moves) {\n      Utils.preventPropagation(event);\n\n      if (this.avoidScroll) {\n        this.avoidScroll = false;\n        return;\n      }\n\n      if (moves != null) {\n        this.lineEvents(event, moves);\n      } else {\n        if (this.thumbEvent) {\n          this.thumbtrackEvents(event);\n        } else {\n          this.pageEvents(event);\n        }\n      }\n    }\n    /**\r\n     * Scrolls mouse down event\r\n     * Sets true when the click was over the thumbrack otherwise false\r\n     * @param event\r\n     */\n\n\n    scrollMouseDown(event) {\n      this.thumbEvent = this.isScrollGrayBoxClicked(event.clientX, event.clientY);\n    }\n    /**\r\n     * Scrolls handler delay value to avoid execute the scroll event multiple\r\n     * times in a short period\r\n     * @returns handler delay value\r\n     */\n\n\n    scrollHandlerDelayValue() {\n      return Utils.isFirefoxBrowser() ? 300 : 100;\n    }\n    /**\r\n     * Servers event\r\n     * LineUp event handler\r\n     * @param event JS event object\r\n     */\n\n\n    lineupHandler(event) {\n      this.lineup.emit(event);\n    }\n    /**\r\n     * Servers event\r\n     * LineDown event handler\r\n     * @param event JS event object\r\n     */\n\n\n    linedownHandler(event) {\n      this.linedown.emit(event);\n    }\n    /**\r\n     * Servers event\r\n     * Page up event handler\r\n     * @param event JS event object\r\n     */\n\n\n    pageupHandler(event) {\n      this.pageup.emit(event);\n    }\n    /**\r\n     * Servers event\r\n     * Page down event handler\r\n     * @param event JS event object\r\n     */\n\n\n    pagedownHandler(event) {\n      this.pagedown.emit(event);\n    }\n    /**\r\n     * Servers event\r\n     * When the scroll gray-box is dragged\r\n     * @param scrollPos a number indicating position of the scroll box within\r\n     * the range of values specified by the MinPosition and MaxPosition properties\r\n     */\n\n\n    thumbtrackHandler(event) {\n      this.thumbtrack.emit(event);\n    }\n    /**\r\n     * @description\r\n     * Move the scrollbar to a fixed position in the y-axis\r\n     * @param pos the new position of the scrollbar\r\n     */\n\n\n    moveScrollBar(pos) {\n      if (this.scrollContainer && this.scrollContainer.nativeElement) {\n        const position = pos * this.scrollElementHeight;\n        this.avoidScroll = true;\n        this.scrollContainer.nativeElement.scrollTo(0, position);\n      }\n    }\n    /**\r\n     * Line events when the  scrollbar buttons were pressed\r\n     * @param event event from client\r\n     * @param moves flag to indicate up or down movement\r\n     */\n\n\n    lineEvents(event, moves) {\n      if (moves === -1) {\n        this.lineupHandler(event);\n      } else if (moves === 1) {\n        this.linedownHandler(event);\n      }\n    }\n    /**\r\n     * Page events when the blank space between buttons and scroll dark-gray box\r\n     * is executed\r\n     * @param event event from client\r\n     */\n\n\n    pageEvents(event) {\n      if (this.scrollEventTimer) {\n        clearTimeout(this.scrollEventTimer);\n      }\n\n      this.scrollEventTimer = setTimeout(() => {\n        this.scrollTop < this.getScrollPosition() ? this.pagedownHandler(event) : this.pageupHandler(event);\n        this.scrollTop = this.getScrollPosition();\n      }, this.scrollHandlerDelayValue());\n    }\n    /**\r\n     * Thumbtracks events for the scroll gray-box\r\n     */\n\n\n    thumbtrackEvents(event) {\n      this.thumbtrackHandler(event);\n      this.thumbEvent = false;\n    }\n\n  };\n\n  VScrollBarComponent.ɵfac = function VScrollBarComponent_Factory(t) {\n    return new (t || VScrollBarComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(LengthConverter, 8));\n  };\n\n  VScrollBarComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: VScrollBarComponent,\n    selectors: [[\"wm-vscroll-bar\"]],\n    viewQuery: function VScrollBarComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c15, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollContainer = _t.first);\n      }\n    },\n    inputs: {\n      scrollElementHeight: \"scrollElementHeight\"\n    },\n    outputs: {\n      lineup: \"lineup\",\n      linedown: \"linedown\",\n      pageup: \"pageup\",\n      pagedown: \"pagedown\",\n      thumbtrack: \"thumbtrack\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 2,\n    vars: 2,\n    consts: [[\"class\", \"scrollParent\", 3, \"height\", \"ngClass\", \"ngStyle\", 4, \"ngIf\"], [\"class\", \"k-select\", 3, \"ngClass\", \"ngStyle\", 4, \"ngIf\"], [1, \"scrollParent\", 3, \"ngClass\", \"ngStyle\"], [1, \"blanketUp\", 3, \"press\"], [1, \"scrollContainer\"], [\"scrollContainer\", \"\"], [1, \"list-filler\"], [1, \"blanketDown\", 3, \"press\"], [1, \"k-select\", 3, \"ngClass\", \"ngStyle\"], [\"aria-label\", \"Increase value\", \"title\", \"Increase value\", 1, \"k-link\", \"k-link-increase\", 3, \"click\"], [1, \"k-icon\", \"k-i-arrow-n\"], [\"aria-label\", \" Decrease value\", \"title\", \"Decrease value\", 1, \"k-link\", \"k-link-decrease\", 3, \"click\"], [1, \"k-icon\", \"k-i-arrow-s\"]],\n    template: function VScrollBarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, VScrollBarComponent_div_0_Template, 6, 8, \"div\", 0);\n        i0.ɵɵtemplate(1, VScrollBarComponent_span_1_Template, 5, 2, \"span\", 1);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.isScrollBar);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isScrollBar);\n      }\n    },\n    directives: [DwPressButtonComponent, i6.NgIf, i6.NgClass, i6.NgStyle],\n    styles: [\".scrollParent[_ngcontent-%COMP%]{width:15px;position:absolute}.scrollContainer[_ngcontent-%COMP%]{top:0;right:0;height:100%;width:15px;overflow-y:auto;overflow-x:hidden;float:left;position:absolute;z-index:4}@-moz-document url-prefix(){.scrollContainer{width:18px!important}}.blanketUp[_ngcontent-%COMP%]{height:17px;width:15px;top:0;position:absolute;z-index:6}.blanketUp[_ngcontent-%COMP%]:hover{opacity:75%;background-color:#d3d3d3}.blanketDown[_ngcontent-%COMP%]{height:17px;width:15px;bottom:0;position:absolute;z-index:6}.blanketDown[_ngcontent-%COMP%]:hover{opacity:75%;background-color:#d3d3d3}\"]\n  });\n\n  __decorate([NotifyChange('VPosition'), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], VScrollBarComponent.prototype, \"position\", null);\n\n  __decorate([serverEvent('sbnlineup'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], VScrollBarComponent.prototype, \"lineupHandler\", null);\n\n  __decorate([serverEvent('sbnlinedown'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], VScrollBarComponent.prototype, \"linedownHandler\", null);\n\n  __decorate([serverEvent('sbnpageup'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], VScrollBarComponent.prototype, \"pageupHandler\", null);\n\n  __decorate([serverEvent('sbnpagedown'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], VScrollBarComponent.prototype, \"pagedownHandler\", null);\n\n  __decorate([serverEvent('sbnthumbtrack', VScrollBarExtractors.PositionExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [EventData]), __metadata(\"design:returntype\", void 0)], VScrollBarComponent.prototype, \"thumbtrackHandler\", null);\n\n  VScrollBarComponent = __decorate([dataTransfer(['vscrllbr']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, DataManagerEventService, LengthConverter\n  /* c8 ignore stop */\n  ])], VScrollBarComponent);\n  return VScrollBarComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar OpenFileDialogComponent_1;\nlet OpenFileDialogComponent = OpenFileDialogComponent_1 = class OpenFileDialogComponent extends BaseControlComponent {\n  /* c8 ignore start */\n  constructor(changeDetector, render2, elem, lengthConverter, httpClient, webServices) {\n    super(changeDetector, render2, elem, lengthConverter);\n    this.httpClient = httpClient;\n    this.webServices = webServices;\n    /* c8 ignore stop */\n\n    /**\r\n     * Title  of open file dialog component\r\n     */\n\n    this.title = 'Upload file';\n    this.placeholder = 'Upload file from your local computer.';\n    this.message = this.placeholder;\n  }\n  /**\r\n   * Runs upload\r\n   * Handle the upload file functionality\r\n   * Calls the upload file API\r\n   */\n\n\n  fileUpload(inputElement) {\n    const formData = new FormData();\n    formData.append(inputElement.files[0].name, inputElement.files[0]);\n    this.message = inputElement.files[0].name;\n    const headers = WebMapUtils.getWebApiHeaders();\n    delete headers['Content-Type']; // Defined by content\n\n    this.httpClient.post('/api/fileutilities/fupload', formData, {\n      headers,\n      responseType: 'text'\n    }).subscribe(res => {\n      this.selectedFile = inputElement.files[0].name;\n      this.sendCommand('Ok');\n    }, err => WMLogger.instance().error(`Error trying to upload a file: ${err}`));\n  }\n  /**\r\n   * Gets accept value\r\n   * Should contains the type of files that\r\n   * the server should receive.\r\n   */\n\n\n  get accept() {\n    return this.model.Accept;\n  }\n  /**\r\n   * Gets selected file\r\n   */\n\n\n  get selectedFile() {\n    return this.model && this.model.SelectedFile;\n  }\n  /**\r\n   * Sets selected file\r\n   */\n\n\n  set selectedFile(value) {\n    this.model.SelectedFile = value;\n  }\n  /**\r\n   * Cancels open file dialog component\r\n   * Close the dialog and send the cancellation for\r\n   * the upload file action\r\n   */\n\n\n  cancel() {\n    this.sendCommand('Cancel');\n  }\n  /**\r\n   * Sends command\r\n   * Send the command to the server side\r\n   * according to the core version that is currently used\r\n   * @param buttonText the dialog result\r\n   */\n\n  /* c8 ignore start */\n\n\n  sendCommand(buttonText) {\n    if (this.webServices.config.webMapVersion === WMConstants.version4) {\n      if (this.model.buttons !== 0) {\n        const commandV4 = new ModalActionButton(buttonText);\n        this.webServices.invoke(commandV4);\n      }\n    } else {\n      const args = [{\n        Id: this.id,\n        MapperId: 'openFileDialog'\n      }, {\n        MapperId: OpenFileDialogComponent_1.messageBoxClickEventArgsId,\n        button: buttonText\n      }];\n      this.webServices.invoke(new SendV5(this, 'Click', this.id, 'Click', args));\n    }\n  }\n\n};\n/**\r\n * Message box click event args id of open file dialog component\r\n */\n\nOpenFileDialogComponent.messageBoxClickEventArgsId = 'MsgBxArgs';\n\nOpenFileDialogComponent.ɵfac = function OpenFileDialogComponent_Factory(t) {\n  return new (t || OpenFileDialogComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(i1$1.HttpClient), i0.ɵɵdirectiveInject(i1.WebMapService));\n};\n\nOpenFileDialogComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: OpenFileDialogComponent,\n  selectors: [[\"wm-open-file-dialog\"]],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngIf\"], [1, \"dialog\", 3, \"width\", \"ngClass\"], [1, \"custom-title-bar\"], [1, \"k-window-title\"], [1, \"content\"], [1, \"Message\"], [\"hidden\", \"\", \"type\", \"file\", 3, \"accept\", \"change\"], [\"file\", \"\"], [\"kendoButton\", \"\", 1, \"k-button\", 3, \"click\"]],\n  template: function OpenFileDialogComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, OpenFileDialogComponent_div_0_Template, 17, 5, \"div\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.model);\n    }\n  },\n  directives: [i13.DialogComponent, i13.DialogTitleBarComponent, i13.DialogActionsComponent, i6.NgIf, i6.NgClass, i6$2.ButtonDirective],\n  styles: [\"kendo-dialog-actions{flex-wrap:nowrap!important}kendo-dialog-actions>button{width:100%!important}.dialog{z-index:2147483638!important}.Msg_message,.Msg_icon{float:left;padding:.5em}.content{margin:1.2em}\\n\"],\n  encapsulation: 2\n});\n\n__decorate([NotifyChange('SelectedFile'), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], OpenFileDialogComponent.prototype, \"selectedFile\", null);\n\nOpenFileDialogComponent = OpenFileDialogComponent_1 = __decorate([dataTransfer(['openFileDialog']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, LengthConverter, HttpClient, WebMapService])], OpenFileDialogComponent);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ListViewItemComponent = /*#__PURE__*/(() => {\n  let ListViewItemComponent = class ListViewItemComponent extends FontPropertiesComponent {\n    /* c8 ignore start */\n    constructor(changeDetectorEx, serviceRefEx, renderer2Ex, elementEx, lengthConverter, iconservice, emitterEx, mTabOrderService) {\n      super(changeDetectorEx, renderer2Ex, elementEx, lengthConverter, emitterEx, mTabOrderService);\n      this.iconservice = iconservice;\n      this.mTabOrderService = mTabOrderService;\n    }\n    /**\r\n     * @description\r\n     * Gets iconclass from icon service\r\n     * @returns {string}\r\n     */\n\n\n    get iconClass() {\n      return this.iconservice.iconClass;\n    }\n    /**\r\n     * Gets the current icon name\r\n     * @param pictureIndex the current item picture index\r\n     * @returns icon name\r\n     */\n\n\n    getIconName(pictureIndex) {\n      return this.pictures ? this.iconservice.getItemName(this.pictures[pictureIndex]) : undefined;\n    }\n    /**\r\n     * Gets item image source if applies\r\n     * @param pictureIndex the current item picture index\r\n     * @returns image source path\r\n     */\n\n\n    getIconSource(pictureIndex) {\n      return this.pictures ? this.iconservice.getItemNameSource(this.pictures[pictureIndex]) : undefined;\n    }\n\n  };\n\n  ListViewItemComponent.ɵfac = function ListViewItemComponent_Factory(t) {\n    return new (t || ListViewItemComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.WebMapService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(IconsService), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8));\n  };\n\n  ListViewItemComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ListViewItemComponent,\n    selectors: [[\"wm-list-view-item\"]],\n    inputs: {\n      dataItem: \"dataItem\",\n      pictures: \"pictures\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 5,\n    vars: 3,\n    consts: [[1, \"item\"], [\"class\", \"imageContainer\", 4, \"ngIf\"], [\"class\", \"image\", 3, \"ngClass\", 4, \"ngIf\"], [1, \"txt\"], [1, \"imageContainer\"], [\"alt\", \"icon\", \"onerror\", \"this.style.display='none'\", 1, \"toolbarImage\", \"image\", 3, \"src\"], [1, \"image\", 3, \"ngClass\"]],\n    template: function ListViewItemComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, ListViewItemComponent_div_1_Template, 2, 1, \"div\", 1);\n        i0.ɵɵtemplate(2, ListViewItemComponent_i_2_Template, 2, 2, \"i\", 2);\n        i0.ɵɵelementStart(3, \"span\", 3);\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.getIconSource(ctx.dataItem.picture));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.getIconName(ctx.dataItem.picture));\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.dataItem.text);\n      }\n    },\n    directives: [i6.NgIf, i6.NgClass],\n    styles: [\".imageContainer[_ngcontent-%COMP%]{display:inline-block;margin:auto;min-height:24px}.item[_ngcontent-%COMP%]{vertical-align:top;display:inline-block;text-align:center}.image[_ngcontent-%COMP%]{min-width:25px;vertical-align:middle;min-height:25px}.txt[_ngcontent-%COMP%]{display:block}\"]\n  });\n  ListViewItemComponent = __decorate([dataTransfer(['lstVwItm']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, WebMapService, Renderer2, ElementRef, LengthConverter, IconsService, DataManagerEventService, MainTabOrderService])], ListViewItemComponent);\n  return ListViewItemComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ListViewLargeIconComponent = /*#__PURE__*/(() => {\n  class ListViewLargeIconComponent extends CommonStyleComponent {\n    /* c8 ignore start */\n    constructor(changeDetector, renderer2, element, lengthConverter, iconservice, serviceRefEx, emitter, mTabOrderService, tabPageOrderService) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter, mTabOrderService, tabPageOrderService);\n      this.changeDetector = changeDetector;\n      this.renderer2 = renderer2;\n      this.element = element;\n      this.iconservice = iconservice;\n      this.serviceRefEx = serviceRefEx;\n      this.emitter = emitter;\n      this.mTabOrderService = mTabOrderService;\n      this.tabPageOrderService = tabPageOrderService;\n      /* c8 ignore stop */\n\n      /**\r\n       * Default url to collect items.\r\n       */\n\n      this.defaultDataUrl = 'api/listview';\n      /**\r\n       * Loading  of list view large icon component\r\n       * Shows/Hides the listview busyloader element\r\n       */\n\n      this.loading = false;\n    }\n    /**\r\n     * @description\r\n     * Gets iconclass from icon service\r\n     * @returns {string}\r\n     */\n\n\n    get iconClass() {\n      return this.iconservice.iconClass;\n    }\n    /**\r\n     * Gets dirty flag to\r\n     * restore the items of the listview\r\n     */\n\n\n    get dirty() {\n      return this.model ? this.model.Dirty : false;\n    }\n\n    set dirty(value) {\n      this.model.Dirty = value;\n    }\n    /**\r\n     * Retrieve the listviewItems on initial start\r\n     */\n\n\n    ngOnInit() {\n      super.ngOnInit();\n      this.registerTabService();\n      this.fetchItems();\n    }\n    /**\r\n     * Reload the component when a dirty flag\r\n     * is received from the server side\r\n     */\n\n\n    ngDoCheck() {\n      super.ngDoCheck();\n\n      if (this.dirty) {\n        this.fetchItems();\n        this.dirty = false;\n      }\n    }\n    /**\r\n     * @description\r\n     * Returns a collection with the items received in the model or an API.\r\n     */\n\n\n    fetchItems() {\n      this.loading = true;\n      this.serviceRefEx.fetch(this.defaultDataUrl, this.id, null, this.model, this.itemsExtractor.bind(this)).subscribe(data => {\n        this.listviewItems = data.data;\n        this.pictures = data.pictures;\n        this.loading = false;\n        this.detectChanges();\n      });\n    }\n    /**\r\n     * Extracts the Items collection data from model component.\r\n     * @param model\r\n     */\n\n\n    itemsExtractor(model) {\n      return model.Items ? model.Items.map(item => ({\n        text: item.text,\n        picture: item.picture\n      })) : null;\n    }\n\n  }\n\n  ListViewLargeIconComponent.ɵfac = function ListViewLargeIconComponent_Factory(t) {\n    return new (t || ListViewLargeIconComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(IconsService), i0.ɵɵdirectiveInject(i1.WebMapService), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n  };\n\n  ListViewLargeIconComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ListViewLargeIconComponent,\n    selectors: [[\"wm-list-view-large-icon\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c34,\n    decls: 2,\n    vars: 4,\n    consts: [[3, \"ngStyle\", \"ngClass\", \"model\"], [\"class\", \"listview\", 3, \"ngStyle\", \"ngClass\", 4, \"ngIf\"], [1, \"listview\", 3, \"ngStyle\", \"ngClass\"], [4, \"ngFor\", \"ngForOf\"], [3, \"dataItem\", \"pictures\"]],\n    template: function ListViewLargeIconComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelement(0, \"wm-busyloader\", 0);\n        i0.ɵɵtemplate(1, ListViewLargeIconComponent_div_1_Template, 3, 3, \"div\", 1);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngStyle\", ctx.setMyStyle())(\"ngClass\", ctx.class)(\"model\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.model && ctx.visible);\n      }\n    },\n    directives: [BusyloaderComponent, ListViewItemComponent, i6.NgStyle, i6.NgClass, i6.NgIf, i6.NgForOf],\n    styles: [\".listview[_ngcontent-%COMP%]{display:grid;grid-template-columns:repeat(auto-fit,minmax(250px,1fr))}\"]\n  });\n\n  __decorate([NotifyChange('Dirty'), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], ListViewLargeIconComponent.prototype, \"dirty\", null);\n\n  return ListViewLargeIconComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet ListViewComponent = /*#__PURE__*/(() => {\n  class ListViewComponent extends CommonStyleComponent {\n    /* c8 ignore start */\n    constructor(changeDetector, renderer2, element, lengthConverter, emitter, mTabOrderService, tabPageOrderService) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter, mTabOrderService, tabPageOrderService);\n      this.mTabOrderService = mTabOrderService;\n      this.tabPageOrderService = tabPageOrderService;\n    }\n    /* c8 ignore stop */\n\n\n    ngOnInit() {\n      super.ngOnInit();\n      this.registerTabService();\n    }\n    /**\r\n     * Get the style type for the current column\r\n     * this property indicates the kind of control to\r\n     * be displayed by this column component\r\n     */\n\n\n    get view() {\n      return this.model.View;\n    }\n    /**\r\n     *  Returns true if the control is the same\r\n     *  as the view property in the model\r\n     */\n\n\n    isValid(view) {\n      return this.view === view;\n    }\n\n  }\n\n  ListViewComponent.ɵfac = function ListViewComponent_Factory(t) {\n    return new (t || ListViewComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n  };\n\n  ListViewComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ListViewComponent,\n    selectors: [[\"wm-list-view\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"model\", \"class\", 4, \"ngIf\"], [3, \"model\"]],\n    template: function ListViewComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, ListViewComponent_wm_list_view_large_icon_0_Template, 1, 3, \"wm-list-view-large-icon\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.isValid(0));\n      }\n    },\n    directives: [ListViewLargeIconComponent, i6.NgIf],\n    styles: [\"\"]\n  });\n  return ListViewComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet VersionComponent = /*#__PURE__*/(() => {\n  class VersionComponent {\n    constructor(render) {\n      this.render = render;\n      const version = window.app.version; // c8 ignore else\n\n      if (version) {\n        // tslint:disable-next-line: no-require-imports\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        version.componentsVersion = require('../../../../../package.json').version;\n        this.version = version;\n      }\n\n      this.visible = false;\n      this.unsubscribe = this.render.listen(document.body, 'keydown.alt.shift.w', e => {\n        this.visible = !this.visible;\n      });\n    }\n\n    ngOnDestroy() {\n      this.unsubscribe();\n    }\n\n    get buildVersion() {\n      return `Build version: ${this.buildVersionNumber ? this.buildVersionNumber : ''}`;\n    }\n\n    get dcpVersion() {\n      return `DCP version: ${this.version ? this.version.dcpVersion : ''}`;\n    }\n\n    get componentsVersion() {\n      return `Components version: ${this.version ? this.version.componentsVersion : ''}`;\n    }\n\n    get coreVersion() {\n      return `Core version: ${this.version ? this.version.coreVersion : ''}`;\n    }\n\n  }\n\n  VersionComponent.ɵfac = function VersionComponent_Factory(t) {\n    return new (t || VersionComponent)(i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n\n  VersionComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: VersionComponent,\n    selectors: [[\"wm-version\"]],\n    inputs: {\n      buildVersionNumber: \"buildVersionNumber\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[\"draggable\", \"true\", 4, \"ngIf\"], [\"draggable\", \"true\"]],\n    template: function VersionComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, VersionComponent_div_0_Template, 9, 4, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.visible);\n      }\n    },\n    directives: [i6.NgIf],\n    styles: [\"div[_ngcontent-%COMP%]{position:fixed;z-index:10000000;background-color:#add8e6;opacity:.5;width:240px;height:70px;font-size:12px;font-family:helvetica,sans-serif;display:inline-grid;right:0;top:50px}\"]\n  });\n  return VersionComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/* c8 ignore start */\n\n\nlet TimerComponent = /*#__PURE__*/(() => {\n  let TimerComponent = class TimerComponent extends BaseControlComponent {\n    constructor(changeDetector, renderer2, element, emitter, lengthConverter) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter);\n      this.changeDetector = changeDetector;\n      /* c8 ignore stop */\n\n      this.Tick = new EventEmitter();\n    }\n    /* c8 ignore next 6 */\n\n\n    timerTick() {\n      if (this.running) {\n        const event = {};\n        this.triggerTick(event);\n      }\n    }\n    /**\r\n     * Triggers the event to the server  side\r\n     * @param event The event data\r\n     */\n\n\n    triggerTick(event) {\n      this.Tick.emit(new EventData(event, this.id));\n    } // Properties\n\n\n    get interval() {\n      return this.model.Interval;\n    }\n\n    ngOnInit() {\n      /* c8 ignore else */\n      this.internalRunning = this.running;\n\n      if (this.running) {\n        this.timerComponent = setInterval(() => {\n          this.timerTick();\n        }, this.interval);\n      }\n    }\n\n    ngOnDestroy() {\n      /* c8 ignore else */\n      if (this.timerComponent) {\n        clearInterval(this.timerComponent);\n      }\n    }\n\n    ngDoCheck() {\n      if (this.running !== this.internalRunning) {\n        if (this.running) {\n          this.ngOnInit();\n        } else {\n          /* c8 ignore else */\n          if (this.timerComponent) {\n            clearInterval(this.timerComponent);\n          }\n\n          this.internalRunning = this.running;\n        }\n      }\n    }\n\n    get running() {\n      return this.model.Running;\n    }\n\n    set running(value) {\n      this.model.Running = value;\n    }\n\n  };\n\n  TimerComponent.ɵfac = function TimerComponent_Factory(t) {\n    return new (t || TimerComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(LengthConverter, 8));\n  };\n\n  TimerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TimerComponent,\n    selectors: [[\"wm-timer\"]],\n    outputs: {\n      Tick: \"Tick\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngIf\"]],\n    template: function TimerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, TimerComponent_div_0_Template, 1, 0, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.enabled && ctx.model);\n      }\n    },\n    directives: [i6.NgIf],\n    styles: [\"\"]\n  });\n\n  __decorate([serverEvent('Tick'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], TimerComponent.prototype, \"triggerTick\", null);\n\n  __decorate([NotifyChange('Running'), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], TimerComponent.prototype, \"running\", null);\n\n  TimerComponent = __decorate([dataTransfer(['tmr']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, DataManagerEventService, LengthConverter])], TimerComponent);\n  return TimerComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet HProgressBarComponent = /*#__PURE__*/(() => {\n  class HProgressBarComponent extends BaseControlComponent {\n    constructor(\n    /* c8 ignore start */\n    changeDetector, renderer2, element, emitter, lengthConverter, service, mTabOrderService, tabPageOrderService) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter, mTabOrderService, tabPageOrderService);\n      this.changeDetector = changeDetector;\n      this.service = service;\n      this.mTabOrderService = mTabOrderService;\n      this.tabPageOrderService = tabPageOrderService;\n      /* c8 ignore stop */\n\n      this.defaultDataUrl = 'api/progressbar';\n      /**\r\n       * Optional input parameter to specify a request time of data. Three seconds it's the default value.\r\n       */\n\n      this.timeout = 3000;\n    }\n    /**\r\n     * @description\r\n     * Gets focusable element inside of the component\r\n     */\n\n\n    get focusableElement() {\n      return this.progressbar;\n    }\n\n    ngOnInit() {\n      super.ngOnInit();\n      this.registerTabService();\n    }\n    /**\r\n     * Setters and getters of the HProgressBar properties\r\n     */\n\n\n    set minPosition(value) {\n      this.model.MinPosition = value;\n    }\n\n    get minPosition() {\n      return this.model.MinPosition;\n    }\n\n    set maxPosition(value) {\n      this.model.MaxPosition = value;\n    }\n\n    get maxPosition() {\n      return this.model.MaxPosition;\n    }\n\n    set positionValue(value) {\n      this.model.PositionValue = value;\n    }\n\n    get positionValue() {\n      return this.model.PositionValue;\n    }\n\n    set setStep(value) {\n      this.model.SetStep = value;\n    }\n\n    get setStep() {\n      return this.model.SetStep;\n    }\n\n    ngAfterViewInit() {\n      this.interval = setInterval(() => {\n        this.service.fetch(this.dataUrl, this.id).subscribe(data => {\n          this.positionValue = data.positionValue;\n          this.detectChanges();\n        });\n\n        if (this.positionValue >= this.maxPosition) {\n          clearInterval(this.interval);\n        }\n      }, this.timeout);\n    }\n    /**\r\n     * Returns the data source URL of the component\r\n     */\n\n\n    get url() {\n      if (this.dataUrl && this.dataUrl.length > 0) {\n        return this.dataUrl;\n      }\n\n      return this.defaultDataUrl;\n    }\n\n  }\n\n  HProgressBarComponent.ɵfac = function HProgressBarComponent_Factory(t) {\n    return new (t || HProgressBarComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(LengthConverter, 8), i0.ɵɵdirectiveInject(i1.WebMapService), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n  };\n\n  HProgressBarComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: HProgressBarComponent,\n    selectors: [[\"wm-hprogressbar\"]],\n    viewQuery: function HProgressBarComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c63, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.progressbar = _t.first);\n      }\n    },\n    inputs: {\n      dataUrl: \"dataUrl\",\n      timeout: \"timeout\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"ngClass\", \"ngStyle\", \"resizeRateLimit\", \"pointer\", \"scale\", \"hostComponent\", \"tabindex\", \"keydown.tab\", \"keydown.shift.tab\", 4, \"ngIf\"], [\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"ngClass\", \"ngStyle\", \"resizeRateLimit\", \"pointer\", \"scale\", \"hostComponent\", \"tabindex\", \"keydown.tab\", \"keydown.shift.tab\"], [\"progressbar\", \"\"], [3, \"height\", \"width\"]],\n    template: function HProgressBarComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, HProgressBarComponent_kendo_lineargauge_0_Template, 3, 14, \"kendo-lineargauge\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.model);\n      }\n    },\n    directives: [i6$3.LinearGaugeComponent, i6$3.LinearGaugeAreaComponent, i6.NgIf, ControlsPowerDirective, FocusableDirective, i6.NgClass, i6.NgStyle],\n    styles: [\"\"],\n    changeDetection: 0\n  });\n  return HProgressBarComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nvar TextImageRelation = /*#__PURE__*/(() => {\n  (function (TextImageRelation) {\n    //\n    // Summary:\n    //     Specifies that the image and text share the same space on a control.\n    TextImageRelation[TextImageRelation[\"Overlay\"] = 0] = \"Overlay\"; //\n    // Summary:\n    //     Specifies that the image is displayed vertically above the text of a control.\n\n    TextImageRelation[TextImageRelation[\"ImageAboveText\"] = 1] = \"ImageAboveText\"; //\n    // Summary:\n    //     Specifies that the text is displayed vertically above the image of a control.\n\n    TextImageRelation[TextImageRelation[\"TextAboveImage\"] = 2] = \"TextAboveImage\"; //\n    // Summary:\n    //     Specifies that the image is displayed horizontally before the text of a control.\n\n    TextImageRelation[TextImageRelation[\"ImageBeforeText\"] = 4] = \"ImageBeforeText\"; //\n    // Summary:\n    //     Specifies that the text is displayed horizontally before the image of a control.\n\n    TextImageRelation[TextImageRelation[\"TextBeforeImage\"] = 8] = \"TextBeforeImage\";\n  })(TextImageRelation || (TextImageRelation = {}));\n\n  return TextImageRelation;\n})();\n\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\nclass MenuItem {\n  /**\r\n   * Constructor for the menu item\r\n   * @param node Model node to create a new menu item.\r\n   */\n  constructor(node) {\n    if (node) {\n      this.node = node;\n      const split = node.Text.split('\\t');\n\n      if (split.length === 2) {\n        this.shortcut = split[1];\n        this.cssClass = 'minWidth ';\n      } else {\n        this.shortcut = '';\n        this.cssClass = '';\n      }\n\n      this.shortcut = split.length === 2 ? split[1] : node.ShortCutsKey ? node.ShortCutsKey.join('+') : '';\n      this.text = RemoveAmpersand.remove(split[0]);\n      this.toolbarItemText = RemoveAmpersand.remove(this.node.ToolbarItemText);\n      this.microHelp = RemoveAmpersand.remove(this.node.MicroHelp ?? '');\n      this.processImageData();\n\n      if (this.isSeparator()) {\n        this.cssClass = 'wm-separator';\n      }\n    }\n\n    this.allCHOP = true;\n    this.items = [];\n  }\n\n  get id() {\n    return this.node.UniqueID ? this.node.UniqueID : this.node.id;\n  }\n\n  get UniqueID() {\n    return this.id;\n  }\n\n  get mapperId() {\n    return this.node.MapperId || null;\n  }\n\n  get name() {\n    return this.node.Name || null;\n  }\n\n  get visible() {\n    return this.node.Visible !== false;\n  }\n\n  set visible(value) {\n    this.node.Visible = value;\n  }\n\n  get checked() {\n    return this.node.Checked || false;\n  }\n\n  get events() {\n    return this.node.EventChanges || this.node.events;\n  }\n\n  get type() {\n    return this.node.Type || null;\n  }\n\n  get model() {\n    return this.node;\n  }\n\n  get enabled() {\n    return this.node.Enabled;\n  }\n\n  set enabled(value) {\n    this.node.Enabled = value;\n  }\n\n  get toolbarItemVisible() {\n    return this.node.ToolbarItemVisible !== false;\n  }\n\n  get toolbarItemName() {\n    return this.node.ToolbarItemName;\n  }\n\n  get toolbarItemOrder() {\n    return this.node.ToolbarItemOrder;\n  }\n\n  get order() {\n    return this.node.Order;\n  }\n  /**\r\n   * Sets the related window to the menu item\r\n   */\n\n\n  set relatedWindow(value) {\n    this.relatedWindowInternal = value;\n  }\n  /**\r\n   * Gets the related window to the menu item\r\n   */\n\n\n  get relatedWindow() {\n    return this.relatedWindowInternal;\n  }\n\n  isToolbarItem() {\n    return this.toolbarItemVisible && this.toolbarItemName && this.toolbarItemName !== '';\n  }\n\n  isSeparator() {\n    return this.text === '-';\n  }\n\n  hasItems() {\n    return this.items && this.items.length > 0;\n  }\n  /**\r\n   * Used to process Image data\r\n   * @param node node to be set\r\n   * @param data data to be set\r\n   */\n\n\n  processImageData() {\n    if (this.node.ImageUrl) {\n      this.imageUrl = this.node.ImageUrl;\n\n      switch (this.node.TextImageRelation) {\n        case TextImageRelation.ImageAboveText:\n          this.imageFirst = true;\n          this.cssClass += 'above';\n          break;\n\n        case TextImageRelation.TextAboveImage:\n          this.imageFirst = false;\n          this.cssClass += 'above';\n          break;\n\n        case TextImageRelation.TextBeforeImage:\n          this.imageFirst = false;\n          this.cssClass += 'before';\n          break;\n\n        case TextImageRelation.ImageBeforeText:\n        default:\n          this.imageFirst = true;\n          this.cssClass += 'before';\n          break;\n      }\n    }\n  }\n\n}\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet MenuChildrenService = /*#__PURE__*/(() => {\n  class MenuChildrenService {\n    constructor() {\n      /**\r\n       * @description\r\n       * Recursive function that map Menu items\r\n       */\n      this.mapMenuItem = (obj, item, toolbarItems, hotkeys, menuInstance, events) => {\n        for (const key in obj) {\n          /* c8 ignore else */\n          if (obj.hasOwnProperty(key) && key !== 'Parent' && key !== 'ParentWindow') {\n            const node = obj[key];\n\n            if (this.isMenuItem(node)) {\n              if (events) {\n                Object.assign(events, node.events);\n              }\n\n              this.applyPathToMenu(node, obj.pathToMenu);\n              const subitem = new MenuItem(node);\n\n              if (subitem.visible) {\n                item.items.push(subitem);\n              }\n\n              if (hotkeys && subitem.shortcut && subitem.enabled || hotkeys && subitem.shortcut && subitem.isToolbarItem()) {\n                hotkeys.sendMessage({\n                  component: menuInstance,\n                  item: subitem,\n                  keys: subitem.shortcut.split('+')\n                });\n              }\n\n              if (subitem.isToolbarItem()) {\n                toolbarItems.push(subitem);\n              }\n\n              this.checkIfOrder(item, subitem);\n              this.mapMenuItem(node, subitem, toolbarItems, hotkeys, menuInstance, events);\n              this.sortMenuItems(node, item);\n            }\n          }\n        }\n      };\n\n      this.applyPathToMenu = (item, pathToMenu) => {\n        if (pathToMenu) {\n          item.pathToMenu = pathToMenu;\n          item.pathToMenu.push(item.Text);\n        } else {\n          item.pathToMenu = [item.Text];\n        }\n      };\n\n      this.checkIfOrder = (item, subitem) => {\n        item.allCHOP = item.allCHOP && subitem.order != null && subitem.order >= 0;\n      };\n      /**\r\n       * @description\r\n       * Function in charge of build Items of Items\r\n       */\n\n      /* c8 ignore start */\n\n\n      this.sortMenuItems = (node, item) => {\n        if (node.UseMenuOrder && item.allCHOP) {\n          item.items.sort((i1, i2) => i1.order - i2.order);\n        }\n\n        let index = 1;\n        item.items.forEach(element => {\n          if (element.cssClass !== 'wm-separator') {\n            element.index = index;\n            index++;\n          }\n        });\n      };\n      /* c8 ignore stop */\n\n      /**\r\n       * @description\r\n       * Validates if an a item  is a menu item\r\n       */\n\n\n      this.isMenuItem = item => {\n        return item !== null && item !== undefined && item.Text && (item.Name || item.mapperId === 'mn');\n      };\n      /**\r\n       * @description\r\n       * Sort toolbar items\r\n       */\n\n\n      this.sortToolbarItems = toolbarItems => {\n        toolbarItems.sort((a, b) => {\n          if (a.toolbarItemOrder < b.toolbarItemOrder) {\n            return -1;\n          }\n\n          if (a.toolbarItemOrder > b.toolbarItemOrder) {\n            return 1;\n          }\n\n          return 0;\n        });\n      };\n    }\n    /**\r\n     * @description\r\n     * Update datasource and toolbar\r\n     * @param menuModel Menu model\r\n     */\n\n\n    updateMenu(menuModel, hotkeys, menuInstance) {\n      const newMenu = new MenuItem();\n      const toolbarItems = [];\n\n      if (menuModel) {\n        this.mapMenuItem(menuModel, newMenu, toolbarItems, hotkeys, menuInstance, menuModel.events);\n        this.sortToolbarItems(toolbarItems);\n      }\n\n      return {\n        menuItems: newMenu.items,\n        toolbarItems: toolbarItems.length === 0 ? undefined : toolbarItems\n      };\n    }\n    /**\r\n     * Refresh the current menu items\r\n     * @param menuModel The current menuModel\r\n     * @param hotkeys The hotkeys associated with the menu\r\n     * @param menuInstance The current menuInstance component\r\n     * @returns current menu toolbarItems\r\n     */\n\n\n    refreshCurrentMenu(menuModel, items, hotkeys, menuInstance) {\n      const toolbarItems = [];\n\n      if (menuModel) {\n        this.updateMenuCollection(menuModel, items, menuModel.events, toolbarItems, hotkeys, menuInstance);\n        this.sortToolbarItems(toolbarItems);\n      }\n\n      return {\n        toolbarItems: toolbarItems.length === 0 ? undefined : toolbarItems\n      };\n    }\n    /**\r\n     * Updates menu collection\r\n     * @param obj the model object\r\n     * @param oldNode the old node collection\r\n     * @param events the events associated to the current node\r\n     * @param toolbarItems Set of updated toolbarItems\r\n     */\n\n\n    updateMenuCollection(obj, oldNode, events, toolbarItems, hotkeys, menuInstance) {\n      let index = 0;\n      const nodes = [];\n\n      for (const key in obj) {\n        if (isNotParentWindow(obj, key)) {\n          const node = obj[key];\n\n          if (this.isMenuItem(node)) {\n            nodes.push(node);\n          }\n        }\n      }\n\n      nodes.sort((a, b) => a.Order - b.Order);\n      /* c8 ignore else */\n\n      for (const node of nodes) {\n        index = this.processMenuItem({\n          events,\n          index\n        }, node, obj, oldNode, toolbarItems, hotkeys, menuInstance);\n      }\n    }\n    /**\r\n     * Process the menu item for properties, events, hotkeys and toolbarItems\r\n     */\n\n\n    processMenuItem(properties, node, obj, oldNode, toolbarItems, hotkeys, menuInstance) {\n      const events = properties.events;\n      let index = properties.index;\n      copyEvents(events, node);\n      this.applyPathToMenu(node, obj.pathToMenu);\n      const subitem = new MenuItem(node);\n      const shouldVerify = updateNode(oldNode, index, subitem);\n      registerToolbarItem(subitem, toolbarItems);\n      registerHotKeys(hotkeys, subitem, menuInstance);\n      index = this.shouldUpdateMenuCollection({\n        shouldVerify,\n        index,\n        events\n      }, node, oldNode, toolbarItems, hotkeys, menuInstance);\n      return index;\n    }\n    /**\r\n     * Check and update the menu collection,\r\n     * also move the index, if the collection was updated\r\n     */\n\n\n    shouldUpdateMenuCollection(props, node, oldNode, toolbarItems, hotkeys, menuInstance) {\n      let index = props.index;\n\n      if (props.shouldVerify) {\n        this.updateMenuCollection(node, oldNode[index].items, props.events, toolbarItems, hotkeys, menuInstance);\n        index++;\n      }\n\n      return index;\n    }\n\n  }\n\n  MenuChildrenService.ɵfac = function MenuChildrenService_Factory(t) {\n    return new (t || MenuChildrenService)();\n  };\n\n  MenuChildrenService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MenuChildrenService,\n    factory: MenuChildrenService.ɵfac,\n    providedIn: 'root'\n  });\n  return MenuChildrenService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * Updates node with the new values in model\r\n * @param oldnode the old node collection\r\n * @param index the actual node index\r\n * @param subitem the new node data retrieved from model\r\n * @returns true if node should continue exploring inner sub-tree\r\n */\n\n\nfunction updateNode(oldnode, index, subitem) {\n  // Updating the same node\n  if (oldnode[index] && subitem.id === oldnode[index].id) {\n    oldnode[index].visible = subitem.visible;\n    oldnode[index].enabled = subitem.enabled;\n\n    if (!oldnode[index].visible) {\n      oldnode.splice(index, 1); // delete invisible node from collection\n\n      return false;\n    }\n\n    return true;\n  } else if (subitem.visible) {\n    // update the node completely\n    oldnode[index] = subitem;\n    return true;\n  }\n\n  return false;\n}\n/**\r\n * register the hotkey if the menu has any\r\n */\n\n\nfunction registerHotKeys(hotkeys, subitem, menuInstance) {\n  if (hotkeys && subitem.shortcut && subitem.enabled || subitem.shortcut && subitem.isToolbarItem()) {\n    hotkeys.sendMessage({\n      component: menuInstance,\n      item: subitem,\n      keys: subitem.shortcut.split('+')\n    });\n  }\n}\n/**\r\n * Register the toolbar item if the menu has any\r\n */\n\n\nfunction registerToolbarItem(subitem, toolbarItems) {\n  if (subitem.isToolbarItem()) {\n    toolbarItems.push(subitem);\n  }\n}\n/**\r\n * copy the events from the event model, to event menu item\r\n */\n\n\nfunction copyEvents(events, node) {\n  if (events) {\n    Object.assign(events, node.events);\n  }\n}\n/**\r\n * Verify if the object is a parent window\r\n */\n\n\nfunction isNotParentWindow(obj, key) {\n  return obj.hasOwnProperty(key) && key !== 'Parent' && key !== 'ParentWindow';\n}\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet ActionRequest = /*#__PURE__*/(() => {\n  class ActionRequest {}\n\n  ActionRequest.MenuAction = 'GetMenuItems';\n  ActionRequest.DataManagerAction = 'getDataBundlePage';\n  return ActionRequest;\n})();\n\nclass MenuEventsExtractors {\n  /**\r\n   * Extracts the information about the current item clicked\r\n   * @param event event to call\r\n   * @param component component used to get the id.\r\n   */\n  static menuItemExtractor(event, component) {\n    const item = component.currentItem;\n    component.currentItem = undefined;\n    return item;\n  }\n  /**\r\n   * Extracts the arguments for the menu item clicked\r\n   * event.\r\n   * @param event the event data\r\n   * @param component the current component instance\r\n   */\n\n\n  static menuItemClickedEventArgsExtractor(event, component) {\n    const item = component.currentItem;\n    return [{\n      SelectedItem: event\n    }, {\n      references: {\n        ClickedItem: item.id\n      },\n      MapperId: 'ToolStripItemClickedEventArgs'\n    }];\n  }\n  /**\r\n   * Extracts the arguments for the menu item click\r\n   * event.\r\n   * @param event the event data\r\n   * @param component the current component instance\r\n   */\n\n\n  static menuItemClickEventArgsExtractor(event, component) {\n    return {\n      index: extractItemIndex(event)\n    };\n  }\n  /**\r\n   * Extracts the arguments for the combo item select index changed\r\n   * event.\r\n   * @param event the event data\r\n   * @param component the current component instance\r\n   */\n\n\n  static comboItemSelectedIndexChangedEventArgsExtractor(event, component) {\n    const item = component.currentItem;\n    return [{\n      Id: item.id,\n      MapperId: item.mapperId\n    }, {\n      SelectedItem: event\n    }];\n  }\n\n}\n/**\r\n * Extracts the index of current item in regard to his parent.\r\n * @param event the event data\r\n */\n\n\nfunction extractItemIndex(event) {\n  let val = 0;\n\n  if (event && event.index) {\n    const indices = event.index.split('_');\n    val = Number(indices[indices.length - 1]);\n  }\n\n  return val;\n}\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet DisabledItemDirective = /*#__PURE__*/(() => {\n  class DisabledItemDirective {\n    constructor(el) {\n      this.el = el;\n    }\n\n    ngAfterViewChecked() {\n      // Checks if value is different from previous value\n      if (this.wmDisabledItem !== undefined && this.lastDisabledItem !== this.wmDisabledItem) {\n        this.lastDisabledItem = this.wmDisabledItem;\n        const element = this.el.nativeElement.parentNode.parentNode;\n\n        if (!this.wmDisabledItem) {\n          element.style.pointerEvents = 'none';\n          element.style.opacity = '0.5';\n        } else {\n          element.style.pointerEvents = 'auto';\n          element.style.opacity = '1';\n        }\n      }\n    }\n\n  }\n\n  DisabledItemDirective.ɵfac = function DisabledItemDirective_Factory(t) {\n    return new (t || DisabledItemDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  DisabledItemDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: DisabledItemDirective,\n    selectors: [[\"\", \"wmDisabledItem\", \"\"]],\n    inputs: {\n      wmDisabledItem: \"wmDisabledItem\"\n    }\n  });\n  return DisabledItemDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/* c8 ignore start */\n\n\nlet PBContextMenuComponent = /*#__PURE__*/(() => {\n  let PBContextMenuComponent = class PBContextMenuComponent extends MenuBaseComponent {\n    /**\r\n     * Constructor for the contextmenu component\r\n     * @param changeDetector service to track the change in the model\r\n     * @param service service to use the Mobilize core\r\n     */\n    constructor(changeDetector, renderer2, element, service, lengthConverter, emitter, menuService, mTabOrderService) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter, mTabOrderService);\n      this.changeDetector = changeDetector;\n      this.renderer2 = renderer2;\n      this.element = element;\n      this.service = service;\n      this.emitter = emitter;\n      this.menuService = menuService;\n      this.mTabOrderService = mTabOrderService;\n    }\n    /**\r\n     *  Method called by the Angular lifecycle hook every\r\n     *  time that model is checked\r\n     */\n\n\n    ngDoCheck() {\n      if (this.refresh) {\n        this.applyFetchdata();\n        const contextVal = Utils.getPointerOffset();\n\n        if (contextVal.left && contextVal.top) {\n          this.kendoContextMenu.show(contextVal);\n          this.isVisible = true;\n          setTimeout(() => {\n            this.setFocusOnPopupMenu();\n          }, 300);\n        }\n\n        this.refresh = false;\n      }\n    }\n    /**\r\n     *  Method called by the Angular lifecycle hook\r\n     *  at the beginning\r\n     */\n\n\n    ngOnInit() {\n      super.ngOnInit();\n      this.isVisible = false;\n    }\n    /**\r\n     *  Set focus on popup menu option.\r\n     */\n\n\n    setFocusOnPopupMenu() {\n      const contextMenu = document.querySelector('kendo-popup');\n\n      if (contextMenu) {\n        contextMenu.focus();\n        this.bindPopupEvents(contextMenu);\n        this.detectChanges();\n      }\n    }\n    /**\r\n     * Binds events to context menu popup\r\n     * @param contextMenu Context menu popup reference\r\n     */\n\n\n    bindPopupEvents(contextMenu) {\n      contextMenu.onblur = event => {\n        if (this.isVisible && !contextMenu.contains(event.relatedTarget)) {\n          this.kendoContextMenu.hide();\n        }\n      };\n    }\n    /*\r\n     * Request the new data from the web Service and update the component.\r\n     */\n\n\n    applyFetchdata() {\n      this.service.fetch(this.url, this.id, null, this.model, this.itemsExtractor.bind(this), ActionRequest.MenuAction).subscribe(data => {\n        data = data.data ? data.data : this.itemsExtractor(data);\n        this.items = data.menuItems;\n        this.detectChanges();\n      });\n    }\n    /**\r\n     * Returns datasource items\r\n     * @param model  component model\r\n     */\n\n\n    itemsExtractor(model) {\n      return this.menuService.updateMenu(model, null, null);\n    }\n    /**\r\n     * Is triggered when de context menu closes\r\n     * @param event\r\n     */\n\n\n    onClose(event) {\n      this.isVisible = false;\n    }\n    /**\r\n     * Trigger the Click event when a menu item was clicked.\r\n     */\n\n\n    onClicked(event) {\n      const item = event.item;\n      this.currentItem = event.item;\n      this.Clicked.emit(new EventData(event, item.id, item.mapperId));\n    }\n\n  };\n\n  PBContextMenuComponent.ɵfac = function PBContextMenuComponent_Factory(t) {\n    return new (t || PBContextMenuComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.WebMapService), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MenuChildrenService), i0.ɵɵdirectiveInject(MainTabOrderService, 8));\n  };\n\n  PBContextMenuComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: PBContextMenuComponent,\n    selectors: [[\"wm-contextmenu\"]],\n    viewQuery: function PBContextMenuComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(ContextMenuComponent, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.kendoContextMenu = _t.first);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[\"tabindex\", \"0\", 3, \"items\", \"id\", \"select\", \"popupClose\", 4, \"ngIf\"], [\"tabindex\", \"0\", 3, \"items\", \"id\", \"select\", \"popupClose\"], [\"kendoMenuItemTemplate\", \"\"], [3, \"ngClass\", \"wmDisabledItem\", 4, \"ngIf\"], [3, \"ngClass\", \"wmDisabledItem\"], [3, \"src\", 4, \"ngIf\"], [4, \"ngIf\"], [3, \"src\"]],\n    template: function PBContextMenuComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, PBContextMenuComponent_kendo_contextmenu_0_Template, 2, 2, \"kendo-contextmenu\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.model);\n      }\n    },\n    directives: [i6$4.ContextMenuComponent, i6.NgIf, i6$4.ItemTemplateDirective, i6.NgClass, DisabledItemDirective],\n    styles: [\"wm-contextmenu .k-widget{height:auto}  wm-contextmenu .k-menu .k-item>.k-link{padding-top:0;padding-bottom:0}.before[_ngcontent-%COMP%]{width:100%;height:100%;text-align:center;display:contents}.above[_ngcontent-%COMP%]{width:100%;height:100%;text-align:center}\"],\n    changeDetection: 0\n  });\n\n  __decorate([serverEvent('clicked', MenuEventsExtractors.menuItemClickEventArgsExtractor, MenuEventsExtractors.menuItemExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], PBContextMenuComponent.prototype, \"onClicked\", null);\n\n  PBContextMenuComponent = __decorate([dataTransfer(['ctxtmnu']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, WebMapService, LengthConverter, DataManagerEventService, MenuChildrenService, MainTabOrderService])], PBContextMenuComponent);\n  return PBContextMenuComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet RectangleBaseComponent = /*#__PURE__*/(() => {\n  class RectangleBaseComponent extends GraphicsComponent {\n    /* c8 ignore start */\n    constructor(changeDetector, renderer2, element, lengthConverter, emitter, mTabOService) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter, mTabOService);\n      this.changeDetector = changeDetector;\n      this.renderer2 = renderer2;\n      this.element = element;\n      this.emitter = emitter;\n      this.mTabOService = mTabOService;\n    }\n    /* c8 ignore stop */\n\n\n    ngOnInit() {\n      super.ngOnInit();\n    }\n    /**\r\n     * Property for the opacity of the fill\r\n     */\n\n\n    get fillOpacity() {\n      return this.emitter && this.fillPattern === BrushHatch.transparent || this.fillPattern === FillPattern.transparent ? 0.0 : 1.0;\n    }\n    /**\r\n     * Specifies the width of the control\r\n     */\n\n\n    get width() {\n      return Utils.getPositionValue(this.model, 'Width');\n    }\n    /**\r\n     * Specifies the height of the control\r\n     */\n\n\n    get height() {\n      return Utils.getPositionValue(this.model, 'Height');\n    }\n    /**\r\n     * Specifies the hatch pattern used to fill the control\r\n     */\n\n\n    get fillPattern() {\n      if (this.emitter) {\n        // is on DM\n        return this.getValue(this.model.BrushHatch, BrushHatch.transparent);\n      }\n\n      return this.getValue(this.model.FillPattern, FillPattern.solid);\n    }\n    /**\r\n     * filled or outlined rectangular form within a window\r\n     */\n\n\n    get fillColor() {\n      return this.getValue(this.model.FillColor, 'rgb(255,255,255)');\n    }\n\n    getValue(property, defaultValue) {\n      return property !== undefined && property !== null ? property : defaultValue;\n    }\n    /**\r\n     * Gets svg style\r\n     */\n\n\n    get svgFillStyle() {\n      const styleEnum = this.getStyleEnum();\n\n      switch (this.fillPattern) {\n        case styleEnum.bdiagonal:\n          return 'url(#bdiagonal)';\n\n        case styleEnum.diamond:\n          return 'url(#diamond)';\n\n        case styleEnum.fdiagonal:\n          return 'url(#fdiagonal)';\n\n        case styleEnum.horizontal:\n          return 'url(#horizontal)';\n\n        case styleEnum.solid:\n          return this.fillColor;\n\n        case styleEnum.square:\n          return 'url(#square)';\n\n        case styleEnum.vertical:\n          return 'url(#vertical)';\n\n        case styleEnum.transparent:\n          return this.fillColor;\n      }\n    }\n    /**\r\n     * Gets style enum\r\n     * @returns style enum\r\n     */\n\n\n    getStyleEnum() {\n      return this.emitter ? BrushHatch : FillPattern;\n    }\n\n  }\n\n  RectangleBaseComponent.ɵfac = function RectangleBaseComponent_Factory(t) {\n    return new (t || RectangleBaseComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8));\n  };\n\n  RectangleBaseComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: RectangleBaseComponent,\n    selectors: [[\"ng-component\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function RectangleBaseComponent_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return RectangleBaseComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet RoundRectangleComponent = /*#__PURE__*/(() => {\n  class RoundRectangleComponent extends RectangleBaseComponent {\n    /**\r\n     * Specifies the CornerHeight of the control\r\n     */\n    get ry() {\n      return this.model.CornerHeight || 0;\n    }\n    /**\r\n     * Specifies the CornerWidth of the control\r\n     */\n\n\n    get rx() {\n      return this.model.CornerWidth || 0;\n    }\n\n  }\n\n  RoundRectangleComponent.ɵfac = /* @__PURE__ */function () {\n    let ɵRoundRectangleComponent_BaseFactory;\n    return function RoundRectangleComponent_Factory(t) {\n      return (ɵRoundRectangleComponent_BaseFactory || (ɵRoundRectangleComponent_BaseFactory = i0.ɵɵgetInheritedFactory(RoundRectangleComponent)))(t || RoundRectangleComponent);\n    };\n  }();\n\n  RoundRectangleComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: RoundRectangleComponent,\n    selectors: [[\"wm-round-rectangle\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 25,\n    vars: 19,\n    consts: [[\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"hostComponent\", \"ngClass\"], [\"id\", \"bdiagonal\", \"x\", \"0\", \"y\", \"0\", \"width\", \"7\", \"height\", \"7\", \"patternUnits\", \"userSpaceOnUse\"], [\"width\", \"7\", \"height\", \"7\", \"fill-opacity\", \"0\", \"stroke-opacity\", \"1\", \"stroke\", \"black\"], [\"x1\", \"0\", \"y1\", \"7\", \"x2\", \"7\", \"y2\", \"0\", \"fill-opacity\", \"0\", \"stroke-opacity\", \"1\", 2, \"stroke\", \"rgb(0,0,0)\", \"stroke-width\", \"1\"], [\"id\", \"fdiagonal\", \"x\", \"0\", \"y\", \"0\", \"width\", \"7\", \"height\", \"7\", \"patternUnits\", \"userSpaceOnUse\"], [\"x1\", \"0\", \"y1\", \"0\", \"x2\", \"7\", \"y2\", \"7\", 2, \"stroke\", \"rgb(0,0,0)\", \"stroke-width\", \"1\"], [\"id\", \"diamond\", \"x\", \"0\", \"y\", \"0\", \"width\", \"10\", \"height\", \"10\", \"patternUnits\", \"userSpaceOnUse\"], [\"width\", \"10\", \"height\", \"10\", \"fill-opacity\", \"0\", \"stroke-opacity\", \"1\", \"stroke\", \"black\"], [\"x1\", \"0\", \"y1\", \"10\", \"x2\", \"10\", \"y2\", \"0\", 2, \"stroke\", \"rgb(0,0,0)\", \"stroke-width\", \"1\"], [\"x1\", \"0\", \"y1\", \"0\", \"x2\", \"10\", \"y2\", \"10\", 2, \"stroke\", \"rgb(0,0,0)\", \"stroke-width\", \"1\"], [\"id\", \"horizontal\", \"x\", \"0\", \"y\", \"0\", \"width\", \"10\", \"height\", \"10\", \"patternUnits\", \"userSpaceOnUse\"], [\"x1\", \"0\", \"y1\", \"5\", \"x2\", \"10\", \"y2\", \"5\", 2, \"stroke\", \"rgb(0,0,0)\", \"stroke-width\", \"1\"], [\"id\", \"vertical\", \"x\", \"0\", \"y\", \"0\", \"width\", \"10\", \"height\", \"10\", \"patternUnits\", \"userSpaceOnUse\"], [\"x1\", \"0\", \"y1\", \"0\", \"x2\", \"0\", \"y2\", \"10\", 2, \"stroke\", \"rgb(0,0,0)\", \"stroke-width\", \"1\"], [\"id\", \"square\", \"width\", \"10\", \"height\", \"10\", \"x\", \"0\", \"y\", \"0\", \"patternUnits\", \"userSpaceOnUse\"], [\"x\", \"0\", \"y\", \"0\"]],\n    template: function RoundRectangleComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelementStart(1, \"svg\")(2, \"defs\")(3, \"pattern\", 1);\n        i0.ɵɵelement(4, \"rect\", 2)(5, \"line\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"pattern\", 4);\n        i0.ɵɵelement(7, \"rect\", 2)(8, \"line\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"pattern\", 6);\n        i0.ɵɵelement(10, \"rect\", 7)(11, \"line\", 8)(12, \"line\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"pattern\", 10);\n        i0.ɵɵelement(14, \"rect\", 7)(15, \"line\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"pattern\", 12);\n        i0.ɵɵelement(17, \"rect\", 7)(18, \"line\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"pattern\", 14);\n        i0.ɵɵelement(20, \"rect\", 7)(21, \"line\", 11)(22, \"line\", 13);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(23, \"rect\", 15)(24, \"rect\", 15);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"hostComponent\", ctx)(\"ngClass\", ctx.class);\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"width\", ctx.width)(\"height\", ctx.height);\n        i0.ɵɵadvance(22);\n        i0.ɵɵattribute(\"width\", ctx.width)(\"rx\", ctx.rx)(\"ry\", ctx.ry)(\"height\", ctx.height)(\"fill\", ctx.fillColor)(\"fill-opacity\", ctx.fillOpacity);\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"width\", ctx.width)(\"rx\", ctx.rx)(\"ry\", ctx.ry)(\"height\", ctx.height)(\"stroke\", ctx.lineColor)(\"fill-opacity\", ctx.fillOpacity)(\"stroke-dasharray\", ctx.svgStyle)(\"stroke-width\", ctx.lineThickness)(\"fill\", ctx.svgFillStyle);\n      }\n    },\n    directives: [ControlsPowerDirective, FocusableDirective, i6.NgClass],\n    styles: [\"\"]\n  });\n  return RoundRectangleComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet RectangleComponent = /*#__PURE__*/(() => {\n  let RectangleComponent = class RectangleComponent extends RectangleBaseComponent {\n    constructor(\n    /* c8 ignore next 6 */\n    changeDetector, renderer2, element, lengthConverter, emitter, mTOService) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter, mTOService);\n      this.mTOService = mTOService;\n    }\n\n  };\n\n  RectangleComponent.ɵfac = function RectangleComponent_Factory(t) {\n    return new (t || RectangleComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8));\n  };\n\n  RectangleComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: RectangleComponent,\n    selectors: [[\"wm-rectangle\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 25,\n    vars: 15,\n    consts: [[\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"hostComponent\", \"ngClass\"], [\"id\", \"bdiagonal\", \"x\", \"0\", \"y\", \"0\", \"width\", \"7\", \"height\", \"7\", \"patternUnits\", \"userSpaceOnUse\"], [\"width\", \"7\", \"height\", \"7\", \"fill-opacity\", \"0\", \"stroke-opacity\", \"1\", \"stroke\", \"black\"], [\"x1\", \"0\", \"y1\", \"7\", \"x2\", \"7\", \"y2\", \"0\", \"fill-opacity\", \"0\", \"stroke-opacity\", \"1\", 2, \"stroke\", \"rgb(0,0,0)\", \"stroke-width\", \"1\"], [\"id\", \"fdiagonal\", \"x\", \"0\", \"y\", \"0\", \"width\", \"7\", \"height\", \"7\", \"patternUnits\", \"userSpaceOnUse\"], [\"x1\", \"0\", \"y1\", \"0\", \"x2\", \"7\", \"y2\", \"7\", 2, \"stroke\", \"rgb(0,0,0)\", \"stroke-width\", \"1\"], [\"id\", \"diamond\", \"x\", \"0\", \"y\", \"0\", \"width\", \"10\", \"height\", \"10\", \"patternUnits\", \"userSpaceOnUse\"], [\"width\", \"10\", \"height\", \"10\", \"fill-opacity\", \"0\", \"stroke-opacity\", \"1\", \"stroke\", \"black\"], [\"x1\", \"0\", \"y1\", \"10\", \"x2\", \"10\", \"y2\", \"0\", 2, \"stroke\", \"rgb(0,0,0)\", \"stroke-width\", \"1\"], [\"x1\", \"0\", \"y1\", \"0\", \"x2\", \"10\", \"y2\", \"10\", 2, \"stroke\", \"rgb(0,0,0)\", \"stroke-width\", \"1\"], [\"id\", \"horizontal\", \"x\", \"0\", \"y\", \"0\", \"width\", \"10\", \"height\", \"10\", \"patternUnits\", \"userSpaceOnUse\"], [\"x1\", \"0\", \"y1\", \"5\", \"x2\", \"10\", \"y2\", \"5\", 2, \"stroke\", \"rgb(0,0,0)\", \"stroke-width\", \"1\"], [\"id\", \"vertical\", \"x\", \"0\", \"y\", \"0\", \"width\", \"10\", \"height\", \"10\", \"patternUnits\", \"userSpaceOnUse\"], [\"x1\", \"0\", \"y1\", \"0\", \"x2\", \"0\", \"y2\", \"10\", 2, \"stroke\", \"rgb(0,0,0)\", \"stroke-width\", \"1\"], [\"id\", \"square\", \"width\", \"10\", \"height\", \"10\", \"x\", \"0\", \"y\", \"0\", \"patternUnits\", \"userSpaceOnUse\"]],\n    template: function RectangleComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelementStart(1, \"svg\")(2, \"defs\")(3, \"pattern\", 1);\n        i0.ɵɵelement(4, \"rect\", 2)(5, \"line\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"pattern\", 4);\n        i0.ɵɵelement(7, \"rect\", 2)(8, \"line\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"pattern\", 6);\n        i0.ɵɵelement(10, \"rect\", 7)(11, \"line\", 8)(12, \"line\", 9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"pattern\", 10);\n        i0.ɵɵelement(14, \"rect\", 7)(15, \"line\", 11);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"pattern\", 12);\n        i0.ɵɵelement(17, \"rect\", 7)(18, \"line\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"pattern\", 14);\n        i0.ɵɵelement(20, \"rect\", 7)(21, \"line\", 11)(22, \"line\", 13);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(23, \"rect\")(24, \"rect\");\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"hostComponent\", ctx)(\"ngClass\", ctx.class);\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"width\", ctx.width)(\"height\", ctx.height);\n        i0.ɵɵadvance(22);\n        i0.ɵɵattribute(\"width\", ctx.width)(\"height\", ctx.height)(\"fill\", ctx.fillColor)(\"fill-opacity\", ctx.fillOpacity);\n        i0.ɵɵadvance(1);\n        i0.ɵɵattribute(\"width\", ctx.width)(\"height\", ctx.height)(\"stroke\", ctx.lineColor)(\"fill-opacity\", ctx.fillOpacity)(\"stroke-dasharray\", ctx.svgStyle)(\"stroke-width\", ctx.lineThickness)(\"fill\", ctx.svgFillStyle);\n      }\n    },\n    directives: [ControlsPowerDirective, FocusableDirective, i6.NgClass],\n    styles: [\"\"]\n  });\n  RectangleComponent = __decorate([dataTransfer(['rctngl']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, LengthConverter, DataManagerEventService, MainTabOrderService])], RectangleComponent);\n  return RectangleComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\n\n\nlet TreeViewItem = /*#__PURE__*/(() => {\n  class TreeViewItem {\n    constructor(model) {\n      this.model = model;\n    }\n    /**\r\n     * Get the selectedpictureindex property value\r\n     */\n\n\n    get selectedpictureindex() {\n      return this.model.selectedpictureindex;\n    }\n    /**\r\n     * Get the statepictureindex property value\r\n     */\n\n\n    get statepictureindex() {\n      return this.model.statepictureindex;\n    }\n\n  }\n\n  TreeViewItem.ɵfac = function TreeViewItem_Factory(t) {\n    i0.ɵɵinvalidFactory();\n  };\n\n  TreeViewItem.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: TreeViewItem,\n    inputs: {\n      model: \"model\"\n    }\n  });\n  return TreeViewItem;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n/**\r\n * This command sends an update to server when a node label has been changed\r\n */\n\n\nlet UpdateTreeViewEditLabel = /*#__PURE__*/(() => {\n  class UpdateTreeViewEditLabel {\n    /* c8 ignore start */\n    constructor(service) {\n      this.service = service;\n      /* c8 ignore stop */\n      // Command properties\n\n      this.treeviewId = undefined;\n      this.nodeHandle = undefined;\n      this.newValue = undefined;\n      this.editLabelEnabled = false;\n      this.bindCommandGenerator = this.commandGenerator.bind(this);\n      this.service.core.getEvent().publish(Events.PreActionCommandGeneratorRegistration, this.bindCommandGenerator);\n    }\n    /**\r\n     * Creates UPDATE_TREE_VIEW_EDIT_LABEL\r\n     */\n\n\n    commandGenerator() {\n      if (!this.editLabelEnabled) {\n        this.command = null;\n        return null;\n      } else {\n        this.command = {\n          receiverId: this.treeviewId,\n          command: 'UPDATE_TREE_VIEW_EDIT_LABEL',\n          data: {\n            treeviewId: this.treeviewId,\n            nodeHandle: this.nodeHandle,\n            newValue: this.newValue\n          }\n        };\n        this.clear();\n        return this.command;\n      }\n    }\n    /**\r\n     * Sets treeviewId\r\n     * @param id treeviewId property\r\n     */\n\n\n    setTreeviewId(id) {\n      this.treeviewId = id;\n    }\n    /**\r\n     * Sets nodeHandle\r\n     * @param nodeHandle The current nodeHandle\r\n     */\n\n\n    setnodeHandle(nodeHandle) {\n      this.nodeHandle = nodeHandle;\n    }\n    /**\r\n     * Sets newValue property\r\n     * @param newValue The newValue\r\n     */\n\n\n    setnewValue(newValue) {\n      this.newValue = newValue;\n    }\n    /**\r\n     * Ruuner function  assign command values\r\n     * @param data object with command values\r\n     */\n\n\n    runner(data) {\n      this.setTreeviewId(data.args.treeviewId);\n      this.setnodeHandle(data.args.nodeHandle);\n      this.setnewValue(data.args.newValue);\n      this.editLabelEnabled = true;\n    }\n    /**\r\n     * clear command parameters\r\n     */\n\n\n    clear() {\n      this.editLabelEnabled = false;\n      this.treeviewId = undefined;\n      this.setnodeHandle = undefined;\n      this.setnewValue = undefined;\n      return true;\n    }\n\n    ngOnDestroy() {\n      this.service.core.getEvent().publish(Events.PreActionCommandGeneratorDeregistration, this.bindCommandGenerator);\n    }\n\n  }\n\n  UpdateTreeViewEditLabel.ɵfac = function UpdateTreeViewEditLabel_Factory(t) {\n    return new (t || UpdateTreeViewEditLabel)(i0.ɵɵinject(i1.WebMapService));\n  };\n\n  UpdateTreeViewEditLabel.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: UpdateTreeViewEditLabel,\n    factory: UpdateTreeViewEditLabel.ɵfac,\n    providedIn: 'root'\n  });\n  return UpdateTreeViewEditLabel;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet TreeViewCommandsService = /*#__PURE__*/(() => {\n  class TreeViewCommandsService {\n    constructor(updateTreeViewEditLabel) {\n      this.commandsRunner = new Dictionary();\n      this.addCommandRunner(CommandName.updateTreeViewEditLabel, updateTreeViewEditLabel);\n    }\n\n    removeCommandRunner(commandName) {\n      this.commandsRunner.remove(commandName);\n    }\n\n    addCommandRunner(commandName, command) {\n      this.commandsRunner.add(commandName, command);\n    }\n\n    getCommand(commandName) {\n      if (!this.commandsRunner.containsKey(commandName)) {\n        return undefined;\n      }\n\n      return this.commandsRunner.value(commandName);\n    }\n\n    run(commandName, data) {\n      if (this.commandsRunner.containsKey(commandName)) {\n        this.commandsRunner.value(commandName).runner(data);\n      }\n    }\n\n  }\n\n  TreeViewCommandsService.ɵfac = function TreeViewCommandsService_Factory(t) {\n    return new (t || TreeViewCommandsService)(i0.ɵɵinject(UpdateTreeViewEditLabel));\n  };\n\n  TreeViewCommandsService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: TreeViewCommandsService,\n    factory: TreeViewCommandsService.ɵfac,\n    providedIn: 'root'\n  });\n  return TreeViewCommandsService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar TreeViewComponent_1;\nvar TreeViewAction = /*#__PURE__*/(() => {\n  (function (TreeViewAction) {\n    TreeViewAction[TreeViewAction[\"Unknown\"] = 0] = \"Unknown\";\n    TreeViewAction[TreeViewAction[\"ByKeyboard\"] = 1] = \"ByKeyboard\";\n    TreeViewAction[TreeViewAction[\"ByMouse\"] = 2] = \"ByMouse\";\n    TreeViewAction[TreeViewAction[\"Collapse\"] = 3] = \"Collapse\";\n    TreeViewAction[TreeViewAction[\"Expand\"] = 4] = \"Expand\";\n  })(TreeViewAction || (TreeViewAction = {}));\n\n  return TreeViewAction;\n})();\nlet TreeViewComponent = TreeViewComponent_1 = class TreeViewComponent extends BaseControlComponent {\n  constructor(iconservice, service, changeDetector, lengthConverter, renderer2, element, treeViewCommandsService, updateTreeViewEditLabel, emitter, mTabOrderService, tabPageOrderService) {\n    super(changeDetector, renderer2, element, lengthConverter, emitter, mTabOrderService, tabPageOrderService);\n    this.iconservice = iconservice;\n    this.service = service;\n    this.changeDetector = changeDetector;\n    this.renderer2 = renderer2;\n    this.element = element;\n    this.treeViewCommandsService = treeViewCommandsService;\n    this.updateTreeViewEditLabel = updateTreeViewEditLabel;\n    this.emitter = emitter;\n    this.mTabOrderService = mTabOrderService;\n    this.tabPageOrderService = tabPageOrderService;\n    this.defaultDataUrl = 'api/treeview/FetchItems';\n    this.selectedHandle = 0;\n    this.makeNodeEditable = false; // validates if a node should be editable\n\n    this.inputselected = false; // when an input is on the current treeNode, it should be selected\n\n    this.SelectionChanged = new EventEmitter();\n    this.ItemExpanding = new EventEmitter();\n    this.TreeviewEndLabelEdit = new EventEmitter();\n    /**\r\n     * A function that checks whether a given node index exists in the expanded keys collection.\r\n     * If the index can be found, the node is marked as expanded.\r\n     */\n\n    this.isExpanded = (dataItem, index) => this.expandedKeys.indexOf(index) > -1;\n  }\n\n  static selectionChangedArgsExtractor(event, component) {\n    return [event.oldHandle, component.selectedHandle];\n  }\n\n  static itemExpandingArgsExtractor(event, component) {\n    return [component.selectedHandle];\n  }\n  /**\r\n   * Returns the index of the current edited node and the new data\r\n   * @param event Event information\r\n   * @param component tree view component\r\n   */\n\n\n  static treeViewEndLabelArgsExtractor(event, component) {\n    return [component.selectedHandle, event.target.value];\n  }\n  /**\r\n   * @description\r\n   * Gets focusable element inside of the component\r\n   */\n\n\n  get focusableElement() {\n    return this.treeview;\n  }\n\n  ngOnInit() {\n    this.fetchTreeNodes();\n    this.registerTabService();\n  }\n  /**\r\n   * A `collapse` event handler that will remove the node hierarchical index\r\n   * from the collection, collapsing its children.\r\n   */\n\n\n  handleCollapse(node) {\n    this.expandedKeys = this.expandedKeys.filter(k => k !== node.index);\n  }\n  /**\r\n   * An `expand` event handler that will add the node hierarchical index\r\n   * to the collection, expanding the its children.\r\n   */\n\n\n  handleExpand(node) {\n    // this asks if we are trying to expand a node with empty internalItems.\n    // the reason why we handle empty internal items is because there are some cases that even when a node is marked as child true,\n    // that node does not has preloaded childs, that causes an internal kendo error when it tries to expand.\n    this.expandedKeys = this.expandedKeys.concat(node.index);\n\n    if (Object.keys(node.dataItem.internalItems).length === 0) {\n      this.previousClickedEmptyChildren = node.index;\n    } // This could no be the best aproach to solve this issue, but for some reason,\n    // when itemExpandingArgsExtractor returns its arguments, internally kendo treeview gets into a loading state and crashes.\n    // This just let a minimal time out for kendo to finish the expand method execution.\n\n\n    setTimeout(() => {\n      this.itemExpandingEvent(node);\n    }, 200);\n  }\n  /**\r\n   * Triggers ItemExpandingEvent\r\n   * @param node tree node item\r\n   */\n\n\n  itemExpandingEvent(node) {\n    this.selectedHandle = node.dataItem.itemHandle;\n    const event = {};\n    this.ItemExpanding.emit(new EventData(event, String(this.selectedHandle), this.mapperId));\n  }\n  /**\r\n   * the parent node's items collection as children\r\n   * @param node the node item\r\n   */\n\n\n  fetchChildren(node) {\n    return of(node.internalItems);\n  }\n  /**\r\n   * check if the parent node has children\r\n   * When node children property is set to true kendo expanded arrow is showed.\r\n   * Child true could has preloaded childs or has to wait until server actualization\r\n   *    * @param node the current node\r\n   */\n\n\n  hasChildren(node) {\n    return node.children;\n  }\n\n  fetchTreeNodes() {\n    this.service.fetch(this.url, this.id).subscribe(data => {\n      this.items = data.Nodes;\n      this.expandedKeys = data.ExpandedKeys;\n      this.selectedNode = data.SelectedKey;\n      this.detectChanges(); // this if condition validates when an empty node tried to open and if we receive a response with that node loaded\n      // clean previousClickedEmptyChildren\n\n      if (this.previousClickedEmptyChildren && Object.keys(this.treeview.itemLookup(this.previousClickedEmptyChildren))) {\n        this.expandedKeys = this.expandedKeys.concat(this.previousClickedEmptyChildren);\n        this.previousClickedEmptyChildren = null;\n      }\n\n      if (this.selectedNode[0] && this.treeview.itemLookup(this.selectedNode[0]).item.dataItem.editable) {\n        this.makeNodeEditable = true;\n        this.detectChanges();\n      }\n    });\n  }\n  /**\r\n   * Returns the data source URL of this component.\r\n   */\n\n\n  get url() {\n    return this.dataUrl && this.dataUrl.length > 0 ? this.dataUrl : this.defaultDataUrl;\n  }\n  /**\r\n   * Get the refresh property value\r\n   */\n\n\n  get refresh() {\n    return this.model.Dirty;\n  }\n  /**\r\n   * Set the refresh property value\r\n   */\n\n\n  set refresh(value) {\n    this.model.Dirty = value;\n  }\n\n  ngDoCheck() {\n    if (this.refresh) {\n      this.fetchTreeNodes();\n      this.refresh = false;\n    }\n\n    if (this.refreshExpandedKeys) {\n      this.updateExpandedKeys();\n      this.refreshExpandedKeys = false;\n    }\n\n    this.selectInput();\n  }\n  /**\r\n   *  Apply selection to the current visible input\r\n   */\n\n\n  selectInput() {\n    // validates if input is selected\n    if (this.inputBox && !this.inputselected) {\n      this.inputBox.nativeElement.select();\n      this.inputselected = true;\n      this.detectChanges();\n    }\n  }\n  /**\r\n   * Get the refresh ExpandedKeys property value\r\n   */\n\n\n  get refreshExpandedKeys() {\n    return this.model.RefreshExpandedKeys;\n  }\n  /**\r\n   * Set the refresh ExpandedKeys property value\r\n   */\n\n\n  set refreshExpandedKeys(value) {\n    this.model.RefreshExpandedKeys = value;\n  }\n  /**\r\n   * Get the selectedpictureName property value\r\n   */\n\n\n  get pictureName() {\n    return this.model.PictureName;\n  }\n  /**\r\n   * Get the selectedpictureindex property value\r\n   */\n\n\n  get statePictureName() {\n    return this.model.StatePictureName;\n  }\n  /**\r\n   * @description\r\n   * Gets iconclass from icon service\r\n   * @returns {string}\r\n   */\n\n\n  get iconClass() {\n    return this.iconservice.iconClass;\n  }\n  /**\r\n   * Returns the icon for the treenode\r\n   * @param item Node from TreeView\r\n   */\n\n\n  isValidPicture(item) {\n    const treeViewItem = new TreeViewItem(item);\n    this.pictureIcon = this.pictureName ? this.iconservice.getItemName(this.pictureName[treeViewItem.selectedpictureindex - 1]) : null;\n    this.stateIcon = this.statePictureName ? this.iconservice.getItemName(this.statePictureName[treeViewItem.statepictureindex - 1]) : null;\n    return true;\n  }\n  /**\r\n   * Get the selectedNode property value\r\n   */\n\n\n  get selectedNode() {\n    if (this.selectedNodeInfo) {\n      this.selectedNode = [this.selectedNodeInfo];\n    }\n\n    return this.selectedKey;\n  }\n  /**\r\n   * Set the selectedNode property value\r\n   */\n\n\n  set selectedNode(value) {\n    this.selectedKey = value;\n\n    if (this.selectedKey !== undefined) {\n      this.model.SelectedNodeInfo = this.selectedKey[0];\n    }\n  }\n  /**\r\n   * Get the selectedNodeInfo property value\r\n   */\n\n\n  get selectedNodeInfo() {\n    return this.model.SelectedNodeInfo;\n  }\n  /**\r\n   * Set the selectedNodeInfo property value\r\n   */\n\n\n  set selectedNodeInfo(value) {\n    this.model.SelectedNodeInfo = value;\n\n    if (this.selectedNodeInfo) {\n      this.selectedNode = this.selectedNodeInfo[0];\n    }\n  }\n  /**\r\n   * Updates the expandedKey collection.\r\n   * A time-out is required to wait until the dom is updated\r\n   */\n\n\n  updateExpandedKeys() {\n    this.expandedKeys = this.model.ExpandedKeys;\n    this.detectChanges();\n  }\n  /**\r\n   * Returns the delay time to move the scrollbar ensuring the node visibility\r\n   */\n\n\n  get scrollDelay() {\n    if (this.scrollTime === undefined) {\n      this.scrollTime = 300;\n    }\n\n    return this.scrollTime;\n  }\n\n  isBold(dataItem) {\n    return dataItem.bold ? {\n      'font-weight': 'bold'\n    } : '';\n  }\n  /**\r\n   * Trigger the selectionChange event when an item was clicked.\r\n   */\n\n\n  selectionChange(event) {\n    this.inputselected = false;\n    event.oldHandle = this.selectedHandle;\n    this.selectedHandle = event.dataItem.itemHandle;\n    this.selectedNodeKey = event.index;\n\n    if (this.selectedNodeKey) {\n      this.selectedNode = [this.selectedNodeKey];\n      this.SelectionChanged.emit(new EventData(event, this.selectedNodeKey, this.mapperId));\n    }\n  }\n\n  stateHandler(dataItem) {\n    const nextState = dataItem.statepictureindex >= this.statePictureName.length ? dataItem.statepictureindex = 1 : dataItem.statepictureindex += 1;\n    this.stateIcon = this.iconservice.getItemName(this.statePictureName[nextState - 1]);\n    Utils.preventPropagation(dataItem);\n  }\n  /**\r\n   * Specifies whether the user can edit the item labels in a control by clicking on a selected item\r\n   */\n\n\n  editLabels() {\n    return this.model.EditLabels;\n  }\n  /**\r\n   *  Event triggered When you click a node.\r\n   * @param event click node Event\r\n   */\n\n\n  nodeClicked(event) {\n    this.makeNodeEditable = this.isNodeEditable(event.item.dataItem) && this.editLabels();\n  }\n  /**\r\n   * Compare EditLabels value with  current node to check if is editable\r\n   * @param dataitem node item\r\n   */\n\n\n  isNodeEditable(dataitem) {\n    return dataitem.editable && this.editLabels();\n  }\n  /**\r\n   * Validated on the html to change into a edit mode\r\n   * @param dataitem tree node item\r\n   */\n\n\n  changeToEditMode(dataitem) {\n    return this.isNodeEditable(dataitem) && this.makeNodeEditable;\n  }\n  /**\r\n   * Event triggered when a node has been edited\r\n   * @param event Event information\r\n   * @param data new data edited\r\n   */\n\n\n  endLabelEdit(event, data) {\n    this.sendTreeviewLabelUpdate(event);\n    this.TreeviewEndLabelEdit.emit(new EventData(event, data, this.mapperId));\n    this.makeNodeEditable = false;\n    this.inputselected = false;\n  }\n  /**\r\n   * updateTreeViewEditLabel command\r\n   * @param event Event information\r\n   */\n\n\n  sendTreeviewLabelUpdate(event) {\n    const data = {\n      args: {\n        treeviewId: this.id,\n        nodeHandle: this.selectedHandle,\n        newValue: event.target.value\n      }\n    };\n    this.treeViewCommandsService.run(CommandName.updateTreeViewEditLabel, data);\n  }\n\n};\n\nTreeViewComponent.ɵfac = function TreeViewComponent_Factory(t) {\n  return new (t || TreeViewComponent)(i0.ɵɵdirectiveInject(IconsService), i0.ɵɵdirectiveInject(i1.WebMapService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(TreeViewCommandsService), i0.ɵɵdirectiveInject(UpdateTreeViewEditLabel), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n};\n\nTreeViewComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TreeViewComponent,\n  selectors: [[\"wm-treeview\"]],\n  viewQuery: function TreeViewComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c66, 5);\n      i0.ɵɵviewQuery(_c67, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.treeview = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputBox = _t.first);\n    }\n  },\n  inputs: {\n    dataUrl: \"dataUrl\",\n    scrollTime: \"scrollTime\"\n  },\n  outputs: {\n    SelectionChanged: \"SelectionChanged\",\n    ItemExpanding: \"ItemExpanding\",\n    TreeviewEndLabelEdit: \"TreeviewEndLabelEdit\"\n  },\n  features: [i0.ɵɵProvidersFeature([TreeViewCommandsService, UpdateTreeViewEditLabel]), i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[\"textField\", \"label\", \"kendoTreeViewExpandable\", \"\", \"kendoTreeViewSelectable\", \"\", \"kendoTreeViewHierarchyBinding\", \"\", \"kendoTreeViewDisable\", \"\", 3, \"ngClass\", \"nodes\", \"selectedKeys\", \"expandedKeys\", \"children\", \"hasChildren\", \"isExpanded\", \"selectedKeysChange\", \"expandedKeysChange\", \"selectionChange\", \"collapse\", \"expand\", \"keydown.tab\", \"keydown.shift.tab\", \"nodeClick\", 4, \"ngIf\"], [\"textField\", \"label\", \"kendoTreeViewExpandable\", \"\", \"kendoTreeViewSelectable\", \"\", \"kendoTreeViewHierarchyBinding\", \"\", \"kendoTreeViewDisable\", \"\", 3, \"ngClass\", \"nodes\", \"selectedKeys\", \"expandedKeys\", \"children\", \"hasChildren\", \"isExpanded\", \"selectedKeysChange\", \"expandedKeysChange\", \"selectionChange\", \"collapse\", \"expand\", \"keydown.tab\", \"keydown.shift.tab\", \"nodeClick\"], [\"treeview\", \"\"], [\"kendoTreeViewNodeTemplate\", \"\"], [\"class\", \"inline-flex-parent\", 3, \"ngStyle\", 4, \"ngIf\"], [1, \"inline-flex-parent\", 3, \"ngStyle\"], [1, \"k-iconState\", 3, \"ngClass\", \"click\"], [3, \"ngClass\"], [\"kendoTextBox\", \"\", 3, \"ngModel\", \"ngModelChange\", \"change\", 4, \"ngIf\"], [\"class\", \"display\", 4, \"ngIf\"], [\"kendoTextBox\", \"\", 3, \"ngModel\", \"ngModelChange\", \"change\"], [\"inputBox\", \"\"], [1, \"display\"]],\n  template: function TreeViewComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, TreeViewComponent_kendo_treeview_0_Template, 3, 7, \"kendo-treeview\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.model);\n    }\n  },\n  directives: [i9$2.TreeViewComponent, i6.NgIf, i9$2.ExpandDirective, i9$2.SelectDirective, i9$2.HierarchyBindingDirective, i9$2.DisableDirective, i6.NgClass, i9$2.NodeTemplateDirective, i6.NgStyle, i5$1.TextBoxDirective, i9.DefaultValueAccessor, i9.NgControlStatus, i9.NgModel],\n  styles: [\".display[_ngcontent-%COMP%]{display:inline-block!important}\"],\n  changeDetection: 0\n});\n\n__decorate([serverEvent('tvnitemexpanding', TreeViewComponent_1.itemExpandingArgsExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], TreeViewComponent.prototype, \"itemExpandingEvent\", null);\n\n__decorate([NotifyChange('Refresh'), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], TreeViewComponent.prototype, \"refresh\", null);\n\n__decorate([NotifyChange('RefreshExpandedKeys'), __metadata(\"design:type\", Boolean), __metadata(\"design:paramtypes\", [Boolean])], TreeViewComponent.prototype, \"refreshExpandedKeys\", null);\n\n__decorate([NotifyChange('SelectedNodeInfo'), __metadata(\"design:type\", Array), __metadata(\"design:paramtypes\", [Array])], TreeViewComponent.prototype, \"selectedNode\", null);\n\n__decorate([serverEvent('tvnselchanged', TreeViewComponent_1.selectionChangedArgsExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], TreeViewComponent.prototype, \"selectionChange\", null);\n\n__decorate([serverEvent('tvnendlabeledit', TreeViewComponent_1.treeViewEndLabelArgsExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object, Object]), __metadata(\"design:returntype\", void 0)], TreeViewComponent.prototype, \"endLabelEdit\", null);\n\nTreeViewComponent = TreeViewComponent_1 = __decorate([dataTransfer(['trvw']), __metadata(\"design:paramtypes\", [IconsService, WebMapService, ChangeDetectorRef, LengthConverter, Renderer2, ElementRef, TreeViewCommandsService, UpdateTreeViewEditLabel, DataManagerEventService, MainTabOrderService, ContainerControlTabOrderService])], TreeViewComponent);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet EllipseComponent = /*#__PURE__*/(() => {\n  class EllipseComponent extends GraphicsComponent {\n    /* c8 ignore start */\n    constructor(changeDetector, renderer2, element, lengthConverter, emitter, mTabOService) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter, mTabOService);\n      this.changeDetector = changeDetector;\n      this.renderer2 = renderer2;\n      this.element = element;\n      this.emitter = emitter;\n      this.mTabOService = mTabOService;\n    }\n    /* c8 ignore stop */\n\n\n    ngOnInit() {\n      super.ngOnInit();\n    }\n    /**\r\n     * @description\r\n     * Returns the left position value in pixels of the model.\r\n     * @returns { number }\r\n     */\n\n\n    get positionX() {\n      return this.model.Width || 0;\n    }\n    /**\r\n     * @description\r\n     * Returns the top position value in pixels of the model.\r\n     * @returns { number }\r\n     */\n\n\n    get positionY() {\n      return this.model.Height || 0;\n    }\n    /**\r\n     * Specifies the X position of one end of the line (the distance from the left edge of the window).\r\n     */\n\n\n    get radiusX() {\n      return this.model.Width - this.lineThickness;\n    }\n    /**\r\n     * \tSpecifies the Y position of one end of the line (the distance from the top of the window).\r\n     */\n\n\n    get radiusY() {\n      return this.model.Height - this.lineThickness;\n    }\n    /**\r\n     * returns the color of the ellipse\r\n     */\n\n\n    get fillColor() {\n      return this.model.FillColor === null || this.model.FillColor === 0 ? 'rgb(0,0,0)' : `${this.model.FillColor}`;\n    }\n    /**\r\n     * returns the with of the line.\r\n     */\n\n\n    get lineThickness() {\n      return this.model.LineWith || 0;\n    }\n    /**\r\n     * Specifies the hatch pattern used to fill the control\r\n     */\n\n\n    get fillPattern() {\n      return this.model.FillPattern || 0;\n    }\n    /**\r\n     * Gets svg style\r\n     */\n\n\n    get svgFillStyle() {\n      switch (this.fillPattern) {\n        case FillPattern.bdiagonal:\n          return 'url(#bdiagonal)';\n\n        case FillPattern.diamond:\n          return 'url(#diamond)';\n\n        case FillPattern.fdiagonal:\n          return 'url(#fdiagonal)';\n\n        case FillPattern.horizontal:\n          return 'url(#horizontal)';\n\n        case FillPattern.solid:\n          return this.fillColor;\n\n        case FillPattern.square:\n          return 'url(#square)';\n\n        case FillPattern.vertical:\n          return 'url(#vertical)';\n      }\n    }\n\n  }\n\n  EllipseComponent.ɵfac = function EllipseComponent_Factory(t) {\n    return new (t || EllipseComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8));\n  };\n\n  EllipseComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: EllipseComponent,\n    selectors: [[\"wm-ellipse\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"hostComponent\", \"ngClass\", \"keydown.tab\", \"keydown.shift.tab\", 4, \"ngIf\"], [\"wmPBControls\", \"\", \"wmFocusable\", \"\", 3, \"hostComponent\", \"ngClass\", \"keydown.tab\", \"keydown.shift.tab\"], [\"id\", \"bdiagonal\", \"x\", \"0\", \"y\", \"0\", \"width\", \"7\", \"height\", \"7\", \"patternUnits\", \"userSpaceOnUse\"], [\"width\", \"7\", \"height\", \"7\", \"fill-opacity\", \"0\", \"stroke-opacity\", \"1\", \"stroke\", \"black\"], [\"x1\", \"0\", \"y1\", \"7\", \"x2\", \"7\", \"y2\", \"0\", \"fill-opacity\", \"0\", \"stroke-opacity\", \"1\", 2, \"stroke\", \"rgb(0,0,0)\", \"stroke-width\", \"1\"], [\"id\", \"fdiagonal\", \"x\", \"0\", \"y\", \"0\", \"width\", \"7\", \"height\", \"7\", \"patternUnits\", \"userSpaceOnUse\"], [\"x1\", \"0\", \"y1\", \"0\", \"x2\", \"7\", \"y2\", \"7\", 2, \"stroke\", \"rgb(0,0,0)\", \"stroke-width\", \"1\"], [\"id\", \"diamond\", \"x\", \"0\", \"y\", \"0\", \"width\", \"10\", \"height\", \"10\", \"patternUnits\", \"userSpaceOnUse\"], [\"width\", \"10\", \"height\", \"10\", \"fill-opacity\", \"0\", \"stroke-opacity\", \"1\", \"stroke\", \"black\"], [\"x1\", \"0\", \"y1\", \"10\", \"x2\", \"10\", \"y2\", \"0\", 2, \"stroke\", \"rgb(0,0,0)\", \"stroke-width\", \"1\"], [\"x1\", \"0\", \"y1\", \"0\", \"x2\", \"10\", \"y2\", \"10\", 2, \"stroke\", \"rgb(0,0,0)\", \"stroke-width\", \"1\"], [\"id\", \"horizontal\", \"x\", \"0\", \"y\", \"0\", \"width\", \"10\", \"height\", \"10\", \"patternUnits\", \"userSpaceOnUse\"], [\"x1\", \"0\", \"y1\", \"5\", \"x2\", \"10\", \"y2\", \"5\", 2, \"stroke\", \"rgb(0,0,0)\", \"stroke-width\", \"1\"], [\"id\", \"vertical\", \"x\", \"0\", \"y\", \"0\", \"width\", \"10\", \"height\", \"10\", \"patternUnits\", \"userSpaceOnUse\"], [\"x1\", \"0\", \"y1\", \"0\", \"x2\", \"0\", \"y2\", \"10\", 2, \"stroke\", \"rgb(0,0,0)\", \"stroke-width\", \"1\"], [\"id\", \"square\", \"width\", \"10\", \"height\", \"10\", \"x\", \"0\", \"y\", \"0\", \"patternUnits\", \"userSpaceOnUse\"]],\n    template: function EllipseComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, EllipseComponent_div_0_Template, 25, 15, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.visible);\n      }\n    },\n    directives: [i6.NgIf, ControlsPowerDirective, FocusableDirective, i6.NgClass],\n    styles: [\"\"]\n  });\n  return EllipseComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet TabPageComponent = /*#__PURE__*/(() => {\n  class TabPageComponent extends PBControlContainerComponent {\n    /* c8 ignore start */\n    constructor(detector, render, elem, lengthConverter, emit, mTOService, tabPageService) {\n      super(detector, render, elem, lengthConverter, emit, mTOService, tabPageService);\n      this.detector = detector;\n      this.render = render;\n      this.emit = emit;\n      this.mTOService = mTOService;\n      this.tabPageService = tabPageService;\n    }\n    /**\r\n     * Gets the model text\r\n     */\n\n\n    get text() {\n      return RemoveAmpersand.remove(this.model.Text);\n    }\n    /**\r\n     * Gets DOM element id to be set in generation\r\n     * for Test purpose.\r\n     */\n\n\n    get id() {\n      return this.elem && this.elem.nativeElement && this.elem.nativeElement.id ? this.elem.nativeElement.id : '';\n    }\n    /**\r\n     * Determines whether select on\r\n     * This will trigger the DWs pending data loading\r\n     * when the current tabpage is visible\r\n     */\n\n\n    onSelect() {\n      this.tabPageService.isSelected = true;\n      this.tabPageService.processPendingDirty();\n    }\n    /**\r\n     * Clears selection\r\n     * Set is Selected flag to false in order to\r\n     * avoid executing getData in DManagers that are not\r\n     * currently visible in the screen\r\n     */\n\n\n    clearSelection() {\n      this.tabPageService.isSelected = false;\n    }\n    /**\r\n     * Handle the tabout action event\r\n     */\n\n\n    ngOnInit() {\n      super.ngOnInit();\n      this.tabPageOrderService.tabPageTabOutService.subscribe(evt => {\n        Utils.preventPropagation(event);\n        this.mTOService.resolveTab(this.tabNodeReference, evt.shiftKey, event);\n      });\n    }\n\n  }\n\n  TabPageComponent.ɵfac = function TabPageComponent_Factory(t) {\n    return new (t || TabPageComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n  };\n\n  TabPageComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: TabPageComponent,\n    selectors: [[\"wm-tabpage\"]],\n    contentQueries: function TabPageComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, _c68, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tabPageTemplate = _t.first);\n      }\n    },\n    features: [i0.ɵɵProvidersFeature([ContainerControlTabOrderService]), i0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c34,\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngIf\"]],\n    template: function TabPageComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵtemplate(0, TabPageComponent_div_0_Template, 2, 0, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.model);\n      }\n    },\n    directives: [i6.NgIf],\n    styles: [\"\"]\n  });\n  return TabPageComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar TabControlComponent_1;\nlet TabControlComponent = TabControlComponent_1 = class TabControlComponent extends PBControlContainerComponent {\n  /**\r\n   * Constructor for the menu component\r\n   * @param changeDetector service to track the change in the model\r\n   * @param service service to use the Mobilize core\r\n   */\n\n  /* c8 ignore start */\n  constructor(detector, render, elem, lengthConverter, emit, mTOService, tabPageOrderService) {\n    super(detector, render, elem, lengthConverter, emit, mTOService, tabPageOrderService);\n    this.detector = detector;\n    this.render = render;\n    this.emit = emit;\n    this.mTOService = mTOService;\n    this.tabPageOrderService = tabPageOrderService;\n    /* c8 ignore stop */\n\n    this.SelectionChanged = new EventEmitter();\n    this.SelectionChanging = new EventEmitter();\n    this.Clicked = new EventEmitter();\n    this.animate = false;\n  }\n\n  static SelectionChangedArgsExtractor(event, component) {\n    return [event.oldIndex, component.selectedIndex];\n  }\n\n  static SelectionChangingArgsExtractor(event, component) {\n    return [component.selectedIndex, event.index + 1];\n  }\n\n  static TabClickedArgsExtractor(event, component) {\n    return [event.index + 1];\n  }\n\n  ngAfterViewInit() {\n    super.ngAfterViewInit();\n    this.hideTabs();\n    this.applyFixedWidth();\n    this.currentVisibleTab = this.selectedIndex;\n\n    if (this.selectedIndex > 0) {\n      this.stopServerPropagation = true;\n      const fixedIndex = this.selectedIndex - 1;\n      this.kendoTabStrip.selectTab(fixedIndex);\n      this.processSelectedTabDataLoad(fixedIndex);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.hiddenTabs && this.currentHiddenTabs !== this.hiddenTabs.length) {\n      this.showTabs();\n      this.hideTabs();\n      this.applyFixedWidth();\n      this.detectChanges();\n    }\n  }\n\n  ngAfterViewChecked() {\n    if (this.selectedIndex > 0 && this.kendoTabStrip && this.selectedIndex !== this.currentVisibleTab) {\n      this.stopServerPropagation = true;\n      const fixedIndex = this.selectedIndex - 1;\n      this.kendoTabStrip.selectTab(fixedIndex);\n      this.processSelectedTabDataLoad(fixedIndex);\n      this.currentVisibleTab = this.selectedIndex;\n    }\n  }\n\n  showTabs() {\n    const tabHeaders = this.elem.nativeElement.querySelectorAll('li');\n\n    if (tabHeaders && tabHeaders.length > 0) {\n      tabHeaders.forEach(tab => {\n        this.render.setStyle(tab, 'display', 'block');\n      });\n    }\n  }\n\n  hideTabs() {\n    const tabs = this.hiddenTabs.toArray();\n    this.currentHiddenTabs = tabs.length;\n\n    if (tabs && tabs.length > 0) {\n      tabs.forEach(tab => {\n        this.render.setStyle(tab.nativeElement.parentElement.parentElement, 'display', 'none');\n      });\n    }\n  }\n  /**\r\n   * Applys fixed width\r\n   */\n\n\n  applyFixedWidth() {\n    if (this.fixedWidth) {\n      const tabs = this.elem.nativeElement.querySelector('ul[role=tablist]').querySelectorAll('li[role=tab]');\n      tabs.forEach(tab => {\n        const calcWidth = 99 / (this.allTabs.length - this.currentHiddenTabs);\n        this.render.setStyle(tab, 'width', `${calcWidth}%`);\n      });\n    }\n  }\n  /**\r\n   * Triggers events that are related with\r\n   * tab selection.\r\n   * @param tab value with tab event\r\n   */\n\n\n  fireSelection(tab) {\n    if (this.stopServerPropagation) {\n      this.stopServerPropagation = false;\n      return;\n    }\n\n    this.selectionChanging(tab);\n    this.selected(tab);\n    this.clickTab(tab);\n  }\n  /**\r\n   * Occurs when a tab is selected.\r\n   * @param tab value with tab event\r\n   */\n\n\n  selected(tab) {\n    tab.oldIndex = this.selectedIndex;\n    this.selectedIndex = this.currentVisibleTab = tab.index + 1;\n    this.processSelectedTabDataLoad(this.selectedIndex - 1);\n    this.SelectionChanged.emit(new EventData(tab, this.id, this.mapperId));\n  }\n  /**\r\n   * Occurs when a tab is previus to change.\r\n   * @param tab value with tab event\r\n   */\n\n\n  selectionChanging(tab) {\n    this.SelectionChanging.emit(new EventData(tab, this.id, this.mapperId));\n  }\n  /**\r\n   * Occurs when a tab is clicked.\r\n   * @param tab value with tab event\r\n   */\n\n\n  clickTab(event) {\n    this.Clicked.emit(new EventData(event, this.id, this.mapperId));\n  }\n  /**\r\n   * @param value Contains  the index of the currently selected tab page.\r\n   */\n\n\n  set selectedIndex(value) {\n    this.model.SelectedTabIndex = value;\n  }\n\n  get selectedIndex() {\n    return this.model.SelectedTabIndex;\n  }\n  /**\r\n   * Gets fixed width\r\n   */\n\n\n  get fixedWidth() {\n    return this.model.FixedWidth;\n  }\n  /**\r\n   * Get the corresponding image url for the\r\n   * tab title\r\n   */\n\n\n  tabItemSource(tab) {\n    return tab.model ? tab.model.PictureName : undefined;\n  }\n  /**\r\n   * Apply custom styles to specific areas of tab control, kendo does not provides a mechanism to bind them directly.\r\n   * @param tab tab component structure\r\n   * @param index tab index\r\n   */\n\n\n  setMyStyleTab(tab, index) {\n    if (tab.model) {\n      Utils.queryElementsApplyStyles(this.render, this.elem.nativeElement, '.k-tabstrip>.k-content.k-state-active', tab.model.BackColor, 'background-color');\n      Utils.queryElementsApplyStyles(this.render, this.elem.nativeElement, `k-tabstrip-tab-${index}`, tab.model.TabBackColor, 'background-color');\n    }\n  }\n  /**\r\n   * Process selected tab data load\r\n   * Calls the pending data window load data calls\r\n   * @param selected the index number\r\n   */\n\n\n  processSelectedTabDataLoad(selected) {\n    const tabs = this.allTabs.toArray();\n    tabs.forEach(tab => {\n      tab.clearSelection();\n    });\n\n    if (selected >= 0 && selected < this.allTabs.length) {\n      const selectedTab = this.allTabs.toArray()[selected];\n      selectedTab.onSelect();\n    }\n  }\n\n};\n\nTabControlComponent.ɵfac = function TabControlComponent_Factory(t) {\n  return new (t || TabControlComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n};\n\nTabControlComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TabControlComponent,\n  selectors: [[\"wm-tabcontrol\"]],\n  contentQueries: function TabControlComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, TabPageComponent, 4);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.allTabs = _t);\n    }\n  },\n  viewQuery: function TabControlComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(TabStripComponent, 5);\n      i0.ɵɵviewQuery(_c69, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.kendoTabStrip = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.hiddenTabs = _t);\n    }\n  },\n  inputs: {\n    animate: \"animate\"\n  },\n  outputs: {\n    SelectionChanged: \"SelectionChanged\",\n    SelectionChanging: \"SelectionChanging\",\n    Clicked: \"Clicked\"\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[3, \"animate\", \"keepTabContent\", \"ngClass\", \"ngStyle\", \"tabSelect\", 4, \"ngIf\"], [3, \"animate\", \"keepTabContent\", \"ngClass\", \"ngStyle\", \"tabSelect\"], [3, \"disabled\", 4, \"ngFor\", \"ngForOf\"], [3, \"disabled\"], [\"kendoTabTitle\", \"\"], [4, \"ngIf\"], [\"onerror\", \"this.style.display='none'\", 3, \"src\", \"alt\", 4, \"ngIf\"], [\"onerror\", \"this.style.display='none'\", 3, \"src\", \"alt\"], [3, \"id\"], [\"hiddenTab\", \"\"], [\"kendoTabContent\", \"\"], [1, \"tabpage\", 3, \"ngClass\", \"id\", \"ngStyle\"], [3, \"ngTemplateOutlet\"], [3, \"controls\", \"RemoveControl\"]],\n  template: function TabControlComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, TabControlComponent_kendo_tabstrip_0_Template, 2, 5, \"kendo-tabstrip\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.model);\n    }\n  },\n  directives: [i5$2.TabStripComponent, i5$2.TabStripTabComponent, i2.ContainerComponent, i6.NgIf, i6.NgClass, i6.NgStyle, i6.NgForOf, i5$2.TabTitleDirective, i5$2.TabContentDirective, i6.NgTemplateOutlet],\n  styles: [\".tabpage[_ngcontent-%COMP%]{width:100%;height:100%;position:relative}\"]\n});\n\n__decorate([serverEvent('tcnselchanged', TabControlComponent_1.SelectionChangedArgsExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [SelectEvent]), __metadata(\"design:returntype\", void 0)], TabControlComponent.prototype, \"selected\", null);\n\n__decorate([serverEvent('tcnselchanging', TabControlComponent_1.SelectionChangingArgsExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [SelectEvent]), __metadata(\"design:returntype\", void 0)], TabControlComponent.prototype, \"selectionChanging\", null);\n\n__decorate([serverEvent('tcnclicked', TabControlComponent_1.TabClickedArgsExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], TabControlComponent.prototype, \"clickTab\", null);\n\n__decorate([NotifyChange('SelectedTabIndex'), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], TabControlComponent.prototype, \"selectedIndex\", null);\n\nTabControlComponent = TabControlComponent_1 = __decorate([dataTransfer(['tbCtrl']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, LengthConverter, DataManagerEventService, MainTabOrderService, ContainerControlTabOrderService])], TabControlComponent);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet MDIClientComponent = /*#__PURE__*/(() => {\n  class MDIClientComponent extends BaseControlComponent {\n    /* c8 ignore start */\n    constructor(changeDetector, renderer2, element, emitter, sanitizer, webmapService, lengthConverter) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter);\n      this.changeDetector = changeDetector;\n      this.renderer2 = renderer2;\n      this.element = element;\n      this.emitter = emitter;\n      this.sanitizer = sanitizer;\n      this.webmapService = webmapService;\n    }\n    /* c8 ignore stop */\n\n\n    get mdiStyle() {\n      this.setMyStyle();\n\n      if (this.model.BackColor) {\n        this.style.setBackgroundColor(this.model.BackColor);\n      }\n\n      return this.sanitizer.bypassSecurityTrustStyle(this.style.toString());\n    }\n    /**\r\n     * @description\r\n     * @override\r\n     * It was overridden to avoid class mechanism\r\n     */\n\n\n    ngAfterViewInit() {\n      this.webmapService.core.getEvent().publish(Events.ReloadPendingViews, this.parent);\n    }\n    /**\r\n     * @description\r\n     * Returns the UniqueID of parent form.\r\n     * @returns { string }\r\n     */\n\n\n    get parent() {\n      return this.model.Parent ? this.model.Parent.UniqueID : null;\n    }\n\n  }\n\n  MDIClientComponent.ɵfac = function MDIClientComponent_Factory(t) {\n    return new (t || MDIClientComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(i1$2.DomSanitizer), i0.ɵɵdirectiveInject(i1.WebMapService), i0.ɵɵdirectiveInject(LengthConverter));\n  };\n\n  MDIClientComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MDIClientComponent,\n    selectors: [[\"wm-mdiclient\"]],\n    hostVars: 2,\n    hostBindings: function MDIClientComponent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵstyleMap(ctx.mdiStyle);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[3, \"parentId\"]],\n    template: function MDIClientComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"wm-formscontainer\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"parentId\", ctx.parent);\n      }\n    },\n    directives: [i2.FormsContainerComponent],\n    styles: [\"wm-formscontainer[_ngcontent-%COMP%]{position:absolute;overflow-x:auto;overflow-y:auto;height:100%;width:100%}[_nghost-%COMP%]{flex-grow:1;overflow:hidden}\"]\n  });\n  return MDIClientComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet LineComponent = /*#__PURE__*/(() => {\n  let LineComponent = class LineComponent extends GraphicsComponent {\n    /* c8 ignore start */\n    constructor(changeDetector, renderer2, element, lengthConverter, emitter, mTabOService) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter, mTabOService);\n      this.changeDetector = changeDetector;\n      this.renderer2 = renderer2;\n      this.element = element;\n      this.emitter = emitter;\n      this.mTabOService = mTabOService;\n    }\n    /* c8 ignore stop */\n\n\n    ngOnInit() {\n      super.ngOnInit();\n    }\n    /**\r\n     * Pick between the beginX, beginY, endX and, endY or the X, X2, Y, and Y2 properties on the position object\r\n     * @param choice {string}\r\n     * @returns {{X1: number, X2: number}|{Y1:number, Y2:number}}\r\n     */\n\n\n    choiceXorY(choice) {\n      let aux1 = 0;\n      let aux2 = 0;\n      aux1 = this.model.Position[choice];\n      aux2 = this.model.Position[`${choice}2`];\n      return {\n        [`${choice}1`]: aux1,\n        [`${choice}2`]: aux2\n      };\n    }\n    /**\r\n     * Specifies the X position of one end of the line (the distance from the left edge of the window).\r\n     */\n\n\n    get beginX() {\n      const {\n        X1,\n        X2\n      } = this.choiceXorY('X');\n      return this.islowervalue(X1, X2) ? 0 : this.applyUnits(X1, X2);\n    }\n    /**\r\n     * \tSpecifies the Y position of one end of the line (the distance from the top of the window).\r\n     */\n\n\n    get beginY() {\n      const {\n        Y1,\n        Y2\n      } = this.choiceXorY('Y');\n      return this.islowervalue(Y1, Y2) ? 0 : this.applyUnits(Y1, Y2);\n    }\n    /**\r\n     * \tSpecifies the X2 position of the other end of the line (the distance from the left edge of the window).\r\n     */\n\n\n    get endX() {\n      const {\n        X1,\n        X2\n      } = this.choiceXorY('X');\n      return this.islowervalue(X2, X1) ? 0 : this.applyUnits(X2, X1);\n    }\n    /**\r\n     * \tSpecifies the Y2 position of the other end of the line (the distance from the top of the window).\r\n     */\n\n\n    get endY() {\n      const {\n        Y1,\n        Y2\n      } = this.choiceXorY('Y');\n      return this.islowervalue(Y2, Y1) ? 0 : this.applyUnits(Y2, Y1);\n    }\n    /**\r\n     * Apply percentage or default values\r\n     */\n\n\n    applyUnits(p1, p2) {\n      return this.lengthConverter.isUsePercentage && !(this.emitter && this.emitter.currentDataManagerId) ? '100%' : p1 - p2;\n    }\n    /**\r\n     * Specifies the height of the svg element\r\n     */\n\n\n    get relativeHeight() {\n      return Math.abs(this.beginY - this.endY) || this.lineThickness;\n    }\n    /**\r\n     * Specifies the width of the svg element\r\n     */\n\n\n    get relativeWidth() {\n      return Math.abs(this.beginX - this.endX) || this.lineThickness;\n    }\n    /**\r\n     * Specifies the top of the svg element\r\n     */\n\n\n    get relativeTop() {\n      return Math.min(this.model.Position.Y, this.model.Position.Y2);\n    }\n    /**\r\n     * Specifies the left of the svg element\r\n     */\n\n\n    get relativeLeft() {\n      return Math.min(this.model.Position.X, this.model.Position.X2);\n    }\n    /**\r\n     * Specifies visible property\r\n     */\n\n\n    get lineVisible() {\n      return this.visible ? 'inline' : 'none';\n    }\n    /**\r\n     * Validates lower value between two coordenates\r\n     */\n\n\n    islowervalue(positionF, positionS) {\n      return positionF < positionS;\n    }\n    /**\r\n     * Gets visible size\r\n     * Returns true if the component should  be displayed\r\n     * in the screen.\r\n     */\n\n\n    get visibleSize() {\n      return this.model.Visible;\n    }\n    /**\r\n     * @description\r\n     * Returns a valid style object to\r\n     * be applied according to the styling information set in the\r\n     * control's model\r\n     * @returns { [key: string]: string; }\r\n     */\n\n\n    setMyStyle(style) {\n      style = style || {};\n\n      if (!(this.emitter && this.emitter.currentDataManagerId)) {\n        const heightParent = GetStyleValue.getPositionValue(PositionProperties.HEIGHT, this.model, this.parentElement);\n        const widthParent = GetStyleValue.getPositionValue(PositionProperties.WIDTH, this.model, this.parentElement);\n        style.Height = this.addUnits(this.lengthConverter.convertToPercentage(this.relativeHeight, heightParent));\n        style.Width = this.addUnits(this.lengthConverter.convertToPercentage(this.relativeWidth, widthParent));\n        style.X = this.addUnits(this.lengthConverter.convertToPercentage(this.relativeLeft, widthParent));\n        style.Y = this.addUnits(this.lengthConverter.convertToPercentage(this.relativeTop, heightParent));\n      } else {\n        style.Height = Utils.addPixels(this.relativeHeight);\n        style.Width = Utils.addPixels(this.relativeWidth);\n        style.X = Utils.addPixels(this.relativeLeft);\n        style.Y = Utils.addPixels(this.relativeTop);\n      }\n\n      return this.processStyle(style);\n    }\n\n  };\n\n  LineComponent.ɵfac = function LineComponent_Factory(t) {\n    return new (t || LineComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8));\n  };\n\n  LineComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: LineComponent,\n    selectors: [[\"wm-line\"]],\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 2,\n    vars: 20,\n    consts: [[1, \"svgPosition\", 3, \"ngClass\", \"ngStyle\"]],\n    template: function LineComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelementStart(0, \"svg\", 0);\n        i0.ɵɵelement(1, \"line\");\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵstyleProp(\"width\", ctx.relativeWidth, \"px\")(\"height\", ctx.relativeHeight, \"px\")(\"left\", ctx.relativeLeft, \"px\")(\"top\", ctx.relativeTop, \"px\")(\"display\", ctx.lineVisible);\n        i0.ɵɵproperty(\"ngClass\", ctx.class)(\"ngStyle\", ctx.setMyStyle());\n        i0.ɵɵadvance(1);\n        i0.ɵɵstyleProp(\"stroke\", ctx.lineColor);\n        i0.ɵɵattribute(\"x1\", ctx.beginX)(\"y1\", ctx.beginY)(\"x2\", ctx.endX)(\"y2\", ctx.endY)(\"stroke-width\", ctx.lineThickness)(\"stroke-dasharray\", ctx.svgStyle);\n      }\n    },\n    directives: [i6.NgClass, i6.NgStyle],\n    styles: [\".svgPosition[_ngcontent-%COMP%]{position:absolute}\"]\n  });\n  LineComponent = __decorate([dataTransfer(['lne']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, LengthConverter, DataManagerEventService, MainTabOrderService])], LineComponent);\n  return LineComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar FileExplorerComponent_1;\nlet FileExplorerComponent = FileExplorerComponent_1 = class FileExplorerComponent extends BaseControlComponent {\n  /* c8 ignore start */\n  constructor(changeDetector, renderer2, element, wmService, iconService, http, lengthConverter) {\n    super(changeDetector, renderer2, element, lengthConverter);\n    this.changeDetector = changeDetector;\n    this.renderer2 = renderer2;\n    this.element = element;\n    this.wmService = wmService;\n    this.iconService = iconService;\n    this.http = http;\n    /* c8 ignore stop */\n\n    /**\r\n     * Items for the dropdownlist.\r\n     */\n\n    this.saveOptionsItems = [{\n      text: 'Download to local computer',\n      value: 1\n    }, {\n      text: 'Save to storage',\n      value: 2\n    }];\n    this.orientationPaperOptionsItems = [{\n      text: 'Portrait',\n      value: '0'\n    }, {\n      text: 'Landscape',\n      value: '1'\n    }];\n    this.paperSizeOptionsItems = [{\n      text: 'Letter 8 1/2 x 11 in',\n      value: '0'\n    }, {\n      text: 'LetterSmall 8 1/2 x 11 in',\n      value: '2'\n    }, {\n      text: 'Tabloid 17 x 11 in',\n      value: '3'\n    }, {\n      text: 'Ledger 17 x 11 in',\n      value: '4'\n    }, {\n      text: 'Legal 8 1/2 x 14 in',\n      value: '5'\n    }, {\n      text: 'Statement 5 1/2 x 8 1/2 in',\n      value: '6'\n    }, {\n      text: 'Executive 7 1/4 x 10 1/2 in',\n      value: '7'\n    }, {\n      text: 'A3 297 x 420 mm',\n      value: '8'\n    }, {\n      text: 'A4 210 x 297 mm',\n      value: '9'\n    }, {\n      text: 'A4 Small 210 x 297 mm',\n      value: '10'\n    }, {\n      text: 'A5 148 x 210 mm',\n      value: '11'\n    }, {\n      text: 'B4 250 x 354 mm',\n      value: '12'\n    }, {\n      text: 'B5 182 x 257 mm',\n      value: '13'\n    }, {\n      text: 'Folio 8 1/2 x 13 in',\n      value: '14'\n    }, {\n      text: 'Quarto 215 x 275 mm',\n      value: '15'\n    }, {\n      text: '10x14 in',\n      value: '16'\n    }, {\n      text: '11x17 in',\n      value: '17'\n    }, {\n      text: 'Note 8 1/2 x 11 in',\n      value: '18'\n    }, {\n      text: 'C size sheet',\n      value: '24'\n    }, {\n      text: 'D size sheet',\n      value: '24'\n    }, {\n      text: 'E size sheet',\n      value: '26'\n    }];\n    this.formatOptionsItems = [];\n    this.data = [];\n    this.selectedItemSave = 1;\n    this.fileName = '';\n    this.selectionMode = {\n      mode: 'single'\n    };\n    this.selectedTreeItem = new Dictionary();\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.getItems();\n    this.setupSelectedItemFormat();\n    this.setupPaperSize();\n    this.setupPaperOrientation();\n    this.fillTree();\n  }\n  /**\r\n   * returns the items for the format options in the dropdownlistbox.\r\n   */\n\n\n  getItems() {\n    if (this.model && this.metaData && this.metaData.formats) {\n      this.formatOptionsItems = this.metaData.formats.split(/;/).map(f => {\n        const parts = f.split(/\\|/);\n        return {\n          text: parts[0],\n          value: parts[1]\n        };\n      });\n      this.formatOptionsItems.pop();\n    }\n  }\n  /**\r\n   * variable to display the file_explorer for save or select\r\n   */\n\n\n  get FileExplorerWithInput() {\n    return this.model.name === 'FILE_EXPLORER_WITH_INPUT';\n  }\n  /**\r\n   * text for the window title.\r\n   */\n\n\n  get title() {\n    return this.model.title;\n  }\n  /**\r\n   * Show the input field to write if the value is true\r\n   */\n\n\n  get allowTyping() {\n    return this.model.allowTyping;\n  }\n  /**\r\n   * object that contains the format and dataManagerId\r\n   */\n\n\n  get metaData() {\n    return this.model.metaData;\n  }\n  /**\r\n   * returns true if the model has format\r\n   */\n\n\n  get hasMetaData() {\n    return this.metaData && this.metaData.formats || false;\n  }\n  /**\r\n   * returns showDownloadOption property value.\r\n   */\n\n\n  get showDownloadOption() {\n    return this.model.showDownloadOption;\n  }\n  /**\r\n   * returns paperSize property value.\r\n   */\n\n\n  get paperSize() {\n    return this.model.paperSize;\n  }\n  /**\r\n   * returns paperOrientation property value.\r\n   */\n\n\n  get paperOrientation() {\n    return this.model.paperOrientation;\n  }\n  /**\r\n   * show or hide the window if the model exist and has the visible property\r\n   */\n\n\n  get hasModel() {\n    if (this._model && this.visible) {\n      return true;\n    }\n\n    return false;\n  }\n  /**\r\n   * if the model has metadata and datamanagerId - saveOptions, orientationPaperOptions, paperSizeOptions\r\n   */\n\n\n  get datamanagerDisplayOptions() {\n    return !(this.model.metaData && !this.model.metaData.dataManagerId);\n  }\n  /**\r\n   * show the dropdownlistbox if the model has items\r\n   */\n\n\n  get formatOptions() {\n    return this.metaData && typeof this.metaData.formats === 'string' && this.formatOptionsItems.length > 0;\n  }\n  /**\r\n   * returns true if you want to save the file in the server side\r\n   */\n\n\n  get downloadInServer() {\n    return this.selectedItemSave === 2;\n  }\n  /**\r\n   * returns the class for the icon\r\n   * @param item object that contains the icon name\r\n   */\n\n\n  iconNameClass(item) {\n    const icon = item.selectedIcon ? item.selectedIcon : item.icon;\n\n    switch (icon) {\n      case 'bento-icon-file':\n      case 'bento-icon-file-checked':\n        return 'insert_drive_file';\n\n      case 'bento-icon-folder-open':\n      case 'bento-icon-folder-checked':\n        return 'folder_open';\n    }\n\n    return '';\n  }\n  /**\r\n   * returns true if there is a string in the input field\r\n   */\n\n\n  cannotClose() {\n    return !(typeof this.fileName !== 'undefined' && this.fileName.toString().trim() !== '');\n  }\n  /**\r\n   * the event that is trigger when the selection is change\r\n   * @param item  object event that contains the context of the current item\r\n   */\n\n\n  handleSelection(item) {\n    if (this.selectionMode.mode === 'multiple') {\n      if (this.selectedTreeItem.containsKey(item.index)) {\n        this.selectedTreeItem.remove(item.index);\n      } else {\n        this.selectedTreeItem.add(item.index, item.dataItem.relativePath);\n      }\n    } else {\n      this.selectedTreeItem = new Dictionary();\n      this.selectedTreeItem.add(item.index, item.dataItem.relativePath);\n    }\n  }\n  /**\r\n   * the event that is trigger when a button is clicked\r\n   * @param event object event from angular\r\n   * @param buttonText text that contains the action\r\n   * @param button the number of the button\r\n   * @param download if the file should be download locally\r\n   */\n\n\n  click(event, buttonText, button, download = false) {\n    let url = '';\n    this.fileName = this.FileExplorerWithInput ? this.fileName : '';\n\n    if (download && this.hasMetaData) {\n      const base = window.location.protocol;\n      const host = window.location.host;\n      /* c8 ignore next */\n\n      const subdirectory = this.wmService.config?.baseHref !== undefined && this.wmService.config?.baseHref != '' ? `/` + this.wmService.config.baseHref.replace('/', '').replace('/', '') : ``;\n      const format = this.selectedItemFormat;\n      const paperSize = this.selectedItemPaper;\n      const paperOrientation = this.selectedItemOrientation;\n      const data = this.metaData['dataManagerId'];\n\n      if (data) {\n        if (this.wmService.config.webMapVersion === WMConstants.version4) {\n          url = `${base}//${host}${subdirectory}/dataManagerController/download?dataManagerId=${data}&downloadFormat=${format}`;\n          window.open(url, '_blank');\n        } else {\n          url = `${base}//${host}${subdirectory}/api/dataManagerController/customDownload/${data}?downloadFormat=${format}&paperSize=${paperSize}&paperOrientation=${paperOrientation}`;\n          const httpOptions = {\n            headers: {\n              Accept: 'application/pdf',\n              'Cache-Control': 'no-cache',\n              'Content-Type': 'application/pdf',\n              Pragma: 'no-cache',\n              'WM-API': 'true'\n            },\n            responseType: 'blob'\n          };\n          this.http.get(url, httpOptions).subscribe(response => {\n            const localPdf = window.URL.createObjectURL(new Blob([response], {\n              type: 'application/pdf'\n            }));\n            window.open(localPdf);\n          });\n        }\n      }\n    }\n\n    setTimeout(() => {\n      if (this.wmService.config.webMapVersion === WMConstants.version4) {\n        const commandV4 = this.generateCommand(buttonText);\n        this.wmService.invoke(commandV4);\n      } else {\n        const args = [{\n          Id: this.id,\n          MapperId: 'FlEpr'\n        }, {\n          MapperId: FileExplorerComponent_1.messageBoxClickEventArgsId,\n          dialogResult: button,\n          buttonText,\n          fileName: this.fileName,\n          path: this.selectedTreeItem.values(),\n          format: this.selectedItemFormat\n        }];\n        this.wmService.invoke(new SendV5(this, 'Click', this.id, 'Click', args));\n      }\n\n      this.visible = false;\n    }, 300);\n  }\n  /**\r\n   * event to generate the PrintAction\r\n   * @param buttonText button text\r\n   */\n\n\n  generateCommand(buttonText) {\n    switch (buttonText) {\n      case 'save':\n        return this.generateSave();\n\n      case 'download':\n        return this.generateDownload();\n\n      case 'cancel':\n        return this.generateCancel();\n\n      case 'select':\n        return this.generateSelect();\n    }\n\n    return this.generateCancel();\n  }\n  /**\r\n   * generate the printAction for the select\r\n   */\n\n\n  generateSelect() {\n    const path = this.selectedTreeItem.values().length > 0 ? this.selectedTreeItem.values()[0] : null;\n    return new PrintAction('ok', 1, path, null, null);\n  }\n  /**\r\n   * generate the printAction for the cancel\r\n   */\n\n\n  generateCancel() {\n    const path = this.selectedTreeItem.values().length > 0 ? this.selectedTreeItem.values()[0] : '\\\\';\n    return new PrintAction('cancel', 0, path, this.fileName, null);\n  }\n  /**\r\n   * generate the printAction for the download\r\n   */\n\n\n  generateDownload() {\n    const path = this.selectedTreeItem.values().length > 0 ? this.selectedTreeItem.values()[0] : '\\\\\\\\';\n    return new PrintAction('download', 1, `${path}${this.fileName}`, this.fileName, this.selectedItemFormat);\n  }\n  /**\r\n   * generate the printAction for the save\r\n   */\n\n\n  generateSave() {\n    let result = this.selectedTreeItem.values().length > 0 ? this.selectedTreeItem.values()[0] : undefined;\n\n    if (typeof result === 'undefined' || result.toString().trim() === '') {\n      result = `\\\\${this.fileName}`;\n    } else {\n      let rootFileName = result.toString().trim();\n      rootFileName = rootFileName.replace(/[\\/\\\\]$/, '');\n      result = `${rootFileName}\\\\${this.fileName}`;\n    }\n\n    return new PrintAction('ok', 1, result, this.fileName, this.selectedItemFormat);\n  }\n  /**\r\n   * @description\r\n   * Gets iconclass from icon service\r\n   * @returns {string}\r\n   */\n\n\n  get iconClass() {\n    return this.iconService.iconClass;\n  }\n  /**\r\n   * get the items for the tree\r\n   */\n\n\n  fillTree() {\n    if (this.model && this.model.data) {\n      this.data = JSON.parse(this.model.data);\n    }\n  }\n  /**\r\n   * select the first option for the format dropdownlistbox if there are items\r\n   */\n\n\n  setupSelectedItemFormat() {\n    if (this.formatOptionsItems.length > 0) {\n      this.selectedItemFormat = this.formatOptionsItems[0].value;\n    }\n  }\n  /**\r\n   * select the first option for the paper size dropdownlistbox if there are items\r\n   */\n\n\n  setupPaperSize() {\n    if (this.model.paperSize !== '0') {\n      this.selectedItemPaper = this.model.paperSize;\n    } else if (this.paperSizeOptionsItems.length > 0) {\n      this.selectedItemPaper = this.paperSizeOptionsItems[0].value;\n    }\n  }\n  /**\r\n   * select the first option for the paper orientation dropdownlistbox if there are items\r\n   */\n\n\n  setupPaperOrientation() {\n    if (this.model.paperOrientation !== '0') {\n      this.selectedItemOrientation = this.model.paperOrientation;\n    } else if (this.orientationPaperOptionsItems.length > 0) {\n      this.selectedItemOrientation = this.orientationPaperOptionsItems[0].value;\n    }\n  }\n\n};\nFileExplorerComponent.messageBoxClickEventArgsId = 'FlEprArgs';\n\nFileExplorerComponent.ɵfac = function FileExplorerComponent_Factory(t) {\n  return new (t || FileExplorerComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.WebMapService), i0.ɵɵdirectiveInject(IconsService), i0.ɵɵdirectiveInject(i1$1.HttpClient), i0.ɵɵdirectiveInject(LengthConverter));\n};\n\nFileExplorerComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: FileExplorerComponent,\n  selectors: [[\"wm-file-explorer\"]],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngIf\"], [3, \"width\", \"ngClass\", \"ngStyle\", 4, \"ngIf\"], [3, \"width\", \"ngClass\", \"ngStyle\"], [1, \"custom-title-bar\"], [1, \"k-window-title\"], [1, \"content\"], [\"class\", \"SaveOptions\", 4, \"ngIf\"], [\"class\", \"Message\", 4, \"ngIf\"], [\"class\", \"DisplayData\", 4, \"ngIf\"], [\"class\", \"OrientationOptions\", 4, \"ngIf\"], [\"class\", \"PaperSizeOptions\", 4, \"ngIf\"], [\"class\", \"FormatOptions\", 4, \"ngIf\"], [\"kendoButton\", \"\", \"class\", \"k-button\", 3, \"disabled\", \"click\", 4, \"ngIf\"], [\"kendoButton\", \"\", \"class\", \"k-button\", 3, \"click\", 4, \"ngIf\"], [\"kendoButton\", \"\", 1, \"k-button\", 3, \"click\"], [1, \"SaveOptions\"], [\"tabindex\", \"0\", 1, \"k-label\"], [\"textField\", \"text\", \"valueField\", \"value\", 3, \"data\", \"valuePrimitive\", \"ngModel\", \"ngModelChange\"], [1, \"Message\"], [1, \"DisplayData\"], [1, \"TreeContent\"], [\"textField\", \"text\", \"kendoTreeViewExpandable\", \"\", \"kendoTreeViewHierarchyBinding\", \"\", \"childrenField\", \"nodes\", 3, \"nodes\", \"selectionChange\"], [\"kendoTreeViewNodeTemplate\", \"\"], [\"kendoTextBox\", \"\", 3, \"ngModel\", \"ngModelChange\"], [3, \"ngClass\"], [1, \"OrientationOptions\"], [1, \"PaperSizeOptions\"], [1, \"FormatOptions\"], [\"kendoButton\", \"\", 1, \"k-button\", 3, \"disabled\", \"click\"]],\n  template: function FileExplorerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, FileExplorerComponent_div_0_Template, 3, 2, \"div\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.hasModel);\n    }\n  },\n  directives: [i13.DialogComponent, i13.DialogTitleBarComponent, i6$1.DropDownListComponent, i9$2.TreeViewComponent, i13.DialogActionsComponent, i6.NgIf, i6.NgClass, i6.NgStyle, i9.NgControlStatus, i9.NgModel, i9$2.ExpandDirective, i9$2.HierarchyBindingDirective, i9$2.NodeTemplateDirective, i5$1.TextBoxDirective, i9.DefaultValueAccessor, i6$2.ButtonDirective],\n  styles: [\".SaveOptions[_ngcontent-%COMP%]{width:90%;padding:2% 5%}.SaveOptions[_ngcontent-%COMP%] > kendo-dropdownlist[_ngcontent-%COMP%]{width:100%;margin:auto}.OrientationOptions[_ngcontent-%COMP%]{width:90%;padding:2% 5%}.OrientationOptions[_ngcontent-%COMP%] > kendo-dropdownlist[_ngcontent-%COMP%]{width:100%;margin:auto}.PaperSizeOptions[_ngcontent-%COMP%]{width:90%;padding:2% 5%}.PaperSizeOptions[_ngcontent-%COMP%] > kendo-dropdownlist[_ngcontent-%COMP%]{width:100%;margin:auto}.DisplayData[_ngcontent-%COMP%]{width:90%;padding:2% 5%}.DisplayData[_ngcontent-%COMP%] > input[_ngcontent-%COMP%]{width:100%;border-color:#464444;margin:2% 0}.DisplayData[_ngcontent-%COMP%] > kendo-treeview[_ngcontent-%COMP%]{width:100%;height:250px;border-color:#414141;margin:auto}.FormatOptions[_ngcontent-%COMP%]{width:90%;padding:2% 5%}.FormatOptions[_ngcontent-%COMP%] > kendo-dropdownlist[_ngcontent-%COMP%]{width:100%;margin:auto}.TreeContent[_ngcontent-%COMP%]{border:1px solid #414141;height:200px;overflow-y:auto}.Message[_ngcontent-%COMP%]{color:red;padding:0% 5%;width:90%}\"],\n  changeDetection: 0\n});\nFileExplorerComponent = FileExplorerComponent_1 = __decorate([dataTransfer(['FlEpr']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, WebMapService, IconsService, HttpClient, LengthConverter])], FileExplorerComponent);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MenuComponent = /*#__PURE__*/(() => {\n  let MenuComponent = class MenuComponent extends MenuBaseComponent {\n    /**\r\n     * Constructor for the menu component\r\n     * @param changeDetector service to track the change in the model\r\n     * @param service service to use the Mobilize core\r\n     */\n\n    /* c8 ignore start */\n    constructor(changeDetector, renderer2, element, service, emitter, menuService, activeWindow, lengthConverter, hotKeysCommandService) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter);\n      this.changeDetector = changeDetector;\n      this.renderer2 = renderer2;\n      this.element = element;\n      this.service = service;\n      this.emitter = emitter;\n      this.menuService = menuService;\n      this.activeWindow = activeWindow;\n      this.hotKeysCommandService = hotKeysCommandService;\n      /**\r\n       * object with id of the first toolbar\r\n       */\n\n      this.menuIds = {};\n      /**\r\n       * Array with current  toolbars\r\n       */\n\n      this.multitoolbar = []; // Holds the old component id\n\n      this.oldId = '';\n      this.ToolBarClicked = new EventEmitter();\n      this.ToolBarMouseOverClicked = new EventEmitter();\n      this.ToolBarMouseOutClicked = new EventEmitter();\n      this.MenuItemMouseOver = new EventEmitter();\n      this.MenuItemMouseOut = new EventEmitter();\n      /**\r\n       *  Selected index changed for MenuCombo items.\r\n       */\n\n      this.SelectedIndexChanged = new EventEmitter();\n    }\n    /**\r\n     * \tSpecifies the text that displays as the title for the SheetBar when it is floating.\r\n     *  This property belongs to application object and is handled by changeMenuHandler command!\r\n     */\n\n\n    get toolbarSheetTitle() {\n      return this.model.ToolBarSheetTitle;\n    }\n    /**\r\n     * \tSpecifies the text that displays as the title for the FrameBar when it is floating.\r\n     *  This  property belongs to application object and is handled by changeMenuHandler command!\r\n     */\n\n\n    get toolbarFrameTitle() {\n      return this.model.ToolBarFrameTitle;\n    }\n    /**\r\n     * Validates  ToolbarFrameTitle and ToolbarSheetTitle.\r\n     */\n\n\n    validateTitles() {\n      if (this.toolbarSheetTitle || this.toolbarFrameTitle) {\n        return this.toolbarSheetTitle === this.toolbarFrameTitle;\n      }\n\n      return false;\n    }\n\n    ngDoCheck() {\n      if (this.refresh) {\n        // In case we want to update an internal item of the menu.\n        if (this.id === this.oldId) {\n          this.refreshCurrentMenu();\n        } else {\n          // In case a new window is opened then we need to rebuild the menu with a new model data\n          this.oldId = this.id;\n          this.applyFetchdata();\n        }\n\n        this.refresh = false;\n      }\n    }\n    /**\r\n     *  Method called by the Angular lifecycle hook\r\n     */\n\n\n    ngOnInit() {\n      super.ngOnInit();\n      this.items = [];\n      this.applyFetchdata();\n      this.oldId = this.id;\n      this.refresh = false;\n    }\n    /*\r\n     * Request the new data from the web Service and update the component.\r\n     */\n\n\n    applyFetchdata() {\n      this.removeHotKeys();\n      setTimeout(() => {\n        const data = this.itemsExtractor(this.model);\n        this.items = data.menuItems;\n        this.updateToolbars(data);\n        this.createWindowsOpenedItems();\n        this.detectChanges();\n      }, 100);\n    }\n    /**\r\n     * Refresh current menu\r\n     */\n\n\n    refreshCurrentMenu() {\n      this.removeHotKeys();\n      setTimeout(() => {\n        const data = this.menuService.refreshCurrentMenu(this.model, this.items, this.hotKeysCommandService, this);\n        this.updateToolbars(data);\n        this.detectChanges();\n      }, 100);\n    }\n\n    removeHotKeys() {\n      const removeData = {\n        keys: [],\n        component: this,\n        item: null,\n        removed: true\n      };\n      this.hotKeysCommandService.sendMessage(removeData);\n    }\n    /**\r\n     * Returns datasource items\r\n     * @param model  component model\r\n     */\n\n\n    itemsExtractor(model) {\n      return this.menuService.updateMenu(model, this.hotKeysCommandService, this);\n    }\n    /**\r\n     * Trigger the click event on first update to validate\r\n     * user options or new visibilities changed\r\n     * @param event the current MenuEvent\r\n     */\n\n\n    openItem(event) {\n      this.onClicked(event);\n    }\n    /**\r\n     * Gets the position of parent menu where the new item will be added\r\n     * If position is 0 or greater than the number of items on the menu bar, PowerBuilder\r\n     * appends the name of the sheet to the next-to-last menu item in the menu bar\r\n     * @param currentWindow The window object to be added\r\n     * @param menuItems The array of menu items\r\n     * @returns The index of the parent menu where the option will be added\r\n     */\n\n\n    getPositionParentMenu(currentWindow, menuItems) {\n      return currentWindow.menuPosition === 0 || currentWindow.menuPosition > menuItems.length ? menuItems.length - 2 : menuItems.length - 1;\n    }\n    /**\r\n     * True if the window id is the same id in the activeWindow service, otherwise false\r\n     * @param currentWindowId The window id\r\n     */\n\n\n    isActiveWindow(currentWindowId) {\n      return currentWindowId === this.activeWindow.getActiveWindow();\n    }\n    /**\r\n     * Trigger the Click event when a menu item was clicked.\r\n     */\n\n\n    onClicked(event) {\n      const item = event.item;\n      this.currentItem = event.item; // if it is not a menu-item for windows list\n\n      if (item.relatedWindow == null) {\n        this.Clicked.emit(new EventData(event, item.id, item.mapperId));\n        return false;\n      } else {\n        // if it is a menu-item for windows list then set focus to windows\n        item.relatedWindow.applyFocus();\n        return true;\n      }\n    }\n    /**\r\n     * Trigger SelectedIndexChanged event for MenuCombo item.\r\n     */\n\n\n    selectionChange(event, item) {\n      this.currentItem = item;\n      this.SelectedIndexChanged.emit(new EventData(event, item.id, item.mapperId));\n    }\n    /**\r\n     * Trigger toolBarClickedHandler event for ToolBar item.\r\n     */\n\n\n    toolBarClickedHandler(event) {\n      this.ToolBarClicked.emit(event);\n    }\n    /**\r\n     * Trigger toolBarMouseOverClickedHandler event for ToolBar item.\r\n     */\n\n\n    toolBarMouseOverClickedHandler(event) {\n      this.ToolBarMouseOverClicked.emit(event);\n    }\n    /**\r\n     * Trigger toolBarMouseOutClickedHandler event for ToolBar item.\r\n     */\n\n\n    toolBarMouseOutClickedHandler(event) {\n      this.ToolBarMouseOutClicked.emit(event);\n    }\n    /**\r\n     * Trigger menuItemMouseover event for Menu item.\r\n     */\n\n\n    menuMouseOver(item) {\n      if (item && item.items && item.items.length === 0) {\n        this.MenuItemMouseOver.emit(item);\n      }\n    }\n    /**\r\n     * Trigger menuItemMouseOut event for Menu item.\r\n     */\n\n\n    menuMouseOut(item) {\n      if (item && item.items && item.items.length === 0) {\n        this.MenuItemMouseOut.emit(item);\n      }\n    }\n    /**\r\n     * Gets whether true when the menu has items\r\n     */\n\n\n    get hasItems() {\n      return this.items.length > 0;\n    }\n    /**\r\n     * Toggles menu item\r\n     * @param menuId Menu item id\r\n     */\n\n\n    toggleMenu(menuId) {\n      const popItem = this.items.find(item => item.id === menuId); // Adding setTimeout to wait the 100 ms of CHANGE_FOCUSED_CONTROL\n\n      setTimeout(() => {\n        if (popItem) {\n          const index = (popItem.index - 1).toString(); // Show popup menu\n\n          this.kendoMenu.toggle(true, index); // Set focus to first element of popup menu\n\n          this.kendoMenu.focus(`${index}_0`);\n        }\n      }, 100);\n    }\n    /**\r\n     * Updates toolbars elements\r\n     * @param data The current retrieved data from model\r\n     */\n\n\n    updateToolbars(data) {\n      if (!this.validateTitles() && this.model.isChild === undefined && (this.multitoolbar.length === 0 || this.menuIds[this.id])) {\n        this.toolbarVisible ? this.toolbarModel = this.menuIds[String(this.id)] = this.multitoolbar[0] = data.toolbarItems : this.multitoolbar[0] = data.toolbarItems;\n        this.multitoolbarModel = this.multitoolbar[1] = null;\n      } else {\n        this.IdSecondToolbar = this.id;\n        this.multitoolbarModel = this.multitoolbar[1] = data.toolbarItems;\n      }\n    }\n    /**\r\n     * Creates the items to be added into the list of windows opened menu\r\n     */\n\n\n    createWindowsOpenedItems() {\n      const arrayItems = this.items;\n      /* c8 ignore else */\n\n      if (arrayItems && arrayItems.length > 1) {\n        // Check if menu has at least two menu options\n        // Getting the windows that must be added in the menu\n        const openWinArray = this.activeWindow.getOpenedWindowsForMenu();\n        /* c8 ignore else */\n\n        if (openWinArray && openWinArray.length > 0) {\n          let winItem = null;\n          openWinArray.forEach((element, index) => {\n            const parentIdx = this.getPositionParentMenu(element, arrayItems); // Add the separator item\n\n            if (index === 0) {\n              winItem = new MenuItem(createNodeMenuItem('-', index, false));\n              arrayItems[parentIdx].items.push(winItem);\n            } // Add the new window item\n\n\n            winItem = new MenuItem(createNodeMenuItem(`${index + 1} ${element.title}`, index, this.isActiveWindow(element.id)));\n            winItem.relatedWindow = element;\n            arrayItems[parentIdx].items.push(winItem);\n          });\n          this.detectChanges();\n        }\n      }\n    }\n\n  };\n\n  MenuComponent.ɵfac = function MenuComponent_Factory(t) {\n    return new (t || MenuComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.WebMapService), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MenuChildrenService), i0.ɵɵdirectiveInject(ActiveWindowService), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(HotKeysCommandService));\n  };\n\n  MenuComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MenuComponent,\n    selectors: [[\"wm-menu\"]],\n    viewQuery: function MenuComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(MenuComponent$1, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.kendoMenu = _t.first);\n      }\n    },\n    inputs: {\n      toolbarVisibleInternal: \"toolbarVisibleInternal\"\n    },\n    outputs: {\n      ToolBarClicked: \"ToolBarClicked\",\n      ToolBarMouseOverClicked: \"ToolBarMouseOverClicked\",\n      ToolBarMouseOutClicked: \"ToolBarMouseOutClicked\",\n      MenuItemMouseOver: \"MenuItemMouseOver\",\n      MenuItemMouseOut: \"MenuItemMouseOut\",\n      SelectedIndexChanged: \"SelectedIndexChanged\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 3,\n    consts: [[3, \"items\", \"id\", \"open\", \"select\", 4, \"ngIf\"], [3, \"toolbarModel\", \"id\", \"clicked\", \"ToolBarMouseOver\", \"ToolBarMouseOut\", 4, \"ngIf\"], [3, \"toolbarModel\", \"id\", 4, \"ngIf\"], [3, \"items\", \"id\", \"open\", \"select\"], [\"kendoMenuItemTemplate\", \"\"], [3, \"ngClass\", \"wmDisabledItem\", 4, \"ngIf\"], [3, \"ngClass\", \"wmDisabledItem\"], [2, \"width\", \"100%\"], [\"class\", \"left\", 3, \"src\", 4, \"ngIf\"], [\"id\", \"itemMenu\", 1, \"left\", 3, \"mouseover\", \"mouseout\"], [4, \"ngIf\"], [1, \"right\"], [1, \"left\", 3, \"src\"], [3, \"toolbarModel\", \"id\", \"clicked\", \"ToolBarMouseOver\", \"ToolBarMouseOut\"], [3, \"toolbarModel\", \"id\"]],\n    template: function MenuComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, MenuComponent_kendo_menu_0_Template, 2, 2, \"kendo-menu\", 0);\n        i0.ɵɵtemplate(1, MenuComponent_wm_toolbar_1_Template, 1, 2, \"wm-toolbar\", 1);\n        i0.ɵɵtemplate(2, MenuComponent_wm_toolbar_2_Template, 1, 2, \"wm-toolbar\", 2);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.model);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.toolbarModel);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.multitoolbarModel && ctx.toolbarVisibleInternal);\n      }\n    },\n    directives: [i6$4.MenuComponent, ToolbarComponent, i6.NgIf, i6$4.ItemTemplateDirective, i6.NgClass, DisabledItemDirective],\n    styles: [\"wm-menu .k-widget{height:auto;z-index:10500!important}  wm-menu .k-menu .k-item>.k-link{padding-top:0;padding-bottom:0}.before[_ngcontent-%COMP%]{width:100%;height:100%;text-align:center;display:contents}.above[_ngcontent-%COMP%]{width:100%;height:100%;text-align:center}.left[_ngcontent-%COMP%]{float:left}.minWidth[_ngcontent-%COMP%]{min-width:80px;width:100%}.right[_ngcontent-%COMP%]{text-align:right}\"],\n    changeDetection: 0\n  });\n\n  __decorate([serverEvent('clicked', MenuEventsExtractors.menuItemClickEventArgsExtractor, MenuEventsExtractors.menuItemExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", Boolean)], MenuComponent.prototype, \"onClicked\", null);\n\n  __decorate([serverEvent('selected', MenuEventsExtractors.comboItemSelectedIndexChangedEventArgsExtractor, MenuEventsExtractors.menuItemExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object, Object]), __metadata(\"design:returntype\", void 0)], MenuComponent.prototype, \"selectionChange\", null);\n\n  MenuComponent = __decorate([dataTransfer(['mnu']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, WebMapService, DataManagerEventService, MenuChildrenService, ActiveWindowService, LengthConverter, HotKeysCommandService])], MenuComponent);\n  return MenuComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet PBWindowBaseComponent = /*#__PURE__*/(() => {\n  class PBWindowBaseComponent extends PBControlContainerComponent {\n    constructor() {\n      super(...arguments);\n      /** Output event */\n\n      this.Close = new EventEmitter();\n      this.Resize = new EventEmitter();\n      /**\r\n       * Output event emitter to expose the menu actions of the\r\n       * current window\r\n       */\n\n      this.MenuClick = new EventEmitter();\n      this.ToolBarClicked = new EventEmitter();\n      this.ToolBarMenuItemMouseOver = new EventEmitter();\n      this.ToolBarMenuItemMouseOut = new EventEmitter();\n      this.MenuMouseOver = new EventEmitter();\n      this.MenuMouseOut = new EventEmitter();\n      /** Determines whether the windows is draggable */\n\n      this.isDraggable = true;\n      /** Determines wich keys are default, so they can be verified */\n\n      this.defaultKeys = new Dictionary$1();\n      /**\r\n       * Values for tests\r\n       */\n\n      this.hotKeyListeners = new Dictionary$1();\n      this.menuHotKeys = new Dictionary$1();\n      /** Contains the shortcut events of the document */\n\n      this.shortcuts = new Dictionary$1();\n      /** it will call events */\n\n      this.activeEmitter = new EventEmitter();\n      /* Indicates if the window is currently being dragged */\n\n      this.dragged = false;\n      /**\r\n       * The height in PB source code for title bar\r\n       */\n\n      this.titleBarHeight = 26;\n      /**\r\n       * The height in PB source code for menu\r\n       */\n\n      this.menuHeight = 19;\n      /**\r\n       * Auto focused element, defining a dummy selector that never\r\n       * is going to retrieve a DOM element produces that Kendo Window\r\n       * doesn't autofocus the window in ngAfterViewInit. It avoids problems\r\n       * when a window is opened at the same time that a MessageBox and focus\r\n       * is missing of MessageBox buttons.\r\n       */\n\n      this.autoFocusedElement = '.none';\n    }\n\n  }\n\n  PBWindowBaseComponent.ɵfac = /* @__PURE__ */function () {\n    let ɵPBWindowBaseComponent_BaseFactory;\n    return function PBWindowBaseComponent_Factory(t) {\n      return (ɵPBWindowBaseComponent_BaseFactory || (ɵPBWindowBaseComponent_BaseFactory = i0.ɵɵgetInheritedFactory(PBWindowBaseComponent)))(t || PBWindowBaseComponent);\n    };\n  }();\n\n  PBWindowBaseComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: PBWindowBaseComponent,\n    selectors: [[\"ng-component\"]],\n    contentQueries: function PBWindowBaseComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, TemplateRef, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.parentTemplate = _t.first);\n      }\n    },\n    viewQuery: function PBWindowBaseComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(WindowComponent, 5);\n        i0.ɵɵviewQuery(_c71, 5);\n        i0.ɵɵviewQuery(_c72, 5);\n        i0.ɵɵviewQuery(_c73, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.kendoWindow = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.windowContent = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.wmMenu = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.blockUI = _t.first);\n      }\n    },\n    outputs: {\n      Close: \"Close\",\n      Resize: \"Resize\",\n      MenuClick: \"MenuClick\",\n      ToolBarClicked: \"ToolBarClicked\",\n      ToolBarMenuItemMouseOver: \"ToolBarMenuItemMouseOver\",\n      ToolBarMenuItemMouseOut: \"ToolBarMenuItemMouseOut\",\n      MenuMouseOver: \"MenuMouseOver\",\n      MenuMouseOut: \"MenuMouseOut\"\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 0,\n    vars: 0,\n    template: function PBWindowBaseComponent_Template(rf, ctx) {},\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return PBWindowBaseComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet PBWindowComponent = /*#__PURE__*/(() => {\n  class PBWindowComponent extends PBWindowBaseComponent {\n    /* c8 ignore start */\n    constructor(detector, render, elem, lengthConverter, emmit, zIndexService, hotKeysCommandService, resizeDataManagerService, focusManagerService, wmService, activeWindow, windowFocusElementService, mTOService, acceleratorService, buttonsService, tabPageOrderService) {\n      super(detector, render, elem, lengthConverter, emmit, mTOService, tabPageOrderService);\n      this.detector = detector;\n      this.render = render;\n      this.emmit = emmit;\n      this.zIndexService = zIndexService;\n      this.hotKeysCommandService = hotKeysCommandService;\n      this.resizeDataManagerService = resizeDataManagerService;\n      this.focusManagerService = focusManagerService;\n      this.wmService = wmService;\n      this.activeWindow = activeWindow;\n      this.windowFocusElementService = windowFocusElementService;\n      this.mTOService = mTOService;\n      this.acceleratorService = acceleratorService;\n      this.buttonsService = buttonsService;\n      this.tabPageOrderService = tabPageOrderService;\n    }\n\n    static resizeArgsExtractor(event, component) {\n      /* c8 ignore else */\n      if (!event) {\n        event = {\n          sizeType: 0\n        };\n      }\n\n      if (WebMapService.currentService.config.webMapVersion === WMConstants.version4) {\n        return [{\n          sizeType: event.sizeType\n        }, {\n          newwidth: component.kendoWindow.width\n        }, {\n          newheight: component.kendoWindow.height\n        }];\n      } else {\n        return [event.sizeType, component.kendoWindow.width, component.kendoWindow.height];\n      }\n    }\n    /**\r\n     * returns the property from the model for the HScrollBar\r\n     */\n\n\n    get hScrollBar() {\n      return !!this.model.HScrollBar;\n    }\n    /**\r\n     * returns the property from the model for the VScrollBar\r\n     */\n\n\n    get vScrollBar() {\n      return !!this.model.VScrollBar;\n    }\n    /**\r\n     * Custom  variable created to solve  Toolbar hiding on run time, this variable is setted from changemenustateHandler on core.\r\n     */\n\n\n    get toolbarVisibleInternal() {\n      return this.model.toolbarVisibleInternal === undefined || this.model.toolbarVisibleInternal === true;\n    }\n    /**\r\n     * Gets resizable value as a property\r\n     */\n\n\n    get resizable() {\n      return this.model ? !!this.model.Resizable : true;\n    }\n    /**\r\n     * Gets window content div. It is the div element defined\r\n     * in migrated application.\r\n     */\n\n\n    get windowContentDiv() {\n      return this.windowContent && this.windowContent.nativeElement ? this.windowContent.nativeElement.lastElementChild : null;\n    }\n    /* Handles the DragStart event */\n\n\n    onDragStart(evt) {\n      this.dragged = true;\n    }\n    /* Handles the DragEnd event */\n\n\n    onDragEnd(evt) {\n      this.x = this.kendoWindow.left;\n      this.y = this.kendoWindow.top;\n      this.dragged = false;\n    }\n    /**\r\n     * Apply focus to the window\r\n     */\n\n\n    applyFocus() {\n      /* c8 ignore else */\n      if (this.kendoWindow !== undefined) {\n        this.kendoWindow.bringToFront();\n        this.kendoWindow.focus();\n        this.processFocusIn(null);\n        const component = this.windowFocusElementService.getWindowFocusElement(); // If the component is a column apply focus to DataManagerControl to be\n        // consistent with currentRow and currentControlName values.\n\n        if (component instanceof ColumnControlComponent) {\n          const dataManagerId = getDataManagerId(component);\n          /* c8 ignore else */\n\n          if (dataManagerId) {\n            const dataManagerControlInstance = this.mTOService.getComponentById(dataManagerId);\n            dataManagerControlInstance?.applyFocus();\n          }\n        } else {\n          component?.applyFocus();\n        }\n      }\n    }\n\n    ngOnInit() {\n      this.defaultKeys.add('Ctrl', 'control');\n      this.defaultKeys.add('Shift', 'shift');\n      this.defaultKeys.add('Alt', 'alt');\n      this.defaultKeys.add('Ins', 'insert');\n      this.defaultKeys.add('Del', 'delete');\n      this.subscription = this.hotKeysCommandService.getMessage().subscribe(data => this.processNewHotKeys(data));\n      this.hotKeysCommandService.mdiWindowsService.addNewMDIWindow(this);\n\n      if (!this.activated) {\n        this.activeEvent();\n        this.activated = true;\n      }\n\n      this.dcToken = WebMapService.currentService.core.getEvent().subscribe('detectChanges', () => {\n        this.detectChanges();\n      });\n      this.acceleratorSubscribtion = this.render.listen(document.body, 'keydown', event => {\n        if (this.activeWindow.isActiveWindow(this.id) && event.altKey && event.keyCode !== 18) {\n          this.acceleratorService.resolveShortCut(event);\n        }\n      });\n\n      if (this.mdiWindowType()) {\n        // Arrange Window is only for MDI\n        this.token = WebMapService.currentService.core.getEvent().subscribe('arrangeWindow', event => {\n          this.activeWindow.arrangeWindow(event);\n        });\n      }\n    }\n    /**\r\n     * Avoid showing the browser´s context menu\r\n     * @param event the current context menu event\r\n     */\n\n\n    contextMenuHandler(event) {\n      /* c8 ignore else */\n      if (!event.spellchecker && !WebMapService.currentService.config.showBrowserContextMenu) {\n        Utils.preventPropagation(event);\n      }\n    }\n    /**\r\n     * Actives event called before the window becomes active\r\n     */\n\n\n    activeEvent() {\n      this.activeEmitter.emit();\n    }\n\n    ngOnDestroy() {\n      clearTimeout(this.positionTimeout);\n      this.activated = false;\n      this.activeWindow.closeWindow(this);\n      this.removeInstances(); // we assume that after closing a window, a ChangeMenuCommand will always come,\n      // also, the ngOnDestroy method should be execute before the refresh = true of the changeMenuCommand\n\n      if (this.model.ParentWindow) {\n        this.resetParent();\n      }\n\n      this.hotKeysCommandService.mdiWindowsService.removeMDIWindow(this);\n\n      if (this.wmService) {\n        this.wmService.core.getEvent().unSubscribe(this.token);\n        this.wmService.core.getEvent().unSubscribe(this.dcToken);\n      }\n\n      if (this.acceleratorSubscribtion) {\n        this.acceleratorSubscribtion();\n      }\n\n      this.buttonsService.removeRegisters();\n    }\n\n    processNewHotKeys(data) {\n      data.removed ? this.removeHotKeys(data) : this.proccessHotKeys(data);\n    }\n\n    removeHotKeys(data) {\n      const hotKeyListener = this.shortcuts.values();\n\n      if (hotKeyListener && hotKeyListener.length > 0) {\n        this.removeInstances();\n      }\n    }\n\n    proccessHotKeys(data) {\n      if (this.isValidWindow()) {\n        const keys = data.keys;\n        let combination = 'keydown';\n\n        for (const key of keys) {\n          const isModifierKey = this.defaultKeys.containsKey(key);\n          combination += isModifierKey ? `.${this.defaultKeys.value(key)}` : `.${key}`;\n        }\n\n        this.shouldRemoveInstance(data);\n\n        if (keys.length > 0 && !this.shortcuts.containsKey(combination)) {\n          this.registerShortcutEvent(combination, data);\n        }\n      }\n    }\n\n    ngAfterViewInit() {\n      super.ngAfterViewInit();\n      this.activeWindow.setActiveWindow(this);\n      this.checkInnerMenuWindow();\n      this.setSameZIndex();\n      this.allowContentScroll();\n      this.positionTimeout = setTimeout(() => {\n        this.defineInitialPosition();\n        this.defineWindowState();\n        this.triggerResizeEvent();\n        this.changeMenuHandler(undefined);\n      }, 150);\n      this.focusManagerService.clearFocusedComponent();\n      this.render.listen(this.el.nativeElement, 'focusin', e => {\n        this.processFocusIn(e);\n      });\n    }\n\n    processFocusIn(e) {\n      Utils.preventPropagation(e);\n      this.activeWindow.setActiveWindow(this);\n      this.changeMenuHandler(null);\n    }\n    /**\r\n     * This method checks if the current window is a main or a child\r\n     * window and if it has a menu to be displayed inside (it is not\r\n     * inside of MDI) and add required css classes to improve layout\r\n     */\n\n\n    checkInnerMenuWindow() {\n      if ((this.mainWindowType() || this.childWindowType()) && this.menu && !this.isOpenSheet() && this.el) {\n        const windowCont = this.el.nativeElement.querySelector('.k-content');\n        /* c8 ignore else */\n\n        if (windowCont) {\n          this.render.addClass(windowCont, 'mainChildMenuContent');\n        }\n      }\n    }\n    /**\r\n     * This method hide or set auto the scroll for the Window-Content when the properties are true\r\n     */\n\n\n    allowContentScroll() {\n      const contentElement = this.el.nativeElement.querySelector('.contentflow');\n\n      if (contentElement) {\n        if (this.hScrollBar) {\n          this.renderer.setStyle(contentElement, 'overflow-y', 'auto');\n        }\n\n        if (this.vScrollBar) {\n          this.renderer.setStyle(contentElement, 'overflow-x', 'auto');\n        }\n      }\n    }\n\n    ngDoCheck() {\n      if (this.kendoWindow && (this.setTopView || this.bringToTop)) {\n        this.changeMenuHandler(undefined);\n        this.kendoWindow.bringToFront();\n        this.kendoWindow.focus();\n        this.setTopView = false;\n        this.bringToTop = false;\n      }\n\n      if (this.kendoWindow && this.isFocused) {\n        this.applyFocus();\n        this.isFocused = false;\n      }\n\n      if (this.popMenu && this.wmMenu && this.wmMenu.hasItems) {\n        this.wmMenu.toggleMenu(this.popMenu);\n        this.popMenu = undefined;\n      }\n\n      this.setSameZIndex();\n      this.setBackColor();\n    }\n    /**\r\n     * @description\r\n     * Returns the path of the form's icon\r\n     * @returns { string }\r\n     */\n\n\n    get icon() {\n      return this.model.Icon;\n    }\n    /**\r\n     * @description\r\n     * Returns the current state for this window element\r\n     * @returns { WindowState }\r\n     */\n\n\n    get windowState() {\n      const currentState = this.model.WindowState;\n\n      switch (currentState) {\n        case 1:\n          return 'minimized';\n\n        case 2:\n          return 'maximized';\n\n        case 0:\n        default:\n          return 'default';\n      }\n    }\n    /**\r\n     * @description\r\n     * Sets the current windowState\r\n     * @param value { WindowState }\r\n     */\n\n\n    set windowState(value) {\n      switch (value) {\n        case 'minimized':\n          this.model.WindowState = 1;\n          break;\n\n        case 'maximized':\n          this.model.WindowState = 2;\n          break;\n\n        default:\n          this.model.WindowState = 0;\n          break;\n      }\n    }\n    /**\r\n     * @description\r\n     * Causes the window to be centered when it is created or sized\r\n     * @returns { string }\r\n     */\n\n\n    get center() {\n      return this.model.Center;\n    }\n    /**\r\n     * Gets the top position value in pixels of the model.\r\n     */\n\n\n    get x() {\n      return this.center ? null : this.model.X;\n    }\n    /**\r\n     * Sets value for X property\r\n     */\n\n\n    set x(value) {\n      this.model.X = value;\n    }\n    /**\r\n     * Returns the left position value in pixels of the model.\r\n     */\n\n\n    get y() {\n      return this.center ? null : this.model.Y;\n    }\n    /**\r\n     * Sets value Y\r\n     */\n\n\n    set y(value) {\n      this.model.Y = value;\n    }\n    /**\r\n     * @description\r\n     * Returns the width value in pixels of the model. Returns 'null' if it does not exists in the model.\r\n     * @returns { number }\r\n     */\n\n\n    get width() {\n      const width = 'Width';\n      return this.getSizeValue(width);\n    }\n    /**\r\n     * Sets the Width value of the model.\r\n     */\n\n\n    set width(value) {\n      this.model.Width = value;\n    }\n    /**\r\n     * @description\r\n     * Returns the height value in pixels of the model. Returns 'null' if it does not exists in the model.\r\n     * @returns { number }\r\n     */\n\n\n    get height() {\n      const height = 'Height';\n      return this.getSizeValue(height);\n    }\n    /**\r\n     * Sets the Height value of the model\r\n     */\n\n\n    set height(value) {\n      this.model.Height = value;\n    }\n    /**\r\n     * Gets size property\r\n     * @param model object to get the property\r\n     * @param property property to search in the object\r\n     * @returns size property value of the property\r\n     */\n\n\n    getSizeProperty(model, property) {\n      return model && model[property] != null && model[property] !== 0 ? model[property] : undefined;\n    }\n    /**\r\n     * Gets the width value in pixels of the model.\r\n     */\n\n\n    getWidth() {\n      return this.mdiWindowType() && this.lengthConverter.isUsePercentage || this.windowState === 'maximized' ? null : this.width;\n    }\n    /**\r\n     * Returns the height value in pixels of the model.\r\n     */\n\n\n    getHeight() {\n      if (this.mdiWindowType() && this.lengthConverter.isUsePercentage || this.windowState === 'maximized') {\n        return null;\n      } else if ((this.mainWindowType() || this.childWindowType() || this.isModalWindow()) && this.height && this.titleBar) {\n        this.removeCSSHeightWidth();\n        return this.model.ParentWindow && this.model.MenuID ? this.height - this.titleBarHeight - this.menuHeight : this.height - this.titleBarHeight;\n      } else {\n        return this.height;\n      }\n    }\n    /**\r\n     * \tOverrides the css class of window content to use\r\n     *  width and height values from model\r\n     */\n\n\n    removeCSSHeightWidth() {\n      const staticContent = this.windowContentDiv;\n\n      if (staticContent) {\n        this.renderer.setStyle(staticContent, 'width', 'inherit');\n        this.renderer.setStyle(staticContent, 'height', 'inherit');\n      }\n    }\n    /**\r\n     * \tSpecifies the type of window.\r\n     */\n\n\n    get windowType() {\n      return this.model.ParentWindow && this.model.WindowType !== WindowType.response ? WindowType.child : this.model.WindowType;\n    }\n    /**\r\n     * Triggers windowclose event\r\n     * @param event event parameter\r\n     */\n\n\n    close(event) {\n      this.Close.emit(new EventData(event, this.id, this.mapperId));\n    }\n    /**\r\n     * Applies Window state style when window is loading\r\n     */\n\n\n    defineWindowState() {\n      if (this.windowState === 'maximized') {\n        this.applyMaximizedStyle(0);\n        this.wmService.core.getEvent().publish('detectChanges');\n      }\n    }\n    /**\r\n     * @description\r\n     * Returns a boolean value that indicates if the current window\r\n     * should be displayed as a modal window\r\n     * @returns { boolean }\r\n     */\n\n\n    isModalWindow() {\n      return this.windowType === WindowType.response;\n    }\n    /**\r\n     * @description\r\n     * Returns whether Popup WindowType applies.\r\n     * @returns { boolean }\r\n     */\n\n\n    isPopupWindowType() {\n      return this.windowType === WindowType.popup;\n    }\n    /**\r\n     * @description\r\n     * Returns true if the mdi can be draggable\r\n     * Global isMdiDraggable property should be defined in app.component.ts of migrated app.\r\n     * @returns { boolean }\r\n     */\n\n\n    isMdiDraggable() {\n      const isMdiDraggable = WebMapService.currentService.config.isMdiDraggable;\n      return isMdiDraggable !== undefined ? isMdiDraggable : true;\n    }\n    /**\r\n     * @description\r\n     * Returns whether child WindowType applies.\r\n     * @returns { string }\r\n     */\n\n\n    childWindowType() {\n      return this.windowType === WindowType.child;\n    }\n    /**\r\n     * @description\r\n     * Returns whether main WindowType applies.\r\n     * @returns { string }\r\n     */\n\n\n    mainWindowType() {\n      return this.windowType === WindowType.main;\n    }\n    /**\r\n     * @description\r\n     * Returns whether Mdi WindowType applies.\r\n     * @returns { boolean }\r\n     */\n\n\n    mdiWindowType() {\n      return this.windowType === WindowType.mdi || this.windowType === WindowType.mdihelp;\n    }\n    /**\r\n     * @description\r\n     * Returns true if the window should be open as opensheet.\r\n     * @returns { boolean }\r\n     */\n\n\n    isOpenSheet() {\n      return !!this.model.ParentWindow;\n    }\n    /**\r\n     * Returns whether windowtype is mdihelp\r\n     */\n\n\n    showMicroHelp() {\n      return this.windowType === WindowType.mdihelp;\n    }\n    /**\r\n     * @description\r\n     * This function determines the initial window location (top, left). If model does not has a location\r\n     * defined in model the form will use the location defined in the css class, and finally if css class does not\r\n     * specifies location it will use default center position.\r\n     */\n\n\n    defineInitialPosition() {\n      /* c8 ignore else */\n      if (this.kendoWindow && this.kendoWindow.el) {\n        const form = this.kendoWindow.el.nativeElement;\n\n        if (form) {\n          if (this.isOpenSheet()) {\n            this.defineMDIPosition(form, this.getMDIClientObject(this.elem.nativeElement));\n          } else {\n            this.defineWindowPosition(form, window);\n            this.zIndexService.ApplyPopupZIndex(form, this.isPopupWindowType());\n          }\n\n          this.detector.detectChanges();\n        }\n      }\n    }\n    /**\r\n     * @description\r\n     * Sets position to generic windows\r\n     * @param {any} form form to be positioned\r\n     * @param {any} window window parent's form\r\n     */\n\n\n    defineWindowPosition(form, window) {\n      if (!this.class || this.isDefaultPosition(form)) {\n        this.setTop(window.outerHeight, form.offsetHeight);\n        this.setLeft(window.outerWidth, form.offsetWidth);\n      }\n    }\n    /**\r\n     * @description\r\n     * Sets position to generic windows inside of a mdi.\r\n     * @param {any} form form to be positioned\r\n     * @param {any} mdi mdi parent's form\r\n     */\n\n\n    defineMDIPosition(form, mdi) {\n      /* c8 ignore next 4 */\n      if (mdi) {\n        this.setTop(mdi.offsetHeight, form.offsetHeight);\n        this.setLeft(mdi.offsetWidth, form.offsetWidth);\n      }\n    }\n    /**\r\n     * @description\r\n     * Returns the MDIClientObject DOM element.\r\n     * @returns {any}\r\n     */\n\n\n    getMDIClientObject(elementDOM) {\n      // Only IE11. Iterates and finds the fourth parent element.\n\n      /* c8 ignore else */\n      return elementDOM.closest ? elementDOM.closest('wm-mdiclient') : kendo.jQuery(elementDOM).closest('wm-mdiclient')[0];\n    }\n    /**\r\n     * @description\r\n     * This function determines and sets the window top value.\r\n     */\n\n\n    setTop(parentHeight, formHeight) {\n      if (this.model.Y == null) {\n        const top = parentHeight / 2 - formHeight / 2;\n\n        if (top >= 0) {\n          this.model.Y = top;\n        }\n      }\n    }\n    /**\r\n     * @description\r\n     * This function determines and sets the window left value.\r\n     */\n\n\n    setLeft(parentWidth, formWidth) {\n      if (this.model.X == null) {\n        const left = parentWidth / 2 - formWidth / 2;\n\n        if (left >= 0) {\n          this.model.X = left;\n        }\n      }\n    }\n    /**\r\n     * @description\r\n     * This function is used to define if the css class applied to the window has a default position.\r\n     * Any position negative going to be considered as a default position and the window will be\r\n     * positioned at the center of the main window.\r\n     * @param { HTMLElement } elem\r\n     * @returns { boolean }\r\n     */\n\n\n    isDefaultPosition(elem) {\n      const style = window.getComputedStyle(elem);\n      return style.top.startsWith('-') || style.left.startsWith('-');\n    }\n    /**\r\n     * @description\r\n     * This function determines the intial window zIndex, it uses the WindowService from KendoUI to\r\n     * determine the top position of windows opened.\r\n     */\n\n\n    setSameZIndex() {\n      // when the window component is render the first element is the current window.\n      const form = this.elem.nativeElement.children[1];\n\n      if (form && this.blockUI && !this.isPopupWindowType()) {\n        const blockDiv = this.blockUI.nativeElement;\n        /* c8 ignore else */\n\n        if (blockDiv) {\n          this.zIndexService.ApplyModalZIndex(form, blockDiv);\n        }\n      }\n    }\n    /**\r\n     * @description\r\n     * Returns the current context menu model\r\n     */\n\n\n    get contextMenu() {\n      return this.model.ContextMenu;\n    }\n    /**\r\n     * @description\r\n     * Returns the current model that the menu has to load in MDI window.\r\n     */\n\n\n    get menu() {\n      if (!this.model.Menu && !this.model.ParentWindow) {\n        this.model.Menu = this.model.MenuID;\n      }\n\n      return this.model.Menu;\n    }\n    /**\r\n     * this property returns the statusbar text, the default value is empty\r\n     */\n\n\n    get microHelp() {\n      return this.model.MicroHelp || 'Ready';\n    }\n    /**\r\n     * Gets the value of property that set\r\n     * the current window as the top view\r\n     */\n\n\n    get setTopView() {\n      return this.model.SetTopView;\n    }\n    /**\r\n     * Sets the setTopViewValue\r\n     */\n\n\n    set setTopView(value) {\n      this.model.SetTopView = value;\n    }\n    /**\r\n     * Gets the value of property BringToTop that sets\r\n     * the current window as the top view\r\n     */\n\n\n    get bringToTop() {\n      return this.model.BringToTop;\n    }\n    /**\r\n     * Sets the BringToTop\r\n     */\n\n\n    set bringToTop(value) {\n      this.model.BringToTop = value;\n    }\n    /**\r\n     * Gets pop menu\r\n     */\n\n\n    get popMenu() {\n      return this.model.popMenu;\n    }\n    /**\r\n     * Sets pop menu\r\n     */\n\n\n    set popMenu(value) {\n      this.model.popMenu = value;\n    }\n    /**\r\n     * @description\r\n     * This function changes the current menu of mdi parent window.\r\n     * @param { event } any\r\n     */\n\n\n    changeMenuHandler(event) {\n      if (this.model.ParentWindow && this.model.ParentWindow.Menu) {\n        this.model.ParentWindow.Menu.toolbarVisibleInternal = this.model.ParentWindow.toolbarVisibleInternal;\n      }\n\n      if (!this.detector['destroyed'] && this.model.ParentWindow && this.model.MenuID && (!this.model.ParentWindow.Menu || this.model.ParentWindow.Menu.UniqueID !== this.model.MenuID.UniqueID)) {\n        setTimeout(() => {\n          this.resetParent();\n          this.model.MenuID.Refresh = true;\n          this.model.ParentWindow.Menu = this.model.MenuID;\n        }, 300);\n      }\n    }\n\n    resetParent() {\n      const mdiWindow = this.hotKeysCommandService.mdiWindowsService.findMDIWindow(this.model.ParentWindow.id);\n\n      if (mdiWindow) {\n        this.removeInstances(mdiWindow);\n      }\n    }\n\n    resizeHandler(event) {\n      this.Resize.emit(new EventData({\n        sizeType: SizeType.SIZE_RESTORED\n      }, this.id));\n      this.triggerResizeEvent();\n    }\n\n    stateChangeHandler(event) {\n      let currentVal = SizeType.SIZE_RESTORED;\n\n      switch (event) {\n        case 'maximized':\n          currentVal = SizeType.SIZE_MAXIMIZED;\n          this.applyMaximizedStyle(17);\n          this.setModelSize();\n          break;\n\n        case 'minimized':\n          currentVal = SizeType.SIZE_MINIMIZED;\n          break;\n\n        case 'default':\n          currentVal = SizeType.SIZE_RESTORED;\n          this.applyDefaultStyle();\n          /* c8 ignore else */\n\n          if ('maximized' === this.windowState) {\n            this.setModelSize();\n          }\n\n          break;\n      }\n\n      this.windowState = event;\n      event = {\n        sizeType: currentVal\n      };\n      this.Resize.emit(new EventData(event, this.id, this.mapperId));\n      this.triggerResizeEvent();\n    }\n    /**\r\n     * Gets the value of the backColor property\r\n     */\n\n\n    get backColor() {\n      return this.model.BackColor;\n    }\n    /**\r\n     * Gets the index of the parent menu where a new menu option for windows list\r\n     * will be added (The list of windows opened).\r\n     */\n\n\n    get menuPosition() {\n      return this.model.MenuPostition;\n    }\n    /**\r\n     * Applies backcolor property to child and main windows.\r\n     * Note: MDI and MDI help apply backcolor using mdi client object.\r\n     */\n\n\n    setBackColor() {\n      const staticContent = this.windowContentDiv;\n\n      if (staticContent && this.backColor) {\n        this.render.setStyle(staticContent, 'background-color', this.backColor);\n      }\n    }\n    /**\r\n     * @description\r\n     * This function applies styles after a maximized process, it takes the size\r\n     * of the closest mdiClientObject and sets this size to the current window.\r\n     * It only works on windows that were opened by OpenSheet behaviour.\r\n     */\n\n\n    applyMaximizedStyle(correction) {\n      if (this.isOpenSheet()) {\n        const mdiClientObj = this.getMDIClientObject(this.elem.nativeElement);\n        const window = this.kendoWindow.el.nativeElement;\n        /* c8 ignore else*/\n\n        if (mdiClientObj && window) {\n          this.render.setStyle(window, 'width', `${mdiClientObj.offsetWidth + correction}px`);\n          this.render.setStyle(window, 'height', `${mdiClientObj.offsetHeight + correction}px`);\n          this.isDraggable = false;\n          this.render.addClass(window, 'maximized');\n        }\n      }\n    }\n    /**\r\n     * @description\r\n     * This function applies styles after a restored (default) process.\r\n     * It only works on windows that were opened by OpenSheet behaviour.\r\n     */\n\n\n    applyDefaultStyle() {\n      if (this.isOpenSheet()) {\n        const window = this.kendoWindow.el.nativeElement;\n        /* c8 ignore else */\n\n        if (window) {\n          this.isDraggable = true;\n          this.render.removeClass(window, 'maximized');\n        }\n      }\n    }\n    /**\r\n     * Handles enter event to trigger click\r\n     * if the focused element is on another control and not over a different button\r\n     * @param event the current event object\r\n     */\n\n\n    handleEnterEvent(event) {\n      const lastDefaultButton = this.buttonsService.lastDefaultButton;\n\n      if (this.validateTriggerClickDefaultButton(lastDefaultButton)) {\n        // We need to wait for the editable controls update events to be triggered first\n        setTimeout(() => {\n          lastDefaultButton.applyFocus();\n          lastDefaultButton.focusableElement.click();\n        }, 200);\n      }\n    }\n    /**\r\n     * Handles escape event to trigger click\r\n     * if the focused element is on another control and not over a different button\r\n     * @param event the current event object\r\n     */\n\n\n    handleEscapeEvent(event) {\n      const lastCancelButton = this.buttonsService.lastCancelButton; // We need to wait for the editable controls update events to be triggered first\n\n      setTimeout(() => {\n        lastCancelButton.applyFocus();\n        lastCancelButton.focusableElement.click();\n      }, 200);\n    }\n    /**\r\n     *\r\n     * Method to validate if click of default button should be triggered\r\n     * @param lastDefaultButtonthe the last default button set\r\n     * @returns true if click should be riggered\r\n     */\n\n\n    validateTriggerClickDefaultButton(lastDefaultButton) {\n      return lastDefaultButton && !(this.focusManagerService.activeComponent instanceof CommandButtonComponent) && !(this.focusManagerService.activeComponent instanceof MultiLineEditComponent);\n    }\n    /**\r\n     * method to set the focus = active for the current Window using the KendoWindow focus method\r\n     */\n\n\n    kendoWindowFocus() {\n      /* c8 ignore else */\n      if (this.kendoWindow) {\n        this.kendoWindow.focus();\n      }\n\n      if (this.model && this.model.MenuID) {\n        this.model.MenuID.Refresh = true;\n      }\n    }\n    /**\r\n     * remove the listeners from the window collection of shortcuts\r\n     */\n\n\n    removeInstances(window) {\n      window = window ? window : this;\n\n      if (window.shortcuts) {\n        window.shortcuts.values().forEach(listener => {\n          /* c8 ignore else */\n          if (listener) {\n            listener();\n          }\n        });\n      }\n\n      window.shortcuts = new Dictionary$2();\n    }\n\n    titleBarDoubleClick(event) {\n      if (!this.maxBox) {\n        Utils.preventPropagation(event);\n      }\n    }\n    /**\r\n     * Menus clicked event to expose handler to be bound by\r\n     * external code handler\r\n     * @param event MenuItem even data.\r\n     */\n\n\n    menuClicked(event) {\n      this.MenuClick.emit(event);\n    }\n    /**\r\n     * ToolBar clicked event to expose handler to be bound by\r\n     * external code handler\r\n     * @param event ToolBar even data.\r\n     */\n\n\n    toolBarClickedHandler(event) {\n      this.ToolBarClicked.emit(event);\n    }\n    /**\r\n     * Menu Mouseover event to expose handler to be bound by\r\n     * external code handler\r\n     * @param item Menu even data.\r\n     */\n\n\n    menuMouseOverHandler(item) {\n      this.MenuMouseOver.emit(item);\n    }\n    /**\r\n     * Menu Mouseout event to expose handler to be bound by\r\n     * external code handler\r\n     * @param item Menu even data.\r\n     */\n\n\n    menuMouseOutHandler(item) {\n      this.MenuMouseOut.emit(item);\n    }\n    /**\r\n     * Menu Mouseover event to expose handler to be bound by\r\n     * external code handler\r\n     * @param item Toolbar even data.\r\n     */\n\n\n    toolBarMouseOverHandler(item) {\n      this.ToolBarMenuItemMouseOver.emit(item);\n    }\n    /**\r\n     * Menu Mouseout event to expose handler to be bound by\r\n     * external code handler\r\n     * @param item Toolbar even data.\r\n     */\n\n\n    toolBarMouseOutHandler(item) {\n      this.ToolBarMenuItemMouseOut.emit(item);\n    }\n    /**\r\n     * gets the calculate value for the parameter from the model\r\n     *\r\n     * @private\r\n     * @param {string} property\r\n     * @return {*}  {number}\r\n     * @memberof PBWindowComponent\r\n     */\n\n\n    getSizeValue(property) {\n      return this.isOnGrid ? null : WebMapService.currentService.config.webMapVersion === WMConstants.version4 ? this.getSizeProperty(this.model.Position, property) : this.getSizeProperty(this.model, property);\n    }\n    /**\r\n     * set the model properties with the new size.\r\n     *\r\n     * @private\r\n     * @memberof PBWindowComponent\r\n     */\n\n\n    setModelSize() {\n      // -2 is to remove the border size of the KendoWindow, 1px left, 1 px right.\n      this.width = this.kendoWindow.width - 2;\n      this.height = this.kendoWindow.height ? this.kendoWindow.height : Utils.getComputedStyleNumber(this.kendoWindow['el'].nativeElement, 'height', 0);\n    }\n\n    triggerResizeEvent() {\n      if (this.wmService.config.usePercentage) {\n        this.resizeDataManagerService.emitWindowResize({});\n      }\n    }\n    /**\r\n     * Register the HotKeys in the document.Body\r\n     */\n\n\n    registerShortcutEvent(combination, data) {\n      const unsubscribe = this.render.listen(document.body, combination, e => {\n        e.preventDefault();\n\n        if (data.component) {\n          e.index = data.item.isToolbarItem() ? '-1' : `${data.item.index}`;\n          e.item = data.item;\n          this.triggerItemChangeIfNeeded(e);\n          data.component.onClicked(e);\n        }\n      });\n      this.shortcuts.add(combination, unsubscribe);\n    }\n\n    triggerItemChangeIfNeeded(event) {\n      if (this.focusManagerService) {\n        const column = this.focusManagerService.getActiveComponentColumn();\n\n        if (column && column.isLogicValueDifferentFromModelData()) {\n          column.itemChangeHandler(event);\n        }\n      }\n    }\n    /**\r\n     * remove the current hotkeys\r\n     */\n\n\n    shouldRemoveInstance(data) {\n      if (data.component && this.menu !== data.component.model) {\n        this.removeInstances();\n      }\n    }\n    /**\r\n     *\r\n     * Verify if the windows is the right type for be set as currentWindow.\r\n     * @returns true if valid window\r\n     */\n\n\n    isValidWindow() {\n      return this.windowType === WindowType.mdi || this.windowType === WindowType.mdihelp || this.windowType === WindowType.main || this.model && !this.model.ParentWindow;\n    }\n    /**\r\n     * @description\r\n     * Gets the value of the activated property\r\n     * @returns { boolean }\r\n     */\n\n\n    get activated() {\n      return this.model.Activated;\n    }\n    /**\r\n     * @description\r\n     * Sets the value of the activated property\r\n     */\n\n\n    set activated(value) {\n      this.model.Activated = value;\n    }\n\n  }\n\n  PBWindowComponent.ɵfac = function PBWindowComponent_Factory(t) {\n    return new (t || PBWindowComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(ZIndexService), i0.ɵɵdirectiveInject(HotKeysCommandService), i0.ɵɵdirectiveInject(ResizeDataManagerService), i0.ɵɵdirectiveInject(FocusManagerService), i0.ɵɵdirectiveInject(i1.WebMapService), i0.ɵɵdirectiveInject(ActiveWindowService), i0.ɵɵdirectiveInject(WindowFocusElementService), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(AcceleratorService, 8), i0.ɵɵdirectiveInject(ButtonsService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n  };\n\n  PBWindowComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: PBWindowComponent,\n    selectors: [[\"wm-window\"]],\n    hostBindings: function PBWindowComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"contextmenu\", function PBWindowComponent_contextmenu_HostBindingHandler($event) {\n          return ctx.contextMenuHandler($event);\n        });\n      }\n    },\n    features: [i0.ɵɵProvidersFeature([AcceleratorService, MainTabOrderService, FactoryNodes, HotKeysCommandService, ResizeDataManagerService, ZIndexService, ButtonsService, WindowFocusElementService]), i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [\"id\", \"blockUI\", \"class\", \"modal-overlay\", 4, \"ngIf\"], [3, \"title\", \"state\", \"ngClass\", \"top\", \"left\", \"resizable\", \"draggable\", \"autoFocusedElement\", \"close\", \"resizeEnd\", \"stateChange\", \"dragStart\", \"dragEnd\", \"keydown.enter\", \"keydown.escape\", 4, \"ngIf\"], [3, \"title\", \"state\", \"ngClass\", \"top\", \"left\", \"resizable\", \"autoFocusedElement\", \"close\", \"resizeEnd\", \"dragStart\", \"dragEnd\", \"keydown.enter\", 4, \"ngIf\"], [\"data-mode\", \"mdi\", 3, \"title\", \"width\", \"height\", \"state\", \"ngClass\", \"top\", \"left\", \"resizable\", \"draggable\", \"autoFocusedElement\", \"close\", \"resizeEnd\", \"stateChange\", \"dragStart\", \"dragEnd\", 4, \"ngIf\"], [\"id\", \"blockUI\", 1, \"modal-overlay\"], [\"blockUI\", \"\"], [3, \"title\", \"state\", \"ngClass\", \"top\", \"left\", \"resizable\", \"draggable\", \"autoFocusedElement\", \"close\", \"resizeEnd\", \"stateChange\", \"dragStart\", \"dragEnd\", \"keydown.enter\", \"keydown.escape\"], [3, \"ngClass\"], [1, \"custom-title-bar\", 3, \"dblclick\"], [\"class\", \"appIcon\", 4, \"ngIf\"], [\"onerror\", \"this.style.display='none'\", \"width\", \"18em\", 3, \"src\"], [1, \"k-window-title\"], [\"kendoWindowMinimizeAction\", \"\", 4, \"ngIf\"], [\"kendoWindowMaximizeAction\", \"\", 4, \"ngIf\"], [\"kendoWindowRestoreAction\", \"\"], [\"kendoWindowCloseAction\", \"\", 4, \"ngIf\"], [\"class\", \"overlay\", 3, \"width\", \"height\", 4, \"ngIf\"], [3, \"ngClass\", \"model\", \"toolbarVisibleInternal\", \"Clicked\", \"ToolBarClicked\", \"MenuItemMouseOver\", \"MenuItemMouseOut\", \"ToolBarMouseOverClicked\", \"ToolBarMouseOutClicked\", 4, \"ngIf\"], [1, \"contentResponse\"], [\"windowContent\", \"\"], [3, \"controls\", \"RemoveControl\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"ngClass\", \"model\", 4, \"ngIf\"], [1, \"appIcon\"], [\"kendoWindowMinimizeAction\", \"\"], [\"kendoWindowMaximizeAction\", \"\"], [\"kendoWindowCloseAction\", \"\"], [1, \"overlay\"], [3, \"ngClass\", \"model\", \"toolbarVisibleInternal\", \"Clicked\", \"ToolBarClicked\", \"MenuItemMouseOver\", \"MenuItemMouseOut\", \"ToolBarMouseOverClicked\", \"ToolBarMouseOutClicked\"], [\"wmMenu\", \"\"], [3, \"ngClass\", \"model\"], [3, \"title\", \"state\", \"ngClass\", \"top\", \"left\", \"resizable\", \"autoFocusedElement\", \"close\", \"resizeEnd\", \"dragStart\", \"dragEnd\", \"keydown.enter\"], [3, \"ngClass\", \"resizeEnd\", \"stateChange\"], [1, \"custom-title-bar\"], [1, \"contentResponse\", \"contentflow\"], [\"data-mode\", \"mdi\", 3, \"title\", \"width\", \"height\", \"state\", \"ngClass\", \"top\", \"left\", \"resizable\", \"draggable\", \"autoFocusedElement\", \"close\", \"resizeEnd\", \"stateChange\", \"dragStart\", \"dragEnd\"], [\"class\", \"overlay\", 4, \"ngIf\"], [3, \"ngClass\", \"toolbarVisibleInternal\", \"model\", \"Clicked\", \"ToolBarClicked\", \"MenuItemMouseOver\", \"MenuItemMouseOut\", \"ToolBarMouseOverClicked\", \"ToolBarMouseOutClicked\", 4, \"ngIf\"], [1, \"content\", \"contentflow\"], [\"mdiContent\", \"\"], [\"class\", \"statusbar\", 4, \"ngIf\"], [3, \"ngClass\", \"toolbarVisibleInternal\", \"model\", \"Clicked\", \"ToolBarClicked\", \"MenuItemMouseOver\", \"MenuItemMouseOut\", \"ToolBarMouseOverClicked\", \"ToolBarMouseOutClicked\"], [1, \"statusbar\"], [1, \"lines\"], [\"height\", \"14\", \"width\", \"100%\"], [\"x1\", \"14\", \"y1\", \"0\", \"x2\", \"0\", \"y2\", \"13\", 2, \"stroke\", \"rgb(160,160,160)\", \"stroke-width\", \"1\"], [\"x1\", \"14\", \"y1\", \"4\", \"x2\", \"4\", \"y2\", \"13\", 2, \"stroke\", \"rgb(160,160,160)\", \"stroke-width\", \"1\"], [\"x1\", \"14\", \"y1\", \"8\", \"x2\", \"8\", \"y2\", \"13\", 2, \"stroke\", \"rgb(160,160,160)\", \"stroke-width\", \"1\"]],\n    template: function PBWindowComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, PBWindowComponent_ng_container_0_Template, 5, 4, \"ng-container\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.model && ctx.visible);\n      }\n    },\n    directives: [i13.WindowComponent, i13.WindowTitleBarComponent, MenuComponent, i2.ContainerComponent, PBContextMenuComponent, i6.NgIf, i6.NgClass, i13.WindowMinimizeActionDirective, i13.WindowMaximizeActionDirective, i13.WindowRestoreActionDirective, i13.WindowCloseActionDirective, i6.NgTemplateOutlet],\n    styles: [\"kendo-dialog[_ngcontent-%COMP%]{position:relative}.modal-overlay[_ngcontent-%COMP%]{width:100%;height:100%;position:absolute;overflow:hidden;top:0;left:0;background:rgba(0,0,0,.5)!important}.overlay[_ngcontent-%COMP%]{position:fixed;z-index:100000;width:100%;height:100%}.hide-title-bar[_ngcontent-%COMP%]{display:none}.menu[_ngcontent-%COMP%]{flex:0 1 auto;z-index:2;background-color:#fff}.contentflow[_ngcontent-%COMP%]{overflow:hidden}.content[_ngcontent-%COMP%]{flex:1 1 auto;z-index:1;display:flex;flex-direction:column;background-color:#fff;position:relative}.contentResponse[_ngcontent-%COMP%]{position:relative}.statusbar[_ngcontent-%COMP%]{flex:0 1 20px;background-color:#f0f0f0;z-index:2}.statusbar[_ngcontent-%COMP%] > label[_ngcontent-%COMP%]{margin-top:3px;padding-left:0 0 0 1px;width:98%;border-top:1.2px solid;border-top-color:#a0a0a0;border-right:1.1px solid;border-right-color:#fff;font-size:8pt;position:absolute;height:14px}.lines[_ngcontent-%COMP%]{position:absolute;right:1px;bottom:3px;width:1.5%;height:14px}.maximized[_ngcontent-%COMP%]{position:absolute!important}\"]\n  });\n\n  __decorate([serverEvent('activate'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], PBWindowComponent.prototype, \"activeEvent\", null);\n\n  __decorate([NotifyChange('WindowState'), __metadata(\"design:type\", String), __metadata(\"design:paramtypes\", [String])], PBWindowComponent.prototype, \"windowState\", null);\n\n  __decorate([NotifyChange('X'), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], PBWindowComponent.prototype, \"x\", null);\n\n  __decorate([NotifyChange('Y'), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], PBWindowComponent.prototype, \"y\", null);\n\n  __decorate([NotifyChange('Width'), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], PBWindowComponent.prototype, \"width\", null);\n\n  __decorate([NotifyChange('Height'), __metadata(\"design:type\", Number), __metadata(\"design:paramtypes\", [Number])], PBWindowComponent.prototype, \"height\", null);\n\n  __decorate([serverEvent('WindowClose'), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], PBWindowComponent.prototype, \"close\", null);\n\n  __decorate([serverEvent('size', PBWindowComponent.resizeArgsExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], PBWindowComponent.prototype, \"resizeHandler\", null);\n\n  __decorate([serverEvent('size', PBWindowComponent.resizeArgsExtractor), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object]), __metadata(\"design:returntype\", void 0)], PBWindowComponent.prototype, \"stateChangeHandler\", null);\n\n  return PBWindowComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nvar MessageBoxButtons = /*#__PURE__*/(() => {\n  (function (MessageBoxButtons) {\n    MessageBoxButtons[MessageBoxButtons[\"OK\"] = 0] = \"OK\";\n    MessageBoxButtons[MessageBoxButtons[\"OKCancel\"] = 1] = \"OKCancel\";\n    MessageBoxButtons[MessageBoxButtons[\"AbortRetryIgnore\"] = 2] = \"AbortRetryIgnore\";\n    MessageBoxButtons[MessageBoxButtons[\"YesNoCancel\"] = 3] = \"YesNoCancel\";\n    MessageBoxButtons[MessageBoxButtons[\"YesNo\"] = 4] = \"YesNo\";\n    MessageBoxButtons[MessageBoxButtons[\"RetryCancel\"] = 5] = \"RetryCancel\";\n    MessageBoxButtons[MessageBoxButtons[\"OkWithThen\"] = 6] = \"OkWithThen\";\n    MessageBoxButtons[MessageBoxButtons[\"OpenCancel\"] = 7] = \"OpenCancel\";\n  })(MessageBoxButtons || (MessageBoxButtons = {}));\n\n  return MessageBoxButtons;\n})();\nvar MessageBoxComponent_1;\nlet MessageBoxComponent = MessageBoxComponent_1 = class MessageBoxComponent extends BaseControlComponent {\n  /* c8 ignore start */\n  constructor(changeDetector, renderer2, element, wmService, lengthConverter) {\n    super(changeDetector, renderer2, element, lengthConverter);\n    this.changeDetector = changeDetector;\n    this.renderer2 = renderer2;\n    this.element = element;\n    this.webServices = wmService;\n  }\n\n  get visible() {\n    return this._visible;\n  }\n\n  set visible(value) {\n    this._visible = value;\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n    this.enableButtons = true;\n    this.enableIcon = true;\n    this.visible = true;\n  }\n\n  ngAfterViewInit() {\n    this.disableCloseButton();\n    this.applyFocus();\n  }\n  /**\r\n   * Holds the display text of the messageBox buttons.\r\n   */\n\n\n  get buttonTexts() {\n    return ['Yes', 'No', 'OK', 'Abort', 'Retry', 'Cancel', 'Ignore'];\n  }\n  /**\r\n   * Gets icons from the model\r\n   */\n\n\n  get icons() {\n    return this.model.icons || 0;\n  }\n  /**\r\n   * @description\r\n   * Returns the image keyword to display according to the icons model property.\r\n   * @returns { string }\r\n   */\n\n\n  get iconClass() {\n    let path = '';\n\n    switch (this.icons) {\n      case 1:\n        path = 'help';\n        break;\n\n      case 2:\n      case 6:\n        path = 'warning';\n        break;\n\n      case 3:\n      case 5:\n      case 7:\n        path = 'k-i-close-circle';\n        break;\n\n      case 4:\n        path = 'info';\n        break;\n\n      default:\n        break;\n    }\n\n    return path;\n  }\n  /**\r\n   * Boolean to choose the source icon for the message Box\r\n   */\n\n\n  get kendoIcon() {\n    return this.icons === 3 || this.icons === 5 || this.icons === 7;\n  }\n  /**\r\n   * Gets icon color for the font as icon\r\n   */\n\n\n  get iconColor() {\n    switch (this.icons) {\n      case 1:\n      case 4:\n        // blue\n        return '#003478';\n\n      case 2:\n      case 6:\n        // yellow\n        return '#ffd42a';\n\n      case 3:\n      case 5:\n      case 7:\n        return 'red';\n\n      default:\n        return '';\n    }\n  }\n  /**\r\n   * @description\r\n   * Returns the text value of the component model.\r\n   * @returns { string }\r\n   */\n\n\n  get text() {\n    return RemoveAmpersand.remove(this.model.caption);\n  }\n  /**\r\n   * @description\r\n   * Returns the label message value of the component model.\r\n   * @returns { string }\r\n   */\n\n\n  get labelMessage() {\n    return this.model.text;\n  }\n  /**\r\n   * @description\r\n   * Returns whether the buttons 'yes' and 'no' have to be displayed.\r\n   * @returns { boolean }\r\n   */\n\n\n  get buttonYesNo() {\n    return this.model.buttons === MessageBoxButtons.YesNoCancel || this.model.buttons === MessageBoxButtons.YesNo;\n  }\n  /**\r\n   * @description\r\n   * Returns whether the button 'ok' has to be displayed.\r\n   * @returns { boolean }\r\n   */\n\n\n  get buttonOk() {\n    return this.model.buttons === MessageBoxButtons.OK || this.model.buttons === MessageBoxButtons.OKCancel;\n  }\n  /**\r\n   * @description\r\n   * Returns whether the button 'retry' has to be displayed.\r\n   * @returns { boolean }\r\n   */\n\n\n  get buttonRetry() {\n    return this.model.buttons === MessageBoxButtons.AbortRetryIgnore || this.model.buttons === MessageBoxButtons.RetryCancel;\n  }\n  /**\r\n   * @description\r\n   * Returns whether the button 'cancel' has to be displayed.\r\n   * @returns { boolean }\r\n   */\n\n\n  get buttonCancel() {\n    return this.model.buttons === MessageBoxButtons.OKCancel || this.model.buttons === MessageBoxButtons.YesNoCancel || this.model.buttons === MessageBoxButtons.RetryCancel;\n  }\n  /**\r\n   * @description\r\n   * Returns whether the buttons 'ignore' and 'abort' have to be displayed.\r\n   * @returns { boolean }\r\n   */\n\n\n  get buttonIgnoreAbort() {\n    return this.model.buttons === MessageBoxButtons.AbortRetryIgnore;\n  }\n  /**\r\n   * Gets whether is container\r\n   */\n\n\n  get isContainer() {\n    return true;\n  }\n  /**\r\n   * Applies focus to default or selectable element in\r\n   * component. It triggers dom element focus()\r\n   */\n\n\n  applyFocus() {\n    setTimeout(() => this.default.nativeElement.focus(), 50);\n  }\n  /**\r\n   * Gets the current component css classes\r\n   * It checks if the component is in YesNo or\r\n   * AbortRetryIgnore modes to disable the close action.\r\n   * @returns class a string containing all the css classes to be applied.\r\n   */\n\n\n  getClass() {\n    return this.class;\n  }\n  /**\r\n   * Disables close button when Msg Box is YesNo! or AbortRetryIgnore!\r\n   */\n\n\n  disableCloseButton() {\n    /* c8 ignore else */\n    if (this.dialog && this.dialog.nativeElement && (this.model.buttons === MessageBoxButtons.AbortRetryIgnore || this.model.buttons === MessageBoxButtons.YesNo)) {\n      const closeButton = this.dialog.nativeElement.querySelector('a');\n      /* c8 ignore else */\n\n      if (closeButton) {\n        closeButton.setAttribute('disabled', 'disabled');\n      }\n    }\n  }\n  /**\r\n   * @event click Is triggered when any button of the message box is clicked.\r\n   * @param event Event data parameter.\r\n   */\n\n\n  click(event, buttonText) {\n    this.enableButtons = false;\n\n    if (this.webServices.config.webMapVersion === WMConstants.version4) {\n      if (this.isSpecialV4MessageBoxOk()) {\n        this.lengthConverter.getMessageBoxV4OK().remove(this.model.id);\n      } else {\n        const commandV4 = new ModalActionButton(buttonText);\n        this.webServices.invoke(commandV4);\n      }\n    } else {\n      const args = [{\n        Id: this.id,\n        MapperId: 'msgBx'\n      }, {\n        MapperId: MessageBoxComponent_1.messageBoxClickEventArgsId,\n        button: buttonText\n      }];\n      this.webServices.invoke(new SendV5(this, 'Click', this.id, 'Click', args));\n    }\n\n    this.visible = false;\n  }\n  /**\r\n   * Sends an action using the close button from message boxes\r\n   * it sends the last action that is the default action for the element'\r\n   * If the message box is in abort retry ignore it should be disabled\r\n   * @param event the current event object\r\n   */\n\n\n  close(event) {\n    switch (this.model.buttons) {\n      case 0:\n        // OK! on Close sends Ok!\n        this.click(event, this.buttonTexts[2]);\n        break;\n      // Action should be disabled on AbortRetryIgnore! and YesNo! modes.\n\n      case 2:\n      case 4:\n        return;\n\n      default:\n        // OKCancel! on close sends Cancel!\n        // YesNoCancel on close sends Cancel!\n        // RetryCancel on close sends Cancel!\n        this.click(event, this.buttonTexts[5]);\n        break;\n    }\n  }\n  /**\r\n   * Keys down handler to manage navigation between buttons.\r\n   * @param event EventData\r\n   */\n\n\n  keyDownHandler(event) {\n    if (event) {\n      switch (event.key) {\n        case 'ArrowRight':\n          Utils.preventPropagation(event);\n          this.moveRight(event.target);\n          break;\n\n        case 'ArrowLeft':\n          Utils.preventPropagation(event);\n          this.moveLeft(event.target);\n          break;\n\n        case 'y':\n          if (this.buttonYesNo && event.altKey) {\n            this.click(event, this.buttonTexts[0]);\n          }\n\n          break;\n\n        case 'n':\n          if (this.buttonYesNo && event.altKey) {\n            this.click(event, this.buttonTexts[1]);\n          }\n\n          break;\n\n        default:\n          // Do nothing;\n          break;\n      }\n    }\n  }\n  /**\r\n   * Moves to next button option to the right\r\n   * @param element The current button element that received the event\r\n   */\n\n\n  moveRight(element) {\n    const array = this.buttonCollection.toArray();\n    const index = retrieveIndex(array, element);\n\n    if (index >= 0 && index < array.length - 1) {\n      array[index + 1].focus();\n    }\n  }\n  /**\r\n   * Moves to previous button option to the left\r\n   * @param element The current button element that received the event\r\n   */\n\n\n  moveLeft(element) {\n    const array = this.buttonCollection.toArray();\n    const index = retrieveIndex(array, element);\n\n    if (index >= 1 && index < array.length) {\n      array[index - 1].focus();\n    }\n  }\n  /**\r\n   * After load component to check special validations for v4 projects.\r\n   * **Note: This method must will be revalidated when MessageBoxes Ok will be fixed in\r\n   * PBJava**\r\n   */\n\n\n  afterLoadComponent() {\n    /* c8 ignore else */\n    if (this.webServices.config.webMapVersion === WMConstants.version4 && this.isSpecialV4MessageBoxOk()) {\n      this.lengthConverter.getMessageBoxV4OK().add(this);\n    }\n  }\n  /**\r\n   * Determines whether is a special v4 message box ok\r\n   * @returns true if it is a special v4 message box ok\r\n   */\n\n\n  isSpecialV4MessageBoxOk() {\n    return this.model.buttons === MessageBoxButtons.OK && !this.model.forceContinuation;\n  }\n\n};\nMessageBoxComponent.messageBoxClickEventArgsId = 'MsgBxArgs';\n\nMessageBoxComponent.ɵfac = function MessageBoxComponent_Factory(t) {\n  return new (t || MessageBoxComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.WebMapService), i0.ɵɵdirectiveInject(LengthConverter));\n};\n\nMessageBoxComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MessageBoxComponent,\n  selectors: [[\"wm-message-box\"]],\n  viewQuery: function MessageBoxComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c26, 5);\n      i0.ɵɵviewQuery(_c75, 5, ElementRef);\n      i0.ɵɵviewQuery(ButtonDirective, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.default = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dialog = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.buttonCollection = _t);\n    }\n  },\n  features: [i0.ɵɵInheritDefinitionFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[4, \"ngIf\"], [\"wmFocusable\", \"\", 3, \"title\", \"width\", \"height\", \"minWidth\", \"ngClass\", \"hostComponent\", \"close\", 4, \"ngIf\"], [\"wmFocusable\", \"\", 3, \"title\", \"width\", \"height\", \"minWidth\", \"ngClass\", \"hostComponent\", \"close\"], [\"dialog\", \"\"], [1, \"content\"], [\"class\", \"k-icon\", \"style\", \"font-size: 34px; width:40px; height:40px; float: left;\", 3, \"ngClass\", \"color\", 4, \"ngIf\"], [\"class\", \"material-icons\", \"style\", \"font-size: 34px; width:40px; height:40px; float: left;\", 3, \"color\", 4, \"ngIf\"], [1, \"Msg_message\", 2, \"float\", \"left\"], [\"kendoButton\", \"\", \"class\", \"k-button\", 3, \"disabled\", \"click\", \"keydown\", 4, \"ngIf\"], [1, \"k-icon\", 2, \"font-size\", \"34px\", \"width\", \"40px\", \"height\", \"40px\", \"float\", \"left\", 3, \"ngClass\"], [1, \"material-icons\", 2, \"font-size\", \"34px\", \"width\", \"40px\", \"height\", \"40px\", \"float\", \"left\"], [\"kendoButton\", \"\", 1, \"k-button\", 3, \"disabled\", \"click\", \"keydown\"], [\"default\", \"\"]],\n  template: function MessageBoxComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, MessageBoxComponent_div_0_Template, 2, 1, \"div\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.model);\n    }\n  },\n  directives: [i13.DialogComponent, i13.DialogActionsComponent, i6.NgIf, FocusableDirective, i6.NgClass, i6$2.ButtonDirective],\n  styles: [\"kendo-dialog[_ngcontent-%COMP%]{z-index:100000}kendo-dialog-actions[_ngcontent-%COMP%]{flex-wrap:nowrap!important}kendo-dialog-actions[_ngcontent-%COMP%] > button[_ngcontent-%COMP%]{width:100%!important}.Msg_message[_ngcontent-%COMP%], .Msg_icon[_ngcontent-%COMP%]{float:left;padding:.5em}.content[_ngcontent-%COMP%]{margin:1.2em}\"]\n});\nMessageBoxComponent = MessageBoxComponent_1 = __decorate([dataTransfer(['msgBx']), __metadata(\"design:paramtypes\", [ChangeDetectorRef, Renderer2, ElementRef, WebMapService, LengthConverter])], MessageBoxComponent);\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * Retrieves index of the current element in the array passed as parameter\r\n * @param array Array of buttons in the message box\r\n * @param element Button element\r\n * @returns index\r\n */\n\n\nfunction retrieveIndex(array, element) {\n  return element && array.length > 0 ? array.findIndex(button => button.element === element) : -1;\n} // /***********************************************************************\n\n/* c8 ignore file */\n\n/* c8 ignore file */\n\n/* c8 ignore file */\n\n/* c8 ignore file */\n\n/*****************************************************************************\r\n * Copyright (C) Mobilize.Net <info@mobilize.net> - All Rights Reserved\r\n *\r\n * This file is part of the Mobilize Frameworks, which is\r\n * proprietary and confidential.\r\n *\r\n * NOTICE:  All information contained herein is, and remains\r\n * the property of Mobilize.Net Corporation.\r\n * The intellectual and technical concepts contained herein are\r\n * proprietary to Mobilize.Net Corporation and may be covered\r\n * by U.S. Patents, and are protected by trade secret or copyright law.\r\n * Dissemination of this information or reproduction of this material\r\n * is strictly forbidden unless prior written permission is obtained\r\n * from Mobilize.Net Corporation.\r\n ******************************************************************************/\n\n\nlet HyperlinkComponent = /*#__PURE__*/(() => {\n  class HyperlinkComponent extends CommonStyleComponent {\n    /* c8 ignore start */\n    constructor(changeDetector, renderer2, element, lengthConverter, emitter, mTabOrderService, tabPageOrderService) {\n      super(changeDetector, renderer2, element, lengthConverter, emitter, mTabOrderService, tabPageOrderService);\n      this.changeDetector = changeDetector;\n      this.renderer2 = renderer2;\n      this.element = element;\n      this.emitter = emitter;\n      this.mTabOrderService = mTabOrderService;\n      this.tabPageOrderService = tabPageOrderService;\n    }\n    /**\r\n     * @description\r\n     * Gets focusable element inside of the component\r\n     */\n\n\n    get focusableElement() {\n      return this.validateFocusElement(this.hyperlink);\n    }\n\n    ngOnInit() {\n      super.ngOnInit();\n      this.registerTabService();\n    }\n    /**\r\n     * Gets the model text\r\n     */\n\n\n    get text() {\n      return RemoveAmpersand.remove(this.model.Text);\n    }\n\n  }\n\n  HyperlinkComponent.ɵfac = function HyperlinkComponent_Factory(t) {\n    return new (t || HyperlinkComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(LengthConverter), i0.ɵɵdirectiveInject(DataManagerEventService, 8), i0.ɵɵdirectiveInject(MainTabOrderService, 8), i0.ɵɵdirectiveInject(ContainerControlTabOrderService, 8));\n  };\n\n  HyperlinkComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: HyperlinkComponent,\n    selectors: [[\"wm-hyperlink\"]],\n    viewQuery: function HyperlinkComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c76, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.hyperlink = _t.first);\n      }\n    },\n    features: [i0.ɵɵInheritDefinitionFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[\"href\", \"#\", 3, \"ngClass\", \"click\", \"keydown.tab\", \"keydown.shift.tab\", 4, \"ngIf\"], [\"href\", \"#\", 3, \"ngClass\", \"click\", \"keydown.tab\", \"keydown.shift.tab\"], [\"hyperlink\", \"\"]],\n    template: function HyperlinkComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, HyperlinkComponent_a_0_Template, 3, 2, \"a\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.model);\n      }\n    },\n    directives: [i6.NgIf, i6.NgClass],\n    styles: [\"\"]\n  });\n  return HyperlinkComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet PowerComponentsModule = /*#__PURE__*/(() => {\n  class PowerComponentsModule {\n    constructor(webMapSevice) {\n      this.webMapSevice = webMapSevice;\n      this.webMapSevice.config.wmSourceVersion = WMConstants.sourceVersionPB;\n    }\n\n  }\n\n  PowerComponentsModule.ɵfac = function PowerComponentsModule_Factory(t) {\n    return new (t || PowerComponentsModule)(i0.ɵɵinject(i1.WebMapService));\n  };\n\n  PowerComponentsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: PowerComponentsModule\n  });\n  PowerComponentsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [WebMapService],\n    imports: [[CommonModule, FormsModule, ReactiveFormsModule, BrowserModule, BrowserAnimationsModule, ButtonsModule, LayoutModule, LabelModule, WindowModule, DropDownsModule, InputsModule, HttpClientModule, DateInputsModule, BaseComponentsModule, DialogsModule, DialogModule, MenuModule, ContextMenuModule, TooltipModule, ToolBarModule, GridModule, PopupModule, TreeViewModule, DragAndDropModule, AutosizeModule, GaugesModule, CalendarModule, WebMapModule]]\n  });\n  return PowerComponentsModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { AcceleratorService, ActiveWindowService, Alignment$1 as Alignment, BaseControlBaseComponent, BaseControlComponent, BaseDataManagerComponent, BaseDateTimeComponent, BaseMaskComponent, BasePictureComponent, BorderStyle, BusyloaderComponent, ButtonsService, CheckboxComponent, ColumnControlComponent, CommandButtonComponent, ComplexNumericEditMaskComponent, ContainerControlTabOrderService, ControlsPowerDirective, DMControlBorderStyle, DMDataService, DWBitmapComponent, DataManagerControlComponent, DataManagerControlExtractors, DataManagerEventService, DataManagerTabSequenceService, DataTypeNames, DataTypeValidator, DateTimeEditMaskComponent, DateTimeFunctions, DateTimeService, DateTimeUCalendarComponent, DmInteractionService, DropDownBaseComponent, DropDownDataWindowComponent, DropDownDataWindowRulesService, DropDownListBoxComponent, DropLockService, DwCheckboxComponent, DwColumnComponent, DwComplexNumericEditMaskComponent, DwComputeComponent, DwDateTimeEditMaskComponent, DwEditComponent, DwEditMaskComponent, DwEllipseComponent, DwPressButtonComponent, DwRadioButtonComponent, DwSimpleNumericEditMaskComponent, DwStringEditMaskComponent, DwTimeEditMaskComponent, DynamicContainerComponent, DynamicDataManagerComponent, DynamicGridComponent, DynamicRowTabSequenceDirective, ElementTabSequenceDirective, EllipseComponent, FileExplorerComponent, FocusManagerService, FocusableDirective, FreeFormBaseComponent, FreeformComponent, GraphicsComponent, GroupBoxComponent, HProgressBarComponent, HotKeysCommandService, Icons, IconsService, KendoComponent, KendoListBoxComponent, LengthConverter, LineComponent, ListBoxBaseComponent, ListBoxComponent, ListViewComponent, ListViewItemComponent, ListViewLargeIconComponent, MDIClientComponent, MainTabOrderService, MaskFormatService, MaskValidatorDirective, MaskedTextBoxComponent, MenuBaseComponent, MenuComponent, MessageBoxComponent, MessageBoxV4OK, MessageCommandService, MonthCalendarComponent, MultiLineEditComponent, NumericService, ObjectAtPointerService, OpenFileDialogComponent, PBContextMenuComponent, PBControlContainerComponent, PBStyle, PBWindowBaseComponent, PBWindowComponent, PbBaseComponentModule, PictureButtonComponent, PictureComponent, PowerComponentsModule, RadioButtonComponent, RectangleComponent, ReportViewerComponent, ResizeDataManagerService, RoundRectangleComponent, RowTabSequenceDirective, SafePipe, SessionExpiredComponent, SimpleDropDownDataWindowComponent, SimpleNumericEditMaskComponent, SingleLineEditComponent, SizeType, StaticTextComponent, StringEditMaskComponent, StringRules, StringService, StubComponent, SystemModals, TabControlComponent, TabPageComponent, TextBufferService, TextCase, TimeEditMaskComponent, TimerComponent, ToolBarItemComponent, ToolbarComponent, TreeViewComponent, UCalculatorComponent, UCalendarComponent, UpdateCurrentKeyService, UpdateFirstRowOnPageService, UpdateFocusedControlService, UpdateScreenResolution, UserObjectComponent, UserObjectEventService, Utils, VScrollBarComponent, VersionComponent, WDropDownPictureListBoxComponent, WMGridComponent, WindowFocusElementService, WindowType, WmPagerComponent, ZIndexService, areColumns, completeDecimals, completeYear, createNodeMenuItem, dateValidation, elementInViewPort, formatOneDigitNumberMili, getDataManagerId, isNumeric, isSingleColumn, isValidDate, isValidNumber, isValidTime, lengthValidation, numericValidation, removeComasBeforeDot, removeCurrency, removeDecimals, shouldValidateColumn, tabReadOnly, timeValidation, validateColumn, validateDWColumnType }; //# sourceMappingURL=mobilize-powercomponents.mjs.map","map":null,"metadata":{},"sourceType":"module"}