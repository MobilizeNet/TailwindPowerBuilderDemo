{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { ErrorCodes, ExceptionHandlerClass } from '../System/Aop';\n\nvar Model = function () {\n  function Model(uniqueId, obj) {\n    if (uniqueId === void 0) {\n      uniqueId = '';\n    }\n\n    if (obj === void 0) {\n      obj = null;\n    }\n\n    this.myInternalProperties = ['_internalProperties', 'events', 'EventChanges', 'childrenToNotify', 'onModelChange', '_isTempModel', '_pointers'];\n\n    this.___setInitialValues(uniqueId, obj);\n  }\n\n  Model_1 = Model;\n\n  Model.prototype.notifiercount = function () {\n    return this.childrenToNotify.length;\n  };\n\n  Object.defineProperty(Model.prototype, \"UniqueID\", {\n    get: function () {\n      return this.myUniqueID;\n    },\n    set: function (value) {\n      this.myUniqueID = value;\n      this.childrenToNotify.forEach(function (c) {\n        return c.__notify('UniqueID', value);\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"IsTempModel\", {\n    get: function () {\n      return this.myIsTempModel;\n    },\n    set: function (value) {\n      this.myIsTempModel = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"IsModalView\", {\n    get: function () {\n      return this.myIsModalView;\n    },\n    set: function (value) {\n      this.myIsModalView = value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Model.prototype, \"isPointer\", {\n    get: function () {\n      return this['@k'] === 2 && (this['p'] || this['v']);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Model.prototype.__notify = function (property, value) {\n    if (property === 'UniqueID') {\n      this.UniqueID = this.uniqueName() + Model_1.separator + value;\n    } else {\n      this[property] = value;\n    }\n  };\n\n  Model.prototype.__subscribe = function (model) {\n    this.childrenToNotify.push(model);\n  };\n\n  Model.prototype.addReference = function (property, item) {\n    if (this.isArray) {\n      this.addOnArray(this, item);\n    } else {\n      this[property] = item;\n    }\n\n    this.fireChange();\n  };\n\n  Model.prototype.addValue = function (property, value) {\n    this[property] = value;\n    this.fireChange();\n  };\n\n  Model.prototype.uniqueName = function () {\n    var name = this.UniqueID.split(Model_1.separator)[0];\n    return name === '_items' ? 'Items' : name;\n  };\n\n  Model.prototype.parentName = function () {\n    return this.UniqueID.substr(this.UniqueID.indexOf(Model_1.separator) + Model_1.separator.length);\n  };\n\n  Model.prototype.isRoot = function () {\n    return this.UniqueID.indexOf(Model_1.separator) === -1;\n  };\n\n  Model.prototype.parentNameKey = function (key) {\n    return key.substr(key.indexOf(Model_1.separator) + 1);\n  };\n\n  Model.prototype.isCoreSynchronizing = function () {\n    return false;\n  };\n\n  Model.prototype.updateModel = function (item) {\n    var _this = this;\n\n    this.applyOnProperties(item, function (prop) {\n      if (_this[prop] !== item[prop]) {\n        var oldValue = _this[prop];\n        _this[prop] = item[prop];\n\n        if (_this.onPropertyChange != null) {\n          _this.onPropertyChange(prop, oldValue, _this[prop]);\n        }\n      }\n    });\n    this.fireChange();\n  };\n\n  Model.prototype.applyOnProperties = function (item, fn) {\n    for (var prop in item) {\n      if (item.hasOwnProperty(prop) && this.myInternalProperties.indexOf(prop) === -1) {\n        fn.call(this, prop);\n      }\n    }\n  };\n\n  Model.prototype.removeModel = function (item) {\n    var removed = false;\n\n    if (this.isArray) {\n      removed = this.removeOnArray(item);\n    } else {\n      if (this[item.uniqueName()]) {\n        delete this[item.uniqueName()];\n        removed = true;\n      }\n    }\n\n    if (removed) {\n      var itemIndex = this.childrenToNotify.indexOf(item);\n\n      if (itemIndex > -1) {\n        this.childrenToNotify.splice(itemIndex, 1);\n      }\n\n      this.fireChange();\n    }\n  };\n\n  Model.prototype.fireChange = function () {\n    if (this.onModelChange) {\n      this.onModelChange();\n    }\n  };\n\n  Model.prototype.applyMethod = function (method) {\n    if (this[method]) {\n      this[method]();\n    }\n  };\n\n  Model.prototype.hasCircularReference = function () {\n    if (!this.isArray) {\n      return false;\n    }\n\n    var observable = this;\n\n    for (var _i = 0, observable_1 = observable; _i < observable_1.length; _i++) {\n      var obs = observable_1[_i];\n      var isCircularReference = this.UniqueID.indexOf(obs.UniqueID) > 0;\n\n      if (isCircularReference) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  Model.prototype.addPointerId = function (key, pointerId) {\n    this.myPointers[key] = pointerId;\n  };\n\n  Model.prototype.getPos = function (key) {\n    var name;\n\n    if (key && this.getPointerId(key)) {\n      name = this.getPointerName(key);\n    } else {\n      name = this.uniqueName();\n    }\n\n    return name.match(/^\\d+$/) ? Number(name) : -1;\n  };\n\n  Object.defineProperty(Model.prototype, \"isArray\", {\n    get: function () {\n      return this['@arr'];\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Model.prototype.addValueArray = function (array, item, i) {\n    if (array[i] !== undefined) {\n      array[i] = item;\n    } else {\n      array.push(item);\n    }\n  };\n\n  Model.prototype.removeValueAray = function (array, start, count) {\n    array.splice(start, count);\n  };\n\n  Model.prototype.addReferencedBy = function (modelId, name) {\n    throw new Error('WebMap 5 function not implemented in WebMap 4');\n  };\n\n  Model.prototype.removeReference = function (name) {\n    throw new Error('WebMap 5 function not implemented in WebMap 4');\n  };\n\n  Model.prototype.___setInitialValues = function (uniqueId, obj) {\n    if (obj === void 0) {\n      obj = null;\n    }\n\n    this.myUniqueID = uniqueId;\n    this.myIsTempModel = false;\n    this.myIsModalView = false;\n    this.myPointers = {};\n    this.addProperties(obj);\n    this.events = {};\n\n    if (obj && obj.EventChanges) {\n      this.eventChanges = obj.EventChanges;\n    }\n\n    if (this.isArray) {\n      this.addArrayMethods(this);\n    }\n\n    if (this.isPointer) {\n      this.addPointerProperties(this);\n    }\n\n    this.childrenToNotify = new Array();\n  };\n\n  Model.prototype.addProperties = function (obj) {\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        if (key !== 'UniqueID') {\n          this[key] = obj[key];\n        }\n      }\n    }\n  };\n\n  Model.prototype.addOnArray = function (array, item) {\n    array.splice(item.getPos(this.UniqueID), 0, item);\n  };\n\n  Model.prototype.addArrayMethods = function (array) {\n    this.addSpliceMethod(array);\n    this.addPushMethod(array);\n    this.addSortMethod(array);\n    this.myInternalProperties.push('length');\n  };\n\n  Model.prototype.addSpliceMethod = function (array) {\n    if (!array.splice) {\n      Array.prototype.splice.apply(array);\n      array.splice = Array.prototype.splice;\n    }\n  };\n\n  Model.prototype.addPushMethod = function (array) {\n    if (!array.push) {\n      Array.prototype.push.apply(array);\n      array.push = Array.prototype.push;\n    }\n  };\n\n  Model.prototype.addSortMethod = function (array) {\n    if (!array.sort) {\n      Array.prototype.sort.apply(array);\n      array.sort = Array.prototype.sort;\n    }\n  };\n\n  Model.prototype.removeOnArray = function (item) {\n    var removed = false;\n    var array = this;\n\n    if (item.getPos(this.UniqueID) > -1 && array[item.getPos(this.UniqueID)] && item.UniqueID === array[item.getPos(this.UniqueID)].UniqueID) {\n      array.splice(item.getPos(this.UniqueID), 1);\n      removed = true;\n    } else {\n      var itemIndex = this.getPositionOnArray(item);\n\n      if (itemIndex > -1) {\n        array.splice(this.getPositionOnArray(item), 1);\n        removed = true;\n      }\n    }\n\n    return removed;\n  };\n\n  Model.prototype.getPositionOnArray = function (item) {\n    var array = this;\n    var position = -1;\n\n    for (var i = 0; i < array.length; i++) {\n      if (item.UniqueID === array[i].UniqueID) {\n        position = i;\n        break;\n      }\n    }\n\n    return position;\n  };\n\n  Model.prototype.addPointerProperties = function (model) {\n    if (model.p) {\n      model._uniqueID = model.p[0].replace('->', '');\n      model.myUniqueID = model.p[0].replace('->', '');\n      model.p = model.p[1];\n    } else if (model.v) {\n      model._uniqueID = model.v[0].replace('->', '');\n      model.myUniqueID = model.p[0].replace('->', '');\n      model.v = model.v[1];\n    }\n  };\n\n  Model.prototype.getPointerId = function (key) {\n    return this.myPointers[key];\n  };\n\n  Model.prototype.getPointerName = function (key) {\n    var pointerName = this.getPointerId(key);\n\n    if (pointerName) {\n      var name_1 = pointerName.split(Model_1.separator)[0];\n      return name_1 === '_items' ? 'Items' : name_1;\n    } else {\n      return undefined;\n    }\n  };\n\n  var Model_1;\n  Model.separator = '#';\n  Model.collectionItemPrefix = 'KI';\n  Model = Model_1 = __decorate([ExceptionHandlerClass(ErrorCodes.ClientCore), __metadata(\"design:paramtypes\", [Object, Object])], Model);\n  return Model;\n}();\n\nexport { Model }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTW9kZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvQ29yZS9Nb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFtQkEsT0FBTyxFQUFFLFVBQVUsRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUdsRTtJQUtJLGVBQVksUUFBYSxFQUFFLEdBQWU7UUFBOUIseUJBQUEsRUFBQSxhQUFhO1FBQUUsb0JBQUEsRUFBQSxVQUFlO1FBb0JsQyx5QkFBb0IsR0FBRyxDQUFDLHFCQUFxQixFQUFFLFFBQVE7WUFDL0QsY0FBYyxFQUFFLGtCQUFrQixFQUFFLGVBQWUsRUFBRSxjQUFjLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFwQjlFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDNUMsQ0FBQztjQVBRLEtBQUs7SUE4QmQsNkJBQWEsR0FBYjtRQUNJLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQztJQUN4QyxDQUFDO0lBRUQsc0JBQUksMkJBQVE7YUFBWjtZQUNJLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUMzQixDQUFDO2FBRUQsVUFBYSxLQUFhO1lBQ3RCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1lBQ3hCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQyxDQUFTLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsRUFBdEMsQ0FBc0MsQ0FBQyxDQUFDO1FBQy9FLENBQUM7OztPQUxBO0lBT0Qsc0JBQUksOEJBQVc7YUFBZjtZQUNJLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUM5QixDQUFDO2FBRUQsVUFBZ0IsS0FBYztZQUMxQixJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztRQUMvQixDQUFDOzs7T0FKQTtJQU1ELHNCQUFJLDhCQUFXO2FBQWY7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MEJBQW9CLEdBQUcsSUFBSSxDQUFDO0lBSDFCLEtBQUs7UUFEakIscUJBQXFCLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQzs7T0FDaEMsS0FBSyxDQTZWakI7SUFBRCxZQUFDO0NBQUEsQUE3VkQsSUE2VkM7U0E3VlksS0FBSyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4qIENvcHlyaWdodCAoQykgTW9iaWxpemUuTmV0IDxpbmZvQG1vYmlsaXplLm5ldD4gLSBBbGwgUmlnaHRzIFJlc2VydmVkXHJcbipcclxuKiBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgTW9iaWxpemUgRnJhbWV3b3Jrcywgd2hpY2ggaXNcclxuKiBwcm9wcmlldGFyeSBhbmQgY29uZmlkZW50aWFsLlxyXG4qXHJcbiogTk9USUNFOiAgQWxsIGluZm9ybWF0aW9uIGNvbnRhaW5lZCBoZXJlaW4gaXMsIGFuZCByZW1haW5zXHJcbiogdGhlIHByb3BlcnR5IG9mIE1vYmlsaXplLk5ldCBDb3Jwb3JhdGlvbi5cclxuKiBUaGUgaW50ZWxsZWN0dWFsIGFuZCB0ZWNobmljYWwgY29uY2VwdHMgY29udGFpbmVkIGhlcmVpbiBhcmVcclxuKiBwcm9wcmlldGFyeSB0byBNb2JpbGl6ZS5OZXQgQ29ycG9yYXRpb24gYW5kIG1heSBiZSBjb3ZlcmVkXHJcbiogYnkgVS5TLiBQYXRlbnRzLCBhbmQgYXJlIHByb3RlY3RlZCBieSB0cmFkZSBzZWNyZXQgb3IgY29weXJpZ2h0IGxhdy5cclxuKiBEaXNzZW1pbmF0aW9uIG9mIHRoaXMgaW5mb3JtYXRpb24gb3IgcmVwcm9kdWN0aW9uIG9mIHRoaXMgbWF0ZXJpYWxcclxuKiBpcyBzdHJpY3RseSBmb3JiaWRkZW4gdW5sZXNzIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbiBpcyBvYnRhaW5lZFxyXG4qIGZyb20gTW9iaWxpemUuTmV0IENvcnBvcmF0aW9uLlxyXG4qXHJcbiogVGhpcyBmaWxlIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zIGRlZmluZWQgaW5cclxuKiBmaWxlICdMSUNFTlNFLnR4dCcsIHdoaWNoIGlzIHBhcnQgb2YgdGhpcyBzb3VyY2UgY29kZSBwYWNrYWdlLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuaW1wb3J0IHsgSU1vZGVsIH0gZnJvbSAnLi4vQ29udHJhY3QnO1xyXG5pbXBvcnQgeyBFcnJvckNvZGVzLCBFeGNlcHRpb25IYW5kbGVyQ2xhc3MgfSBmcm9tICcuLi9TeXN0ZW0vQW9wJztcclxuXHJcbkBFeGNlcHRpb25IYW5kbGVyQ2xhc3MoRXJyb3JDb2Rlcy5DbGllbnRDb3JlKVxyXG5leHBvcnQgY2xhc3MgTW9kZWwgaW1wbGVtZW50cyBJTW9kZWwge1xyXG5cclxuICAgIHN0YXRpYyBzZXBhcmF0b3IgPSAnIyc7XHJcbiAgICBzdGF0aWMgY29sbGVjdGlvbkl0ZW1QcmVmaXggPSAnS0knO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHVuaXF1ZUlkID0gJycsIG9iajogYW55ID0gbnVsbCkge1xyXG4gICAgICAgIHRoaXMuX19fc2V0SW5pdGlhbFZhbHVlcyh1bmlxdWVJZCwgb2JqKTtcclxuICAgIH1cclxuXHJcbiAgICBjaGlsZHJlblRvTm90aWZ5OiBBcnJheTxJTW9kZWw+O1xyXG4gICAgb25Qcm9wZXJ0eUNoYW5nZTogKHByb3BlcnR5OiBzdHJpbmcsIG9sZFZhbHVlOiBhbnksIG5ld1ZhbHVlOiBhbnkpID0+IHZvaWQ7XHJcblxyXG4gICAgLy8gV2ViTWFwIDUgUHJvcGVydHkgU3VwcG9ydFxyXG4gICAgaWQ6IHN0cmluZztcclxuICAgIG1hcHBlcklkOiBzdHJpbmc7XHJcbiAgICByZWZlcmVuY2VzOiB7IFtwcm9wZXJ0eTogc3RyaW5nXTogc3RyaW5nIH07XHJcbiAgICByZWZlcmVuY2VkQnk6IHsgW21vZGVsSWQ6IHN0cmluZ106IHN0cmluZyB9O1xyXG4gICAgZXZlbnRzOiB7IFtuYW1lOiBzdHJpbmddOiBib29sZWFuIH07XHJcbiAgICBldmVudENoYW5nZXM6IHsgW25hbWU6IHN0cmluZ106IGJvb2xlYW4gfTtcclxuICAgIHN0eWxlUGl2b3Q6IHsgW3Byb3BlcnR5OiBzdHJpbmddOiBhbnkgfTtcclxuICAgIFN0eWxlOiB7IFtwcm9wZXJ0eTogc3RyaW5nXTogYW55IH07XHJcblxyXG4gICAgcHJvdGVjdGVkIG9uTW9kZWxDaGFuZ2U6ICgpID0+IHZvaWQ7XHJcbiAgICBwcml2YXRlIG15VW5pcXVlSUQ6IHN0cmluZztcclxuICAgIHByaXZhdGUgbXlQb2ludGVyczogYW55O1xyXG4gICAgcHJpdmF0ZSBteUludGVybmFsUHJvcGVydGllcyA9IFsnX2ludGVybmFsUHJvcGVydGllcycsICdldmVudHMnLFxyXG4gICAgJ0V2ZW50Q2hhbmdlcycsICdjaGlsZHJlblRvTm90aWZ5JywgJ29uTW9kZWxDaGFuZ2UnLCAnX2lzVGVtcE1vZGVsJywgJ19wb2ludGVycyddO1xyXG4gICAgcHJpdmF0ZSBteUlzVGVtcE1vZGVsOiBib29sZWFuO1xyXG4gICAgcHJpdmF0ZSBteUlzTW9kYWxWaWV3OiBib29sZWFuO1xyXG5cclxuICAgIG5vdGlmaWVyY291bnQoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jaGlsZHJlblRvTm90aWZ5Lmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgVW5pcXVlSUQoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5teVVuaXF1ZUlEO1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBVbmlxdWVJRCh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5teVVuaXF1ZUlEID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5jaGlsZHJlblRvTm90aWZ5LmZvckVhY2goYyA9PiAoYyBhcyBhbnkpLl9fbm90aWZ5KCdVbmlxdWVJRCcsIHZhbHVlKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IElzVGVtcE1vZGVsKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm15SXNUZW1wTW9kZWw7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IElzVGVtcE1vZGVsKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5teUlzVGVtcE1vZGVsID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IElzTW9kYWxWaWV3KCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm15SXNNb2RhbFZpZXc7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IElzTW9kYWxWaWV3KHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5teUlzTW9kYWxWaWV3ID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGlzUG9pbnRlcigpOiBib29sZWFuIHtcclxuICAgICAgICAvKnRzbGludDpkaXNhYmxlOm5vLXN0cmluZy1saXRlcmFsICovXHJcbiAgICAgICAgcmV0dXJuIHRoaXNbJ0BrJ10gPT09IDIgJiYgKHRoaXNbJ3AnXSB8fCB0aGlzWyd2J10pO1xyXG4gICAgfVxyXG5cclxuICAgIF9fbm90aWZ5KHByb3BlcnR5LCB2YWx1ZSk6IHZvaWQge1xyXG4gICAgICAgIGlmIChwcm9wZXJ0eSA9PT0gJ1VuaXF1ZUlEJykge1xyXG4gICAgICAgICAgICB0aGlzLlVuaXF1ZUlEID0gdGhpcy51bmlxdWVOYW1lKCkgKyBNb2RlbC5zZXBhcmF0b3IgKyB2YWx1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzW3Byb3BlcnR5XSA9IHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBfX3N1YnNjcmliZShtb2RlbDogTW9kZWwpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmNoaWxkcmVuVG9Ob3RpZnkucHVzaChtb2RlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkUmVmZXJlbmNlKHByb3BlcnR5OiBzdHJpbmcsIGl0ZW06IElNb2RlbCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmlzQXJyYXkpIHtcclxuICAgICAgICAgICAgdGhpcy5hZGRPbkFycmF5KHRoaXMsIGl0ZW0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXNbcHJvcGVydHldID0gaXRlbTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5maXJlQ2hhbmdlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkVmFsdWUocHJvcGVydHk6IHN0cmluZywgdmFsdWU6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXNbcHJvcGVydHldID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5maXJlQ2hhbmdlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdW5pcXVlTmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLlVuaXF1ZUlELnNwbGl0KE1vZGVsLnNlcGFyYXRvcilbMF07XHJcbiAgICAgICAgcmV0dXJuIG5hbWUgPT09ICdfaXRlbXMnID8gJ0l0ZW1zJyA6IG5hbWU7XHJcbiAgICB9XHJcblxyXG4gICAgcGFyZW50TmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLlVuaXF1ZUlELnN1YnN0cih0aGlzLlVuaXF1ZUlELmluZGV4T2YoTW9kZWwuc2VwYXJhdG9yKSArIE1vZGVsLnNlcGFyYXRvci5sZW5ndGgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlzUm9vdCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5VbmlxdWVJRC5pbmRleE9mKE1vZGVsLnNlcGFyYXRvcikgPT09IC0xO1xyXG4gICAgfVxyXG5cclxuICAgIHBhcmVudE5hbWVLZXkoa2V5OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBrZXkuc3Vic3RyKGtleS5pbmRleE9mKE1vZGVsLnNlcGFyYXRvcikgKyAxKTtcclxuICAgIH1cclxuXHJcbiAgICBpc0NvcmVTeW5jaHJvbml6aW5nKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVNb2RlbChpdGVtOiBJTW9kZWwpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmFwcGx5T25Qcm9wZXJ0aWVzKGl0ZW0sIChwcm9wKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzW3Byb3BdICE9PSBpdGVtW3Byb3BdKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IHRoaXNbcHJvcF07XHJcbiAgICAgICAgICAgICAgICB0aGlzW3Byb3BdID0gaXRlbVtwcm9wXTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9uUHJvcGVydHlDaGFuZ2UgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25Qcm9wZXJ0eUNoYW5nZShwcm9wLCBvbGRWYWx1ZSwgdGhpc1twcm9wXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmZpcmVDaGFuZ2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBhcHBseU9uUHJvcGVydGllcyhpdGVtOiBJTW9kZWwsIGZuOiAocHJvcGVydHk6IGFueSkgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgICAgIGZvciAoY29uc3QgcHJvcCBpbiBpdGVtKSB7XHJcbiAgICAgICAgICAgIC8vIHNraXAgdGhlIGludGVybmFsIHByb3BlcnRpZXMgdGhhdCBzaG91bGRuJ3QgYmUgdXBkYXRlZCB3aGVuIGFwcGx5aW5nIHRoZSBkZWx0YXNcclxuICAgICAgICAgICAgaWYgKGl0ZW0uaGFzT3duUHJvcGVydHkocHJvcCkgJiYgdGhpcy5teUludGVybmFsUHJvcGVydGllcy5pbmRleE9mKHByb3ApID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgZm4uY2FsbCh0aGlzLCBwcm9wKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVNb2RlbChpdGVtOiBJTW9kZWwpOiB2b2lkIHtcclxuICAgICAgICBsZXQgcmVtb3ZlZCA9IGZhbHNlO1xyXG4gICAgICAgIGlmICh0aGlzLmlzQXJyYXkpIHtcclxuICAgICAgICAgICAgcmVtb3ZlZCA9IHRoaXMucmVtb3ZlT25BcnJheShpdGVtKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpc1tpdGVtLnVuaXF1ZU5hbWUoKV0pIHtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzW2l0ZW0udW5pcXVlTmFtZSgpXTtcclxuICAgICAgICAgICAgICAgIHJlbW92ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBwcm9jZXNzaW5nIG9ubHkgbmVjZXNzYXJ5IGlmIGFuIGl0ZW0gd2FzIHJlbW92ZWRcclxuICAgICAgICBpZiAocmVtb3ZlZCkge1xyXG4gICAgICAgICAgICBjb25zdCBpdGVtSW5kZXggPSB0aGlzLmNoaWxkcmVuVG9Ob3RpZnkuaW5kZXhPZihpdGVtKTtcclxuICAgICAgICAgICAgaWYgKGl0ZW1JbmRleCA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuVG9Ob3RpZnkuc3BsaWNlKGl0ZW1JbmRleCwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5maXJlQ2hhbmdlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZpcmVDaGFuZ2UoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMub25Nb2RlbENoYW5nZSkge1xyXG4gICAgICAgICAgICB0aGlzLm9uTW9kZWxDaGFuZ2UoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXBwbHlNZXRob2QobWV0aG9kOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpc1ttZXRob2RdKSB7XHJcbiAgICAgICAgICAgIHRoaXNbbWV0aG9kXSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBoYXNDaXJjdWxhclJlZmVyZW5jZSgpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNBcnJheSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBvYnNlcnZhYmxlOiBhbnlbXSA9IHRoaXMgYXMgYW55O1xyXG4gICAgICAgIGZvciAoY29uc3Qgb2JzIG9mIG9ic2VydmFibGUpIHtcclxuICAgICAgICAgICAgY29uc3QgaXNDaXJjdWxhclJlZmVyZW5jZSA9IHRoaXMuVW5pcXVlSUQuaW5kZXhPZihvYnMuVW5pcXVlSUQpID4gMDtcclxuICAgICAgICAgICAgaWYgKGlzQ2lyY3VsYXJSZWZlcmVuY2UpIHtcclxuICAgICAgICAgICAgICAgIC8vIEV4YW1wbGU6XHJcbiAgICAgICAgICAgICAgICAvLyBHaXZlbiBhbiBhcnJheSB0aGUgZm9sbG93aW5nIFVuaXF1ZUlEOiAgIGl0ZW1zI3Byb3AxI0tJQUJDXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgIGFuZCBhbiBlbGVtZW50IG9mIFVuaXF1ZUlEOiAgICAgICAgICAgICAgIEtJQUJDXHJcbiAgICAgICAgICAgICAgICAvLyBQbGVhc2Ugbm90aWNlIHRoYXQgS0lBQkMgaXMgd2l0aGluIHRoZSBVbmlxdWVJRCBvZiB0aGUgYXJyYXksIHRoaXMgaXMgYSBjaXJjdWxhciByZWZlcmVuY2UuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZFBvaW50ZXJJZChrZXk6IHN0cmluZywgcG9pbnRlcklkOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLm15UG9pbnRlcnNba2V5XSA9IHBvaW50ZXJJZDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRQb3Moa2V5Pzogc3RyaW5nKTogbnVtYmVyIHtcclxuICAgICAgICBsZXQgbmFtZTogc3RyaW5nO1xyXG4gICAgICAgIGlmIChrZXkgJiYgdGhpcy5nZXRQb2ludGVySWQoa2V5KSkge1xyXG4gICAgICAgICAgICBuYW1lID0gdGhpcy5nZXRQb2ludGVyTmFtZShrZXkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIG5hbWUgPSB0aGlzLnVuaXF1ZU5hbWUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5hbWUubWF0Y2goL15cXGQrJC8pID8gTnVtYmVyKG5hbWUpIDogLTE7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGlzQXJyYXkoKTogYW55IHtcclxuICAgICAgICByZXR1cm4gdGhpc1snQGFyciddO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZFZhbHVlQXJyYXkoYXJyYXk6IGFueSwgaXRlbTogYW55LCBpOiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBpZiAoYXJyYXlbaV0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBhcnJheVtpXSA9IGl0ZW07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgYXJyYXkucHVzaChpdGVtKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlVmFsdWVBcmF5KGFycmF5OiBhbnksIHN0YXJ0OiBudW1iZXIsIGNvdW50OiBudW1iZXIpOiB2b2lkIHtcclxuICAgICAgICBhcnJheS5zcGxpY2Uoc3RhcnQsIGNvdW50KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBXZWJNYXAgNSBNZXRob2QgU3VwcG9ydFxyXG4gICAgYWRkUmVmZXJlbmNlZEJ5KG1vZGVsSWQ6IHN0cmluZywgbmFtZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXZWJNYXAgNSBmdW5jdGlvbiBub3QgaW1wbGVtZW50ZWQgaW4gV2ViTWFwIDQnKTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVSZWZlcmVuY2UobmFtZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXZWJNYXAgNSBmdW5jdGlvbiBub3QgaW1wbGVtZW50ZWQgaW4gV2ViTWFwIDQnKTtcclxuICAgIH1cclxuXHJcbiAgICBfX19zZXRJbml0aWFsVmFsdWVzKHVuaXF1ZUlkOiBzdHJpbmcsIG9iajogYW55ID0gbnVsbCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubXlVbmlxdWVJRCA9IHVuaXF1ZUlkO1xyXG4gICAgICAgIHRoaXMubXlJc1RlbXBNb2RlbCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMubXlJc01vZGFsVmlldyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMubXlQb2ludGVycyA9IHt9O1xyXG4gICAgICAgIHRoaXMuYWRkUHJvcGVydGllcyhvYmopO1xyXG4gICAgICAgIHRoaXMuZXZlbnRzID0ge307XHJcbiAgICAgICAgaWYgKG9iaiAmJiBvYmouRXZlbnRDaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRDaGFuZ2VzID0gb2JqLkV2ZW50Q2hhbmdlcztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaXNBcnJheSkge1xyXG4gICAgICAgICAgICB0aGlzLmFkZEFycmF5TWV0aG9kcyh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaXNQb2ludGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkUG9pbnRlclByb3BlcnRpZXModGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2hpbGRyZW5Ub05vdGlmeSA9IG5ldyBBcnJheSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBhZGRQcm9wZXJ0aWVzKG9iajogYW55KTogdm9pZCB7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XHJcbiAgICAgICAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGtleSAhPT0gJ1VuaXF1ZUlEJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXNba2V5XSA9IG9ialtrZXldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYWRkT25BcnJheShhcnJheTogYW55LCBpdGVtOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICBhcnJheS5zcGxpY2UoaXRlbS5nZXRQb3ModGhpcy5VbmlxdWVJRCksIDAsIGl0ZW0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYWRkQXJyYXlNZXRob2RzKGFycmF5OiBhbnkpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmFkZFNwbGljZU1ldGhvZChhcnJheSk7XHJcbiAgICAgICAgdGhpcy5hZGRQdXNoTWV0aG9kKGFycmF5KTtcclxuICAgICAgICB0aGlzLmFkZFNvcnRNZXRob2QoYXJyYXkpO1xyXG4gICAgICAgIC8vIHRoZSBhcnJheSBtZXRob2RzIGFkZCB0aGUgcHJvcGVydHkgJ2xlbmd0aCcgdG8gdGhlIG1vZGVsLCB3aGljaCBzaG91bGQgYmUgaWdub3JlZCBkdXJpbmcgZGVsdGEgdXBkYXRlc1xyXG4gICAgICAgIHRoaXMubXlJbnRlcm5hbFByb3BlcnRpZXMucHVzaCgnbGVuZ3RoJyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhZGRTcGxpY2VNZXRob2QoYXJyYXk6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIGlmICghYXJyYXkuc3BsaWNlKSB7XHJcbiAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5zcGxpY2UuYXBwbHkoYXJyYXkpO1xyXG4gICAgICAgICAgICBhcnJheS5zcGxpY2UgPSBBcnJheS5wcm90b3R5cGUuc3BsaWNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFkZFB1c2hNZXRob2QoYXJyYXk6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIGlmICghYXJyYXkucHVzaCkge1xyXG4gICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShhcnJheSk7XHJcbiAgICAgICAgICAgIGFycmF5LnB1c2ggPSBBcnJheS5wcm90b3R5cGUucHVzaDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhZGRTb3J0TWV0aG9kKGFycmF5OiBhbnkpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIWFycmF5LnNvcnQpIHtcclxuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNvcnQuYXBwbHkoYXJyYXkpO1xyXG4gICAgICAgICAgICBhcnJheS5zb3J0ID0gQXJyYXkucHJvdG90eXBlLnNvcnQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVtb3ZlT25BcnJheShpdGVtOiBJTW9kZWwpOiBib29sZWFuIHtcclxuICAgICAgICBsZXQgcmVtb3ZlZCA9IGZhbHNlO1xyXG4gICAgICAgIGNvbnN0IGFycmF5ID0gKHRoaXMgYXMgYW55KTtcclxuICAgICAgICBpZiAoaXRlbS5nZXRQb3ModGhpcy5VbmlxdWVJRCkgPiAtMSAmJiBhcnJheVtpdGVtLmdldFBvcyh0aGlzLlVuaXF1ZUlEKV0gJiZcclxuICAgICAgICAgICAgaXRlbS5VbmlxdWVJRCA9PT0gYXJyYXlbaXRlbS5nZXRQb3ModGhpcy5VbmlxdWVJRCldLlVuaXF1ZUlEKSB7XHJcbiAgICAgICAgICAgIGFycmF5LnNwbGljZShpdGVtLmdldFBvcyh0aGlzLlVuaXF1ZUlEKSwgMSk7XHJcbiAgICAgICAgICAgIHJlbW92ZWQgPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1JbmRleCA9IHRoaXMuZ2V0UG9zaXRpb25PbkFycmF5KGl0ZW0pO1xyXG4gICAgICAgICAgICBpZiAoaXRlbUluZGV4ID4gLTEpIHtcclxuICAgICAgICAgICAgICAgIGFycmF5LnNwbGljZSh0aGlzLmdldFBvc2l0aW9uT25BcnJheShpdGVtKSwgMSk7XHJcbiAgICAgICAgICAgICAgICByZW1vdmVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVtb3ZlZDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldFBvc2l0aW9uT25BcnJheShpdGVtOiBJTW9kZWwpOiBudW1iZXIge1xyXG4gICAgICAgIGNvbnN0IGFycmF5ID0gKHRoaXMgYXMgYW55KTtcclxuICAgICAgICBsZXQgcG9zaXRpb24gPSAtMTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChpdGVtLlVuaXF1ZUlEID09PSBhcnJheVtpXS5VbmlxdWVJRCkge1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSBpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBvc2l0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYWRkUG9pbnRlclByb3BlcnRpZXMobW9kZWw6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIC8vIHRoZSBvcmlnaW5hbCBqc29uIG9iamVjdCBmb3IgYSBwb2ludGVyIGhhcyBhbiBzdHJ1Y3R1cmUgbGlrZTpcclxuICAgICAgICAvLyB7QGs6MiwgcFsnLT5wcm9wZXJ0eSNvYmplY3QxIzInLCAncHJvcGVyMiNwYW5lbDEjMiddfVxyXG4gICAgICAgIC8vIG9yXHJcbiAgICAgICAgLy8ge0BrOjIsIHZbJy0+dmFsdWUjb2JqZWN0IzInLCAnTXlTdHJpbmcnXX1cclxuICAgICAgICAvLyBhbmQgc2hvdWxkIGJlIHRyYW5zZm9ybWVkIGludG8gc29tZXRoaW5nIGxpa2U6XHJcbiAgICAgICAgLy8ge0BrOjIsIFVuaXF1ZUlEOidwcm9wZXJ0eSNvYmplY3QxIzInLCBwOidwcm9wZXIyI3BhbmVsMSMyJ119XHJcbiAgICAgICAgLy8gb3JcclxuICAgICAgICAvLyB7QGs6MiwgVW5pcXVlSUQ6J3ZhbHVlI29iamVjdCMyJywgdjonTXlTdHJpbmcnXX1cclxuICAgICAgICBpZiAobW9kZWwucCkge1xyXG4gICAgICAgICAgICBtb2RlbC5fdW5pcXVlSUQgPSBtb2RlbC5wWzBdLnJlcGxhY2UoJy0+JywgJycpO1xyXG4gICAgICAgICAgICBtb2RlbC5teVVuaXF1ZUlEID0gbW9kZWwucFswXS5yZXBsYWNlKCctPicsICcnKTtcclxuICAgICAgICAgICAgbW9kZWwucCA9IG1vZGVsLnBbMV07XHJcbiAgICAgICAgfSBlbHNlIGlmIChtb2RlbC52KSB7XHJcbiAgICAgICAgICAgIG1vZGVsLl91bmlxdWVJRCA9IG1vZGVsLnZbMF0ucmVwbGFjZSgnLT4nLCAnJyk7XHJcbiAgICAgICAgICAgIG1vZGVsLm15VW5pcXVlSUQgPSBtb2RlbC5wWzBdLnJlcGxhY2UoJy0+JywgJycpO1xyXG4gICAgICAgICAgICBtb2RlbC52ID0gbW9kZWwudlsxXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRQb2ludGVySWQoa2V5OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLm15UG9pbnRlcnNba2V5XTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldFBvaW50ZXJOYW1lKGtleTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBwb2ludGVyTmFtZSA9IHRoaXMuZ2V0UG9pbnRlcklkKGtleSk7XHJcbiAgICAgICAgaWYgKHBvaW50ZXJOYW1lKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBwb2ludGVyTmFtZS5zcGxpdChNb2RlbC5zZXBhcmF0b3IpWzBdO1xyXG4gICAgICAgICAgICByZXR1cm4gbmFtZSA9PT0gJ19pdGVtcycgPyAnSXRlbXMnIDogbmFtZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=","map":null,"metadata":{},"sourceType":"module"}