{"ast":null,"code":"import { Code39 } from './code39';\nimport deepExtend from '../../common/deep-extend';\nexport const Code39ExtendedBase = {\n  addCharacter(character) {\n    if (this.characterMap[character]) {\n      this.addBase(this.characterMap[character]);\n    } else if (character.charCodeAt(0) > 127) {\n      this.invalidCharacterError(character);\n    } else {\n      this.addExtended(character.charCodeAt(0));\n    }\n  },\n\n  addExtended(code) {\n    let patterns;\n\n    for (let i = 0; i < this.extendedMappings.length; i++) {\n      patterns = this.extendedMappings[i].call(this, code);\n\n      if (patterns) {\n        for (let patternIndex = 0; patternIndex < patterns.length; patternIndex++) {\n          const pattern = patterns[patternIndex];\n          this.addBase(pattern);\n        }\n\n        this.dataLength += patterns.length - 1;\n        return;\n      }\n    }\n  },\n\n  extendedMappings: [function (code) {\n    if (97 <= code && code <= 122) {\n      return [this.characterMap[this.shiftCharacters[0]], this.characterMap[String.fromCharCode(code - 32)]];\n    }\n  }, function (code) {\n    if (33 <= code && code <= 58) {\n      return [this.characterMap[this.shiftCharacters[1]], this.characterMap[String.fromCharCode(code + 32)]];\n    }\n  }, function (code) {\n    if (1 <= code && code <= 26) {\n      return [this.characterMap[this.shiftCharacters[2]], this.characterMap[String.fromCharCode(code + 64)]];\n    }\n  }, function (code) {\n    let result;\n    let dataCharacter;\n\n    if (!this.specialAsciiCodes[code]) {\n      dataCharacter = Math.floor(code / 32) * 6 + (code - 27) % 32 + 64;\n      result = [this.characterMap[this.shiftCharacters[3]], this.characterMap[String.fromCharCode(dataCharacter)]];\n    } else {\n      result = [];\n\n      for (let i = 0; i < this.specialAsciiCodes[code].length; i++) {\n        result.push(this.characterMap[this.shiftCharacters[3]]);\n        result.push(this.characterMap[this.specialAsciiCodes[code][i]]);\n      }\n    }\n\n    return result;\n  }],\n  specialAsciiCodes: {\n    \"0\": [\"U\"],\n    \"64\": [\"V\"],\n    \"96\": [\"W\"],\n    \"127\": [\"T\", \"X\", \"Y\", \"Z\"]\n  },\n  shiftValuesAsciiCodes: {\n    \"39\": 36,\n    \"40\": 47,\n    \"41\": 43,\n    \"42\": 37\n  },\n  characterMap: {\n    \"+\": false,\n    \"/\": false,\n    \"$\": false,\n    \"%\": false\n  },\n  shiftCharacters: [\"SHIFT0\", \"SHIFT1\", \"SHIFT2\", \"SHIFT3\"]\n};\nexport class Code39Extended extends Code39 {\n  initProperties() {\n    super.initProperties();\n    deepExtend(this, Code39ExtendedBase, {\n      name: \"Code 39 extended\",\n      characterMap: {\n        SHIFT0: {\n          \"pattern\": \"bWbwbWbWb\",\n          \"value\": 41\n        },\n        SHIFT1: {\n          \"pattern\": \"bWbWbwbWb\",\n          \"value\": 40\n        },\n        SHIFT2: {\n          \"pattern\": \"bWbWbWbwb\",\n          \"value\": 39\n        },\n        SHIFT3: {\n          \"pattern\": \"bwbWbWbWb\",\n          \"value\": 42\n        }\n      }\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}