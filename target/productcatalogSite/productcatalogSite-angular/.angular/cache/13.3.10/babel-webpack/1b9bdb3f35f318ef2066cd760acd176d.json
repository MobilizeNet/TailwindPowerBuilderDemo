{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1264);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1217:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.resizable\");\n    /***/\n  },\n\n  /***/\n  1262:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.upload\");\n    /***/\n  },\n\n  /***/\n  1263:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.breadcrumb\");\n    /***/\n  },\n\n  /***/\n  1264:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1265), __webpack_require__(1266), __webpack_require__(1267), __webpack_require__(1268), __webpack_require__(1269), __webpack_require__(1263), __webpack_require__(1262), __webpack_require__(1270), __webpack_require__(1217)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"filemanager\",\n        name: \"FileManager\",\n        category: \"web\",\n        description: \"The FileManager widget displays offers file management functionality.\",\n        depends: [\"core\", \"data\", \"listview\", \"toolbar\", \"breadcrumb\", \"menu\", \"treeview\", \"upload\", \"dialog\", \"switch\", \"resizable\", \"selectable\", \"editable\"],\n        features: [{\n          id: \"filemanager-grid-view\",\n          name: \"GridView\",\n          description: \"Support for GridView\",\n          depends: [\"grid\"]\n        }]\n      };\n\n      (function ($, undefined) {\n        var ui = kendo.ui,\n            extend = $.extend,\n            isPlainObject = $.isPlainObject,\n            isArray = Array.isArray,\n            DataBoundWidget = ui.DataBoundWidget,\n            template = kendo.template,\n            outerHeight = kendo._outerHeight,\n            NAVIGATE = \"navigate\",\n            SELECT = \"select\",\n            OPEN = \"open\",\n            ERROR = \"error\",\n            CHANGE = \"change\",\n            UPLOAD = \"upload\",\n            SUCCESS = \"success\",\n            CLOSE = \"close\",\n            HIDE = \"hide\",\n            LOAD = \"load\",\n            DATABINDING = \"dataBinding\",\n            DATABOUND = \"dataBound\",\n            DROP = \"drop\",\n            EXECUTE = \"execute\",\n            COMMAND = \"command\",\n            KEYDOWNACTION = \"keydownAction\",\n            CANCEL = \"cancel\",\n            TREE_TYPE = \"tree\",\n            DOT = \".\";\n        var fileManagerStyles = {\n          wrapper: \"k-widget k-filemanager\",\n          header: \"k-filemanager-header\",\n          navigation: \"k-filemanager-navigation\",\n          contentContainer: \"k-filemanager-content-container\",\n          content: \"k-filemanager-content\",\n          preview: \"k-filemanager-preview\",\n          toolbar: \"k-filemanager-toolbar\",\n          treeview: \"k-filemanager-treeview\",\n          breadcrumb: \"k-filemanager-breadcrumb\",\n          view: \"k-filemanager-view\",\n          grid: \"k-filemanager-grid\",\n          list: \"k-filemanager-listview\",\n          upload: \"k-filemanager-upload\",\n          uploadDialog: \"k-filemanager-upload-dialog\",\n          splitBar: \"k-splitbar\",\n          splitBarHorizontal: \"k-splitbar-horizontal k-splitbar-draggable-horizontal\",\n          splitBarHover: \"k-splitbar-horizontal-hover\",\n          splitBarIcon: \"k-icon k-resize-handle\",\n          splitBarNavigation: \"k-filemanager-splitbar-navigation\",\n          splitBarPreview: \"k-filemanager-splitbar-preview\",\n          resizable: \"k-filemanager-resizable\"\n        };\n        var fileManagerTemplateStyles = {\n          filePreview: \"k-file-preview\",\n          fileInfo: \"k-file-info\",\n          fileName: \"k-file-name\",\n          fileMeta: \"k-file-meta\",\n          metaLabel: \"k-file-meta-label\",\n          metaValue: \"k-file-meta-value\",\n          extension: \"k-file-type\",\n          size: \"k-file-size\",\n          created: \"k-file-created\",\n          modified: \"k-file-modified\"\n        };\n        var viewTypes = {\n          grid: \"grid\",\n          list: \"list\"\n        };\n        var NO_FILE_PREVIEW_TEMPLATE = '' + '<div class=\"#:styles.fileInfo#\">' + '<div class=\"#:styles.filePreview#\">' + '<span class=\"k-file-icon k-icon k-i-none\"></span>' + '</div>' + '<span class=\"#:styles.fileName#\" k-no-file-selected>#: messages.noFileSelected #</span>' + '</div>';\n        var SINGLE_FILES_PREVIEW_TEMPLATE = '' + '<div class=\"#:styles.fileInfo#\">' + '<div class=\"#:styles.filePreview#\">' + '<span class=\"k-file-icon k-icon k-i-#: !selection[0].isDirectory ? kendo.getFileGroup(selection[0].extension, true) : \"folder\" #\"></span>' + '</div>' + '<span class=\"#:styles.fileName#\">#:selection[0].name#</span>' + '#if(metaFields){#' + '<dl class=\"#:styles.fileMeta#\">' + '#for(var i = 0; i < metaFields.length; i+=1){#' + '#var field = metaFields[i]#' + '<dt class=\"#:styles.metaLabel#\">#:messages[field]#: </dt>' + '<dd class=\"#:styles.metaValue# #:styles[field]#\">' + '#if(field == \"size\"){#' + ' #:kendo.getFileSizeMessage(selection[0][field])#' + '#} else if(selection[0][field] instanceof Date) {#' + ' #:kendo.toString(selection[0][field], \"G\")#' + '#} else if(field == \"extension\") {#' + ' #: !selection[0].isDirectory ? kendo.getFileGroup(selection[0].extension) : \"folder\"#' + '#} else {#' + ' #:selection[0][field]#' + '#}#' + '</dd>' + '<dd class=\"k-line-break\"></dd>' + '# } #' + '</dl>' + '#}#' + '</div>';\n        var MULTIPLE_FILES_PREVIEW_TEMPLATE = '' + '<div class=\"#:styles.fileInfo#\">' + '<div class=\"#:styles.filePreview#\">' + '<span class=\"k-file-icon k-icon k-i-file\"></span>' + '</div>' + '<span class=\"#:styles.fileName#\">' + '#:selection.length# ' + '#:messages.items#' + '</span>' + '</div>';\n        var FileManager = DataBoundWidget.extend({\n          init: function (element, options) {\n            var that = this;\n            DataBoundWidget.fn.init.call(that, element, options);\n            that.options = kendo.deepExtend({}, that.options, options);\n            that.defaultSortOption = {\n              field: \"name\",\n              dir: \"asc\"\n            };\n            that.folderSortOption = {\n              field: \"isDirectory\",\n              dir: \"desc\"\n            };\n            that._commandStack = new ui.filemanager.CommandStack();\n\n            that._dataSource();\n\n            that._wrapper();\n\n            that._renderHeader();\n\n            that._renderContentContainer();\n\n            that._initContextMenu();\n\n            that._renderNavigation();\n\n            that._renderContent();\n\n            that._renderPreview();\n\n            that._initUploadDialog();\n\n            that._resizable();\n\n            that.resize();\n            kendo.notify(that, kendo.ui);\n          },\n          options: {\n            name: \"FileManager\",\n            height: 500,\n            resizable: true,\n            initialView: viewTypes.list,\n            toolbar: {\n              resizable: true\n            },\n            contextMenu: {},\n            upload: {},\n            uploadUrl: \"\",\n            views: {},\n            breadcrumb: {},\n            draggable: true,\n            dialogs: {\n              upload: {\n                width: 530\n              },\n              moveConfirm: {\n                width: 350,\n                closable: true\n              },\n              deleteConfirm: {\n                width: 360,\n                closable: true\n              },\n              renamePrompt: {\n                width: 350,\n                closable: true\n              }\n            },\n            previewPane: {\n              metaFields: [\"extension\", \"size\", \"created\", \"modified\"],\n              noFileTemplate: NO_FILE_PREVIEW_TEMPLATE,\n              singleFileTemplate: SINGLE_FILES_PREVIEW_TEMPLATE,\n              multipleFilesTemplate: MULTIPLE_FILES_PREVIEW_TEMPLATE\n            },\n            messages: {\n              toolbar: {\n                createFolder: \"New Folder\",\n                upload: \"Upload\",\n                sortDirection: \"Sort Direction\",\n                sortDirectionAsc: \"Sort Direction Ascending\",\n                sortDirectionDesc: \"Sort Direction Descending\",\n                sortField: \"Sort By\",\n                nameField: \"Name\",\n                sizeField: \"File Size\",\n                typeField: \"Type\",\n                dateModifiedField: \"Date Modified\",\n                dateCreatedField: \"Date Created\",\n                listView: \"List View\",\n                gridView: \"Grid View\",\n                search: \"Search\",\n                details: \"View Details\",\n                detailsChecked: \"On\",\n                detailsUnchecked: \"Off\",\n                \"delete\": \"Delete\",\n                rename: \"Rename\"\n              },\n              views: {\n                nameField: \"Name\",\n                sizeField: \"File Size\",\n                typeField: \"Type\",\n                dateModifiedField: \"Date Modified\",\n                dateCreatedField: \"Date Created\",\n                items: \"items\",\n                listLabel: \"FileManager ListView\",\n                gridLabel: \"FileManager Grid\",\n                treeLabel: \"FileManager TreeView\"\n              },\n              dialogs: {\n                upload: {\n                  title: \"Upload Files\",\n                  clear: \"Clear List\",\n                  done: \"Done\"\n                },\n                moveConfirm: {\n                  title: \"Confirm\",\n                  content: \"<p style='text-align: center;'>Do you want to move or copy?</p>\",\n                  okText: \"Copy\",\n                  cancel: \"Move\",\n                  close: \"close\"\n                },\n                deleteConfirm: {\n                  title: \"Confirm\",\n                  content: \"<p style='text-align: center;'>Are you sure you want to delete the selected file(s)?</br>You cannot undo this action.</p>\",\n                  okText: \"Delete\",\n                  cancel: \"Cancel\",\n                  close: \"close\"\n                },\n                renamePrompt: {\n                  title: \"Prompt\",\n                  content: \"<p style='text-align: center;'>Enter new name for the file.</p>\",\n                  okText: \"Rename\",\n                  cancel: \"Cancel\",\n                  close: \"close\"\n                }\n              },\n              previewPane: {\n                noFileSelected: \"No File Selected\",\n                extension: \"Type\",\n                size: \"Size\",\n                created: \"Date Created\",\n                createdUtc: \"Date Created UTC\",\n                modified: \"Date Modified\",\n                modifiedUtc: \"Date Modified UTC\",\n                items: \"items\"\n              }\n            }\n          },\n          events: [NAVIGATE, SELECT, OPEN, DATABINDING, DATABOUND, ERROR, DROP, EXECUTE, COMMAND],\n          _dataSource: function () {\n            var that = this,\n                options = that.options,\n                dataSourceOptions = options.dataSource || {},\n                typeSortOrder = that.folderSortOption,\n                nameSortOrder = that.defaultSortOption,\n                dataSource;\n\n            if (!(dataSourceOptions instanceof kendo.data.FileManagerDataSource)) {\n              if (isArray(dataSourceOptions)) {\n                dataSource = {\n                  data: dataSourceOptions,\n                  autoSync: false,\n                  sort: [typeSortOrder, nameSortOrder]\n                };\n              } else {\n                dataSource = extend(true, dataSourceOptions, {\n                  autoSync: false,\n                  sort: [typeSortOrder, nameSortOrder]\n                });\n              }\n\n              if (dataSourceOptions && isPlainObject(dataSourceOptions.schema)) {\n                dataSource.schema = dataSourceOptions.schema;\n              } else if (isPlainObject(kendo.data.schemas.filemanager)) {\n                dataSource.schema = kendo.data.schemas.filemanager;\n              }\n            } else {\n              dataSource = dataSourceOptions;\n            }\n\n            if (that.dataSource && that._errorHandler) {\n              that.dataSource.unbind(ERROR, that._errorHandler);\n              that.dataSource.unbind(CHANGE, that._changeHandler);\n            } else {\n              that._errorHandler = that._error.bind(that);\n              that._changeHandler = that._change.bind(that);\n            }\n\n            that.dataSource = kendo.data.FileManagerDataSource.create(dataSource).bind(ERROR, that._errorHandler).bind(CHANGE, that._changeHandler);\n          },\n          _error: function (ev) {\n            if (!this.trigger(ERROR, ev)) {\n              window.console.warn('Error! The requested URL returned ' + ev.xhr.status + ' - ' + ev.xhr.statusText);\n            }\n          },\n          _wrapper: function () {\n            var that = this,\n                options = that.options,\n                width = options.width,\n                height = options.height;\n            that.wrapper = that.element.addClass(fileManagerStyles.wrapper);\n\n            if (width) {\n              that.wrapper.width(width);\n            }\n\n            if (height) {\n              that.wrapper.height(height);\n            }\n\n            that._resizeHandler = kendo.onResize(function () {\n              that.resize(true);\n            });\n          },\n          _renderHeader: function () {\n            var that = this,\n                options = that.options;\n\n            if (options.toolbar) {\n              that.header = $(\"<div />\").addClass(fileManagerStyles.header);\n              that.header.append(that._initToolbar().element);\n            }\n\n            that.wrapper.append(that.header);\n          },\n          _renderContentContainer: function () {\n            var that = this,\n                container = $(\"<div />\").addClass(fileManagerStyles.contentContainer);\n            that.contentContainer = container;\n            that.wrapper.append(that.contentContainer);\n          },\n          _initContextMenu: function () {\n            var that = this,\n                options = that.options,\n                menuOptions = extend({}, options.contextMenu, {\n              filemanager: that,\n              messages: options.messages.toolbar,\n              target: that.contentContainer,\n              filter: \"[data-uid]\",\n              action: that.executeCommand.bind(that),\n              isLocalBinding: that.dataSource.isLocalBinding\n            });\n\n            if (options.contextMenu === false) {\n              return;\n            }\n\n            that.contextMenu = new ui.filemanager.ContextMenu(\"<ul></ul>\", menuOptions);\n            that.contextMenu.bind(OPEN, that._cacheFocus.bind(that));\n          },\n          _renderNavigation: function () {\n            var that = this;\n            that.navigation = $(\"<div />\").addClass(fileManagerStyles.navigation);\n            that.navigation.append(that._initTreeView().element);\n            that.contentContainer.append(that.navigation);\n          },\n          _renderContent: function () {\n            var that = this,\n                options = that.options,\n                toolbar = that.toolbar;\n            that.content = $(\"<div />\").addClass(fileManagerStyles.content);\n\n            if (options.breadcrumb) {\n              that.content.append(that._initBreadcrumb().element);\n            }\n\n            that.content.append(that._initView());\n\n            if (!toolbar || !toolbar.isToolEnabled(toolbar.defaultTools.upload.name)) {\n              that.content.append(that._initUpload().wrapper.hide());\n            }\n\n            that.contentContainer.append(that.content);\n          },\n          _renderPreview: function () {\n            var that = this,\n                enablePreview = that.options.previewPane;\n\n            if (!enablePreview) {\n              return;\n            }\n\n            that.preview = $(\"<div />\").addClass(fileManagerStyles.preview);\n            that.previewContainer = $(\"<div />\").addClass(fileManagerStyles.previewContainer);\n            that.preview.append(that.previewContainer);\n\n            that._setPreviewPaneContent();\n\n            that.contentContainer.append(that.preview.hide());\n          },\n          _setPreviewPaneContent: function () {\n            var that = this,\n                options = that.options,\n                previewPaneMessages = options.messages.previewPane,\n                previewPaneOptions = options.previewPane,\n                selection = that.getSelected(),\n                previewTemplate;\n\n            if (!selection) {\n              previewTemplate = template(previewPaneOptions.noFileTemplate)({\n                styles: fileManagerTemplateStyles,\n                messages: previewPaneMessages\n              });\n              that.previewContainer.html(previewTemplate);\n              return;\n            }\n\n            previewTemplate = selection.length === 1 ? previewPaneOptions.singleFileTemplate : previewPaneOptions.multipleFilesTemplate;\n            previewTemplate = template(previewTemplate)({\n              styles: fileManagerTemplateStyles,\n              messages: previewPaneMessages,\n              selection: selection,\n              metaFields: previewPaneOptions.metaFields\n            });\n            that.previewContainer.html(previewTemplate);\n          },\n          _initToolbar: function () {\n            var that = this,\n                options = that.options,\n                toolbarElement = $(\"<div />\").addClass(fileManagerStyles.toolbar),\n                toolbarOptions = extend({}, options.toolbar, {\n              filemanager: this,\n              messages: options.messages.toolbar,\n              action: that.executeCommand.bind(that)\n            });\n            that.toolbar = new ui.filemanager.ToolBar(toolbarElement, toolbarOptions);\n            return that.toolbar;\n          },\n          _initTreeView: function () {\n            var that = this,\n                treeViewElement = $(\"<div />\").addClass(fileManagerStyles.treeview),\n                options = that.options.views[TREE_TYPE],\n                explicitOptions = extend(true, {}, {\n              dataSource: that.options.dataSource,\n              messages: that.options.messages.views,\n              draggable: that.options.draggable,\n              isLocalBinding: that.dataSource.isLocalBinding\n            });\n            that.treeView = new ui.filemanager.ViewComponents[TREE_TYPE](treeViewElement, options, explicitOptions);\n            that.treeView.bind(NAVIGATE, that._navigate.bind(that)).bind(LOAD, that._load.bind(that)).bind(DROP, that._drop.bind(that)).bind(KEYDOWNACTION, that._keydownAction.bind(that));\n            return that.treeView;\n          },\n          _drop: function (ev) {\n            var that = this;\n\n            if (!that.trigger(DROP, ev) && ev.items.indexOf(ev.target) < 0) {\n              that._confirm({\n                type: \"move\",\n                target: ev.target\n              }).done(function () {\n                that.executeCommand({\n                  command: \"CopyCommand\",\n                  options: ev\n                });\n              }).fail(function () {\n                that.executeCommand({\n                  command: \"MoveCommand\",\n                  options: ev\n                });\n              });\n            }\n          },\n          _keydownAction: function (ev) {\n            var that = this,\n                keyCode = ev.keyCode,\n                keys = kendo.keys;\n\n            if (keyCode === keys.DELETE) {\n              that.executeCommand({\n                command: \"DeleteCommand\",\n                options: {\n                  target: ev.target\n                }\n              });\n            }\n\n            if (keyCode === keys.F2) {\n              that.executeCommand({\n                command: \"RenameCommand\",\n                options: {\n                  target: ev.target\n                }\n              });\n            }\n          },\n          _confirm: function (options) {\n            var that = this,\n                messages = that.options.messages.dialogs[options.type + \"Confirm\"];\n            var confirm = $(\"<div></div>\").kendoConfirm(extend({}, {\n              title: messages.title,\n              content: messages.content,\n              messages: messages\n            }, that.options.dialogs[options.type + \"Confirm\"])).data(\"kendoConfirm\");\n            confirm.bind(OPEN, that._cacheFocus.bind(that));\n            confirm.bind(HIDE, that._restoreFocus.bind(that, options.target));\n            confirm.open();\n            confirm.wrapper.removeClass(\"k-confirm\");\n            return confirm.result;\n          },\n          _prompt: function (options) {\n            var that = this,\n                messages = this.options.messages.dialogs[options.type + \"Prompt\"];\n            var prompt = $(\"<div></div>\").kendoPrompt(extend({}, {\n              title: messages.title,\n              content: messages.content,\n              messages: messages,\n              value: options.defaultInput\n            }, this.options.dialogs[options.type + \"Prompt\"])).data(\"kendoPrompt\");\n            prompt.bind(OPEN, that._cacheFocus.bind(that));\n            prompt.bind(CLOSE, that._restoreFocus.bind(that, options.target));\n            prompt.open();\n            prompt.wrapper.removeClass(\"k-prompt\");\n            return prompt.result;\n          },\n          _cacheFocus: function () {\n            var that = this,\n                activeElement = $(document.activeElement),\n                view = that.view(),\n                treeView = that.treeView.widgetComponent;\n\n            if (that.contextMenu && that.contextMenu.popup.visible()) {\n              return;\n            }\n\n            that.treeView._shouldFocus = false;\n\n            if (treeView.current() && treeView.current().find(\".k-state-focused\").length || activeElement.hasClass(fileManagerStyles.treeview)) {\n              that.treeView._shouldFocus = true;\n              view._focusElement = activeElement;\n              return;\n            }\n\n            view._focusElement = activeElement.hasClass(fileManagerStyles[that._viewType]) ? activeElement : null;\n          },\n          _restoreFocus: function (target) {\n            var that = this,\n                view = that.view();\n\n            if (!target) {\n              return;\n            }\n\n            if (view._focusElement) {\n              view._focusElement.trigger(\"focus\");\n            } else if (target.closest && target.closest(\":kendoFocusable\").length) {\n              target.closest(\":kendoFocusable\").trigger(\"focus\");\n            }\n          },\n          _initView: function () {\n            var that = this,\n                viewWrapper = $(\"<div />\").addClass(fileManagerStyles.view),\n                initialView = that.options.initialView;\n            that.viewWrapper = viewWrapper;\n            that.viewWrapper.append(that.view(initialView));\n            return viewWrapper;\n          },\n          _initBreadcrumb: function () {\n            var that = this,\n                options = that.options,\n                breadcrumbElement = $(\"<nav />\").addClass(fileManagerStyles.breadcrumb),\n                breadcrumbOptions = extend({}, {\n              items: [{\n                type: \"rootitem\",\n                text: \"\"\n              }],\n              change: that._breadcrumbChange.bind(that)\n            }, options.breadcrumb);\n            that.breadcrumb = new ui.Breadcrumb(breadcrumbElement, breadcrumbOptions);\n            return that.breadcrumb;\n          },\n          _breadcrumbChange: function (ev) {\n            var entry = ev.sender.items().filter(function (item) {\n              return item.path === ev.value.substring(1);\n            }).shift();\n\n            this._navigate({\n              path: entry ? entry.id : \"\"\n            });\n          },\n          _initUploadDialog: function () {\n            var that = this,\n                options = that.options,\n                dialogMessages = options.messages.dialogs.upload,\n                dialogElement = $(\"<div />\"),\n                dialogOptions = extend({}, {\n              title: dialogMessages.title,\n              modal: true,\n              visible: false,\n              width: 500,\n              actions: [{\n                text: dialogMessages.clear,\n                action: that._clearUploadFilesList.bind(that)\n              }, {\n                text: dialogMessages.done,\n                primary: true\n              }],\n              messages: dialogMessages\n            }, options.dialogs.upload),\n                uploadInstance;\n\n            if (!that._shouldInitUpload()) {\n              return;\n            }\n\n            uploadInstance = that._initUpload();\n            that.uploadDialog = new ui.Dialog(dialogElement, dialogOptions);\n            that.uploadDialog.wrapper.addClass(fileManagerStyles.uploadDialog);\n            that.uploadDialog.element.append(uploadInstance.wrapper);\n            that.uploadDialog.bind(OPEN, that._toggleUploadDropZone.bind(that, \"\"));\n            that.uploadDialog.bind(CLOSE, that._toggleUploadDropZone.bind(that, that.viewWrapper));\n            return that.uploadDialog;\n          },\n          _shouldInitUpload: function () {\n            var that = this,\n                options = that.options,\n                shouldInit = false;\n\n            if ((options.uploadUrl || options.upload.async && options.upload.async.saveUrl) && options.upload !== false) {\n              shouldInit = true;\n            }\n\n            return shouldInit;\n          },\n          _initUpload: function () {\n            var that = this,\n                options = that.options,\n                uploadElement = $(\"<input type='file' name='file'/>\").addClass(fileManagerStyles.upload),\n                uploadOptions = extend(true, {\n              async: {\n                autoUpload: true,\n                saveUrl: options.uploadUrl\n              },\n              dropZone: that.viewWrapper\n            }, options.upload);\n            that.upload = new ui.Upload(uploadElement[0], uploadOptions);\n            that.upload.bind(UPLOAD, that._sendUploadPathParameter.bind(that));\n            that.upload.bind(SUCCESS, that._success.bind(that));\n            return that.upload;\n          },\n          _sendUploadPathParameter: function (ev) {\n            ev.data = extend(ev.data, {\n              path: this.path()\n            });\n          },\n          _success: function () {\n            this._view.widgetComponent.dataSource.read();\n          },\n          _clearUploadFilesList: function () {\n            var that = this,\n                upload = that.upload;\n\n            if (upload) {\n              upload.clearAllFiles();\n            }\n          },\n          _toggleUploadDropZone: function (zone) {\n            var that = this,\n                upload = that.upload;\n\n            if (upload) {\n              upload.setOptions({\n                dropZone: zone\n              });\n            }\n          },\n          _binding: function (ev) {\n            if (this.trigger(DATABINDING, {\n              source: \"view\",\n              action: ev.action,\n              items: ev.items,\n              index: ev.index\n            })) {\n              ev.preventDefault();\n            }\n          },\n          _bound: function () {\n            if (this.options.previewPane) {\n              this._setPreviewPaneContent();\n            }\n\n            this.trigger(DATABOUND);\n          },\n          _createResizableSplitBar: function (cssClass) {\n            var splitBar = $(\"<div />\").addClass(fileManagerStyles.splitBar).addClass(fileManagerStyles.splitBarHorizontal).addClass(cssClass),\n                icon = $(\"<span />\").addClass(fileManagerStyles.splitBarIcon);\n            splitBar.append(icon);\n            splitBar.hover(function () {\n              $(this).toggleClass(fileManagerStyles.splitBarHover);\n            });\n            return splitBar;\n          },\n          _initResizableNavigation: function () {\n            var that = this,\n                wrapper = that.wrapper,\n                splitBar = that._createResizableSplitBar(fileManagerStyles.splitBarNavigation),\n                contentWrapper = wrapper.find(DOT + fileManagerStyles.content),\n                navigationWrapper = wrapper.find(DOT + fileManagerStyles.navigation),\n                contentWrapperWidth,\n                navigationWrapperWidth;\n\n            splitBar.insertAfter(navigationWrapper);\n            that._resizeDraggable.navigation = that.wrapper.find(splitBar).end().kendoResizable({\n              handle: DOT + fileManagerStyles.splitBarNavigation,\n              start: function () {\n                contentWrapperWidth = contentWrapper.width();\n                navigationWrapperWidth = navigationWrapper.width();\n              },\n              resize: function (e) {\n                var delta = e.x.initialDelta;\n\n                if (kendo.support.isRtl(wrapper)) {\n                  delta *= -1;\n                }\n\n                if (navigationWrapperWidth + delta < -2 || contentWrapperWidth - delta < -2) {\n                  return;\n                }\n\n                navigationWrapper.width(navigationWrapperWidth + delta);\n              }\n            }).getKendoResizable();\n          },\n          _initResizablePreview: function () {\n            var that = this,\n                wrapper = that.wrapper,\n                splitBar = that._createResizableSplitBar(fileManagerStyles.splitBarPreview),\n                contentWrapper = wrapper.find(DOT + fileManagerStyles.content),\n                previewWrapper = wrapper.find(DOT + fileManagerStyles.preview),\n                contentWrapperWidth,\n                previewWrapperWidth;\n\n            if (!that.options.previewPane) {\n              return;\n            }\n\n            splitBar.insertBefore(previewWrapper).hide();\n            that._resizeDraggable.preview = wrapper.find(splitBar).end().kendoResizable({\n              handle: DOT + fileManagerStyles.splitBarPreview,\n              start: function () {\n                contentWrapperWidth = contentWrapper.width();\n                previewWrapperWidth = previewWrapper.width();\n              },\n              resize: function (e) {\n                var delta = e.x.initialDelta;\n\n                if (kendo.support.isRtl(wrapper)) {\n                  delta *= -1;\n                }\n\n                if (previewWrapperWidth - delta < -2 || contentWrapperWidth + delta < -2) {\n                  return;\n                }\n\n                previewWrapper.width(previewWrapperWidth - delta);\n              }\n            }).getKendoResizable();\n          },\n          _resizable: function () {\n            var that = this,\n                options = that.options;\n            that._resizeDraggable = {};\n\n            if (!options.resizable) {\n              return;\n            }\n\n            that.wrapper.addClass(fileManagerStyles.resizable);\n\n            that._initResizableNavigation();\n\n            that._initResizablePreview();\n          },\n          view: function (type) {\n            var that = this,\n                element = $('<div aria-label=\"' + that.options.messages.views[type + \"Label\"] + '\"></div>'),\n                options = that.options.views[type],\n                explicitOptions = extend(true, {}, {\n              dataSource: that._viewDataSource || that.dataSource,\n              messages: that.options.messages.views,\n              draggable: that.options.draggable\n            });\n\n            if (type === undefined) {\n              return that._view;\n            }\n\n            if (!ui.filemanager.ViewComponents[type]) {\n              throw new Error(kendo.format(\"There is no {0} ViewComponent registered!\", type));\n            }\n\n            if (that._view && that._view.destroy) {\n              that._view.destroy();\n\n              that.viewWrapper.empty();\n            }\n\n            that._viewType = type;\n            that._view = new ui.filemanager.ViewComponents[type](element, options, explicitOptions);\n\n            that._view.bind(SELECT, that._select.bind(that));\n\n            that._view.bind(OPEN, that._open.bind(that));\n\n            that._view.bind(DATABINDING, that._binding.bind(that));\n\n            that._view.bind(DATABOUND, that._bound.bind(that));\n\n            that._view.bind(DROP, that._drop.bind(that));\n\n            that._view.bind(KEYDOWNACTION, that._keydownAction.bind(that));\n\n            that._view.bind(CANCEL, that._cancel.bind(that));\n\n            that._view.element.addClass(fileManagerStyles[type]);\n\n            that.viewWrapper.removeClass(Object.keys(ui.filemanager.ViewComponents).map(function (el) {\n              return fileManagerStyles.view + \"-\" + el;\n            }).join(\" \")).addClass(fileManagerStyles.view + \"-\" + type);\n            that.viewWrapper.append(that._view.element);\n          },\n          executeCommand: function (args) {\n            var commandName = args.command,\n                commandOptions = extend({\n              filemanager: this\n            }, isPlainObject(args.options) ? args.options : {\n              value: args.options\n            }),\n                command = new ui.filemanager.commands[commandName](commandOptions);\n\n            if (!this.trigger(EXECUTE, args)) {\n              return command.exec();\n            }\n          },\n          _navigate: function (ev) {\n            var that = this,\n                path = ev.path;\n\n            if (!that.trigger(NAVIGATE, {\n              path: path\n            })) {\n              that.navigate(path);\n            }\n          },\n          _load: function (ev) {\n            var entry = this.dataSource.get(ev.entryId);\n            entry.load();\n          },\n          _select: function (ev) {\n            if (this.options.previewPane) {\n              this._setPreviewPaneContent();\n            }\n\n            this.trigger(SELECT, {\n              entries: ev.entries\n            });\n          },\n          _open: function (ev) {\n            var that = this,\n                entry = ev.entry;\n            that.trigger(OPEN, {\n              entry: entry\n            });\n\n            if (entry.isDirectory) {\n              that._navigate({\n                path: entry.id\n              });\n            }\n          },\n          _cancel: function () {\n            var that = this,\n                commandStack = that._commandStack,\n                command = commandStack.next();\n            commandStack.reject(command);\n            that.trigger(COMMAND, {\n              status: \"cancel\",\n              action: \"itemchange\",\n              data: command.data\n            });\n          },\n          _change: function (ev) {\n            var that = this,\n                commandStack = that._commandStack,\n                targetDataSource = ev.node ? ev.node.children : that.dataSource;\n\n            if (that.trigger(DATABINDING, {\n              source: \"tree\",\n              action: ev.action,\n              items: ev.items,\n              index: ev.index\n            })) {\n              return;\n            }\n\n            that.treeView._refreshDataSource(ev);\n\n            if (ev.action === \"remove\" || ev.action === \"itemchange\" || ev.action === \"add\") {\n              if (commandStack.empty()) {\n                targetDataSource.sync();\n              } else {\n                var command = commandStack.next();\n                targetDataSource.sync().then(function (res) {\n                  commandStack.resolve(command);\n                  that.trigger(COMMAND, {\n                    status: \"success\",\n                    action: ev.action,\n                    data: command.data,\n                    response: res\n                  });\n                }).fail(function (res) {\n                  commandStack.reject(command);\n                  that.trigger(COMMAND, {\n                    status: \"fail\",\n                    action: ev.action,\n                    data: command.data,\n                    response: res\n                  });\n                });\n              }\n            }\n\n            if (ev.action === \"remove\" && that._viewDataSource && that._viewDataSource.parent() && ev.items[0] === that._viewDataSource.parent()) {\n              that._navigateToParent(ev.items[0]);\n            }\n\n            if (ev.action == \"itemchange\" && that._viewDataSource && that._viewDataSource.parent() && that.path().indexOf(ev.items[0].id) >= 0) {\n              that._navigateToParent(ev.items[0]);\n            }\n\n            if (ev.action === \"itemchange\") {\n              ev.items[0].loaded(false);\n            }\n          },\n          _navigateToParent: function (item) {\n            var that = this;\n            var parent = item.parentNode();\n            var parentNodePath = parent ? parent.id : \"\";\n\n            that._navigate({\n              path: parentNodePath\n            });\n          },\n          _buildBreadcrumbPath: function (entry) {\n            var that = this,\n                breadcrumb = that.breadcrumb,\n                items = [];\n\n            while (entry) {\n              items.push({\n                id: entry.id,\n                text: entry.name,\n                path: entry.path\n              });\n              entry = entry.parentNode && entry.parentNode();\n            }\n\n            items.push({\n              type: \"rootItem\",\n              id: \"\",\n              text: \"\"\n            });\n            breadcrumb.items(items.reverse());\n          },\n          _adjustDimensions: function () {\n            var that = this,\n                wrapper = that.wrapper,\n                gridSelector = DOT + fileManagerStyles.grid,\n                listViewSelector = DOT + fileManagerStyles.list,\n                contentContainer = DOT + fileManagerStyles.contentContainer,\n                totalHeight = wrapper.height(),\n                toolbarHeight = 0,\n                breadcrumbHeight = 0;\n\n            if (that.toolbar) {\n              toolbarHeight = outerHeight(that.toolbar.wrapper);\n            }\n\n            if (that.breadcrumb) {\n              breadcrumbHeight = outerHeight(that.breadcrumb.wrapper);\n            }\n\n            if (that.options.height !== \"auto\") {\n              wrapper.find([gridSelector].join(\",\")).height(totalHeight - (toolbarHeight + breadcrumbHeight + 1));\n              wrapper.find(listViewSelector).parent().height(totalHeight - (toolbarHeight + breadcrumbHeight + 1));\n              wrapper.find(contentContainer).height(totalHeight - toolbarHeight);\n            }\n          },\n          _resize: function () {\n            this._adjustDimensions();\n\n            kendo.resize(this.element.children());\n          },\n          setDataSource: function (dataSource) {\n            var that = this;\n            that.options.dataSource = dataSource;\n\n            that._dataSource();\n\n            if (that.toolbar) {\n              that.toolbar.destroy();\n              that.header.empty();\n              that.header.append(that._initToolbar().element);\n            }\n\n            if (that.treeView) {\n              that.treeView.destroy();\n              that.navigation.empty();\n              that.navigation.append(that._initTreeView().element);\n            }\n\n            if (that._view) {\n              that.view(that._viewType || that.options.initialView);\n            }\n\n            that._initContextMenu();\n          },\n          refresh: function () {\n            var that = this,\n                dataSource = that._viewDataSource || that.dataSource;\n            dataSource.read();\n          },\n          getSize: function () {\n            return kendo.dimensions(this.wrapper);\n          },\n          getSelected: function () {\n            var that = this,\n                items = that._view.getSelected(),\n                treeView = that.treeView;\n\n            if (items && items.length) {\n              return items;\n            }\n\n            var item = treeView.getSelected();\n\n            if (item) {\n              return [that.dataSource.get(item.id)];\n            }\n          },\n          path: function () {\n            return this._path || \"\";\n          },\n          navigate: function (path) {\n            var that = this,\n                dataSource = that.dataSource,\n                entry = dataSource.get(path.replace(/^\\//, \"\")),\n                view = that._view,\n                treeView = that.treeView,\n                breadcrumb = that.breadcrumb,\n                isRoot = path === \"\" || path === \"/\";\n\n            if (!entry && !isRoot) {\n              window.console.warn('Error! Could not navigate to the folder at the requested path(' + path + '). Make sure that the parent folder of the target folder has already been loaded.');\n              return;\n            }\n\n            that._path = path;\n\n            if (that.trigger(DATABINDING, {\n              source: \"navigation\",\n              action: \"rebind\",\n              items: [entry]\n            })) {\n              return;\n            }\n\n            if (breadcrumb) {\n              that._buildBreadcrumbPath(entry);\n            }\n\n            if (isRoot) {\n              dataSource.sort([that.folderSortOption, that.defaultSortOption]);\n              that._viewDataSource = dataSource;\n              view.refresh(that._viewDataSource);\n              treeView.treeView.select($());\n\n              if (that.options.previewPane) {\n                that._setPreviewPaneContent();\n              }\n\n              return;\n            }\n\n            if (entry.loaded && !entry.loaded()) {\n              entry.load();\n            }\n\n            if (view) {\n              that._viewDataSource = entry.children;\n              that._viewDataSource._sort = [that.folderSortOption, that.defaultSortOption];\n              view.refresh(that._viewDataSource);\n            }\n\n            if (treeView) {\n              treeView.refresh(entry.id);\n            }\n\n            if (that.options.previewPane) {\n              that._setPreviewPaneContent();\n            }\n          },\n          items: function () {\n            var that = this;\n            return that.treeView.widgetComponent.items().add(that._view.widgetComponent.items());\n          },\n          destroy: function () {\n            var that = this;\n            DataBoundWidget.fn.destroy.call(that);\n            that.dataSource.unbind(ERROR, that._errorHandler).unbind(CHANGE, that._changeHandler);\n\n            if (that._resizeDraggable.navigation) {\n              that._resizeDraggable.navigation.destroy();\n\n              that._resizeDraggable.navigation = null;\n            }\n\n            if (that._resizeDraggable.preview) {\n              that._resizeDraggable.preview.destroy();\n\n              that._resizeDraggable.preview = null;\n            }\n\n            if (that.uploadDialog) {\n              that.uploadDialog.destroy();\n              that.uploadDialog = null;\n            }\n\n            if (that.upload) {\n              that.upload.destroy();\n              that.upload = null;\n            }\n\n            if (that.contextMenu) {\n              that.contextMenu.destroy();\n              that.contextMenu = null;\n            }\n\n            kendo.unbindResize(that._resizeHandler);\n            that.dataSource = null;\n            that._viewDataSource = null;\n            kendo.destroy(that.element);\n          }\n        });\n        ui.plugin(FileManager);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1265:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./filemanager/commands\");\n    /***/\n  },\n\n  /***/\n  1266:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./filemanager/view\");\n    /***/\n  },\n\n  /***/\n  1267:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./filemanager/toolbar\");\n    /***/\n  },\n\n  /***/\n  1268:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./filemanager/data\");\n    /***/\n  },\n\n  /***/\n  1269:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./filemanager/contextmenu\");\n    /***/\n  },\n\n  /***/\n  1270:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.dialog\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}