{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Inject } from '../Application';\nimport { Constants, Events } from '../Contract';\nimport { ErrorCodes, ExceptionHandlerClass } from '../System/Aop';\n\nvar ChangeNotifier = function () {\n  function ChangeNotifier(inject) {\n    if (inject === void 0) {\n      inject = null;\n    }\n\n    this.inject = inject || Inject.Instance;\n    this.event = this.inject.resolve(Constants.EventAggregator);\n  }\n\n  ChangeNotifier.prototype.apply = function (model) {\n    var _this = this;\n\n    model['__onchange'] = function (property) {\n      if (!model.isCoreSynchronizing()) {\n        _this.event.publish(Events.Change, {\n          model: model,\n          property: property\n        });\n      }\n    };\n  };\n\n  ChangeNotifier = __decorate([ExceptionHandlerClass(ErrorCodes.ClientCore), __metadata(\"design:paramtypes\", [Object])], ChangeNotifier);\n  return ChangeNotifier;\n}();\n\nexport { ChangeNotifier }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hhbmdlTm90aWZpZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvQ29yZS9DaGFuZ2VOb3RpZmllci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFrQkEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3hDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFxRCxNQUFNLGFBQWEsQ0FBQztBQUNuRyxPQUFPLEVBQUUsVUFBVSxFQUFFLHFCQUFxQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR2xFO0lBRUksd0JBQVksTUFBc0I7UUFBdEIsdUJBQUEsRUFBQSxhQUFzQjtRQUM5QixJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ3hDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFLRCw4QkFBSyxHQUFMLFVBQU0sS0FBYTtRQUFuQixpQkFPQztRQUxHLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxVQUFDLFFBQVE7WUFDM0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxFQUFFO2dCQUM5QixLQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsS0FBSyxPQUFBLEVBQUUsUUFBUSxVQUFBLEVBQUUsQ0FBQyxDQUFDO2FBQzFEO1FBQ0wsQ0FBQyxDQUFDO0lBQ04sQ0FBQztJQWpCUSxjQUFjO1FBRDFCLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUM7O09BQ2hDLGNBQWMsQ0FrQjFCO0lBQUQscUJBQUM7Q0FBQSxBQWxCRCxJQWtCQztTQWxCWSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiogQ29weXJpZ2h0IChDKSBNb2JpbGl6ZS5OZXQgPGluZm9AbW9iaWxpemUubmV0PiAtIEFsbCBSaWdodHMgUmVzZXJ2ZWRcclxuKlxyXG4qIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIHRoZSBNb2JpbGl6ZSBGcmFtZXdvcmtzLCB3aGljaCBpc1xyXG4qIHByb3ByaWV0YXJ5IGFuZCBjb25maWRlbnRpYWwuXHJcbipcclxuKiBOT1RJQ0U6ICBBbGwgaW5mb3JtYXRpb24gY29udGFpbmVkIGhlcmVpbiBpcywgYW5kIHJlbWFpbnNcclxuKiB0aGUgcHJvcGVydHkgb2YgTW9iaWxpemUuTmV0IENvcnBvcmF0aW9uLlxyXG4qIFRoZSBpbnRlbGxlY3R1YWwgYW5kIHRlY2huaWNhbCBjb25jZXB0cyBjb250YWluZWQgaGVyZWluIGFyZVxyXG4qIHByb3ByaWV0YXJ5IHRvIE1vYmlsaXplLk5ldCBDb3Jwb3JhdGlvbiBhbmQgbWF5IGJlIGNvdmVyZWRcclxuKiBieSBVLlMuIFBhdGVudHMsIGFuZCBhcmUgcHJvdGVjdGVkIGJ5IHRyYWRlIHNlY3JldCBvciBjb3B5cmlnaHQgbGF3LlxyXG4qIERpc3NlbWluYXRpb24gb2YgdGhpcyBpbmZvcm1hdGlvbiBvciByZXByb2R1Y3Rpb24gb2YgdGhpcyBtYXRlcmlhbFxyXG4qIGlzIHN0cmljdGx5IGZvcmJpZGRlbiB1bmxlc3MgcHJpb3Igd3JpdHRlbiBwZXJtaXNzaW9uIGlzIG9idGFpbmVkXHJcbiogZnJvbSBNb2JpbGl6ZS5OZXQgQ29ycG9yYXRpb24uXHJcbipcclxuKiBUaGlzIGZpbGUgaXMgc3ViamVjdCB0byB0aGUgdGVybXMgYW5kIGNvbmRpdGlvbnMgZGVmaW5lZCBpblxyXG4qIGZpbGUgJ0xJQ0VOU0UudHh0Jywgd2hpY2ggaXMgcGFydCBvZiB0aGlzIHNvdXJjZSBjb2RlIHBhY2thZ2UuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5pbXBvcnQgeyBJbmplY3QgfSBmcm9tICcuLi9BcHBsaWNhdGlvbic7XHJcbmltcG9ydCB7IENvbnN0YW50cywgRXZlbnRzLCBJRXZlbnRBZ2dyZWdhdG9yLCBJSW5qZWN0LCBJTW9kZWwsIElNb2RlbE5vdGlmaWVyIH0gZnJvbSAnLi4vQ29udHJhY3QnO1xyXG5pbXBvcnQgeyBFcnJvckNvZGVzLCBFeGNlcHRpb25IYW5kbGVyQ2xhc3MgfSBmcm9tICcuLi9TeXN0ZW0vQW9wJztcclxuXHJcbkBFeGNlcHRpb25IYW5kbGVyQ2xhc3MoRXJyb3JDb2Rlcy5DbGllbnRDb3JlKVxyXG5leHBvcnQgY2xhc3MgQ2hhbmdlTm90aWZpZXIgaW1wbGVtZW50cyBJTW9kZWxOb3RpZmllciB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoaW5qZWN0OiBJSW5qZWN0ID0gbnVsbCkge1xyXG4gICAgICAgIHRoaXMuaW5qZWN0ID0gaW5qZWN0IHx8IEluamVjdC5JbnN0YW5jZTtcclxuICAgICAgICB0aGlzLmV2ZW50ID0gdGhpcy5pbmplY3QucmVzb2x2ZShDb25zdGFudHMuRXZlbnRBZ2dyZWdhdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGV2ZW50OiBJRXZlbnRBZ2dyZWdhdG9yO1xyXG4gICAgcHJpdmF0ZSBpbmplY3Q6IElJbmplY3Q7XHJcblxyXG4gICAgYXBwbHkobW9kZWw6IElNb2RlbCk6IHZvaWQge1xyXG4gICAgICAgIC8qdHNsaW50OmRpc2FibGU6bm8tc3RyaW5nLWxpdGVyYWwgKi9cclxuICAgICAgICBtb2RlbFsnX19vbmNoYW5nZSddID0gKHByb3BlcnR5KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghbW9kZWwuaXNDb3JlU3luY2hyb25pemluZygpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50LnB1Ymxpc2goRXZlbnRzLkNoYW5nZSwgeyBtb2RlbCwgcHJvcGVydHkgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbiJdfQ==","map":null,"metadata":{},"sourceType":"module"}