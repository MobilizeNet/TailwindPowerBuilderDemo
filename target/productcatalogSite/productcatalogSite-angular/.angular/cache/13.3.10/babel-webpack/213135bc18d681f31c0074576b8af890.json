{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { WMLogger } from '@mobilize/logging';\nimport { Dictionary, Inject } from '../Application';\nimport { Constants, Events, Order } from '../Contract';\nimport { ErrorCodes, ExceptionHandlerClass } from '../System/Aop';\nvar METHODNOTIMPLEMENTED = 'Method not implemented.';\n\nvar ModelResolver = function () {\n  function ModelResolver(inject) {\n    if (inject === void 0) {\n      inject = null;\n    }\n\n    this.inject = inject;\n    this.inject = inject || Inject.Instance;\n    this.modelFactory = this.inject.resolve(Constants.ModelFactory);\n    this.event = this.inject.resolve(Constants.EventAggregator);\n    this.behaviors = new Dictionary();\n    this.requiredBehaviors = new Dictionary();\n    this.notifiers = new Array();\n    this.myIsSynchronizing = false;\n\n    this.PreProcessArray = function () {};\n\n    this.PostProcessArray = function () {};\n  }\n\n  ModelResolver.prototype.init = function (buffer) {\n    this.buffer = buffer;\n  };\n\n  ModelResolver.prototype.registerNotifier = function (notifier) {\n    if (this.notifiers.some(function (item) {\n      return item === notifier;\n    })) {\n      this.notifiers[this.notifiers.indexOf(notifier)] = notifier;\n    } else {\n      this.notifiers.push(notifier);\n    }\n  };\n\n  ModelResolver.prototype.registerBehavior = function (behavior, required) {\n    if (required === void 0) {\n      required = false;\n    }\n\n    if (!this.behaviors.containsKey(behavior.Order.toString())) {\n      this.behaviors.add(behavior.Order.toString(), []);\n    } else if (required) {\n      if (!this.requiredBehaviors.containsKey(behavior.Order.toString())) {\n        this.requiredBehaviors.add(behavior.Order.toString(), []);\n      }\n\n      this.addBehavior(behavior, this.requiredBehaviors);\n    }\n\n    this.addBehavior(behavior, this.behaviors);\n  };\n\n  ModelResolver.prototype.process = function () {\n    var behaviors = this.getBehaviors(this.behaviors);\n    this.applyBehaviors(behaviors, this.buffer.toArray());\n    this.resolveArrayDeltas(this.buffer.toArray().filter(function (model) {\n      return model['@arr'];\n    }));\n  };\n\n  ModelResolver.prototype.attachModels = function (modelDeltas) {\n    var _this = this;\n\n    this.myIsSynchronizing = true;\n    var models = this.propagateDeltas(modelDeltas);\n    var newModels = models[0];\n    var modifiedModels = models[1];\n    var stubModels = this.createMissingHierarchy(newModels);\n    newModels = newModels.concat(stubModels);\n    var behaviors = this.getBehaviors(this.behaviors);\n    this.applyBehaviors(behaviors, newModels);\n    var requiredBehaviors = this.getBehaviors(this.requiredBehaviors);\n    this.applyBehaviors(requiredBehaviors, modifiedModels);\n    this.resolveArrayDeltas(modelDeltas.filter(function (model) {\n      return model.UniqueID.length > 0 && _this.buffer.getModel(model.UniqueID)['@arr'];\n    }));\n    this.myIsSynchronizing = false;\n  };\n\n  ModelResolver.prototype.removeModels = function (models) {\n    var _this = this;\n\n    this.myIsSynchronizing = true;\n    models.forEach(function (model) {\n      _this.detachModel(model);\n\n      _this.buffer.deleteCascade(model.UniqueID);\n    });\n    this.myIsSynchronizing = false;\n  };\n\n  ModelResolver.prototype.switchIds = function (ids) {\n    var _this = this;\n\n    ids.forEach(function (item) {\n      return _this.buffer.switchIds(item[0], item[1]);\n    });\n  };\n\n  ModelResolver.prototype.isCoreSynchronizing = function () {\n    return this.myIsSynchronizing;\n  };\n\n  ModelResolver.prototype.detachModel = function (model) {\n    var parent = this.buffer.getParentByModel(model);\n\n    if (parent) {\n      parent.removeModel(model);\n    }\n  };\n\n  ModelResolver.prototype.getBehaviors = function (collection) {\n    if (collection === void 0) {\n      collection = this.behaviors;\n    }\n\n    return {\n      evt: this.notifiers,\n      ord: collection.value(Order.ORD.toString()) || [],\n      post: collection.value(Order.POST.toString()) || [],\n      pre: collection.value(Order.PRE.toString()) || []\n    };\n  };\n\n  ModelResolver.prototype.applyBehaviors = function (behaviors, models) {\n    var _this = this;\n\n    models.forEach(function (model) {\n      return _this.attachIsSynchronizingClient(model);\n    });\n    behaviors.pre.forEach(function (behavior) {\n      models.forEach(function (model) {\n        return _this.tryApplyBehaviors(behavior, model);\n      });\n    });\n    behaviors.ord.forEach(function (behavior) {\n      models.forEach(function (model) {\n        return _this.tryApplyBehaviors(behavior, model);\n      });\n    });\n    behaviors.post.forEach(function (behavior) {\n      models.forEach(function (model) {\n        return _this.tryApplyBehaviors(behavior, model);\n      });\n    });\n    behaviors.evt.forEach(function (notify) {\n      models.forEach(function (model) {\n        return _this.tryApplyBehaviors(notify, model);\n      });\n    });\n  };\n\n  ModelResolver.prototype.replaceBehavior = function (oldBehaviorName, behavior) {\n    var items = this.behaviors.value(behavior.Order.toString()) || [];\n\n    if (items.length > 0) {\n      var oldBehavior = items.filter(function (item) {\n        return item.constructor.name === oldBehaviorName;\n      });\n\n      if (oldBehavior != null) {\n        items[items.indexOf(oldBehavior[0])] = behavior;\n      } else {\n        this.registerBehavior(behavior);\n      }\n    } else {\n      this.registerBehavior(behavior);\n    }\n  };\n\n  ModelResolver.prototype.resolveAdded = function (addedModels) {\n    throw new Error(METHODNOTIMPLEMENTED);\n  };\n\n  ModelResolver.prototype.resolveChanged = function (changedModels) {\n    throw new Error(METHODNOTIMPLEMENTED);\n  };\n\n  ModelResolver.prototype.resolveRemoved = function (removedIds) {\n    var _this = this;\n\n    this.myIsSynchronizing = true;\n    removedIds.forEach(function (id) {\n      var model = _this.modelFactory.create({\n        UniqueID: id\n      });\n\n      if (model) {\n        _this.detachModel(model);\n\n        _this.buffer.deleteCascade(model.UniqueID);\n      }\n    });\n    this.myIsSynchronizing = false;\n  };\n\n  ModelResolver.prototype.removePendingActions = function () {\n    this.event.publish(Events.DeletePendingActions, this.buffer.removedModels);\n    this.buffer.removedModels = [];\n  };\n\n  ModelResolver.prototype.resolveValueTypeArray = function (models, Observable) {\n    var index;\n\n    for (index = 0; index < models.length; index++) {\n      Observable.addValueArray(Observable, models[index], index);\n    }\n\n    return index;\n  };\n\n  ModelResolver.prototype.resolveStateObjectAndSurrogateArray = function (models, Observable) {\n    var index;\n\n    for (index = 0; index < models.Count; index++) {\n      var element = this.buffer.getModel(models.uids[index]);\n\n      if (element !== null) {\n        Observable.addValueArray(Observable, element, index);\n      } else {\n        Observable.addValueArray(Observable, this.modelFactory.create({\n          UniqueID: ''\n        }), index);\n      }\n    }\n\n    return index;\n  };\n\n  ModelResolver.prototype.resolveObjectArray = function (models, Observable) {\n    var index;\n\n    for (index = 0; index < models.Count; index++) {\n      var element = this.buffer.getModel(models.uids[index]);\n\n      if (element !== null) {\n        Observable.addValueArray(Observable, element, index);\n      } else {\n        Observable.addValueArray(Observable, models.uids[index], index);\n      }\n    }\n\n    return index;\n  };\n\n  ModelResolver.prototype.resolveArrayDeltas = function (arrayDeltas) {\n    for (var _i = 0, arrayDeltas_1 = arrayDeltas; _i < arrayDeltas_1.length; _i++) {\n      var iter = arrayDeltas_1[_i];\n      this.PreProcessArray(iter);\n      var delta = iter;\n      var arrayObservable = this.buffer.getModel(delta.UniqueID);\n\n      if (!arrayObservable.isRoot() && !arrayObservable.isPointer) {\n        var index = void 0;\n\n        switch (delta['ltype']) {\n          case 1:\n            index = this.resolveValueTypeArray(delta['uids'], arrayObservable);\n            break;\n\n          case 2:\n          case 3:\n            index = this.resolveStateObjectAndSurrogateArray(delta, arrayObservable);\n            break;\n\n          case 4:\n            index = this.resolveObjectArray(delta, arrayObservable);\n            break;\n        }\n\n        if (delta['uids'].length < arrayObservable['length']) {\n          arrayObservable.removeValueAray(arrayObservable, index, arrayObservable['length'] - delta['uids'].length);\n        }\n      }\n\n      this.PostProcessArray(delta);\n\n      if (!arrayObservable.hasCircularReference()) {\n        arrayObservable.fireChange();\n      }\n    }\n  };\n\n  ModelResolver.prototype.addBehavior = function (behavior, collection) {\n    var items = collection.value(behavior.Order.toString());\n\n    if (items.some(function (item) {\n      return item === behavior;\n    })) {\n      items[items.indexOf(behavior)] = behavior;\n    } else {\n      items.push(behavior);\n    }\n  };\n\n  ModelResolver.prototype.propagateDeltas = function (modelDeltas) {\n    var _this = this;\n\n    var newModels = [];\n    var updateModels = [];\n    modelDeltas.forEach(function (item) {\n      if (item.UniqueID.length > 0) {\n        if (_this.buffer.exists(item)) {\n          _this.updateModel(item);\n\n          updateModels.push(item);\n        } else {\n          newModels.push(item);\n\n          _this.buffer.add(item);\n        }\n      }\n    });\n    return [newModels, updateModels];\n  };\n\n  ModelResolver.prototype.attachIsSynchronizingClient = function (model) {\n    var _this = this;\n\n    var item = this.buffer.getModel(model.UniqueID);\n\n    item.isCoreSynchronizing = function () {\n      return _this.isCoreSynchronizing();\n    };\n  };\n\n  ModelResolver.prototype.updateModel = function (item) {\n    var model = this.buffer.getModel(item.UniqueID);\n\n    if (model) {\n      model.updateModel(item);\n    } else {\n      WMLogger.instance().error('This models is not in the buffer. Please check the Backend response in the removed area.');\n    }\n  };\n\n  ModelResolver.prototype.tryApplyBehaviors = function (behavior, model) {\n    try {\n      behavior.apply(this.buffer.getModel(model.UniqueID), this.buffer);\n    } catch (e) {\n      WMLogger.instance().error(\"Error procesing an behavior \" + e + e.stack);\n    }\n  };\n\n  ModelResolver.prototype.createMissingHierarchy = function (models) {\n    var stubModels = [];\n\n    for (var _i = 0, models_1 = models; _i < models_1.length; _i++) {\n      var mod = models_1[_i];\n      var hierarchy = this.createMissingParent(mod, this.buffer);\n\n      if (hierarchy.length > 0) {\n        stubModels = stubModels.concat(hierarchy);\n      }\n    }\n\n    return stubModels;\n  };\n\n  ModelResolver.prototype.createMissingParent = function (model, buffer) {\n    var stubModels = [];\n\n    if (!model.isRoot()) {\n      var parent_1 = buffer.getParentByModel(model);\n\n      if (!parent_1) {\n        var parentData = {\n          UniqueID: model.parentName()\n        };\n\n        if (!isNaN(parseFloat(model.uniqueName()))) {\n          parentData['@arr'] = 1;\n        }\n\n        var parentStub = this.modelFactory.create(parentData);\n        stubModels.push(parentStub);\n        buffer.add(parentStub);\n        var hierarchy = this.createMissingParent(parentStub, buffer);\n\n        if (hierarchy.length > 0) {\n          stubModels = stubModels.concat(hierarchy);\n        }\n      }\n    }\n\n    return stubModels;\n  };\n\n  ModelResolver = __decorate([ExceptionHandlerClass(ErrorCodes.ClientCore), __metadata(\"design:paramtypes\", [Object])], ModelResolver);\n  return ModelResolver;\n}();\n\nexport { ModelResolver }; //# sourceMappingURL=data:application/json;base64,","map":null,"metadata":{},"sourceType":"module"}