{"ast":null,"code":"import { logToConsole } from '../drawing-utils';\n\nclass FontLoader {\n  static fetchFonts(options, fonts, state = {\n    depth: 0\n  }) {\n    const MAX_DEPTH = 5;\n\n    if (!options || state.depth > MAX_DEPTH || !document.fonts) {\n      return;\n    }\n\n    Object.keys(options).forEach(function (key) {\n      const value = options[key];\n\n      if (key === \"dataSource\" || key[0] === \"$\" || !value) {\n        return;\n      }\n\n      if (key === \"font\") {\n        fonts.push(value);\n      } else if (typeof value === \"object\") {\n        state.depth++;\n        FontLoader.fetchFonts(value, fonts, state);\n        state.depth--;\n      }\n    });\n  }\n\n  static loadFonts(fonts, callback) {\n    let promises = [];\n\n    if (fonts.length > 0 && document.fonts) {\n      try {\n        promises = fonts.map(function (font) {\n          return document.fonts.load(font);\n        });\n      } catch (e) {\n        // Silence font-loading errors\n        logToConsole(e);\n      }\n\n      Promise.all(promises).then(callback, callback);\n    } else {\n      callback();\n    }\n  }\n\n  static preloadFonts(options, callback) {\n    const fonts = [];\n    FontLoader.fetchFonts(options, fonts);\n    FontLoader.loadFonts(fonts, callback);\n  }\n\n}\n\nexport default FontLoader;","map":null,"metadata":{},"sourceType":"module"}