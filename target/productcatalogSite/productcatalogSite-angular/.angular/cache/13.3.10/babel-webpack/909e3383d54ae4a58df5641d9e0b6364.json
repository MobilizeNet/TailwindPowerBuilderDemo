{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1435);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1060:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"jquery\");\n    /***/\n  },\n\n  /***/\n  1217:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.resizable\");\n    /***/\n  },\n\n  /***/\n  1435:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n    /* WEBPACK VAR INJECTION */\n\n\n    (function (jQuery) {\n      (function (f, define) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1217)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n      })(function () {\n        var __meta__ = {\n          // jshint ignore:line\n          id: \"splitter\",\n          name: \"Splitter\",\n          category: \"web\",\n          description: \"The Splitter widget provides an easy way to create a dynamic layout of resizable and collapsible panes.\",\n          depends: [\"resizable\"]\n        };\n\n        (function ($, undefined) {\n          var kendo = window.kendo,\n              ui = kendo.ui,\n              keys = kendo.keys,\n              extend = $.extend,\n              Widget = ui.Widget,\n              pxUnitsRegex = /^\\d+(\\.\\d+)?px$/i,\n              percentageUnitsRegex = /^\\d+(\\.\\d+)?%$/i,\n              NS = \".kendoSplitter\",\n              EXPAND = \"expand\",\n              COLLAPSE = \"collapse\",\n              CONTENTLOAD = \"contentLoad\",\n              ERROR = \"error\",\n              RESIZE = \"resize\",\n              LAYOUTCHANGE = \"layoutChange\",\n              HORIZONTAL = \"horizontal\",\n              VERTICAL = \"vertical\",\n              MOUSEENTER = \"mouseenter\",\n              CLICK = \"click\",\n              PANE = \"pane\",\n              MOUSELEAVE = \"mouseleave\",\n              FOCUSED = \"k-state-focused\",\n              KPANE = \"k-\" + PANE,\n              PANECLASS = \".\" + KPANE,\n              TABINDEX = \"tabindex\",\n              ARIA_VALUEMIN = \"aria-valuemin\",\n              ARIA_VALUEMAX = \"aria-valuemax\",\n              ARIA_VALUENOW = \"aria-valuenow\",\n              ARIA_CONTROLS = \"aria-controls\",\n              ARIA_LABEL = \"aria-label\",\n              ARIA_LABELLEDBY = \"aria-labelledby\",\n              ARIA_ORIENTATION = \"aria-orientation\";\n\n          function isPercentageSize(size) {\n            return percentageUnitsRegex.test(size);\n          }\n\n          function isPixelSize(size) {\n            return pxUnitsRegex.test(size) || /^\\d+$/.test(size);\n          }\n\n          function isFluid(size) {\n            return !isPercentageSize(size) && !isPixelSize(size);\n          }\n\n          function calculateSize(size, total) {\n            var output = parseInt(size, 10);\n\n            if (isPercentageSize(size)) {\n              output = Math.floor(output * total / 100);\n            }\n\n            return output;\n          }\n\n          function panePropertyAccessor(propertyName, triggersResize) {\n            return function (pane, value) {\n              var paneConfig = this.element.find(pane).data(PANE);\n\n              if (arguments.length == 1) {\n                return paneConfig[propertyName];\n              }\n\n              paneConfig[propertyName] = value;\n\n              if (triggersResize) {\n                var splitter = this.element.data(\"kendo\" + this.options.name);\n                splitter.resize(true);\n              }\n            };\n          }\n\n          var Splitter = Widget.extend({\n            init: function (element, options) {\n              var that = this,\n                  isHorizontal;\n              Widget.fn.init.call(that, element, options);\n              that.wrapper = that.element;\n\n              if (that.options.orientation) {\n                isHorizontal = that.options.orientation.toLowerCase() != VERTICAL;\n              }\n\n              that.orientation = isHorizontal ? HORIZONTAL : VERTICAL;\n              that._dimension = isHorizontal ? \"width\" : \"height\";\n              that._keys = {\n                decrease: isHorizontal ? keys.LEFT : keys.UP,\n                increase: isHorizontal ? keys.RIGHT : keys.DOWN\n              };\n              that._resizeStep = 10;\n              that._marker = kendo.guid().substring(0, 8);\n\n              that._initPanes();\n\n              that.resizing = new PaneResizing(that);\n              that.element.triggerHandler(\"init\" + NS);\n            },\n            events: [EXPAND, COLLAPSE, CONTENTLOAD, ERROR, RESIZE, LAYOUTCHANGE],\n            _addOverlays: function () {\n              this._panes().append(\"<div class='k-splitter-overlay k-overlay' />\");\n            },\n            _removeOverlays: function () {\n              this._panes().children(\".k-splitter-overlay\").remove();\n            },\n            _attachEvents: function () {\n              var that = this,\n                  orientation = that.options.orientation; // do not use delegated events to increase performance of nested elements\n\n              that.element.children(\".k-splitbar-draggable-\" + orientation).on(\"keydown\" + NS, that._keydown.bind(that)).on(\"mousedown\" + NS, function (e) {\n                e.currentTarget.focus();\n              }).on(\"focus\" + NS, function (e) {\n                $(e.currentTarget).addClass(FOCUSED);\n              }).on(\"blur\" + NS, function (e) {\n                $(e.currentTarget).removeClass(FOCUSED);\n\n                if (that.resizing) {\n                  that.resizing.end();\n                }\n              }).on(MOUSEENTER + NS, function () {\n                $(this).addClass(\"k-splitbar-\" + that.orientation + \"-hover\");\n              }).on(MOUSELEAVE + NS, function () {\n                $(this).removeClass(\"k-splitbar-\" + that.orientation + \"-hover\");\n              }).on(\"mousedown\" + NS, that._addOverlays.bind(that)).end().children(\".k-splitbar\").on(\"dblclick\" + NS, that._togglePane.bind(that)).children(\".k-collapse-next, .k-collapse-prev\").on(CLICK + NS, that._arrowClick(COLLAPSE)).end().children(\".k-expand-next, .k-expand-prev\").on(CLICK + NS, that._arrowClick(EXPAND)).end().end();\n              $(window).on(\"resize\" + NS + that._marker, that.resize.bind(that, false));\n              $(document).on(\"mouseup\" + NS + that._marker, that._removeOverlays.bind(that));\n            },\n            _detachEvents: function () {\n              var that = this;\n              that.element.children(\".k-splitbar-draggable-\" + that.orientation).off(NS).end().children(\".k-splitbar\").off(\"dblclick\" + NS).children(\".k-collapse-next, .k-collapse-prev, .k-expand-next, .k-expand-prev\").off(NS);\n              $(window).off(NS + that._marker);\n              $(document).off(NS + that._marker);\n            },\n            options: {\n              name: \"Splitter\",\n              orientation: HORIZONTAL,\n              panes: []\n            },\n            destroy: function () {\n              Widget.fn.destroy.call(this);\n\n              this._detachEvents();\n\n              if (this.resizing) {\n                this.resizing.destroy();\n              }\n\n              kendo.destroy(this.element);\n              this.wrapper = this.element = null;\n            },\n            _keydown: function (e) {\n              var that = this,\n                  key = e.keyCode,\n                  resizing = that.resizing,\n                  target = $(e.currentTarget),\n                  navigationKeys = that._keys,\n                  increase = key === navigationKeys.increase,\n                  decrease = key === navigationKeys.decrease,\n                  pane;\n\n              if (increase || decrease) {\n                if (e.ctrlKey) {\n                  pane = target[decrease ? \"next\" : \"prev\"]();\n\n                  if (resizing && resizing.isResizing()) {\n                    resizing.end();\n                  }\n\n                  if (!pane[that._dimension]()) {\n                    that._triggerAction(EXPAND, pane);\n                  } else {\n                    that._triggerAction(COLLAPSE, target[decrease ? \"prev\" : \"next\"]());\n                  }\n                } else if (resizing) {\n                  resizing.move((decrease ? -1 : 1) * that._resizeStep, target);\n                }\n\n                e.preventDefault();\n              } else if (key === keys.HOME) {\n                pane = target.prev();\n                that.collapse(pane);\n                e.preventDefault();\n              } else if (key === keys.END) {\n                pane = target.prev();\n                that.expand(pane);\n                e.preventDefault();\n              } else if (key === keys.ENTER && resizing) {\n                resizing.end();\n                e.preventDefault();\n              }\n            },\n            _initPanes: function () {\n              var panesConfig = this.options.panes || [];\n              var that = this;\n              this.element.addClass(\"k-widget\").addClass(\"k-splitter\").children().each(function (i, pane) {\n                if (pane.nodeName.toLowerCase() != \"script\") {\n                  that._initPane(pane, panesConfig[i]);\n                }\n              });\n              this.resize();\n            },\n            _initPane: function (pane, config) {\n              pane = $(pane).attr(\"role\", \"group\").addClass(KPANE);\n              pane.data(PANE, config ? config : {}).toggleClass(\"k-scrollable\", config ? config.scrollable !== false : true);\n              this.ajaxRequest(pane);\n            },\n            ajaxRequest: function (pane, url, data) {\n              var that = this,\n                  paneConfig;\n              pane = that.element.find(pane);\n              paneConfig = pane.data(PANE);\n              url = url || paneConfig.contentUrl;\n\n              if (url) {\n                pane.append(\"<span class='k-icon k-i-loading k-pane-loading' />\");\n\n                if (kendo.isLocalUrl(url)) {\n                  jQuery.ajax({\n                    url: url,\n                    data: data || {},\n                    type: \"GET\",\n                    dataType: \"html\",\n                    success: function (data) {\n                      that.angular(\"cleanup\", function () {\n                        return {\n                          elements: pane.get()\n                        };\n                      });\n                      pane.html(data);\n                      that.angular(\"compile\", function () {\n                        return {\n                          elements: pane.get()\n                        };\n                      });\n                      that.trigger(CONTENTLOAD, {\n                        pane: pane[0]\n                      });\n                    },\n                    error: function (xhr, status) {\n                      that.trigger(ERROR, {\n                        pane: pane[0],\n                        status: status,\n                        xhr: xhr\n                      });\n                    }\n                  });\n                } else {\n                  pane.removeClass(\"k-scrollable\").html(\"<iframe src='\" + url + \"' frameborder='0' class='k-content-frame'>\" + \"This page requires frames in order to show content\" + \"</iframe>\");\n                }\n              }\n            },\n            _triggerAction: function (type, pane) {\n              if (!this.trigger(type, {\n                pane: pane[0]\n              })) {\n                this[type](pane[0]);\n              }\n            },\n            _togglePane: function (e) {\n              var that = this,\n                  target = $(e.target),\n                  arrow;\n\n              if (target.closest(\".k-splitter\")[0] != that.element[0]) {\n                return;\n              }\n\n              arrow = target.children(\".k-icon:not(.k-resize-handle)\");\n\n              if (arrow.length !== 1) {\n                return;\n              }\n\n              if (arrow.is(\".k-collapse-prev\")) {\n                that._triggerAction(COLLAPSE, target.prev());\n              } else if (arrow.is(\".k-collapse-next\")) {\n                that._triggerAction(COLLAPSE, target.next());\n              } else if (arrow.is(\".k-expand-prev\")) {\n                that._triggerAction(EXPAND, target.prev());\n              } else if (arrow.is(\".k-expand-next\")) {\n                that._triggerAction(EXPAND, target.next());\n              }\n            },\n            _arrowClick: function (arrowType) {\n              var that = this;\n              return function (e) {\n                var target = $(e.target),\n                    pane;\n\n                if (target.closest(\".k-splitter\")[0] != that.element[0]) {\n                  return;\n                }\n\n                if (target.is(\".k-\" + arrowType + \"-prev\")) {\n                  pane = target.parent().prev();\n                } else {\n                  pane = target.parent().next();\n                }\n\n                that._triggerAction(arrowType, pane);\n              };\n            },\n            _updateSplitBar: function (splitbar, previousPane, nextPane, previousPaneEl) {\n              var catIconIf = function (iconType, condition) {\n                return condition ? \"<div class='k-icon \" + iconType + \"'></div>\" : \"\";\n              },\n                  orientation = this.orientation,\n                  draggable = previousPane.resizable !== false && nextPane.resizable !== false,\n                  prevCollapsible = previousPane.collapsible,\n                  prevCollapsed = previousPane.collapsed,\n                  nextCollapsible = nextPane.collapsible,\n                  nextCollapsed = nextPane.collapsed,\n                  previousPaneId = previousPaneEl.attr(\"id\");\n\n              if (!previousPaneId) {\n                previousPaneId = kendo.guid();\n                previousPaneEl.attr(\"id\", previousPaneId);\n              }\n\n              splitbar.addClass(\"k-splitbar k-splitbar-\" + orientation).attr(\"role\", \"separator\").attr(ARIA_VALUEMIN, \"0\").attr(ARIA_VALUEMAX, \"100\").attr(ARIA_CONTROLS, previousPaneId).removeClass(\"k-splitbar-\" + orientation + \"-hover\").toggleClass(\"k-splitbar-draggable-\" + orientation, draggable && !prevCollapsed && !nextCollapsed).toggleClass(\"k-splitbar-static-\" + orientation, !draggable && !prevCollapsible && !nextCollapsible).html(catIconIf(\"k-collapse-prev k-i-arrow-60-up\", prevCollapsible && !prevCollapsed && !nextCollapsed && orientation == VERTICAL) + catIconIf(\"k-collapse-prev k-i-arrow-60-left\", prevCollapsible && !prevCollapsed && !nextCollapsed && orientation == HORIZONTAL) + catIconIf(\"k-expand-prev k-i-arrow-60-down\", prevCollapsible && prevCollapsed && !nextCollapsed && orientation == VERTICAL) + catIconIf(\"k-expand-prev k-i-arrow-60-right\", prevCollapsible && prevCollapsed && !nextCollapsed && orientation == HORIZONTAL) + catIconIf(\"k-resize-handle k-i-hbar\", draggable && orientation == VERTICAL) + catIconIf(\"k-resize-handle k-i-vbar\", draggable && orientation == HORIZONTAL) + catIconIf(\"k-collapse-next k-i-arrow-60-down\", nextCollapsible && !nextCollapsed && !prevCollapsed && orientation == VERTICAL) + catIconIf(\"k-collapse-next k-i-arrow-60-right\", nextCollapsible && !nextCollapsed && !prevCollapsed && orientation == HORIZONTAL) + catIconIf(\"k-expand-next k-i-arrow-60-up\", nextCollapsible && nextCollapsed && !prevCollapsed && orientation == VERTICAL) + catIconIf(\"k-expand-next k-i-arrow-60-left\", nextCollapsible && nextCollapsed && !prevCollapsed && orientation == HORIZONTAL));\n\n              if (previousPane.labelId) {\n                splitbar.attr(ARIA_LABELLEDBY, previousPane.labelId);\n              } else if (previousPane.label) {\n                splitbar.attr(ARIA_LABEL, previousPane.label);\n              }\n\n              if (orientation == HORIZONTAL) {\n                splitbar.attr(ARIA_ORIENTATION, VERTICAL);\n              }\n\n              if (!draggable && !prevCollapsible && !nextCollapsible) {\n                splitbar.removeAttr(TABINDEX);\n              }\n            },\n            _updateSplitBars: function () {\n              var that = this;\n              this.element.children(\".k-splitbar\").each(function () {\n                var splitbar = $(this),\n                    previousPaneEl = splitbar.prevAll(PANECLASS).first(),\n                    previousPane = previousPaneEl.data(PANE),\n                    nextPane = splitbar.nextAll(PANECLASS).first().data(PANE);\n\n                if (!nextPane) {\n                  return;\n                }\n\n                that._updateSplitBar(splitbar, previousPane, nextPane, previousPaneEl);\n              });\n            },\n            _removeSplitBars: function () {\n              this.element.children(\".k-splitbar\").remove();\n            },\n            _panes: function () {\n              if (!this.element) {\n                return $();\n              }\n\n              return this.element.children(PANECLASS);\n            },\n            _resetAriaValueNow: function (splitBars, panesSizes) {\n              var i, splitbar, valueNow, joinDimension;\n\n              for (i = 0; i < splitBars.length; i++) {\n                joinDimension = panesSizes[i] + panesSizes[i + 1] || 1;\n                valueNow = Math.round(panesSizes[i] / joinDimension * 100);\n                splitbar = splitBars[i];\n                splitbar.setAttribute(ARIA_VALUENOW, valueNow);\n              }\n            },\n            _resize: function () {\n              var that = this,\n                  element = that.element,\n                  panes = element.children(PANECLASS),\n                  isHorizontal = that.orientation == HORIZONTAL,\n                  splitBars = element.children(\".k-splitbar\"),\n                  splitBarsCount = splitBars.length,\n                  sizingProperty = isHorizontal ? \"width\" : \"height\",\n                  totalSize = element[sizingProperty](),\n                  panesSizes = [];\n              that.wrapper.addClass(\"k-splitter-resizing\");\n\n              if (splitBarsCount === 0) {\n                splitBarsCount = panes.length - 1;\n                panes.slice(0, splitBarsCount).after(\"<div tabindex='0' class='k-splitbar' data-marker='\" + that._marker + \"' />\");\n\n                that._updateSplitBars();\n\n                splitBars = element.children(\".k-splitbar\");\n              } else {\n                that._updateSplitBars();\n              } // discard splitbar sizes from total size\n\n\n              splitBars.each(function () {\n                totalSize -= this[isHorizontal ? \"offsetWidth\" : \"offsetHeight\"];\n              });\n              var sizedPanesWidth = 0,\n                  sizedPanesCount = 0,\n                  freeSizedPanes = $();\n              panes.css({\n                position: \"absolute\",\n                top: 0\n              })[sizingProperty](function () {\n                var element = $(this),\n                    config = element.data(PANE) || {},\n                    size;\n                element.removeClass(\"k-state-collapsed\");\n\n                if (config.collapsed) {\n                  size = config.collapsedSize ? calculateSize(config.collapsedSize, totalSize) : 0;\n                  element.css(\"overflow\", \"hidden\").addClass(\"k-state-collapsed\");\n                } else if (isFluid(config.size)) {\n                  freeSizedPanes = freeSizedPanes.add(this);\n                  panesSizes.push(false);\n                  return;\n                } else {\n                  // sized in px/%, not collapsed\n                  size = calculateSize(config.size, totalSize);\n                }\n\n                sizedPanesCount++;\n                sizedPanesWidth += size;\n                panesSizes.push(size);\n                return size;\n              });\n              totalSize -= sizedPanesWidth;\n              var freeSizePanesCount = freeSizedPanes.length,\n                  freeSizePaneWidth = Math.floor(totalSize / freeSizePanesCount);\n              freeSizedPanes.slice(0, freeSizePanesCount - 1).css(sizingProperty, freeSizePaneWidth).end().eq(freeSizePanesCount - 1).css(sizingProperty, totalSize - (freeSizePanesCount - 1) * freeSizePaneWidth);\n              panesSizes.forEach(function (size, i) {\n                if (size === false) {\n                  panesSizes[i] = freeSizePaneWidth;\n                }\n              });\n\n              that._resetAriaValueNow(splitBars, panesSizes); // arrange panes\n\n\n              var sum = 0,\n                  alternateSizingProperty = isHorizontal ? \"height\" : \"width\",\n                  positioningProperty = isHorizontal ? \"left\" : \"top\",\n                  sizingDomProperty = isHorizontal ? \"offsetWidth\" : \"offsetHeight\";\n\n              if (freeSizePanesCount === 0) {\n                var lastNonCollapsedPane = panes.filter(function () {\n                  return !($(this).data(PANE) || {}).collapsed;\n                }).last();\n                lastNonCollapsedPane[sizingProperty](totalSize + lastNonCollapsedPane[0][sizingDomProperty]);\n              }\n\n              element.children().css(alternateSizingProperty, element[alternateSizingProperty]()).each(function (i, child) {\n                if (child.tagName.toLowerCase() != \"script\") {\n                  child.style[positioningProperty] = Math.floor(sum) + \"px\";\n                  sum += child[sizingDomProperty];\n                }\n              });\n\n              that._detachEvents();\n\n              that._attachEvents();\n\n              that.wrapper.removeClass(\"k-splitter-resizing\");\n              kendo.resize(panes);\n              that.trigger(LAYOUTCHANGE);\n            },\n            toggle: function (pane, expand) {\n              var that = this,\n                  paneConfig;\n              pane = that.element.find(pane);\n              paneConfig = pane.data(PANE);\n\n              if (!expand && !paneConfig.collapsible) {\n                return;\n              }\n\n              if (arguments.length == 1) {\n                expand = paneConfig.collapsed === undefined ? false : paneConfig.collapsed;\n              }\n\n              paneConfig.collapsed = !expand;\n\n              if (paneConfig.collapsed) {\n                pane.css(\"overflow\", \"hidden\");\n              } else {\n                pane.css(\"overflow\", \"\");\n              }\n\n              that.resize(true);\n            },\n            collapse: function (pane) {\n              this.toggle(pane, false);\n            },\n            expand: function (pane) {\n              this.toggle(pane, true);\n            },\n            _addPane: function (config, idx, paneElement) {\n              var that = this;\n\n              if (paneElement.length) {\n                that.options.panes.splice(idx, 0, config);\n\n                that._initPane(paneElement, config);\n\n                that._removeSplitBars();\n\n                that.resize(true);\n              }\n\n              return paneElement;\n            },\n            append: function (config) {\n              config = config || {};\n              var that = this,\n                  paneElement = $(\"<div />\").appendTo(that.element);\n              return that._addPane(config, that.options.panes.length, paneElement);\n            },\n            insertBefore: function (config, referencePane) {\n              referencePane = $(referencePane);\n              config = config || {};\n              var that = this,\n                  idx = that.wrapper.children(\".k-pane\").index(referencePane),\n                  paneElement = $(\"<div />\").insertBefore($(referencePane));\n              return that._addPane(config, idx, paneElement);\n            },\n            insertAfter: function (config, referencePane) {\n              referencePane = $(referencePane);\n              config = config || {};\n              var that = this,\n                  idx = that.wrapper.children(\".k-pane\").index(referencePane),\n                  paneElement = $(\"<div />\").insertAfter($(referencePane));\n              return that._addPane(config, idx + 1, paneElement);\n            },\n            remove: function (pane) {\n              var that = this;\n              pane = that.wrapper.find(pane);\n\n              if (pane.length) {\n                kendo.destroy(pane);\n                pane.each(function (idx, element) {\n                  that.options.panes.splice(that.wrapper.children(\".k-pane\").index(element), 1);\n                  $(element).remove();\n                });\n\n                that._removeSplitBars();\n\n                if (that.options.panes.length) {\n                  that.resize(true);\n                }\n              }\n\n              return that;\n            },\n            size: panePropertyAccessor(\"size\", true),\n            min: panePropertyAccessor(\"min\"),\n            max: panePropertyAccessor(\"max\")\n          });\n          ui.plugin(Splitter);\n          var verticalDefaults = {\n            sizingProperty: \"height\",\n            sizingDomProperty: \"offsetHeight\",\n            alternateSizingProperty: \"width\",\n            positioningProperty: \"top\",\n            mousePositioningProperty: \"pageY\"\n          };\n          var horizontalDefaults = {\n            sizingProperty: \"width\",\n            sizingDomProperty: \"offsetWidth\",\n            alternateSizingProperty: \"height\",\n            positioningProperty: \"left\",\n            mousePositioningProperty: \"pageX\"\n          };\n\n          function PaneResizing(splitter) {\n            var that = this,\n                orientation = splitter.orientation;\n            that.owner = splitter;\n            that._element = splitter.element;\n            that.orientation = orientation;\n            extend(that, orientation === HORIZONTAL ? horizontalDefaults : verticalDefaults);\n            that._resizable = new kendo.ui.Resizable(splitter.element, {\n              orientation: orientation,\n              handle: \".k-splitbar-draggable-\" + orientation + \"[data-marker=\" + splitter._marker + \"]\",\n              hint: that._createHint.bind(that),\n              start: that._start.bind(that),\n              max: that._max.bind(that),\n              min: that._min.bind(that),\n              invalidClass: \"k-restricted-size-\" + orientation,\n              resizeend: that._stop.bind(that)\n            });\n          }\n\n          PaneResizing.prototype = {\n            press: function (target) {\n              this._resizable.press(target);\n            },\n            move: function (delta, target) {\n              if (!this.pressed) {\n                this.press(target);\n                this.pressed = true;\n              }\n\n              if (!this._resizable.target) {\n                this._resizable.press(target);\n              }\n\n              this._resizable.move(delta);\n            },\n            end: function () {\n              this._resizable.end();\n\n              this.pressed = false;\n            },\n            destroy: function () {\n              this._resizable.destroy();\n\n              this._resizable = this._element = this.owner = null;\n            },\n            isResizing: function () {\n              return this._resizable.resizing;\n            },\n            _createHint: function (handle) {\n              var that = this;\n              return $(\"<div class='k-ghost-splitbar k-ghost-splitbar-\" + that.orientation + \"' />\").css(that.alternateSizingProperty, handle[that.alternateSizingProperty]());\n            },\n            _start: function (e) {\n              var that = this,\n                  splitbar = $(e.currentTarget),\n                  previousPane = splitbar.prev(),\n                  nextPane = splitbar.next(),\n                  previousPaneConfig = previousPane.data(PANE),\n                  nextPaneConfig = nextPane.data(PANE),\n                  prevBoundary = parseInt(previousPane[0].style[that.positioningProperty], 10),\n                  nextBoundary = parseInt(nextPane[0].style[that.positioningProperty], 10) + nextPane[0][that.sizingDomProperty] - splitbar[0][that.sizingDomProperty],\n                  totalSize = parseInt(that._element.css(that.sizingProperty), 10),\n                  toPx = function (value) {\n                var val = parseInt(value, 10);\n                return (isPixelSize(value) ? val : totalSize * val / 100) || 0;\n              },\n                  prevMinSize = toPx(previousPaneConfig.min),\n                  prevMaxSize = toPx(previousPaneConfig.max) || nextBoundary - prevBoundary,\n                  nextMinSize = toPx(nextPaneConfig.min),\n                  nextMaxSize = toPx(nextPaneConfig.max) || nextBoundary - prevBoundary;\n\n              that.previousPane = previousPane;\n              that.nextPane = nextPane;\n              that._maxPosition = Math.min(nextBoundary - nextMinSize, prevBoundary + prevMaxSize);\n              that._minPosition = Math.max(prevBoundary + prevMinSize, nextBoundary - nextMaxSize);\n            },\n            _max: function () {\n              return this._maxPosition;\n            },\n            _min: function () {\n              return this._minPosition;\n            },\n            _stop: function (e) {\n              var that = this,\n                  splitbar = $(e.currentTarget),\n                  owner = that.owner;\n\n              owner._panes().children(\".k-splitter-overlay\").remove();\n\n              if (e.keyCode !== kendo.keys.ESC) {\n                var ghostPosition = e.position,\n                    previousPane = splitbar.prev(),\n                    nextPane = splitbar.next(),\n                    previousPaneConfig = previousPane.data(PANE),\n                    nextPaneConfig = nextPane.data(PANE),\n                    previousPaneNewSize = ghostPosition - parseInt(previousPane[0].style[that.positioningProperty], 10),\n                    nextPaneNewSize = parseInt(nextPane[0].style[that.positioningProperty], 10) + nextPane[0][that.sizingDomProperty] - ghostPosition - splitbar[0][that.sizingDomProperty],\n                    fluidPanesCount = that._element.children(PANECLASS).filter(function () {\n                  return isFluid($(this).data(PANE).size);\n                }).length;\n\n                if (!isFluid(previousPaneConfig.size) || fluidPanesCount > 1) {\n                  if (isFluid(previousPaneConfig.size)) {\n                    fluidPanesCount--;\n                  }\n\n                  previousPaneConfig.size = previousPaneNewSize + \"px\";\n                }\n\n                if (!isFluid(nextPaneConfig.size) || fluidPanesCount > 1) {\n                  nextPaneConfig.size = nextPaneNewSize + \"px\";\n                }\n\n                owner.resize(true);\n              }\n\n              return false;\n            }\n          };\n        })(window.kendo.jQuery);\n\n        return window.kendo;\n      }, __webpack_require__(3));\n      /* WEBPACK VAR INJECTION */\n\n    }).call(exports, __webpack_require__(1060));\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}