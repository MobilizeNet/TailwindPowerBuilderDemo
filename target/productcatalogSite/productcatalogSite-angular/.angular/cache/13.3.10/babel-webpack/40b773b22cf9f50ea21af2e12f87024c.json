{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1015);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  982:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../main\");\n    /***/\n  },\n\n  /***/\n  1011:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./resizing-utils\");\n    /***/\n  },\n\n  /***/\n  1015:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(982), __webpack_require__(1016), __webpack_require__(1011)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function (kendo, undefined) {\n        var global = window;\n        var math = global.Math;\n        var min = math.min;\n        var max = math.max;\n        var $ = kendo.jQuery;\n        var contains = $.contains;\n        var extend = $.extend;\n        var browser = kendo.support.browser;\n        var Editor = kendo.ui.editor;\n        var Class = kendo.Class;\n        var ElementResizeHandle = Editor.ElementResizeHandle;\n        var ResizingUtils = Editor.ResizingUtils;\n        var calculatePercentageRatio = ResizingUtils.calculatePercentageRatio;\n        var constrain = ResizingUtils.constrain;\n        var inPercentages = ResizingUtils.inPercentages;\n        var inPixels = ResizingUtils.inPixels;\n        var toPercentages = ResizingUtils.toPercentages;\n        var toPixels = ResizingUtils.toPixels;\n        var outerWidth = kendo._outerWidth;\n        var outerHeight = kendo._outerHeight;\n        var RangeUtils = Editor.RangeUtils;\n        var NS = \".kendoEditorElementResizing\";\n        var RESIZE_HANDLE_WRAPPER_CLASS = \"k-element-resize-handle-wrapper\";\n        var TABLE_CLASS = \"k-table\";\n        var ELEMENT_RESIZING_CLASS = \"k-element-resizing\";\n        var DRAG_START = \"dragStart\";\n        var DRAG = \"drag\";\n        var DRAG_END = \"dragEnd\";\n        var KEY_DOWN = \"keydown\";\n        var MOUSE_DOWN = \"mousedown\";\n        var SELECT = \"select\";\n        var DROP = \"drop\";\n        var COLUMN = \"td\";\n        var ROW = \"tr\";\n        var TBODY = \"tbody\";\n        var THEAD = \"thead\";\n        var TABLE = \"table\";\n        var IMG = \"img\";\n        var ELEMENT_TYPES = [\"TABLE\", \"IMG\"];\n        var COMMA = \",\";\n        var WIDTH = \"width\";\n        var HEIGHT = \"height\";\n        var EAST = \"east\";\n        var NORTH = \"north\";\n        var NORTHEAST = \"northeast\";\n        var NORTHWEST = \"northwest\";\n        var SOUTH = \"south\";\n        var SOUTHEAST = \"southeast\";\n        var SOUTHWEST = \"southwest\";\n        var WEST = \"west\";\n        var DOT = \".\";\n\n        function isUndefined(value) {\n          return typeof value === \"undefined\";\n        }\n\n        var ElementResizing = Class.extend({\n          init: function (element, options) {\n            var that = this;\n            that.options = extend({}, that.options, options);\n            that.handles = []; // Check whether the element is TABLE or IMG\n\n            if (ELEMENT_TYPES.indexOf(element.nodeName) >= 0) {\n              that.element = element;\n            }\n          },\n          destroy: function () {\n            var that = this;\n            $(that.element).off(NS);\n            that.element = null;\n            $(that.options.rootElement).off(KEY_DOWN + NS);\n\n            that._destroyResizeHandles();\n          },\n          options: {\n            appendHandlesTo: null,\n            rtl: false,\n            rootElement: null,\n            minWidth: 10,\n            minHeight: 10,\n            handles: [{\n              direction: NORTHWEST\n            }, {\n              direction: NORTH\n            }, {\n              direction: NORTHEAST\n            }, {\n              direction: EAST\n            }, {\n              direction: SOUTHEAST\n            }, {\n              direction: SOUTH\n            }, {\n              direction: SOUTHWEST\n            }, {\n              direction: WEST\n            }]\n          },\n          resize: function (args) {\n            var that = this;\n            var deltas = extend({}, {\n              deltaX: 0,\n              deltaY: 0,\n              initialDeltaX: 0,\n              initialDeltaY: 0\n            }, args);\n\n            that._resizeWidth(deltas.deltaX, deltas.initialDeltaX);\n\n            that._resizeHeight(deltas.deltaY, deltas.initialDeltaY);\n\n            that.showResizeHandles();\n          },\n          _resizeWidth: function () {\n            return false;\n          },\n          _resizeHeight: function () {\n            return false;\n          },\n          _getMaxDimensionValue: function (dimension) {\n            var that = this;\n            var element = $(that.element);\n            var dimensionLowercase = dimension.toLowerCase();\n            var rtlModifier = that.options.rtl ? -1 : 1;\n            var parent = $(that.element).parent();\n            var parentElement = parent[0];\n            var parentDimension = parent[dimensionLowercase]();\n            var parentScrollOffset = rtlModifier * (dimension === WIDTH ? kendo.scrollLeft(parent) : parent.scrollTop());\n\n            if (parentElement && parentElement === element.closest(COLUMN)[0]) {\n              if (parentElement.style[dimensionLowercase] === \"\" && !inPercentages(that.element.style[dimensionLowercase])) {\n                return Infinity;\n              } else {\n                return parentDimension + parentScrollOffset;\n              }\n            } else {\n              return parentDimension + parentScrollOffset;\n            }\n          },\n          showResizeHandles: function () {\n            var that = this;\n\n            that._initResizeHandles();\n\n            that._showResizeHandles();\n          },\n          _initResizeHandles: function () {\n            var that = this;\n            var handles = that.handles;\n            var options = that.options;\n            var handleOptions = that.options.handles;\n            var length = handleOptions.length;\n            var i;\n\n            if (handles && handles.length > 0) {\n              return;\n            }\n\n            for (i = 0; i < length; i++) {\n              that.handles.push(new ElementResizeHandle(extend({\n                appendTo: options.appendHandlesTo,\n                resizableElement: that.element,\n                rootElement: options.rootElement,\n                rtl: options.rtl\n              }, handleOptions[i])));\n            }\n\n            that._bindToResizeHandlesEvents();\n          },\n          _destroyResizeHandles: function () {\n            var that = this;\n            var length = that.handles ? that.handles.length : 0;\n\n            for (var i = 0; i < length; i++) {\n              that.handles[i].destroy();\n            }\n\n            that.handles = [];\n          },\n          _showResizeHandles: function () {\n            var that = this;\n            var handles = that.handles || [];\n            var length = handles.length;\n            var i;\n\n            for (i = 0; i < length; i++) {\n              that.handles[i].show();\n            }\n          },\n          _bindToResizeHandlesEvents: function () {\n            return false;\n          },\n          _onResizeHandleDragStart: function () {\n            var that = this;\n            var element = $(that.element);\n            element.addClass(ELEMENT_RESIZING_CLASS);\n            that._initialElementHeight = outerHeight(element);\n            that._initialElementWidth = outerWidth(element);\n\n            that._disableKeyboard();\n          },\n          _onResizeHandleDrag: function (e) {\n            this.resize(e);\n          },\n          _onResizeHandleDragEnd: function () {\n            var that = this;\n            $(that.element).removeClass(ELEMENT_RESIZING_CLASS);\n\n            that._enableKeyboard();\n          },\n          _enableKeyboard: function () {\n            $(this.options.rootElement).off(KEY_DOWN + NS);\n          },\n          _disableKeyboard: function () {\n            $(this.options.rootElement).on(KEY_DOWN + NS, function (e) {\n              e.preventDefault();\n            });\n          }\n        });\n        var TableResizing = ElementResizing.extend({\n          _bindToResizeHandlesEvents: function () {\n            var that = this;\n            var handles = that.handles || [];\n            var length = handles.length;\n            var i;\n            var handle;\n\n            for (i = 0; i < length; i++) {\n              handle = handles[i];\n              handle.bind(DRAG_START, that._onResizeHandleDragStart.bind(that));\n              handle.bind(DRAG, that._onResizeHandleDrag.bind(that));\n              handle.bind(DRAG_END, that._onResizeHandleDragEnd.bind(that));\n            }\n          },\n          _hasRowsInPixels: function () {\n            var that = this;\n            var rows = $(that.element).children(THEAD + COMMA + TBODY).children(ROW);\n\n            for (var i = 0; i < rows.length; i++) {\n              if (rows[i].style.height === \"\" || inPixels(rows[i].style.height)) {\n                return true;\n              }\n            }\n\n            return false;\n          },\n          _resizeWidth: function (delta, initialDelta) {\n            var that = this;\n            var element = $(that.element);\n            var styleWidth = element[0].style[WIDTH];\n            var currentWidth = outerWidth(element);\n            var parentWidth = element.parent().width();\n\n            var maxWidth = that._getMaxDimensionValue(WIDTH);\n\n            var newWidth;\n            var ratioValue;\n            var ratioTotalValue;\n            var constrainedWidth;\n\n            if (delta === 0) {\n              return;\n            }\n\n            if (isUndefined(that._initialElementWidth)) {\n              that._initialElementWidth = currentWidth;\n            } //use initial delta instead of delta as changing the width with a small value (e.g. 1px)\n            //on each drag does not work due to browser calculation of computed styles\n\n\n            constrainedWidth = constrain({\n              value: that._initialElementWidth + initialDelta,\n              min: that.options.minWidth,\n              max: maxWidth\n            });\n\n            if (inPercentages(styleWidth)) {\n              //detect resizing greater than 100%\n              if (currentWidth + delta > parentWidth) {\n                ratioValue = max(constrainedWidth, parentWidth);\n                ratioTotalValue = min(constrainedWidth, parentWidth);\n              } else {\n                ratioValue = min(constrainedWidth, parentWidth);\n                ratioTotalValue = max(constrainedWidth, parentWidth);\n              }\n\n              newWidth = toPercentages(calculatePercentageRatio(ratioValue, ratioTotalValue));\n            } else {\n              newWidth = toPixels(constrainedWidth);\n            }\n\n            that._setColumnsWidth();\n\n            element[0].style[WIDTH] = newWidth;\n          },\n          _resizeHeight: function (delta, initialDelta) {\n            var that = this;\n            var element = $(that.element);\n            var styleHeight = element[0].style[HEIGHT];\n            var currentHeight = outerHeight(element);\n            var parent = element.parent();\n            var parentHeight = parent.height();\n\n            var maxHeight = that._getMaxDimensionValue(HEIGHT);\n\n            var newHeight;\n            var ratioValue;\n            var ratioTotalValue;\n            var constrainedHeight;\n            var minHeight = that.options.minHeight;\n\n            var hasRowsInPixels = that._hasRowsInPixels();\n\n            if (delta === 0) {\n              return;\n            }\n\n            if (isUndefined(that._initialElementHeight)) {\n              that._initialElementHeight = currentHeight;\n            } //use initial delta instead of delta as changing the height with a small value (e.g. 1px)\n            //on each drag does not work due to browser calculation of computed styles\n\n\n            constrainedHeight = constrain({\n              value: that._initialElementHeight + initialDelta,\n              min: minHeight,\n              max: maxHeight\n            });\n\n            if (hasRowsInPixels && delta < 0) {\n              //decreasing table height when rows are sized in pixels is not possible\n              that._setRowsHeightInPercentages();\n            }\n\n            if (inPercentages(styleHeight)) {\n              //detect resizing greater than 100%\n              if (currentHeight + delta > parentHeight) {\n                ratioValue = max(constrainedHeight, parentHeight);\n                ratioTotalValue = min(constrainedHeight, parentHeight);\n              } else {\n                ratioValue = min(constrainedHeight, parentHeight);\n                ratioTotalValue = max(constrainedHeight, parentHeight);\n              }\n\n              newHeight = toPercentages(calculatePercentageRatio(ratioValue, ratioTotalValue));\n            } else {\n              newHeight = toPixels(constrainedHeight);\n            }\n\n            element[0].style[HEIGHT] = newHeight;\n\n            if (hasRowsInPixels && delta < 0) {\n              //restore original rows height unit\n              that._setRowsHeightInPixels();\n            }\n          },\n          _setColumnsWidth: function () {\n            var that = this;\n            var element = $(that.element);\n            var parentElement = element.parent()[0];\n            var parentColumn = element.closest(COLUMN);\n            var columns = parentColumn.closest(ROW).children();\n            var columnsLength = columns.length;\n            var i;\n\n            function isWidthInPercentages(element) {\n              var styleWidth = element.style.width;\n\n              if (styleWidth !== \"\") {\n                return inPercentages(styleWidth) ? true : false;\n              } else {\n                return $(element).hasClass(TABLE_CLASS) ? true : false;\n              }\n            }\n\n            if (isWidthInPercentages(element[0]) && parentElement === parentColumn[0] && parentElement.style[WIDTH] === \"\") {\n              for (i = 0; i < columnsLength; i++) {\n                columns[i].style[WIDTH] = toPixels($(columns[i]).width());\n              }\n            }\n          },\n          _setRowsHeightInPercentages: function () {\n            var that = this;\n            var tableHead = $(that.element).children(THEAD);\n            var tableHeadHeight = tableHead.length > 0 ? tableHead.height() : 0;\n            var tableBody = $(that.element).children(TBODY);\n            var tableBodyHeight = tableBody.height();\n            var rows = $(that.element).children(THEAD + COMMA + TBODY).children(ROW);\n            var length = rows.length;\n            var currentRowsHeights = rows.map(function () {\n              return outerHeight($(this));\n            });\n            var i;\n\n            for (i = 0; i < length; i++) {\n              rows[i].style[HEIGHT] = toPercentages(calculatePercentageRatio(currentRowsHeights[i], tableHeadHeight + tableBodyHeight));\n            }\n          },\n          _setRowsHeightInPixels: function () {\n            var that = this;\n            var rows = $(that.element).children(THEAD + COMMA + TBODY).children(ROW);\n            var length = rows.length;\n            var currentRowsHeights = rows.map(function () {\n              return outerHeight($(this));\n            });\n            var i;\n\n            for (i = 0; i < length; i++) {\n              rows[i].style[HEIGHT] = toPixels(currentRowsHeights[i]);\n            }\n          }\n        });\n        var ImageResizing = ElementResizing.extend({\n          _bindToResizeHandlesEvents: function () {\n            var that = this;\n            var handles = that.handles || [];\n            var length = handles.length;\n            var i;\n            var handle;\n\n            for (i = 0; i < length; i++) {\n              handle = handles[i];\n              handle.bind(DRAG_START, that._onResizeHandleDragStart.bind(that));\n\n              if (handle.options.direction === \"north\" || handle.options.direction === \"south\") {\n                handle.bind(DRAG, that._onResizeHandleDragVertical.bind(that));\n              } else if (handle.options.direction === \"east\" || handle.options.direction === \"west\") {\n                handle.bind(DRAG, that._onResizeHandleDragHorizontal.bind(that));\n              } else {\n                handle.bind(DRAG, that._onResizeHandleDragLocked.bind(that));\n              }\n\n              handle.bind(DRAG_END, that._onResizeHandleDragEnd.bind(that));\n            }\n          },\n          _getDeltas: function (args) {\n            return extend({}, {\n              deltaX: 0,\n              deltaY: 0,\n              initialDeltaX: 0,\n              initialDeltaY: 0\n            }, args);\n          },\n          _onResizeHandleDragVertical: function (args) {\n            var deltas = this._getDeltas(args);\n\n            this._resizeHeight(deltas.deltaY, deltas.initialDeltaY);\n\n            this.showResizeHandles();\n          },\n          _onResizeHandleDragHorizontal: function (args) {\n            var deltas = this._getDeltas(args);\n\n            this._resizeWidth(deltas.deltaX, deltas.initialDeltaX);\n\n            this.showResizeHandles();\n          },\n          _onResizeHandleDragLocked: function (args) {\n            var min = Math.min(Math.abs(args.initialDeltaX), Math.abs(args.initialDeltaY)),\n                initialWidth = this._initialElementWidth,\n                initialHeight = this._initialElementHeight,\n                deltas;\n\n            if (min === args.initialDeltaX || min === args.initialDeltaX * -1) {\n              args.initialDeltaY = args.initialDeltaX * initialHeight / initialWidth;\n              args.deltaY = args.deltaX;\n            } else if (min === args.initialDeltaY || min === args.initialDeltaY * -1) {\n              args.initialDeltaX = args.initialDeltaY * initialWidth / initialHeight;\n              args.deltaX = args.deltaY;\n            }\n\n            deltas = this._getDeltas(args);\n\n            this._resizeWidth(deltas.deltaX, deltas.initialDeltaX);\n\n            this._resizeHeight(deltas.deltaY, deltas.initialDeltaY);\n\n            this.showResizeHandles();\n          },\n          _resizeWidth: function (delta, initialDelta) {\n            var that = this;\n            var element = $(that.element);\n            var currentWidth = outerWidth(element);\n            var newWidth;\n            var constrainedWidth;\n\n            if (delta === 0) {\n              return;\n            }\n\n            if (isUndefined(that._initialElementWidth)) {\n              that._initialElementWidth = currentWidth;\n            } //use initial delta instead of delta as changing the width with a small value (e.g. 1px)\n            //on each drag does not work due to browser calculation of computed styles\n\n\n            constrainedWidth = constrain({\n              value: that._initialElementWidth + initialDelta,\n              min: that.options.minWidth,\n              max: that._getMaxDimensionValue(WIDTH)\n            });\n            newWidth = toPixels(constrainedWidth);\n            element[0].style[WIDTH] = newWidth;\n            element.attr(WIDTH, Math.floor(constrainedWidth));\n          },\n          _resizeHeight: function (delta, initialDelta) {\n            var that = this;\n            var element = $(that.element);\n            var currentHeight = outerHeight(element);\n            var newHeight;\n            var constrainedHeight;\n\n            if (delta === 0) {\n              return;\n            }\n\n            if (isUndefined(that._initialElementHeight)) {\n              that._initialElementHeight = currentHeight;\n            } //use initial delta instead of delta as changing the height with a small value (e.g. 1px)\n            //on each drag does not work due to browser calculation of computed styles\n\n\n            constrainedHeight = constrain({\n              value: that._initialElementHeight + initialDelta,\n              min: that.options.minHeight,\n              max: Number.MAX_SAFE_INTEGER\n            });\n            newHeight = toPixels(constrainedHeight);\n            element[0].style[HEIGHT] = newHeight;\n            element.attr(HEIGHT, Math.floor(constrainedHeight));\n          }\n        });\n        var ElementResizingFactory = Class.extend({\n          create: function (editor) {\n            var factory = this;\n            $(editor.body).on(\"dragstart\" + NS, function () {\n              var nodes = RangeUtils.nodes(editor.getRange()),\n                  hasImg = false;\n              nodes.forEach(function (node) {\n                if (node.nodeName === \"IMG\") {\n                  hasImg = true;\n                }\n              });\n\n              if (hasImg && nodes.length > 1) {\n                editor.elementResizing._destroyResizeHandles();\n              }\n            }).on(DROP + NS, function () {\n              setTimeout(function () {\n                var image = RangeUtils.image(editor.getRange());\n\n                if (image) {\n                  editor.elementResizing._destroyResizeHandles();\n\n                  editor.elementResizing.element = image;\n                  editor.elementResizing.showResizeHandles();\n                }\n              });\n            }).on(MOUSE_DOWN + NS, TABLE + COMMA + IMG, function (e) {\n              var eventTarget = e.target;\n              var eventCurrentTarget = e.currentTarget;\n              var elementResizing = editor.elementResizing;\n              var element = elementResizing ? elementResizing.element : null;\n\n              if (elementResizing) {\n                if (element && eventCurrentTarget !== element) {\n                  if (contains(eventCurrentTarget, element) && element !== eventTarget && contains(element, eventTarget)) {\n                    //prevent a parent table resizing init when clicking on a nested table when the event bubbles\n                    //instead of stopping event propagation\n                    return;\n                  } else {\n                    if (element !== eventTarget) {\n                      editor._destroyElementResizing();\n\n                      factory._initResizing(editor, eventCurrentTarget);\n                    }\n                  }\n                }\n              } else {\n                factory._initResizing(editor, eventCurrentTarget);\n              }\n\n              editor._showElementResizeHandles();\n            }).on(MOUSE_DOWN + NS, function (e) {\n              var elementResizing = editor.elementResizing;\n              var element = elementResizing ? elementResizing.element : null;\n              var target = e.target;\n              var isResizeHandleOrChild = $(target).hasClass(RESIZE_HANDLE_WRAPPER_CLASS) || $(target).parents(DOT + RESIZE_HANDLE_WRAPPER_CLASS).length > 0;\n\n              if (elementResizing && element !== target && !contains(element, target) && !isResizeHandleOrChild) {\n                editor._destroyElementResizing();\n              }\n            });\n          },\n          dispose: function (editor) {\n            $(editor.body).off(NS);\n          },\n          _initResizing: function (editor, element) {\n            // table and image resizing is natively supported in IE\n            // https://stackoverflow.com/questions/53831846/resizing-images-in-contenteditable-div-stopped-working-in-firefox\n            // Enable custom resize handlers for FF too\n            if (!browser.msie) {\n              if ($(element).is(TABLE)) {\n                editor.elementResizing = editor.tableResizing = new TableResizing(element, {\n                  appendHandlesTo: editor.body,\n                  rtl: kendo.support.isRtl(editor.element),\n                  rootElement: editor.body\n                });\n              } else if ($(element).is(IMG)) {\n                editor.elementResizing = new ImageResizing(element, {\n                  appendHandlesTo: editor.body,\n                  rtl: kendo.support.isRtl(editor.element),\n                  rootElement: editor.body\n                });\n              }\n\n              if (editor._showElementResizeHandlesProxy) {\n                editor.unbind(SELECT, editor._showElementResizeHandlesProxy);\n                editor.bind(SELECT, editor._showElementResizeHandlesProxy);\n              }\n            }\n          }\n        });\n        ElementResizingFactory.current = new ElementResizingFactory();\n        extend(Editor, {\n          TableResizing: TableResizing,\n          ImageResizing: ImageResizing,\n          ElementResizing: ElementResizing,\n          ElementResizingFactory: ElementResizingFactory\n        });\n      })(window.kendo);\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1016:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./element-resize-handle\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}