{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1415);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1065:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.dropdownlist\");\n    /***/\n  },\n\n  /***/\n  1067:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.multiselect\");\n    /***/\n  },\n\n  /***/\n  1218:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.window\");\n    /***/\n  },\n\n  /***/\n  1270:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.dialog\");\n    /***/\n  },\n\n  /***/\n  1279:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.editable\");\n    /***/\n  },\n\n  /***/\n  1282:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.switch\");\n    /***/\n  },\n\n  /***/\n  1287:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.pdf\");\n    /***/\n  },\n\n  /***/\n  1292:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.datetimepicker\");\n    /***/\n  },\n\n  /***/\n  1307:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.pane\");\n    /***/\n  },\n\n  /***/\n  1415:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1065), __webpack_require__(1279), __webpack_require__(1067), __webpack_require__(1218), __webpack_require__(1292), __webpack_require__(1416), __webpack_require__(1417), __webpack_require__(1418), __webpack_require__(1419), __webpack_require__(1420), __webpack_require__(1421), __webpack_require__(1422), __webpack_require__(1270), __webpack_require__(1307), __webpack_require__(1287), __webpack_require__(1282)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"scheduler\",\n        name: \"Scheduler\",\n        category: \"web\",\n        description: \"The Scheduler is an event calendar.\",\n        depends: [\"dropdownlist\", \"editable\", \"multiselect\", \"window\", \"datepicker\", \"datetimepicker\", \"scheduler.recurrence\", \"scheduler.view\"],\n        features: [{\n          id: \"scheduler-dayview\",\n          name: \"Scheduler Day View\",\n          description: \"Scheduler Day View\",\n          depends: [\"scheduler.dayview\"]\n        }, {\n          id: \"scheduler-agendaview\",\n          name: \"Scheduler Agenda View\",\n          description: \"Scheduler Agenda View\",\n          depends: [\"scheduler.agendaview\"]\n        }, {\n          id: \"scheduler-monthview\",\n          name: \"Scheduler Month View\",\n          description: \"Scheduler Month View\",\n          depends: [\"scheduler.monthview\"]\n        }, {\n          id: \"scheduler-timelineview\",\n          name: \"Scheduler Timeline View\",\n          description: \"Scheduler Timeline View\",\n          depends: [\"scheduler.timelineview\"]\n        }, {\n          id: \"scheduler-yearview\",\n          name: \"Scheduler Year View\",\n          description: \"Scheduler Year View\",\n          depends: [\"scheduler.yearview\"]\n        }, {\n          id: \"scheduler-mobile\",\n          name: \"Scheduler adaptive rendering\",\n          description: \"Support for adaptive rendering\",\n          depends: [\"dialog\", \"pane\", \"switch\"]\n        }, {\n          id: \"scheduler-pdf-export\",\n          name: \"PDF export\",\n          description: \"Export the scheduler events as PDF\",\n          depends: [\"pdf\", \"drawing\"]\n        }, {\n          id: \"scheduler-timezones\",\n          name: \"Timezones\",\n          description: \"Allow selecting timezones different than Etc/UTC\",\n          depends: [\"timezones\"]\n        }]\n      };\n      /*jshint eqnull: true */\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            date = kendo.date,\n            MS_PER_DAY = date.MS_PER_DAY,\n            getDate = date.getDate,\n            getMilliseconds = kendo.date.getMilliseconds,\n            recurrence = kendo.recurrence,\n            keys = $.extend({\n          F10: 121\n        }, kendo.keys),\n            ui = kendo.ui,\n            Widget = ui.Widget,\n            DataBoundWidget = ui.DataBoundWidget,\n            STRING = \"string\",\n            Popup = ui.Popup,\n            Calendar = ui.Calendar,\n            DataSource = kendo.data.DataSource,\n            isPlainObject = $.isPlainObject,\n            extend = $.extend,\n            toString = Object.prototype.toString,\n            isArray = Array.isArray,\n            NS = \".kendoScheduler\",\n            CLICK = \"click\",\n            MOUSEDOWN = \"mousedown\",\n            TOUCHSTART = kendo.support.pointers ? \"pointerdown\" : \"touchstart\",\n            TOUCHMOVE = kendo.support.pointers ? \"pointermove\" : \"touchmove\",\n            TOUCHEND = kendo.support.pointers ? \"pointerup\" : \"touchend\",\n            MOUSEMOVE = kendo.support.mousemove,\n            CHANGE = \"change\",\n            PROGRESS = \"progress\",\n            ERROR = \"error\",\n            CANCEL = \"cancel\",\n            REMOVE = \"remove\",\n            RESET = \"resetSeries\",\n            SAVE = \"save\",\n            ADD = \"add\",\n            EDIT = \"edit\",\n            DISABLED = \"disabled\",\n            OPTION = \"option\",\n            FOCUSEDSTATE = \"k-focus\",\n            EXPANDEDSTATE = \"k-state-expanded\",\n            VIEWSSELECTOR = \".k-scheduler-views\",\n            INVERSECOLORCLASS = \"k-event-inverse\",\n            valueStartEndBoundRegex = /(?:value:start|value:end)(?:,|$)/,\n            TODAY = getDate(new Date()),\n            EXCEPTION_SEPARATOR = \",\",\n            OLD_EXCEPTION_SEPARATOR_REGEXP = /\\;/g,\n            RECURRENCE_EXCEPTION = \"recurrenceException\",\n            DELETECONFIRM = \"Are you sure you want to delete this event?\",\n            DELETERECURRING = \"Do you want to delete only this event occurrence or the whole series?\",\n            EDITRECURRING = \"Do you want to edit only this event occurrence or the whole series?\",\n            DELETERECURRINGCONFIRM = \"Are you sure you want to delete this event occurrence?\",\n            RESETSERIESCONFIRM = \"Are you sure you want to reset the whole series?\",\n            DELETESERIESCONFIRM = \"Are you sure you want to delete the whole series?\",\n            COMMANDBUTTONTMPL = '<button type=\"button\" class=\"k-button k-button-md k-rounded-md k-button-solid #=className#\" #=attr#><span class=\"k-button-text\">#=text#</span></button>',\n            VIEWS_DROPDOWN_TEMPLATE = kendo.template('' + '<select aria-label=\"#= label #\" class=\"k-picker k-dropdown-list k-dropdown k-views-dropdown\" tabindex=\"-1\">' + '#for (var view in views) {#' + '<option value=\"#= view #\">${views[view].title}</option>' + '#}#' + '</select>'),\n            TOOLBARTEMPLATE = kendo.template('' + '<div class=\"k-scheduler-toolbar k-toolbar\" role=\"toolbar\">' + '# if (pdf) { #' + '<button tabindex=\"-1\" class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-pdf\"><span class=\"k-button-icon k-icon k-i-file-pdf\"></span><span class=\"k-button-text\">${messages.pdf}</span></button>' + '# } #' + '<span class=\"k-scheduler-navigation k-button-group\">' + '<button tabindex=\"-1\" class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-nav-today\" title=\"${messages.today}\"><span class=\"k-button-text\">${messages.today}</span></button>' + '<button tabindex=\"-1\" class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-icon-button k-nav-prev\" title=\"${messages.previous}\" aria-label=\"${messages.previous}\"><span class=\"k-button-icon k-icon k-i-arrow-60-left\"></span></button>' + '<button tabindex=\"-1\" class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-icon-button k-nav-next\" title=\"${messages.next}\" aria-label=\"${messages.next}\"><span class=\"k-button-icon k-icon k-i-arrow-60-right\"></span></button>' + '</span>' + '<a tabindex=\"-1\" role=\"button\" href=\"\\\\#\" class=\"k-nav-current\" aria-live=\"polite\">' + '<span class=\"k-icon k-i-calendar\"></span>' + '<span class=\"k-sm-date-format\" data-#=ns#bind=\"text: formattedShortDate\"></span>' + '<span class=\"k-lg-date-format\" data-#=ns#bind=\"text: formattedDate\"></span>' + '</a>' + '<span class=\"k-spacer k-toolbar-spacer\"></span>' + '# if (search) { #' + '<span class=\"k-scheduler-search k-textbox k-input k-input-md k-rounded-md k-input-solid\">' + '<input tabindex=\"-1\" autocomplete=\"off\" placeholder=\"${messages.search}\" title=\"${messages.search}\" class=\"k-input-inner k-scheduler-search-input k-input-inner\" />' + '<span class=\"k-input-suffix\"><span class=\"k-icon k-i-search\"></span></span>' + '</span>' + '# } #' + '# if (viewsCount === 1) { #' + '<a role=\"button\" tabindex=\"-1\" data-#=ns#name=\"#=view#\" href=\"\\\\#\" class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-icon-button k-scheduler-refresh\" aria-label=\"${messages.refresh}\">' + '<span class=\"k-button-icon k-icon k-i-reload\"></span>' + '</a>' + '# } else { #' + '<span class=\"k-scheduler-views-wrapper\">' + '<span class=\"k-scheduler-views k-button-group\">' + '# for (var view in views) { #' + '<button tabindex=\"-1\" class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-view-#= view.toLowerCase() #\" data-#=ns#name=\"#=view#\"><span class=\"k-button-text\">${views[view].title}</span></button>' + '# } #' + '</span>' + '</span>' + '# } #' + '</div>'),\n            MOBILETOOLBARTEMPLATE = kendo.template('<div class=\"k-scheduler-toolbar k-toolbar\" role=\"toolbar\">' + '<span class=\"k-scheduler-tools k-button-group\">' + '# if (pdf) { #' + '<button tabindex=\"-1\" class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-icon-button k-pdf\"><span class=\"k-button-icon k-icon k-i-file-pdf\"></span></button>' + '# } #' + '<button tabindex=\"-1\" class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-icon-button k-nav-calendar\"><span class=\"k-button-icon k-icon k-i-calendar\"></span></button>' + \"# if (editable) { #\" + '<button tabindex=\"-1\" class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-icon-button k-create-event\"><span class=\"k-button-icon k-icon k-i-plus\"></span></button>' + \"# } #\" + '</span>' + '<span class=\"k-spacer k-toolbar-spacer\"></span>' + '# if (search) { #' + '<span class=\"k-scheduler-search k-textbox k-input k-input-md k-rounded-md k-input-solid\">' + '<input tabindex=\"-1\" autocomplete=\"off\" placeholder=\"${messages.search}\" title=\"${messages.search}\" class=\"k-scheduler-search-input k-input-inner\" />' + '<span class=\"k-input-suffix\"><span class=\"k-icon k-i-search\"></span></span>' + '</span>' + '# } #' + '#if(viewsCount === 1){#' + '<a role=\"button\" tabindex=\"-1\" data-#=ns#name=\"#=view#\" href=\"\\\\#\" class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-icon-button k-scheduler-refresh\">' + '<span class=\"k-button-icon k-icon k-i-reload\"></span>' + '</a>' + '#} else {#' + '<select tabindex=\"-1\" class=\"k-picker k-dropdown-list k-dropdown k-scheduler-mobile-views\">' + '#for(var view in views){#' + '<option class=\"k-view-#= view.toLowerCase() #\" value=\"#=view#\">${views[view].title}</option>' + '#}#' + '</select>' + '#}#' + '</div>' + '<div class=\"k-scheduler-toolbar k-toolbar\">' + '<span class=\"k-scheduler-navigation\">' + '<button tabindex=\"-1\" class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-icon-button k-nav-prev\"><span class=\"k-button-icon k-icon k-i-arrow-chevron-left\"></span></button>' + '<span class=\"k-nav-current\">' + '<span class=\"k-m-date-format\" data-#=ns#bind=\"text: formattedMobileDate\"></span>' + '<span class=\"k-y-date-format\" data-#=ns#bind=\"text: formattedYear\"></span>' + '</span>' + '<button tabindex=\"-1\" class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-icon-button k-nav-next\"><span class=\"k-button-icon k-icon k-i-arrow-chevron-right\"></span></button>' + '</span>' + '</div>'),\n            MOBILEDATERANGEEDITOR = function (container, options) {\n          var attr = {\n            name: options.field,\n            title: options.title\n          };\n          var isAllDay = options.model.isAllDay;\n          var dateTimeValidate = kendo.attr(\"validate\") + \"='\" + !isAllDay + \"'\";\n          var dateValidate = kendo.attr(\"validate\") + \"='\" + !!isAllDay + \"'\";\n          appendTimezoneAttr(attr, options);\n          appendValidDateValidator(attr, options);\n          appendDateCompareValidator(attr, options);\n          $('<input type=\"datetime-local\" required ' + kendo.attr(\"type\") + '=\"datetime-local\" ' + kendo.attr(\"bind\") + '=\"value:' + options.field + ', invisible:isAllDay\" ' + dateTimeValidate + '/>').attr(attr).appendTo(container);\n          $('<input type=\"date\" required ' + kendo.attr(\"type\") + '=\"date\" ' + kendo.attr(\"bind\") + '=\"value:' + options.field + ',visible:isAllDay\" ' + dateValidate + '/>').attr(attr).appendTo(container);\n          $('<span ' + kendo.attr(\"for\") + '=\"' + options.field + '\" class=\"k-invalid-msg\"/>').hide().appendTo(container);\n        },\n            DATERANGEEDITOR = function (container, options) {\n          var attr = {\n            name: options.field,\n            title: options.title\n          },\n              isAllDay = options.model.isAllDay,\n              dateTimeValidate = kendo.attr(\"validate\") + \"='\" + !isAllDay + \"' \",\n              dateValidate = kendo.attr(\"validate\") + \"='\" + !!isAllDay + \"' \";\n          appendTimezoneAttr(attr, options);\n          appendValidDateValidator(attr, options);\n          appendDateCompareValidator(attr, options);\n          $('<input type=\"text\" required ' + kendo.attr(\"type\") + '=\"date\"' + ' ' + kendo.attr(\"role\") + '=\"datetimepicker\" ' + kendo.attr(\"bind\") + '=\"value:' + options.field + ',invisible:isAllDay\" ' + dateTimeValidate + '/>').attr(attr).appendTo(container);\n          $('<input type=\"text\" required ' + kendo.attr(\"type\") + '=\"date\"' + ' ' + kendo.attr(\"role\") + '=\"datepicker\" ' + kendo.attr(\"bind\") + '=\"value:' + options.field + ',visible:isAllDay\" ' + dateValidate + '/>').attr(attr).appendTo(container);\n          $('<span ' + kendo.attr(\"bind\") + '=\"text: ' + options.field + 'Timezone\"></span>').appendTo(container);\n\n          if (options.field === \"end\") {\n            $('<span ' + kendo.attr(\"bind\") + '=\"text: startTimezone, invisible: endTimezone\"></span>').appendTo(container);\n          }\n\n          $('<span ' + kendo.attr(\"for\") + '=\"' + options.field + '\" class=\"k-invalid-msg\"/>').hide().appendTo(container);\n        },\n            RECURRENCEEDITOR = function (container, options) {\n          $('<div ' + kendo.attr(\"bind\") + '=\"value:' + options.field + '\" />').attr({\n            name: options.field\n          }).appendTo(container).kendoRecurrenceEditor({\n            start: options.model.start,\n            timezone: options.timezone,\n            messages: options.messages\n          });\n        },\n            MOBILERECURRENCEEDITOR = function (container, options) {\n          $('<div ' + kendo.attr(\"bind\") + '=\"value:' + options.field + '\" />').attr({\n            name: options.field\n          }).appendTo(container).kendoMobileRecurrenceEditor({\n            start: options.model.start,\n            timezone: options.timezone,\n            messages: options.messages,\n            pane: options.pane,\n            value: options.model[options.field]\n          });\n        },\n            MOBILEISALLDAYEDITOR = function (container, options) {\n          $('<input type=\"checkbox\" data-role=\"switch\"' + kendo.attr(\"bind\") + '=\"value:' + options.field + '\" />').appendTo(container);\n        },\n            MOBILETIMEZONEPOPUP = function (container, options) {\n          var text = timezoneButtonText(options.model, options.messages.noTimezone);\n          $('<span class=\"k-timezone-label\"></span>').text(text).appendTo(container);\n          $('<span class=\"k-icon k-i-arrow-chevron-right\"></span>').appendTo(container);\n          container.closest(\"li.k-item label\").on(CLICK, options.click);\n        },\n            TIMEZONEPOPUP = function (container, options) {\n          $('<a href=\"#\" class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base\" data-bind=\"invisible:isAllDay\"><span class=\"k-button-text\">' + options.messages.timezoneEditorButton + '</span></a>').on(CLICK, options.click).appendTo(container);\n        },\n            MOBILETIMEZONEEDITOR = function (container, options) {\n          $('<div class=\"k-mobiletimezoneeditor\" ' + kendo.attr(\"bind\") + '=\"value:' + options.field + '\" />').attr({\n            name: options.field\n          }).appendTo(container).kendoMobileTimezoneEditor({\n            optionLabel: options.noTimezone\n          });\n        },\n            TIMEZONEEDITOR = function (container, options) {\n          var visible = options.visible || options.visible === undefined;\n          $('<div ' + kendo.attr(\"bind\") + '=\"value:' + options.field + '\" />').attr({\n            name: options.field\n          }).toggle(visible).appendTo(container).kendoTimezoneEditor({\n            optionLabel: options.noTimezone,\n            title: options.title\n          });\n        };\n\n        function timezoneButtonText(model, message) {\n          message = message || \"\";\n\n          if (model.startTimezone) {\n            message = model.startTimezone;\n\n            if (model.endTimezone) {\n              message += \" | \" + model.endTimezone;\n            }\n          }\n\n          return message;\n        }\n\n        function appendTimezoneAttr(attrs, options) {\n          var timezone = options.timezone;\n\n          if (timezone) {\n            attrs[kendo.attr(\"timezone\")] = timezone;\n          }\n        }\n\n        function appendValidDateValidator(attrs, options) {\n          var validationRules = options.model.fields[options.field].validation;\n\n          if (validationRules) {\n            var validDateRule = validationRules.validDateValidator;\n\n            if (validDateRule && isPlainObject(validDateRule) && validDateRule.message) {\n              attrs[kendo.attr(\"validDate-msg\")] = validDateRule.message;\n            }\n          }\n        }\n\n        function appendDateCompareValidator(attrs, options) {\n          var validationRules = options.model.fields[options.field].validation;\n\n          if (validationRules) {\n            var dateCompareRule = validationRules.dateCompare;\n\n            if (dateCompareRule && isPlainObject(dateCompareRule) && dateCompareRule.message) {\n              attrs[kendo.attr(\"dateCompare-msg\")] = dateCompareRule.message;\n            }\n          }\n        }\n\n        function wrapDataAccess(originalFunction, timezone) {\n          return function (data) {\n            data = originalFunction(data);\n            convertData(data, \"apply\", timezone);\n            return data || [];\n          };\n        }\n\n        function wrapDataSerialization(originalFunction, timezone) {\n          return function (data) {\n            if (data) {\n              if (toString.call(data) !== \"[object Array]\" && !(data instanceof kendo.data.ObservableArray)) {\n                data = [data];\n              }\n            }\n\n            convertData(data, \"remove\", timezone, true);\n            data = originalFunction(data);\n            return data || [];\n          };\n        }\n\n        function convertData(data, method, timezone, removeUid) {\n          var event, idx, length, startOffset, endOffset;\n          data = data || [];\n\n          for (idx = 0, length = data.length; idx < length; idx++) {\n            event = data[idx];\n            startOffset = event.start ? event.start.getTimezoneOffset() : null;\n            endOffset = event.start ? event.end.getTimezoneOffset() : null;\n\n            if (removeUid) {\n              if (event.startTimezone || event.endTimezone) {\n                if (timezone) {\n                  event.start = kendo.timezone.convert(event.start, event.startTimezone || event.endTimezone, timezone);\n                  event.end = kendo.timezone.convert(event.end, event.endTimezone || event.startTimezone, timezone);\n                  event.start = kendo.timezone[method](event.start, timezone);\n                  event.end = kendo.timezone[method](event.end, timezone);\n                } else {\n                  event.start = kendo.timezone[method](event.start, event.startTimezone || event.endTimezone);\n                  event.end = kendo.timezone[method](event.end, event.endTimezone || event.startTimezone);\n                }\n              } else if (timezone) {\n                event.start = kendo.timezone[method](event.start, timezone);\n                event.end = kendo.timezone[method](event.end, timezone);\n              }\n            } else {\n              if (event.startTimezone || event.endTimezone) {\n                event.start = kendo.timezone[method](event.start, event.startTimezone || event.endTimezone);\n                event.end = kendo.timezone[method](event.end, event.endTimezone || event.startTimezone);\n\n                if (timezone) {\n                  event.start = kendo.timezone.convert(event.start, event.startTimezone || event.endTimezone, timezone);\n                  event.end = kendo.timezone.convert(event.end, event.endTimezone || event.startTimezone, timezone);\n                }\n              } else if (timezone) {\n                event.start = kendo.timezone[method](event.start, timezone);\n                event.end = kendo.timezone[method](event.end, timezone);\n              }\n            }\n\n            if (removeUid) {\n              delete event.uid;\n            }\n\n            if (method === \"remove\" && event.start && startOffset && startOffset !== event.start.getTimezoneOffset()) {\n              event.start = new Date(event.start.getTime() + (startOffset - event.start.getTimezoneOffset()) * 60000);\n            }\n\n            if (method === \"remove\" && event.end && endOffset && endOffset !== event.end.getTimezoneOffset()) {\n              event.end = new Date(event.end.getTime() + (endOffset - event.end.getTimezoneOffset()) * 60000);\n            }\n          }\n\n          return data;\n        }\n\n        function getOccurrenceByUid(data, uid) {\n          var length = data.length,\n              idx = 0,\n              event;\n\n          for (; idx < length; idx++) {\n            event = data[idx];\n\n            if (event.uid === uid) {\n              return event;\n            }\n          }\n        }\n\n        var SchedulerDataReader = kendo.Class.extend({\n          init: function (schema, reader) {\n            var timezone = schema.timezone;\n            this.reader = reader;\n\n            if (reader.model) {\n              this.model = reader.model;\n            }\n\n            this.timezone = timezone;\n            this.data = wrapDataAccess(this.data.bind(this), timezone);\n            this.serialize = wrapDataSerialization(this.serialize.bind(this), timezone);\n          },\n          errors: function (data) {\n            return this.reader.errors(data);\n          },\n          parse: function (data) {\n            return this.reader.parse(data);\n          },\n          data: function (data) {\n            return this.reader.data(data);\n          },\n          total: function (data) {\n            return this.reader.total(data);\n          },\n          groups: function (data) {\n            return this.reader.groups(data);\n          },\n          aggregates: function (data) {\n            return this.reader.aggregates(data);\n          },\n          serialize: function (data) {\n            return this.reader.serialize(data);\n          }\n        });\n\n        function applyZone(date, fromZone, toZone) {\n          if (toZone) {\n            date = kendo.timezone.convert(date, fromZone, toZone);\n          } else {\n            date = kendo.timezone.remove(date, fromZone);\n          }\n\n          return date;\n        }\n\n        function validDateValidator(input) {\n          if (input.filter(\"[name=start]\").length && input.filter(\"[title=Start]\").length || input.filter(\"[name=end]\").length && input.filter(\"[title=End]\").length || input.filter(\".k-recur-until\").length) {\n            var date;\n            var picker = kendo.widgetInstance(input, kendo.ui);\n\n            if (picker) {\n              date = kendo.parseDate(input.val(), picker.options.format);\n              return !!date && picker.value();\n            } else {\n              date = kendo.parseDate(input.val());\n              return !!date;\n            }\n          }\n\n          return true;\n        }\n\n        function dateCompareValidator(input) {\n          if (input.filter(\"[name=end]\").length) {\n            var container = input.closest(\".k-scheduler-edit-form\");\n            var startInput = container.find(\"[name=start]:visible\");\n            var endInput = container.find(\"[name=end]:visible\");\n\n            if (endInput[0] && startInput[0]) {\n              var start, end;\n              var startPicker = kendo.widgetInstance(startInput, kendo.ui);\n              var endPicker = kendo.widgetInstance(endInput, kendo.ui);\n              var editable = container.data(\"kendoEditable\");\n              var model = editable ? editable.options.model : null;\n\n              if (startPicker && endPicker) {\n                start = startPicker.value();\n                end = endPicker.value();\n              } else {\n                start = kendo.parseDate(startInput.val());\n                end = kendo.parseDate(endInput.val());\n              }\n\n              if (start && end) {\n                if (model) {\n                  var timezone = startInput.attr(kendo.attr(\"timezone\"));\n                  var startTimezone = model.startTimezone;\n                  var endTimezone = model.endTimezone;\n                  startTimezone = startTimezone || endTimezone;\n                  endTimezone = endTimezone || startTimezone;\n\n                  if (startTimezone) {\n                    start = applyZone(start, startTimezone, timezone);\n                    end = applyZone(end, endTimezone, timezone);\n                  }\n                }\n\n                return start <= end;\n              }\n            }\n          }\n\n          return true;\n        }\n\n        function untilDateCompareValidator(input) {\n          var untilPicker, until, container, startInput, start, startPicker;\n\n          if (input.filter(\".k-recur-until\").length) {\n            untilPicker = kendo.widgetInstance(input, kendo.ui);\n            until = untilPicker.value();\n            container = input.closest(\".k-scheduler-edit-form\");\n            startInput = container.find(\"[name=start]:visible\");\n\n            if (startInput[0]) {\n              startPicker = kendo.widgetInstance(startInput, kendo.ui);\n\n              if (startPicker) {\n                start = startPicker.value();\n              } else {\n                start = kendo.parseDate(startInput.val());\n              }\n\n              if (start && until) {\n                return start <= until;\n              }\n            }\n          }\n\n          return true;\n        }\n\n        var SchedulerEvent = kendo.data.Model.define({\n          init: function (value) {\n            var that = this;\n            kendo.data.Model.fn.init.call(that, value);\n            that._defaultId = that.defaults[that.idField];\n          },\n          _time: function (field) {\n            var date = this[field];\n            var fieldTime = \"_\" + field + \"Time\";\n\n            if (this[fieldTime]) {\n              return this[fieldTime] - kendo.date.toUtcTime(kendo.date.getDate(date));\n            }\n\n            return getMilliseconds(date);\n          },\n          _date: function (field) {\n            var fieldTime = \"_\" + field + \"Time\";\n\n            if (this[fieldTime]) {\n              return this[fieldTime] - this._time(field);\n            }\n\n            return kendo.date.getDate(this[field]);\n          },\n          clone: function (options, updateUid) {\n            var uid = this.uid,\n                event = new this.constructor($.extend({}, this.toJSON(), options));\n\n            if (!updateUid) {\n              event.uid = uid;\n            }\n\n            return event;\n          },\n          duration: function () {\n            var end = this.end;\n            var start = this.start;\n            var offset = (end.getTimezoneOffset() - start.getTimezoneOffset()) * kendo.date.MS_PER_MINUTE;\n            return end - start - offset;\n          },\n          expand: function (start, end, zone) {\n            return recurrence ? recurrence.expand(this, start, end, zone) : [this];\n          },\n          update: function (eventInfo) {\n            for (var field in eventInfo) {\n              this.set(field, eventInfo[field]);\n            }\n\n            if (this._startTime) {\n              this.set(\"_startTime\", kendo.date.toUtcTime(this.start));\n            }\n\n            if (this._endTime) {\n              this.set(\"_endTime\", kendo.date.toUtcTime(this.end));\n            }\n          },\n          isMultiDay: function () {\n            return this.isAllDay || this.duration() >= kendo.date.MS_PER_DAY;\n          },\n          isException: function () {\n            return !this.isNew() && this.recurrenceId;\n          },\n          isOccurrence: function () {\n            return this.isNew() && this.recurrenceId;\n          },\n          isRecurring: function () {\n            return !!(this.recurrenceRule || this.recurrenceId);\n          },\n          isRecurrenceHead: function () {\n            return !!(this.id && this.recurrenceRule);\n          },\n          toOccurrence: function (options) {\n            options = $.extend(options, {\n              recurrenceException: null,\n              recurrenceRule: null,\n              recurrenceId: this.id || this.recurrenceId\n            });\n            options[this.idField] = this.defaults[this.idField];\n            return this.clone(options, true);\n          },\n          toJSON: function () {\n            var obj = kendo.data.Model.fn.toJSON.call(this);\n            obj.uid = this.uid;\n            delete obj._startTime;\n            delete obj._endTime;\n            return obj;\n          },\n          shouldSerialize: function (field) {\n            return kendo.data.Model.fn.shouldSerialize.call(this, field) && field !== \"_defaultId\";\n          },\n          set: function (key, value) {\n            var isAllDay = this.isAllDay || false;\n            kendo.data.Model.fn.set.call(this, key, value);\n\n            if (key == \"isAllDay\" && value != isAllDay) {\n              var start = kendo.date.getDate(this.start);\n              var end = new Date(this.end);\n              var milliseconds = kendo.date.getMilliseconds(end);\n\n              if (milliseconds === 0 && value) {\n                milliseconds = MS_PER_DAY;\n              }\n\n              this.set(\"start\", start);\n\n              if (value === true) {\n                kendo.date.setTime(end, -milliseconds);\n\n                if (end < start) {\n                  end = start;\n                }\n              } else {\n                kendo.date.setTime(end, MS_PER_DAY - milliseconds);\n              }\n\n              this.set(\"end\", end);\n            }\n          },\n          id: \"id\",\n          fields: {\n            id: {\n              type: \"number\"\n            },\n            title: {\n              defaultValue: \"\",\n              type: \"string\"\n            },\n            start: {\n              type: \"date\",\n              validation: {\n                required: true,\n                validDate: {\n                  value: validDateValidator\n                }\n              }\n            },\n            startTimezone: {\n              type: \"string\"\n            },\n            end: {\n              type: \"date\",\n              validation: {\n                required: true,\n                validDate: {\n                  value: validDateValidator\n                },\n                dateCompare: {\n                  value: dateCompareValidator\n                }\n              }\n            },\n            endTimezone: {\n              type: \"string\"\n            },\n            recurrenceRule: {\n              defaultValue: \"\",\n              type: \"string\",\n              validation: {\n                validDate: {\n                  value: validDateValidator\n                },\n                untilDateCompare: {\n                  value: untilDateCompareValidator\n                }\n              }\n            },\n            recurrenceException: {\n              defaultValue: \"\",\n              type: \"string\"\n            },\n            isAllDay: {\n              type: \"boolean\",\n              defaultValue: false\n            },\n            description: {\n              type: \"string\"\n            }\n          }\n        });\n        var SchedulerDataSource = DataSource.extend({\n          init: function (options) {\n            DataSource.fn.init.call(this, extend(true, {}, {\n              schema: {\n                modelBase: SchedulerEvent,\n                model: SchedulerEvent\n              }\n            }, options));\n            this.reader = new SchedulerDataReader(this.options.schema, this.reader);\n          },\n          expand: function (start, end) {\n            var data = this.view(),\n                filter = {},\n                endOffset;\n\n            if (start && end) {\n              endOffset = end.getTimezoneOffset();\n              end = new Date(end.getTime() + MS_PER_DAY - 1);\n\n              if (end.getTimezoneOffset() !== endOffset) {\n                end = kendo.timezone.apply(end, endOffset);\n              }\n\n              filter = {\n                logic: \"or\",\n                filters: [{\n                  logic: \"and\",\n                  filters: [{\n                    field: \"start\",\n                    operator: \"gte\",\n                    value: start\n                  }, {\n                    field: \"end\",\n                    operator: \"gte\",\n                    value: start\n                  }, {\n                    field: \"start\",\n                    operator: \"lte\",\n                    value: end\n                  }]\n                }, {\n                  logic: \"and\",\n                  filters: [{\n                    field: \"start\",\n                    operator: \"lte\",\n                    value: new Date(start.getTime() + MS_PER_DAY - 1)\n                  }, {\n                    field: \"end\",\n                    operator: \"gte\",\n                    value: start\n                  }]\n                }]\n              };\n              data = new kendo.data.Query(expandAll(data, start, end, this.reader.timezone)).filter(filter).toArray();\n            }\n\n            return data;\n          },\n          cancelChanges: function (model) {\n            if (model && model.isOccurrence()) {\n              this._removeExceptionDate(model);\n            }\n\n            DataSource.fn.cancelChanges.call(this, model);\n          },\n          insert: function (index, model) {\n            if (!model) {\n              return;\n            }\n\n            if (!(model instanceof SchedulerEvent)) {\n              var eventInfo = model;\n              model = this._createNewModel();\n              model.accept(eventInfo);\n            }\n\n            if (!this._pushCreated && model.isRecurrenceHead() || model.recurrenceId) {\n              model = model.recurrenceId ? model : model.toOccurrence();\n\n              this._addExceptionDate(model);\n            }\n\n            return DataSource.fn.insert.call(this, index, model);\n          },\n          pushCreate: function (items) {\n            this._pushCreated = true;\n            DataSource.fn.pushCreate.call(this, items);\n            this._pushCreated = false;\n          },\n          remove: function (model) {\n            if (model.isRecurrenceHead()) {\n              this._removeExceptions(model);\n            } else if (model.isRecurring()) {\n              this._addExceptionDate(model);\n            }\n\n            return DataSource.fn.remove.call(this, model);\n          },\n          _removeExceptions: function (model) {\n            var data = this.data().slice(0),\n                item = data.shift(),\n                id = model.id;\n\n            while (item) {\n              if (item.recurrenceId === id) {\n                DataSource.fn.remove.call(this, item);\n              }\n\n              item = data.shift();\n            }\n\n            model.set(RECURRENCE_EXCEPTION, \"\");\n          },\n          _removeExceptionDate: function (model) {\n            if (model.recurrenceId) {\n              var head = this.get(model.recurrenceId);\n\n              if (head) {\n                var start = model.defaults.start;\n                var replaceRegExp = new RegExp(\"(\\\\\" + EXCEPTION_SEPARATOR + \"?)\" + recurrence.toExceptionString(start, this.reader.timezone));\n                var recurrenceException = (head.recurrenceException || \"\").replace(OLD_EXCEPTION_SEPARATOR_REGEXP, EXCEPTION_SEPARATOR).replace(/\\,$/, \"\");\n\n                if (replaceRegExp.test(recurrenceException)) {\n                  head.set(RECURRENCE_EXCEPTION, recurrenceException.replace(replaceRegExp, \"\"));\n                } else {\n                  start = model.start;\n                  replaceRegExp = new RegExp(\"(\\\\\" + EXCEPTION_SEPARATOR + \"?)\" + recurrence.toExceptionString(start, this.reader.timezone));\n                  head.set(RECURRENCE_EXCEPTION, recurrenceException.replace(replaceRegExp, \"\"));\n                }\n              }\n            }\n          },\n          _addExceptionDate: function (model) {\n            var start = model.start;\n            var zone = this.reader.timezone;\n            var head = this.get(model.recurrenceId);\n            var recurrenceException = (head.recurrenceException || \"\").replace(OLD_EXCEPTION_SEPARATOR_REGEXP, EXCEPTION_SEPARATOR).replace(/\\,$/, \"\");\n\n            if (!recurrence.isException(recurrenceException, start, zone)) {\n              var newException = recurrence.toExceptionString(start, zone);\n              model.defaults.start = start;\n              head.set(RECURRENCE_EXCEPTION, recurrenceException + (recurrenceException && newException ? EXCEPTION_SEPARATOR : \"\") + newException);\n            }\n          }\n        });\n\n        function expandAll(events, start, end, zone) {\n          var length = events.length,\n              data = [],\n              idx = 0;\n\n          for (; idx < length; idx++) {\n            data = data.concat(events[idx].expand(start, end, zone));\n          }\n\n          return data;\n        }\n\n        SchedulerDataSource.create = function (options) {\n          if (isArray(options) || options instanceof kendo.data.ObservableArray) {\n            options = {\n              data: options\n            };\n          }\n\n          var dataSource = options || {},\n              data = dataSource.data;\n          dataSource.data = data;\n\n          if (!(dataSource instanceof SchedulerDataSource) && dataSource instanceof kendo.data.DataSource) {\n            throw new Error(\"Incorrect DataSource type. Only SchedulerDataSource instances are supported\");\n          }\n\n          return dataSource instanceof SchedulerDataSource ? dataSource : new SchedulerDataSource(dataSource);\n        };\n\n        extend(true, kendo.data, {\n          SchedulerDataSource: SchedulerDataSource,\n          SchedulerDataReader: SchedulerDataReader,\n          SchedulerEvent: SchedulerEvent\n        });\n        var defaultCommands = {\n          update: {\n            text: \"Save\",\n            className: \"k-button-solid-primary k-scheduler-update\"\n          },\n          canceledit: {\n            text: \"Cancel\",\n            className: \"k-scheduler-cancel\"\n          },\n          destroy: {\n            text: \"Delete\",\n            imageClass: \"k-i-close\",\n            className: \"k-button-solid-primary k-scheduler-delete\",\n            iconClass: \"k-icon\"\n          }\n        };\n\n        function trimOptions(options, overrideOptions) {\n          delete options.name;\n          delete options.prefix;\n          delete options.remove;\n          delete options.edit;\n          delete options.add;\n          delete options.navigate;\n\n          for (var key in overrideOptions) {\n            options[key] = overrideOptions[key];\n          }\n\n          return options;\n        }\n        /*\n        function fieldType(field) {\n            field = field != null ? field : \"\";\n            return field.type || kendo.type(field) || \"string\";\n        }\n        */\n\n\n        function descriptionEditor(options) {\n          var attr = createValidationAttributes(options.model, options.field);\n          return function (container, model) {\n            $('<textarea name=\"description\" class=\"k-input-inner\" title=\"' + model.title + '\"/>').attr(attr).appendTo(container).wrap('<span class=\"k-input k-textarea k-input-solid k-input-md k-rounded-md\"></span>');\n          };\n        }\n\n        function createValidationAttributes(model, field) {\n          var modelField = (model.fields || model)[field];\n          var specialRules = [\"url\", \"email\", \"number\", \"date\", \"boolean\"];\n          var validation = modelField ? modelField.validation : {}; // var type = fieldType(modelField);\n\n          var datatype = kendo.attr(\"type\");\n          var inArray = $.inArray;\n          var ruleName;\n          var rule;\n          var attr = {};\n\n          for (ruleName in validation) {\n            rule = validation[ruleName];\n\n            if (inArray(ruleName, specialRules) >= 0) {\n              attr[datatype] = ruleName;\n            } else if (!kendo.isFunction(rule)) {\n              attr[ruleName] = isPlainObject(rule) ? rule.value || ruleName : rule;\n            }\n\n            attr[kendo.attr(ruleName + \"-msg\")] = rule.message;\n          }\n\n          return attr;\n        }\n\n        function filterResourceEditorData(editor, parentValue, parentValueField, valueField) {\n          var editorValue = editor.value(),\n              isMs = Array.isArray(editorValue),\n              valueArray;\n\n          if (isMs) {\n            valueArray = JSON.parse(JSON.stringify(editorValue));\n          } else {\n            valueArray = [editorValue.toString()];\n          }\n\n          editor.dataSource.data().forEach(function (item) {\n            if (item[parentValueField] === null || item[parentValueField] === undefined || item[parentValueField] == parentValue) {\n              item.set(DISABLED, false);\n            } else {\n              var currentValue = item.get(valueField);\n              item.set(DISABLED, true);\n\n              if (valueArray.indexOf(currentValue) >= 0 || valueArray.indexOf(currentValue.toString()) >= 0) {\n                if (isMs) {\n                  valueArray.splice(valueArray.indexOf(currentValue), 1);\n                } else {\n                  editor.value(null);\n                  editor.trigger(CHANGE);\n                }\n              }\n            }\n          });\n\n          if (isMs && valueArray.length < editorValue.length) {\n            editor.value(valueArray);\n            editor.trigger(CHANGE);\n          }\n        }\n\n        function bindParentValueChangeHandler(container, currentEditor, resource, parent) {\n          var parentElement = container.closest(\".k-edit-form-container\").find(\"[data-\" + kendo.ns + \"bind='value:\" + parent + \"']\");\n          var parentWidget = parentElement.getKendoDropDownList();\n\n          if (parentWidget) {\n            parentWidget.bind(CHANGE, function (ev) {\n              var parentValue = ev.sender.value();\n              filterResourceEditorData(currentEditor, parentValue, resource.dataParentValueField, resource.dataValueField);\n            });\n          } else {\n            parentElement.on(CHANGE, function (ev) {\n              var parentValue = ev.target.value;\n              filterResourceEditorData(currentEditor, parentValue, resource.dataParentValueField, resource.dataValueField);\n            });\n          }\n        }\n\n        function filterMobileResourceEditorData(resource, currentEditor, parentSelectedValue) {\n          var options = currentEditor.find(OPTION),\n              editorValue = currentEditor.val(),\n              isMs = Array.isArray(editorValue),\n              valueArray;\n\n          if (isMs) {\n            valueArray = JSON.parse(JSON.stringify(editorValue));\n          } else {\n            valueArray = [editorValue];\n          }\n\n          resource.dataSource.view().forEach(function (item, index) {\n            var itemParentValue = kendo.getter(resource.dataParentValueField)(item);\n            var valid = itemParentValue === null || itemParentValue === undefined || itemParentValue == parentSelectedValue;\n\n            if (valid) {\n              options[index].removeAttribute(DISABLED);\n            } else {\n              options[index].setAttribute(DISABLED, DISABLED);\n              var currentValue = \"\" + item.get(resource.dataValueField);\n\n              if (valueArray.indexOf(currentValue) >= 0) {\n                if (isMs) {\n                  valueArray.splice(valueArray.indexOf(currentValue), 1);\n                } else {\n                  currentEditor.val(null);\n                  currentEditor.trigger(CHANGE);\n                }\n              }\n            }\n          });\n\n          if (isMs && valueArray.length < editorValue.length) {\n            currentEditor.val(valueArray);\n            currentEditor.trigger(CHANGE);\n          }\n        }\n\n        function dropDownResourceEditor(resource, model, parent) {\n          var attr = createValidationAttributes(model, resource.field);\n          return function (container) {\n            var currentEditor;\n\n            if (parent) {\n              setTimeout(function () {\n                filterResourceEditorData(currentEditor, model[parent], resource.dataParentValueField, resource.dataValueField);\n                bindParentValueChangeHandler(container, currentEditor, resource, parent);\n              });\n            }\n\n            currentEditor = $(kendo.format('<select aria-labelledby=\"' + resource.field + '_label\" data-{0}bind=\"value:{1}\" title=\"' + model.title + '\">', kendo.ns, resource.field)).appendTo(container).attr(attr).kendoDropDownList({\n              dataTextField: resource.dataTextField,\n              dataValueField: resource.dataValueField,\n              dataSource: resource.dataSource.data(),\n              valuePrimitive: resource.valuePrimitive,\n              optionLabel: \"None\",\n              template: kendo.format('<span #= data.disabled ? \"data-disabled\": \"\"#><span class=\"k-scheduler-mark\" style=\"background-color:#= data.{0}?{0}:\"none\" #\"></span>#={1}#</span>', resource.dataColorField, resource.dataTextField),\n              select: function (e) {\n                if (e.dataItem && e.dataItem.disabled) {\n                  e.preventDefault();\n                }\n              },\n              dataBound: function (e) {\n                var options = e.sender.list.find('li');\n                options.each(function (i, el) {\n                  var element = $(el);\n\n                  if (element.find(\"[data-disabled]\").length > 0) {\n                    element.addClass(\"k-state-disabled\");\n                  }\n                });\n              }\n            }).data(\"kendoDropDownList\");\n          };\n        }\n\n        function dropDownResourceEditorMobile(resource, model, parent) {\n          var attr = createValidationAttributes(model, resource.field);\n          return function (container) {\n            var options = \"\";\n            var view = resource.dataSource.view();\n\n            for (var idx = 0, length = view.length; idx < length; idx++) {\n              options += kendo.format('<option value=\"{0}\">{1}</option>', kendo.getter(resource.dataValueField)(view[idx]), kendo.getter(resource.dataTextField)(view[idx]));\n            }\n\n            var currentEditor = $(kendo.format('<select aria-labelledby=\"' + resource.field + '_label\" data-{0}bind=\"value:{1}\">{2}</select>', kendo.ns, resource.field, options)).appendTo(container).attr(attr);\n\n            if (parent) {\n              setTimeout(function () {\n                var parentElement = container.closest(\".k-stretched-view\").find(\"[data-\" + kendo.ns + \"bind='value:\" + parent + \"']\");\n                var parentSelectedValue = model[parent];\n                filterMobileResourceEditorData(resource, currentEditor, parentSelectedValue);\n                parentElement.on(CHANGE, function (ev) {\n                  var parentValue = ev.target.value;\n                  filterMobileResourceEditorData(resource, currentEditor, parentValue);\n                });\n              });\n            }\n          };\n        }\n\n        function multiSelectResourceEditor(resource, model, parent) {\n          var attr = createValidationAttributes(model, resource.field);\n          return function (container) {\n            var currentEditor;\n\n            if (parent) {\n              setTimeout(function () {\n                filterResourceEditorData(currentEditor, model[parent], resource.dataParentValueField, resource.dataValueField);\n                bindParentValueChangeHandler(container, currentEditor, resource, parent);\n              });\n            }\n\n            currentEditor = $(kendo.format('<select aria-labelledby=\"' + resource.field + '_label\" data-{0}bind=\"value:{1}\">', kendo.ns, resource.field)).appendTo(container).attr(attr).kendoMultiSelect({\n              dataTextField: resource.dataTextField,\n              dataValueField: resource.dataValueField,\n              dataSource: resource.dataSource.data(),\n              valuePrimitive: resource.valuePrimitive,\n              itemTemplate: kendo.format('<span #= data.disabled ? \"data-disabled\": \"\" #><span class=\"k-scheduler-mark\" style=\"background-color:#= data.{0}?{0}:\"none\" #\"></span>#={1}#</span>', resource.dataColorField, resource.dataTextField),\n              tagTemplate: kendo.format('<span class=\"k-scheduler-mark\" style=\"background-color:#= data.{0}?{0}:\"none\" #\"></span>#={1}#', resource.dataColorField, resource.dataTextField),\n              select: function (e) {\n                if (e.dataItem && e.dataItem.disabled) {\n                  e.preventDefault();\n                }\n              },\n              dataBound: function (e) {\n                var options = e.sender.list.find('li');\n                options.each(function (i, el) {\n                  var element = $(el);\n\n                  if (element.find(\"[data-disabled]\").length > 0) {\n                    element.addClass(\"k-state-disabled\");\n                  }\n                });\n              }\n            }).data(\"kendoMultiSelect\");\n          };\n        }\n\n        function multiSelectResourceEditorMobile(resource, model, parent) {\n          var attr = createValidationAttributes(model, resource.field);\n          return function (container) {\n            var options = \"\";\n            var view = resource.dataSource.view();\n\n            for (var idx = 0, length = view.length; idx < length; idx++) {\n              options += kendo.format('<option value=\"{0}\">{1}</option>', kendo.getter(resource.dataValueField)(view[idx]), kendo.getter(resource.dataTextField)(view[idx]));\n            }\n\n            var currentEditor = $(kendo.format('<select aria-labelledby=\"' + resource.field + '_label\" data-{0}bind=\"value:{1}\" multiple=\"multiple\">{2}</select>', kendo.ns, resource.field, options)).appendTo(container).attr(attr);\n\n            if (parent) {\n              setTimeout(function () {\n                var parentElement = container.closest(\".k-stretched-view\").find(\"[data-\" + kendo.ns + \"bind='value:\" + parent + \"']\");\n                var parentSelectedValue = model[parent];\n                filterMobileResourceEditorData(resource, currentEditor, parentSelectedValue);\n                parentElement.on(CHANGE, function (ev) {\n                  var parentValue = ev.target.value;\n                  filterMobileResourceEditorData(resource, currentEditor, parentValue);\n                });\n              });\n            }\n          };\n        }\n\n        function moveEventRange(event, distance) {\n          var duration = event.end.getTime() - event.start.getTime();\n          var start = new Date(event.start.getTime());\n          kendo.date.setTime(start, distance);\n          var end = new Date(start.getTime());\n          kendo.date.setTime(end, duration, true);\n          return {\n            start: start,\n            end: end\n          };\n        }\n\n        var editors = {\n          mobile: {\n            dateRange: MOBILEDATERANGEEDITOR,\n            timezonePopUp: MOBILETIMEZONEPOPUP,\n            timezone: MOBILETIMEZONEEDITOR,\n            recurrence: MOBILERECURRENCEEDITOR,\n            description: descriptionEditor,\n            multipleResources: multiSelectResourceEditorMobile,\n            resources: dropDownResourceEditorMobile,\n            isAllDay: MOBILEISALLDAYEDITOR\n          },\n          desktop: {\n            dateRange: DATERANGEEDITOR,\n            timezonePopUp: TIMEZONEPOPUP,\n            timezone: TIMEZONEEDITOR,\n            recurrence: RECURRENCEEDITOR,\n            description: descriptionEditor,\n            multipleResources: multiSelectResourceEditor,\n            resources: dropDownResourceEditor\n          }\n        };\n        var Editor = kendo.Observable.extend({\n          init: function (element, options) {\n            kendo.Observable.fn.init.call(this);\n            this.element = element;\n            this.options = extend(true, {}, this.options, options);\n            this.createButton = this.options.createButton;\n            this.toggleDateValidationHandler = this._toggleDateValidation.bind(this);\n          },\n          _toggleDateValidation: function (e) {\n            if (e.field == \"isAllDay\") {\n              var container = this.container,\n                  isAllDay = this.editable.options.model.isAllDay,\n                  bindAttribute = kendo.attr(\"bind\"),\n                  element,\n                  isDateTimeInput,\n                  shouldValidate;\n              container.find(\"[\" + bindAttribute + \"*=end],[\" + bindAttribute + \"*=start]\").each(function () {\n                element = $(this);\n\n                if (valueStartEndBoundRegex.test(element.attr(bindAttribute))) {\n                  isDateTimeInput = element.is(\"[\" + kendo.attr(\"role\") + \"=datetimepicker],[type*=datetime]\");\n                  shouldValidate = isAllDay !== isDateTimeInput;\n                  element.attr(kendo.attr(\"validate\"), shouldValidate);\n                }\n              });\n            }\n          },\n          fields: function (editors, model) {\n            var that = this;\n            var messages = that.options.messages;\n            var timezone = that.options.timezone;\n\n            var click = function (e) {\n              e.preventDefault();\n\n              that._initTimezoneEditor(model, this);\n            };\n\n            var fields = [{\n              field: \"title\",\n              title: messages.editor.title\n              /*, format: field.format, editor: field.editor, values: field.values*/\n\n            }, {\n              field: \"start\",\n              title: messages.editor.start,\n              editor: editors.dateRange,\n              timezone: timezone\n            }, {\n              field: \"end\",\n              title: messages.editor.end,\n              editor: editors.dateRange,\n              timezone: timezone\n            }, {\n              field: \"isAllDay\",\n              title: messages.editor.allDayEvent,\n              editor: editors.isAllDay\n            }];\n\n            var checkHierarchical = function (item) {\n              return !!item[resource.dataParentValueField];\n            };\n\n            if (kendo.timezone.windows_zones) {\n              fields.push({\n                field: \"timezone\",\n                title: messages.editor.timezone,\n                editor: editors.timezonePopUp,\n                click: click,\n                messages: messages.editor,\n                model: model\n              });\n              fields.push({\n                field: \"startTimezone\",\n                title: messages.editor.startTimezone,\n                editor: editors.timezone,\n                noTimezone: messages.editor.noTimezone\n              });\n              fields.push({\n                field: \"endTimezone\",\n                title: messages.editor.endTimezone,\n                editor: editors.timezone,\n                noTimezone: messages.editor.noTimezone\n              });\n            }\n\n            if (!model.recurrenceId) {\n              fields.push({\n                field: \"recurrenceRule\",\n                title: messages.editor.repeat,\n                editor: editors.recurrence,\n                timezone: timezone,\n                messages: messages.recurrenceEditor,\n                pane: this.pane\n              });\n            }\n\n            if (\"description\" in model) {\n              fields.push({\n                field: \"description\",\n                title: messages.editor.description,\n                editor: editors.description({\n                  model: model,\n                  field: \"description\"\n                })\n              });\n            }\n\n            for (var resourceIndex = 0; resourceIndex < this.options.resources.length; resourceIndex++) {\n              var resource = this.options.resources[resourceIndex];\n              var resourceView = resource.dataSource.view();\n              var hasParent = resourceView.some(checkHierarchical);\n              var parentResource, parent;\n\n              if (hasParent) {\n                parentResource = this.options.resources[resourceIndex - 1];\n\n                if (parentResource) {\n                  parent = parentResource.field;\n                }\n              }\n\n              fields.push({\n                field: resource.field,\n                title: resource.title,\n                editor: resource.multiple ? editors.multipleResources(resource, model, parent) : editors.resources(resource, model, parent)\n              });\n            }\n\n            return fields;\n          },\n          end: function () {\n            return this.editable.end();\n          },\n          _buildDesktopEditTemplate: function (model, fields, editableFields) {\n            var messages = this.options.messages;\n            var settings = extend({}, kendo.Template, this.options.templateSettings);\n            var paramName = settings.paramName;\n            var html = \"\";\n\n            for (var idx = 0, length = fields.length; idx < length; idx++) {\n              var field = fields[idx];\n\n              if (field.field === \"startTimezone\") {\n                html += '<div class=\"k-popup-edit-form k-scheduler-edit-form k-scheduler-timezones\" style=\"display:none\">';\n                html += '<div class=\"k-edit-form-container\">';\n                html += '<div class=\"k-edit-label\"></div>';\n                html += '<div class=\"k-edit-field\"><label class=\"k-check\"><input class=\"k-timezone-toggle k-checkbox k-checkbox-md k-rounded-md\" type=\"checkbox\"/>' + messages.editor.separateTimezones + '</label></div>';\n              }\n\n              html += '<div class=\"k-edit-label\"><label for=\"' + field.field + '\" id=\"' + field.field + '_label\">' + (field.title || field.field || \"\") + '</label></div>';\n\n              if (!model.editable || model.editable(field.field)) {\n                editableFields.push(field);\n                html += '<div ' + kendo.attr(\"container-for\") + '=\"' + field.field + '\" class=\"k-edit-field\"></div>';\n              } else {\n                var tmpl = \"#:\";\n\n                if (field.field) {\n                  field = kendo.expr(field.field, paramName);\n                  tmpl += field + \"==null?'':\" + field;\n                } else {\n                  tmpl += \"''\";\n                }\n\n                tmpl += \"#\";\n                tmpl = kendo.template(tmpl, settings);\n                html += '<div class=\"k-edit-field\">' + tmpl(model) + '</div>';\n              }\n\n              if (field.field === \"endTimezone\") {\n                html += this._createEndTimezoneButton();\n              }\n            }\n\n            return html;\n          },\n          _buildMobileEditTemplate: function (model, fields, editableFields) {\n            var messages = this.options.messages;\n            var settings = extend({}, kendo.Template, this.options.templateSettings);\n            var paramName = settings.paramName;\n            var html = \"\";\n            html += '<ul class=\"k-listgroup k-listgroup-flush\">';\n\n            for (var idx = 0, length = fields.length; idx < length; idx++) {\n              var field = fields[idx];\n\n              if (field.field === \"timezone\" || field.field === \"recurrenceRule\") {\n                html += '</ul><ul class=\"k-listgroup k-listgroup-flush\">';\n              }\n\n              if (field.field === \"startTimezone\") {\n                html += '<div class=\"k-popup-edit-form k-scheduler-edit-form k-scheduler-timezones\" style=\"display:none\">';\n                html += '<ul class=\"k-listgroup k-listgroup-flush\">';\n                html += '<li class=\"k-item k-listgroup-item\">';\n                html += '<label class=\"k-label k-listgroup-form-row\">';\n                html += '<span class=\"k-item-title k-listgroup-form-row\">' + messages.editor.separateTimezones + '</span>';\n                html += '<span class=\"k-listgroup-form-field-wrapper\">';\n                html += '<input class=\"k-timezone-toggle\" data-role=\"switch\" type=\"checkbox\" />';\n                html += '</span>';\n                html += '</label>';\n                html += '</li>';\n              }\n\n              if (!model.editable || model.editable(field.field)) {\n                html += '<li class=\"k-item k-listgroup-item\">';\n\n                if (field.field === \"timezone\") {\n                  html += '<label class=\"k-label k-listgroup-form-row\" data-bind=\"css: { k-state-disabled: isAllDay }\">';\n                } else {\n                  html += '<label class=\"k-label k-listgroup-form-row\">';\n                }\n\n                html += '<span class=\"k-item-title k-listgroup-form-field-label\">' + (field.title || field.field || \"\") + '</span>';\n                editableFields.push(field);\n                html += '<div class=\"k-listgroup-form-field-wrapper\" ' + kendo.attr(\"container-for\") + '=\"' + field.field + '\"></div>';\n                html += '</label></li>';\n              } else {\n                var tmpl = \"#:\";\n                html += '<li class=\"k-item k-listgroup-item\">';\n                html += '<label class=\"k-label k-no-click k-listgroup-form-row\">';\n                html += '<span class=\"k-item-title k-listgroup-form-field-label\">' + (field.title || field.field || \"\") + '</span>';\n\n                if (field.field) {\n                  field = kendo.expr(field.field, paramName);\n                  tmpl += field + \"==null?'':\" + field;\n                } else {\n                  tmpl += \"''\";\n                }\n\n                tmpl += \"#\";\n                tmpl = kendo.template(tmpl, settings);\n                html += '<span class=\"k-no-editor k-listgroup-form-field-wrapper\">' + tmpl(model) + '</span>';\n                html += '</label></li>';\n              }\n\n              if (field.field === \"recurrenceRule\") {\n                html += '</ul><ul class=\"k-listgroup k-listgroup-flush\">';\n              }\n\n              if (field.field === \"endTimezone\") {\n                html += \"</ul></div>\";\n              }\n            }\n\n            html += '</ul>';\n            return html;\n          },\n          _buildEditTemplate: function (model, fields, editableFields, isMobile) {\n            var settings = extend({}, kendo.Template, this.options.templateSettings);\n            var template = this.options.editable.template;\n            var html = \"\";\n\n            if (template) {\n              if (typeof template === STRING) {\n                template = kendo.unescape(template);\n              }\n\n              html += kendo.template(template, settings)(model);\n            } else if (isMobile) {\n              html += '<div data-role=\"content\">' + this._buildMobileEditTemplate(model, fields, editableFields) + '</div>';\n            } else {\n              html += this._buildDesktopEditTemplate(model, fields, editableFields);\n            }\n\n            return html;\n          },\n          _createEndTimezoneButton: function () {\n            return '</ul></div>';\n          },\n          _revertTimezones: function (model) {\n            model.set(\"startTimezone\", this._startTimezone);\n            model.set(\"endTimezone\", this._endTimezone);\n            delete this._startTimezone;\n            delete this._endTimezone;\n          }\n        });\n        var MobileEditor = Editor.extend({\n          init: function () {\n            Editor.fn.init.apply(this, arguments);\n            this.pane = kendo.Pane.wrap(this.element, {\n              viewEngine: {\n                viewOptions: {\n                  renderOnInit: true,\n                  wrap: false,\n                  wrapInSections: true,\n                  detachOnHide: false,\n                  detachOnDestroy: false\n                }\n              }\n            });\n            this.pane.element.parent().css(\"height\", this.options.height);\n            this.view = this.pane.view();\n          },\n          options: {\n            animations: {\n              left: \"slide\",\n              right: \"slide:right\"\n            }\n          },\n          destroy: function () {\n            this.close();\n            this.unbind();\n            this.pane.destroy();\n          },\n          _initTimezoneEditor: function (model) {\n            var that = this;\n            var pane = that.pane;\n            var messages = that.options.messages;\n            var timezoneView = that.timezoneView;\n            var container = timezoneView ? timezoneView.content.find(\".k-scheduler-timezones\") : that.container.find(\".k-scheduler-timezones\");\n            var kSwitch = container.find(\"input.k-timezone-toggle\").data(\"kendoSwitch\");\n            var endTimezoneRow = container.find(\"li.k-item:not(.k-zonepicker)\").last();\n\n            var startTimezoneChange = function (e) {\n              if (e.field === \"startTimezone\") {\n                var value = model.startTimezone;\n                kSwitch.enable(value);\n\n                if (!value) {\n                  endTimezoneRow.hide();\n                  model.set(\"endTimezone\", \"\");\n                  kSwitch.value(false);\n                }\n              }\n            };\n\n            that._startTimezone = model.startTimezone || \"\";\n            that._endTimezone = model.endTimezone || \"\";\n\n            if (!timezoneView) {\n              var html = '<div data-role=\"view\" class=\"k-popup-edit-form k-scheduler-edit-form\">' + '<div data-role=\"header\" class=\"k-header\">' + '<a href=\"\\\\#\" class=\"k-header-cancel k-scheduler-cancel k-link\" title=\"' + messages.cancel + '\"' + 'aria-label=\"' + messages.cancel + '\"><span class=\"k-icon k-i-arrow-chevron-left\"></span></a>' + messages.editor.timezoneTitle + '<a href=\"\\\\#\" class=\"k-header-done k-scheduler-update k-link\" title=\"' + messages.save + '\" ' + 'aria-label=\"' + messages.save + '\"><span class=\"k-icon k-i-check\"></span></a>' + '</div><div data-role=\"content\"></div>';\n              this.timezoneView = timezoneView = pane.append(html);\n              timezoneView.contentElement.append(container.show());\n              timezoneView.element.on(CLICK + NS, \".k-scheduler-cancel, .k-scheduler-update\", function (e) {\n                e.preventDefault();\n                e.stopPropagation();\n\n                if ($(this).hasClass(\"k-scheduler-cancel\")) {\n                  that._revertTimezones(model);\n                }\n\n                var editView = that._editPane;\n                var text = timezoneButtonText(model, messages.editor.noTimezone);\n                editView.content.find(\".k-timezone-label\").text(text);\n                pane.navigate(editView, that.options.animations.right);\n              });\n              kSwitch.bind(CHANGE, function (ev) {\n                endTimezoneRow.toggle(ev.checked);\n                model.set(\"endTimezone\", \"\");\n              });\n              model.bind(CHANGE, startTimezoneChange);\n            }\n\n            kSwitch.value(!!model.endTimezone);\n            kSwitch.enable(!!model.startTimezone);\n\n            if (model.endTimezone) {\n              endTimezoneRow.show();\n            } else {\n              endTimezoneRow.hide();\n            }\n\n            pane.navigate(timezoneView, that.options.animations.left);\n          },\n          showDialog: function (options) {\n            var actions = options.buttons.map(function (button) {\n              return {\n                text: button.text,\n                action: button.click\n              };\n            });\n            actions.push({\n              text: this.options.messages.cancel,\n              primary: true\n            });\n            $(\"<div />\").appendTo(document.body).kendoDialog({\n              close: function () {\n                this.destroy();\n              },\n              modal: {\n                preventScroll: true\n              },\n              closable: false,\n              title: false,\n              content: options.text,\n              actions: actions\n            });\n          },\n          editEvent: function (model) {\n            var pane = this.pane;\n            var html = \"\";\n            var messages = this.options.messages;\n            var updateText = messages.save;\n            var removeText = messages.destroy;\n            var cancelText = messages.cancel;\n            var titleText = messages.editor.editorTitle;\n            var resetSeries = messages.resetSeries;\n            html += '<div data-role=\"view\" class=\"k-popup-edit-form k-scheduler-edit-form\"' + kendo.attr(\"uid\") + '=\"' + model.uid + '\">' + '<div data-role=\"header\" class=\"k-header\">' + '<a href=\"\\\\#\" class=\"k-header-cancel k-scheduler-cancel k-link\" title=\"' + cancelText + '\"' + 'aria-label=\"' + cancelText + '\"><span class=\"k-icon k-i-arrow-chevron-left\"></span></a>' + titleText + '<a href=\"\\\\#\" class=\"k-header-done k-scheduler-update k-link\" title=\"' + updateText + '\" ' + 'aria-label=\"' + updateText + '\"><span class=\"k-icon k-i-check\"></span></a>' + '</div>';\n            var fields = this.fields(editors.mobile, model);\n            var that = this;\n            var editableFields = [];\n            html += this._buildEditTemplate(model, fields, editableFields, true);\n            html += \"</div>\";\n            var view = pane.append(html);\n\n            if (!model.isNew() && this.options.editable && this.options.editable.destroy !== false && model.isRecurrenceHead() && model.recurrenceException) {\n              var resetSeriesBtn = '<ul class=\"k-edit-buttons k-listgroup k-listgroup-flush\"><li class=\"k-item k-listgroup-item\"><span class=\"k-scheduler-resetSeries k-link k-label\" aria-label=\"' + resetSeries + '\">' + resetSeries + '</span></li></ul>';\n              view.contentElement.append(resetSeriesBtn);\n            }\n\n            if (!model.isNew() && this.options.editable && this.options.editable.destroy !== false) {\n              var deleteBtn = '<ul class=\"k-edit-buttons k-listgroup k-listgroup-flush\"><li class=\"k-item k-listgroup-item\"><span class=\"k-scheduler-delete k-link k-label\" aria-label=\"' + removeText + '\">' + removeText + '</span></li></ul>';\n              view.contentElement.append(deleteBtn);\n            }\n\n            this._editPane = view;\n            var container = this.container = view.element;\n            this.editable = container.kendoEditable({\n              fields: editableFields,\n              model: model,\n              clearContainer: false,\n              target: that.options.target,\n              validateOnBlur: true\n            }).data(\"kendoEditable\");\n\n            if (!this.trigger(\"edit\", {\n              container: container,\n              model: model\n            })) {\n              container.on(CLICK + NS, \"a.k-scheduler-edit, a.k-scheduler-cancel, a.k-scheduler-update, span.k-scheduler-delete, span.k-scheduler-resetSeries\", function (e) {\n                e.preventDefault();\n                e.stopPropagation();\n                var button = $(this);\n\n                if (!button.hasClass(\"k-scheduler-edit\")) {\n                  var name = \"cancel\";\n\n                  if (button.hasClass(\"k-scheduler-update\")) {\n                    name = \"save\";\n                  } else if (button.hasClass(\"k-scheduler-delete\")) {\n                    name = \"remove\";\n                  } else if (button.hasClass(\"k-scheduler-resetSeries\")) {\n                    name = RESET;\n                  }\n\n                  that.trigger(name, {\n                    container: container,\n                    model: model\n                  });\n                } else {\n                  pane.navigate(this._editPane, that.options.animations.right);\n                }\n              });\n              pane.navigate(view, that.options.animations.left);\n              model.bind(CHANGE, that.toggleDateValidationHandler);\n            } else {\n              this.trigger(\"cancel\", {\n                container: container,\n                model: model\n              });\n            }\n\n            return this.editable;\n          },\n          _views: function () {\n            return this.pane.element.find(kendo.roleSelector(\"view\")).not(this.view.element);\n          },\n          close: function () {\n            if (this.container) {\n              this.pane.navigate(\"\", this.options.animations.right);\n\n              var views = this._views();\n\n              var view;\n\n              for (var idx = 0, length = views.length; idx < length; idx++) {\n                view = views.eq(idx).data(\"kendoView\");\n\n                if (view) {\n                  view.purge();\n                }\n              }\n\n              views.remove();\n              this.container = null;\n\n              if (this.editable) {\n                this.editable.options.model.unbind(CHANGE, this.toggleDateValidationHandler);\n                this.editable.destroy();\n                this.editable = null;\n              }\n\n              this.timezoneView = null;\n            }\n          }\n        });\n        var PopupEditor = Editor.extend({\n          destroy: function () {\n            this.close();\n            this.unbind();\n          },\n          editEvent: function (model) {\n            var that = this;\n            var editable = that.options.editable;\n            var html = '<div ' + kendo.attr(\"uid\") + '=\"' + model.uid + '\" class=\"k-popup-edit-form k-scheduler-edit-form\"><div class=\"k-edit-form-container\">';\n            var messages = that.options.messages;\n            var updateText = messages.save;\n            var cancelText = messages.cancel;\n            var deleteText = messages.destroy;\n            var resetSeries = messages.resetSeries;\n            var fields = this.fields(editors.desktop, model);\n            var editableFields = [];\n            var fieldName;\n            html += this._buildEditTemplate(model, fields, editableFields, false);\n            var attr;\n            var options = isPlainObject(editable) ? editable.window : {};\n            html += '<div class=\"k-edit-buttons\">';\n            html += this.createButton({\n              name: \"update\",\n              text: updateText,\n              attr: attr\n            }) + this.createButton({\n              name: \"canceledit\",\n              text: cancelText,\n              attr: attr\n            });\n\n            if (!model.isNew() && editable.destroy !== false && model.isRecurrenceHead() && model.recurrenceException) {\n              html += this.createButton({\n                name: \"resetSeries\",\n                text: resetSeries,\n                attr: attr\n              });\n            }\n\n            if ((!model.isNew() || model.isRecurring()) && editable.destroy !== false) {\n              html += this.createButton({\n                name: \"delete\",\n                text: deleteText,\n                attr: attr\n              });\n            }\n\n            html += '</div></div></div>';\n            var container = this.container = $(html).appendTo(that.element).eq(0).kendoWindow(extend({\n              minWidth: 660,\n              modal: true,\n              resizable: false,\n              draggable: true,\n              title: messages.editor.editorTitle,\n              visible: false,\n              close: function (e) {\n                if (e.userTriggered) {\n                  if (that.trigger(CANCEL, {\n                    container: container,\n                    model: model\n                  })) {\n                    e.preventDefault();\n                  }\n                }\n              }\n            }, options));\n            that.editable = container.kendoEditable({\n              fields: editableFields,\n              model: model,\n              clearContainer: false,\n              validateOnBlur: true,\n              target: that.options.target\n            }).data(\"kendoEditable\");\n\n            for (var field in editableFields) {\n              if (editableFields[field].field !== \"recurrenceRule\") {\n                fieldName = editableFields[field].field;\n                container.find(\"[name='\" + fieldName + \"']\").attr(\"aria-labelledby\", fieldName + \"_label\");\n              }\n            }\n\n            if (!that.trigger(EDIT, {\n              container: container,\n              model: model\n            })) {\n              container.data(\"kendoWindow\").center().open();\n              container.on(CLICK + NS, \"button.k-scheduler-cancel\", function (e) {\n                e.preventDefault();\n                e.stopPropagation();\n                that.trigger(CANCEL, {\n                  container: container,\n                  model: model\n                });\n              });\n              container.on(CLICK + NS, \"button.k-scheduler-update\", function (e) {\n                e.preventDefault();\n                e.stopPropagation();\n                that.trigger(\"save\", {\n                  container: container,\n                  model: model\n                });\n              });\n              container.on(CLICK + NS, \"button.k-scheduler-delete\", function (e) {\n                e.preventDefault();\n                e.stopPropagation();\n                that.trigger(REMOVE, {\n                  container: container,\n                  model: model\n                });\n              });\n              container.on(CLICK + NS, \"button.k-scheduler-resetSeries\", function (e) {\n                e.preventDefault();\n                e.stopPropagation();\n                that.trigger(RESET, {\n                  container: container,\n                  model: model\n                });\n              });\n              kendo.cycleForm(container);\n              model.bind(CHANGE, that.toggleDateValidationHandler);\n            } else {\n              that.trigger(CANCEL, {\n                container: container,\n                model: model\n              });\n            }\n\n            return that.editable;\n          },\n          close: function () {\n            var that = this;\n\n            var destroy = function () {\n              if (that.editable) {\n                that.editable.options.model.unbind(CHANGE, that.toggleDateValidationHandler);\n                that.editable.destroy();\n                that.editable = null;\n                that.container = null;\n              }\n\n              if (that.popup) {\n                that.popup.destroy();\n                that.popup = null;\n              }\n            };\n\n            if (that.editable) {\n              if (that._timezonePopup && that._timezonePopup.data(\"kendoWindow\")) {\n                that._timezonePopup.data(\"kendoWindow\").destroy();\n\n                that._timezonePopup = null;\n              }\n\n              if (that.container.is(\":visible\")) {\n                that.container.data(\"kendoWindow\").bind(\"deactivate\", destroy).close();\n              } else {\n                destroy();\n              }\n            } else {\n              destroy();\n            }\n          },\n          _createEndTimezoneButton: function () {\n            var messages = this.options.messages;\n            var html = \"\";\n            html += '<div class=\"k-edit-buttons\">';\n            html += this.createButton({\n              name: \"savetimezone\",\n              text: messages.save\n            }) + this.createButton({\n              name: \"canceltimezone\",\n              text: messages.cancel\n            });\n            html += '</div></div></div>';\n            return html;\n          },\n          showDialog: function (options) {\n            var html = kendo.format(\"<div class='k-popup-edit-form'><div class='k-edit-form-container'><p class='k-popup-message'>{0}</p>\", options.text);\n            html += '<div class=\"k-edit-buttons\">';\n\n            for (var buttonIndex = 0; buttonIndex < options.buttons.length; buttonIndex++) {\n              html += this.createButton(options.buttons[buttonIndex]);\n            }\n\n            html += '</div></div></div>';\n            var wrapper = this.element;\n\n            if (this.popup) {\n              this.popup.destroy();\n            }\n\n            var popup = this.popup = $(html).appendTo(wrapper).eq(0).on(CLICK, \".k-button\", function (e) {\n              e.preventDefault();\n              popup.close();\n              var buttonIndex = $(e.currentTarget).index();\n              options.buttons[buttonIndex].click();\n            }).kendoWindow({\n              modal: true,\n              resizable: false,\n              draggable: false,\n              title: options.title,\n              visible: false,\n              close: function () {\n                this.destroy();\n                wrapper.trigger(\"focus\");\n              }\n            }).getKendoWindow();\n            popup.center().open();\n          },\n          _initTimezoneEditor: function (model, activator) {\n            var that = this;\n            var container = that.container.find(\".k-scheduler-timezones\");\n            var checkbox = container.find(\"input.k-timezone-toggle\");\n            var endTimezoneRow = container.find(\".k-edit-label\").last().add(container.find(\".k-edit-field\").last());\n            var saveButton = container.find(\".k-scheduler-savetimezone\");\n            var cancelButton = container.find(\".k-scheduler-canceltimezone\");\n            var timezonePopup = that._timezonePopup;\n\n            var startTimezoneChange = function (e) {\n              if (e.field === \"startTimezone\") {\n                var value = model.startTimezone;\n                checkbox.prop(DISABLED, !value);\n\n                if (!value) {\n                  endTimezoneRow.hide();\n                  model.set(\"endTimezone\", \"\");\n                  checkbox.prop(\"checked\", false);\n                }\n              }\n            };\n\n            var wnd;\n            that._startTimezone = model.startTimezone;\n            that._endTimezone = model.endTimezone;\n\n            if (!timezonePopup) {\n              that._timezonePopup = timezonePopup = container.kendoWindow({\n                modal: true,\n                resizable: false,\n                draggable: true,\n                title: that.options.messages.editor.timezoneEditorTitle,\n                visible: false,\n                close: function (e) {\n                  model.unbind(CHANGE, startTimezoneChange);\n\n                  if (e.userTriggered) {\n                    that._revertTimezones(model);\n                  }\n\n                  if (activator) {\n                    activator.focus();\n                  }\n                }\n              });\n              checkbox.on(CLICK, function () {\n                endTimezoneRow.toggle(checkbox.prop(\"checked\"));\n                model.set(\"endTimezone\", \"\");\n              });\n              saveButton.on(CLICK, function (e) {\n                e.preventDefault();\n                wnd.close();\n              });\n              cancelButton.on(CLICK, function (e) {\n                e.preventDefault();\n\n                that._revertTimezones(model);\n\n                wnd.close();\n              });\n              model.bind(CHANGE, startTimezoneChange);\n            }\n\n            checkbox.prop(\"checked\", model.endTimezone).prop(DISABLED, !model.startTimezone);\n\n            if (model.endTimezone) {\n              endTimezoneRow.show();\n            } else {\n              endTimezoneRow.hide();\n            }\n\n            wnd = timezonePopup.data(\"kendoWindow\");\n            wnd.center().open();\n          }\n        });\n        var Scheduler = DataBoundWidget.extend({\n          init: function (element, options) {\n            var that = this;\n            Widget.fn.init.call(that, element, options);\n\n            if (!that.options.views || !that.options.views.length) {\n              that.options.views = [\"day\", \"week\"];\n            }\n\n            that.resources = [];\n\n            that._initModel();\n\n            that._wrapper();\n\n            that._views();\n\n            that._toolbar();\n\n            that._dataSource();\n\n            that._resources();\n\n            that._resizeHandler = function () {\n              that.resize();\n            };\n\n            that.wrapper.on(MOUSEDOWN + NS + \" selectstart\" + NS, function (e) {\n              if (!$(e.target).is(\":kendoFocusable\")) {\n                e.preventDefault();\n              }\n            });\n\n            if (that.options.editable && that.options.editable.resize !== false) {\n              that._resizable();\n            }\n\n            that._movable();\n\n            that._bindResize();\n\n            if (that.options.messages && that.options.messages.recurrence) {\n              recurrence.options = that.options.messages.recurrence;\n            }\n\n            that._tabindex();\n\n            that._navigation();\n\n            that._selectable();\n\n            that._touchHandlers();\n\n            that._ariaId = kendo.guid();\n\n            that._createEditor();\n          },\n          _bindResize: function () {\n            $(window).on(\"resize\" + NS, this._resizeHandler);\n          },\n          _unbindResize: function () {\n            $(window).off(\"resize\" + NS, this._resizeHandler);\n          },\n          dataItems: function () {\n            var that = this;\n            var items = that.items();\n            var events = that._data;\n            var eventsUids = $.map(items, function (item) {\n              return $(item).attr(\"data-uid\");\n            });\n            var i;\n            var key;\n            var dict = {};\n            var eventsUidsLength = eventsUids.length;\n\n            for (i = 0; i < eventsUidsLength; i++) {\n              dict[eventsUids[i]] = null;\n            }\n\n            var eventsCount = events.length;\n\n            for (i = 0; i < eventsCount; i++) {\n              var event = events[i];\n\n              if (dict[event.uid] !== undefined) {\n                dict[event.uid] = event;\n              }\n            }\n\n            var sortedData = [];\n\n            for (key in dict) {\n              sortedData.push(dict[key]);\n            }\n\n            return sortedData;\n          },\n          _isMobile: function () {\n            var options = this.options;\n            return options.mobile === true && kendo.support.mobileOS || options.mobile === \"phone\" || options.mobile === \"tablet\";\n          },\n          _isTouch: function (event) {\n            return /touch/.test(event.type) || event.originalEvent && /touch/.test(event.originalEvent.pointerType);\n          },\n          _isInverseColor: function (eventElement) {\n            return eventElement.hasClass(INVERSECOLORCLASS);\n          },\n          _groupsByResource: function (resources, groupIndex, groupsArray, parentFieldValue, parentField) {\n            if (!groupsArray) {\n              groupsArray = [];\n            }\n\n            var resource = resources[0];\n\n            if (resource) {\n              var group;\n              var data = resource.dataSource.view();\n              var prevIndex = 0;\n\n              for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {\n                var fieldValue = kendo.getter(resource.dataValueField)(data[dataIndex]);\n                var currentGroupIndex = groupIndex + prevIndex + dataIndex;\n                group = this._groupsByResource(resources.slice(1), currentGroupIndex, groupsArray, fieldValue, resource.field);\n                group[resource.field] = fieldValue;\n                prevIndex = group.groupIndex;\n\n                if (parentField && parentFieldValue) {\n                  group[parentField] = parentFieldValue;\n                }\n\n                if (resources.length === 1) {\n                  group.groupIndex = groupIndex + dataIndex;\n                  groupsArray.push(group);\n                }\n              }\n\n              return group;\n            } else {\n              return {};\n            }\n          },\n          data: function () {\n            return this._data;\n          },\n          select: function (options) {\n            var that = this;\n            var view = that.view();\n            var selection = that._selection;\n            var groups = view.groups;\n            var selectedGroups;\n\n            if (options === undefined) {\n              var selectedEvents;\n              var slots = view._selectedSlots;\n\n              if (!selection) {\n                return [];\n              }\n\n              if (selection && selection.events) {\n                selectedEvents = that._selectedEvents();\n              }\n\n              return {\n                start: selection.start,\n                end: selection.end,\n                events: selectedEvents,\n                slots: slots,\n                resources: view._resourceBySlot(selection)\n              };\n            }\n\n            if (!options) {\n              that._selection = null;\n              that._old = null;\n              view.clearSelection();\n              return;\n            }\n\n            if (Array.isArray(options)) {\n              options = {\n                events: options.splice(0)\n              };\n            }\n\n            if (options.resources) {\n              var fieldName;\n              var filters = [];\n              var groupsByResource = [];\n\n              if (view.groupedResources) {\n                that._groupsByResource(view.groupedResources, 0, groupsByResource);\n              }\n\n              for (fieldName in options.resources) {\n                filters.push({\n                  field: fieldName,\n                  operator: \"eq\",\n                  value: options.resources[fieldName]\n                });\n              }\n\n              selectedGroups = new kendo.data.Query(groupsByResource).filter(filters).toArray();\n            }\n\n            if (options.events && options.events.length) {\n              that._selectEvents(options.events, selectedGroups);\n\n              that._select();\n\n              return;\n            }\n\n            if (groups && options.start && options.end) {\n              var rangeStart = getDate(view._startDate);\n              var rangeEnd = kendo.date.addDays(getDate(view._endDate), 1);\n              var group;\n              var ranges;\n\n              if (options.start < rangeEnd && rangeStart <= options.end) {\n                if (selectedGroups && selectedGroups.length) {\n                  group = groups[selectedGroups[0].groupIndex];\n                } else {\n                  group = groups[0];\n                }\n\n                if (!group.timeSlotCollectionCount()) {\n                  options.isAllDay = true;\n                }\n\n                ranges = group.ranges(options.start, options.end, options.isAllDay, false);\n\n                if (ranges.length) {\n                  that._selection = {\n                    start: kendo.timezone.toLocalDate(ranges[0].start.start),\n                    end: kendo.timezone.toLocalDate(ranges[ranges.length - 1].end.end),\n                    groupIndex: ranges[0].start.groupIndex,\n                    index: ranges[0].start.index,\n                    isAllDay: ranges[0].start.isDaySlot,\n                    events: []\n                  };\n\n                  that._select();\n                }\n              }\n            }\n          },\n          _selectEvents: function (eventsUids, selectedGroups) {\n            var that = this;\n            var idx;\n            var view = that.view();\n            var groups = view.groups;\n            var eventsLength = eventsUids.length;\n            var isGrouped = selectedGroups && selectedGroups.length;\n            var ctrlKey = that._ctrlKey;\n            that._ctrlKey = true;\n\n            for (idx = 0; idx < eventsLength; idx++) {\n              if (groups && isGrouped) {\n                var currentGroup = groups[selectedGroups[0].groupIndex];\n                var events = [];\n                var timeSlotCollectionCount = currentGroup.timeSlotCollectionCount();\n                var daySlotCollectionCount = currentGroup.daySlotCollectionCount();\n\n                for (var collIdx = 0; collIdx < timeSlotCollectionCount; collIdx++) {\n                  events = events.concat(currentGroup.getTimeSlotCollection(collIdx).events());\n                }\n\n                for (var dayCollIdx = 0; dayCollIdx < daySlotCollectionCount; dayCollIdx++) {\n                  events = events.concat(currentGroup.getDaySlotCollection(dayCollIdx).events());\n                }\n\n                events = new kendo.data.Query(events).filter({\n                  field: \"element[0].getAttribute('data-uid')\",\n                  operator: \"eq\",\n                  value: eventsUids[idx]\n                }).toArray();\n\n                if (events[0]) {\n                  that._createSelection(events[0].element);\n                }\n              } else {\n                var element = view.element.find(kendo.format(\".k-event[data-uid={0}], .k-task[data-uid={0}]\", eventsUids[idx]));\n\n                if (element.length) {\n                  that._createSelection(element[0]);\n                }\n              }\n            }\n\n            that._ctrlKey = ctrlKey;\n          },\n          _touchHandlers: function () {\n            var that = this;\n            var startX;\n            var startY;\n            var endX;\n            var endY;\n            var timeStamp;\n            var wrapper = that.wrapper;\n\n            var touchMoveHandler = that._touchMove.bind(that);\n\n            wrapper.on(TOUCHSTART + NS, \".k-scheduler-header-all-day td, .k-scheduler-content td, .k-event\", function (e) {\n              var content = that.wrapper.find(\".k-scheduler-content\");\n\n              if (!that._isTouch(e)) {\n                return;\n              }\n\n              content.stop(true, false);\n              that._touchPosX = startX = that._tapPosition(e, 'X');\n              that._touchPosY = startY = that._tapPosition(e, 'Y');\n              that._userTouched = true;\n              that.view()._scrolling = false;\n              timeStamp = Date.now();\n              wrapper.on(TOUCHMOVE + NS, \".k-scheduler-header-all-day td, .k-scheduler-content td, .k-event\", touchMoveHandler);\n            });\n            wrapper.on(TOUCHEND + NS, \".k-scheduler-header-all-day td, .k-scheduler-content td, .k-event\", function (e) {\n              if (!that._isTouch(e)) {\n                return;\n              }\n\n              var delta = Date.now() - timeStamp;\n              var content = that.wrapper.find(\".k-scheduler-content\");\n              var amplitude = -that._amplitude * (3000 / delta);\n              endX = that._tapPosition(e, 'X');\n              endY = that._tapPosition(e, 'Y');\n\n              if (that._dragging) {\n                return;\n              }\n\n              if (that.options.selectable && (Math.abs(endX - startX) <= 10 || Math.abs(endY - startY) <= 10)) {\n                that._mouseDownSelection(e);\n              }\n\n              if (!kendo.support.kineticScrollNeeded && delta < 200 && Math.abs(endX - startX) > 10) {\n                content.animate({\n                  scrollTop: content[0].scrollTop + amplitude\n                });\n              }\n\n              wrapper.off(TOUCHMOVE + NS, \".k-scheduler-header-all-day td, .k-scheduler-content td\", touchMoveHandler);\n            });\n          },\n          _navigation: function () {\n            var that = this,\n                wrapper = that.wrapper;\n            wrapper.on(\"focus\" + NS, function () {\n              var selection = that._selection;\n\n              if ((!selection || selection.events.length > 0 && wrapper.find(\"[data-uid='\" + selection.events[0] + \"']\").length === 0) && !that._userTouched && !that._mouseDown) {\n                that._initialFocus();\n              } else {\n                that._mouseDown = false;\n              }\n\n              that._select();\n            });\n            wrapper.on(\"focusout\" + NS, function (e) {\n              that._ctrlKey = that._shiftKey = false;\n\n              if (!$(e.relatedTarget).closest(VIEWSSELECTOR).length) {\n                that.toolbar.find(VIEWSSELECTOR).removeClass(EXPANDEDSTATE);\n              }\n            });\n            wrapper.on(\"keydown\" + NS, that._keydown.bind(that));\n            wrapper.on(\"keyup\" + NS, function (e) {\n              that._ctrlKey = e.ctrlKey;\n              that._shiftKey = e.shiftKey;\n            });\n          },\n          _selectable: function () {\n            var that = this;\n            var wrapper = that.wrapper;\n\n            if (!that.options.selectable) {\n              return;\n            }\n\n            wrapper.on(MOUSEDOWN + NS, \".k-scheduler-header-all-day td, .k-scheduler-content td, .k-event, .k-scheduler-body td .k-link\", function (e) {\n              if (that._isTouch(e)) {\n                return;\n              }\n\n              that._mouseDownSelection(e);\n            });\n\n            var mouseMoveHandler = that._mouseMove.bind(that);\n\n            wrapper.on(MOUSEDOWN + NS, \".k-scheduler-header-all-day td, .k-scheduler-content td\", function (e) {\n              var which = e.which;\n              var button = e.button;\n              var isRight = which && which === 3 || button && button == 2;\n\n              if (that._isTouch(e)) {\n                return;\n              }\n\n              if (!isRight) {\n                wrapper.on(MOUSEMOVE + NS, \".k-scheduler-header-all-day td, .k-scheduler-content td\", mouseMoveHandler);\n              }\n            });\n            wrapper.on(\"mouseup\" + NS + \" mousecancel\" + NS, function () {\n              wrapper.off(MOUSEMOVE + NS, \".k-scheduler-header-all-day td, .k-scheduler-content td\", mouseMoveHandler);\n            });\n          },\n          _mouseDownSelection: function (e) {\n            var which = e.which;\n            var button = e.button;\n            var isRight = which && which === 3 || button && button == 2;\n\n            if (!isRight) {\n              if (e.ctrlKey) {\n                this._ctrlKey = e.ctrlKey;\n              }\n\n              if (e.shiftKey) {\n                this._shiftKey = e.shiftKey;\n              }\n\n              this._mouseDown = true;\n\n              this._createSelection(e.currentTarget);\n\n              if ($(e.currentTarget).hasClass(\"k-event\")) {\n                this._selection.eventElement = e.currentTarget;\n              }\n            }\n\n            if (kendo._activeElement() !== this.wrapper.get(0)) {\n              kendo.focusElement(this.wrapper);\n            } else {\n              this._select();\n            }\n\n            if (this.toolbar) {\n              this.toolbar.find(\".\" + FOCUSEDSTATE).removeClass(FOCUSEDSTATE);\n            }\n          },\n          _selectFirstSlot: function () {\n            var firstAllDay = this.wrapper.find(\".k-scheduler-header-all-day\").find(\"td\").first(),\n                firstContent = this.wrapper.find(\".k-scheduler-content\").find(\"td\").first(),\n                firstSlot;\n\n            if (firstAllDay.length > 0) {\n              firstSlot = firstAllDay;\n            } else if (firstContent.length > 0) {\n              firstSlot = firstContent;\n            } else {\n              firstSlot = this.wrapper.find(\".k-scheduler-body\").find(\".k-link\").first();\n            }\n\n            this._createSelection(firstSlot);\n          },\n          _firstEvent: function () {\n            var firstEventInAllDay = this.wrapper.find(\".k-scheduler-header-wrap .k-event, .k-task\").first(),\n                firstEventInContent = this.wrapper.find(\".k-scheduler-content .k-event\").first(),\n                firstEvent,\n                allDayEvent,\n                contentEvent;\n\n            if (firstEventInAllDay.length > 0) {\n              if (firstEventInContent.length > 0) {\n                allDayEvent = this.occurrenceByUid(firstEventInAllDay.data(\"uid\"));\n                contentEvent = this.occurrenceByUid(firstEventInContent.data(\"uid\"));\n                firstEvent = allDayEvent.start <= contentEvent.start ? firstEventInAllDay : firstEventInContent;\n              } else {\n                firstEvent = firstEventInAllDay;\n              }\n            } else if (firstEventInContent) {\n              firstEvent = firstEventInContent;\n            }\n\n            return firstEvent;\n          },\n          _initialFocus: function () {\n            var firstEvent = this._firstEvent(),\n                firstDateInYear;\n\n            if (this.options.selectable) {\n              if (firstEvent && firstEvent.length > 0) {\n                this._createSelection(firstEvent);\n\n                this._selection.eventElement = firstEvent[0];\n              } else {\n                firstDateInYear = this.wrapper.find(\".k-scheduler-body\").find(\".k-link:first\");\n\n                if (firstDateInYear.length > 0) {\n                  this._createSelection(firstDateInYear);\n\n                  firstDateInYear.focus();\n                } else {\n                  this._selectFirstSlot();\n                }\n              }\n            } else if (this.toolbar && this.toolbar.find(\".\" + FOCUSEDSTATE).length === 0) {\n              this._focusToolbar();\n            } else if (this.toolbar) {\n              this.toolbar.find(\".\" + FOCUSEDSTATE).removeClass(FOCUSEDSTATE);\n            }\n          },\n          _select: function () {\n            var that = this;\n            var view = that.view();\n            var wrapper = that.wrapper;\n            var current = view.current();\n            var selection = that._selection;\n            var oldSelection = that._old ? that._old.selection : null;\n            var oldEventsLength = that._old ? that._old.eventsLength : null;\n\n            if (!selection) {\n              return;\n            }\n\n            if (current) {\n              current.removeAttribute(\"id\");\n              wrapper.removeAttr(\"aria-activedescendant\");\n            }\n\n            view.select(selection);\n            that._selection.eventElement = null;\n            current = view.current();\n\n            if (current) {\n              current.setAttribute(\"id\", that._ariaId);\n              wrapper.attr(\"aria-activedescendant\", that._ariaId);\n\n              if (oldSelection !== current || selection.events && oldEventsLength !== selection.events.length) {\n                var currentUid = $(current).data(\"uid\");\n\n                if (that._old && currentUid && currentUid === $(that._old.selection).data(\"uid\") && selection.events && that._old.eventsLength === selection.events.length) {\n                  return;\n                }\n\n                var events = that._selectedEvents();\n\n                var slots = view._selectedSlots;\n                that._old = {\n                  selection: current,\n                  eventsLength: events.length\n                };\n                that.trigger(CHANGE, {\n                  start: selection.start,\n                  end: selection.end,\n                  events: events,\n                  slots: slots,\n                  resources: view._resourceBySlot(selection)\n                });\n              }\n            }\n          },\n          _selectedEvents: function () {\n            var uids = this._selection.events;\n            var length = uids.length;\n            var idx = 0;\n            var event;\n            var events = [];\n\n            for (; idx < length; idx++) {\n              event = this.occurrenceByUid(uids[idx]);\n\n              if (event) {\n                events.push(event);\n              }\n            }\n\n            return events;\n          },\n          _tapPosition: function (event, coordinate) {\n            return /touch/.test(event.type) ? (event.originalEvent || event).changedTouches[0]['page' + coordinate] : event['page' + coordinate];\n          },\n          _touchMove: function (e) {\n            var that = this;\n            var content = that.wrapper.find(\".k-scheduler-content\");\n            var verticalScroll = content[0].scrollHeight > content[0].clientHeight;\n            var horizontalScroll = content[0].scrollWidth > content[0].clientWidth;\n\n            var endY = that._tapPosition(e, 'Y');\n\n            var endX = that._tapPosition(e, 'X');\n\n            var scrollTop = content[0].scrollTop - Math.round(endY - that._touchPosY);\n            var scrollLeft = content[0].scrollLeft - Math.round(endX - that._touchPosX);\n            var applyVerticalScroll = verticalScroll && Math.abs(endY - that._touchPosY) > 10;\n            var applyhorizontalScroll = horizontalScroll && Math.abs(endY - that._touchPosY) > 10;\n\n            if (that._dragging || kendo.support.kineticScrollNeeded || !that._isTouch(e)) {\n              return;\n            }\n\n            if (applyVerticalScroll || applyhorizontalScroll) {\n              that._amplitude = Math.round(endY - that._touchPosY);\n              that._touchPosY = endY;\n              that._touchPosX = endX;\n              content.animate({\n                scrollTop: scrollTop,\n                scrollLeft: scrollLeft\n              }, 0);\n              that.view()._scrolling = true;\n            }\n          },\n          _mouseMove: function (e) {\n            var that = this;\n            clearTimeout(that._moveTimer);\n\n            if (that._isTouch(e)) {\n              return;\n            }\n\n            that._moveTimer = setTimeout(function () {\n              var view = that.view();\n              var selection = that._selection;\n\n              if (selection) {\n                var slot = view.selectionByElement($(e.currentTarget));\n\n                if (slot && selection.groupIndex === slot.groupIndex) {\n                  var startDate = slot.startDate();\n                  var endDate = slot.endDate();\n\n                  if (startDate >= selection.end) {\n                    selection.backward = false;\n                  } else if (endDate <= selection.start) {\n                    selection.backward = true;\n                  }\n\n                  if (selection.backward) {\n                    selection.start = startDate;\n                  } else {\n                    selection.end = endDate;\n                  }\n\n                  that._select();\n                }\n              }\n            }, 5);\n          },\n          _viewByIndex: function (index) {\n            var view,\n                views = this.views;\n\n            for (view in views) {\n              if (!index) {\n                return view;\n              }\n\n              index--;\n            }\n          },\n          _keydownToolbar: function (e) {\n            var key = e.keyCode,\n                focusableToolBarSelector = \"> .k-button,\" + \".k-scheduler-navigation > .k-button,\" + \".k-nav-current,\" + \".k-views-dropdown:visible,\" + \".k-scheduler-views:visible > .k-button,\" + \".k-scheduler-search-input,\" + \".k-scheduler-mobile-views,\" + \".k-button-group > .k-button\",\n                focusableItems = this.toolbar.find(focusableToolBarSelector),\n                shouldNavigate = $(e.target).closest(VIEWSSELECTOR).length || this.toolbar.find('.k-scheduler-views .k-focus').length,\n                isRtl = kendo.support.isRtl(this.element),\n                focusedItem = this.toolbar.find(\".\" + FOCUSEDSTATE + \", :focus\"),\n                idx = focusableItems.index(focusedItem),\n                itemToFocus;\n\n            if (key === keys.TAB && (!e.shiftKey || this.options.selectable)) {\n              this.toolbar.find(\".\" + FOCUSEDSTATE).removeClass(FOCUSEDSTATE);\n            } else if (e.altKey && key === keys.DOWN && this.toolbar.find(\".k-nav-current\").hasClass(FOCUSEDSTATE)) {\n              this._showCalendar();\n\n              e.preventDefault();\n              return;\n            } else if (key === keys.RIGHT || key === keys.LEFT) {\n              if (key === keys.RIGHT && !isRtl || key === keys.LEFT && isRtl) {\n                idx = idx + 1;\n\n                if (idx === focusableItems.length) {\n                  this.toolbar.find(\".\" + FOCUSEDSTATE).removeClass(FOCUSEDSTATE);\n                  this.element.focus();\n                  return;\n                }\n              } else if (key === keys.LEFT && !isRtl || key === keys.RIGHT && isRtl) {\n                idx = idx - 1;\n\n                if (idx < 0) {\n                  return;\n                }\n              }\n\n              itemToFocus = focusableItems[idx];\n              this.toolbar.find(\".\" + FOCUSEDSTATE).removeClass(FOCUSEDSTATE);\n              $(itemToFocus).addClass(FOCUSEDSTATE).attr(\"tabindex\", 0).focus().attr(\"tabindex\", -1);\n              this._focusedView = null;\n              e.preventDefault();\n              return;\n            } else if (key === keys.ENTER || key === keys.SPACEBAR) {\n              if (shouldNavigate && this._focusedView && !this._focusedView.hasClass(\"k-selected\")) {\n                var focusedViewName = this._focusedView.data().name;\n\n                if (!this.trigger(\"navigate\", {\n                  view: focusedViewName,\n                  action: \"changeView\",\n                  date: this.date()\n                })) {\n                  this.view(focusedViewName);\n                }\n\n                e.preventDefault();\n                return;\n              }\n\n              this.toolbar.find(\".\" + FOCUSEDSTATE + ':visible').click();\n              e.preventDefault();\n              return;\n            } else if (key === keys.DOWN && !this.wrapper.find(\".k-views-dropdown\").hasClass(\"k-focus\")) {\n              this.toolbar.find(\".\" + FOCUSEDSTATE).removeClass(FOCUSEDSTATE);\n\n              if (this._selectedViewName === \"year\") {\n                this._keydownYearView(e);\n              } else if (document.activeElement !== this.element[0]) {\n                this.element.focus();\n              }\n\n              e.preventDefault();\n              return;\n            }\n          },\n          _keydownView: function (e) {\n            var key = e.keyCode,\n                isModifier = key === 16 || key === 18 || key === 17 || key === 91 || key === 92,\n                selection = this._selection,\n                view = this.view(),\n                editable = view.options.editable,\n                arrowKeys = [keys.LEFT, keys.RIGHT, keys.UP, keys.DOWN],\n                isRtl = kendo.support.isRtl(this.element),\n                previous,\n                content,\n                cell;\n\n            if (isModifier) {\n              return;\n            } // slots selection via keyboard is no longer available\n            // see here: https://github.com/telerik/kendo-themes/blob/develop/docs/accessibility/Scheduler.md\n\n\n            if (!selection) {\n              return;\n            }\n\n            if (key === keys.ENTER) {\n              if (selection.events.length && editable) {\n                if (editable.update !== false) {\n                  this.editEvent(selection.events[0]);\n                }\n              }\n            } else if ((key === keys.DELETE || key === keys.BACKSPACE) && editable !== false && editable.destroy !== false) {\n              this.removeEvent(selection.events[0]);\n            } else if (arrowKeys.indexOf(key) > -1) {\n              previous = key === keys.UP || key === keys.LEFT && !isRtl || key === keys.RIGHT && isRtl;\n\n              if (view.moveToEvent(selection, previous)) {\n                this._select(); // Focus the Scheduler element only if it not the currently focused element\n\n\n                if (document.activeElement !== this.element[0]) {\n                  this.element.focus();\n                }\n\n                e.preventDefault();\n              }\n            } else if (key === keys.HOME || key === keys.END) {\n              e.preventDefault();\n              content = this.view().content.eq(0);\n\n              if (key === keys.HOME) {\n                cell = content.find(\".k-scheduler-table td\").first();\n              } else {\n                cell = content.find(\".k-scheduler-table td\").last();\n              }\n\n              this.view()._scrollTo(cell[0], content[0]);\n            }\n          },\n          _keydownShortcut: function (key) {\n            var currentDate = new Date(),\n                timezone = this.options.timezone,\n                editable = this.view().options.editable;\n\n            if (key === 66 && !!this.view().toggleFullDay) {\n              this.view().toggleFullDay();\n            } else if (key === 67 && editable && editable.create !== false) {\n              this.addEvent(extend({}, {\n                start: this.date(),\n                end: this.date()\n              }));\n            } else if (key === 84) {\n              if (timezone) {\n                var timezoneOffset = kendo.timezone.offset(currentDate, timezone);\n                date = kendo.timezone.convert(currentDate, currentDate.getTimezoneOffset(), timezoneOffset);\n              } else {\n                date = currentDate;\n              }\n\n              if (!this.trigger(\"navigate\", {\n                view: this._selectedViewName,\n                action: \"today\",\n                date: date\n              })) {\n                this.date(date);\n              }\n            }\n          },\n          _keydownYearView: function (e) {\n            var view = this.view(),\n                selection = this._selection,\n                key = e.keyCode;\n\n            if (key === keys.TAB) {\n              return;\n            }\n\n            if (view.move(selection, key)) {\n              this.toolbar.find(\".\" + FOCUSEDSTATE).removeClass(FOCUSEDSTATE);\n\n              this._select();\n            }\n\n            if (selection) {\n              this._adjustSelectedDate();\n            }\n\n            e.preventDefault();\n          },\n          _keydownAgendaView: function (e) {\n            var key = e.keyCode,\n                view = this.view(),\n                selection = this._selection,\n                content,\n                cell;\n\n            if (view.move(selection, key)) {\n              e.preventDefault();\n              this.toolbar.find(\".\" + FOCUSEDSTATE).removeClass(FOCUSEDSTATE);\n\n              this._select();\n            } else if (key === keys.HOME || key === keys.END) {\n              e.preventDefault();\n              content = this.view().content.eq(0);\n\n              if (key === keys.HOME) {\n                cell = content.find(\".k-scheduler-table td\").first();\n              } else {\n                cell = content.find(\".k-scheduler-table td\").last();\n              }\n\n              this.view()._scrollTo(cell[0], content[0]);\n            }\n          },\n          _keydownChangeView: function (key) {\n            var viewIndex = key - 49,\n                viewByIndex;\n\n            if (viewIndex === -1) {\n              viewIndex = 9;\n            }\n\n            viewByIndex = this._viewByIndex(viewIndex);\n\n            if (viewByIndex && !this.trigger(\"navigate\", {\n              view: viewByIndex,\n              action: \"changeView\",\n              date: this.date()\n            })) {\n              this.view(viewByIndex);\n            }\n          },\n          _keydownChangeDate: function (key) {\n            var isRtl = kendo.support.isRtl(this.element),\n                direction = isRtl && key === keys.LEFT || !isRtl && key === keys.RIGHT ? \"next\" : \"previous\";\n\n            if (direction === \"next\") {\n              date = this.view().nextDate();\n            } else {\n              date = this.view().previousDate();\n            }\n\n            if (!this.trigger(\"navigate\", {\n              view: this._selectedViewName,\n              action: direction,\n              date: date\n            })) {\n              this.date(date);\n\n              this._initialFocus();\n\n              this._select();\n            }\n          },\n          _keydown: function (e) {\n            var key = e.keyCode,\n                shortcutKeys = [66, 67, 84],\n                toolbarIsFocused = $(e.target).closest(\".k-toolbar\").length > 0,\n                altKey = e.altKey;\n            this._ctrlKey = e.ctrlKey;\n            this._shiftKey = e.shiftKey;\n\n            if (key === keys.ESC && this.popup && this.popup.visible()) {\n              this.popup.close();\n              e.preventDefault();\n              return;\n            }\n\n            if ((key === keys.LEFT || key === keys.RIGHT) && this._shiftKey) {\n              this._keydownChangeDate(key);\n\n              return;\n            }\n\n            if (altKey && key >= 48 && key <= 57) {\n              this._keydownChangeView(key);\n\n              return;\n            }\n\n            if (shortcutKeys.indexOf(key) > -1) {\n              this._keydownShortcut(key);\n\n              return;\n            }\n\n            if (toolbarIsFocused) {\n              this._keydownToolbar(e);\n            } else {\n              if (key === keys.F10) {\n                this._focusToolbar();\n\n                e.preventDefault();\n                return;\n              }\n\n              if (this._selectedViewName === \"year\") {\n                this._keydownYearView(e);\n\n                return;\n              }\n\n              if (this._selectedViewName === \"agenda\") {\n                this._keydownAgendaView(e);\n\n                return;\n              }\n\n              this._keydownView(e);\n            }\n          },\n          _focusToolbar: function () {\n            this.toolbar.find(\".k-button\").first().trigger(\"focus\").addClass(FOCUSEDSTATE);\n          },\n          _createSelection: function (item) {\n            var selection = this._selection,\n                uid,\n                slot;\n            item = $(item);\n\n            if (item.is(\".k-event\")) {\n              uid = item.attr(kendo.attr(\"uid\"));\n\n              if (selection && selection.events.indexOf(uid) !== -1 && !this._ctrlKey) {\n                return;\n              }\n            }\n\n            if (!selection || !this._ctrlKey && !this._shiftKey) {\n              selection = this._selection = {\n                events: [],\n                groupIndex: 0\n              };\n            }\n\n            slot = this.view().selectionByElement(item);\n\n            if (slot) {\n              selection.groupIndex = slot.groupIndex || 0;\n            }\n\n            if (uid) {\n              slot = getOccurrenceByUid(this._data, uid);\n            }\n\n            if (slot && slot.uid) {\n              uid = [slot.uid];\n            }\n\n            this._updateSelection(slot, uid);\n\n            this._adjustSelectedDate();\n          },\n          _updateSelection: function (dataItem, events, groupIndex) {\n            var selection = this._selection;\n\n            if (dataItem && selection) {\n              var view = this.view();\n\n              if (dataItem.uid) {\n                dataItem = view._updateEventForSelection(dataItem);\n              }\n\n              if (this._shiftKey && selection.start && selection.end) {\n                var backward = dataItem.end < selection.end;\n                selection.end = dataItem.endDate ? dataItem.endDate() : dataItem.end;\n\n                if (backward && view._timeSlotInterval) {\n                  kendo.date.setTime(selection.end, -view._timeSlotInterval());\n                }\n              } else {\n                selection.start = dataItem.startDate ? dataItem.startDate() : dataItem.start;\n                selection.end = dataItem.endDate ? dataItem.endDate() : dataItem.end;\n              }\n\n              if (\"isDaySlot\" in dataItem) {\n                selection.isAllDay = dataItem.isDaySlot;\n              } else {\n                selection.isAllDay = dataItem.isAllDay;\n              }\n\n              if (groupIndex !== null && groupIndex !== undefined) {\n                selection.groupIndex = groupIndex;\n              }\n\n              selection.index = dataItem.index;\n\n              if (this._ctrlKey) {\n                var indexOfEvent = events && events.length ? selection.events.indexOf(events[0]) : -1;\n\n                if (indexOfEvent > -1) {\n                  selection.events.splice(indexOfEvent, 1);\n                } else {\n                  selection.events = selection.events.concat(events || []);\n                }\n              } else {\n                selection.events = events || [];\n              }\n            }\n          },\n          options: {\n            name: \"Scheduler\",\n            date: TODAY,\n            editable: true,\n            autoBind: true,\n            snap: true,\n            mobile: false,\n            timezone: \"\",\n            allDaySlot: true,\n            min: new Date(1900, 0, 1),\n            max: new Date(2099, 11, 31),\n            toolbar: null,\n            workWeekStart: 1,\n            workWeekEnd: 5,\n            workDays: null,\n            showWorkHours: false,\n            startTime: TODAY,\n            endTime: TODAY,\n            currentTimeMarker: {\n              updateInterval: 10000,\n              useLocalTimezone: true\n            },\n            footer: {},\n            messages: {\n              today: \"Today\",\n              pdf: \"Export to PDF\",\n              save: \"Save\",\n              cancel: \"Cancel\",\n              destroy: \"Delete\",\n              resetSeries: \"Reset Series\",\n              deleteWindowTitle: \"Delete event\",\n              next: \"Next\",\n              previous: \"Previous\",\n              refresh: \"Refresh\",\n              selectView: \"Select view\",\n              ariaSlotLabel: \"Selected from {0:t} to {1:t}\",\n              ariaEventLabel: {\n                on: \"on\",\n                at: \"at\",\n                to: \"to\",\n                allDay: \"(all day)\",\n                prefix: \"\"\n              },\n              search: \"Search...\",\n              views: {\n                day: \"Day\",\n                week: \"Week\",\n                workWeek: \"Work Week\",\n                agenda: \"Agenda\",\n                month: \"Month\",\n                timeline: \"Timeline\",\n                timelineWeek: \"Timeline Week\",\n                timelineWorkWeek: \"Timeline Work Week\",\n                timelineMonth: \"Timeline Month\",\n                year: \"Year\"\n              },\n              recurrenceMessages: {\n                deleteWindowTitle: \"Delete Recurring Item\",\n                resetSeriesWindowTitle: \"Reset Series\",\n                deleteWindowOccurrence: \"Delete current occurrence\",\n                deleteWindowSeries: \"Delete the series\",\n                editWindowTitle: \"Edit Recurring Item\",\n                editWindowOccurrence: \"Edit current occurrence\",\n                editWindowSeries: \"Edit the series\"\n              },\n              editable: {\n                confirmation: DELETECONFIRM\n              },\n              editor: {\n                title: \"Title\",\n                start: \"Start\",\n                end: \"End\",\n                allDayEvent: \"All day event\",\n                description: \"Description\",\n                repeat: \"Repeat\",\n                timezone: \"Timezone\",\n                startTimezone: \"Start timezone\",\n                endTimezone: \"End timezone\",\n                separateTimezones: \"Use separate start and end time zones\",\n                timezoneEditorTitle: \"Timezones\",\n                timezoneEditorButton: \"Time zone\",\n                timezoneTitle: \"Time zones\",\n                noTimezone: \"No timezone\",\n                editorTitle: \"Event\"\n              }\n            },\n            height: null,\n            width: null,\n            resources: [],\n            group: {\n              resources: [],\n              orientation: \"horizontal\"\n            },\n            views: [],\n            selectable: false\n          },\n          events: [REMOVE, EDIT, CANCEL, SAVE, \"add\", \"dataBinding\", \"dataBound\", \"moveStart\", \"move\", \"moveEnd\", \"resizeStart\", \"resize\", \"resizeEnd\", \"navigate\", CHANGE],\n          destroy: function () {\n            var that = this,\n                element;\n            Widget.fn.destroy.call(that);\n\n            if (that.dataSource) {\n              that.dataSource.unbind(CHANGE, that._refreshHandler);\n              that.dataSource.unbind(PROGRESS, that._progressHandler);\n              that.dataSource.unbind(ERROR, that._errorHandler);\n            }\n\n            if (that._resourceRefreshHandler) {\n              for (var idx = 0; idx < that.resources.length; idx++) {\n                var resourceDS = that.resources[idx].dataSource;\n                resourceDS.unbind(CHANGE, that._resourceRefreshHandler);\n                resourceDS.unbind(PROGRESS, that._resourceProgressHandler);\n                resourceDS.unbind(ERROR, that._resourceErrorHandler);\n              }\n            }\n\n            if (that.calendar) {\n              that.calendar.destroy();\n              that.popup.destroy();\n            }\n\n            if (that.view()) {\n              that.view().destroy();\n            }\n\n            if (that._editor) {\n              that._editor.destroy();\n            }\n\n            if (this._moveDraggable) {\n              this._moveDraggable.destroy();\n            }\n\n            if (this._resizeDraggable) {\n              this._resizeDraggable.destroy();\n            }\n\n            element = that.element.add(that.wrapper).add(that.toolbar).add(that.popup);\n            element.off(NS);\n            clearTimeout(that._moveTimer);\n            that._model = null;\n            that.toolbar = null;\n            that.element = null;\n            $(window).off(\"resize\" + NS, that._resizeHandler);\n            kendo.destroy(that.wrapper);\n          },\n          setDataSource: function (dataSource) {\n            this.options.dataSource = dataSource;\n\n            this._dataSource();\n\n            if (this.options.autoBind && dataSource.fetch) {\n              dataSource.fetch();\n            } else if (isArray(dataSource)) {\n              this.view(this._selectedView);\n            }\n          },\n          items: function () {\n            var content = this.wrapper.find(\".k-scheduler-content\");\n            var view = this.view();\n\n            if (view && view.options.name === \"agenda\") {\n              return content.find(\".k-task\");\n            } else {\n              return content.find(\".k-event\").add(this.wrapper.find(\".k-scheduler-header-wrap\").find(\".k-scheduler-header-all-day\").siblings());\n            }\n          },\n          _movable: function () {\n            var startSlot;\n            var endSlot;\n            var startResources;\n            var startTime;\n            var endTime;\n            var event;\n            var clonedEvent;\n            var that = this;\n            var originSlot;\n            var originStartTime;\n            var originalEvent;\n            var distance = 0;\n            var clonedEvents = [];\n            var cachedEvents = [];\n\n            var isMobile = that._isMobile();\n\n            var movable = that.options.editable && that.options.editable.move !== false;\n            var resizable = that.options.editable && that.options.editable.resize !== false;\n\n            if (movable || resizable && isMobile) {\n              that._dragging = false;\n\n              if (isMobile && kendo.support.mobileOS.android) {\n                distance = 5;\n              }\n\n              that._moveDraggable = new kendo.ui.Draggable(that.element, {\n                distance: distance,\n                filter: \".k-event\",\n                ignore: \".k-resize-handle\",\n                holdToDrag: isMobile,\n                autoScroll: true\n              });\n\n              if (movable) {\n                that._moveDraggable.bind(\"dragstart\", function (e) {\n                  var view = that.view();\n                  var eventElement = e.currentTarget;\n\n                  var isTouch = that._isTouch(e);\n\n                  that._dragging = true;\n\n                  if (!view.options.editable || view.options.editable.move === false) {\n                    that._dragging = false;\n                    e.preventDefault();\n                    return;\n                  }\n\n                  if (isTouch && !eventElement.hasClass(\"k-event-active\")) {\n                    that._dragging = false;\n                    that.element.find(\".k-event-active\").removeClass(\"k-event-active\");\n                    e.preventDefault();\n                    return;\n                  }\n\n                  event = that.occurrenceByUid(eventElement.attr(kendo.attr(\"uid\")));\n                  clonedEvent = event.clone();\n                  originalEvent = event.clone();\n                  clonedEvent.update(view._eventOptionsForMove(clonedEvent));\n                  clonedEvent.inverseColor = that._isInverseColor(eventElement);\n                  clonedEvents = [];\n\n                  if (that._selection) {\n                    var events = that._selection.events;\n\n                    for (var i = 0; i < events.length; i++) {\n                      var evtClone = that.occurrenceByUid(events[i]).clone();\n                      var evtCloneElement = this.element.find('div.k-event[data-uid=\"' + evtClone.uid + '\"]').eq(0);\n                      evtClone.update(view._eventOptionsForMove(evtClone));\n\n                      if (evtCloneElement.length) {\n                        evtClone.inverseColor = that._isInverseColor(evtCloneElement);\n                      }\n\n                      clonedEvents.push(evtClone);\n                    }\n                  } else {\n                    clonedEvents.push(clonedEvent);\n                  }\n\n                  startSlot = view._slotByPosition(e.x.startLocation, e.y.startLocation);\n                  startResources = view._resourceBySlot(startSlot);\n                  originStartTime = startTime = startSlot.startOffset(e.x.startLocation, e.y.startLocation, that.options.snap);\n                  endSlot = startSlot;\n                  originSlot = startSlot;\n\n                  if (!startSlot || that.trigger(\"moveStart\", {\n                    event: event\n                  })) {\n                    e.preventDefault();\n                  }\n                }).bind(\"drag\", function (e) {\n                  var view = that.view();\n\n                  var slot = view._slotByPosition(e.x.location, e.y.location);\n\n                  var distance;\n                  var range;\n                  var i;\n\n                  if (!slot) {\n                    return;\n                  }\n\n                  endTime = slot.startOffset(e.x.location, e.y.location, that.options.snap);\n\n                  if (slot.isDaySlot !== startSlot.isDaySlot) {\n                    if (slot.isDaySlot !== originSlot.isDaySlot) {\n                      var slotIndex = $(startSlot.element).index();\n                      var targetSlotElement = $(slot.element).parent().children().eq(slotIndex);\n                      startSlot = view._slotByPosition(targetSlotElement.offset().left, targetSlotElement.offset().top);\n                      startTime = startSlot.startOffset(e.x.location, e.y.location, true);\n                      cachedEvents = clonedEvents.map(function (event) {\n                        return event.clone();\n                      });\n\n                      for (i = 0; i < clonedEvents.length; i++) {\n                        if (clonedEvents[i].isAllDay != slot.isDaySlot) {\n                          clonedEvents[i].isAllDay = slot.isDaySlot;\n                          clonedEvents[i].end = kendo.date.getDate(clonedEvents[i].start);\n                          clonedEvents[i].start = kendo.date.getDate(clonedEvents[i].start);\n\n                          if (!slot.isDaySlot) {\n                            kendo.date.setTime(clonedEvents[i].start, kendo.date.getMilliseconds(view.startTime()));\n                            kendo.date.setTime(clonedEvents[i].end, kendo.date.getMilliseconds(view.startTime()) + view._timeSlotInterval());\n                          }\n                        }\n                      }\n                    } else {\n                      startSlot = $.extend(true, {}, originSlot);\n                      startTime = originStartTime;\n                      clonedEvents = cachedEvents;\n                    }\n                  }\n\n                  distance = endTime - startTime;\n\n                  for (i = 0; i < clonedEvents.length; i++) {\n                    view._updateMoveHint(clonedEvents[i], slot.groupIndex, distance);\n                  }\n\n                  range = moveEventRange(clonedEvent, distance);\n\n                  if (!that.trigger(\"move\", {\n                    event: event,\n                    slot: {\n                      element: slot.element,\n                      start: slot.startDate(),\n                      end: slot.endDate(),\n                      isDaySlot: slot.isDaySlot\n                    },\n                    resources: view._resourceBySlot(slot),\n                    start: range.start,\n                    end: range.end\n                  })) {\n                    endSlot = slot;\n                  } else {\n                    for (i = 0; i < clonedEvents.length; i++) {\n                      view._updateMoveHint(clonedEvents[i], slot.groupIndex, distance);\n                    }\n                  }\n                }).bind(\"dragend\", function (e) {\n                  that.view()._removeMoveHint();\n\n                  var distance = endTime - startTime;\n                  var range = moveEventRange(clonedEvent, distance);\n                  var start = range.start;\n                  var end = range.end;\n                  that._dragging = false;\n\n                  var endResources = that.view()._resourceBySlot(endSlot);\n\n                  var prevented = that.trigger(\"moveEnd\", {\n                    event: event,\n                    slot: {\n                      element: endSlot.element,\n                      start: endSlot.startDate(),\n                      end: endSlot.endDate()\n                    },\n                    start: start,\n                    end: end,\n                    resources: endResources\n                  });\n\n                  if (!prevented && (event.start.getTime() !== start.getTime() || event.end.getTime() !== end.getTime() || originSlot.isDaySlot !== endSlot.isDaySlot || kendo.stringify(endResources) !== kendo.stringify(startResources))) {\n                    that._isMultiDrag = clonedEvents.length > 1;\n\n                    for (var i = 0; i < clonedEvents.length; i++) {\n                      var evt = clonedEvents[i];\n                      range = moveEventRange(evt, distance);\n\n                      var updatedEventOptions = that.view()._eventOptionsForMove(evt);\n\n                      var eventOptions = $.extend({\n                        isAllDay: evt.isAllDay,\n                        start: range.start,\n                        end: range.end\n                      }, updatedEventOptions, endResources);\n\n                      that._updateEvent(null, evt, eventOptions);\n                    }\n\n                    if (that._isMultiDrag) {\n                      that.dataSource.sync();\n                      that._isMultiDrag = false;\n                    }\n                  }\n\n                  e.currentTarget.removeClass(\"k-event-active\");\n                  this.cancelHold();\n                  clonedEvents = [];\n                  cachedEvents = [];\n                }).bind(\"dragcancel\", function () {\n                  that.view()._removeMoveHint();\n\n                  this.cancelHold();\n                  clonedEvents = [];\n                  cachedEvents = [];\n                });\n              }\n\n              that._moveDraggable.bind(\"hold\", function (e) {\n                if (that._isTouch(e)) {\n                  that.element.find(\".k-event-active\").removeClass(\"k-event-active\");\n\n                  if (that.options.selectable) {\n                    that._createSelection(e.currentTarget);\n                  }\n\n                  e.currentTarget.addClass(\"k-event-active\");\n                }\n              });\n            }\n          },\n          _resizable: function () {\n            var startTime;\n            var endTime;\n            var event;\n            var clonedEvent;\n            var slot;\n            var that = this;\n            var distance = 0;\n\n            function direction(handle) {\n              var directions = {\n                \"k-resize-e\": \"east\",\n                \"k-resize-w\": \"west\",\n                \"k-resize-n\": \"north\",\n                \"k-resize-s\": \"south\"\n              };\n\n              for (var key in directions) {\n                if (handle.hasClass(key)) {\n                  return directions[key];\n                }\n              }\n            }\n\n            if (that._isMobile() && kendo.support.mobileOS.android) {\n              distance = 5;\n            }\n\n            that._resizeDraggable = new kendo.ui.Draggable(that.element, {\n              distance: distance,\n              filter: \".k-resize-handle\",\n              autoScroll: true,\n              dragstart: function (e) {\n                var dragHandle = $(e.currentTarget);\n                var eventElement = dragHandle.closest(\".k-event\");\n                var uid = eventElement.attr(kendo.attr(\"uid\"));\n                var view = that.view();\n                that._dragging = true;\n                event = that.occurrenceByUid(uid);\n                clonedEvent = event.clone();\n\n                view._updateEventForResize(clonedEvent);\n\n                slot = view._slotByPosition(e.x.startLocation, e.y.startLocation);\n\n                if (that.trigger(\"resizeStart\", {\n                  event: event\n                })) {\n                  e.preventDefault();\n                }\n\n                startTime = kendo.date.toUtcTime(clonedEvent.start);\n                endTime = kendo.date.toUtcTime(clonedEvent.end);\n              },\n              drag: function (e) {\n                if (!slot) {\n                  return;\n                }\n\n                var dragHandle = $(e.currentTarget);\n                var dir = direction(dragHandle);\n                var view = that.view();\n\n                var currentSlot = view._slotByPosition(e.x.location, e.y.location);\n\n                if (!currentSlot || slot.groupIndex != currentSlot.groupIndex) {\n                  return;\n                }\n\n                slot = currentSlot;\n                var originalStart = startTime;\n                var originalEnd = endTime;\n\n                if (dir == \"south\") {\n                  if (!slot.isDaySlot && slot.end - kendo.date.toUtcTime(clonedEvent.start) >= view._timeSlotInterval()) {\n                    if (clonedEvent.isAllDay) {\n                      endTime = slot.startOffset(e.x.location, e.y.location, that.options.snap);\n                    } else {\n                      endTime = slot.endOffset(e.x.location, e.y.location, that.options.snap);\n                    }\n                  }\n                } else if (dir == \"north\") {\n                  if (!slot.isDaySlot && kendo.date.toUtcTime(clonedEvent.end) - slot.start >= view._timeSlotInterval()) {\n                    startTime = slot.startOffset(e.x.location, e.y.location, that.options.snap);\n                  }\n                } else if (dir == \"east\") {\n                  if (slot.isDaySlot && kendo.date.toUtcTime(kendo.date.getDate(slot.endDate())) >= kendo.date.toUtcTime(kendo.date.getDate(clonedEvent.start))) {\n                    if (clonedEvent.isAllDay) {\n                      endTime = slot.startOffset(e.x.location, e.y.location, that.options.snap);\n                    } else {\n                      endTime = slot.endOffset(e.x.location, e.y.location, that.options.snap);\n                    }\n                  } else if (!slot.isDaySlot && slot.end - kendo.date.toUtcTime(clonedEvent.start) >= view._timeSlotInterval()) {\n                    endTime = slot.endOffset(e.x.location, e.y.location, that.options.snap);\n                  }\n                } else if (dir == \"west\") {\n                  if (slot.isDaySlot && kendo.date.toUtcTime(kendo.date.getDate(clonedEvent.end)) >= kendo.date.toUtcTime(kendo.date.getDate(slot.startDate()))) {\n                    startTime = slot.startOffset(e.x.location, e.y.location, that.options.snap);\n                  } else if (!slot.isDaySlot && kendo.date.toUtcTime(clonedEvent.end) - slot.start >= view._timeSlotInterval()) {\n                    startTime = slot.startOffset(e.x.location, e.y.location, that.options.snap);\n                  }\n                }\n\n                if (!that.trigger(\"resize\", {\n                  event: event,\n                  slot: {\n                    element: slot.element,\n                    start: slot.startDate(),\n                    end: slot.endDate()\n                  },\n                  start: kendo.timezone.toLocalDate(startTime),\n                  end: kendo.timezone.toLocalDate(endTime),\n                  resources: view._resourceBySlot(slot)\n                })) {\n                  view._updateResizeHint(clonedEvent, slot.groupIndex, startTime, endTime);\n                } else {\n                  startTime = originalStart;\n                  endTime = originalEnd;\n                }\n              },\n              dragend: function (e) {\n                var dragHandle = $(e.currentTarget);\n                var start = new Date(clonedEvent.start.getTime());\n                var end = new Date(clonedEvent.end.getTime());\n                var dir = direction(dragHandle);\n                that._dragging = false;\n\n                that.view()._removeResizeHint();\n\n                if (dir == \"south\") {\n                  end = kendo.timezone.toLocalDate(endTime);\n                } else if (dir == \"north\") {\n                  start = kendo.timezone.toLocalDate(startTime);\n                } else if (dir == \"east\") {\n                  if (slot.isDaySlot) {\n                    end = kendo.date.getDate(kendo.timezone.toLocalDate(endTime));\n                  } else {\n                    end = kendo.timezone.toLocalDate(endTime);\n                  }\n                } else if (dir == \"west\") {\n                  if (slot.isDaySlot) {\n                    start = new Date(kendo.timezone.toLocalDate(startTime));\n                    start.setHours(0);\n                    start.setMinutes(0);\n                  } else {\n                    start = kendo.timezone.toLocalDate(startTime);\n                  }\n                }\n\n                var prevented = that.trigger(\"resizeEnd\", {\n                  event: event,\n                  slot: {\n                    element: slot.element,\n                    start: slot.startDate(),\n                    end: slot.endDate()\n                  },\n                  start: start,\n                  end: end,\n                  resources: that.view()._resourceBySlot(slot)\n                });\n\n                if (!prevented && end.getTime() >= start.getTime()) {\n                  if (clonedEvent.start.getTime() != start.getTime() || clonedEvent.end.getTime() != end.getTime()) {\n                    that.view()._updateEventForResize(event);\n\n                    that._updateEvent(dir, event, {\n                      start: start,\n                      end: end\n                    });\n                  }\n                }\n\n                slot = null;\n                event = null;\n              },\n              dragcancel: function () {\n                that._dragging = false;\n\n                that.view()._removeResizeHint();\n\n                slot = null;\n                event = null;\n              }\n            });\n          },\n          _updateEvent: function (dir, event, eventInfo) {\n            var that = this;\n\n            var updateEvent = function (event, callback) {\n              var start;\n\n              try {\n                that._preventRefresh = true;\n                event.update(eventInfo);\n\n                that._convertDates(event);\n\n                start = event.start;\n\n                if (dir && event.duration() % MS_PER_DAY === 0 && start.getHours() === 0 && start.getMinutes() === 0 && start.getSeconds() === 0 && start.getMilliseconds() === 0) {\n                  event.set(\"isAllDay\", true);\n                }\n              } finally {\n                that._preventRefresh = false;\n              }\n\n              if (!that.trigger(SAVE, {\n                event: event\n              })) {\n                if (callback) {\n                  callback();\n                }\n\n                if (!that._isMultiDrag) {\n                  that.dataSource.sync();\n                }\n              }\n            };\n\n            var recurrenceHead = function (event) {\n              if (event.recurrenceRule) {\n                return that.dataSource.getByUid(event.uid);\n              } else {\n                return that.dataSource.get(event.recurrenceId);\n              }\n            };\n\n            var updateSeries = function () {\n              var head = recurrenceHead(event);\n\n              if (dir == \"south\" || dir == \"north\") {\n                if (eventInfo.start) {\n                  var start = kendo.date.getDate(head.start);\n                  kendo.date.setTime(start, getMilliseconds(eventInfo.start));\n                  eventInfo.start = start;\n                }\n\n                if (eventInfo.end) {\n                  var end = kendo.date.getDate(head.end);\n                  kendo.date.setTime(end, getMilliseconds(eventInfo.end));\n                  eventInfo.end = end;\n                }\n              }\n\n              that.dataSource._removeExceptions(head);\n\n              updateEvent(head);\n            };\n\n            var updateOccurrence = function () {\n              var head = recurrenceHead(event);\n              var eventUid;\n\n              var callback = function () {\n                that._convertDates(head);\n\n                if (that._selection) {\n                  that._selection.events.push(eventUid);\n                }\n              };\n\n              var exception = head.toOccurrence({\n                start: event.start,\n                end: event.end\n              });\n              eventUid = exception.uid;\n              updateEvent(that.dataSource.add(exception), callback);\n            };\n\n            if (event.recurrenceRule || event.isOccurrence()) {\n              var recurrenceMessages = that.options.messages.recurrenceMessages;\n\n              that._showRecurringDialog(event, updateOccurrence, updateSeries, {\n                title: recurrenceMessages.editWindowTitle,\n                text: recurrenceMessages.editRecurring ? recurrenceMessages.editRecurring : EDITRECURRING,\n                occurrenceText: recurrenceMessages.editWindowOccurrence,\n                seriesText: recurrenceMessages.editWindowSeries\n              });\n            } else {\n              updateEvent(that.dataSource.getByUid(event.uid));\n            }\n          },\n          _modelForContainer: function (container) {\n            container = $(container).closest(\"[\" + kendo.attr(\"uid\") + \"]\");\n            return this.dataSource.getByUid(container.attr(kendo.attr(\"uid\")));\n          },\n          showDialog: function (options) {\n            this.toolbar.find(\".\" + FOCUSEDSTATE).removeClass(FOCUSEDSTATE);\n\n            this._editor.showDialog(options);\n          },\n          focus: function () {\n            this.wrapper.trigger(\"focus\");\n          },\n          _confirmation: function (callback, model, isResetSeries) {\n            var editable = this.options.editable;\n\n            if (editable === true || editable.confirmation !== false) {\n              var messages = this.options.messages;\n              var title = messages.deleteWindowTitle;\n              var text = typeof editable.confirmation === STRING ? editable.confirmation : messages.editable.confirmation;\n\n              if (this._isEditorOpened() && model.isRecurring()) {\n                var recurrenceMessages = this.options.messages.recurrenceMessages;\n                title = recurrenceMessages.deleteWindowTitle;\n\n                if (model.isException() || model.isNew()) {\n                  text = recurrenceMessages.deleteRecurringConfirmation ? recurrenceMessages.deleteRecurringConfirmation : DELETERECURRINGCONFIRM;\n                } else {\n                  text = recurrenceMessages.deleteSeriesConfirmation ? recurrenceMessages.deleteSeriesConfirmation : DELETESERIESCONFIRM;\n                }\n\n                if (isResetSeries) {\n                  title = recurrenceMessages.resetSeriesWindowTitle;\n                  text = recurrenceMessages.resetSeriesConfirmation ? recurrenceMessages.resetSeriesConfirmation : RESETSERIESCONFIRM;\n                }\n              }\n\n              var buttons = [{\n                name: \"destroy\",\n                text: isResetSeries ? messages.resetSeries : messages.destroy,\n                click: function () {\n                  callback();\n                }\n              }];\n\n              if (!(this._isMobile() && kendo.Pane)) {\n                buttons.push({\n                  name: \"canceledit\",\n                  text: messages.cancel,\n                  click: function () {\n                    callback(true);\n                  }\n                });\n              }\n\n              this._unbindResize();\n\n              this.showDialog({\n                model: model,\n                text: text,\n                title: title,\n                buttons: buttons\n              });\n\n              this._bindResize();\n            } else {\n              callback();\n            }\n          },\n          addEvent: function (eventInfo) {\n            var editable = this._editor.editable;\n            var dataSource = this.dataSource;\n            var event;\n            eventInfo = eventInfo || {};\n            var prevented = this.trigger(\"add\", {\n              event: eventInfo\n            });\n\n            if (!prevented && (editable && editable.end() || !editable)) {\n              this.cancelEvent();\n\n              if (eventInfo && eventInfo.toJSON) {\n                eventInfo = eventInfo.toJSON();\n              }\n\n              event = dataSource.add(eventInfo);\n\n              if (event) {\n                this.cancelEvent();\n\n                this._editEvent(event);\n              }\n            }\n          },\n          saveEvent: function () {\n            var that = this;\n            var editor = that._editor;\n            var dataSource = that.dataSource;\n\n            if (!editor) {\n              return;\n            }\n\n            var editable = editor.editable;\n            var container = editor.container;\n\n            var model = that._modelForContainer(container);\n\n            var events, i, event;\n\n            if (container && editable && editable.end() && !that.trigger(SAVE, {\n              container: container,\n              event: model\n            })) {\n              if (!model.isOccurrence() && !!model.recurrenceException && !model.recurrenceRule) {\n                events = dataSource.data();\n\n                for (i = events.length - 1; i >= 0; i -= 1) {\n                  event = events[i];\n\n                  if (event && event.recurrenceId === model.id) {\n                    dataSource.remove(event);\n                  }\n                }\n\n                model.set(\"recurrenceException\", \"\");\n              }\n\n              if (!model.dirty && !model.isOccurrence()) {\n                that._convertDates(model, \"remove\");\n              }\n\n              dataSource.sync();\n            }\n          },\n          cancelEvent: function () {\n            var editor = this._editor;\n            var container = editor.container;\n            var model;\n\n            if (container) {\n              model = this._modelForContainer(container);\n\n              if (model && model.isOccurrence()) {\n                this._convertDates(model, \"remove\");\n\n                this._convertDates(this.dataSource.get(model.recurrenceId), \"remove\");\n              }\n\n              this.dataSource.cancelChanges(model); //TODO: handle the cancel in UI\n\n              editor.close();\n            }\n          },\n          editEvent: function (uid) {\n            var model = typeof uid == \"string\" ? this.occurrenceByUid(uid) : uid;\n\n            if (!model) {\n              return;\n            }\n\n            this.cancelEvent();\n\n            if (model.isRecurring()) {\n              this._editRecurringDialog(model);\n            } else {\n              this._editEvent(model);\n            }\n          },\n          _editEvent: function (model) {\n            this._preventRefresh = true;\n\n            this._unbindResize();\n\n            this._createPopupEditor(model);\n\n            this.toolbar.find(\".\" + FOCUSEDSTATE).removeClass(FOCUSEDSTATE);\n\n            this._bindResize();\n          },\n          _editRecurringDialog: function (model) {\n            var that = this;\n\n            var editOccurrence = function () {\n              if (model.isException()) {\n                that._editEvent(model);\n              } else {\n                that.addEvent(model);\n              }\n            };\n\n            var editSeries = function () {\n              if (model.recurrenceId) {\n                model = that.dataSource.get(model.recurrenceId);\n              }\n\n              that._editEvent(model);\n            };\n\n            var recurrenceMessages = that.options.messages.recurrenceMessages;\n\n            that._showRecurringDialog(model, editOccurrence, editSeries, {\n              title: recurrenceMessages.editWindowTitle,\n              text: recurrenceMessages.editRecurring ? recurrenceMessages.editRecurring : EDITRECURRING,\n              occurrenceText: recurrenceMessages.editWindowOccurrence,\n              seriesText: recurrenceMessages.editWindowSeries\n            });\n          },\n          _showRecurringDialog: function (model, editOccurrence, editSeries, messages) {\n            var editable = this.options.editable;\n            var editRecurringMode = isPlainObject(editable) ? editable.editRecurringMode : \"dialog\";\n\n            if (editRecurringMode === \"occurrence\" || this._isMultiDrag) {\n              editOccurrence();\n            } else if (editRecurringMode === \"series\") {\n              editSeries();\n            } else {\n              this._unbindResize();\n\n              this.showDialog({\n                model: model,\n                title: messages.title,\n                text: messages.text,\n                buttons: [{\n                  text: messages.occurrenceText,\n                  click: editOccurrence\n                }, {\n                  text: messages.seriesText,\n                  click: editSeries\n                }]\n              });\n\n              this._bindResize();\n            }\n          },\n          _createButton: function (command) {\n            var template = command.template || COMMANDBUTTONTMPL,\n                commandName = typeof command === STRING ? command : command.name || command.text,\n                options = {\n              className: \"k-scheduler-\" + (commandName || \"\").replace(/\\s/g, \"\"),\n              text: commandName,\n              attr: \"\"\n            };\n\n            if (!commandName && !(isPlainObject(command) && command.template)) {\n              throw new Error(\"Custom commands should have name specified\");\n            }\n\n            if (isPlainObject(command)) {\n              if (command.className) {\n                command.className += \" \" + options.className;\n              }\n\n              if (commandName === \"edit\" && isPlainObject(command.text)) {\n                command = extend(true, {}, command);\n                command.text = command.text.edit;\n              }\n\n              options = extend(true, options, defaultCommands[commandName], command);\n            } else {\n              options = extend(true, options, defaultCommands[commandName]);\n            }\n\n            if (!options.className) {\n              options.className = \"k-button-solid-base\";\n            } else if (options.className.indexOf(\"k-button-solid-primary\") === -1) {\n              options.className += \" k-button-solid-base\";\n            }\n\n            return kendo.template(template)(options);\n          },\n          _convertDates: function (model, method) {\n            var timezone = this.dataSource.reader.timezone;\n            var startTimezone = model.startTimezone;\n            var endTimezone = model.endTimezone;\n            var start = model.start;\n            var end = model.start;\n            method = method || \"apply\";\n            startTimezone = startTimezone || endTimezone;\n            endTimezone = endTimezone || startTimezone;\n\n            if (startTimezone) {\n              if (timezone) {\n                if (method === \"apply\") {\n                  start = kendo.timezone.convert(model.start, timezone, startTimezone);\n                  end = kendo.timezone.convert(model.end, timezone, endTimezone);\n                } else {\n                  start = kendo.timezone.convert(model.start, startTimezone, timezone);\n                  end = kendo.timezone.convert(model.end, endTimezone, timezone);\n                }\n              } else {\n                start = kendo.timezone[method](model.start, startTimezone);\n                end = kendo.timezone[method](model.end, endTimezone);\n              }\n\n              model._set(\"start\", start);\n\n              model._set(\"end\", end);\n            }\n          },\n          _createEditor: function () {\n            var that = this;\n            var editor;\n\n            if (this._isMobile() && kendo.Pane) {\n              editor = that._editor = new MobileEditor(this.wrapper, extend({}, this.options, {\n                target: this,\n                timezone: that.dataSource.reader.timezone,\n                resources: that.resources,\n                createButton: this._createButton.bind(this)\n              }));\n            } else {\n              editor = that._editor = new PopupEditor(this.wrapper, extend({}, this.options, {\n                target: this,\n                createButton: this._createButton.bind(this),\n                timezone: that.dataSource.reader.timezone,\n                resources: that.resources\n              }));\n            }\n\n            editor.bind(\"cancel\", function (e) {\n              if (that.trigger(\"cancel\", {\n                container: e.container,\n                event: e.model\n              })) {\n                e.preventDefault();\n                return;\n              }\n\n              that._preventRefresh = false;\n              that.cancelEvent();\n\n              if (that._attemptRefresh) {\n                that.refresh();\n              }\n\n              that.focus();\n            });\n            editor.bind(\"edit\", function (e) {\n              if (that.trigger(EDIT, {\n                container: e.container,\n                event: e.model\n              })) {\n                e.preventDefault();\n              }\n            });\n            editor.bind(\"save\", function () {\n              that._preventRefresh = false;\n              that.saveEvent();\n            });\n            editor.bind(\"remove\", function (e) {\n              that._preventRefresh = false;\n              that.removeEvent(e.model);\n            });\n            editor.bind(\"resetSeries\", function (e) {\n              that._confirmation(function (cancel) {\n                that._preventRefresh = false;\n\n                if (!cancel) {\n                  that.dataSource._removeExceptions(e.model);\n\n                  that.saveEvent();\n                }\n              }, e.model, true);\n            });\n          },\n          _createPopupEditor: function (model) {\n            var editor = this._editor;\n\n            if (!model.isNew() || model.isOccurrence()) {\n              if (model.isOccurrence()) {\n                this._convertDates(model.recurrenceId ? this.dataSource.get(model.recurrenceId) : model);\n              }\n\n              this._convertDates(model);\n            }\n\n            this.editable = editor.editEvent(model);\n          },\n          removeEvent: function (uid) {\n            var that = this,\n                model = typeof uid == \"string\" ? that.occurrenceByUid(uid) : uid;\n\n            if (!model) {\n              return;\n            }\n\n            if (model.isRecurring()) {\n              that._deleteRecurringDialog(model);\n            } else {\n              that._confirmation(function (cancel) {\n                if (!cancel) {\n                  that._removeEvent(model);\n                }\n              }, model);\n            }\n          },\n          occurrenceByUid: function (uid) {\n            var occurrence = this.dataSource.getByUid(uid);\n\n            if (!occurrence) {\n              occurrence = getOccurrenceByUid(this._data, uid);\n            }\n\n            return occurrence;\n          },\n          occurrencesInRange: function (start, end) {\n            return new kendo.data.Query(this._data).filter({\n              logic: \"or\",\n              filters: [{\n                logic: \"and\",\n                filters: [{\n                  field: \"start\",\n                  operator: \"gte\",\n                  value: start\n                }, {\n                  field: \"end\",\n                  operator: \"gte\",\n                  value: start\n                }, {\n                  field: \"start\",\n                  operator: \"lt\",\n                  value: end\n                }]\n              }, {\n                logic: \"and\",\n                filters: [{\n                  field: \"start\",\n                  operator: \"lte\",\n                  value: start\n                }, {\n                  field: \"end\",\n                  operator: \"gt\",\n                  value: start\n                }]\n              }]\n            }).toArray();\n          },\n          _removeEvent: function (model) {\n            if (!this.trigger(REMOVE, {\n              event: model\n            })) {\n              if (this.dataSource.remove(model)) {\n                this.dataSource.sync();\n              }\n            }\n          },\n          _deleteRecurringDialog: function (model) {\n            var that = this;\n            var currentModel = model;\n            var editable = that.options.editable;\n            var deleteOccurrence;\n            var deleteSeries;\n            var createException;\n            var deleteOccurrenceConfirmation;\n            var deleteSeriesConfirmation;\n            var createExceptionConfirmation;\n            var editRecurringMode = isPlainObject(editable) ? editable.editRecurringMode : \"dialog\";\n\n            deleteOccurrence = function () {\n              var occurrence = currentModel.recurrenceId ? currentModel : currentModel.toOccurrence();\n              var head = that.dataSource.get(occurrence.recurrenceId);\n\n              that._convertDates(head);\n\n              that._removeEvent(occurrence);\n            };\n\n            deleteSeries = function () {\n              if (currentModel.recurrenceId) {\n                currentModel = that.dataSource.get(currentModel.recurrenceId);\n              }\n\n              that._removeEvent(currentModel);\n            };\n\n            createException = function () {\n              that.dataSource.remove(currentModel);\n              that.dataSource.sync();\n            };\n\n            if (editRecurringMode != \"dialog\" || that._isEditorOpened()) {\n              deleteOccurrenceConfirmation = function () {\n                that._confirmation(function (cancel) {\n                  if (!cancel) {\n                    deleteOccurrence();\n                  }\n                }, currentModel);\n              };\n\n              deleteSeriesConfirmation = function () {\n                that._confirmation(function (cancel) {\n                  if (!cancel) {\n                    deleteSeries();\n                  }\n                }, currentModel);\n              };\n\n              createExceptionConfirmation = function () {\n                that._confirmation(function (cancel) {\n                  if (!cancel) {\n                    createException();\n                  }\n                }, currentModel);\n              };\n            }\n\n            var seriesCallback = deleteSeriesConfirmation || deleteSeries;\n            var occurrenceCallback = deleteOccurrenceConfirmation || deleteOccurrence;\n            var exeptionCallback = createExceptionConfirmation || createException;\n\n            if (that._isEditorOpened()) {\n              if (model.isException()) {\n                occurrenceCallback();\n              } else if (model.isNew()) {\n                exeptionCallback();\n              } else {\n                seriesCallback();\n              }\n            } else {\n              var recurrenceMessages = that.options.messages.recurrenceMessages;\n\n              that._showRecurringDialog(model, occurrenceCallback, seriesCallback, {\n                title: recurrenceMessages.deleteWindowTitle,\n                text: recurrenceMessages.deleteRecurring ? recurrenceMessages.deleteRecurring : DELETERECURRING,\n                occurrenceText: recurrenceMessages.deleteWindowOccurrence,\n                seriesText: recurrenceMessages.deleteWindowSeries\n              });\n            }\n          },\n          _isEditorOpened: function () {\n            return !!this._editor.container;\n          },\n          _unbindView: function (view) {\n            var that = this;\n            that.angular(\"cleanup\", function () {\n              return {\n                elements: that.items()\n              };\n            });\n            view.destroy();\n          },\n          _bindView: function (view) {\n            var that = this;\n\n            if (that.options.editable) {\n              if (that._viewRemoveHandler) {\n                view.unbind(REMOVE, that._viewRemoveHandler);\n              }\n\n              that._viewRemoveHandler = function (e) {\n                that.removeEvent(e.uid);\n              };\n\n              view.bind(REMOVE, that._viewRemoveHandler);\n\n              if (that._viewAddHandler) {\n                view.unbind(ADD, that._viewAddHandler);\n              }\n\n              that._viewAddHandler = function (e) {\n                that.addEvent(e.eventInfo);\n              };\n\n              view.bind(ADD, this._viewAddHandler);\n\n              if (that._viewEditHandler) {\n                view.unbind(EDIT, that._viewEditHandler);\n              }\n\n              that._viewEditHandler = function (e) {\n                that.editEvent(e.uid);\n              };\n\n              view.bind(EDIT, this._viewEditHandler);\n            }\n\n            if (that._viewNavigateHandler) {\n              view.unbind(\"navigate\", that._viewNavigateHandler);\n            }\n\n            that._viewNavigateHandler = function (e) {\n              if (e.action) {\n                if (!that.trigger(\"navigate\", {\n                  view: e.view,\n                  isWorkDay: e.isWorkDay,\n                  action: e.action,\n                  date: e.date\n                })) {\n                  that.date(e.date);\n                }\n              } else if (e.view) {\n                var switchWorkDay = (\"isWorkDay\" in e);\n                var action = switchWorkDay ? \"changeWorkDay\" : \"changeView\";\n\n                if (!that.trigger(\"navigate\", {\n                  view: e.view,\n                  isWorkDay: e.isWorkDay,\n                  action: action,\n                  date: e.date\n                })) {\n                  if (switchWorkDay) {\n                    that._workDayMode = e.isWorkDay;\n                  }\n\n                  that._selectView(e.view);\n\n                  that.date(e.date);\n                }\n              }\n            };\n\n            view.bind(\"navigate\", that._viewNavigateHandler);\n\n            if (that._viewActivateHandler) {\n              view.unbind(\"activate\", that._viewActivateHandler);\n            }\n\n            that._viewActivateHandler = function () {\n              var view = this;\n\n              if (that._selection) {\n                view.constrainSelection(that._selection);\n\n                if ($(document.activeElement).closest(\".k-scheduler-toolbar\").length === 0) {\n                  if (document.activeElement !== that.wrapper[0]) {\n                    that.element.focus();\n                  } else {\n                    that._select();\n                  }\n                }\n\n                that._adjustSelectedDate();\n              }\n            };\n\n            view.bind(\"activate\", that._viewActivateHandler);\n          },\n          _selectView: function (name) {\n            var that = this;\n\n            if (name && that.views[name]) {\n              if (that._selectedView) {\n                that._unbindView(that._selectedView);\n              }\n\n              that._selectedView = that._renderView(name);\n              that._selectedViewName = name;\n\n              if (that._viewsCount > 1 && !that._isMobile()) {\n                var viewsDropdown = that.toolbar.find(\".k-views-dropdown\");\n                var viewButtons = that.toolbar.find(\".k-scheduler-views > .k-button\");\n\n                if (that.toolbar.find(\".k-views-dropdown\").length === 0) {\n                  that.toolbar.find(\".k-scheduler-views-wrapper\").prepend(VIEWS_DROPDOWN_TEMPLATE({\n                    views: that.views,\n                    view: name,\n                    ns: kendo.ns,\n                    label: that.options.messages.selectView\n                  }));\n                  viewsDropdown = that.toolbar.find(\".k-views-dropdown\");\n                }\n\n                viewsDropdown.val(name);\n                viewButtons.removeClass(\"k-selected\");\n                viewButtons.filter(\".k-view-\" + name.replace(/\\./g, \"\\\\.\").toLowerCase()).addClass(\"k-selected\");\n              } else {\n                var viewSelect = that.toolbar.find(\".k-scheduler-mobile-views\");\n                viewSelect.find(\"[value=\" + name.replace(/\\./g, \"\\\\.\") + \"]\").prop(\"selected\", \"selected\");\n              }\n            }\n          },\n          view: function (name) {\n            var that = this;\n\n            if (name) {\n              that._selectView(name);\n\n              that.rebind();\n              return;\n            }\n\n            return that._selectedView;\n          },\n          viewName: function () {\n            return this.view().name;\n          },\n          _renderView: function (name) {\n            var view = this._initializeView(name);\n\n            this._bindView(view);\n\n            if (kendo.support.mouseAndTouchPresent || kendo.support.pointers) {\n              view.content.css(\"-ms-touch-action\", \"pinch-zoom\");\n              view.content.css(\"touch-action\", \"pinch-zoom\");\n            }\n\n            this._model.set(\"formattedDate\", view.dateForTitle());\n\n            this._model.set(\"formattedShortDate\", view.shortDateForTitle());\n\n            this._model.set(\"formattedMobileDate\", view.mobileDateForTitle ? view.mobileDateForTitle() : view.shortDateForTitle());\n\n            this._model.set(\"formattedYear\", kendo.format(\"{0:yyyy}\", view.startDate()));\n\n            return view;\n          },\n          resize: function (force) {\n            var size = this.getSize();\n            var currentSize = this._size;\n            var view = this.view();\n\n            if (!view || !view.groups) {\n              return;\n            }\n\n            if (force || !currentSize || size.width !== currentSize.width || size.height !== currentSize.height) {\n              this.refresh({\n                action: \"resize\"\n              });\n              this._size = size;\n            }\n          },\n          _adjustSelectedDate: function () {\n            var date = this._model.selectedDate,\n                selection = this._selection,\n                start = selection.start;\n\n            if (start && !kendo.date.isInDateRange(date, getDate(start), getDate(selection.end))) {\n              date.setFullYear(start.getFullYear(), start.getMonth(), start.getDate());\n            }\n          },\n          _initializeView: function (name) {\n            var view = this.views[name];\n\n            if (view) {\n              var isSettings = isPlainObject(view),\n                  overrideOptions = {},\n                  type = view.type;\n\n              if (typeof type === STRING) {\n                type = kendo.getter(view.type)(window);\n              }\n\n              if (isSettings && view.workDays && view.workDays.length) {\n                overrideOptions.workDays = view.workDays;\n              }\n\n              if (type) {\n                view = new type(this.wrapper, trimOptions(extend(true, {}, this.options, isSettings ? view : {}, {\n                  resources: this.resources,\n                  date: this.date(),\n                  startTime: kendo.parseDate(view.startTime) || kendo.parseDate(this.options.startTime),\n                  endTime: kendo.parseDate(view.endTime) || kendo.parseDate(this.options.endTime),\n                  showWorkHours: this._workDayMode\n                }), overrideOptions));\n              } else {\n                throw new Error(\"There is no such view\");\n              }\n            }\n\n            return view;\n          },\n          _views: function () {\n            var views = this.options.views;\n            var view;\n            var defaultView;\n            var selected;\n            var isSettings;\n            var name;\n            var type;\n            var idx;\n            var length;\n            this.views = {};\n            this._viewsCount = 0;\n\n            for (idx = 0, length = views.length; idx < length; idx++) {\n              var hasType = false;\n              view = views[idx];\n              isSettings = isPlainObject(view);\n\n              if (isSettings) {\n                type = name = view.type ? view.type : view;\n\n                if (typeof type !== STRING) {\n                  name = view.name || view.title;\n                  hasType = true;\n                }\n              } else {\n                type = name = view;\n              }\n\n              defaultView = defaultViews[name];\n\n              if (defaultView && !hasType) {\n                view.type = defaultView.type;\n                defaultView.title = this.options.messages.views[name];\n\n                if (defaultView.type === \"day\") {\n                  defaultView.messages = {\n                    allDay: this.options.messages.allDay\n                  };\n                } else if (defaultView.type === \"agenda\") {\n                  defaultView.messages = {\n                    event: this.options.messages.event,\n                    date: this.options.messages.date,\n                    time: this.options.messages.time\n                  };\n                }\n              }\n\n              view = extend({\n                title: name\n              }, defaultView, isSettings ? view : {});\n\n              if (name) {\n                this.views[name] = view;\n                this._viewsCount++;\n\n                if (!selected || view.selected) {\n                  selected = name;\n                }\n              }\n            }\n\n            if (selected) {\n              this._selectedViewName = selected; // toolbar is not rendered yet\n            }\n          },\n          rebind: function () {\n            var that = this,\n                resources = that.resources,\n                resourceFetchArray = [];\n\n            if (that._preventRebind) {\n              that._preventRebind = false;\n              return;\n            }\n\n            if (that.options.autoBind === false && resources && resources.length > 0) {\n              resources.forEach(function (resource) {\n                if (resource.dataSource.data().length === 0) {\n                  that._preventRebind = true;\n                  resourceFetchArray.push(resource.dataSource.fetch());\n                }\n              });\n              $.when.apply(null, resourceFetchArray).then(function () {\n                that.dataSource.fetch();\n                that._preventRebind = false;\n              });\n            } else {\n              that.dataSource.fetch();\n            }\n          },\n          _dataSource: function () {\n            var that = this,\n                options = that.options,\n                dataSource = options.dataSource;\n            dataSource = isArray(dataSource) ? {\n              data: dataSource\n            } : dataSource;\n\n            if (options.timezone && !(dataSource instanceof SchedulerDataSource)) {\n              dataSource = extend(true, dataSource, {\n                schema: {\n                  timezone: options.timezone\n                }\n              });\n            } else if (dataSource instanceof SchedulerDataSource) {\n              options.timezone = dataSource.options.schema ? dataSource.options.schema.timezone : \"\";\n            }\n\n            if (that.dataSource && that._refreshHandler) {\n              that.dataSource.unbind(CHANGE, that._refreshHandler).unbind(PROGRESS, that._progressHandler).unbind(ERROR, that._errorHandler);\n            } else {\n              that._refreshHandler = that.refresh.bind(that);\n              that._progressHandler = that._requestStart.bind(that);\n              that._errorHandler = that._error.bind(that);\n            }\n\n            that.dataSource = kendo.data.SchedulerDataSource.create(dataSource).bind(CHANGE, that._refreshHandler).bind(PROGRESS, that._progressHandler).bind(ERROR, that._errorHandler);\n            that.options.dataSource = that.dataSource;\n          },\n          _error: function () {\n            this._progress(false);\n          },\n          _requestStart: function () {\n            this._progress(true);\n          },\n          _progress: function (toggle) {\n            var element = this.element.find(\".k-scheduler-content\");\n            kendo.ui.progress(element, toggle);\n          },\n          _resources: function () {\n            var that = this;\n            var resources = that.options.resources;\n            var resourcePromises = [];\n\n            for (var idx = 0; idx < resources.length; idx++) {\n              var resource = resources[idx];\n              var field = resource.field;\n              var name = resource.name || field;\n              var dataSource = resource.dataSource;\n\n              if (!field || !dataSource) {\n                throw new Error('The \"field\" and \"dataSource\" options of the scheduler resource are mandatory.');\n              }\n\n              that.resources.push({\n                field: field,\n                name: name,\n                title: resource.title || field,\n                dataTextField: resource.dataTextField || \"text\",\n                dataValueField: resource.dataValueField || \"value\",\n                dataColorField: resource.dataColorField || \"color\",\n                dataParentValueField: resource.dataParentValueField || \"parentValue\",\n                valuePrimitive: resource.valuePrimitive != null ? resource.valuePrimitive : true,\n                multiple: resource.multiple || false,\n                dataSource: that._resourceDataSource(dataSource, name, resourcePromises)\n              });\n            }\n\n            if (!that.options.autoBind) {\n              that._selectView(that._selectedViewName);\n            } else {\n              $.when.apply(null, resourcePromises).then(function () {\n                that.view(that._selectedViewName);\n              });\n            }\n          },\n          _resourceDataSource: function (resourceDS, groupName, promises) {\n            var that = this;\n            var dataSource = isArray(resourceDS) ? {\n              data: resourceDS\n            } : resourceDS;\n            var dataSourceInstance = kendo.data.DataSource.create(dataSource);\n\n            if (that.options.autoBind) {\n              promises.push(dataSourceInstance.fetch(function () {\n                // 'this' is the DataSource instance not the Scheduler\n                that._bindResourceEvents(this, groupName);\n              }));\n            } else {\n              that._bindResourceEvents(dataSourceInstance, groupName);\n            }\n\n            return dataSourceInstance;\n          },\n          _bindResourceEvents: function (resourceDS, groupName) {\n            var that = this;\n            var isGrouped = that.options.group && that.options.group.resources.length;\n            var isResourceGrouped = isGrouped && that.options.group.resources.indexOf(groupName) > -1;\n\n            if (!that._resourceRefreshHandler && isResourceGrouped) {\n              that._resourceRefreshHandler = that._refreshResource.bind(that);\n              that._resourceErrorHandler = that._error.bind(that);\n            }\n\n            if (isResourceGrouped) {\n              resourceDS.bind(CHANGE, that._resourceRefreshHandler).bind(ERROR, that._resourceErrorHandler);\n            }\n          },\n          _refreshResource: function () {\n            var that = this;\n            var preventRefresh = that._editor && that._editor.editable || that._preventRefresh;\n\n            if (!preventRefresh) {\n              that.view(that._selectedViewName);\n            }\n          },\n          _initModel: function () {\n            var that = this;\n            that._model = kendo.observable({\n              selectedDate: new Date(this.options.date),\n              formattedDate: \"\",\n              formattedShortDate: \"\"\n            });\n\n            that._model.bind(CHANGE, function (e) {\n              if (e.field === \"selectedDate\") {\n                that.view(that._selectedViewName);\n              }\n            });\n          },\n          _wrapper: function () {\n            var that = this;\n            var options = that.options;\n            var height = options.height;\n            var width = options.width;\n            that.wrapper = that.element.addClass(\"k-widget k-scheduler k-floatwrap\");\n\n            if (that._isMobile()) {\n              that.wrapper.addClass(\"k-scheduler-mobile\");\n            }\n\n            if (height) {\n              that.wrapper.height(height);\n            }\n\n            if (width) {\n              that.wrapper.width(width);\n            }\n          },\n          date: function (value) {\n            if (value != null && getDate(value) >= getDate(this.options.min) && getDate(value) <= getDate(this.options.max)) {\n              this._model.set(\"selectedDate\", value);\n            }\n\n            return getDate(this._model.get(\"selectedDate\"));\n          },\n          _toolbar: function () {\n            var that = this;\n            var options = that.options;\n            var commands = [];\n\n            if (options.toolbar) {\n              commands = Array.isArray(options.toolbar) ? options.toolbar : [options.toolbar];\n            }\n\n            var template = this._isMobile() ? MOBILETOOLBARTEMPLATE : TOOLBARTEMPLATE;\n            var toolbar = $(template({\n              messages: options.messages,\n              pdf: $.grep(commands, function (item) {\n                return item == \"pdf\" || item.name == \"pdf\";\n              }).length > 0,\n              search: $.grep(commands, function (item) {\n                return item == \"search\" || item.name == \"search\";\n              }).length > 0,\n              ns: kendo.ns,\n              view: that._selectedViewName,\n              views: that.views,\n              viewsCount: that._viewsCount,\n              editable: that.options.editable\n            }));\n            that.wrapper.append(toolbar);\n            that.toolbar = toolbar;\n            kendo.bind(that.toolbar, that._model);\n            toolbar.on(CLICK + NS, \".k-pdf\", function (e) {\n              e.preventDefault();\n              that.saveAsPDF();\n            });\n            toolbar.on(\"input\" + NS, \".k-scheduler-search-input\", kendo.throttle(function (e) {\n              that.dataSource.filter({\n                logic: \"or\",\n                filters: [{\n                  field: \"title\",\n                  operator: \"contains\",\n                  value: e.target.value\n                }, {\n                  field: \"description\",\n                  operator: \"contains\",\n                  value: e.target.value\n                }]\n              });\n            }, 250));\n            toolbar.on(CLICK + NS, \".k-create-event\", function (e) {\n              e.preventDefault();\n              that.addEvent();\n            });\n            toolbar.on(CLICK + NS, \".k-nav-calendar\", function (e) {\n              e.preventDefault();\n\n              that._showCalendar(e.target);\n            });\n            toolbar.on(CLICK + NS, \".k-scheduler-navigation > .k-button\", function (e) {\n              var button = $(this);\n              var date = new Date(that.date());\n              var action = \"\";\n              var currentDate = new Date();\n              var timezone = that.options.timezone;\n              that.toolbar.find(\".\" + FOCUSEDSTATE).removeClass(FOCUSEDSTATE);\n              button.addClass(FOCUSEDSTATE).attr(\"tabindex\", 0).trigger(\"focus\").attr(\"tabindex\", -1);\n\n              if ($(e.target).is(\"input\")) {\n                return;\n              }\n\n              e.preventDefault();\n\n              if (button.hasClass(\"k-nav-today\")) {\n                action = \"today\";\n\n                if (timezone) {\n                  var timezoneOffset = kendo.timezone.offset(currentDate, timezone);\n                  date = kendo.timezone.convert(currentDate, currentDate.getTimezoneOffset(), timezoneOffset);\n                } else {\n                  date = currentDate;\n                }\n              } else if (button.hasClass(\"k-nav-next\")) {\n                action = \"next\";\n                date = that.view().nextDate();\n              } else if (button.hasClass(\"k-nav-prev\")) {\n                action = \"previous\";\n                date = that.view().previousDate();\n              }\n\n              if (!that.trigger(\"navigate\", {\n                view: that._selectedViewName,\n                action: action,\n                date: date\n              })) {\n                that.date(date);\n              }\n            });\n            toolbar.on(CLICK + NS, \".k-nav-current\", function (e) {\n              e.preventDefault();\n              that.toolbar.find(\".\" + FOCUSEDSTATE).removeClass(FOCUSEDSTATE);\n              $(this).addClass(FOCUSEDSTATE);\n\n              if (!that._isMobile()) {\n                that._showCalendar();\n              }\n            });\n            toolbar.on(CLICK + NS, \".k-scheduler-views > .k-button, .k-scheduler-refresh\", function (e) {\n              e.preventDefault();\n              var name = $(this).attr(kendo.attr(\"name\"));\n              that.toolbar.find(\".\" + FOCUSEDSTATE).removeClass(FOCUSEDSTATE);\n              $(this).addClass(FOCUSEDSTATE).attr(\"tabindex\", 0).trigger(\"focus\").attr(\"tabindex\", -1);\n\n              if (!that.trigger(\"navigate\", {\n                view: name,\n                action: \"changeView\",\n                date: that.date()\n              })) {\n                that.view(name);\n              }\n            });\n            toolbar.on(CHANGE + NS, \".k-views-dropdown, .k-scheduler-mobile-views\", function () {\n              var name = this.value;\n\n              if (!that.trigger(\"navigate\", {\n                view: name,\n                action: \"changeView\",\n                date: that.date()\n              })) {\n                that.view(name);\n              }\n            });\n          },\n          _showCalendar: function (targetElm) {\n            var that = this,\n                target = targetElm || that.toolbar.find(\".k-nav-current\"),\n                html = $('<div class=\"k-calendar-container\"><div class=\"k-scheduler-calendar\"></div></div>');\n\n            if (!that.popup) {\n              that.popup = new Popup(html, {\n                anchor: target,\n                activate: function () {\n                  if (that.popup && that.calendar) {\n                    that.popup._toggleResize(false);\n\n                    that.calendar.element.find(\"table\").trigger(\"focus\");\n\n                    that.popup._toggleResize(true);\n                  }\n                },\n                open: function () {\n                  if (!that.calendar) {\n                    that.calendar = new Calendar(this.element.find(\".k-scheduler-calendar\"), {\n                      change: function () {\n                        var date = this.value();\n\n                        if (!that.trigger(\"navigate\", {\n                          view: that._selectedViewName,\n                          action: \"changeDate\",\n                          date: date\n                        })) {\n                          that.date(date);\n                          that.popup.close();\n                        }\n\n                        if (!that._isMobile()) {\n                          that._selectedView.element.trigger(\"focus\");\n\n                          that.toolbar.find(\".k-nav-current\").trigger(\"focus\").addClass(FOCUSEDSTATE);\n                        }\n                      },\n                      min: that.options.min,\n                      max: that.options.max\n                    });\n                  }\n\n                  that.calendar.element.on(\"keydown\" + NS, function (e) {\n                    if (e.keyCode === keys.ESC || e.keyCode === keys.TAB) {\n                      that.popup.close();\n\n                      that._selectedView.element.trigger(\"focus\");\n\n                      that.toolbar.find(\".k-nav-current\").trigger(\"focus\").addClass(FOCUSEDSTATE);\n                    }\n                  });\n                  that.calendar.setOptions({\n                    start: that._selectedViewName === \"year\" ? \"decade\" : \"month\",\n                    depth: that._selectedViewName === \"year\" ? \"decade\" : \"month\"\n                  });\n                  that.calendar.value(that.date());\n                },\n                copyAnchorStyles: false\n              });\n            }\n\n            that.popup.open();\n          },\n          refresh: function (e) {\n            var that = this;\n            var view = this.view();\n            var preventRefresh = e && e.action === \"itemchange\" && (this._editor.editable || this._preventRefresh) || this.dataSource.options.type === \"signalr\" && this._preventRefresh;\n\n            this._progress(false);\n\n            this.angular(\"cleanup\", function () {\n              return {\n                elements: that.items()\n              };\n            });\n            e = e || {};\n\n            if (!view) {\n              return;\n            }\n\n            if (preventRefresh) {\n              // skip rebinding if editing is in progress\n              this._attemptRefresh = true && this.dataSource.options.type === \"signalr\";\n              return;\n            }\n\n            if (this.trigger(\"dataBinding\", {\n              action: e.action || \"rebind\",\n              index: e.index,\n              items: e.items\n            })) {\n              return;\n            }\n\n            if (!(e && e.action === \"resize\") && this._editor) {\n              this._editor.close();\n            }\n\n            this._data = this.dataSource.expand(view.startDate(), view.visibleEndDate());\n            view.refreshLayout();\n            view.render(this._data);\n            this.trigger(\"dataBound\");\n            this._attemptRefresh = false;\n          },\n          slotByPosition: function (x, y) {\n            var view = this.view();\n\n            if (!view._slotByPosition) {\n              return null;\n            }\n\n            var slot = view._slotByPosition(x, y);\n\n            if (!slot) {\n              return null;\n            }\n\n            return {\n              startDate: slot.startDate(),\n              endDate: slot.endDate(),\n              groupIndex: slot.groupIndex,\n              element: slot.element,\n              isDaySlot: slot.isDaySlot\n            };\n          },\n          slotByElement: function (element) {\n            var offset = $(element).offset();\n            return this.slotByPosition(offset.left, offset.top);\n          },\n          resourcesBySlot: function (slot) {\n            return this.view()._resourceBySlot(slot);\n          }\n        });\n        var defaultViews = {\n          day: {\n            type: \"kendo.ui.DayView\"\n          },\n          week: {\n            type: \"kendo.ui.WeekView\"\n          },\n          workWeek: {\n            type: \"kendo.ui.WorkWeekView\"\n          },\n          agenda: {\n            type: \"kendo.ui.AgendaView\"\n          },\n          month: {\n            type: \"kendo.ui.MonthView\"\n          },\n          timeline: {\n            type: \"kendo.ui.TimelineView\"\n          },\n          timelineWeek: {\n            type: \"kendo.ui.TimelineWeekView\"\n          },\n          timelineWorkWeek: {\n            type: \"kendo.ui.TimelineWorkWeekView\"\n          },\n          timelineMonth: {\n            type: \"kendo.ui.TimelineMonthView\"\n          },\n          year: {\n            type: \"kendo.ui.YearView\"\n          }\n        };\n        ui.plugin(Scheduler);\n\n        if (kendo.PDFMixin) {\n          kendo.PDFMixin.extend(Scheduler.prototype);\n          var SCHEDULER_EXPORT = \"k-scheduler-pdf-export\";\n\n          Scheduler.fn._drawPDF = function (progress) {\n            var wrapper = this.wrapper;\n            var styles = wrapper[0].style.cssText;\n            wrapper.css({\n              width: wrapper.width(),\n              height: wrapper.height()\n            });\n            wrapper.addClass(SCHEDULER_EXPORT);\n            var scheduler = this;\n            var promise = new $.Deferred();\n            var table = wrapper.find(\".k-scheduler-content\").find(\"table\").css(\"table-layout\", \"auto\");\n            setTimeout(function () {\n              table.css(\"table-layout\", \"fixed\");\n              scheduler.resize(true);\n\n              scheduler._drawPDFShadow({}, {\n                avoidLinks: scheduler.options.pdf.avoidLinks\n              }).done(function (group) {\n                var args = {\n                  page: group,\n                  pageNumber: 1,\n                  progress: 1,\n                  totalPages: 1\n                };\n                progress.notify(args);\n                promise.resolve(args.page);\n              }).fail(function (err) {\n                promise.reject(err);\n              }).always(function () {\n                wrapper[0].style.cssText = styles;\n                wrapper.removeClass(SCHEDULER_EXPORT);\n                scheduler.resize(true); //Required because slot.offsetLeft is incorrect after first resize\n\n                scheduler.resize(true);\n              });\n            });\n            return promise;\n          };\n        }\n\n        var TimezoneEditor = Widget.extend({\n          init: function (element, options) {\n            var that = this,\n                zones = kendo.timezone.windows_zones;\n\n            if (!zones || !kendo.timezone.zones_titles) {\n              throw new Error('kendo.timezones.min.js is not included.');\n            }\n\n            Widget.fn.init.call(that, element, options);\n            that.wrapper = that.element;\n            that._zonesQuery = new kendo.data.Query(zones);\n            that._zoneTitleId = kendo.guid();\n\n            that._zoneTitlePicker();\n\n            that._zonePicker();\n\n            that._zoneTitle.bind(\"cascade\", function () {\n              if (!this.value()) {\n                that._zone.wrapper.hide();\n              }\n            });\n\n            that._zone.bind(\"cascade\", function () {\n              that._value = this.value();\n              that.trigger(CHANGE);\n            });\n\n            that.value(that.options.value);\n          },\n          options: {\n            name: \"TimezoneEditor\",\n            value: \"\",\n            optionLabel: \"No timezone\"\n          },\n          events: [CHANGE],\n          _zoneTitlePicker: function () {\n            var that = this,\n                zoneTitle = $('<input id=\"' + that._zoneTitleId + '\" aria-label=\"' + that.options.title + '\"/>').appendTo(that.wrapper);\n            that._zoneTitle = new kendo.ui.DropDownList(zoneTitle, {\n              dataSource: kendo.timezone.zones_titles,\n              dataValueField: \"other_zone\",\n              dataTextField: \"name\",\n              optionLabel: that.options.optionLabel\n            });\n          },\n          _zonePicker: function () {\n            var that = this,\n                zone = $('<input aria-label=\"' + that.options.title + '\"/>').appendTo(this.wrapper);\n            that._zone = new kendo.ui.DropDownList(zone, {\n              dataValueField: \"zone\",\n              dataTextField: \"territory\",\n              dataSource: that._zonesQuery.data,\n              cascadeFrom: that._zoneTitleId,\n              dataBound: function () {\n                that._value = this.value();\n                this.wrapper.toggle(this.dataSource.view().length > 1);\n              }\n            });\n\n            that._zone.wrapper.hide();\n          },\n          destroy: function () {\n            Widget.fn.destroy.call(this);\n            kendo.destroy(this.wrapper);\n          },\n          value: function (value) {\n            var that = this,\n                zone;\n\n            if (value === undefined) {\n              return that._value;\n            }\n\n            zone = that._zonesQuery.filter({\n              field: \"zone\",\n              operator: \"eq\",\n              value: value\n            }).data[0];\n\n            if (zone) {\n              that._zoneTitle.value(zone.other_zone);\n\n              that._zone.value(zone.zone);\n            } else {\n              that._zoneTitle.select(0);\n            }\n          }\n        });\n        ui.plugin(TimezoneEditor);\n        var ZONETITLEOPTIONTEMPLATE = kendo.template('<option value=\"#=other_zone#\">#=name#</option>');\n        var ZONEOPTIONTEMPLATE = kendo.template('<option value=\"#=zone#\">#=territory#</option>');\n        var MobileTimezoneEditor = Widget.extend({\n          init: function (element, options) {\n            var that = this,\n                zones = kendo.timezone.windows_zones;\n\n            if (!zones || !kendo.timezone.zones_titles) {\n              throw new Error('kendo.timezones.min.js is not included.');\n            }\n\n            Widget.fn.init.call(that, element, options);\n            that.wrapper = that.element;\n            that._zonesQuery = new kendo.data.Query(zones);\n\n            that._zoneTitlePicker();\n\n            that._zonePicker();\n\n            that.value(that.options.value);\n          },\n          options: {\n            name: \"MobileTimezoneEditor\",\n            optionLabel: \"No timezone\",\n            value: \"\"\n          },\n          events: [CHANGE],\n          _bindZones: function (value) {\n            var data = value ? this._filter(value) : [];\n\n            this._zone.html(this._options(data, ZONEOPTIONTEMPLATE));\n          },\n          _filter: function (value) {\n            return this._zonesQuery.filter({\n              field: \"other_zone\",\n              operator: \"eq\",\n              value: value\n            }).data;\n          },\n          _options: function (data, template, optionLabel) {\n            var idx = 0;\n            var html = \"\";\n            var length = data.length;\n\n            if (optionLabel) {\n              html += template({\n                other_zone: \"\",\n                name: optionLabel\n              });\n            }\n\n            for (; idx < length; idx++) {\n              html += template(data[idx]);\n            }\n\n            return html;\n          },\n          _zoneTitlePicker: function () {\n            var that = this;\n\n            var options = that._options(kendo.timezone.zones_titles, ZONETITLEOPTIONTEMPLATE, that.options.optionLabel);\n\n            that._zoneTitle = $('<select>' + options + '</select>').appendTo(that.wrapper).on(\"change\", function () {\n              var value = this.value;\n              var zone = that._zonePickerLabel;\n              var zoneSelect = zone.find(\"select\");\n\n              that._bindZones(value);\n\n              if (value && zoneSelect.children().length > 1) {\n                zone.show();\n              } else {\n                zone.hide();\n              }\n\n              that._value = that._zone[0].value;\n              that.trigger(CHANGE);\n            });\n          },\n          _zonePicker: function () {\n            var that = this;\n            that._zonePickerLabel = $(\"<li class='k-item k-listgroup-item k-zonepicker' style='display:none'>\" + \"<label class='k-label k-listgroup-form-row'>\" + \"<span class='k-item-title k-listgroup-form-field-label'></span>\" + \"<div class='k-listgroup-form-field-wrapper'></div>\" + \"</label>\" + \"</li>\");\n            that._zone = $('<select></select>').appendTo(that._zonePickerLabel.find(\"div\")).on(\"change\", function () {\n              that._value = this.value;\n              that.trigger(CHANGE);\n            });\n            this.wrapper.closest(\".k-item\").after(that._zonePickerLabel);\n\n            that._bindZones(that._zoneTitle.val());\n\n            that._value = that._zone[0].value;\n          },\n          destroy: function () {\n            Widget.fn.destroy.call(this);\n            kendo.destroy(this.wrapper);\n          },\n          value: function (value) {\n            var that = this;\n            var zonePicker = that._zone;\n            var other_zone = \"\";\n            var zone_value = \"\";\n            var zone;\n\n            if (value === undefined) {\n              return that._value;\n            }\n\n            zone = that._zonesQuery.filter({\n              field: \"zone\",\n              operator: \"eq\",\n              value: value\n            }).data[0];\n\n            if (zone) {\n              zone_value = zone.zone;\n              other_zone = zone.other_zone;\n            }\n\n            that._zoneTitle.val(other_zone);\n\n            that._bindZones(other_zone);\n\n            zonePicker.val(zone_value);\n            zone_value = zonePicker[0].value;\n\n            if (zone_value && zonePicker.children.length > 1) {\n              that._zonePickerLabel.show();\n            } else {\n              that._zonePickerLabel.hide();\n            }\n\n            that._value = zone_value;\n          }\n        });\n        ui.plugin(MobileTimezoneEditor);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1416:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.scheduler.recurrence\");\n    /***/\n  },\n\n  /***/\n  1417:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.scheduler.view\");\n    /***/\n  },\n\n  /***/\n  1418:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.scheduler.dayview\");\n    /***/\n  },\n\n  /***/\n  1419:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.scheduler.agendaview\");\n    /***/\n  },\n\n  /***/\n  1420:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.scheduler.monthview\");\n    /***/\n  },\n\n  /***/\n  1421:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.scheduler.timelineview\");\n    /***/\n  },\n\n  /***/\n  1422:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.scheduler.yearview\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}