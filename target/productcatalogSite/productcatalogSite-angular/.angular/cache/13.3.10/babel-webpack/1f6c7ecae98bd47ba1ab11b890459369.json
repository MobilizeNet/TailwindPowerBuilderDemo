{"ast":null,"code":"import ChartElement from './chart-element';\nimport Box from './box';\nimport { X, Y, WIDTH, HEIGHT, RIGHT, BOTTOM, CENTER } from '../common/constants';\nimport { round, setDefaultOptions } from '../common';\n\nclass FloatElement extends ChartElement {\n  constructor(options) {\n    super(options);\n\n    this._initDirection();\n  }\n\n  _initDirection() {\n    const options = this.options;\n\n    if (options.vertical) {\n      this.groupAxis = X;\n      this.elementAxis = Y;\n      this.groupSizeField = WIDTH;\n      this.elementSizeField = HEIGHT;\n      this.groupSpacing = options.spacing;\n      this.elementSpacing = options.vSpacing;\n    } else {\n      this.groupAxis = Y;\n      this.elementAxis = X;\n      this.groupSizeField = HEIGHT;\n      this.elementSizeField = WIDTH;\n      this.groupSpacing = options.vSpacing;\n      this.elementSpacing = options.spacing;\n    }\n  }\n\n  reflow(targetBox) {\n    this.box = targetBox.clone();\n    this.reflowChildren();\n  }\n\n  reflowChildren() {\n    const {\n      box,\n      elementAxis,\n      groupAxis,\n      elementSizeField,\n      groupSizeField\n    } = this;\n    const {\n      groups,\n      groupsSize,\n      maxGroupElementsSize\n    } = this.groupOptions();\n    const groupsCount = groups.length;\n    const groupsStart = box[groupAxis + 1] + this.alignStart(groupsSize, box[groupSizeField]());\n\n    if (groupsCount) {\n      let groupStart = groupsStart;\n\n      for (let groupIdx = 0; groupIdx < groupsCount; groupIdx++) {\n        let group = groups[groupIdx];\n        let groupElements = group.groupElements;\n        let elementStart = box[elementAxis + 1];\n        let groupElementsCount = groupElements.length;\n\n        for (let idx = 0; idx < groupElementsCount; idx++) {\n          let element = groupElements[idx];\n          let elementSize = this.elementSize(element);\n          let groupElementStart = groupStart + this.alignStart(elementSize[groupSizeField], group.groupSize);\n          let elementBox = new Box();\n          elementBox[groupAxis + 1] = groupElementStart;\n          elementBox[groupAxis + 2] = groupElementStart + elementSize[groupSizeField];\n          elementBox[elementAxis + 1] = elementStart;\n          elementBox[elementAxis + 2] = elementStart + elementSize[elementSizeField];\n          element.reflow(elementBox);\n          elementStart += elementSize[elementSizeField] + this.elementSpacing;\n        }\n\n        groupStart += group.groupSize + this.groupSpacing;\n      }\n\n      box[groupAxis + 1] = groupsStart;\n      box[groupAxis + 2] = groupsStart + groupsSize;\n      box[elementAxis + 2] = box[elementAxis + 1] + maxGroupElementsSize;\n    }\n  }\n\n  alignStart(size, maxSize) {\n    let start = 0;\n    const align = this.options.align;\n\n    if (align === RIGHT || align === BOTTOM) {\n      start = maxSize - size;\n    } else if (align === CENTER) {\n      start = (maxSize - size) / 2;\n    }\n\n    return start;\n  }\n\n  groupOptions() {\n    const {\n      box,\n      children,\n      elementSizeField,\n      groupSizeField,\n      elementSpacing,\n      groupSpacing\n    } = this;\n    const maxSize = round(box[elementSizeField]());\n    const childrenCount = children.length;\n    const groups = [];\n    let groupSize = 0;\n    let groupElementsSize = 0;\n    let groupsSize = 0;\n    let maxGroupElementsSize = 0;\n    let groupElements = [];\n\n    for (let idx = 0; idx < childrenCount; idx++) {\n      let element = children[idx];\n\n      if (!element.box) {\n        element.reflow(box);\n      }\n\n      let elementSize = this.elementSize(element);\n\n      if (this.options.wrap && round(groupElementsSize + elementSpacing + elementSize[elementSizeField]) > maxSize) {\n        groups.push({\n          groupElements: groupElements,\n          groupSize: groupSize,\n          groupElementsSize: groupElementsSize\n        });\n        maxGroupElementsSize = Math.max(maxGroupElementsSize, groupElementsSize);\n        groupsSize += groupSpacing + groupSize;\n        groupSize = 0;\n        groupElementsSize = 0;\n        groupElements = [];\n      }\n\n      groupSize = Math.max(groupSize, elementSize[groupSizeField]);\n\n      if (groupElementsSize > 0) {\n        groupElementsSize += elementSpacing;\n      }\n\n      groupElementsSize += elementSize[elementSizeField];\n      groupElements.push(element);\n    }\n\n    groups.push({\n      groupElements: groupElements,\n      groupSize: groupSize,\n      groupElementsSize: groupElementsSize\n    });\n    maxGroupElementsSize = Math.max(maxGroupElementsSize, groupElementsSize);\n    groupsSize += groupSize;\n    return {\n      groups: groups,\n      groupsSize: groupsSize,\n      maxGroupElementsSize: maxGroupElementsSize\n    };\n  }\n\n  elementSize(element) {\n    return {\n      width: element.box.width(),\n      height: element.box.height()\n    };\n  }\n\n  createVisual() {}\n\n}\n\nsetDefaultOptions(FloatElement, {\n  vertical: true,\n  wrap: true,\n  vSpacing: 0,\n  spacing: 0\n});\nexport default FloatElement;","map":null,"metadata":{},"sourceType":"module"}