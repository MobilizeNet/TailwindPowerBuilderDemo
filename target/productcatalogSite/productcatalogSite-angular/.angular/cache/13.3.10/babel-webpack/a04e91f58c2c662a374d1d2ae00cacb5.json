{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1488);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1051:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.core\");\n    /***/\n  },\n\n  /***/\n  1136:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.draganddrop\");\n    /***/\n  },\n\n  /***/\n  1217:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.resizable\");\n    /***/\n  },\n\n  /***/\n  1488:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1051), __webpack_require__(1136), __webpack_require__(1217)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"tilelayout\",\n        name: \"TileLayout\",\n        category: \"web\",\n        depends: [\"core\"],\n        features: [{\n          id: \"tilelayout-resizable\",\n          name: \"Resizable\",\n          description: \"Support for resizing\",\n          depends: [\"resizable\"]\n        }, {\n          id: \"tilelayout-reorderable\",\n          name: \"Reorderable\",\n          description: \"Support for reordering\",\n          depends: [\"draganddrop\"]\n        }]\n      };\n\n      (function ($) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            Widget = ui.Widget,\n            Draggable = ui.Draggable,\n            keys = kendo.keys,\n            selector = kendo.selectorFromClasses,\n            RESIZE = \"resize\",\n            REORDER = \"reorder\",\n            NS = \".kendoTileLayout\",\n            DOWNCURSOR = \"k-cursor-ns-resize\",\n            RIGHTCURSOR = \"k-cursor-ew-resize\",\n            DIAGONALCURSOR = \"k-cursor-nwse-resize\",\n            RTLDIAGONALCURSOR = \"k-cursor-nesw-resize\",\n            GRABCURSOR = \"k-cursor-grab\",\n            GRABBINGCURSOR = \"k-cursor-grabbing\",\n            MINIMALSPAN = 1,\n            CURSORCLASSES = \"k-cursor-nesw-resize k-cursor-nwse-resize k-cursor-ew-resize k-cursor-ns-resize\";\n        var tileLayoutStyles = {\n          wrapper: \"k-widget k-tilelayout\",\n          item: \"k-tilelayout-item k-card\",\n          itemHeader: \"k-tilelayout-item-header k-card-header\",\n          itemHeaderTitle: \"k-card-title\",\n          itemBody: \"k-tilelayout-item-body k-card-body\",\n          reorderHint: \"k-layout-item-hint k-layout-item-hint-reorder\",\n          resizeHint: \"k-layout-item-hint k-layout-item-hint-resize\"\n        };\n        var TileLayout = Widget.extend({\n          init: function (element, options) {\n            var that = this;\n            Widget.fn.init.call(that, element, options);\n            $.cssNumber.gridColumnStart = true;\n            $.cssNumber.gridColumnEnd = true;\n            $.cssNumber.gridRowStart = true;\n            $.cssNumber.gridRowEnd = true;\n            that.element = $(element).addClass(TileLayout.styles.wrapper);\n\n            that._setWrapperStyles();\n\n            that._initContainers();\n\n            that._resizable();\n\n            that._navigatable();\n\n            that._reorderable();\n          },\n          events: [RESIZE, REORDER],\n          options: {\n            name: \"TileLayout\",\n            columns: null,\n            gap: {\n              columns: 16,\n              rows: 16\n            },\n            containers: [],\n            resizable: false,\n            reorderable: false,\n            navigatable: false,\n            columnsWidth: \"1fr\",\n            rowsHeight: \"1fr\",\n            height: \"\",\n            width: \"\"\n          },\n          destroy: function () {\n            Widget.fn.destroy.call(this);\n\n            if (this._draggableInstance) {\n              this.element.find(\".k-tilelayout-item\").each(function () {\n                var item = $(this);\n\n                if (item.data(\"kendoDropTarget\")) {\n                  item.data(\"kendoDropTarget\").destroy();\n                }\n              });\n\n              this._draggableInstance.destroy();\n\n              this._draggableInstance = null;\n            }\n\n            if (this.resizable) {\n              this.resizable.destroy();\n              this.resizable = null;\n            }\n\n            if (this.resizeHandle) {\n              this.resizeHandle.off(NS).remove();\n              this.resizeHandle = null;\n            }\n\n            this.element.off(NS);\n          },\n          setOptions: function (options) {\n            this.destroy();\n            kendo.deepExtend(this.options, options);\n            this.element.empty();\n            this.init(this.element, this.options);\n          },\n          getOptions: function () {\n            var result = $.extend(true, {}, this.options);\n            result.containers = kendo.deepExtend([], this.items);\n            return result;\n          },\n          _initContainers: function () {\n            var that = this;\n            var containers = that.options.containers;\n            var containerElements = that.element.children();\n            var hasElements = !!containerElements.length;\n            var id;\n            var container;\n            var header;\n            var headerSettings;\n            var body;\n            var containerSettings;\n            var headerContent;\n            that.items = [];\n            that.itemsMap = {};\n\n            if (hasElements) {\n              containerElements.each(function (i, element) {\n                id = kendo.guid();\n                var current = $(element).addClass(TileLayout.styles.item).attr(\"id\", id);\n\n                that._addContainer(current, containers[i], i, id);\n              });\n            } else {\n              for (var i = 0; i < containers.length; i++) {\n                id = kendo.guid();\n                containerSettings = containers[i];\n                container = $(\"<div></div>\").addClass(TileLayout.styles.item).attr(\"id\", id);\n                headerSettings = containerSettings.header;\n\n                if (headerSettings && (headerSettings.template || headerSettings.text)) {\n                  header = $(\"<div></div>\").addClass(TileLayout.styles.itemHeader);\n\n                  if (that.options.reorderable) {\n                    header.addClass(GRABCURSOR);\n                  }\n\n                  headerContent = headerSettings.text ? \"<div class='\" + TileLayout.styles.itemHeaderTitle + \"'>\" + headerSettings.text + \"</div>\" : null;\n                  header.append(headerContent || kendo.template(headerSettings.template)({}));\n                  header.appendTo(container);\n                }\n\n                body = $(\"<div></div>\").addClass(TileLayout.styles.itemBody);\n\n                if (!containerSettings.bodyTemplate) {\n                  throw new Error(\"Having a bodyTemplate for the container is mandatory\");\n                }\n\n                body.append(kendo.template(containerSettings.bodyTemplate)({}));\n                body.appendTo(container);\n                container.appendTo(that.element);\n\n                that._addContainer(container, containerSettings, i, id);\n              }\n            }\n          },\n          _addContainer: function (element, item, index, id) {\n            var that = this;\n            item.order = typeof item.order == 'number' ? item.order : index;\n            element.attr(kendo.attr(\"index\"), item.order);\n            item.id = id;\n\n            that._setContainerCoordinates(element, item);\n\n            that.itemsMap[id] = item;\n            that.items.push(that.itemsMap[id]);\n          },\n          _setWrapperStyles: function () {\n            var that = this;\n            var options = that.options;\n            that.element.css({\n              \"grid-template-columns\": kendo.format(\"repeat({0}, minmax(0, {1}))\", options.columns, typeof options.columnsWidth === \"string\" ? options.columnsWidth : options.columnsWidth + \"px\"),\n              \"grid-auto-rows\": kendo.format(\"minmax(0, {0})\", typeof options.rowsHeight === \"string\" ? options.rowsHeight : options.rowsHeight + \"px\"),\n              \"column-gap\": options.gap.columns,\n              \"width\": typeof options.width === \"string\" ? options.width : options.width + \"px\",\n              \"height\": typeof options.height === \"string\" ? options.height : options.height + \"px\",\n              \"padding\": options.gap.rows + \"px \" + options.gap.columns + \"px \",\n              \"row-gap\": options.gap.rows\n            });\n          },\n          _setContainerCoordinates: function (element, settings) {\n            if (!settings) {\n              return;\n            }\n\n            element.css({\n              \"order\": settings.order,\n              \"grid-column-end\": kendo.format(\"span {0}\", settings.colSpan),\n              \"grid-row-end\": kendo.format(\"span {0}\", settings.rowSpan)\n            }).attr(kendo.attr(\"index\"), settings.order);\n          },\n          _updateContainers: function () {\n            var that = this;\n\n            for (var i = 0; i < that.items.length; i++) {\n              that._setContainerCoordinates(that.element.find(\"#\" + that.items[i].id), that.items[i]);\n            }\n          },\n          _createResizeHandle: function (container, side, down) {\n            var that = this;\n\n            if (that._isresizing) {\n              return;\n            }\n\n            if (that.resizeHandle && that.resizeHandle.data(\"div\")[0] !== container[0]) {\n              that.resizeHandle.off(NS).remove();\n              that.resizeHandle = null;\n            }\n\n            if (!that.resizeHandle) {\n              that.resizeHandle = $('<div class=\"k-resize-handle\"></div>');\n              that.resizeHandle.appendTo(container);\n            }\n\n            that._positionResizeHandle(container, side, down);\n          },\n          _positionResizeHandle: function (container, side, down) {\n            var that = this;\n            var leftBorderWidth = parseFloat(container.css(\"borderRightWidth\"));\n            var bottomBorderWidth = parseFloat(container.css(\"borderBottomWidth\"));\n            var containerHeight = container.height();\n            var containerWidth = container.width();\n            var top = down ? containerHeight - 6.5 - bottomBorderWidth : 0;\n            var left = side ? containerWidth - 4.5 - leftBorderWidth : 0;\n            var width = 9;\n            var height = 9;\n            var cursorClass;\n\n            if (side && down) {\n              height = width = 25;\n              top -= 12.5;\n              left -= 12.5;\n              cursorClass = kendo.support.isRtl(that.element) ? RTLDIAGONALCURSOR : DIAGONALCURSOR;\n            } else if (side && !down) {\n              height = containerHeight;\n              cursorClass = RIGHTCURSOR;\n            } else if (!side && down) {\n              width = containerWidth;\n              cursorClass = DOWNCURSOR;\n            }\n\n            that.resizeHandle.css({\n              top: top,\n              left: left,\n              height: height,\n              width: width\n            }).attr(\"side\", side).attr(\"down\", down).removeClass(CURSORCLASSES).addClass(cursorClass).data(\"div\", container).show();\n          },\n          _createResizeHint: function (container) {\n            var that = this;\n\n            if (that.hint) {\n              return;\n            }\n\n            var colSpan = container.css(\"grid-column-end\");\n            var rowSpan = container.css(\"grid-row-end\");\n            var order = container.css(\"order\");\n            that.hint = $(\"<div class='\" + TileLayout.styles.resizeHint + \"'></div>\").css({\n              \"order\": order,\n              \"grid-column-end\": colSpan,\n              \"grid-row-end\": rowSpan\n            }).insertAfter(container);\n          },\n          _removeResizeHint: function () {\n            if (this._isresizing) {\n              return;\n            }\n\n            if (this.hint) {\n              this.hint.remove();\n              this.hint = null;\n            }\n          },\n          _positionHint: function (colSpan, rowSpan) {\n            var that = this;\n\n            if (colSpan) {\n              that.hint.css(\"grid-column-end\", kendo.format(\"span {0}\", colSpan));\n            }\n\n            if (rowSpan) {\n              that.hint.css(\"grid-row-end\", kendo.format(\"span {0}\", rowSpan));\n            }\n          },\n          _removeAbsoluteStyles: function (container) {\n            container.css(\"position\", \"\");\n            container.css(\"left\", \"\");\n            container.css(\"top\", \"\");\n            container.css(\"width\", \"\");\n            container.css(\"height\", \"\");\n            container.css(\"z-index\", \"\");\n          },\n          _positionAbsolutely: function (container) {\n            if (container.css(\"position\") == \"absolute\") {\n              return;\n            }\n\n            var position = container.position();\n            var width = container.outerWidth();\n            var height = container.outerHeight();\n            container.css(\"position\", \"absolute\");\n            container.css(\"left\", position.left);\n            container.css(\"top\", position.top);\n            container.css(\"width\", width);\n            container.css(\"height\", height);\n            container.css(\"z-index\", 2);\n          },\n          _navigatable: function () {\n            if (!this.options.navigatable) {\n              return;\n            }\n\n            var that = this;\n            that.element.children().attr(\"tabindex\", 0);\n            that.element.on(\"keydown\" + NS, that, that._keyDown.bind(that));\n          },\n          _keyDown: function (e) {\n            var target = $(e.target);\n            var canHandle = false;\n\n            if (!target.is(\".k-tilelayout-item.k-card\")) {\n              return;\n            }\n\n            if (e.ctrlKey && e.keyCode == keys.LEFT) {\n              canHandle = true;\n\n              this._resizeItem(target, \"horizontal\", -1);\n            }\n\n            if (e.ctrlKey && e.keyCode == keys.RIGHT) {\n              canHandle = true;\n\n              this._resizeItem(target, \"horizontal\", 1);\n            }\n\n            if (e.ctrlKey && e.keyCode == keys.UP) {\n              canHandle = true;\n\n              this._resizeItem(target, \"vertical\", -1);\n            }\n\n            if (e.ctrlKey && e.keyCode == keys.DOWN) {\n              canHandle = true;\n\n              this._resizeItem(target, \"vertical\", 1);\n            }\n\n            if (e.shiftKey && e.keyCode == keys.LEFT) {\n              canHandle = true;\n\n              this._reorderItem(target, -1);\n            }\n\n            if (e.shiftKey && e.keyCode == keys.RIGHT) {\n              canHandle = true;\n\n              this._reorderItem(target, 1);\n            }\n\n            if (canHandle) {\n              e.preventDefault();\n            }\n          },\n          _resizeItem: function (item, dir, delta) {\n            var that = this;\n            var id = item.attr(\"id\");\n            var newSpan;\n            var maxSpan;\n\n            if (!that.options.resizable) {\n              return;\n            }\n\n            if (dir === \"horizontal\") {\n              newSpan = parseInt(item.css(\"grid-column-end\").replace('span', ''), 10) + delta;\n              maxSpan = that.element.css(\"grid-template-columns\").split(\" \").length;\n\n              if (maxSpan >= newSpan && newSpan > 0) {\n                that.itemsMap[id].colSpan = newSpan;\n                item.css({\n                  \"grid-column-end\": kendo.format(\"span {0}\", newSpan)\n                });\n              }\n            } else {\n              newSpan = parseInt(item.css(\"grid-row-end\").replace('span', ''), 10) + delta;\n              maxSpan = that.element.css(\"grid-template-rows\").split(\" \").length;\n\n              if (maxSpan >= newSpan && newSpan > 0) {\n                that.itemsMap[id].rowSpan = newSpan;\n                item.css({\n                  \"grid-row-end\": kendo.format(\"span {0}\", newSpan)\n                });\n              }\n            }\n          },\n          _reorderItem: function (item, newOrder) {\n            if (!this.options.reorderable) {\n              return;\n            }\n\n            var oldOrder = parseInt(item.css(\"order\"), 10);\n            var maxOrder = this.element.children().length;\n            newOrder = oldOrder + newOrder;\n\n            if (newOrder >= 0 && newOrder < maxOrder) {\n              var target = this.element.find(\"> [\" + kendo.attr(\"index\") + \"='\" + newOrder + \"']\");\n              this.itemsMap[item.attr(\"id\")].order = newOrder;\n              this.itemsMap[target.attr(\"id\")].order = oldOrder;\n\n              this._updateContainers();\n\n              this._updateDOM();\n\n              item.trigger(\"focus\"); // need to restore focus after DOM gets reordered\n            }\n          },\n          _sortContainers: function (containers) {\n            var indexAttr = kendo.attr(\"index\");\n            return containers.sort(function (a, b) {\n              a = $(a);\n              b = $(b);\n              var indexA = a.attr(indexAttr);\n              var indexB = b.attr(indexAttr);\n\n              if (indexA === undefined) {\n                indexA = $(a).index();\n              }\n\n              if (indexB === undefined) {\n                indexB = $(b).index();\n              }\n\n              indexA = parseInt(indexA, 10);\n              indexB = parseInt(indexB, 10);\n              return indexA > indexB ? 1 : indexA < indexB ? -1 : 0;\n            });\n          },\n          _updateDOM: function () {\n            var that = this;\n            var containers = that.element.children(\":visible\");\n            containers = that._sortContainers(containers);\n            containers.each(function () {\n              $(this).appendTo(that.element);\n            });\n          },\n          _resizable: function () {\n            var that = this;\n            var side;\n            var down;\n            var id;\n            var fractionWidth;\n            var fractionHeight;\n            var currentContainer;\n            var lastXLocation = 0;\n            var lastYLocation = 0;\n            var initialWidth = 0;\n            var initialHeight = 0;\n            var startColSpan = 0;\n            var startRowSpan = 0;\n            var itemsMaxSpace = 0;\n            var rowsCount;\n\n            if (that.options.resizable) {\n              that.element.on(\"mousemove\" + NS, selector(TileLayout.styles.item), function (e) {\n                var rightPosition;\n                var downPosition;\n                var container = $(this);\n                var rectPosition = container[0].getBoundingClientRect();\n                rightPosition = Math.abs(rectPosition.right - e.clientX) < 16;\n                downPosition = Math.abs(rectPosition.bottom - e.clientY) < 16;\n\n                if (rightPosition && downPosition) {\n                  that._createResizeHandle(container, true, true);\n                } else if (rightPosition) {\n                  that._createResizeHandle(container, true, false);\n                } else if (downPosition) {\n                  that._createResizeHandle(container, false, true);\n                }\n              });\n              that.resizable = new ui.Resizable(that.element, {\n                handle: \"div.k-tilelayout-item > .k-resize-handle\",\n                start: function (e) {\n                  var resizeHandle = $(e.currentTarget);\n                  currentContainer = resizeHandle.data(\"div\");\n                  id = currentContainer.attr(\"id\");\n                  side = resizeHandle.attr(\"side\");\n                  down = resizeHandle.attr(\"down\");\n                  rowsCount = that.element.css(\"grid-template-rows\").split(\" \").length;\n\n                  if (side) {\n                    fractionWidth = that._calculateFractionWidth();\n                    itemsMaxSpace = that._calculateRightEndSide(fractionWidth);\n                    lastXLocation = e.x.location;\n                    initialWidth = currentContainer.width();\n                    startColSpan = parseInt(currentContainer.css(\"grid-column-end\").replace('span', ''), 10);\n                  }\n\n                  if (down) {\n                    fractionHeight = (that.element[0].scrollHeight - (rowsCount + 1) * that.options.gap.rows) / rowsCount;\n                    lastYLocation = e.y.location;\n                    initialHeight = currentContainer.height();\n                    startRowSpan = parseInt(currentContainer.css(\"grid-row-end\").replace('span', ''), 10);\n                  }\n\n                  that._isresizing = true;\n                },\n                resize: function (e) {\n                  var hintColumns = 0;\n                  var hintRows = 0;\n                  var mouseDeltaX = 0;\n                  var mouseDeltaY = 0;\n                  var overflowsLayout;\n                  var isBeyondMinimum;\n                  var deltaFromStart = 0;\n                  var resizeRowsCount = 0;\n                  var resizeColumnsCount = 0;\n                  var clientRect = that.element[0].getBoundingClientRect();\n                  var height = that.element[0].style.height ? true : false;\n\n                  that._positionAbsolutely(currentContainer);\n\n                  that._createResizeHint(currentContainer);\n\n                  if (side == \"true\") {\n                    mouseDeltaX = e.x.location - lastXLocation;\n                    overflowsLayout = clientRect.left + itemsMaxSpace - window.scrollX - e.x.location < that.options.gap.columns;\n                    isBeyondMinimum = initialWidth + mouseDeltaX < fractionWidth;\n\n                    if (!overflowsLayout && !isBeyondMinimum) {\n                      resizeColumnsCount = mouseDeltaX / (fractionWidth + that.options.gap.columns);\n                      deltaFromStart = mouseDeltaX - Math.floor(resizeColumnsCount) * (fractionWidth + that.options.gap.columns);\n                      hintColumns = startColSpan + Math.floor(resizeColumnsCount) + (deltaFromStart >= fractionWidth / 2 ? 1 : 0);\n                      that.itemsMap[id].colSpan = Math.max(hintColumns, MINIMALSPAN);\n                    } else {\n                      mouseDeltaX = 0;\n                    }\n                  }\n\n                  if (down == \"true\") {\n                    mouseDeltaY = e.y.location - lastYLocation;\n                    overflowsLayout = clientRect.bottom + window.scrollY - e.y.location < that.options.gap.rows;\n                    isBeyondMinimum = initialHeight + mouseDeltaY <= fractionHeight;\n\n                    if (!isBeyondMinimum && (!overflowsLayout || !height)) {\n                      resizeRowsCount = mouseDeltaY / (fractionHeight + that.options.gap.rows);\n                      deltaFromStart = mouseDeltaY - Math.floor(resizeRowsCount) * (fractionHeight + that.options.gap.rows);\n                      hintRows = startRowSpan + Math.floor(resizeRowsCount) + (deltaFromStart >= fractionHeight / 2 ? 1 : 0);\n                      that.itemsMap[id].rowSpan = Math.max(hintRows, MINIMALSPAN);\n                    } else {\n                      mouseDeltaY = 0;\n                    }\n                  }\n\n                  that._positionHint(hintColumns, hintRows);\n\n                  that._positionResizeHandle(currentContainer, side == \"true\", down == \"true\");\n\n                  if (mouseDeltaY) {\n                    currentContainer.css(\"height\", initialHeight + mouseDeltaY);\n                  }\n\n                  if (mouseDeltaX) {\n                    currentContainer.css(\"width\", initialWidth + mouseDeltaX);\n                  }\n                },\n                resizeend: function () {\n                  that._isresizing = false;\n\n                  that._setContainerCoordinates(currentContainer, that.itemsMap[id]);\n\n                  that._removeAbsoluteStyles(currentContainer);\n\n                  that._removeResizeHint();\n\n                  that.trigger(RESIZE, {\n                    container: currentContainer\n                  });\n                }\n              });\n            }\n          },\n          _calculateFractionWidth: function () {\n            var that = this;\n            var container = that.element.children().first();\n            var colSpan = that.itemsMap[container.attr(\"id\")].colSpan;\n            var totalWidth = container.outerWidth();\n            return (totalWidth - (colSpan - 1) * that.options.gap.columns) / colSpan;\n          },\n          _calculateRightEndSide: function (fractionWidth) {\n            var that = this;\n            var columns = that.options.columns;\n            var columnGap = that.options.gap.columns;\n            return columns * (fractionWidth + columnGap) + columnGap;\n          },\n          _createDropHint: function (settings) {\n            this.dropHint = $(\"<div class='\" + TileLayout.styles.reorderHint + \"'></div>\").css({\n              \"order\": settings.order,\n              \"grid-column-end\": settings.columnEnd,\n              \"grid-row-end\": settings.rowEnd\n            }).attr(kendo.attr(\"index\"), settings.order).attr(\"direction\", settings.direction);\n          },\n          _insertDropHint: function (container, direction) {\n            if (direction == \"right\") {\n              this.dropHint.insertAfter(container);\n            } else {\n              this.dropHint.insertBefore(container);\n            }\n          },\n          _removeDropHint: function () {\n            if (this.dropHint) {\n              this.dropHint.remove();\n              this.dropHint = null;\n            }\n          },\n          _reorderable: function () {\n            if (!this.options.reorderable) {\n              return;\n            }\n\n            var that = this;\n            var element = that.element;\n            var originalElement;\n            var itemSelector = selector(TileLayout.styles.item);\n            var headerSelector = selector(TileLayout.styles.itemHeader);\n            var group = kendo.guid();\n            this._draggableInstance = new Draggable(this.element, {\n              filter: headerSelector,\n              autoScroll: true,\n              ignore: \":input\",\n              group: group,\n              hint: function (target) {\n                var item = target.closest(itemSelector);\n                var width = item.width();\n                var height = item.height();\n                var clone = item.clone();\n                clone.find(headerSelector).removeClass(GRABCURSOR).addClass(GRABBINGCURSOR);\n                return clone.width(width).height(height);\n              },\n              dragstart: function (e) {\n                originalElement = $(e.currentTarget).closest(itemSelector);\n              },\n              drag: function (e) {\n                var elementUnderCursor = kendo.elementUnderCursor(e);\n                var hint = e.sender.hint;\n                var dropContainer;\n                var containerBoundaries;\n                var pixelsToLeftBorder;\n                var pixelsToRightBorder;\n                var direction;\n\n                var draggedItem = that._draggableInstance.currentTarget.closest(itemSelector);\n\n                var newOrder;\n\n                if (containsOrEqualTo(hint[0], elementUnderCursor)) {\n                  hint.hide();\n                  elementUnderCursor = kendo.elementUnderCursor(e);\n\n                  if (!containsOrEqualTo(originalElement[0], elementUnderCursor)) {\n                    if (that.dropHint && that.dropHint[0] == elementUnderCursor[0]) {\n                      hint.show();\n                      return;\n                    }\n\n                    dropContainer = $(elementUnderCursor);\n                    dropContainer = dropContainer.hasClass(TileLayout.styles.item) ? dropContainer : dropContainer.closest(itemSelector);\n\n                    if (dropContainer.hasClass(TileLayout.styles.item)) {\n                      containerBoundaries = dropContainer[0].getBoundingClientRect();\n                      pixelsToLeftBorder = e.clientX - containerBoundaries.left;\n                      pixelsToRightBorder = containerBoundaries.right - e.clientX;\n                      direction = pixelsToLeftBorder > pixelsToRightBorder ? \"right\" : \"left\";\n                      newOrder = dropContainer.css(\"order\");\n\n                      if (that.dropHint && that.dropHint.attr(\"direction\") !== direction) {\n                        var clone = that.dropHint.clone();\n                        clone.css(\"order\", newOrder);\n                        that.dropHint.remove();\n                        that.dropHint = clone;\n\n                        that._insertDropHint(dropContainer, direction);\n\n                        that.dropHint.attr(\"direction\", direction).attr(kendo.attr(\"index\"), newOrder);\n                      } else if (!that.dropHint) {\n                        var futureContainer = direction == \"right\" ? dropContainer.next() : dropContainer.prev();\n\n                        if (futureContainer[0] != originalElement[0]) {\n                          that._createDropHint({\n                            order: newOrder,\n                            columnEnd: draggedItem.css(\"grid-column-end\"),\n                            rowEnd: draggedItem.css(\"grid-row-end\"),\n                            direction: direction\n                          });\n\n                          originalElement.hide();\n\n                          that._insertDropHint(dropContainer, direction);\n                        }\n                      }\n                    }\n                  }\n\n                  hint.show();\n                }\n              },\n              dragend: function (e) {\n                if (!that.dropHint) {\n                  e.sender.hint.remove();\n\n                  that._removeDropHint();\n\n                  return;\n                }\n\n                var newOrder = parseInt(that.dropHint.css(\"order\"), 10);\n                var container = e.currentTarget.closest(itemSelector);\n                var items = that.element.find(itemSelector);\n                var oldOrder = parseInt(container.css(\"order\"), 10);\n                var itemId = container.attr(\"id\");\n                var containers = that.element.children(\":visible\");\n                var start;\n                var end;\n                var item;\n                var direction;\n                containers = that._sortContainers(containers);\n                newOrder = containers.index(that.dropHint[0]);\n                end = Math.max(newOrder, oldOrder);\n                start = Math.min(newOrder, oldOrder);\n                that.itemsMap[itemId].order = newOrder;\n                direction = newOrder > oldOrder ? \"right\" : \"left\"; //this is direction of movement\n\n                if (direction == \"left\") {\n                  end--;\n                } else {\n                  start++;\n                }\n\n                for (var i = start; i <= end; i++) {\n                  item = items.filter(\"[\" + kendo.attr(\"index\") + \"='\" + i + \"']\");\n                  that.itemsMap[item.attr(\"id\")].order += direction == \"left\" ? 1 : -1;\n                }\n\n                container.show();\n\n                that._updateContainers();\n\n                e.sender.hint.remove();\n\n                that._removeDropHint();\n\n                if (that.options.navigatable) {\n                  that._updateDOM();\n                }\n\n                that.trigger(REORDER, {\n                  newIndex: newOrder,\n                  oldIndex: oldOrder,\n                  container: container\n                });\n              }\n            });\n            element.find(itemSelector).kendoDropTarget({\n              group: group,\n              dragenter: function (e) {\n                if (that._isresizing) {\n                  return;\n                }\n\n                var dropContainer = $(e.dropTarget);\n\n                var target = that._draggableInstance.currentTarget.closest(itemSelector);\n\n                var dropContainerBoundaries;\n                var pixelsToLeftBorder;\n                var pixelsToRightBorder;\n                var futureContainer;\n                var direction;\n\n                if (originalElement[0] != dropContainer[0]) {\n                  dropContainerBoundaries = dropContainer[0].getBoundingClientRect();\n                  pixelsToLeftBorder = e.clientX - dropContainerBoundaries.left;\n                  pixelsToRightBorder = dropContainerBoundaries.right - e.clientX;\n                  direction = pixelsToLeftBorder > pixelsToRightBorder ? \"right\" : \"left\";\n                  futureContainer = direction == \"right\" ? dropContainer.next() : dropContainer.prev(); //handle the case when the container will be shown over the original one\n\n                  if (futureContainer[0] == originalElement[0]) {\n                    return;\n                  }\n\n                  that._removeDropHint();\n\n                  originalElement.hide();\n\n                  that._createDropHint({\n                    order: dropContainer.css(\"order\"),\n                    columnEnd: target.css(\"grid-column-end\"),\n                    rowEnd: target.css(\"grid-row-end\"),\n                    direction: direction\n                  });\n\n                  originalElement.hide();\n\n                  that._insertDropHint(dropContainer, direction);\n                }\n              }\n            });\n          }\n        });\n\n        function containsOrEqualTo(parent, child) {\n          try {\n            return $.contains(parent, child) || parent == child;\n          } catch (e) {\n            return false;\n          }\n        }\n\n        ui.plugin(TileLayout);\n        $.extend(true, TileLayout, {\n          styles: tileLayoutStyles\n        });\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}