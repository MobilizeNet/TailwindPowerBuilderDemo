{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1741);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1047:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.form\");\n    /***/\n  },\n\n  /***/\n  1741:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1047)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            extend = $.extend,\n            Observable = kendo.Observable,\n            Form = kendo.ui.Form,\n            DOT = \".\",\n            NS = DOT + \"kendoTaskBoardPane\",\n            ACTION = \"action\",\n            CLICK = \"click\";\n        var TaskBoardPaneStyles = {\n          element: \"k-taskboard-pane\",\n          edit: \"k-taskboard-edit-pane\",\n          preview: \"k-taskboard-preview-pane\",\n          header: \"k-taskboard-pane-header\",\n          headerText: \"k-taskboard-pane-header-text\",\n          spacer: \"k-spacer\",\n          headerActions: \"k-taskboard-pane-header-actions\",\n          flatButton: \"k-button k-icon-button k-button-md k-rounded-md k-button-flat k-button-flat-base\",\n          content: \"k-taskboard-pane-content\",\n          footerActions: \"k-taskboard-pane-actions\",\n          footerActionButtons: \"k-actions k-hstack k-justify-content-end\",\n          footerButton: \"k-button k-button-md k-rounded-md k-button-solid\",\n          baseButton: \"k-button-solid-base\",\n          primaryButton: \"k-button-solid-primary\"\n        };\n        var TaskBoardPane = Observable.extend({\n          init: function (taskboard, options, dataItem, resources) {\n            var that = this;\n            that.taskboard = taskboard;\n            that._dataItem = dataItem;\n            that.resources = resources;\n            that.options = extend(true, {}, options);\n\n            that._render();\n\n            that.element.on(CLICK + NS, \"[\" + kendo.attr(\"command\") + \"]\", that._commandClick.bind(that));\n            Observable.fn.init.call(that);\n          },\n          headerTemplate: '<div class=\"#:styles.headerText#\">{0}</div>' + '<span class=\"#:styles.spacer#\"></span>' + '<div class=\"#:styles.headerActions#\">' + '<button class=\"#:styles.flatButton#\" title=\"#:messages.close#\" #:kendo.attr(\"command\")#=\"ClosePaneCommand\">' + '<span class=\"k-button-icon k-icon k-i-close\"></span>' + '</button>' + '</div>',\n          buttonTemplate: '<button class=\"#:styles.footerButton##if(primary){# #:styles.primaryButton# # } else { # #:styles.baseButton# # } #\" title=\"#:text#\" #:kendo.attr(\"command\")#=\"#:command#\" #:kendo.attr(\"options\")#=\"#:options#\">' + '<span class=\"k-button-icon #:icon# #:spriteCssClass#\"></span>' + '<span class=\"k-button-text\">#:text#</span>' + '</button>',\n          contentTemplate: '',\n          builtinButtons: {\n            \"edit\": {\n              name: \"edit\",\n              icon: \"edit\",\n              text: \"Edit\",\n              primary: true,\n              command: \"EditCardCommand\",\n              rules: \"isEditable\"\n            },\n            \"delete\": {\n              name: \"delete\",\n              icon: \"delete\",\n              text: \"Delete\",\n              command: \"DeleteCardCommand\",\n              rules: \"isEditable\"\n            },\n            \"cancel\": {\n              name: \"cancel\",\n              text: \"Cancel\",\n              command: \"ClosePaneCommand\"\n            },\n            \"saveChanges\": {\n              name: \"saveChanges\",\n              text: \"Save\",\n              command: \"SaveChangesCommand\",\n              primary: true,\n              rules: \"isEditable\"\n            },\n            \"create\": {\n              name: \"create\",\n              text: \"Create\",\n              command: \"SaveChangesCommand\",\n              primary: true,\n              rules: \"isEditable\"\n            }\n          },\n          defaultButtons: [],\n          _render: function () {\n            var that = this,\n                styles = TaskBoardPane.styles,\n                element = $(\"<div class='\" + styles.element + \"'></div>\"),\n                header = $(\"<div class='\" + styles.header + \"'></div>\"),\n                content = $(\"<div class='\" + styles.content + \"'></div>\"),\n                buttonsContainer = $(\"<div class='\" + styles.footerActions + \" \" + styles.footerActionButtons + \"'></div>\");\n            that.header = header.appendTo(element);\n\n            that._renderHeader();\n\n            that.content = content.appendTo(element);\n\n            that._renderContent();\n\n            that.buttonsContainer = buttonsContainer.appendTo(element);\n            that.buttonsContainer.append(that._buildButtonsHtml());\n            that.element = element;\n          },\n          _renderHeader: function () {\n            var that = this,\n                styles = TaskBoardPane.styles,\n                options = that.options,\n                messages = options.messages,\n                headerTemplate = options.headerTemplate ? options.headerTemplate : that._buildHeaderTemplate(),\n                resources = that._resources(that._dataItem);\n\n            that.header.append(kendo.template(headerTemplate)(extend(true, {}, {\n              styles: styles,\n              messages: messages,\n              resources: resources\n            }, that._dataItem)));\n          },\n          _buildHeaderTemplate: function () {\n            var that = this;\n            return kendo.format(that.headerTemplate, \"#:\" + that.options.dataTitleField + \"#\");\n          },\n          _renderContent: function () {\n            var that = this,\n                styles = TaskBoardPane.styles,\n                options = that.options,\n                messages = options.messages,\n                contentTemplate = options.template || that.contentTemplate,\n                resources = that._resources(that._dataItem);\n\n            that.content.append(kendo.template(contentTemplate)(extend(true, {}, {\n              styles: styles,\n              messages: messages,\n              resources: resources\n            }, that._dataItem)));\n          },\n          _resources: function (card) {\n            var that = this,\n                resources = {};\n\n            if (!that.resources) {\n              return resources;\n            }\n\n            for (var key in that.resources) {\n              var resource = that.resources[key];\n              var field = resource.field;\n              var cardResources = kendo.getter(field)(card);\n\n              if (!cardResources) {\n                continue;\n              }\n\n              if (!resource.multiple) {\n                cardResources = [cardResources];\n              }\n\n              var data = resource.dataSource.view();\n\n              for (var resourceIndex = 0; resourceIndex < cardResources.length; resourceIndex++) {\n                var cardResource = null;\n                var value = cardResources[resourceIndex];\n\n                if (!resource.valuePrimitive) {\n                  value = kendo.getter(resource.dataValueField)(value);\n                }\n\n                for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {\n                  if (data[dataIndex].get(resource.dataValueField) == value) {\n                    cardResource = data[dataIndex];\n                    break;\n                  }\n                }\n\n                if (cardResource !== null) {\n                  var resourceColor = kendo.getter(resource.dataColorField)(cardResource);\n                  var result = {\n                    field: resource.field,\n                    title: resource.title,\n                    name: resource.name,\n                    text: kendo.getter(resource.dataTextField)(cardResource),\n                    value: value,\n                    color: resourceColor\n                  };\n\n                  if (resource.multiple) {\n                    if (resources[resource.field]) {\n                      resources[resource.field].push(result);\n                    } else {\n                      resources[resource.field] = [result];\n                    }\n                  } else {\n                    resources[resource.field] = result;\n                  }\n                }\n              }\n            }\n\n            return resources;\n          },\n          _buildButtonsHtml: function () {\n            var that = this,\n                options = that.options,\n                messages = options.messages,\n                buttons = options.buttons || that.defaultButtons,\n                styles = TaskBoardPane.styles,\n                html = \"\";\n\n            for (var i = 0; i < buttons.length; i++) {\n              var button = buttons[i];\n              button = $.isPlainObject(button) && Object.keys(button).length === 1 && button.name ? button.name : button;\n\n              if (typeof button === \"string\") {\n                button = extend(true, {}, that.builtinButtons[button] || {\n                  spriteCssClass: button,\n                  command: button + \"Command\"\n                }, {\n                  text: messages[button] || button\n                });\n              } else if ($.isPlainObject(button) && button.name) {\n                button = extend(true, button, {\n                  text: messages[button.name]\n                });\n              }\n\n              if (!that._validateRules(button)) {\n                continue;\n              }\n\n              var icon = button.icon ? \"k-icon k-i-\" + button.icon : \"\";\n              button.icon = icon;\n              button.spriteCssClass = button.spriteCssClass || \"\";\n              html += kendo.template(that.buttonTemplate)(extend(true, {}, {\n                styles: styles,\n                messages: messages,\n                primary: false,\n                options: null\n              }, button));\n            }\n\n            return html;\n          },\n          _commandClick: function (ev) {\n            var that = this,\n                target = $(ev.target).closest(\"[\" + kendo.attr(\"command\") + \"]\"),\n                command = target.attr(kendo.attr(\"command\")),\n                options = target.attr(kendo.attr(\"options\")),\n                card = that._dataItem;\n            options = typeof options === \"string\" ? {\n              value: options\n            } : options;\n\n            if (!command) {\n              return;\n            }\n\n            that.trigger(ACTION, {\n              command: command,\n              options: extend({\n                card: card\n              }, options)\n            });\n          },\n          _validateRules: function (tool) {\n            var that = this,\n                states = that.options.states,\n                rules = tool.rules ? tool.rules.split(\";\") : [];\n\n            if (!rules.length) {\n              return true;\n            }\n\n            for (var i = 0; i < rules.length; i++) {\n              if (!states[rules[i]]) {\n                return false;\n              }\n            }\n\n            return true;\n          },\n          destroy: function () {\n            var that = this;\n            that.element.off(NS);\n            that.element.remove();\n          }\n        });\n        var TaskBoardPreviewPane = TaskBoardPane.extend({\n          init: function (taskboard, options, dataItem, resources) {\n            var that = this;\n            options = extend({}, options.previewPane, {\n              dataTitleField: options.dataTitleField,\n              dataDescriptionField: options.dataDescriptionField,\n              messages: options.messages,\n              states: options.states\n            });\n            that.contentTemplate = kendo.format(that._contentTemplate, options.dataDescriptionField);\n            TaskBoardPane.fn.init.call(that, taskboard, options, dataItem, resources);\n            that.element.addClass(TaskBoardPane.styles.preview);\n          },\n          _contentTemplate: \"<p>#:{0}#</p>\",\n          defaultButtons: [\"delete\", \"edit\"]\n        });\n        var TaskBoardEditPane = TaskBoardPane.extend({\n          init: function (taskboard, options, dataItem) {\n            var that = this;\n            options = extend({}, options.editable, {\n              dataTitleField: options.dataTitleField,\n              dataDescriptionField: options.dataDescriptionField,\n              messages: options.messages,\n              states: options.states\n            });\n            that.formSettings = extend(that.formSettings, {\n              items: [{\n                field: options.dataTitleField,\n                label: options.messages[options.dataTitleField]\n              }, {\n                field: options.dataDescriptionField,\n                label: options.messages[options.dataDescriptionField]\n              }]\n            }, options.form);\n            TaskBoardPane.fn.init.call(that, taskboard, options, dataItem);\n            that.element.addClass(TaskBoardPane.styles.edit);\n          },\n          defaultButtons: [\"cancel\", \"saveChanges\"],\n          formSettings: {\n            buttonsTemplate: \"\"\n          },\n          _buildHeaderTemplate: function () {\n            var that = this;\n            return kendo.format(that.headerTemplate, that.options.messages.edit + \" #:\" + that.options.dataTitleField + \"#\");\n          },\n          _renderContent: function () {\n            var that = this,\n                options = that.options,\n                styles = TaskBoardPane.styles,\n                formSettings = options.form || that.formSettings,\n                formLabelId = kendo.guid(),\n                element = $(\"<div></div>\").attr(\"role\", \"form\").attr(\"aria-labelledby\", formLabelId);\n            that.header.find(DOT + styles.headerText).attr(\"id\", formLabelId);\n            that.content.append(element);\n            that.form = new Form(element, extend({}, formSettings, {\n              formData: that._dataItem\n            }));\n            that.form.element.find(\"input\").trigger(\"focus\");\n          }\n        });\n        var TaskBoardCreatePane = TaskBoardEditPane.extend({\n          init: function (taskboard, options, dataItem, resources, column) {\n            var that = this,\n                columnStatusField = options.columnSettings.dataStatusField,\n                firstColumn = taskboard.columnsDataSource.view().at(0),\n                status = column ? column[columnStatusField] : firstColumn[columnStatusField],\n                clone = extend({}, dataItem);\n            dataItem = taskboard.dataSource.add();\n            dataItem.set(options.dataStatusField, status);\n\n            for (var key in clone) {\n              dataItem.set(key, clone[key]);\n            }\n\n            TaskBoardEditPane.fn.init.call(that, taskboard, options, dataItem, resources);\n          },\n          _buildHeaderTemplate: function () {\n            var that = this;\n            return kendo.format(that.headerTemplate, that.options.messages.createNewCard);\n          },\n          defaultButtons: [\"cancel\", \"create\"]\n        });\n        extend(kendo.ui.taskboard, {\n          Pane: TaskBoardPane,\n          panes: {\n            Preview: TaskBoardPreviewPane,\n            Edit: TaskBoardEditPane,\n            Create: TaskBoardCreatePane\n          }\n        });\n        extend(true, kendo.ui.taskboard.Pane, {\n          styles: TaskBoardPaneStyles\n        });\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}