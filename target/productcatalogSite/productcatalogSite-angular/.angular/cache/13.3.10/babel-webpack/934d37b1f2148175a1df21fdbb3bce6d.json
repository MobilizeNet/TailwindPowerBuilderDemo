{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1107);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1055:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.dataviz\");\n    /***/\n  },\n\n  /***/\n  1107:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1055), __webpack_require__(1108)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"circularprogressBar\",\n        name: \"CircularProgressBar\",\n        category: \"web\",\n        description: \"The Circular ProgressBar component represents an SVG loader\",\n        depends: [\"core\"]\n      };\n\n      (function ($, undefined) {\n        window.kendo.dataviz = window.kendo.dataviz || {};\n        var dataviz = kendo.dataviz;\n        var interpolateValue = dataviz.interpolateValue;\n        var drawing = kendo.drawing;\n        var ui = kendo.ui;\n        var Widget = ui.Widget;\n        var Surface = drawing.Surface;\n        var geometry = kendo.geometry;\n        var Animation = drawing.Animation;\n        var Arc = drawing.Arc;\n        var limitValue = dataviz.limitValue;\n        var round = dataviz.round;\n        var DrawingGroup = drawing.Group;\n        var DEFAULT_HEIGHT = 200;\n        var GEO_ARC_ADJUST_ANGLE = 180;\n        var MINVALUE = 0;\n        var MAXVALUE = 100;\n        var DEFAULT_MARGIN = 5;\n        var ANGULAR_SPEED = 150;\n        var DEFAULT_WIDTH = 200;\n        var MAX_DURATION = 800;\n        var announceElement = '<span aria-live=\"polite\" class=\"k-sr-only k-progress-announce\"></span>';\n        var PointerAnimation = Animation.extend({\n          init: function (element, options) {\n            Animation.fn.init.call(this, element, options);\n            var animationOptions = this.options;\n            var color = options.endColor;\n            var startColor = options.startColor;\n            var duration = Math.abs(animationOptions.newAngle - animationOptions.oldAngle) / animationOptions.duration * 1000;\n            animationOptions.duration = limitValue(duration, ANGULAR_SPEED, MAX_DURATION);\n            this.element = element;\n\n            if (startColor !== color) {\n              this.startColor = new kendo.Color(startColor);\n              this.color = new kendo.Color(color);\n            }\n          },\n          step: function (pos) {\n            var that = this;\n            var options = that.options;\n            var startColor = that.startColor;\n            var color = that.color;\n            var angle = interpolateValue(options.oldAngle, options.newAngle, pos);\n            this.element.geometry().setEndAngle(angle);\n\n            if (color) {\n              var r = round(interpolateValue(startColor.r, color.r, pos));\n              var g = round(interpolateValue(startColor.g, color.g, pos));\n              var b = round(interpolateValue(startColor.b, color.b, pos));\n              this.element.stroke(new kendo.Color(r, g, b).toHex());\n            }\n          }\n        });\n        var CircularProgressBar = Widget.extend({\n          init: function (element, userOptions) {\n            var that = this;\n            Widget.fn.init.call(that, element, userOptions);\n            this.theme = themeOptions(this.options);\n            this._value = this.options.value;\n            this.element.addClass(\"k-gauge\");\n            this.redraw();\n\n            this._centerTemplate();\n\n            this._aria();\n          },\n          options: {\n            name: \"CircularProgressBar\",\n            ariaRole: false,\n            theme: \"default\",\n            centerTemplate: '',\n            color: \"\",\n            colors: [],\n            transitions: true,\n            pointerWidth: 5,\n            indeterminate: false,\n            label: null,\n            labelId: null\n          },\n          events: [],\n          value: function (value) {\n            var that = this;\n\n            if (value === undefined) {\n              return that._value;\n            }\n\n            value = that._restrictValue(value);\n\n            that._centerSvgElements();\n\n            that._pointerChange(that._value, value);\n\n            that._value = value;\n\n            that._centerTemplate();\n\n            that._updateProgress();\n          },\n          redraw: function () {\n            this._initSurface();\n\n            this._buildVisual();\n\n            this._draw();\n          },\n          resize: function () {\n            var transitions = this.options.transitions;\n            this.options.transitions = false;\n\n            this._initSurface();\n\n            this._buildVisual();\n\n            this._draw();\n\n            this._centerTemplate();\n\n            this.options.transitions = transitions;\n          },\n          destroy: function () {\n            var that = this;\n\n            if (that.announce) {\n              that.announce.remove();\n            }\n\n            Widget.fn.destroy.call(that);\n          },\n          _aria: function () {\n            var that = this,\n                options = that.options,\n                value = that.value() || 0,\n                wrapper = that.element;\n\n            if (!options.ariaRole) {\n              return;\n            }\n\n            wrapper.attr({\n              \"role\": \"progressbar\"\n            });\n\n            if (!options.indeterminate) {\n              wrapper.attr({\n                \"aria-valuemin\": 0,\n                \"aria-valuemax\": 100\n              });\n            }\n\n            if (!!options.labelId) {\n              wrapper.attr(\"aria-labelledby\", options.labelId);\n            } else if (!!options.label) {\n              wrapper.attr(\"aria-label\", options.label);\n            }\n\n            that.announce = $(announceElement);\n            that.announce.appendTo($(\"body\"));\n\n            if (!options.indeterminate) {\n              wrapper.attr(\"aria-valuenow\", value);\n              that.announce.text(value + \"%\");\n            } else {\n              that.announce.text(\"Loading...\");\n            }\n          },\n          _restrictValue: function (value) {\n            if (value < MINVALUE) {\n              return MINVALUE;\n            }\n\n            if (value > MAXVALUE) {\n              return MAXVALUE;\n            }\n\n            return value;\n          },\n          _updateProgress: function () {\n            var that = this;\n            var options = that.options;\n            var value = that.value() || 0;\n\n            if (options.ariaRole && !options.indeterminate) {\n              that.element.attr(\"aria-valuenow\", value);\n\n              if (that.announce) {\n                that.announce.text(value + \"%\");\n              }\n            }\n          },\n          _centerSvgElements: function () {\n            var center = this._getCenter();\n\n            if (this.circle._geometry.center.x !== center.x || this.circle._geometry.center.y !== center.y) {\n              this.circle._geometry.center.x = center.x;\n              this.circle._geometry.center.y = center.y;\n              this.arc._geometry.center.x = center.x;\n              this.arc._geometry.center.y = center.y;\n              this.circle.geometryChange();\n              this.arc.geometryChange();\n            }\n          },\n          _centerTemplate: function () {\n            var position;\n            var template;\n            var centerElement;\n\n            if (this.options.centerTemplate) {\n              template = kendo.template(this.options.centerTemplate);\n              centerElement = this._getCenterElement();\n              centerElement.html(template({\n                color: this._getColor(this.value()),\n                value: this.value()\n              }));\n              position = this._centerTemplatePosition(centerElement.width(), centerElement.height());\n              centerElement.css(position);\n            } else if (this._centerElement) {\n              this._centerElement.remove();\n\n              this._centerElement = null;\n            }\n          },\n          _getCenterElement: function () {\n            var centerElement = this._centerElement;\n\n            if (!centerElement) {\n              centerElement = this._centerElement = $('<div></div>').addClass('k-arcgauge-label');\n              this.element.append(centerElement);\n            }\n\n            return centerElement;\n          },\n          _pointerChange: function (oldValue, newValue) {\n            var animation;\n\n            if (this.options.transitions) {\n              animation = new PointerAnimation(this.arc, {\n                oldAngle: this._slotAngle(oldValue),\n                startColor: this._getColor(oldValue),\n                newAngle: this._slotAngle(newValue),\n                endColor: this._getColor(newValue)\n              });\n              animation.play();\n            } else {\n              this.arc.stroke(this._getColor(newValue));\n              this.arc.geometry().setEndAngle(this._slotAngle(newValue));\n            }\n          },\n          _draw: function () {\n            var arc;\n            var center;\n            var animation;\n            var surface = this.surface;\n            surface.clear();\n            surface.draw(this._visuals);\n\n            if (this.options.indeterminate) {\n              arc = surface.element.find(\"path\");\n              center = this._getCenter();\n              arc[0].innerHTML = kendo.format('<animateTransform attributeName=\"transform\" type=\"rotate\" from=\"0 {0} {1}\" to=\"360 {0} {1}\" dur=\"1s\" repeatCount=\"indefinite\" />', center.x, center.y);\n            } else if (this.options.transitions) {\n              animation = new PointerAnimation(this.arc, {\n                oldAngle: this._slotAngle(0),\n                startColor: this._getColor(0),\n                newAngle: this._slotAngle(this.value()),\n                endColor: this._getColor(this.value())\n              });\n              animation.play();\n            }\n          },\n          _buildVisual: function () {\n            var visuals = this._visuals = new DrawingGroup();\n\n            var center = this._getCenter();\n\n            var color = this._getColor(this.value()) || this.theme.pointer.color;\n            var radius = Math.min(center.x, center.y) - DEFAULT_MARGIN - this.options.pointerWidth;\n            var circleGeometry = new geometry.Circle([center.x, center.y], radius + this.options.pointerWidth / 2);\n            var circle = this.circle = new drawing.Circle(circleGeometry, {\n              fill: {\n                color: \"none\"\n              },\n              stroke: {\n                color: this.theme.scale.rangePlaceholderColor,\n                width: this.options.pointerWidth\n              }\n            });\n            visuals.append(circle);\n\n            if (this.options.indeterminate) {\n              this.arc = this._createArc(360, radius, center, color);\n            } else {\n              this.arc = this._createArc(this._slotAngle(this.value()), radius, center, color);\n            }\n\n            visuals.append(this.arc);\n          },\n          _slotAngle: function (value) {\n            var result;\n            result = (value - MINVALUE) / MAXVALUE * 360 + 90;\n            return result + GEO_ARC_ADJUST_ANGLE;\n          },\n          _getColor: function (value) {\n            var options = this.options;\n            var colors = options.colors;\n            var color = options.color;\n            var currentValue = dataviz.isNumber(value) ? value : 0;\n\n            if (colors) {\n              for (var idx = 0; idx < colors.length; idx++) {\n                var range = colors[idx];\n                var rangeColor = range.color;\n                var from = range.from;\n\n                if (from === void 0) {\n                  from = 0;\n                }\n\n                var to = range.to;\n\n                if (to === void 0) {\n                  to = 100;\n                }\n\n                if (from <= currentValue && currentValue <= to) {\n                  return rangeColor;\n                }\n              }\n            }\n\n            return color;\n          },\n          _createArc: function (endAngle, rangeRadius, center, color) {\n            var rangeSize = this.options.pointerWidth;\n            var rangeGeom = new geometry.Arc([center.x, center.y], {\n              radiusX: rangeRadius + rangeSize / 2,\n              radiusY: rangeRadius + rangeSize / 2,\n              startAngle: 270,\n              endAngle: endAngle\n            });\n            return new Arc(rangeGeom, {\n              stroke: {\n                width: rangeSize,\n                color: this.options.color || color,\n                opacity: this.options.opacity\n              }\n            });\n          },\n          _centerTemplatePosition: function (width, height) {\n            var size = this._getSize();\n\n            var center = this._getCenter();\n\n            var left = center.x - width / 2;\n            var top = center.y - height / 2;\n            var right;\n            var bottom;\n\n            if (width < size.width) {\n              right = left + width;\n              left = Math.max(left, 0);\n\n              if (right > size.width) {\n                left -= right - size.width;\n              }\n            }\n\n            if (height < size.height) {\n              bottom = top + height;\n\n              if (bottom > size.height) {\n                top -= bottom - size.height;\n              }\n            }\n\n            return {\n              left: left,\n              top: top\n            };\n          },\n          _getCenter: function () {\n            var size = this._getSize();\n\n            return new dataviz.Point(size.width / 2, size.height / 2);\n          },\n          _getSize: function () {\n            var element = this.element;\n            var defaultSize = {\n              width: DEFAULT_WIDTH,\n              height: DEFAULT_HEIGHT\n            };\n            var width = element[0].offsetWidth;\n            var height = element[0].offsetHeight;\n\n            if (!width) {\n              width = defaultSize.width;\n            }\n\n            if (!height) {\n              height = defaultSize.height;\n            }\n\n            return {\n              width: width,\n              height: height\n            };\n          },\n          _surfaceElement: function () {\n            if (!this.surfaceElement) {\n              this.surfaceElement = document.createElement('div');\n              this.element[0].appendChild(this.surfaceElement);\n            }\n\n            return this.surfaceElement;\n          },\n          _initSurface: function () {\n            var that = this;\n            var options = that.options;\n            var surface = that.surface;\n\n            var element = this._surfaceElement();\n\n            var size = this._getSize();\n\n            dataviz.elementSize(element, size);\n\n            if (!surface) {\n              this.surface = Surface.create(element, {\n                type: options.renderAs\n              });\n            } else {\n              this.surface.clear();\n              this.surface.resize();\n            }\n          }\n        });\n\n        function themeOptions(options) {\n          var themes = dataviz.ui.themes || {};\n          var themeName = options.theme || \"\";\n          var lowerName = themeName.toLowerCase();\n\n          if (dataviz.SASS_THEMES.indexOf(lowerName) != -1) {\n            return dataviz.autoTheme().gauge;\n          }\n\n          return (themes[themeName] || themes[lowerName] || {}).gauge;\n        }\n\n        ui.plugin(CircularProgressBar);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1108:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.dataviz.themes\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}