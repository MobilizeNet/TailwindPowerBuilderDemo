{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1736);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  20:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.core\");\n    /***/\n  },\n\n  /***/\n  1736:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(20)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            Observable = kendo.Observable,\n            extend = $.extend;\n        var TaskBoardCardStyles = {\n          element: \"k-taskboard-card\",\n          card: \"k-card\",\n          header: \"k-card-header\",\n          hbox: \"k-hbox\",\n          title: \"k-card-title\",\n          link: \"k-link\",\n          spacer: \"k-spacer\",\n          button: \"k-button\",\n          cardMenuButton: \"k-taskboard-card-menu-button k-icon-button\",\n          flatButton: \"k-button-md k-rounded-md k-button-flat k-button-flat-base\",\n          body: \"k-card-body\",\n          actionsIcon: \"k-icon k-i-more-vertical\",\n          moveCursor: \"k-cursor-move\",\n          categoryBorder: \"k-taskboard-card-category\",\n          headerActions: \"k-card-header-actions\",\n          disabled: \"k-state-disabled\"\n        };\n        var TaskBoardCard = Observable.extend({\n          init: function (options, dataItem, resources) {\n            var that = this;\n            that._dataItem = dataItem;\n            that.resources = resources;\n            that.options = extend(true, {}, options);\n\n            that._render();\n\n            Observable.fn.init.call(that);\n          },\n          headerTemplate: '<div class=\"#:styles.header# #:styles.hbox#\">' + '<a class=\"#:styles.title# #:styles.link#\" href=\"\\\\#\" #if(selectable){##:kendo.attr(\"command\")#=\"SelectCardCommand\"#}#>#:{0}#</a>' + '<span class=\"#:styles.spacer#\"></span>' + '#=cardMenuButton#' + '</div>',\n          bodyTemplate: '<div class=\"#:styles.body#\"><p>#:{0}#</p></div>',\n          cardMenuButtonTemplate: '<div class=\"#:styles.headerActions#\"><button aria-label=\"menu\" class=\"#:styles.button# #:styles.flatButton# #:styles.cardMenuButton#\">' + '<span class=\"k-button-icon #:styles.actionsIcon#\"></span>' + '</button></div>',\n          _render: function () {\n            var that = this,\n                options = that.options,\n                styles = TaskBoardCard.styles,\n                template = options.template || that._buildTemplate(),\n                element = $(\"<div class='\" + styles.element + \" \" + styles.card + \" \" + styles.moveCursor + \"'></div>\"),\n                cardMenuButtonTemplate = options.cardMenu ? that.cardMenuButtonTemplate : \"\",\n                resources = that._resources(that._dataItem),\n                borderDir = options.states.isRtl ? \"borderRightColor\" : \"borderLeftColor\",\n                categoryColor;\n\n            element.attr(kendo.attr(\"uid\"), that._dataItem.uid).attr(\"aria-disabled\", !options.states.isDisabled).attr(\"role\", \"listitem\").toggleClass(styles.disabled, options.states.isDisabled);\n            categoryColor = resources[options.dataCategoryField] && resources[options.dataCategoryField].color || that._dataItem.get(options.dataCategoryField);\n\n            if (categoryColor) {\n              element.addClass(styles.categoryBorder).css(borderDir, categoryColor);\n            }\n\n            element.append(kendo.template(template)(extend(true, {}, {\n              styles: styles,\n              cardMenuButton: kendo.template(cardMenuButtonTemplate)({\n                styles: styles\n              }),\n              selectable: options.states.isSelectable,\n              resources: resources\n            }, that._dataItem)));\n            that.element = element;\n          },\n          _resources: function (card) {\n            var that = this,\n                resources = {};\n\n            if (!that.resources) {\n              return resources;\n            }\n\n            for (var key in that.resources) {\n              var resource = that.resources[key];\n              var field = resource.field;\n              var cardResources = kendo.getter(field)(card);\n\n              if (!cardResources) {\n                continue;\n              }\n\n              if (!resource.multiple) {\n                cardResources = [cardResources];\n              }\n\n              var data = resource.dataSource.view();\n\n              for (var resourceIndex = 0; resourceIndex < cardResources.length; resourceIndex++) {\n                var cardResource = null;\n                var value = cardResources[resourceIndex];\n\n                if (!resource.valuePrimitive) {\n                  value = kendo.getter(resource.dataValueField)(value);\n                }\n\n                for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {\n                  if (data[dataIndex].get(resource.dataValueField) == value) {\n                    cardResource = data[dataIndex];\n                    break;\n                  }\n                }\n\n                if (cardResource !== null) {\n                  var resourceColor = kendo.getter(resource.dataColorField)(cardResource);\n                  var result = {\n                    field: resource.field,\n                    title: resource.title,\n                    name: resource.name,\n                    text: kendo.getter(resource.dataTextField)(cardResource),\n                    value: value,\n                    color: resourceColor\n                  };\n\n                  if (resource.multiple) {\n                    if (resources[resource.field]) {\n                      resources[resource.field].push(result);\n                    } else {\n                      resources[resource.field] = [result];\n                    }\n                  } else {\n                    resources[resource.field] = result;\n                  }\n                }\n              }\n            }\n\n            return resources;\n          },\n          _buildTemplate: function () {\n            var that = this,\n                options = that.options,\n                headerTemplate = kendo.format(that.headerTemplate, options.dataTitleField),\n                bodyTemplate = kendo.format(that.bodyTemplate, options.dataDescriptionField);\n            return headerTemplate + bodyTemplate;\n          }\n        });\n        extend(kendo.ui.taskboard, {\n          Card: TaskBoardCard\n        });\n        extend(true, kendo.ui.taskboard.Card, {\n          styles: TaskBoardCardStyles\n        });\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}