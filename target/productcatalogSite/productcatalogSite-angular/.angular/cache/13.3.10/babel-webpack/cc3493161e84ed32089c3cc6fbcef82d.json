{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1370);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1079:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.list\");\n    /***/\n  },\n\n  /***/\n  1080:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.mobile.scroller\");\n    /***/\n  },\n\n  /***/\n  1081:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.virtuallist\");\n    /***/\n  },\n\n  /***/\n  1089:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.html.button\");\n    /***/\n  },\n\n  /***/\n  1213:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.html.chip\");\n    /***/\n  },\n\n  /***/\n  1214:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.html.chiplist\");\n    /***/\n  },\n\n  /***/\n  1370:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1079), __webpack_require__(1080), __webpack_require__(1081), __webpack_require__(1213), __webpack_require__(1214), __webpack_require__(1089)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"multiselect\",\n        name: \"MultiSelect\",\n        category: \"web\",\n        description: \"The MultiSelect widget allows the selection from pre-defined values.\",\n        depends: [\"list\", \"html.chip\", \"html.chiplist\", \"html.button\"],\n        features: [{\n          id: \"mobile-scroller\",\n          name: \"Mobile scroller\",\n          description: \"Support for kinetic scrolling in mobile device\",\n          depends: [\"mobile.scroller\"]\n        }, {\n          id: \"virtualization\",\n          name: \"VirtualList\",\n          description: \"Support for virtualization\",\n          depends: [\"virtuallist\"]\n        }]\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            ui = kendo.ui,\n            List = ui.List,\n            html = kendo.html,\n            keys = $.extend({\n          A: 65\n        }, kendo.keys),\n            activeElement = kendo._activeElement,\n            ObservableArray = kendo.data.ObservableArray,\n            ID = \"id\",\n            CHIP = \".k-chip\",\n            ACCEPT = \"accept\",\n            FILTER = \"filter\",\n            REBIND = \"rebind\",\n            OPEN = \"open\",\n            CLOSE = \"close\",\n            CHANGE = \"change\",\n            PROGRESS = \"progress\",\n            SELECT = \"select\",\n            DESELECT = \"deselect\",\n            ARIA_DISABLED = \"aria-disabled\",\n            ARIA_READONLY = \"aria-readonly\",\n            FOCUSEDCLASS = \"k-focus\",\n            SELECTEDCLASS = \"k-selected\",\n            HIDDENCLASS = \"k-hidden\",\n            HOVERCLASS = \"k-hover\",\n            STATEDISABLED = \"k-disabled\",\n            NOCLICKCLASS = \"k-no-click\",\n            DISABLED = \"disabled\",\n            READONLY = \"readonly\",\n            AUTOCOMPLETEVALUE = \"off\",\n            ns = \".kendoMultiSelect\",\n            CLICK = \"click\" + ns,\n            KEYDOWN = \"keydown\" + ns,\n            MOUSEENTER = \"mouseenter\" + ns,\n            MOUSELEAVE = \"mouseleave\" + ns,\n            HOVEREVENTS = MOUSEENTER + \" \" + MOUSELEAVE,\n            quotRegExp = /\"/g,\n            isArray = Array.isArray,\n            styles = [\"font-family\", \"font-size\", \"font-stretch\", \"font-style\", \"font-weight\", \"letter-spacing\", \"text-transform\", \"line-height\"];\n        var MultiSelect = List.extend({\n          init: function (element, options) {\n            var that = this,\n                id,\n                disabled;\n            that.ns = ns;\n            List.fn.init.call(that, element, options);\n            that._optionsMap = {};\n            that._customOptions = {};\n\n            that._wrapper();\n\n            that._tagList();\n\n            that._input();\n\n            that._textContainer();\n\n            that._loader();\n\n            that._clearButton();\n\n            that._arrowButton();\n\n            that._tabindex(that.input);\n\n            element = that.element.attr(\"multiple\", \"multiple\").hide();\n            options = that.options;\n\n            if (!options.placeholder) {\n              options.placeholder = element.data(\"placeholder\");\n            }\n\n            id = element.attr(ID);\n\n            if (id) {\n              that._tagID = id + \"_tag_active\";\n              id = id + \"_taglist\";\n              that.tagList.attr(ID, id);\n              that.input.attr(\"aria-describedby\", id);\n            }\n\n            that._initialOpen = true;\n\n            that._aria();\n\n            that._ariaSetLive();\n\n            that._dataSource();\n\n            that._ignoreCase();\n\n            that._popup();\n\n            that._tagTemplate();\n\n            that.requireValueMapper(that.options);\n\n            that._initList();\n\n            that._reset();\n\n            that._enable();\n\n            that._placeholder();\n\n            if (options.autoBind) {\n              that.dataSource.fetch();\n            } else if (options.value) {\n              that._preselect(options.value);\n            }\n\n            disabled = $(that.element).parents(\"fieldset\").is(':disabled');\n\n            if (disabled) {\n              that.enable(false);\n            }\n\n            kendo.notify(that);\n\n            that._toggleCloseVisibility();\n\n            that._applyCssClasses();\n          },\n          options: {\n            name: \"MultiSelect\",\n            tagMode: \"multiple\",\n            enabled: true,\n            autoBind: true,\n            autoClose: true,\n            highlightFirst: true,\n            dataTextField: \"\",\n            dataValueField: \"\",\n            filter: \"startswith\",\n            ignoreCase: true,\n            minLength: 1,\n            messages: {\n              \"singleTag\": \"item(s) selected\",\n              \"clear\": \"clear\",\n              \"deleteTag\": \"delete\",\n              \"noData\": \"No data found.\",\n              \"downArrow\": \"select\"\n            },\n            enforceMinLength: false,\n            delay: 100,\n            value: null,\n            maxSelectedItems: null,\n            placeholder: \"\",\n            height: 200,\n            animation: {},\n            virtual: false,\n            itemTemplate: \"\",\n            tagTemplate: \"\",\n            groupTemplate: \"#:data#\",\n            fixedGroupTemplate: \"#:data#\",\n            clearButton: true,\n            autoWidth: false,\n            popup: null,\n            size: \"medium\",\n            fillMode: \"solid\",\n            rounded: \"medium\"\n          },\n          events: [OPEN, CLOSE, CHANGE, SELECT, DESELECT, \"filtering\", \"dataBinding\", \"dataBound\"],\n          setDataSource: function (dataSource) {\n            this.options.dataSource = dataSource;\n            this._state = \"\";\n\n            this._dataSource();\n\n            this.persistTagList = false;\n            this.listView.setDataSource(this.dataSource);\n\n            if (this.options.autoBind) {\n              this.dataSource.fetch();\n            }\n          },\n          setOptions: function (options) {\n            var listOptions = this._listOptions(options);\n\n            List.fn.setOptions.call(this, options);\n            this.listView.setOptions(listOptions);\n\n            this._accessors();\n\n            this._aria();\n\n            this._tagTemplate();\n\n            this._placeholder();\n\n            this._clearButton();\n\n            this._arrowButton();\n          },\n          currentTag: function (candidate) {\n            var that = this;\n\n            if (candidate !== undefined) {\n              if (that._currentTag) {\n                that._currentTag.removeClass(FOCUSEDCLASS).removeAttr(ID);\n\n                that._currentTag.find(\".k-chip-action\").attr(\"aria-hidden\", true);\n\n                that.input.removeAttr(\"aria-activedescendant\");\n              }\n\n              if (candidate) {\n                candidate.addClass(FOCUSEDCLASS).attr(ID, that._tagID);\n                candidate.find(\".k-chip-action\").removeAttr(\"aria-hidden\");\n                that.input.attr(\"aria-activedescendant\", that._tagID);\n              }\n\n              that._currentTag = candidate;\n            } else {\n              return that._currentTag;\n            }\n          },\n          dataItems: function () {\n            return this.listView.selectedDataItems();\n          },\n          destroy: function () {\n            var that = this,\n                ns = that.ns;\n            clearTimeout(that._busy);\n            clearTimeout(that._typingTimeout);\n            that.wrapper.off(ns);\n            that.tagList.off(ns);\n            that.input.off(ns);\n\n            that._clear.off(ns);\n\n            List.fn.destroy.call(that);\n          },\n          _aria: function () {\n            var that = this,\n                id = that.ul[0].id;\n            that.wrapper.attr({\n              \"aria-owns\": id,\n              \"aria-controls\": id\n            });\n            that.ul.attr({\n              \"aria-live\": !that._isFilterEnabled() ? \"off\" : \"polite\",\n              \"aria-multiselectable\": true\n            });\n            that.input.attr(\"aria-controls\", id);\n\n            that._ariaLabel(that._focused);\n          },\n          _activateItem: function () {\n            if (this.popup.visible()) {\n              List.fn._activateItem.call(this);\n            }\n\n            this.currentTag(null);\n          },\n          _listOptions: function (options) {\n            var that = this;\n\n            var listOptions = List.fn._listOptions.call(that, $.extend(options, {\n              selectedItemChange: that._selectedItemChange.bind(that),\n              selectable: \"multiple\"\n            }));\n\n            var itemTemplate = this.options.itemTemplate || this.options.template;\n            var template = listOptions.itemTemplate || itemTemplate || listOptions.template;\n\n            if (!template) {\n              template = \"#:\" + kendo.expr(listOptions.dataTextField, \"data\") + \"#\";\n            }\n\n            listOptions.template = template;\n            return listOptions;\n          },\n          _setListValue: function () {\n            List.fn._setListValue.call(this, this._initialValues.slice(0));\n          },\n          _listChange: function (e) {\n            var data = this.dataSource.flatView();\n            var optionsMap = this._optionsMap;\n            var valueGetter = this._value;\n\n            if (this._state === REBIND) {\n              this._state = \"\";\n            }\n\n            for (var i = 0; i < e.added.length; i++) {\n              if (optionsMap[valueGetter(e.added[i].dataItem)] === undefined) {\n                this._render(data); //render select element <option> tags if the item does not persist in the current data view\n\n\n                break;\n              }\n            }\n\n            this._selectValue(e.added, e.removed);\n          },\n          _selectedItemChange: function (e) {\n            var items = e.items;\n            var context;\n            var idx;\n\n            for (idx = 0; idx < items.length; idx++) {\n              context = items[idx];\n              this.tagList.children(CHIP).eq(context.index).children(\"span\").first().html(this.tagTextTemplate(context.item));\n            }\n          },\n          _wrapperMousedown: function (e) {\n            var that = this;\n            var notInput = e.target.nodeName.toLowerCase() !== \"input\";\n            var target = $(e.target);\n            var closeButton = target.closest(\".k-multiselect-toggle-button, .k-chip\").children(\".k-i-arrow-s\")[0];\n            var removeButton = target.closest(\".k-i-x-circle\")[0];\n\n            if (notInput && !(removeButton && kendo.support.mobileOS) && e.cancelable) {\n              e.preventDefault();\n            }\n\n            if (!removeButton) {\n              if (closeButton && that.popup.visible()) {\n                that.toggle(false);\n              } else {\n                if (that.input[0] !== activeElement() && notInput) {\n                  that.input.trigger(\"focus\");\n                }\n\n                if (that.options.minLength === 1 && !that.popup.visible()) {\n                  that.open();\n                }\n              }\n            }\n          },\n          _inputFocus: function () {\n            this._placeholder(false, true);\n\n            this.wrapper.addClass(FOCUSEDCLASS);\n          },\n          _inputFocusout: function () {\n            var that = this;\n            clearTimeout(that._typingTimeout);\n            that.wrapper.removeClass(FOCUSEDCLASS);\n\n            that._placeholder(!that.listView.selectedDataItems()[0], true);\n\n            that.close();\n\n            if (that._state === FILTER) {\n              that._state = ACCEPT;\n              that.listView.skipUpdate(true);\n            }\n\n            if (that.listView.bound() && that.listView.isFiltered()) {\n              that.persistTagList = true;\n\n              that._clearFilter();\n            }\n\n            that.element.trigger(\"blur\");\n          },\n          _removeTag: function (tag, shouldTrigger) {\n            var that = this;\n            var state = that._state;\n            var position = tag.index();\n            var listView = that.listView;\n            var value = listView.value()[position];\n            var dataItem = that.listView.selectedDataItems()[position];\n            var customIndex = that._customOptions[value];\n            var listViewChildren = listView.element[0].children;\n            var option;\n            var listViewChild;\n\n            if (that.trigger(DESELECT, {\n              dataItem: dataItem,\n              item: tag\n            })) {\n              that._close();\n\n              return;\n            }\n\n            if (customIndex === undefined && (state === ACCEPT || state === FILTER)) {\n              customIndex = that._optionsMap[value];\n            }\n\n            var done = function () {\n              that.currentTag(null);\n\n              if (shouldTrigger) {\n                that._change();\n              }\n\n              that._close();\n            };\n\n            if (customIndex === undefined && listView.select().length) {\n              that.persistTagList = false;\n              listView.select(listView.select()[position]).done(done);\n            } else {\n              option = that.element[0].children[customIndex];\n\n              if (option) {\n                option.selected = false;\n              }\n\n              listView.removeAt(position);\n\n              if (listView._removedAddedIndexes) {\n                listView._removedAddedIndexes.splice(position, 1);\n              }\n\n              listViewChild = listViewChildren[customIndex];\n\n              if (listViewChild) {\n                listViewChildren[customIndex].classList.remove(\"k-selected\");\n              }\n\n              if (that.options.tagMode !== \"single\") {\n                tag.remove();\n              } else {\n                that._updateTagListHTML();\n              }\n\n              done();\n            }\n          },\n          _tagListClick: function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n            var target = $(e.currentTarget);\n\n            if (target.is(\".k-i-x-circle\")) {\n              this._removeTag(target.closest(CHIP), true);\n            }\n          },\n          _clearValue: function () {\n            var that = this;\n\n            if (that.options.tagMode === \"single\") {\n              that._clearSingleTagValue();\n            } else {\n              that.tagList.children(CHIP).each(function (index, tag) {\n                that._removeTag($(tag), false);\n              });\n            }\n\n            that.input.val(\"\");\n\n            that._search();\n\n            that._change();\n\n            that.focus();\n\n            that._hideClear();\n\n            if (that._state === FILTER) {\n              that._state = ACCEPT;\n            }\n          },\n          _clearSingleTagValue: function () {\n            var that = this;\n            var items = that.dataItems();\n            var tags = that.tagList.children(CHIP);\n            var persistTagList = that.persistTagList;\n\n            for (var i = 0; i < items.length; i += 1) {\n              if (that.trigger(DESELECT, {\n                dataItem: items[i],\n                item: tags.first()\n              })) {\n                that._close();\n\n                return;\n              }\n            }\n\n            if (persistTagList) {\n              that.persistTagList = false;\n            }\n\n            that.listView.value([]);\n            that.persistTagList = persistTagList;\n          },\n          _focusHandler: function () {\n            var input = this.input;\n            var active = activeElement();\n            var isActive = input[0] === active;\n\n            if (!isActive) {\n              this.input.trigger(\"focus\");\n            }\n          },\n          _editable: function (options) {\n            var that = this,\n                disable = options.disable,\n                readonly = options.readonly,\n                wrapper = that.wrapper.off(ns),\n                tagList = that.tagList.off(ns),\n                input = that.input.off(ns);\n\n            if (!readonly && !disable) {\n              wrapper.removeClass(STATEDISABLED).removeClass(NOCLICKCLASS).on(HOVEREVENTS, that._toggleHover).on(\"mousedown\" + ns + \" touchend\" + ns, that._wrapperMousedown.bind(that)).on(CLICK, that._focusHandler.bind(that));\n              that.input.on(KEYDOWN, that._keydown.bind(that)).on(\"paste\" + ns, that._search.bind(that)).on(\"input\" + ns, that._search.bind(that)).on(\"focus\" + ns, that._inputFocus.bind(that)).on(\"focusout\" + ns, that._inputFocusout.bind(that));\n\n              that._clear.on(CLICK + \" touchend\" + ns, that._clearValue.bind(that));\n\n              input.prop(DISABLED, false).prop(READONLY, false).attr(ARIA_DISABLED, false).attr(ARIA_READONLY, false);\n              that.element.prop(DISABLED, false);\n              tagList.on(MOUSEENTER, CHIP, function () {\n                $(this).addClass(HOVERCLASS);\n              }).on(MOUSELEAVE, CHIP, function () {\n                $(this).removeClass(HOVERCLASS);\n              }).on(CLICK + \" touchend\" + ns, \".k-chip .k-icon\", that._tagListClick.bind(that));\n            } else {\n              wrapper.toggleClass(STATEDISABLED, disable).toggleClass(NOCLICKCLASS, readonly);\n              input.attr(DISABLED, disable).attr(READONLY, readonly).attr(ARIA_DISABLED, disable).attr(ARIA_READONLY, readonly);\n              that.element.prop(DISABLED, disable);\n            }\n          },\n          _close: function () {\n            var that = this;\n\n            if (that.options.autoClose) {\n              that.close();\n            } else {\n              that.popup.position();\n            }\n          },\n          _filterSource: function (filter, force) {\n            if (!force) {\n              force = this._retrieveData;\n            }\n\n            this._retrieveData = false;\n\n            List.fn._filterSource.call(this, filter, force);\n          },\n          close: function () {\n            this._activeItem = null;\n            this.input.removeAttr(\"aria-activedescendant\");\n            this.popup.close();\n          },\n          open: function () {\n            var that = this,\n                filterValue = that.input.val().toLowerCase(),\n                listViewFilter = that.listView.dataSource.filter(),\n                listViewFilterValue;\n\n            if (listViewFilter && listViewFilter.filters.length > 0) {\n              listViewFilterValue = (listViewFilter.filters[0].value || \"\").toString().toLowerCase();\n            }\n\n            if (that._request) {\n              that._retrieveData = false;\n            }\n\n            if (that._retrieveData || !that.listView.bound() || that._state === ACCEPT && filterValue !== listViewFilterValue) {\n              that._open = true;\n              that._state = REBIND;\n              that.listView.skipUpdate(true);\n              that.persistTagList = that._initialOpen && !that.listView.bound() ? false : true;\n\n              that._filterSource();\n\n              that._focusItem();\n            } else if (that._allowOpening()) {\n              //selects values in autoBind false and non virtual scenario on initial load\n              if (that._initialOpen && !that.options.autoBind && !that.options.virtual && that.options.value && !$.isPlainObject(that.options.value[0])) {\n                that.value(that.value() || that._initialValues);\n              } // In some cases when the popup is opened resize is triggered which will cause it to close\n              // Setting the below flag will prevent this from happening\n\n\n              that.popup._hovered = true;\n              that._initialOpen = false;\n              that.popup.open();\n\n              that._focusItem();\n            }\n          },\n          toggle: function (toggle) {\n            toggle = toggle !== undefined ? toggle : !this.popup.visible();\n            this[toggle ? OPEN : CLOSE]();\n          },\n          refresh: function () {\n            this.listView.refresh();\n          },\n          _listBound: function () {\n            var that = this;\n            var data = that.dataSource.flatView();\n\n            that._render(data);\n\n            that._renderFooter();\n\n            that._renderNoData();\n\n            that._toggleNoData(!data.length);\n\n            that._resizePopup();\n\n            if (that._open) {\n              that._open = false;\n              that.toggle(that._allowOpening());\n            }\n\n            that.popup.position();\n\n            that._updateItemFocus();\n\n            if (that._touchScroller) {\n              that._touchScroller.reset();\n            }\n\n            that._hideBusy();\n\n            that.trigger(\"dataBound\");\n          },\n          _updateItemFocus: function () {\n            var that = this,\n                data = that.dataSource.flatView(),\n                skip = that.listView.skip(),\n                isFirstPage = skip === undefined || skip === 0;\n\n            if (data.length && isFirstPage) {\n              if (!that.options.highlightFirst) {\n                that.listView.focus(-1);\n              } else {\n                that.listView.focusFirst();\n              }\n            }\n          },\n          _inputValue: function () {\n            var that = this;\n            var inputValue = that.input.val();\n\n            if (that.options.placeholder === inputValue) {\n              inputValue = \"\";\n            }\n\n            return inputValue;\n          },\n          value: function (value) {\n            var that = this;\n            var listView = that.listView;\n            var oldValue = listView.value().slice();\n            var maxSelectedItems = that.options.maxSelectedItems;\n            var clearFilters = listView.bound() && listView.isFiltered();\n\n            if (value === undefined) {\n              return oldValue;\n            }\n\n            that.persistTagList = false;\n            that.requireValueMapper(that.options, value);\n            value = that._normalizeValues(value);\n\n            if (maxSelectedItems !== null && value.length > maxSelectedItems) {\n              value = value.slice(0, maxSelectedItems);\n            }\n\n            if (clearFilters) {\n              that._clearFilter();\n            }\n\n            listView.value(value);\n            that._old = that._valueBeforeCascade = value.slice(); //get a new array reference\n\n            if (!clearFilters) {\n              that._fetchData();\n            }\n\n            that._toggleCloseVisibility();\n          },\n          _preselect: function (data, value) {\n            var that = this;\n\n            if (!isArray(data) && !(data instanceof kendo.data.ObservableArray)) {\n              data = [data];\n            }\n\n            if ($.isPlainObject(data[0]) || data[0] instanceof kendo.data.ObservableObject || !that.options.dataValueField) {\n              that.dataSource.data(data);\n              that.value(value || that._initialValues);\n              that._retrieveData = true;\n            }\n          },\n          _setOption: function (value, selected) {\n            var option = this.element[0].children[this._optionsMap[value]];\n\n            if (option) {\n              option.selected = selected;\n            }\n          },\n          _fetchData: function () {\n            var that = this;\n            var hasItems = !!that.dataSource.view().length;\n            var isEmptyArray = that.listView.value().length === 0;\n\n            if (isEmptyArray || that._request) {\n              return;\n            }\n\n            if (that._retrieveData || !that._fetch && !hasItems) {\n              that._fetch = true;\n              that._retrieveData = false;\n              that.dataSource.read().done(function () {\n                that._fetch = false;\n              });\n            }\n          },\n          _isBound: function () {\n            return this.listView.bound() && !this._retrieveData;\n          },\n          _dataSource: function () {\n            var that = this,\n                element = that.element,\n                options = that.options,\n                dataSource = options.dataSource || {};\n            dataSource = isArray(dataSource) ? {\n              data: dataSource\n            } : dataSource;\n            dataSource.select = element;\n            dataSource.fields = [{\n              field: options.dataTextField\n            }, {\n              field: options.dataValueField\n            }];\n\n            if (that.dataSource && that._refreshHandler) {\n              that._unbindDataSource();\n            } else {\n              that._progressHandler = that._showBusy.bind(that);\n              that._errorHandler = that._hideBusy.bind(that);\n            }\n\n            that.dataSource = kendo.data.DataSource.create(dataSource).bind(PROGRESS, that._progressHandler).bind(\"error\", that._errorHandler);\n          },\n          _reset: function () {\n            var that = this,\n                element = that.element,\n                formId = element.attr(\"form\"),\n                form = formId ? $(\"#\" + formId) : element.closest(\"form\");\n\n            if (form[0]) {\n              that._resetHandler = function () {\n                setTimeout(function () {\n                  that.value(that._initialValues);\n\n                  that._placeholder();\n                });\n              };\n\n              that._form = form.on(\"reset\", that._resetHandler);\n            }\n          },\n          _initValue: function () {\n            var value = this.options.value || this.element.val();\n            this._old = this._initialValues = this._normalizeValues(value);\n          },\n          _normalizeValues: function (value) {\n            var that = this;\n\n            if (value === null) {\n              value = [];\n            } else if (value && $.isPlainObject(value)) {\n              value = [that._value(value)];\n            } else if (value && $.isPlainObject(value[0])) {\n              value = $.map(value, function (dataItem) {\n                return that._value(dataItem);\n              });\n            } else if (!isArray(value) && !(value instanceof ObservableArray)) {\n              value = [value];\n            } else if (isArray(value)) {\n              value = value.slice();\n            }\n\n            return value;\n          },\n          _change: function () {\n            var that = this,\n                value = that.value();\n\n            if (!compare(value, that._old)) {\n              that._old = value.slice();\n              that.trigger(CHANGE); // trigger the DOM change event so any subscriber gets notified\n\n              that.element.trigger(CHANGE);\n            }\n\n            that.popup.position();\n\n            that._toggleCloseVisibility();\n          },\n          _click: function (e) {\n            var that = this;\n            var item = e.item;\n            e.preventDefault();\n\n            that._select(item).done(function () {\n              that._activeItem = item;\n\n              that._change();\n\n              that._close();\n            });\n          },\n          _getActiveItem: function () {\n            return this._activeItem || $(this.listView.items()[this._getSelectedIndices().length - 1]) || this.listView.focus();\n          },\n          _getSelectedIndices: function () {\n            return this.listView._selectedIndices || this.listView._selectedIndexes;\n          },\n          _keydown: function (e) {\n            var that = this;\n            var key = e.keyCode;\n            var tag = that._currentTag;\n            var listView = that.listView;\n            var hasValue = that.input.val();\n            var isRtl = kendo.support.isRtl(that.wrapper);\n            var visible = that.popup.visible();\n            var dir = 0;\n            var activeItemIdx;\n\n            if (key !== keys.ENTER) {\n              this._multipleSelection = false;\n            }\n\n            if (key === keys.DOWN) {\n              e.preventDefault();\n\n              if (!visible) {\n                that.open();\n\n                if (!listView.focus()) {\n                  listView.focusFirst();\n                }\n\n                return;\n              }\n\n              if (listView.focus()) {\n                if (!that._activeItem && e.shiftKey) {\n                  that._activeItem = listView.focus();\n                  dir = -1;\n                }\n\n                activeItemIdx = listView.getElementIndex(that._getActiveItem().first());\n                listView.focusNext();\n\n                if (!listView.focus()) {\n                  listView.focusLast();\n                } else {\n                  if (e.shiftKey && !that.options.virtual) {\n                    this._multipleSelection = true;\n\n                    that._selectRange(activeItemIdx, listView.getElementIndex(listView.focus().first()) + dir);\n                  }\n                }\n              } else {\n                listView.focusFirst();\n              }\n            } else if (key === keys.UP) {\n              if (visible) {\n                if (!that._activeItem && e.shiftKey) {\n                  that._activeItem = listView.focus();\n                  dir = 1;\n                }\n\n                activeItemIdx = listView.getElementIndex(that._getActiveItem().first());\n                listView.focusPrev();\n\n                if (!listView.focus()) {\n                  that.close();\n                } else {\n                  if (e.shiftKey && !that.options.virtual) {\n                    this._multipleSelection = true;\n\n                    that._selectRange(activeItemIdx, listView.getElementIndex(listView.focus().first()) + dir);\n                  }\n                }\n              }\n\n              e.preventDefault();\n            } else if (key === keys.LEFT && !isRtl || key === keys.RIGHT && isRtl) {\n              if (!hasValue) {\n                tag = tag ? tag.prev(CHIP) : that.tagList.children(CHIP).last();\n\n                if (tag[0]) {\n                  that.currentTag(tag);\n                }\n              }\n            } else if (key === keys.RIGHT && !isRtl || key === keys.LEFT && isRtl) {\n              if (!hasValue && tag) {\n                tag = tag.next(CHIP);\n                that.currentTag(tag[0] ? tag : null);\n              }\n            } else if (e.ctrlKey && !e.altKey && key === keys.A && visible && !that.options.virtual) {\n              this._multipleSelection = true;\n\n              if (this._getSelectedIndices().length === listView.items().length) {\n                that._activeItem = null;\n              }\n\n              if (listView.items().length) {\n                that._selectRange(0, listView.items().length - 1);\n              }\n            } else if (key === keys.ENTER && visible) {\n              if (!listView.focus()) {\n                return;\n              }\n\n              e.preventDefault();\n\n              if (this._multipleSelection) {\n                this._multipleSelection = false;\n\n                if (listView.focus().hasClass(SELECTEDCLASS)) {\n                  that._close();\n\n                  return;\n                }\n              }\n\n              that._select(listView.focus()).done(function () {\n                that._change();\n\n                that._close();\n              });\n            } else if (key === keys.SPACEBAR && e.ctrlKey && visible) {\n              if (that._activeItem && listView.focus() && listView.focus()[0] === that._activeItem[0]) {\n                that._activeItem = null;\n              }\n\n              if (!$(listView.focus()).hasClass(SELECTEDCLASS)) {\n                that._activeItem = listView.focus();\n              }\n\n              that._select(listView.focus()).done(function () {\n                that._change();\n              });\n\n              e.preventDefault();\n            } else if (key === keys.SPACEBAR && e.shiftKey && visible && !that.options.virtual) {\n              var activeIndex = listView.getElementIndex(that._getActiveItem());\n              var currentIndex = listView.getElementIndex(listView.focus());\n\n              if (activeIndex !== undefined && currentIndex !== undefined) {\n                that._selectRange(activeIndex, currentIndex);\n              }\n\n              e.preventDefault();\n            } else if (key === keys.ESC) {\n              if (visible) {\n                e.preventDefault();\n              } else {\n                that.tagList.children(CHIP).each(function (index, tag) {\n                  that._removeTag($(tag), false);\n                });\n\n                that._change();\n              }\n\n              that.close();\n            } else if (key === keys.HOME) {\n              if (visible) {\n                if (!listView.focus()) {\n                  that.close();\n                } else {\n                  if (e.ctrlKey && e.shiftKey && !that.options.virtual) {\n                    that._selectRange(listView.getElementIndex(listView.focus()[0]), 0);\n                  }\n\n                  listView.focusFirst();\n                }\n              } else if (!hasValue) {\n                tag = that.tagList.children(CHIP).first()[0];\n\n                if (tag) {\n                  that.currentTag($(tag));\n                }\n              }\n            } else if (key === keys.END) {\n              if (visible) {\n                if (!listView.focus()) {\n                  that.close();\n                } else {\n                  if (e.ctrlKey && e.shiftKey && !that.options.virtual) {\n                    that._selectRange(listView.getElementIndex(listView.focus()[0]), listView.element.children().length - 1);\n                  }\n\n                  listView.focusLast();\n                }\n              } else if (!hasValue) {\n                tag = that.tagList.children(CHIP).last()[0];\n\n                if (tag) {\n                  that.currentTag($(tag));\n                }\n              }\n            } else if ((key === keys.DELETE || key === keys.BACKSPACE) && !hasValue) {\n              that._state = ACCEPT;\n\n              if (that.options.tagMode === \"single\") {\n                that._clearSingleTagValue();\n\n                that._change();\n\n                that._close();\n\n                return;\n              }\n\n              if (key === keys.BACKSPACE && !tag) {\n                tag = that.tagList.children(CHIP).last();\n              }\n\n              if (tag && tag[0]) {\n                that._removeTag(tag, true);\n              }\n            } else if (that.popup.visible() && (key === keys.PAGEDOWN || key === keys.PAGEUP)) {\n              e.preventDefault();\n              var direction = key === keys.PAGEDOWN ? 1 : -1;\n              listView.scrollWith(direction * listView.screenHeight());\n            } else {\n              clearTimeout(that._typingTimeout);\n\n              that._search();\n            }\n          },\n          _hideBusy: function () {\n            var that = this;\n            clearTimeout(that._busy);\n            that.input.attr(\"aria-busy\", false);\n\n            that._loading.addClass(HIDDENCLASS);\n\n            that._request = false;\n            that._busy = null;\n\n            that._toggleCloseVisibility();\n          },\n          _showBusyHandler: function () {\n            this.input.attr(\"aria-busy\", true);\n\n            this._loading.removeClass(HIDDENCLASS);\n\n            this._hideClear();\n          },\n          _showBusy: function () {\n            var that = this;\n            that._request = true;\n\n            if (that._busy) {\n              return;\n            }\n\n            that._busy = setTimeout(that._showBusyHandler.bind(that), 100);\n          },\n          _placeholder: function (show, skipCaret) {\n            var that = this;\n            var input = that.input;\n            var active = activeElement();\n            var placeholder = that.options.placeholder;\n            var inputValue = input.val();\n            var isActive = input[0] === active;\n            var caretPos = inputValue.length;\n\n            if (!isActive || that.options.autoClose || inputValue === placeholder) {\n              caretPos = 0;\n              inputValue = \"\";\n            }\n\n            if (show === undefined) {\n              show = false;\n\n              if (input[0] !== active) {\n                show = !that.listView.selectedDataItems()[0];\n              }\n            }\n\n            that._prev = inputValue;\n            input.toggleClass(\"k-readonly\", show).val(show ? placeholder : inputValue);\n\n            if (isActive && !skipCaret) {\n              kendo.caret(input[0], caretPos, caretPos);\n            }\n          },\n          _option: function (dataValue, dataText, selected) {\n            var option = \"<option\";\n\n            if (dataValue !== undefined) {\n              dataValue += \"\";\n\n              if (dataValue.indexOf('\"') !== -1) {\n                dataValue = dataValue.replace(quotRegExp, \"&quot;\");\n              }\n\n              option += ' value=\"' + dataValue + '\"';\n            }\n\n            if (selected) {\n              option += ' selected';\n            }\n\n            option += \">\";\n\n            if (dataText !== undefined) {\n              option += kendo.htmlEncode(dataText);\n            }\n\n            return option += \"</option>\";\n          },\n          _render: function (data) {\n            var selectedItems = this.listView.selectedDataItems();\n            var values = this.listView.value();\n            var length = data.length;\n            var selectedIndex;\n            var options = \"\";\n            var dataItem;\n            var value;\n            var idx;\n\n            if (values.length !== selectedItems.length) {\n              selectedItems = this._buildSelectedItems(values);\n            }\n\n            var custom = {};\n            var optionsMap = {};\n\n            for (idx = 0; idx < length; idx++) {\n              dataItem = data[idx];\n              value = this._value(dataItem);\n              selectedIndex = this._selectedItemIndex(value, selectedItems);\n\n              if (selectedIndex !== -1) {\n                selectedItems.splice(selectedIndex, 1);\n              }\n\n              optionsMap[value] = idx;\n              options += this._option(value, this._text(dataItem), selectedIndex !== -1);\n            }\n\n            if (selectedItems.length) {\n              for (idx = 0; idx < selectedItems.length; idx++) {\n                dataItem = selectedItems[idx];\n                value = this._value(dataItem);\n                custom[value] = length;\n                optionsMap[value] = length;\n                length += 1;\n                options += this._option(value, this._text(dataItem), true);\n              }\n            }\n\n            this._customOptions = custom;\n            this._optionsMap = optionsMap;\n            this.element.html(options);\n          },\n          _buildSelectedItems: function (values) {\n            var valueField = this.options.dataValueField;\n            var textField = this.options.dataTextField;\n            var result = [];\n            var item;\n\n            for (var idx = 0; idx < values.length; idx++) {\n              item = {};\n              item[valueField] = values[idx];\n              item[textField] = values[idx];\n              result.push(item);\n            }\n\n            return result;\n          },\n          _selectedItemIndex: function (value, selectedItems) {\n            var valueGetter = this._value;\n            var idx = 0;\n\n            for (; idx < selectedItems.length; idx++) {\n              if (value === valueGetter(selectedItems[idx])) {\n                return idx;\n              }\n            }\n\n            return -1;\n          },\n          _search: function () {\n            var that = this;\n            clearTimeout(that._typingTimeout);\n            that._typingTimeout = setTimeout(function () {\n              var value = that._inputValue();\n\n              if (that._prev !== value) {\n                that._prev = value;\n                that.search(value);\n\n                that._toggleCloseVisibility();\n              }\n            }, that.options.delay);\n          },\n          _toggleCloseVisibility: function () {\n            if (this.value().length || this.input.val() && this.input.val() !== this.options.placeholder) {\n              this._showClear();\n            } else {\n              this._hideClear();\n            }\n          },\n          _allowOpening: function () {\n            return this._allowSelection() && List.fn._allowOpening.call(this);\n          },\n          _allowSelection: function () {\n            var max = this.options.maxSelectedItems;\n            return max === null || max > this.listView.value().length;\n          },\n          _angularTagItems: function (cmd) {\n            var that = this;\n            that.angular(cmd, function () {\n              return {\n                elements: that.tagList[0].children,\n                data: $.map(that.dataItems(), function (dataItem) {\n                  return {\n                    dataItem: dataItem\n                  };\n                })\n              };\n            });\n          },\n          updatePersistTagList: function (added, removed) {\n            if (this.persistTagList.added && this.persistTagList.added.length === removed.length && this.persistTagList.removed && this.persistTagList.removed.length === added.length) {\n              this.persistTagList = false;\n            } else {\n              this.listView._removedAddedIndexes = this._old.slice();\n              this.persistTagList = {\n                added: added,\n                removed: removed\n              };\n            }\n          },\n          _selectValue: function (added, removed) {\n            var that = this;\n            var total = that.dataSource.total();\n            var tagList = that.tagList;\n            var getter = that._value;\n            var removedItem;\n            var addedItem;\n            var idx;\n\n            if (this.persistTagList) {\n              this.updatePersistTagList(added, removed);\n              return;\n            }\n\n            that._angularTagItems(\"cleanup\");\n\n            if (that.options.tagMode === \"multiple\") {\n              for (idx = removed.length - 1; idx > -1; idx--) {\n                removedItem = removed[idx];\n\n                if (tagList.children(CHIP).length) {\n                  tagList[0].removeChild(tagList[0].children[removedItem.position]);\n\n                  that._setOption(getter(removedItem.dataItem), false);\n                }\n              }\n\n              for (idx = 0; idx < added.length; idx++) {\n                addedItem = added[idx];\n                that.input.before(that.tagTemplate(addedItem.dataItem));\n\n                that._setOption(getter(addedItem.dataItem), true);\n              }\n            } else {\n              if (!that._maxTotal || that._maxTotal < total) {\n                that._maxTotal = total;\n              }\n\n              this._updateTagListHTML();\n\n              for (idx = removed.length - 1; idx > -1; idx--) {\n                that._setOption(getter(removed[idx].dataItem), false);\n              }\n\n              for (idx = 0; idx < added.length; idx++) {\n                that._setOption(getter(added[idx].dataItem), true);\n              }\n            }\n\n            that._angularTagItems(\"compile\");\n\n            that._placeholder();\n          },\n          _updateTagListHTML: function () {\n            var that = this;\n            var values = that.value();\n            var total = that.dataSource.total();\n            var tagList = that.tagList;\n            tagList.children(CHIP).each(function (index, tag) {\n              $(tag).remove();\n            });\n\n            if (values.length) {\n              that.input.before(that.tagTemplate({\n                values: values,\n                dataItems: that.dataItems(),\n                maxTotal: that._maxTotal,\n                currentTotal: total\n              }));\n            }\n          },\n          _select: function (candidate) {\n            var resolved = $.Deferred().resolve();\n\n            if (!candidate) {\n              return resolved;\n            }\n\n            var that = this;\n            var listView = that.listView;\n            var dataItem = listView.dataItemByIndex(listView.getElementIndex(candidate));\n            var isSelected = candidate.hasClass(\"k-selected\");\n\n            if (that._state === REBIND) {\n              that._state = \"\";\n            }\n\n            if (!that._allowSelection() && !isSelected) {\n              return resolved;\n            }\n\n            if (that.trigger(isSelected ? DESELECT : SELECT, {\n              dataItem: dataItem,\n              item: candidate\n            })) {\n              that._close();\n\n              return resolved;\n            }\n\n            that.persistTagList = false;\n            return listView.select(candidate).done(function () {\n              that._placeholder();\n\n              if (that._state === FILTER) {\n                that._state = ACCEPT;\n                listView.skipUpdate(true);\n              }\n            });\n          },\n          _selectRange: function (startIndex, endIndex) {\n            var that = this;\n            var listView = this.listView;\n            var maxSelectedItems = this.options.maxSelectedItems;\n\n            var indices = this._getSelectedIndices().slice();\n\n            var indicesToSelect = [];\n            var i;\n\n            var selectIndices = function (indices) {\n              listView.select(indices).done(function () {\n                indices.forEach(function (index) {\n                  var dataItem = listView.dataItemByIndex(index);\n                  var candidate = listView.element.children()[index];\n                  var isSelected = $(candidate).hasClass(\"k-selected\");\n                  that.trigger(isSelected ? SELECT : DESELECT, {\n                    dataItem: dataItem,\n                    item: $(candidate)\n                  });\n                });\n\n                that._change();\n              });\n            };\n\n            if (indices.length - 1 === endIndex - startIndex) {\n              return selectIndices(indices);\n            }\n\n            if (startIndex < endIndex) {\n              for (i = startIndex; i <= endIndex; i++) {\n                indicesToSelect.push(i);\n              }\n            } else {\n              for (i = startIndex; i >= endIndex; i--) {\n                indicesToSelect.push(i);\n              }\n            }\n\n            if (maxSelectedItems !== null && indicesToSelect.length > maxSelectedItems) {\n              indicesToSelect = indicesToSelect.slice(0, maxSelectedItems);\n            }\n\n            for (i = 0; i < indicesToSelect.length; i++) {\n              var index = indicesToSelect[i];\n\n              if (this._getSelectedIndices().indexOf(index) == -1) {\n                indices.push(index);\n              } else {\n                indices.splice(indices.indexOf(index), 1);\n              }\n            }\n\n            if (!indices.length) {\n              return;\n            }\n\n            that.persistTagList = false;\n            return selectIndices(indices);\n          },\n          _input: function () {\n            var that = this;\n            var element = that.element;\n            var accessKey = element[0].accessKey;\n            var input = that.tagList.children(\"input.k-input-inner\");\n            var autocomplete = this.options.filter === \"none\" ? \"none\" : \"list\";\n\n            if (!input[0]) {\n              input = $('<input class=\"k-input-inner\" />').appendTo(that.tagList);\n            }\n\n            element.removeAttr(\"accesskey\");\n            that._focused = that.input = input.attr({\n              \"autocomplete\": AUTOCOMPLETEVALUE,\n              \"role\": \"textbox\",\n              \"title\": element[0].title,\n              \"aria-autocomplete\": autocomplete\n            });\n\n            if (accessKey) {\n              that._focused.attr(\"accesskey\", accessKey);\n            }\n          },\n          _tagList: function () {\n            var that = this,\n                options = that.options,\n                tagList = that.wrapper.children(\".k-input-values\");\n\n            if (!tagList[0]) {\n              tagList = $(html.renderChipList('<div unselectable=\"on\" class=\"k-input-values k-selection-multiple\" />', $.extend({}, options))).appendTo(that.wrapper);\n            }\n\n            that.tagList = tagList;\n          },\n          _tagTemplate: function () {\n            var that = this;\n            var options = that.options;\n            var tagTemplate = options.tagTemplate;\n            var hasDataSource = options.dataSource;\n            var isMultiple = options.tagMode === \"multiple\";\n            var singleTag = options.messages.singleTag;\n            var defaultTemplate;\n\n            if (that.element[0].length && !hasDataSource) {\n              options.dataTextField = options.dataTextField || \"text\";\n              options.dataValueField = options.dataValueField || \"value\";\n            }\n\n            defaultTemplate = isMultiple ? kendo.template(\"#:\" + kendo.expr(options.dataTextField, \"data\") + \"#\", {\n              useWithBlock: false\n            }) : kendo.template(\"#:values.length# \" + singleTag);\n            that.tagTextTemplate = tagTemplate = tagTemplate ? kendo.template(tagTemplate) : defaultTemplate;\n\n            that.tagTemplate = function (data) {\n              return html.renderChip('<span unselectable=\"on\">' + '</span>', $.extend({}, options, {\n                fillMode: \"solid\",\n                rounded: \"medium\",\n                themeColor: \"base\",\n                text: tagTemplate(data),\n                attr: {\n                  unselectable: \"on\"\n                },\n                removable: isMultiple,\n                removableAttr: {\n                  unselectable: \"on\",\n                  \"aria-hidden\": true,\n                  \"aria-label\": that.options.messages.deleteTag,\n                  title: that.options.messages.deleteTag\n                },\n                icon: !isMultiple ? \"arrow-s\" : \"\",\n                iconAttr: {\n                  unselectable: \"on\",\n                  \"aria-hidden\": true,\n                  \"aria-label\": 'open'\n                }\n              }));\n            };\n          },\n          _loader: function () {\n            this._loading = $('<span class=\"k-icon k-i-loading k-input-loading-icon ' + HIDDENCLASS + '\"></span>').insertAfter(this.tagList);\n          },\n          _clearButton: function () {\n            List.fn._clearButton.call(this);\n\n            if (this.options.clearButton) {\n              this._clear.insertAfter(this.tagList);\n\n              this.wrapper.addClass(\"k-multiselect-clearable\");\n            }\n          },\n          _arrowButton: function () {\n            var element = this.element,\n                arrowTitle = this.options.messages.downArrow,\n                arrow = $(html.renderButton('<button type=\"button\" title=\"' + arrowTitle + '\" class=\"k-input-button k-multiselect-toggle-button\"></button>', $.extend({}, this.options, {\n              icon: \"arrow-s\"\n            })));\n\n            if (this._arrow) {\n              this._arrow.remove();\n\n              this._arrow = null;\n            }\n\n            if (this.options.downArrow) {\n              this._arrow = arrow.attr({\n                \"tabIndex\": -1\n              });\n\n              if (element.id) {\n                this._arrow.attr(\"aria-controls\", this.ul[0].id);\n              }\n\n              this._arrow.appendTo(this.wrapper);\n            }\n          },\n          _textContainer: function () {\n            var computedStyles = kendo.getComputedStyles(this.input[0], styles);\n            computedStyles.position = \"absolute\";\n            computedStyles.visibility = \"hidden\";\n            computedStyles.top = -3333;\n            computedStyles.left = -3333;\n            this._span = $(\"<span/>\").css(computedStyles).appendTo(this.wrapper);\n          },\n          _wrapper: function () {\n            var that = this,\n                element = that.element,\n                wrapper = element.parent(\"span.k-multiselect\");\n\n            if (!wrapper[0]) {\n              wrapper = element.wrap('<span class=\"k-multiselect k-input\" unselectable=\"on\" role=\"combobox\" />').parent();\n              wrapper[0].style.cssText = element[0].style.cssText;\n              wrapper[0].title = element[0].title;\n            }\n\n            that.wrapper = wrapper.addClass(element[0].className).removeClass('input-validation-error').css(\"display\", \"\").attr({\n              \"aria-expanded\": false\n            });\n          },\n          _ariaSetLive: function () {\n            var that = this;\n            that.ul.attr(\"aria-live\", !that._isFilterEnabled() ? \"off\" : \"polite\");\n          },\n          _closeHandler: function (e) {\n            if (this.trigger(CLOSE)) {\n              e.preventDefault();\n            } else {\n              this.wrapper.attr(\"aria-expanded\", false);\n              this.ul.attr(\"aria-hidden\", true);\n            }\n          },\n          _openHandler: function (e) {\n            this._adjustListWidth();\n\n            if (this.trigger(OPEN)) {\n              e.preventDefault();\n            } else {\n              this.wrapper.attr(\"aria-expanded\", true);\n              this.ul.attr(\"aria-hidden\", false);\n            }\n          }\n        });\n\n        function compare(a, b) {\n          var length;\n\n          if (a === null && b !== null || a !== null && b === null) {\n            return false;\n          }\n\n          length = a.length;\n\n          if (length !== b.length) {\n            return false;\n          }\n\n          while (length--) {\n            if (a[length] !== b[length]) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n\n        ui.plugin(MultiSelect);\n        kendo.cssProperties.registerPrefix(\"MultiSelect\", \"k-input-\");\n        kendo.cssProperties.registerValues(\"MultiSelect\", [{\n          prop: \"rounded\",\n          values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n        }]);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}