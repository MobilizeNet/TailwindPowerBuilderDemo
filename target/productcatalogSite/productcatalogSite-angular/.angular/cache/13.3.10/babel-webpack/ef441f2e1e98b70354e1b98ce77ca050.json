{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(947);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  947:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(948)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function ($) {\n        // jshint ignore:line\n        var kendo = window.kendo;\n        var dataviz = kendo.dataviz;\n        var ChartInstanceObserver = dataviz.ChartInstanceObserver;\n        var Chart = dataviz.ui.Chart;\n        var KendoStockChart = dataviz.StockChart;\n        var constants = dataviz.constants;\n        var NAVIGATOR_AXIS = constants.NAVIGATOR_AXIS;\n        var NAVIGATOR_PANE = constants.NAVIGATOR_PANE;\n        var deepExtend = kendo.deepExtend;\n        var defined = dataviz.defined;\n        var CHANGE = \"change\";\n        var StockInstanceObserver = ChartInstanceObserver.extend({\n          handlerMap: {\n            navigatorFilter: '_onNavigatorFilter',\n            navigatorCreated: '_onNavigatorCreated'\n          }\n        });\n        var StockChart = Chart.extend({\n          options: {\n            name: \"StockChart\",\n            dateField: \"date\",\n            axisDefaults: {\n              categoryAxis: {\n                type: \"date\",\n                baseUnit: \"fit\",\n                justified: true\n              },\n              valueAxis: {\n                narrowRange: true,\n                labels: {\n                  format: \"C\"\n                }\n              }\n            },\n            navigator: {\n              select: {},\n              seriesDefaults: {\n                markers: {\n                  visible: false\n                },\n                tooltip: {\n                  visible: true,\n                  template: \"#= kendo.toString(category, 'd') #\"\n                },\n                line: {\n                  width: 2\n                }\n              },\n              hint: {},\n              visible: true\n            },\n            tooltip: {\n              visible: true\n            },\n            legend: {\n              visible: false\n            },\n            persistSeriesVisibility: true\n          },\n          _createChart: function (options, themeOptions) {\n            this._initNavigatorOptions(options);\n\n            this._instance = new KendoStockChart(this.element[0], options, themeOptions, {\n              observer: new StockInstanceObserver(this),\n              sender: this,\n              rtl: this._isRtl()\n            });\n          },\n          _initNavigatorOptions: function (options) {\n            var navigatorOptions = options.navigator || {};\n            var support = kendo.support;\n            var isTouch = support.touch;\n            var isFirefox = support.browser.mozilla;\n            deepExtend(navigatorOptions, {\n              autoBindElements: !navigatorOptions.dataSource,\n              partialRedraw: navigatorOptions.dataSource,\n              liveDrag: !isTouch && !isFirefox\n            });\n          },\n          _initDataSource: function (userOptions) {\n            var options = userOptions || {},\n                dataSource = options.dataSource,\n                hasServerFiltering = dataSource && dataSource.serverFiltering,\n                mainAxis = [].concat(options.categoryAxis)[0],\n                naviOptions = options.navigator || {},\n                select = naviOptions.select,\n                hasSelect = select && select.from && select.to;\n\n            if (hasServerFiltering && hasSelect) {\n              var filter = [].concat(dataSource.filter || []);\n              var from = kendo.parseDate(select.from);\n              var to = kendo.parseDate(select.to);\n              var dummyAxis = new dataviz.DateCategoryAxis(deepExtend({\n                baseUnit: \"fit\"\n              }, mainAxis, {\n                categories: [from, to]\n              }), kendo);\n              dataSource.filter = buildFilter(dummyAxis.range().min, to).concat(filter);\n            }\n\n            Chart.fn._initDataSource.call(this, userOptions);\n          },\n          _onNavigatorCreated: function (e) {\n            this._instance = e.sender;\n            this.options = e.sender.options;\n            this._navigator = this.navigator = e.navigator;\n\n            this._initNavigatorDataSource();\n          },\n          _initNavigatorDataSource: function () {\n            var navigatorOptions = this.options.navigator;\n            var autoBind = navigatorOptions.autoBind;\n            var dsOptions = navigatorOptions.dataSource;\n\n            if (dsOptions) {\n              this._navigatorDataChangedHandler = this._navigatorDataChangedHandler || this._onNavigatorDataChanged.bind(this);\n              this._navigatorDataSource = kendo.data.DataSource.create(dsOptions).bind(CHANGE, this._navigatorDataChangedHandler);\n\n              if (!defined(autoBind)) {\n                autoBind = this.options.autoBind;\n              }\n\n              if (autoBind) {\n                this._navigatorDataSource.fetch();\n              }\n            }\n          },\n          _bindNavigatorSeries: function (series, data) {\n            var seriesIx,\n                currentSeries,\n                seriesLength = series.length;\n\n            for (seriesIx = 0; seriesIx < seriesLength; seriesIx++) {\n              currentSeries = series[seriesIx];\n\n              if (currentSeries.axis == NAVIGATOR_AXIS && this._isBindable(currentSeries)) {\n                currentSeries.data = data;\n              }\n            }\n          },\n          _onNavigatorDataChanged: function () {\n            var chart = this,\n                instance = chart._instance,\n                categoryAxes = chart.options.categoryAxis,\n                axisIx,\n                axesLength = categoryAxes.length,\n                data = chart._navigatorDataSource.view(),\n                currentAxis,\n                naviCategories;\n\n            this._bindNavigatorSeries(chart.options.series, data);\n\n            if (chart._sourceSeries) {\n              this._bindNavigatorSeries(chart._sourceSeries, data);\n            }\n\n            for (axisIx = 0; axisIx < axesLength; axisIx++) {\n              currentAxis = categoryAxes[axisIx];\n\n              if (currentAxis.pane == NAVIGATOR_PANE) {\n                if (currentAxis.name == NAVIGATOR_AXIS) {\n                  chart._bindCategoryAxis(currentAxis, data, axisIx);\n\n                  naviCategories = currentAxis.categories;\n                } else {\n                  currentAxis.categories = naviCategories;\n                }\n              }\n            }\n\n            if (instance._model) {\n              var navigator = this.navigator;\n              navigator.redraw();\n              navigator.setRange();\n\n              if (!chart.options.dataSource || chart.options.dataSource && chart._dataBound) {\n                navigator.redrawSlaves();\n              }\n            }\n          },\n          _bindCategories: function () {\n            Chart.fn._bindCategories.call(this);\n\n            if (this._instance) {\n              this._instance.copyNavigatorCategories();\n            }\n          },\n          _onDataChanged: function () {\n            Chart.fn._onDataChanged.call(this);\n\n            this._dataBound = true;\n          },\n          setOptions: function (options) {\n            this._removeNavigatorDataSource();\n\n            this._initNavigatorOptions(options);\n\n            this._instance.destroyNavigator();\n\n            Chart.fn.setOptions.call(this, options);\n          },\n          _onNavigatorFilter: function (e) {\n            this.dataSource.filter(buildFilter(e.from, e.to));\n          },\n          requiresHandlers: function (names) {\n            if (dataviz.inArray('navigatorFilter', names)) {\n              var dataSource = this.dataSource;\n              var hasServerFiltering = dataSource && dataSource.options.serverFiltering;\n              return hasServerFiltering && this.options.navigator.dataSource;\n            }\n\n            return Chart.fn.requiresHandlers.call(this, names);\n          },\n          _removeNavigatorDataSource: function () {\n            var navigatorDataSource = this._navigatorDataSource;\n\n            if (navigatorDataSource) {\n              navigatorDataSource.unbind(CHANGE, this._navigatorDataChangedHandler);\n              delete this._navigatorDataSource;\n            }\n          },\n          destroy: function () {\n            Chart.fn.destroy.call(this);\n\n            this._removeNavigatorDataSource();\n          }\n        });\n        dataviz.ui.plugin(StockChart);\n\n        function buildFilter(from, to) {\n          return [{\n            field: \"Date\",\n            operator: \"gte\",\n            value: from\n          }, {\n            field: \"Date\",\n            operator: \"lt\",\n            value: to\n          }];\n        }\n      })(window.kendo.jQuery);\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  948:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo-stock-chart\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}