{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1034);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  20:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.core\");\n    /***/\n  },\n\n  /***/\n  1034:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(20)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            extend = $.extend,\n            deferred = $.Deferred,\n            Class = kendo.Class;\n        var Command = Class.extend({\n          init: function (options) {\n            this.options = options;\n            this.filemanager = options.filemanager;\n          }\n        });\n        var CreateFolderCommand = Command.extend({\n          init: function (options) {\n            Command.fn.init.call(this, options);\n          },\n          exec: function () {\n            var that = this,\n                filemanager = that.filemanager,\n                commandStack = filemanager._commandStack,\n                dataSource = filemanager._viewDataSource || filemanager.dataSource,\n                removeProxy = that._remove.bind(that);\n\n            that._item = dataSource._createNewModel();\n            commandStack.push({\n              item: that._item.toJSON()\n            }).fail(removeProxy);\n            dataSource.add(that._item);\n          },\n          _remove: function () {\n            var that = this,\n                filemanager = that.filemanager,\n                dataSource = filemanager._viewDataSource || filemanager.dataSource;\n            dataSource.pushDestroy(that._item);\n          }\n        });\n        var RenameCommand = Command.extend({\n          init: function (options) {\n            Command.fn.init.call(this, options);\n          },\n          exec: function () {\n            var that = this,\n                target = that.options.target,\n                filemanager = that.filemanager,\n                commandStack = filemanager._commandStack,\n                viewItem = filemanager._view.widgetComponent.dataItem(target);\n\n            if (target && viewItem) {\n              commandStack.push({\n                target: target,\n                item: viewItem\n              });\n\n              that.filemanager._view.edit(target);\n            } else {\n              that._renameTreeViewItem(target);\n            }\n          },\n          _renameTreeViewItem: function (target) {\n            var that = this,\n                filemanager = that.filemanager,\n                commandStack = filemanager._commandStack,\n                uid = target.data(\"uid\"),\n                item = that.filemanager.treeView.widgetComponent.dataSource.getByUid(uid),\n                realItem = that.filemanager.dataSource.get(item.id);\n\n            that.filemanager._prompt({\n              type: \"rename\",\n              defaultInput: realItem.name,\n              target: target\n            }).done(function (newName) {\n              commandStack.push({\n                target: target,\n                item: realItem\n              });\n              realItem.set(\"name\", newName);\n            });\n          }\n        });\n        var DeleteCommand = Command.extend({\n          init: function (options) {\n            Command.fn.init.call(this, options);\n          },\n          exec: function () {\n            var that = this,\n                target = that.options.target,\n                filemanager = that.filemanager,\n                items = filemanager.getSelected(),\n                viewItem = that.filemanager._view.widgetComponent.dataItem(target),\n                itemsToRemove;\n\n            if (target && target.is(\".k-state-selected\") && items && items.length) {\n              itemsToRemove = items;\n            } else if (target && viewItem) {\n              itemsToRemove = viewItem;\n            } else if (target) {\n              var uid = target.data(\"uid\");\n              var item = that.filemanager.treeView.widgetComponent.dataSource.getByUid(uid);\n              var realItem = that.filemanager.dataSource.get(item.id);\n              itemsToRemove = realItem;\n            }\n\n            filemanager._confirm({\n              type: \"delete\",\n              target: target\n            }).done(function () {\n              that.removeItems(itemsToRemove);\n            });\n          },\n          removeItems: function (items) {\n            var that = this;\n            that._itemsToRemove = Array.isArray(items) ? items : [items];\n\n            that._removeItem();\n          },\n          _removeItem: function () {\n            var that = this,\n                filemanager = that.filemanager,\n                commandStack = filemanager._commandStack,\n                dataSource = filemanager.dataSource,\n                itemToRemove = !!that._itemsToRemove.length && that._itemsToRemove.splice(0, 1)[0];\n\n            if (itemToRemove) {\n              commandStack.push({\n                item: itemToRemove\n              }).then(that._removeItem.bind(that), that._removeItem.bind(that));\n              dataSource.remove(itemToRemove);\n            }\n          }\n        });\n        var CopyCommand = Command.extend({\n          init: function (options) {\n            Command.fn.init.call(this, options);\n          },\n          exec: function () {\n            var that = this,\n                filemanager = that.filemanager,\n                dataSource = filemanager.dataSource,\n                commandStack = filemanager._commandStack,\n                items = that.options.items,\n                target = dataSource.get(that.options.target),\n                targetDataSource = target.children;\n\n            for (var i = 0; i < items.length; i++) {\n              var item = dataSource.get(items[i]).toJSON();\n              item.fileManagerNewItem = true;\n              commandStack.push({\n                item: item,\n                target: target\n              });\n              targetDataSource.add(item);\n            }\n          }\n        });\n        var MoveCommand = Command.extend({\n          init: function (options) {\n            var that = this;\n            Command.fn.init.call(that, options);\n            that._itemsToRemove = [];\n          },\n          exec: function () {\n            var that = this,\n                filemanager = that.filemanager,\n                commandStack = filemanager._commandStack,\n                dataSource = filemanager.dataSource,\n                items = that.options.items,\n                target = dataSource.get(that.options.target),\n                targetDataSource = target.children,\n                promises = [];\n\n            for (var i = 0; i < items.length; i++) {\n              var item = dataSource.get(items[i]);\n              var cloning = item.toJSON();\n              cloning.fileManagerNewItem = true;\n              var promise = commandStack.push({\n                item: item,\n                target: target\n              }).then(that._delete.bind(that));\n              promises.push(promise);\n              targetDataSource.add(cloning);\n            }\n\n            kendo.whenAll(promises).always(that._removeItem.bind(that));\n          },\n          _delete: function (data) {\n            var that = this;\n\n            that._itemsToRemove.push(data.item);\n          },\n          _removeItem: function () {\n            var that = this,\n                filemanager = that.filemanager,\n                commandStack = filemanager._commandStack,\n                dataSource = filemanager.dataSource,\n                itemToRemove = !!that._itemsToRemove.length && that._itemsToRemove.splice(0, 1)[0];\n\n            if (itemToRemove) {\n              commandStack.push({\n                item: itemToRemove\n              }).then(that._removeItem.bind(that), that._removeItem.bind(that));\n              dataSource.remove(itemToRemove);\n            }\n          }\n        });\n        var SortCommand = Command.extend({\n          init: function (options) {\n            Command.fn.init.call(this, options);\n          },\n          exec: function () {\n            var that = this,\n                options = that.options,\n                filemanager = that.filemanager,\n                sortOptions = filemanager.defaultSortOption;\n            extend(sortOptions, {\n              dir: options.dir,\n              field: options.field\n            });\n\n            filemanager._view.widgetComponent.dataSource.sort([filemanager.folderSortOption, sortOptions]);\n          }\n        });\n        var SearchCommand = Command.extend({\n          init: function (options) {\n            Command.fn.init.call(this, options);\n          },\n          exec: function () {\n            var that = this,\n                options = that.options,\n                filemanager = that.filemanager,\n                filter = {\n              field: options.field,\n              operator: options.operator,\n              value: options.value\n            };\n\n            filemanager._view.widgetComponent.dataSource.filter(filter);\n          }\n        });\n        var ChangeViewCommand = Command.extend({\n          init: function (options) {\n            Command.fn.init.call(this, options);\n          },\n          exec: function () {\n            var that = this,\n                options = that.options,\n                filemanager = that.filemanager;\n            filemanager.view(options.value);\n            filemanager.resize(true);\n          }\n        });\n        var OpenDialogCommand = Command.extend({\n          init: function (options) {\n            Command.fn.init.call(this, options);\n          },\n          exec: function () {\n            var that = this,\n                filemanager = that.filemanager,\n                dialog = filemanager[that.options.type];\n\n            if (dialog) {\n              dialog.open();\n            } else {\n              window.console.warn(kendo.format(\"The {0} dialog is not available!\", that.options.type));\n            }\n          }\n        });\n        var TogglePaneCommand = Command.extend({\n          init: function (options) {\n            Command.fn.init.call(this, options);\n          },\n          exec: function () {\n            var that = this,\n                filemanager = that.filemanager,\n                pane = filemanager[that.options.type],\n                resizable = that.getResizable();\n\n            if (pane) {\n              pane.toggle();\n\n              if (resizable) {\n                filemanager.wrapper.find(resizable.options.handle).toggle();\n              }\n            }\n          },\n          getResizable: function () {\n            var that = this,\n                filemanager = that.filemanager,\n                type = that.options.type;\n\n            if (!filemanager._resizeDraggable) {\n              return;\n            }\n\n            return filemanager._resizeDraggable[type];\n          }\n        });\n        var CommandStack = Class.extend({\n          init: function () {\n            var that = this;\n            that._stack = {};\n            that._keys = [];\n          },\n          push: function (data) {\n            var that = this,\n                guid = kendo.guid();\n\n            that._keys.push(guid);\n\n            that._stack[guid] = {\n              guid: guid,\n              data: data,\n              deferred: deferred()\n            };\n            return that._stack[guid].deferred;\n          },\n          next: function () {\n            var that = this,\n                key = that.keys().splice(0, 1),\n                nextCommand = that._stack[key];\n            return nextCommand;\n          },\n          resolve: function (command) {\n            var that = this;\n            delete that._stack[command.guid];\n            command.deferred.resolve(command.data);\n          },\n          reject: function (command) {\n            var that = this;\n            delete that._stack[command.guid];\n            command.deferred.reject(command.data);\n          },\n          keys: function () {\n            return this._keys;\n          },\n          empty: function () {\n            return this.keys().length === 0;\n          }\n        });\n        extend(kendo.ui, {\n          filemanager: {\n            FileManagerCommand: Command,\n            CommandStack: CommandStack,\n            commands: {\n              CreateFolderCommand: CreateFolderCommand,\n              RenameCommand: RenameCommand,\n              DeleteCommand: DeleteCommand,\n              MoveCommand: MoveCommand,\n              CopyCommand: CopyCommand,\n              SortCommand: SortCommand,\n              SearchCommand: SearchCommand,\n              ChangeViewCommand: ChangeViewCommand,\n              OpenDialogCommand: OpenDialogCommand,\n              TogglePaneCommand: TogglePaneCommand\n            }\n          }\n        });\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}