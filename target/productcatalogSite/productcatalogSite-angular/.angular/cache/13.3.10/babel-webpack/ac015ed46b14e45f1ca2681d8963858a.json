{"ast":null,"code":"import { WMLogger } from '@mobilize/logging';\nimport { Inject } from '../../Application';\nimport { Constants, Events } from '../../Contract/Application';\n\nvar ErrorCodes = function () {\n  function ErrorCodes() {}\n\n  ErrorCodes.Winforms = '01';\n  ErrorCodes.BaseComponents = '02';\n  ErrorCodes.AngularClient = '03';\n  ErrorCodes.ClientCore = '04';\n  return ErrorCodes;\n}();\n\nexport { ErrorCodes };\nexport function MessageFormat(error, moduleCode, target, method) {\n  switch (error.name) {\n    case 'TypeError':\n      return \"[\" + moduleCode + \"10]: \" + target + \".\" + method;\n\n    case 'ReferenceError':\n      return \"[\" + moduleCode + \"20]: \" + target + \".\" + method;\n\n    default:\n      return \"[\" + moduleCode + \"30]: \" + target + \".\" + method;\n  }\n}\nexport function ExceptionHandler(onException) {\n  return function (target, propertyKey, descriptor) {\n    var originalMethod = descriptor.value;\n\n    descriptor.value = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      var event = Inject.Instance.resolve(Constants.EventAggregator);\n\n      try {\n        return originalMethod.apply(this, args);\n      } catch (e) {\n        WMLogger.instance().error(e);\n        e.message = MessageFormat(e, onException, target.constructor.name, propertyKey);\n        event.publish(Events.Error, e);\n\n        if (this[onException]) {\n          this[onException]();\n        }\n      }\n    };\n\n    return descriptor;\n  };\n}\nexport function ExceptionHandlerClass(moduleCode) {\n  return function (target) {\n    var _loop_1 = function (propertyName) {\n      var descriptor = Object.getOwnPropertyDescriptor(target.prototype, propertyName);\n      var isMethod = descriptor.value instanceof Function;\n\n      if (!isMethod) {\n        return \"continue\";\n      }\n\n      var originalMethod = descriptor.value;\n\n      descriptor.value = function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        var event = Inject.Instance.resolve(Constants.EventAggregator);\n\n        try {\n          return originalMethod.apply(this, args);\n        } catch (e) {\n          WMLogger.instance().error(e);\n          e.message = MessageFormat(e, moduleCode, target.name, propertyName);\n          event.publish(Events.Error, e);\n        }\n      };\n\n      Object.defineProperty(target.prototype, propertyName, descriptor);\n    };\n\n    for (var _i = 0, _a = Object.keys(target.prototype); _i < _a.length; _i++) {\n      var propertyName = _a[_i];\n\n      _loop_1(propertyName);\n    }\n  };\n} //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXhjZXB0aW9uSGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9TeXN0ZW0vQW9wL0V4Y2VwdGlvbkhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0JBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUU3QyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUsvRDtJQUFBO0lBS0EsQ0FBQztJQUpVLG1CQUFRLEdBQUcsSUFBSSxDQUFDO0lBQ2hCLHlCQUFjLEdBQUcsSUFBSSxDQUFDO0lBQ3RCLHdCQUFhLEdBQUcsSUFBSSxDQUFDO0lBQ3JCLHFCQUFVLEdBQUcsSUFBSSxDQUFDO0lBQzdCLGlCQUFDO0NBQUEsQUFMRCxJQUtDO1NBTFksVUFBVTtBQWV2QixNQUFNLFVBQVUsYUFBYSxDQUFDLEtBQVksRUFBRSxVQUFrQixFQUFFLE1BQWMsRUFBRSxNQUFjO0lBQzFGLFFBQVEsS0FBSyxDQUFDLElBQUksRUFBRTtRQUNoQixLQUFLLFdBQVc7WUFDWixPQUFPLE1BQUssVUFBVSxhQUFVLE1BQU0sU0FBTSxNQUFTLENBQUM7UUFDMUQsS0FBSyxnQkFBZ0I7WUFDakIsT0FBTyxNQUFLLFVBQVUsYUFBVSxNQUFNLFNBQU0sTUFBUyxDQUFDO1FBQzFEO1lBQ0ksT0FBTyxNQUFLLFVBQVUsYUFBVSxNQUFNLFNBQU0sTUFBUyxDQUFDO0tBQzdEO0FBQ0wsQ0FBQztBQU1ELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxXQUFvQjtJQUNqRCxPQUFPLFVBQUMsTUFBYyxFQUFFLFdBQW1CLEVBQUUsVUFBd0M7UUFDakYsSUFBTSxjQUFjLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQztRQUN4QyxVQUFVLENBQUMsS0FBSyxHQUFHO1lBQVUsY0FBYztpQkFBZCxVQUFjLEVBQWQscUJBQWMsRUFBZCxJQUFjO2dCQUFkLHlCQUFjOztZQUN2QyxJQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLENBQUM7WUFFakUsSUFBSTtnQkFDQSxPQUFPLGNBQWMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO2FBQzNDO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1IsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDN0IsQ0FBQyxDQUFDLE9BQU8sR0FBRyxhQUFhLENBQUMsQ0FBQyxFQUFFLFdBQVcsRUFBRSxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxXQUFXLENBQUMsQ0FBQztnQkFDaEYsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUMvQixJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRTtvQkFDbkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUM7aUJBQ3ZCO2FBQ0o7UUFFTCxDQUFDLENBQUM7UUFFRixPQUFPLFVBQVUsQ0FBQztJQUN0QixDQUFDLENBQUM7QUFDTixDQUFDO0FBT0QsTUFBTSxVQUFVLHFCQUFxQixDQUFDLFVBQW1CO0lBQ3JELE9BQU8sVUFBQyxNQUFnQjtnQ0FDVCxZQUFZO1lBQ25CLElBQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLFlBQVksQ0FBQyxDQUFDO1lBQ25GLElBQU0sUUFBUSxHQUFHLFVBQVUsQ0FBQyxLQUFLLFlBQVksUUFBUSxDQUFDO1lBRXRELElBQUksQ0FBQyxRQUFRLEVBQUU7O2FBRWQ7WUFDRCxJQUFNLGNBQWMsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDO1lBQ3hDLFVBQVUsQ0FBQyxLQUFLLEdBQUc7Z0JBQVUsY0FBYztxQkFBZCxVQUFjLEVBQWQscUJBQWMsRUFBZCxJQUFjO29CQUFkLHlCQUFjOztnQkFDdkMsSUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFDO2dCQUVqRSxJQUFJO29CQUNBLE9BQU8sY0FBYyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7aUJBQzNDO2dCQUFDLE9BQU8sQ0FBQyxFQUFFO29CQUNSLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzdCLENBQUMsQ0FBQyxPQUFPLEdBQUcsYUFBYSxDQUFDLENBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsQ0FBQztvQkFDcEUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUNsQztZQUVMLENBQUMsQ0FBQztZQUNGLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUM7O1FBcEJ0RSxLQUEyQixVQUE2QixFQUE3QixLQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUE3QixjQUE2QixFQUE3QixJQUE2QjtZQUFuRCxJQUFNLFlBQVksU0FBQTtvQkFBWixZQUFZO1NBcUJ0QjtJQUNMLENBQUMsQ0FBQztBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuKiBDb3B5cmlnaHQgKEMpIE1vYmlsaXplLk5ldCA8aW5mb0Btb2JpbGl6ZS5uZXQ+IC0gQWxsIFJpZ2h0cyBSZXNlcnZlZFxyXG4qXHJcbiogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIE1vYmlsaXplIEZyYW1ld29ya3MsIHdoaWNoIGlzXHJcbiogcHJvcHJpZXRhcnkgYW5kIGNvbmZpZGVudGlhbC5cclxuKlxyXG4qIE5PVElDRTogIEFsbCBpbmZvcm1hdGlvbiBjb250YWluZWQgaGVyZWluIGlzLCBhbmQgcmVtYWluc1xyXG4qIHRoZSBwcm9wZXJ0eSBvZiBNb2JpbGl6ZS5OZXQgQ29ycG9yYXRpb24uXHJcbiogVGhlIGludGVsbGVjdHVhbCBhbmQgdGVjaG5pY2FsIGNvbmNlcHRzIGNvbnRhaW5lZCBoZXJlaW4gYXJlXHJcbiogcHJvcHJpZXRhcnkgdG8gTW9iaWxpemUuTmV0IENvcnBvcmF0aW9uIGFuZCBtYXkgYmUgY292ZXJlZFxyXG4qIGJ5IFUuUy4gUGF0ZW50cywgYW5kIGFyZSBwcm90ZWN0ZWQgYnkgdHJhZGUgc2VjcmV0IG9yIGNvcHlyaWdodCBsYXcuXHJcbiogRGlzc2VtaW5hdGlvbiBvZiB0aGlzIGluZm9ybWF0aW9uIG9yIHJlcHJvZHVjdGlvbiBvZiB0aGlzIG1hdGVyaWFsXHJcbiogaXMgc3RyaWN0bHkgZm9yYmlkZGVuIHVubGVzcyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24gaXMgb2J0YWluZWRcclxuKiBmcm9tIE1vYmlsaXplLk5ldCBDb3Jwb3JhdGlvbi5cclxuKlxyXG4qIFRoaXMgZmlsZSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBhbmQgY29uZGl0aW9ucyBkZWZpbmVkIGluXHJcbiogZmlsZSAnTElDRU5TRS50eHQnLCB3aGljaCBpcyBwYXJ0IG9mIHRoaXMgc291cmNlIGNvZGUgcGFja2FnZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbmltcG9ydCB7IFdNTG9nZ2VyIH0gZnJvbSAnQG1vYmlsaXplL2xvZ2dpbmcnO1xyXG5cclxuaW1wb3J0IHsgSW5qZWN0IH0gZnJvbSAnLi4vLi4vQXBwbGljYXRpb24nO1xyXG5pbXBvcnQgeyBDb25zdGFudHMsIEV2ZW50cyB9IGZyb20gJy4uLy4uL0NvbnRyYWN0L0FwcGxpY2F0aW9uJztcclxuXHJcbi8qKlxyXG4gKiBFcnJvciBjb2RlcyBjb25zdGFudHMgZm9yIGVhY2ggbW9kdWxlLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEVycm9yQ29kZXMge1xyXG4gICAgc3RhdGljIFdpbmZvcm1zID0gJzAxJztcclxuICAgIHN0YXRpYyBCYXNlQ29tcG9uZW50cyA9ICcwMic7XHJcbiAgICBzdGF0aWMgQW5ndWxhckNsaWVudCA9ICcwMyc7XHJcbiAgICBzdGF0aWMgQ2xpZW50Q29yZSA9ICcwNCc7XHJcbn1cclxuXHJcbi8qIHRzbGludDpkaXNhYmxlOiBuby1pbnZhbGlkLXRoaXMgKi9cclxuXHJcbi8qKlxyXG4gKiBUaGlzIGZ1bmN0aW9uIGdpdmVzIGZvcm1hdCB0byB0aGUgbWVzc2FnZSB0aGF0IHdpbGwgYmUgc2hvd2VkIGluIHRoZSBhbGVydCBjb21wb25lbnQuXHJcbiAqIEBwYXJhbSBlcnJvciBFcnJvciBtZXNzYWdlXHJcbiAqIEBwYXJhbSB0YXJnZXQgQ2xhc3MgdGhhdCBvd25zIHRoZSBtZXRob2RcclxuICogQHBhcmFtIG1ldGhvZCBNZXRob2QgdGhhdCByYWlzZSB0aGUgZXJyb3JcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBNZXNzYWdlRm9ybWF0KGVycm9yOiBFcnJvciwgbW9kdWxlQ29kZTogc3RyaW5nLCB0YXJnZXQ6IHN0cmluZywgbWV0aG9kOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgc3dpdGNoIChlcnJvci5uYW1lKSB7XHJcbiAgICAgICAgY2FzZSAnVHlwZUVycm9yJzpcclxuICAgICAgICAgICAgcmV0dXJuIGBbJHsgbW9kdWxlQ29kZSB9MTBdOiAkeyB0YXJnZXQgfS4keyBtZXRob2QgfWA7XHJcbiAgICAgICAgY2FzZSAnUmVmZXJlbmNlRXJyb3InOlxyXG4gICAgICAgICAgICByZXR1cm4gYFskeyBtb2R1bGVDb2RlIH0yMF06ICR7IHRhcmdldCB9LiR7IG1ldGhvZCB9YDtcclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICByZXR1cm4gYFskeyBtb2R1bGVDb2RlIH0zMF06ICR7IHRhcmdldCB9LiR7IG1ldGhvZCB9YDtcclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIFRoaXMgZnVuY3Rpb24gaXMgYSBkZWNvcmF0b3IgdGhhdCBoYW5kbGVzIGVycm9ycyBvZiBjbGFzcyBtZXRob2RzLlxyXG4gKiBAcGFyYW0gb25FeGNlcHRpb24gQ3VzdG9tIGV4Y2VwdGlvbiBtZXNzYWdlXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gRXhjZXB0aW9uSGFuZGxlcihvbkV4Y2VwdGlvbj86IHN0cmluZyk6IGFueSB7XHJcbiAgICByZXR1cm4gKHRhcmdldDogT2JqZWN0LCBwcm9wZXJ0eUtleTogc3RyaW5nLCBkZXNjcmlwdG9yOiBUeXBlZFByb3BlcnR5RGVzY3JpcHRvcjxhbnk+KSA9PiB7XHJcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxNZXRob2QgPSBkZXNjcmlwdG9yLnZhbHVlO1xyXG4gICAgICAgIGRlc2NyaXB0b3IudmFsdWUgPSBmdW5jdGlvbiAoLi4uYXJnczogYW55W10pOiB2b2lkIHtcclxuICAgICAgICAgICAgY29uc3QgZXZlbnQgPSBJbmplY3QuSW5zdGFuY2UucmVzb2x2ZShDb25zdGFudHMuRXZlbnRBZ2dyZWdhdG9yKTtcclxuICAgICAgICAgICAvKiBjOCBpZ25vcmUgc3RhcnQgKi9cclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBvcmlnaW5hbE1ldGhvZC5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgV01Mb2dnZXIuaW5zdGFuY2UoKS5lcnJvcihlKTtcclxuICAgICAgICAgICAgICAgIGUubWVzc2FnZSA9IE1lc3NhZ2VGb3JtYXQoZSwgb25FeGNlcHRpb24sIHRhcmdldC5jb25zdHJ1Y3Rvci5uYW1lLCBwcm9wZXJ0eUtleSk7XHJcbiAgICAgICAgICAgICAgICBldmVudC5wdWJsaXNoKEV2ZW50cy5FcnJvciwgZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpc1tvbkV4Y2VwdGlvbl0pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzW29uRXhjZXB0aW9uXSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8qIGM4IGlnbm9yZSBzdG9wICovXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGRlc2NyaXB0b3I7XHJcbiAgICB9O1xyXG59XHJcblxyXG4vKipcclxuICogVGhpcyBmdW5jdGlvbiBpcyBhIGNsYXNzIGRlY29yYXRvciB0aGF0IGhhbmRsZXMgZXJyb3JzIG9mIGV2ZXJ5IG1ldGhvZCB3aXRoaW4gdGhlIHRhcmdldCxcclxuICogaXQgd2lsbCBzaG93IHRoZSBlcnJvciBpbiB0aGUgbG9nZ2VyLCBhbmQgd2lsbCBwdWJsaXNoIGl0IGluIHRoZSBFdmVudHMuRXJyb3IuXHJcbiAqIEBwYXJhbSB0YXJnZXQgVGhlIGNsYXNzIHRhcmdldCB0byBhcHBseSB0aGUgZGVjb3JhdG9yXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gRXhjZXB0aW9uSGFuZGxlckNsYXNzKG1vZHVsZUNvZGU/OiBzdHJpbmcpOiBhbnkge1xyXG4gICAgcmV0dXJuICh0YXJnZXQ6IEZ1bmN0aW9uKSA9PiB7XHJcbiAgICAgICAgZm9yIChjb25zdCBwcm9wZXJ0eU5hbWUgb2YgT2JqZWN0LmtleXModGFyZ2V0LnByb3RvdHlwZSkpIHtcclxuICAgICAgICAgICAgY29uc3QgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LnByb3RvdHlwZSwgcHJvcGVydHlOYW1lKTtcclxuICAgICAgICAgICAgY29uc3QgaXNNZXRob2QgPSBkZXNjcmlwdG9yLnZhbHVlIGluc3RhbmNlb2YgRnVuY3Rpb247XHJcbiAgICAgICAgICAgIC8qIGM4IGlnbm9yZSBuZXh0IDMgKi9cclxuICAgICAgICAgICAgaWYgKCFpc01ldGhvZCkge1xyXG4gICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxNZXRob2QgPSBkZXNjcmlwdG9yLnZhbHVlO1xyXG4gICAgICAgICAgICBkZXNjcmlwdG9yLnZhbHVlID0gZnVuY3Rpb24gKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBldmVudCA9IEluamVjdC5JbnN0YW5jZS5yZXNvbHZlKENvbnN0YW50cy5FdmVudEFnZ3JlZ2F0b3IpO1xyXG4gICAgICAgICAgICAvKiBjOCBpZ25vcmUgc3RhcnQgKi9cclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsTWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIFdNTG9nZ2VyLmluc3RhbmNlKCkuZXJyb3IoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5tZXNzYWdlID0gTWVzc2FnZUZvcm1hdChlLCBtb2R1bGVDb2RlLCB0YXJnZXQubmFtZSwgcHJvcGVydHlOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBldmVudC5wdWJsaXNoKEV2ZW50cy5FcnJvciwgZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8qIGM4IGlnbm9yZSBzdG9wICovXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQucHJvdG90eXBlLCBwcm9wZXJ0eU5hbWUsIGRlc2NyaXB0b3IpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn1cclxuIl19","map":null,"metadata":{},"sourceType":"module"}