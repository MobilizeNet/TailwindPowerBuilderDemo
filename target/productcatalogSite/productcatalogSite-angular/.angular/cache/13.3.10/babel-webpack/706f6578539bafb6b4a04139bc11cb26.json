{"ast":null,"code":"import { setDefaultOptions, deepExtend, defined, getSpacing } from '../../common';\nimport { Box } from '../../core';\nimport { BLACK } from '../../common/constants';\nimport { BAR_POINTER } from '../constants';\nimport Pointer from '../pointer';\n\nclass LinearPointer extends Pointer {\n  constructor(scale, options) {\n    super(scale, options);\n    this.options = deepExtend({\n      track: {\n        visible: defined(options.track)\n      }\n    }, this.options);\n  }\n\n  reflow() {\n    const {\n      options,\n      scale\n    } = this;\n    const {\n      mirror,\n      vertical\n    } = scale.options;\n    const scaleLine = scale.lineBox();\n    const trackSize = options.track.size || options.size;\n    const pointerHalfSize = options.size / 2;\n    const margin = getSpacing(options.margin);\n    let space = vertical ? margin[mirror ? \"left\" : \"right\"] : margin[mirror ? \"bottom\" : \"top\"];\n    let pointerBox, pointerRangeBox, trackBox;\n    space = mirror ? -space : space;\n\n    if (vertical) {\n      trackBox = new Box(scaleLine.x1 + space, scaleLine.y1, scaleLine.x1 + space, scaleLine.y2);\n\n      if (mirror) {\n        trackBox.x1 -= trackSize;\n      } else {\n        trackBox.x2 += trackSize;\n      }\n\n      if (options.shape !== BAR_POINTER) {\n        pointerRangeBox = new Box(scaleLine.x2 + space, scaleLine.y1 - pointerHalfSize, scaleLine.x2 + space, scaleLine.y2 + pointerHalfSize);\n        pointerBox = pointerRangeBox;\n      }\n    } else {\n      trackBox = new Box(scaleLine.x1, scaleLine.y1 - space, scaleLine.x2, scaleLine.y1 - space);\n\n      if (mirror) {\n        trackBox.y2 += trackSize;\n      } else {\n        trackBox.y1 -= trackSize;\n      }\n\n      if (options.shape !== BAR_POINTER) {\n        pointerRangeBox = new Box(scaleLine.x1 - pointerHalfSize, scaleLine.y1 - space, scaleLine.x2 + pointerHalfSize, scaleLine.y1 - space);\n        pointerBox = pointerRangeBox;\n      }\n    }\n\n    this.trackBox = trackBox;\n    this.pointerRangeBox = pointerRangeBox;\n    this.box = pointerBox || trackBox.clone().pad(options.border.width);\n  }\n\n  getElementOptions() {\n    const options = this.options;\n    return {\n      fill: {\n        color: options.color,\n        opacity: options.opacity\n      },\n      stroke: defined(options.border) ? {\n        color: options.border.width ? options.border.color || options.color : \"\",\n        width: options.border.width,\n        dashType: options.border.dashType,\n        opacity: options.opacity\n      } : null\n    };\n  }\n\n  _margin() {\n    const {\n      scale,\n      options\n    } = this;\n    const {\n      mirror,\n      vertical\n    } = scale.options;\n    const margin = getSpacing(options.margin);\n    const space = vertical ? margin[mirror ? \"left\" : \"right\"] : margin[mirror ? \"bottom\" : \"top\"];\n    return space;\n  }\n\n}\n\nsetDefaultOptions(LinearPointer, {\n  shape: BAR_POINTER,\n  track: {\n    border: {\n      width: 1\n    }\n  },\n  color: BLACK,\n  border: {\n    width: 1\n  },\n  opacity: 1,\n  margin: getSpacing(3),\n  animation: {\n    type: BAR_POINTER\n  },\n  visible: true\n});\nexport default LinearPointer;","map":null,"metadata":{},"sourceType":"module"}