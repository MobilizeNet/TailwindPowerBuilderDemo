{"ast":null,"code":"import { Class, addClass, deepExtend, defined } from '../../common';\nimport { Extent } from './../extent';\nimport { getSupportedFeatures } from '../utils';\nexport class Layer extends Class {\n  constructor(map, options) {\n    super();\n    this.support = getSupportedFeatures();\n\n    this._initOptions(options);\n\n    this.map = map;\n    let element = document.createElement(\"div\");\n    addClass(element, \"k-layer\");\n    element.style.zIndex = this.options.zIndex;\n    element.style.opacity = this.options.opacity;\n    this.element = element;\n    map.scrollElement.appendChild(this.element);\n    this._beforeReset = this._beforeReset.bind(this);\n    this._reset = this._reset.bind(this);\n    this._resize = this._resize.bind(this);\n    this._panEnd = this._panEnd.bind(this);\n\n    this._activate();\n\n    this._updateAttribution();\n  }\n\n  destroy() {\n    this._deactivate();\n  }\n\n  _initOptions(options) {\n    this.options = deepExtend({}, this.options, options);\n  }\n\n  show() {\n    this.reset();\n\n    this._activate();\n\n    this._applyExtent(true);\n  }\n\n  hide() {\n    this._deactivate();\n\n    this._setVisibility(false);\n  }\n\n  reset() {\n    this._beforeReset();\n\n    this._reset();\n  }\n\n  _reset() {\n    this._applyExtent();\n  }\n\n  _beforeReset() {}\n\n  _resize() {}\n\n  _panEnd() {\n    this._applyExtent();\n  }\n\n  _applyExtent() {\n    let options = this.options;\n    let zoom = this.map.zoom();\n    let matchMinZoom = !defined(options.minZoom) || zoom >= options.minZoom;\n    let matchMaxZoom = !defined(options.maxZoom) || zoom <= options.maxZoom;\n    let extent = Extent.create(options.extent);\n    let inside = !extent || extent.overlaps(this.map.extent());\n\n    this._setVisibility(matchMinZoom && matchMaxZoom && inside);\n  }\n\n  _setVisibility(visible) {\n    this.element.style.display = visible ? '' : 'none';\n  }\n\n  _activate() {\n    let map = this.map;\n\n    this._deactivate();\n\n    map.bind('beforeReset', this._beforeReset);\n    map.bind('reset', this._reset);\n    map.bind('resize', this._resize);\n    map.bind('panEnd', this._panEnd);\n  }\n\n  _deactivate() {\n    let map = this.map;\n    map.unbind('beforeReset', this._beforeReset);\n    map.unbind('reset', this._reset);\n    map.unbind('resize', this._resize);\n    map.unbind('panEnd', this._panEnd);\n  }\n\n  _updateAttribution() {\n    const attribution = this.map.attribution;\n\n    if (attribution) {\n      attribution.add(this.options.attribution);\n    }\n  }\n\n  _readData() {\n    const data = this.options.data || [];\n    return data;\n  }\n\n  _hasData() {\n    return this._data && this._data.length > 0;\n  }\n\n  _layerIndex() {\n    const layers = this.map.layers || [];\n    return layers.indexOf(this);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}