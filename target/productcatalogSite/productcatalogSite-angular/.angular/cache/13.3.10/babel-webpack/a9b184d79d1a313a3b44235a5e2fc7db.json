{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { WMLogger } from '@mobilize/logging';\nimport { Order } from '../../../Contract';\nimport { ErrorCodes, ExceptionHandlerClass } from '../../../System/Aop';\n\nvar ReferenceBehavior = function () {\n  function ReferenceBehavior() {}\n\n  ReferenceBehavior.prototype.apply = function (model, root) {\n    if (!model || !model.references) {\n      return;\n    }\n\n    this.addReferences(model, model.references, root);\n  };\n\n  ReferenceBehavior.prototype.addReferences = function (model, references, buffer) {\n    for (var refName in references) {\n      if (references.hasOwnProperty(refName)) {\n        var adjacent = buffer.getModel(references[refName]);\n\n        if (adjacent) {\n          model.addReference(refName, adjacent);\n          adjacent.addReferencedBy(model.UniqueID, refName);\n        } else {\n          WMLogger.instance().warn(\"warn. The model \" + model + \" does not have a reference with the name:,\\n                    \" + refName + \". This is possibly an error in the response of the back end\");\n        }\n      }\n    }\n  };\n\n  Object.defineProperty(ReferenceBehavior.prototype, \"Order\", {\n    get: function () {\n      return Order.ORD;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  ReferenceBehavior = __decorate([ExceptionHandlerClass(ErrorCodes.ClientCore)], ReferenceBehavior);\n  return ReferenceBehavior;\n}();\n\nexport { ReferenceBehavior }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVmZXJlbmNlQmVoYXZpb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvdjUvQ29yZS9CZWhhdmlvcnMvUmVmZXJlbmNlQmVoYXZpb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBa0JBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUU3QyxPQUFPLEVBQW9DLEtBQUssRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzVFLE9BQU8sRUFBRSxVQUFVLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUd4RTtJQUFBO0lBNkJBLENBQUM7SUEzQkcsaUNBQUssR0FBTCxVQUFNLEtBQWEsRUFBRSxJQUFhO1FBQzlCLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFO1lBQzdCLE9BQU87U0FDVjtRQUVELElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVPLHlDQUFhLEdBQXJCLFVBQXNCLEtBQWEsRUFBRSxVQUEwQyxFQUFFLE1BQWU7UUFDNUYsS0FBSyxJQUFNLE9BQU8sSUFBSSxVQUFVLEVBQUU7WUFDOUIsSUFBSSxVQUFVLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNwQyxJQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2dCQUN0RCxJQUFJLFFBQVEsRUFBRTtvQkFDVixLQUFLLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztvQkFFdEMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO2lCQUNyRDtxQkFBTTtvQkFDSCxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLHFCQUFtQixLQUFLLHdFQUMvQyxPQUFPLGdFQUE2RCxDQUFDLENBQUM7aUJBQzNFO2FBQ0o7U0FDSjtJQUNMLENBQUM7SUFFRCxzQkFBSSxvQ0FBSzthQUFUO1lBQ0ksT0FBTyxLQUFLLENBQUMsR0FBRyxDQUFDO1FBQ3JCLENBQUM7OztPQUFBO0lBNUJRLGlCQUFpQjtRQUQ3QixxQkFBcUIsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDO09BQ2hDLGlCQUFpQixDQTZCN0I7SUFBRCx3QkFBQztDQUFBLEFBN0JELElBNkJDO1NBN0JZLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4qIENvcHlyaWdodCAoQykgTW9iaWxpemUuTmV0IDxpbmZvQG1vYmlsaXplLm5ldD4gLSBBbGwgUmlnaHRzIFJlc2VydmVkXHJcbipcclxuKiBUaGlzIGZpbGUgaXMgcGFydCBvZiB0aGUgTW9iaWxpemUgRnJhbWV3b3Jrcywgd2hpY2ggaXNcclxuKiBwcm9wcmlldGFyeSBhbmQgY29uZmlkZW50aWFsLlxyXG4qXHJcbiogTk9USUNFOiAgQWxsIGluZm9ybWF0aW9uIGNvbnRhaW5lZCBoZXJlaW4gaXMsIGFuZCByZW1haW5zXHJcbiogdGhlIHByb3BlcnR5IG9mIE1vYmlsaXplLk5ldCBDb3Jwb3JhdGlvbi5cclxuKiBUaGUgaW50ZWxsZWN0dWFsIGFuZCB0ZWNobmljYWwgY29uY2VwdHMgY29udGFpbmVkIGhlcmVpbiBhcmVcclxuKiBwcm9wcmlldGFyeSB0byBNb2JpbGl6ZS5OZXQgQ29ycG9yYXRpb24gYW5kIG1heSBiZSBjb3ZlcmVkXHJcbiogYnkgVS5TLiBQYXRlbnRzLCBhbmQgYXJlIHByb3RlY3RlZCBieSB0cmFkZSBzZWNyZXQgb3IgY29weXJpZ2h0IGxhdy5cclxuKiBEaXNzZW1pbmF0aW9uIG9mIHRoaXMgaW5mb3JtYXRpb24gb3IgcmVwcm9kdWN0aW9uIG9mIHRoaXMgbWF0ZXJpYWxcclxuKiBpcyBzdHJpY3RseSBmb3JiaWRkZW4gdW5sZXNzIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbiBpcyBvYnRhaW5lZFxyXG4qIGZyb20gTW9iaWxpemUuTmV0IENvcnBvcmF0aW9uLlxyXG4qXHJcbiogVGhpcyBmaWxlIGlzIHN1YmplY3QgdG8gdGhlIHRlcm1zIGFuZCBjb25kaXRpb25zIGRlZmluZWQgaW5cclxuKiBmaWxlICdMSUNFTlNFLnR4dCcsIHdoaWNoIGlzIHBhcnQgb2YgdGhpcyBzb3VyY2UgY29kZSBwYWNrYWdlLlxyXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuaW1wb3J0IHsgV01Mb2dnZXIgfSBmcm9tICdAbW9iaWxpemUvbG9nZ2luZyc7XHJcblxyXG5pbXBvcnQgeyBJQ2xpZW50QmVoYXZpb3IsIElFbnRpdHksIElNb2RlbCwgT3JkZXIgfSBmcm9tICcuLi8uLi8uLi9Db250cmFjdCc7XHJcbmltcG9ydCB7IEVycm9yQ29kZXMsIEV4Y2VwdGlvbkhhbmRsZXJDbGFzcyB9IGZyb20gJy4uLy4uLy4uL1N5c3RlbS9Bb3AnO1xyXG5cclxuQEV4Y2VwdGlvbkhhbmRsZXJDbGFzcyhFcnJvckNvZGVzLkNsaWVudENvcmUpXHJcbmV4cG9ydCBjbGFzcyBSZWZlcmVuY2VCZWhhdmlvciBpbXBsZW1lbnRzIElDbGllbnRCZWhhdmlvciB7XHJcblxyXG4gICAgYXBwbHkobW9kZWw6IElNb2RlbCwgcm9vdDogSUVudGl0eSk6IHZvaWQge1xyXG4gICAgICAgIGlmICghbW9kZWwgfHwgIW1vZGVsLnJlZmVyZW5jZXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5hZGRSZWZlcmVuY2VzKG1vZGVsLCBtb2RlbC5yZWZlcmVuY2VzLCByb290KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFkZFJlZmVyZW5jZXMobW9kZWw6IElNb2RlbCwgcmVmZXJlbmNlczogeyBbcHJvcGVydHk6IHN0cmluZ106IHN0cmluZyB9LCBidWZmZXI6IElFbnRpdHkpOiB2b2lkIHtcclxuICAgICAgICBmb3IgKGNvbnN0IHJlZk5hbWUgaW4gcmVmZXJlbmNlcykge1xyXG4gICAgICAgICAgICBpZiAocmVmZXJlbmNlcy5oYXNPd25Qcm9wZXJ0eShyZWZOYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYWRqYWNlbnQgPSBidWZmZXIuZ2V0TW9kZWwocmVmZXJlbmNlc1tyZWZOYW1lXSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoYWRqYWNlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5hZGRSZWZlcmVuY2UocmVmTmFtZSwgYWRqYWNlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgbGluayBpbiB0aGUgcmVmZXJlbmNlZCBtb2RlbFxyXG4gICAgICAgICAgICAgICAgICAgIGFkamFjZW50LmFkZFJlZmVyZW5jZWRCeShtb2RlbC5VbmlxdWVJRCwgcmVmTmFtZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIFdNTG9nZ2VyLmluc3RhbmNlKCkud2Fybihgd2Fybi4gVGhlIG1vZGVsICR7bW9kZWx9IGRvZXMgbm90IGhhdmUgYSByZWZlcmVuY2Ugd2l0aCB0aGUgbmFtZTosXHJcbiAgICAgICAgICAgICAgICAgICAgJHtyZWZOYW1lfS4gVGhpcyBpcyBwb3NzaWJseSBhbiBlcnJvciBpbiB0aGUgcmVzcG9uc2Ugb2YgdGhlIGJhY2sgZW5kYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IE9yZGVyKCk6IE9yZGVyIHtcclxuICAgICAgICByZXR1cm4gT3JkZXIuT1JEO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==","map":null,"metadata":{},"sourceType":"module"}