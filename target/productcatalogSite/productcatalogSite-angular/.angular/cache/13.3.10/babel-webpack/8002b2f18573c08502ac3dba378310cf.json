{"ast":null,"code":"import { drawing as draw } from '@progress/kendo-drawing';\nimport { alignPathToPixel } from '../common';\nimport { ChartElement } from '../core';\n\nclass ChartContainer extends ChartElement {\n  constructor(options, pane) {\n    super(options);\n    this.pane = pane;\n  }\n\n  shouldClip() {\n    const children = this.children;\n    const length = children.length;\n\n    for (let i = 0; i < length; i++) {\n      if (children[i].options.clip === true) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  _clipBox() {\n    return this.pane.chartsBox();\n  }\n\n  createVisual() {\n    this.visual = new draw.Group({\n      zIndex: 0\n    });\n\n    if (this.shouldClip()) {\n      const clipBox = this.clipBox = this._clipBox();\n\n      const clipRect = clipBox.toRect();\n      const clipPath = draw.Path.fromRect(clipRect);\n      alignPathToPixel(clipPath);\n      this.visual.clip(clipPath);\n      this.unclipLabels();\n    }\n  }\n\n  stackRoot() {\n    return this;\n  }\n\n  unclipLabels() {\n    const {\n      children: charts,\n      clipBox\n    } = this;\n\n    for (let i = 0; i < charts.length; i++) {\n      const points = charts[i].points || {};\n      const length = points.length;\n\n      for (let j = 0; j < length; j++) {\n        const point = points[j];\n\n        if (point && point.visible !== false && point.overlapsBox && point.overlapsBox(clipBox)) {\n          if (point.unclipElements) {\n            point.unclipElements();\n          } else {\n            const {\n              label,\n              note\n            } = point;\n\n            if (label && label.options.visible) {\n              if (label.alignToClipBox) {\n                label.alignToClipBox(clipBox);\n              }\n\n              label.options.noclip = true;\n            }\n\n            if (note && note.options.visible) {\n              note.options.noclip = true;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  destroy() {\n    super.destroy();\n    delete this.parent;\n  }\n\n}\n\nChartContainer.prototype.isStackRoot = true;\nexport default ChartContainer;","map":null,"metadata":{},"sourceType":"module"}