{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1260);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1065:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.dropdownlist\");\n    /***/\n  },\n\n  /***/\n  1260:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1261), __webpack_require__(1065), __webpack_require__(1262), __webpack_require__(1263)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      var __meta__ = {\n        // jshint ignore:line\n        id: \"filebrowser\",\n        name: \"FileBrowser\",\n        category: \"web\",\n        description: \"\",\n        hidden: true,\n        depends: [\"selectable\", \"listview\", \"dropdownlist\", \"upload\", \"breadcrumb\"]\n      };\n\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            Widget = kendo.ui.Widget,\n            isPlainObject = $.isPlainObject,\n            extend = $.extend,\n            placeholderSupported = kendo.support.placeholder,\n            isFunction = kendo.isFunction,\n            trimSlashesRegExp = /(^\\/|\\/$)/g,\n            CHANGE = \"change\",\n            APPLY = \"apply\",\n            ERROR = \"error\",\n            CLICK = \"click\",\n            NS = \".kendoFileBrowser\",\n            SEARCHBOXNS = \".kendoSearchBox\",\n            NAMEFIELD = \"name\",\n            SIZEFIELD = \"size\",\n            TYPEFIELD = \"type\",\n            DEFAULTSORTORDER = {\n          field: TYPEFIELD,\n          dir: \"asc\"\n        },\n            EMPTYTILE = kendo.template('<div class=\"k-listview-item k-listview-item-empty\"><span class=\"k-file-preview\"><span class=\"k-file-icon k-icon k-i-none\"></span></span><span class=\"k-file-name\">${text}</span></div>'),\n            TOOLBARTMPL = '<div class=\"k-widget k-filebrowser-toolbar k-toolbar k-floatwrap\">' + '# if (showCreate) { #' + '<button type=\"button\" class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-icon-button\"><span class=\"k-i-button-icon k-icon k-i-folder-add\"></span></button>' + '# } #' + '# if (showUpload) { # ' + '<div class=\"k-widget k-upload\">' + '<div class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-upload-button\">' + '<span class=\"k-button-icon k-icon k-i-plus\"></span>' + '<span class=\"k-button-text\">#=messages.uploadFile#</span>' + '<input type=\"file\" name=\"file\" />' + '</div>' + '</div>' + '# } #' + '# if (showDelete) { #' + '<button type=\"button\" class=\"k-button k-button-md k-rounded-md k-button-solid k-button-solid-base k-icon-button k-disabled\"><span class=\"k-button-icon k-icon k-i-close\"></span></button>' + '# } #' + '<div class=\"k-tiles-arrange\">' + '<label>#=messages.orderBy#: <select></select></label>' + '</div>' + '<span class=\"k-toolbar-spacer\"></span>' + '<input data-role=\"searchbox\" />' + '</div>';\n        extend(true, kendo.data, {\n          schemas: {\n            \"filebrowser\": {\n              data: function (data) {\n                return data.items || data || [];\n              },\n              model: {\n                id: \"name\",\n                fields: {\n                  name: \"name\",\n                  size: \"size\",\n                  type: \"type\"\n                }\n              }\n            }\n          }\n        });\n        extend(true, kendo.data, {\n          transports: {\n            \"filebrowser\": kendo.data.RemoteTransport.extend({\n              init: function (options) {\n                kendo.data.RemoteTransport.fn.init.call(this, $.extend(true, {}, this.options, options));\n              },\n              _call: function (type, options) {\n                options.data = $.extend({}, options.data, {\n                  path: this.options.path()\n                });\n\n                if (isFunction(this.options[type])) {\n                  this.options[type].call(this, options);\n                } else {\n                  kendo.data.RemoteTransport.fn[type].call(this, options);\n                }\n              },\n              read: function (options) {\n                this._call(\"read\", options);\n              },\n              create: function (options) {\n                this._call(\"create\", options);\n              },\n              destroy: function (options) {\n                this._call(\"destroy\", options);\n              },\n              update: function () {//updates are handled by the upload\n              },\n              options: {\n                read: {\n                  type: \"POST\"\n                },\n                update: {\n                  type: \"POST\"\n                },\n                create: {\n                  type: \"POST\"\n                },\n                destroy: {\n                  type: \"POST\"\n                }\n              }\n            })\n          }\n        });\n\n        function bindDragEventWrappers(element, onDragEnter, onDragLeave) {\n          var hideInterval, lastDrag;\n          element.on(\"dragenter\" + NS, function () {\n            onDragEnter();\n            lastDrag = new Date();\n\n            if (!hideInterval) {\n              hideInterval = setInterval(function () {\n                var sinceLastDrag = new Date() - lastDrag;\n\n                if (sinceLastDrag > 100) {\n                  onDragLeave();\n                  clearInterval(hideInterval);\n                  hideInterval = null;\n                }\n              }, 100);\n            }\n          }).on(\"dragover\" + NS, function () {\n            lastDrag = new Date();\n          });\n        }\n\n        function concatPaths(path, name) {\n          if (path === undefined || !path.match(/\\/$/)) {\n            path = (path || \"\") + \"/\";\n          }\n\n          return path + name;\n        }\n\n        function sizeFormatter(value) {\n          if (!value) {\n            return \"\";\n          }\n\n          var suffix = \" bytes\";\n\n          if (value >= 1073741824) {\n            suffix = \" GB\";\n            value /= 1073741824;\n          } else if (value >= 1048576) {\n            suffix = \" MB\";\n            value /= 1048576;\n          } else if (value >= 1024) {\n            suffix = \" KB\";\n            value /= 1024;\n          }\n\n          return Math.round(value * 100) / 100 + suffix;\n        }\n\n        function fieldName(fields, name) {\n          var descriptor = fields[name];\n\n          if (isPlainObject(descriptor)) {\n            return descriptor.from || descriptor.field || name;\n          }\n\n          return descriptor;\n        }\n\n        var FileBrowser = Widget.extend({\n          init: function (element, options) {\n            var that = this;\n            options = options || {};\n            Widget.fn.init.call(that, element, options);\n            that.element.addClass(\"k-filebrowser\");\n            that.element.on(CLICK + NS, \".k-filebrowser-toolbar button:not(.k-disabled):has(.k-i-close)\", that._deleteClick.bind(that)).on(CLICK + NS, \".k-filebrowser-toolbar button:not(.k-disabled):has(.k-i-folder-add)\", that._addClick.bind(that)).on(\"keydown\" + NS, \".k-listview-item.k-state-selected input\", that._directoryKeyDown.bind(that)).on(\"blur\" + NS, \".k-listview-item.k-state-selected input\", that._directoryBlur.bind(that));\n\n            that._dataSource();\n\n            that.refresh();\n            that.path(that.options.path);\n          },\n          options: {\n            name: \"FileBrowser\",\n            messages: {\n              uploadFile: \"Upload\",\n              orderBy: \"Arrange by\",\n              orderByName: \"Name\",\n              orderBySize: \"Size\",\n              directoryNotFound: \"A directory with this name was not found.\",\n              emptyFolder: \"Empty Folder\",\n              deleteFile: 'Are you sure you want to delete \"{0}\"?',\n              invalidFileType: \"The selected file \\\"{0}\\\" is not valid. Supported file types are {1}.\",\n              overwriteFile: \"A file with name \\\"{0}\\\" already exists in the current directory. Do you want to overwrite it?\",\n              dropFilesHere: \"drop file here to upload\",\n              search: \"Search\"\n            },\n            transport: {},\n            path: \"/\",\n            fileTypes: \"*.*\"\n          },\n          events: [ERROR, CHANGE, APPLY],\n          destroy: function () {\n            var that = this;\n            Widget.fn.destroy.call(that);\n            that.dataSource.unbind(ERROR, that._errorHandler);\n            that.element.add(that.list).add(that.toolbar).off(NS);\n            kendo.destroy(that.element);\n          },\n          value: function () {\n            var that = this,\n                selected = that._selectedItem(),\n                path,\n                fileUrl = that.options.transport.fileUrl;\n\n            if (selected && selected.get(TYPEFIELD) === \"f\") {\n              path = concatPaths(that.path(), selected.get(NAMEFIELD)).replace(trimSlashesRegExp, \"\");\n\n              if (fileUrl) {\n                path = isFunction(fileUrl) ? fileUrl(path) : kendo.format(fileUrl, encodeURIComponent(path));\n              }\n\n              return path;\n            }\n          },\n          _selectedItem: function () {\n            var listView = this.listView,\n                selected = listView.select();\n\n            if (selected.length) {\n              return this.dataSource.getByUid(selected.attr(kendo.attr(\"uid\")));\n            }\n          },\n          _toolbar: function () {\n            var that = this,\n                template = kendo.template(TOOLBARTMPL),\n                messages = that.options.messages,\n                arrangeBy = [{\n              text: messages.orderByName,\n              value: \"name\"\n            }, {\n              text: messages.orderBySize,\n              value: \"size\"\n            }];\n            that.toolbar = $(template({\n              messages: messages,\n              showUpload: that.options.transport.uploadUrl,\n              showCreate: that.options.transport.create,\n              showDelete: that.options.transport.destroy\n            })).appendTo(that.element).find(\".k-upload input\").kendoUpload({\n              multiple: false,\n              localization: {\n                dropFilesHere: messages.dropFilesHere\n              },\n              async: {\n                saveUrl: that.options.transport.uploadUrl,\n                autoUpload: true\n              },\n              upload: that._fileUpload.bind(that),\n              error: function (e) {\n                that._error({\n                  xhr: e.XMLHttpRequest,\n                  status: \"error\"\n                });\n              }\n            }).end();\n            that.upload = that.toolbar.find(\".k-upload input\").data(\"kendoUpload\");\n            that.arrangeBy = that.toolbar.find(\".k-tiles-arrange select\").kendoDropDownList({\n              dataSource: arrangeBy,\n              dataTextField: \"text\",\n              dataValueField: \"value\",\n              change: function () {\n                that.orderBy(this.value());\n              }\n            }).data(\"kendoDropDownList\");\n            that.searchBox = that.toolbar.find(\"input[data-role='searchbox']\").kendoSearchBox({\n              label: that.options.messages.search,\n              change: function () {\n                that.search(this.value());\n              }\n            }).data(\"kendoSearchBox\");\n\n            that._attachDropzoneEvents();\n          },\n          _attachDropzoneEvents: function () {\n            var that = this;\n\n            if (that.options.transport.uploadUrl) {\n              bindDragEventWrappers($(document.documentElement), that._dropEnter.bind(that), that._dropLeave.bind(that));\n              that._scrollHandler = that._positionDropzone.bind(that);\n            }\n          },\n          _dropEnter: function () {\n            this._positionDropzone();\n\n            $(document).on(\"scroll\" + NS, this._scrollHandler);\n          },\n          _dropLeave: function () {\n            this._removeDropzone();\n\n            $(document).off(\"scroll\" + NS, this._scrollHandler);\n          },\n          _positionDropzone: function () {\n            var that = this,\n                element = that.element,\n                offset = element.offset();\n            that.toolbar.find(\".k-dropzone\").addClass(\"k-filebrowser-dropzone\").offset(offset).css({\n              width: element[0].clientWidth,\n              height: element[0].clientHeight,\n              lineHeight: element[0].clientHeight + \"px\"\n            });\n          },\n          _removeDropzone: function () {\n            this.toolbar.find(\".k-dropzone\").removeClass(\"k-filebrowser-dropzone\").css({\n              width: \"\",\n              height: \"\",\n              lineHeight: \"\",\n              top: \"\",\n              left: \"\"\n            });\n          },\n          _deleteClick: function () {\n            var that = this,\n                item = that.listView.select(),\n                message = kendo.format(that.options.messages.deleteFile, item.find(\".k-file-name\").text());\n\n            if (item.length && that._showMessage(message, \"confirm\")) {\n              that.listView.remove(item);\n            }\n          },\n          _addClick: function () {\n            this.createDirectory();\n          },\n          _getFieldName: function (name) {\n            return fieldName(this.dataSource.reader.model.fields, name);\n          },\n          _fileUpload: function (e) {\n            var that = this,\n                options = that.options,\n                fileTypes = options.fileTypes,\n                filterRegExp = new RegExp((\"(\" + fileTypes.split(\",\").join(\")|(\") + \")\").replace(/\\*\\./g, \".*.\"), \"i\"),\n                fileName = e.files[0].name,\n                fileSize = e.files[0].size,\n                fileNameField = NAMEFIELD,\n                sizeField = SIZEFIELD,\n                file;\n\n            if (filterRegExp.test(fileName)) {\n              e.data = {\n                path: that.path()\n              };\n              file = that._createFile(fileName, fileSize);\n\n              if (!file) {\n                e.preventDefault();\n              } else {\n                that.upload.one(\"success\", function (e) {\n                  var model = that._insertFileToList(file);\n\n                  if (model._override) {\n                    model.set(fileNameField, e.response[that._getFieldName(fileNameField)]);\n                    model.set(sizeField, e.response[that._getFieldName(sizeField)]);\n                    that.listView.dataSource.pushUpdate(model);\n                  }\n\n                  that._tiles = that.listView.items().filter(\"[\" + kendo.attr(\"type\") + \"=f]\");\n                });\n              }\n            } else {\n              e.preventDefault();\n\n              that._showMessage(kendo.format(options.messages.invalidFileType, fileName, fileTypes));\n            }\n          },\n          _findFile: function (name) {\n            var data = this.dataSource.data(),\n                idx,\n                result,\n                typeField = TYPEFIELD,\n                nameField = NAMEFIELD,\n                length;\n            name = name.toLowerCase();\n\n            for (idx = 0, length = data.length; idx < length; idx++) {\n              if (data[idx].get(typeField) === \"f\" && data[idx].get(nameField).toLowerCase() === name) {\n                result = data[idx];\n                break;\n              }\n            }\n\n            return result;\n          },\n          _createFile: function (fileName, fileSize) {\n            var that = this,\n                model = {},\n                typeField = TYPEFIELD,\n                file = that._findFile(fileName);\n\n            if (file) {\n              if (!that._showMessage(kendo.format(that.options.messages.overwriteFile, fileName), \"confirm\")) {\n                return null;\n              } else {\n                file._override = true;\n                return file;\n              }\n            }\n\n            model[typeField] = \"f\";\n            model[NAMEFIELD] = fileName;\n            model[SIZEFIELD] = fileSize;\n            return model;\n          },\n          _insertFileToList: function (model) {\n            var index;\n\n            if (model._override) {\n              return model;\n            }\n\n            var dataSource = this.dataSource;\n            var view = dataSource.view();\n\n            for (var i = 0, length = view.length; i < length; i++) {\n              if (view[i].get(TYPEFIELD) === \"f\") {\n                index = i;\n                break;\n              }\n            }\n\n            return dataSource.insert(++index, model);\n          },\n          createDirectory: function () {\n            var that = this,\n                idx,\n                length,\n                lastDirectoryIdx = 0,\n                typeField = TYPEFIELD,\n                nameField = NAMEFIELD,\n                view = that.dataSource.data(),\n                name = that._nameDirectory(),\n                model = new that.dataSource.reader.model();\n\n            for (idx = 0, length = view.length; idx < length; idx++) {\n              if (view[idx].get(typeField) === \"d\") {\n                lastDirectoryIdx = idx;\n              }\n            }\n\n            model.set(typeField, \"d\");\n            model.set(nameField, name);\n            that.listView.one(\"dataBound\", function () {\n              var selected = that.listView.items().filter(\"[\" + kendo.attr(\"uid\") + \"=\" + model.uid + \"]\");\n\n              if (selected.length) {\n                this.edit(selected);\n              }\n\n              this.element.scrollTop(selected.attr(\"offsetTop\") - this.element[0].offsetHeight);\n              setTimeout(function () {\n                that.listView.element.find('.k-edit-item input').select();\n              });\n            }).one(\"save\", function (e) {\n              var value = e.model.get(nameField);\n\n              if (!value) {\n                e.model.set(nameField, name);\n              } else {\n                e.model.set(nameField, that._nameExists(value, model.uid) ? that._nameDirectory() : value);\n              }\n            });\n            that.dataSource.insert(++lastDirectoryIdx, model);\n          },\n          _directoryKeyDown: function (e) {\n            if (e.keyCode == 13) {\n              e.currentTarget.blur();\n            }\n          },\n          _directoryBlur: function () {\n            this.listView.save();\n          },\n          _nameExists: function (name, uid) {\n            var data = this.dataSource.data(),\n                typeField = TYPEFIELD,\n                nameField = NAMEFIELD,\n                idx,\n                length;\n\n            for (idx = 0, length = data.length; idx < length; idx++) {\n              if (data[idx].get(typeField) === \"d\" && data[idx].get(nameField).toLowerCase() === name.toLowerCase() && data[idx].uid !== uid) {\n                return true;\n              }\n            }\n\n            return false;\n          },\n          _nameDirectory: function () {\n            var name = \"New folder\",\n                data = this.dataSource.data(),\n                directoryNames = [],\n                typeField = TYPEFIELD,\n                nameField = NAMEFIELD,\n                candidate,\n                idx,\n                length;\n\n            for (idx = 0, length = data.length; idx < length; idx++) {\n              if (data[idx].get(typeField) === \"d\" && data[idx].get(nameField).toLowerCase().indexOf(name.toLowerCase()) > -1) {\n                directoryNames.push(data[idx].get(nameField));\n              }\n            }\n\n            if ($.inArray(name, directoryNames) > -1) {\n              idx = 2;\n\n              do {\n                candidate = name + \" (\" + idx + \")\";\n                idx++;\n              } while ($.inArray(candidate, directoryNames) > -1);\n\n              name = candidate;\n            }\n\n            return name;\n          },\n          orderBy: function (field) {\n            this.dataSource.sort([{\n              field: TYPEFIELD,\n              dir: \"asc\"\n            }, {\n              field: field,\n              dir: \"asc\"\n            }]);\n          },\n          search: function (name) {\n            this.dataSource.filter({\n              field: NAMEFIELD,\n              operator: \"contains\",\n              value: name\n            });\n          },\n          _content: function () {\n            var that = this;\n            that.list = $('<div class=\"k-filemanager-listview\" />').appendTo(that.element).on(\"dblclick\" + NS, \".k-listview-item\", that._dblClick.bind(that));\n            that.listView = new kendo.ui.ListView(that.list, {\n              layout: \"flex\",\n              flex: {\n                direction: \"row\",\n                wrap: \"wrap\"\n              },\n              dataSource: that.dataSource,\n              template: that._itemTmpl(),\n              editTemplate: that._editTmpl(),\n              selectable: true,\n              autoBind: false,\n              dataBinding: function (e) {\n                that.toolbar.find(\".k-i-close\").parent().addClass(\"k-disabled\");\n\n                if (e.action === \"remove\" || e.action === \"sync\") {\n                  e.preventDefault();\n                  kendo.ui.progress(that.listView.content, false);\n                }\n              },\n              dataBound: function () {\n                if (that.dataSource.view().length) {\n                  that._tiles = this.items().filter(\"[\" + kendo.attr(\"type\") + \"=f]\");\n                } else {\n                  this.content.append(EMPTYTILE({\n                    text: that.options.messages.emptyFolder\n                  }));\n                }\n              },\n              change: that._listViewChange.bind(that)\n            });\n          },\n          _dblClick: function (e) {\n            var that = this,\n                li = $(e.currentTarget);\n\n            if (li.hasClass(\"k-edit-item\")) {\n              that._directoryBlur();\n            }\n\n            if (li.filter(\"[\" + kendo.attr(\"type\") + \"=d]\").length) {\n              var folder = that.dataSource.getByUid(li.attr(kendo.attr(\"uid\")));\n\n              if (folder) {\n                that.path(concatPaths(that.path(), folder.get(NAMEFIELD)));\n                that.breadcrumbs.value(\"/\" + that.path());\n              }\n            } else if (li.filter(\"[\" + kendo.attr(\"type\") + \"=f]\").length) {\n              that.trigger(APPLY);\n            }\n          },\n          _listViewChange: function () {\n            var selected = this._selectedItem();\n\n            if (selected) {\n              this.toolbar.find(\".k-i-close\").parent().removeClass(\"k-disabled\");\n              this.trigger(CHANGE, {\n                selected: selected\n              });\n            }\n          },\n          _dataSource: function () {\n            var that = this,\n                options = that.options,\n                transport = options.transport,\n                typeSortOrder = extend({}, DEFAULTSORTORDER),\n                nameSortOrder = {\n              field: NAMEFIELD,\n              dir: \"asc\"\n            },\n                schema,\n                dataSource = {\n              type: transport.type || \"filebrowser\",\n              sort: [typeSortOrder, nameSortOrder]\n            };\n\n            if (isPlainObject(transport)) {\n              transport.path = that.path.bind(that);\n              dataSource.transport = transport;\n            }\n\n            if (isPlainObject(options.schema)) {\n              dataSource.schema = options.schema;\n            } else if (transport.type && isPlainObject(kendo.data.schemas[transport.type])) {\n              schema = kendo.data.schemas[transport.type];\n            }\n\n            if (that.dataSource && that._errorHandler) {\n              that.dataSource.unbind(ERROR, that._errorHandler);\n            } else {\n              that._errorHandler = that._error.bind(that);\n            }\n\n            that.dataSource = kendo.data.DataSource.create(dataSource).bind(ERROR, that._errorHandler);\n          },\n          _navigation: function () {\n            var that = this,\n                navigation = $('<div class=\"k-floatwrap\"><nav></nav></div>').appendTo(this.element);\n            that.breadcrumbs = navigation.find(\"nav\").first().kendoBreadcrumb({\n              editable: true,\n              gap: 50,\n              value: that.options.path || \"/\",\n              change: function () {\n                that.path(this.value());\n              }\n            }).data(\"kendoBreadcrumb\");\n          },\n          _error: function (e) {\n            var that = this,\n                status;\n\n            if (!that.trigger(ERROR, e)) {\n              status = e.xhr.status;\n\n              if (e.status == 'error') {\n                if (status == '404') {\n                  that._showMessage(that.options.messages.directoryNotFound);\n                } else if (status != '0') {\n                  that._showMessage('Error! The requested URL returned ' + status + ' - ' + e.xhr.statusText);\n                }\n              } else if (status == 'timeout') {\n                that._showMessage('Error! Server timeout.');\n              }\n\n              var dataSource = that.dataSource;\n\n              if (dataSource.hasChanges()) {\n                dataSource.cancelChanges();\n              }\n            }\n          },\n          _showMessage: function (message, type) {\n            return window[type || \"alert\"](message);\n          },\n          refresh: function () {\n            var that = this;\n\n            that._navigation();\n\n            that._toolbar();\n\n            that._content();\n          },\n          _editTmpl: function () {\n            var html = '<div class=\"k-listview-item k-state-selected\" ' + kendo.attr(\"uid\") + '=\"#=uid#\" ';\n            html += kendo.attr(\"type\") + '=\"${' + TYPEFIELD + '}\">';\n            html += '#if(' + TYPEFIELD + ' == \"d\") { #';\n            html += '<div class=\"k-file-preview\"><span class=\"k-file-icon k-icon k-i-folder\"></span></div>';\n            html += \"#}else{#\";\n            html += '<div class=\"k-file-preview\"><span class=\"k-file-icon k-icon k-i-loading\"></span></div>';\n            html += \"#}#\";\n            html += '#if(' + TYPEFIELD + ' == \"d\") { #';\n            html += '<span class=\"k-file-name\"><span class=\"k-textbox k-input k-input-md k-rounded-md k-input-solid\"><input class=\"k-input-inner\" ' + kendo.attr(\"bind\") + '=\"value:' + NAMEFIELD + '\"/></span></span>';\n            html += \"#}#\";\n            html += '</div>';\n            return kendo.template(html).bind({\n              sizeFormatter: sizeFormatter\n            });\n          },\n          _itemTmpl: function () {\n            var html = '<div class=\"k-listview-item\" ' + kendo.attr(\"uid\") + '=\"#=uid#\" ';\n            html += kendo.attr(\"type\") + '=\"${' + TYPEFIELD + '}\">';\n            html += '#if(' + TYPEFIELD + ' == \"d\") { #';\n            html += '<div class=\"k-file-preview\"><span class=\"k-file-icon k-icon k-i-folder\"></span></div>';\n            html += \"#}else{#\";\n            html += '<div class=\"k-file-preview\"><span class=\"k-file-icon k-icon k-i-file\"></span></div>';\n            html += \"#}#\";\n            html += '<span class=\"k-file-name\">${' + NAMEFIELD + '}</span>';\n            html += '#if(' + TYPEFIELD + ' == \"f\") { # <span class=\"k-file-size\">${this.sizeFormatter(' + SIZEFIELD + ')}</span> #}#';\n            html += '</div>';\n            return kendo.template(html).bind({\n              sizeFormatter: sizeFormatter\n            });\n          },\n          path: function (value) {\n            var that = this,\n                path = that._path || \"\";\n\n            if (value !== undefined) {\n              that._path = value.replace(trimSlashesRegExp, \"\") + \"/\";\n              that.dataSource.read({\n                path: that._path\n              });\n              return;\n            }\n\n            if (path) {\n              path = path.replace(trimSlashesRegExp, \"\");\n            }\n\n            return path === \"/\" || path === \"\" ? \"\" : path + \"/\";\n          }\n        });\n        var SearchBox = Widget.extend({\n          init: function (element, options) {\n            var that = this;\n            options = options || {};\n            Widget.fn.init.call(that, element, options);\n\n            if (placeholderSupported) {\n              that.element.attr(\"placeholder\", that.options.label);\n            }\n\n            that._wrapper();\n\n            that.element.on(\"keydown\" + SEARCHBOXNS, that._keydown.bind(that)).on(\"change\" + SEARCHBOXNS, that._updateValue.bind(that));\n            that.wrapper.on(CLICK + SEARCHBOXNS, \"a\", that._click.bind(that));\n\n            if (!placeholderSupported) {\n              that.element.on(\"focus\" + SEARCHBOXNS, that._focus.bind(that)).on(\"blur\" + SEARCHBOXNS, that._blur.bind(that));\n            }\n          },\n          options: {\n            name: \"SearchBox\",\n            label: \"Search\",\n            value: \"\"\n          },\n          events: [CHANGE],\n          destroy: function () {\n            var that = this;\n            that.wrapper.add(that.element).add(that.label).off(SEARCHBOXNS);\n            Widget.fn.destroy.call(that);\n          },\n          _keydown: function (e) {\n            if (e.keyCode === 13) {\n              this._updateValue();\n            }\n          },\n          _click: function (e) {\n            e.preventDefault();\n\n            this._updateValue();\n          },\n          _updateValue: function () {\n            var that = this,\n                value = that.element.val();\n\n            if (value !== that.value()) {\n              that.value(value);\n              that.trigger(CHANGE);\n            }\n          },\n          _blur: function () {\n            this._updateValue();\n\n            this._toggleLabel();\n          },\n          _toggleLabel: function () {\n            if (!placeholderSupported) {\n              this.label.toggle(!this.element.val());\n            }\n          },\n          _focus: function () {\n            this.label.hide();\n          },\n          _wrapper: function () {\n            var element = this.element,\n                wrapper = element.parents(\".k-search-wrap\");\n            element[0].style.width = \"\";\n            element.addClass(\"k-input-inner\");\n\n            if (!wrapper.length) {\n              wrapper = element.wrap($('<div class=\"k-widget k-search-wrap\"><span class=\"k-textbox k-input k-input-md k-rounded-md k-input-solid\"></span></div>')).parents(\".k-search-wrap\");\n\n              if (!placeholderSupported) {\n                $('<label style=\"display:block\">' + this.options.label + '</label>').insertBefore(element);\n              }\n\n              $('<span class=\"k-input-suffix\"><a href=\"#\" class=\"k-icon k-i-zoom k-search\"/></span>').appendTo(wrapper.find(\".k-textbox\"));\n            }\n\n            this.wrapper = wrapper;\n            this.label = wrapper.find(\">label\");\n          },\n          value: function (value) {\n            var that = this;\n\n            if (value !== undefined) {\n              that.options.value = value;\n              that.element.val(value);\n\n              that._toggleLabel();\n\n              return;\n            }\n\n            return that.options.value;\n          }\n        });\n        kendo.ui.plugin(FileBrowser);\n        kendo.ui.plugin(SearchBox);\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1261:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.listview\");\n    /***/\n  },\n\n  /***/\n  1262:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.upload\");\n    /***/\n  },\n\n  /***/\n  1263:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.breadcrumb\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}