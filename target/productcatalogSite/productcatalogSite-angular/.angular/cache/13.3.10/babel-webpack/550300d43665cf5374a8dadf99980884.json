{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1038);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1038:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1039), __webpack_require__(1040)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            extend = $.extend,\n            ToolBar = kendo.ui.ToolBar,\n            Item = kendo.toolbar.Item,\n            CLICK = \"click\",\n            TOGGLE = \"toggle\",\n            CLOSE = \"close\",\n            ACTION = \"action\",\n            CHANGE = \"change\",\n            NS = \".fileManagerToolbar\";\n        var FileManagerToolBar = ToolBar.extend({\n          init: function (element, options) {\n            var that = this;\n\n            that._extendOptions(options);\n\n            ToolBar.fn.init.call(that, element, options);\n\n            that._attachEvents();\n          },\n          events: ToolBar.fn.events.concat([ACTION]),\n          defaultTools: {\n            createFolder: {\n              type: \"button\",\n              text: \"New Folder\",\n              name: \"createFolder\",\n              command: \"CreateFolderCommand\",\n              rules: \"{ \\\"remote\\\": true }\"\n            },\n            upload: {\n              type: \"button\",\n              text: \"Upload\",\n              name: \"upload\",\n              command: \"OpenDialogCommand\",\n              options: \"{ \\\"type\\\": \\\"uploadDialog\\\" }\",\n              rules: \"{ \\\"remote\\\": true }\"\n            },\n            sortDirection: {\n              type: \"buttonGroup\",\n              text: \"Sort Direction\",\n              name: \"sortDirection\",\n              buttons: [{\n                name: \"sortDirectionAsc\",\n                icon: \"sort-asc-sm\",\n                togglable: true,\n                group: \"sortDirection\",\n                command: \"SortCommand\",\n                options: \"{ \\\"dir\\\": \\\"asc\\\" }\",\n                selected: true\n              }, {\n                name: \"sortDirectionDesc\",\n                icon: \"sort-desc-sm\",\n                togglable: true,\n                group: \"sortDirection\",\n                command: \"SortCommand\",\n                options: \"{ \\\"dir\\\": \\\"desc\\\" }\"\n              }]\n            },\n            sortField: {\n              type: \"splitButton\",\n              text: \"Sort By\",\n              name: \"sortField\",\n              command: \"SortCommand\",\n              menuButtons: [{\n                name: \"nameField\",\n                text: \"Name\",\n                options: \"{\\\"field\\\": \\\"name\\\"}\",\n                command: \"SortCommand\"\n              }, {\n                name: \"typeField\",\n                text: \"Type\",\n                options: \"{\\\"field\\\": \\\"extension\\\"}\",\n                command: \"SortCommand\"\n              }, {\n                name: \"sizeField\",\n                text: \"Size\",\n                options: \"{\\\"field\\\": \\\"size\\\"}\",\n                command: \"SortCommand\"\n              }, {\n                name: \"dateCreatedField\",\n                text: \"Date created\",\n                options: \"{\\\"field\\\": \\\"createdUtc\\\"}\",\n                command: \"SortCommand\"\n              }, {\n                name: \"dateModifiedField\",\n                text: \"Date modified\",\n                options: \"{\\\"field\\\": \\\"modifiedUtc\\\"}\",\n                command: \"SortCommand\"\n              }]\n            },\n            changeView: {\n              type: \"buttonGroup\",\n              text: \"Change View\",\n              name: \"changeView\",\n              buttons: [{\n                name: \"gridView\",\n                icon: \"grid-layout\",\n                togglable: true,\n                group: \"changeView\",\n                command: \"ChangeViewCommand\",\n                options: \"grid\"\n              }, {\n                name: \"listView\",\n                icon: \"grid\",\n                togglable: true,\n                group: \"changeView\",\n                command: \"ChangeViewCommand\",\n                options: \"list\"\n              }]\n            },\n            spacer: {\n              type: \"spacer\"\n            },\n            details: {\n              type: \"fileManagerDetailsToggle\",\n              text: \"View Details\",\n              name: \"details\",\n              overflow: \"never\",\n              command: \"TogglePaneCommand\",\n              options: \"{ \\\"type\\\": \\\"preview\\\" }\"\n            },\n            search: {\n              type: \"fileManagerSearch\",\n              text: \"Search\",\n              name: \"search\",\n              command: \"SearchCommand\",\n              icon: \"search\",\n              overflow: \"never\",\n              options: \"{ \\\"field\\\": \\\"name\\\", \\\"operator\\\": \\\"startswith\\\" }\"\n            }\n          },\n          _attachEvents: function () {\n            var that = this;\n            that.bind(TOGGLE, that._click.bind(that));\n            that.bind(CLOSE, that._click.bind(that));\n            that.bind(CLICK, that._click.bind(that));\n            that.bind(CHANGE, that._change.bind(that));\n          },\n          _extendOptions: function (options) {\n            var that = this,\n                tools = options.items ? options.items : Object.keys(that.defaultTools);\n            that.options = options;\n            that.options.items = that._extendToolsOptions(tools);\n          },\n          _extendToolsOptions: function (tools) {\n            var that = this,\n                messages = that.options.messages;\n\n            if (!tools.length) {\n              return;\n            }\n\n            return tools.map(function (tool) {\n              var isBuiltInTool = $.isPlainObject(tool) && Object.keys(tool).length === 1 && tool.name,\n                  toolOptions,\n                  toolRules,\n                  attributes;\n              tool = isBuiltInTool ? tool.name : tool;\n              toolOptions = $.isPlainObject(tool) ? tool : extend({}, that.defaultTools[tool]);\n              toolRules = toolOptions.rules ? JSON.parse(toolOptions.rules) : {};\n              attributes = {\n                \"aria-label\": messages[toolOptions.name],\n                \"title\": messages[toolOptions.name],\n                \"data-command\": toolOptions.command,\n                \"data-options\": toolOptions.options\n              };\n\n              if (toolOptions.type === \"fileManagerDetailsToggle\") {\n                delete attributes[\"aria-label\"];\n              }\n\n              kendo.deepExtend(toolOptions, {\n                id: toolOptions.name + \"-\" + kendo.guid(),\n                name: toolOptions.name,\n                text: messages[toolOptions.name],\n                attributes: attributes,\n                overflow: toolOptions.overflow\n              });\n\n              if (toolOptions.type === \"buttonGroup\") {\n                delete toolOptions.attributes[\"aria-label\"];\n                toolOptions.buttons = toolOptions.buttons.map(that._mapButtonGroups.bind(that));\n              }\n\n              if (toolOptions.type === \"splitButton\") {\n                toolOptions.menuButtons = toolOptions.menuButtons.map(that._mapMenuButtons.bind(that));\n              }\n\n              if (toolRules.remote && that.options.filemanager.dataSource.isLocalBinding) {\n                toolOptions.hidden = true;\n              }\n\n              return toolOptions;\n            }, that);\n          },\n          _mapButtonGroups: function (button) {\n            var that = this,\n                messages = that.options.messages;\n\n            if (button.group === \"changeView\" && button.options === that.options.filemanager.options.initialView) {\n              button.selected = true;\n            }\n\n            return kendo.deepExtend(button, {\n              attributes: extend({}, button.attributes, {\n                \"aria-label\": messages[button.name],\n                \"title\": messages[button.name],\n                \"data-command\": button.command,\n                \"data-options\": button.options\n              })\n            });\n          },\n          _mapMenuButtons: function (button) {\n            var that = this,\n                messages = that.options.messages;\n            return kendo.deepExtend(button, {\n              text: messages[button.name],\n              attributes: extend({}, button.attributes, {\n                \"aria-label\": messages[button.name],\n                \"title\": messages[button.name],\n                \"data-command\": button.command,\n                \"data-options\": button.options\n              })\n            });\n          },\n          _click: function (ev) {\n            var command = $(ev.target).data(\"command\"),\n                options = $(ev.target).data(\"options\");\n\n            if (!command) {\n              return;\n            }\n\n            this.action({\n              command: command,\n              options: options\n            });\n          },\n          _change: function (ev) {\n            var command = $(ev.target).data(\"command\"),\n                options = $(ev.target).data(\"options\");\n            options = extend({}, options, {\n              value: $(ev.target).val()\n            });\n\n            if (!command) {\n              return;\n            }\n\n            this.action({\n              command: command,\n              options: options\n            });\n          },\n          isToolEnabled: function (toolName) {\n            var that = this,\n                options = that.options,\n                found = false;\n\n            for (var i = 0; i < options.items.length; i++) {\n              if (options.items[i].name == toolName) {\n                found = true;\n                break;\n              }\n            }\n\n            return options.items[toolName] || found;\n          },\n          action: function (args) {\n            this.trigger(ACTION, args);\n          },\n          destroy: function () {\n            if (this.fileManagerSearch) {\n              this.fileManagerSearch.destroy();\n            }\n\n            ToolBar.fn.destroy.call(this);\n          }\n        });\n        var SearchTool = Item.extend({\n          init: function (options, toolbar) {\n            var that = this,\n                element = $(\"<div class='k-filemanager-search-tool'></div>\"),\n                input = $(\"<input class='k-input-inner' autocomplete='off' />\"),\n                icon = $(\"<span class='k-input-icon k-icon k-i-search'/>\"),\n                inputWrapper = $('<span class=\"k-searchbox k-input k-input-md k-rounded-md k-input-solid\"></span>');\n            that.element = element;\n            that.input = input;\n            that.icon = icon;\n            that.options = options;\n            that.options.type = \"fileManagerSearch\";\n            that.toolbar = toolbar;\n            that.attributes();\n            that.renderIcon();\n            that.addUidAttr();\n            that.addIdAttr();\n            that.addOverflowAttr();\n            that.input.attr({\n              placeholder: that.options.text,\n              title: that.options.text\n            });\n            inputWrapper.append(icon).append(that.input);\n            that.element.append(inputWrapper);\n\n            that._bindEvents();\n\n            that.toolbar.fileManagerSearch = that;\n          },\n          attributes: function () {\n            if (this.options.attributes) {\n              this.input.attr(this.options.attributes);\n            }\n          },\n          renderIcon: function () {\n            if (this.options.icon) {\n              this.icon.addClass(\"k-icon k-i-\" + this.options.icon);\n            }\n          },\n          _bindEvents: function () {\n            this._inputHandler = this._input.bind(this);\n            this.input.on(\"input\" + NS, this._inputHandler);\n          },\n          _input: function (ev) {\n            this.toolbar.trigger(CHANGE, {\n              target: ev.target\n            });\n          },\n          destroy: function () {\n            this.element.off(NS);\n          }\n        });\n        kendo.toolbar.registerComponent(\"fileManagerSearch\", SearchTool);\n        var FileManagerDetailsToggle = Item.extend({\n          init: function (options, toolbar) {\n            var that = this,\n                element = $(\"<div class='k-filemanager-details-toggle'></div>\"),\n                label = $(\"<label>\" + options.text + \"</label>\"),\n                switchElement = $(\"<input title='\" + options.text + \"' />\");\n            that.element = element;\n            that.input = switchElement;\n            that.label = label;\n            that.options = options;\n            that.toolbar = toolbar;\n            that.attributes();\n            that.addUidAttr();\n            that.addIdAttr();\n            that.addOverflowAttr();\n            that.element.append(that.label);\n            that.element.append(that.input);\n            that.input.attr(\"aria-label\", options.text);\n            that.switchInstance = new kendo.ui.Switch(that.input, {\n              change: that._change.bind(that),\n              messages: {\n                checked: toolbar.options.messages.detailsChecked,\n                unchecked: toolbar.options.messages.detailsUnchecked\n              }\n            });\n            that.label.on(CLICK + NS, that._click.bind(that));\n            that.toolbar.fileManagerDetailsToggle = that;\n          },\n          _change: function (ev) {\n            this.toolbar.trigger(CHANGE, {\n              target: ev.sender.wrapper.parent()\n            });\n          },\n          _click: function (ev) {\n            this.switchInstance.toggle();\n            this.toolbar.trigger(CHANGE, {\n              target: $(ev.target).parent()\n            });\n          },\n          destroy: function () {\n            this.element.off(NS);\n          }\n        });\n        kendo.toolbar.registerComponent(\"fileManagerDetailsToggle\", FileManagerDetailsToggle);\n        extend(kendo.ui.filemanager, {\n          ToolBar: FileManagerToolBar\n        });\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1039:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.toolbar\");\n    /***/\n  },\n\n  /***/\n  1040:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.switch\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}