{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1043);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1043:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1044), __webpack_require__(1045)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            imageeditorNS = kendo.ui.imageeditor,\n            extend = $.extend,\n            Class = kendo.Class;\n        var Command = Class.extend({\n          init: function (options) {\n            this.options = extend({}, options, this.options);\n            this.imageeditor = options.imageeditor;\n          }\n        });\n        var OpenPaneImageEditorCommand = Command.extend({\n          init: function (options) {\n            Command.fn.init.call(this, options);\n          },\n          exec: function () {\n            var that = this,\n                imageeditor = that.imageeditor,\n                pane = new imageeditorNS.panes[that.options.value](imageeditor);\n            pane.open();\n          }\n        });\n        var ZoomImageEditorCommand = Command.extend({\n          options: {\n            zoomStep: 0.05,\n            spacing: 20\n          },\n          init: function (options) {\n            Command.fn.init.call(this, options);\n          },\n          exec: function () {\n            var that = this,\n                options = that.options,\n                value = options.value,\n                imageeditor = that.imageeditor,\n                imgHeight = imageeditor._image.height,\n                currentZoom = imageeditor.getZoomLevel(),\n                newHeight = imgHeight;\n\n            if (!isNaN(value)) {\n              value = parseFloat(value);\n            } else if (typeof value === \"string\") {\n              value = that._processStringValue(value, currentZoom);\n            }\n\n            newHeight = Math.round(imgHeight * value);\n\n            if (newHeight > 0) {\n              $(imageeditor._canvas).css(\"height\", newHeight);\n              imageeditor._zoomLevel = value;\n            }\n\n            if (imageeditor.currentPaneTool) {\n              imageeditor.currentPaneTool.refresh();\n            }\n          },\n          _processStringValue: function (value, initialZoom) {\n            var that = this,\n                options = that.options,\n                imageeditor = that.imageeditor,\n                imgHeight = imageeditor._image.height,\n                expectedHeight = imageeditor.canvasWrapper.height() - options.spacing,\n                zoomStep = options.zoomStep;\n\n            switch (value) {\n              case \"zoomIn\":\n                return initialZoom + zoomStep;\n\n              case \"zoomOut\":\n                return initialZoom - zoomStep;\n\n              case \"fitToScreen\":\n                return Math.round(expectedHeight / imgHeight * 100) / 100;\n\n              default:\n                return 1;\n            }\n          }\n        });\n        var CropImageEditorCommand = Command.extend({\n          init: function (options) {\n            Command.fn.init.call(this, options);\n          },\n          exec: function () {\n            var that = this,\n                options = that.options,\n                imageeditor = that.imageeditor,\n                canvas = imageeditor.getCanvasElement(),\n                ctx = imageeditor.getCurrent2dContext(),\n                croppedImage = ctx.getImageData(options.left, options.top, options.width, options.height);\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            canvas.width = options.width;\n            canvas.height = options.height;\n            ctx.putImageData(croppedImage, 0, 0);\n            imageeditor.drawImage(canvas.toDataURL()).done(function (image) {\n              imageeditor.drawCanvas(image);\n            }).fail(function (ev) {\n              imageeditor.trigger(\"error\", ev);\n            });\n          }\n        });\n        var ResizeImageEditorCommand = Command.extend({\n          init: function (options) {\n            Command.fn.init.call(this, options);\n          },\n          exec: function () {\n            var that = this,\n                options = that.options,\n                imageeditor = that.imageeditor,\n                canvas = imageeditor.getCanvasElement(),\n                ctx = imageeditor.getCurrent2dContext(),\n                image = imageeditor.getCurrentImage();\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            canvas.width = options.width;\n            canvas.height = options.height;\n            ctx.drawImage(image, 0, 0, options.width, options.height);\n            imageeditor.drawImage(canvas.toDataURL()).done(function (image) {\n              imageeditor.drawCanvas(image);\n            }).fail(function (ev) {\n              imageeditor.trigger(\"error\", ev);\n            });\n          }\n        });\n        var UndoImageEditorCommand = Command.extend({\n          exec: function () {\n            var that = this,\n                imageeditor = that.imageeditor,\n                canvas = imageeditor.getCanvasElement(),\n                ctx = imageeditor.getCurrent2dContext(),\n                image = imageeditor.undoStack.pop();\n\n            if (image) {\n              imageeditor.redoStack.push(imageeditor.getCurrentImage());\n              delete imageeditor._image;\n              ctx.clearRect(0, 0, canvas.width, canvas.height);\n              canvas.width = image.width;\n              canvas.height = image.height;\n              ctx.drawImage(image, 0, 0, image.width, image.height);\n              imageeditor.drawImage(canvas.toDataURL()).done(function (image) {\n                imageeditor.drawCanvas(image);\n              }).fail(function (ev) {\n                imageeditor.trigger(\"error\", ev);\n              });\n            }\n          }\n        });\n        var RedoImageEditorCommand = Command.extend({\n          exec: function () {\n            var that = this,\n                imageeditor = that.imageeditor,\n                canvas = imageeditor.getCanvasElement(),\n                ctx = imageeditor.getCurrent2dContext(),\n                image = imageeditor.redoStack.pop();\n\n            if (image) {\n              imageeditor.undoStack.push(imageeditor.getCurrentImage());\n              delete imageeditor._image;\n              ctx.clearRect(0, 0, canvas.width, canvas.height);\n              canvas.width = image.width;\n              canvas.height = image.height;\n              ctx.drawImage(image, 0, 0, image.width, image.height);\n              imageeditor.drawImage(canvas.toDataURL()).done(function (image) {\n                imageeditor.drawCanvas(image);\n              }).fail(function (ev) {\n                imageeditor.trigger(\"error\", ev);\n              });\n            }\n          }\n        });\n        var SaveImageEditorCommand = Command.extend({\n          exec: function () {\n            var that = this,\n                imageeditor = that.imageeditor,\n                canvas = imageeditor.getCanvasElement();\n            kendo.saveAs(extend({}, imageeditor.options.saveAs, {\n              dataURI: canvas.toDataURL()\n            }));\n          }\n        });\n        var OpenImageEditorCommand = Command.extend({\n          exec: function () {\n            var that = this,\n                imageeditor = that.imageeditor,\n                upload = imageeditor._upload;\n\n            if (!upload) {\n              var input = $(\"<input type='file' />\");\n              input.kendoUpload({\n                select: that.onSelect.bind(that),\n                error: that.onError.bind(that),\n                multiple: false,\n                validation: {\n                  allowedExtensions: [\".jpg\", \".jpeg\", \".gif\", \".png\", \".bmp\", \".tiff\", \".webp\"]\n                }\n              });\n              imageeditor._upload = upload = input.getKendoUpload();\n            }\n\n            upload.element.click();\n          },\n          onSelect: function (ev) {\n            var that = this,\n                imageeditor = that.imageeditor,\n                file = ev.files[0].rawFile,\n                reader = new FileReader();\n            reader.addEventListener(\"load\", function () {\n              imageeditor.drawImage(reader.result).done(function (image) {\n                if (!imageeditor.trigger(\"imageLoaded\", {\n                  image: image\n                })) {\n                  imageeditor.drawCanvas(image);\n\n                  imageeditor._initUndoRedoStack();\n\n                  imageeditor._toggleTools();\n                }\n              }).fail(function (ev) {\n                imageeditor.trigger(\"error\", ev);\n              });\n            }, false);\n\n            if (file) {\n              reader.readAsDataURL(file);\n            }\n          },\n          onError: function (ev) {\n            var that = this,\n                imageeditor = that.imageeditor;\n            imageeditor.trigger(\"error\", ev);\n          }\n        });\n        extend(kendo.ui.imageeditor, {\n          ImageEditorCommand: Command,\n          commands: {\n            OpenPaneImageEditorCommand: OpenPaneImageEditorCommand,\n            ZoomImageEditorCommand: ZoomImageEditorCommand,\n            CropImageEditorCommand: CropImageEditorCommand,\n            ResizeImageEditorCommand: ResizeImageEditorCommand,\n            UndoImageEditorCommand: UndoImageEditorCommand,\n            RedoImageEditorCommand: RedoImageEditorCommand,\n            SaveImageEditorCommand: SaveImageEditorCommand,\n            OpenImageEditorCommand: OpenImageEditorCommand\n          }\n        });\n      })(window.kendo.jQuery);\n\n      return window.kendo;\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  1044:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./pane\");\n    /***/\n  },\n\n  /***/\n  1045:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"../kendo.upload\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}