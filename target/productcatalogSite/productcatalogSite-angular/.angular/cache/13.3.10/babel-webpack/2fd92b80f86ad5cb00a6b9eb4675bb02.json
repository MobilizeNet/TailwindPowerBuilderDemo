{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(926);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  926:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(927)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function ($, undefined) {\n        // Imports ================================================================\n        var kendo = window.kendo,\n            dataviz = kendo.dataviz,\n            deepExtend = kendo.deepExtend,\n            defined = kendo.drawing.util.defined,\n            Extent = dataviz.map.Extent,\n            Location = dataviz.map.Location,\n            TileLayer = dataviz.map.layers.TileLayer,\n            TileView = dataviz.map.layers.TileView; // Bing tile layer =============================================================\n\n        var BingLayer = TileLayer.extend({\n          init: function (map, options) {\n            this.options.baseUrl = this._scheme() + \"://dev.virtualearth.net/REST/v1/Imagery/Metadata/\";\n            TileLayer.fn.init.call(this, map, options);\n            this._onMetadata = this._onMetadata.bind(this);\n\n            this._fetchMetadata();\n          },\n          options: {\n            imagerySet: \"road\"\n          },\n          _fetchMetadata: function () {\n            var options = this.options;\n\n            if (!options.key) {\n              throw new Error(\"Bing tile layer: API key is required\");\n            }\n\n            $.ajax({\n              url: options.baseUrl + options.imagerySet,\n              data: {\n                output: \"json\",\n                include: \"ImageryProviders\",\n                key: options.key,\n                uriScheme: this._scheme()\n              },\n              type: \"get\",\n              dataType: \"jsonp\",\n              jsonp: \"jsonp\",\n              success: this._onMetadata\n            });\n          },\n          _scheme: function (proto) {\n            proto = proto || window.location.protocol;\n            return proto.replace(\":\", \"\") === \"https\" ? \"https\" : \"http\";\n          },\n          _onMetadata: function (data) {\n            if (data && data.resourceSets.length) {\n              var resource = this.resource = data.resourceSets[0].resources[0];\n              deepExtend(this._view.options, {\n                urlTemplate: resource.imageUrl.replace(\"{subdomain}\", \"#= subdomain #\").replace(\"{quadkey}\", \"#= quadkey #\").replace(\"{culture}\", \"#= culture #\"),\n                subdomains: resource.imageUrlSubdomains\n              });\n              var options = this.options;\n\n              if (!defined(options.minZoom)) {\n                options.minZoom = resource.zoomMin;\n              }\n\n              if (!defined(options.maxZoom)) {\n                options.maxZoom = resource.zoomMax;\n              }\n\n              this._addAttribution();\n\n              if (this.element.css(\"display\") !== \"none\") {\n                this._reset();\n              }\n            }\n          },\n          _viewType: function () {\n            return BingView;\n          },\n          _addAttribution: function () {\n            var attr = this.map.attribution;\n\n            if (attr) {\n              var items = this.resource.imageryProviders;\n\n              if (items) {\n                for (var i = 0; i < items.length; i++) {\n                  var item = items[i];\n\n                  for (var y = 0; y < item.coverageAreas.length; y++) {\n                    var area = item.coverageAreas[y];\n                    attr.add({\n                      text: item.attribution,\n                      minZoom: area.zoomMin,\n                      maxZoom: area.zoomMax,\n                      extent: new Extent(new Location(area.bbox[2], area.bbox[1]), new Location(area.bbox[0], area.bbox[3]))\n                    });\n                  }\n                }\n              }\n            }\n          },\n          imagerySet: function (value) {\n            if (value) {\n              this.options.imagerySet = value;\n              this.map.attribution.clear();\n\n              this._fetchMetadata();\n            } else {\n              return this.options.imagerySet;\n            }\n          }\n        });\n        var BingView = TileView.extend({\n          options: {\n            culture: \"en-US\"\n          },\n          tileOptions: function (currentIndex) {\n            var options = TileView.fn.tileOptions.call(this, currentIndex);\n            options.culture = this.options.culture;\n            options.quadkey = this.tileQuadKey(this.wrapIndex(currentIndex));\n            return options;\n          },\n          tileQuadKey: function (index) {\n            var quadKey = \"\",\n                digit,\n                mask,\n                i;\n\n            for (i = this._zoom; i > 0; i--) {\n              digit = 0;\n              mask = 1 << i - 1;\n\n              if ((index.x & mask) !== 0) {\n                digit++;\n              }\n\n              if ((index.y & mask) !== 0) {\n                digit += 2;\n              }\n\n              quadKey += digit;\n            }\n\n            return quadKey;\n          }\n        }); // Exports ================================================================\n\n        deepExtend(dataviz, {\n          map: {\n            layers: {\n              bing: BingLayer,\n              BingLayer: BingLayer,\n              BingView: BingView\n            }\n          }\n        });\n      })(window.kendo.jQuery);\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  927:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./tile\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}