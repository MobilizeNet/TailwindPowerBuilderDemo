{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { WMLogger } from '@mobilize/logging';\nimport { Order } from '../../../Contract';\nimport { ErrorCodes, ExceptionHandlerClass } from '../../../System/Aop';\n\nvar EventBehavior = function () {\n  function EventBehavior() {}\n\n  EventBehavior.prototype.apply = function (model, root) {\n    if (!model || !model.eventChanges) {\n      return;\n    }\n\n    this.applyEventChanges(model, model.eventChanges);\n  };\n\n  Object.defineProperty(EventBehavior.prototype, \"Order\", {\n    get: function () {\n      return Order.ORD;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  EventBehavior.prototype.applyEventChanges = function (model, eventChanges) {\n    for (var name_1 in eventChanges) {\n      if (eventChanges.hasOwnProperty(name_1)) {\n        var change = eventChanges[name_1];\n\n        if (change === true) {\n          model.events[name_1] = true;\n        } else if (change === false) {\n          delete model.events[name_1];\n        } else {\n          WMLogger.instance().error(\"Unknown event '\" + name_1 + \"' with change '\" + change + \"' for '\" + (\"model '\" + model.uniqueName + \"' with id '\" + model.UniqueID + \"'\"));\n        }\n      }\n    }\n\n    model.eventChanges = {};\n  };\n\n  EventBehavior = __decorate([ExceptionHandlerClass(ErrorCodes.ClientCore)], EventBehavior);\n  return EventBehavior;\n}();\n\nexport { EventBehavior }; //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRCZWhhdmlvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy92NS9Db3JlL0JlaGF2aW9ycy9FdmVudEJlaGF2aW9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQWtCQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFN0MsT0FBTyxFQUFvQyxLQUFLLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUM1RSxPQUFPLEVBQUUsVUFBVSxFQUFFLHFCQUFxQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFVeEU7SUFBQTtJQTJDQSxDQUFDO0lBeENHLDZCQUFLLEdBQUwsVUFBTSxLQUFhLEVBQUUsSUFBYTtRQUM5QixJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRTtZQUMvQixPQUFPO1NBQ1Y7UUFDRCxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBR0Qsc0JBQUksZ0NBQUs7YUFBVDtZQUNJLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUNyQixDQUFDOzs7T0FBQTtJQVVPLHlDQUFpQixHQUF6QixVQUEwQixLQUFhLEVBQUUsWUFBeUM7UUFDOUUsS0FBSyxJQUFNLE1BQUksSUFBSSxZQUFZLEVBQUU7WUFDN0IsSUFBSSxZQUFZLENBQUMsY0FBYyxDQUFDLE1BQUksQ0FBQyxFQUFFO2dCQUNuQyxJQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsTUFBSSxDQUFDLENBQUM7Z0JBRWxDLElBQUksTUFBTSxLQUFLLElBQUksRUFBRTtvQkFDakIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFJLENBQUMsR0FBRyxJQUFJLENBQUM7aUJBQzdCO3FCQUFNLElBQUksTUFBTSxLQUFLLEtBQUssRUFBRTtvQkFDekIsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQUksQ0FBQyxDQUFDO2lCQUM3QjtxQkFBTTtvQkFFSCxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsS0FBSyxDQUFDLG9CQUFrQixNQUFJLHVCQUFrQixNQUFNLFlBQVM7eUJBQzdFLFlBQVUsS0FBSyxDQUFDLFVBQVUsbUJBQWMsS0FBSyxDQUFDLFFBQVEsTUFBRyxDQUFBLENBQUMsQ0FBQztpQkFDbEU7YUFDSjtTQUNKO1FBR0QsS0FBSyxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7SUFDNUIsQ0FBQztJQTFDUSxhQUFhO1FBUnpCLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUM7T0FRaEMsYUFBYSxDQTJDekI7SUFBRCxvQkFBQztDQUFBLEFBM0NELElBMkNDO1NBM0NZLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuKiBDb3B5cmlnaHQgKEMpIE1vYmlsaXplLk5ldCA8aW5mb0Btb2JpbGl6ZS5uZXQ+IC0gQWxsIFJpZ2h0cyBSZXNlcnZlZFxyXG4qXHJcbiogVGhpcyBmaWxlIGlzIHBhcnQgb2YgdGhlIE1vYmlsaXplIEZyYW1ld29ya3MsIHdoaWNoIGlzXHJcbiogcHJvcHJpZXRhcnkgYW5kIGNvbmZpZGVudGlhbC5cclxuKlxyXG4qIE5PVElDRTogIEFsbCBpbmZvcm1hdGlvbiBjb250YWluZWQgaGVyZWluIGlzLCBhbmQgcmVtYWluc1xyXG4qIHRoZSBwcm9wZXJ0eSBvZiBNb2JpbGl6ZS5OZXQgQ29ycG9yYXRpb24uXHJcbiogVGhlIGludGVsbGVjdHVhbCBhbmQgdGVjaG5pY2FsIGNvbmNlcHRzIGNvbnRhaW5lZCBoZXJlaW4gYXJlXHJcbiogcHJvcHJpZXRhcnkgdG8gTW9iaWxpemUuTmV0IENvcnBvcmF0aW9uIGFuZCBtYXkgYmUgY292ZXJlZFxyXG4qIGJ5IFUuUy4gUGF0ZW50cywgYW5kIGFyZSBwcm90ZWN0ZWQgYnkgdHJhZGUgc2VjcmV0IG9yIGNvcHlyaWdodCBsYXcuXHJcbiogRGlzc2VtaW5hdGlvbiBvZiB0aGlzIGluZm9ybWF0aW9uIG9yIHJlcHJvZHVjdGlvbiBvZiB0aGlzIG1hdGVyaWFsXHJcbiogaXMgc3RyaWN0bHkgZm9yYmlkZGVuIHVubGVzcyBwcmlvciB3cml0dGVuIHBlcm1pc3Npb24gaXMgb2J0YWluZWRcclxuKiBmcm9tIE1vYmlsaXplLk5ldCBDb3Jwb3JhdGlvbi5cclxuKlxyXG4qIFRoaXMgZmlsZSBpcyBzdWJqZWN0IHRvIHRoZSB0ZXJtcyBhbmQgY29uZGl0aW9ucyBkZWZpbmVkIGluXHJcbiogZmlsZSAnTElDRU5TRS50eHQnLCB3aGljaCBpcyBwYXJ0IG9mIHRoaXMgc291cmNlIGNvZGUgcGFja2FnZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcbmltcG9ydCB7IFdNTG9nZ2VyIH0gZnJvbSAnQG1vYmlsaXplL2xvZ2dpbmcnO1xyXG5cclxuaW1wb3J0IHsgSUNsaWVudEJlaGF2aW9yLCBJRW50aXR5LCBJTW9kZWwsIE9yZGVyIH0gZnJvbSAnLi4vLi4vLi4vQ29udHJhY3QnO1xyXG5pbXBvcnQgeyBFcnJvckNvZGVzLCBFeGNlcHRpb25IYW5kbGVyQ2xhc3MgfSBmcm9tICcuLi8uLi8uLi9TeXN0ZW0vQW9wJztcclxuXHJcbkBFeGNlcHRpb25IYW5kbGVyQ2xhc3MoRXJyb3JDb2Rlcy5DbGllbnRDb3JlKVxyXG4vKipcclxuICogSW4gT3JkZXIgdG8gaWRlbnRpZnkgd2hpY2ggZXZlbnRzIG11c3QgYmUgc2VuZCB0byB0aGUgc2VydmVyLCB0aGUgRXZlbnRCZWhhdmlvclxyXG4gKiBuZWVkcyB0byBwcm9jZXNzIHRoZSBFdmVudCBDaGFuZ2VzIHRoYXQgYXJlIGluIHRoZSBtb2RlbCBtYXBwZWQgb2JqZWN0LlxyXG4gKiBUaGUgRXZlbnQgQ2hhbmdlIGNvbnNpc3RzIG9mIGEga2V5LXZhbHVlIHBhaXIgb2YgZXZlbnQgbmFtZSBhbmQgYSBgYm9vbGVhbmAgYXMgYVxyXG4gKiBzdHJpbmcgdGhhdCBpbmRpY2F0ZXMgd2hldGhlciB0byBhZGQgb3IgdG8gcmVtb3ZlIHRoZSBldmVudCBmcm9tIHRoZSBsaXN0IG9mXHJcbiAqIGV2ZW50cyB0aGF0IG11c3QgYmUgc2VudCB0byB0aGUgc2VydmVyLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEV2ZW50QmVoYXZpb3IgaW1wbGVtZW50cyBJQ2xpZW50QmVoYXZpb3Ige1xyXG5cclxuICAgIC8qKiBAaW5oZXJpdGRvYyAqL1xyXG4gICAgYXBwbHkobW9kZWw6IElNb2RlbCwgcm9vdDogSUVudGl0eSk6IHZvaWQge1xyXG4gICAgICAgIGlmICghbW9kZWwgfHwgIW1vZGVsLmV2ZW50Q2hhbmdlcykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYXBwbHlFdmVudENoYW5nZXMobW9kZWwsIG1vZGVsLmV2ZW50Q2hhbmdlcyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBpbmhlcml0ZG9jICovXHJcbiAgICBnZXQgT3JkZXIoKTogT3JkZXIge1xyXG4gICAgICAgIHJldHVybiBPcmRlci5PUkQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBcHBsaWVzIHRoZSBFdmVudENoYW5nZXMgZm9yIHRoZSBtb2RlbCwgYWRkaW5nIG9yIHJlbW92aW5nIHRoZVxyXG4gICAgICogc3BlY2lmaWVkIGV2ZW50cyBmcm9tIHRoZSBjb2xsZWN0aW9uIG9mIGV2ZW50cyB0aGF0IHNob3VsZCBiZVxyXG4gICAgICogc2VudCB0byB0aGUgc2VydmVyLlxyXG4gICAgICogQHBhcmFtIG1vZGVsIFRoZSBtb2RlbC5cclxuICAgICAqIEBwYXJhbSBldmVudENoYW5nZXMgVGhlIG9iamVjdCB3aXRoIHRoZSBldmVudHMgdGhhdCBtdXN0IGJlIGFkZGVkXHJcbiAgICAgKiBvciByZW1vdmVkLlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGFwcGx5RXZlbnRDaGFuZ2VzKG1vZGVsOiBJTW9kZWwsIGV2ZW50Q2hhbmdlczogeyBbbmFtZTogc3RyaW5nXTogYm9vbGVhbiB9KTogdm9pZCB7XHJcbiAgICAgICAgZm9yIChjb25zdCBuYW1lIGluIGV2ZW50Q2hhbmdlcykge1xyXG4gICAgICAgICAgICBpZiAoZXZlbnRDaGFuZ2VzLmhhc093blByb3BlcnR5KG5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFuZ2UgPSBldmVudENoYW5nZXNbbmFtZV07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNoYW5nZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLmV2ZW50c1tuYW1lXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoYW5nZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgbW9kZWwuZXZlbnRzW25hbWVdO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBzb21ldGhpbmcgd2VudCB3cm9uZ1xyXG4gICAgICAgICAgICAgICAgICAgIFdNTG9nZ2VyLmluc3RhbmNlKCkuZXJyb3IoYFVua25vd24gZXZlbnQgJyR7bmFtZX0nIHdpdGggY2hhbmdlICcke2NoYW5nZX0nIGZvciAnYCArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGBtb2RlbCAnJHttb2RlbC51bmlxdWVOYW1lfScgd2l0aCBpZCAnJHttb2RlbC5VbmlxdWVJRH0nYCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGNsZWFudXAgdW5uZWVkZWQgZXZlbnRDaGFuZ2VzIGluIHRoZSBtb2RlbCBiZWNhdXNlIHRoaXMgaXMgdXNlZCBvbmx5IG9uY2Ugd2hlbiBhcHBsaWVkXHJcbiAgICAgICAgbW9kZWwuZXZlbnRDaGFuZ2VzID0ge307XHJcbiAgICB9XHJcbn1cclxuIl19","map":null,"metadata":{},"sourceType":"module"}