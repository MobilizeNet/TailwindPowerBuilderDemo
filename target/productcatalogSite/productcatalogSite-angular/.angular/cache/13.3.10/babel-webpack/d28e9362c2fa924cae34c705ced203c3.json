{"ast":null,"code":"import getField from './utils/get-field';\nimport { VALUE } from '../common/constants';\nimport { Class, defined } from '../common';\n\nclass SeriesBinder extends Class {\n  constructor() {\n    super();\n    this._valueFields = {};\n    this._otherFields = {};\n    this._nullValue = {};\n    this._undefinedValue = {};\n  }\n\n  register(seriesTypes, valueFields = [VALUE], otherFields = {}) {\n    for (let i = 0; i < seriesTypes.length; i++) {\n      const type = seriesTypes[i];\n      this._valueFields[type] = valueFields;\n      this._otherFields[type] = otherFields;\n      this._nullValue[type] = this._makeValue(valueFields, null);\n      this._undefinedValue[type] = this._makeValue(valueFields, undefined);\n    }\n  }\n\n  canonicalFields(series) {\n    return this.valueFields(series).concat(this.otherFields(series));\n  }\n\n  valueFields(series) {\n    return this._valueFields[series.type] || [VALUE];\n  }\n\n  otherFields(series) {\n    return this._otherFields[series.type] || [VALUE];\n  }\n\n  bindPoint(series, pointIx, item) {\n    const data = series.data;\n    const pointData = defined(item) ? item : data[pointIx];\n    const result = {\n      valueFields: {\n        value: pointData\n      }\n    };\n    const valueFields = this.valueFields(series);\n    const otherFields = this._otherFields[series.type];\n    let fields, value;\n\n    if (pointData === null) {\n      value = this._nullValue[series.type];\n    } else if (!defined(pointData)) {\n      value = this._undefinedValue[series.type];\n    } else if (Array.isArray(pointData)) {\n      const fieldData = pointData.slice(valueFields.length);\n      value = this._bindFromArray(pointData, valueFields);\n      fields = this._bindFromArray(fieldData, otherFields);\n    } else if (typeof pointData === \"object\") {\n      const srcValueFields = this.sourceFields(series, valueFields);\n      const srcPointFields = this.sourceFields(series, otherFields);\n      value = this._bindFromObject(pointData, valueFields, srcValueFields);\n      fields = this._bindFromObject(pointData, otherFields, srcPointFields);\n    }\n\n    if (defined(value)) {\n      if (valueFields.length === 1) {\n        result.valueFields.value = value[valueFields[0]];\n      } else {\n        result.valueFields = value;\n      }\n    }\n\n    result.fields = fields || {};\n    return result;\n  }\n\n  _makeValue(fields, initialValue) {\n    const value = {};\n    const length = fields.length;\n\n    for (let i = 0; i < length; i++) {\n      const fieldName = fields[i];\n      value[fieldName] = initialValue;\n    }\n\n    return value;\n  }\n\n  _bindFromArray(array, fields) {\n    const value = {};\n\n    if (fields) {\n      const length = Math.min(fields.length, array.length);\n\n      for (let i = 0; i < length; i++) {\n        value[fields[i]] = array[i];\n      }\n    }\n\n    return value;\n  }\n\n  _bindFromObject(object, fields, srcFields = fields) {\n    const value = {};\n\n    if (fields) {\n      const length = fields.length;\n\n      for (let i = 0; i < length; i++) {\n        const fieldName = fields[i];\n        const srcFieldName = srcFields[i];\n\n        if (srcFieldName !== null) {\n          value[fieldName] = getField(srcFieldName, object);\n        }\n      }\n    }\n\n    return value;\n  }\n\n  sourceFields(series, canonicalFields) {\n    const sourceFields = [];\n\n    if (canonicalFields) {\n      const length = canonicalFields.length;\n\n      for (let i = 0; i < length; i++) {\n        const fieldName = canonicalFields[i];\n        const sourceFieldName = fieldName === VALUE ? \"field\" : fieldName + \"Field\";\n        sourceFields.push(series[sourceFieldName] !== null ? series[sourceFieldName] || fieldName : null);\n      }\n    }\n\n    return sourceFields;\n  }\n\n}\n\nSeriesBinder.current = new SeriesBinder();\nexport default SeriesBinder;","map":null,"metadata":{},"sourceType":"module"}