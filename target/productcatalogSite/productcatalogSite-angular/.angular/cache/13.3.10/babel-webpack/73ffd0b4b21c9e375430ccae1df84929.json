{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(972);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  972:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n    (function (f, define) {\n      !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(973)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    })(function () {\n      (function ($, undefined) {\n        var kendo = window.kendo,\n            Class = kendo.Class,\n            Editor = kendo.ui.editor,\n            dom = Editor.Dom,\n            template = kendo.template,\n            RangeUtils = Editor.RangeUtils,\n            complexBlocks = [\"ul\", \"ol\", \"tbody\", \"thead\", \"table\"],\n            toolsToBeUpdated = [\"bold\", \"italic\", \"underline\", \"strikethrough\", \"superscript\", \"subscript\", \"forecolor\", \"backcolor\", \"fontname\", \"fontsize\", \"createlink\", \"unlink\", \"autolink\", \"addcolumnleft\", \"addcolumnright\", \"addrowabove\", \"addrowbelow\", \"deleterow\", \"deletecolumn\", \"mergecells\", \"formatting\", \"cleanformatting\"],\n            IMMUTABALE = \"k-immutable\",\n            IMMUTABALE_MARKER_SELECTOR = \"[\" + IMMUTABALE + \"]\",\n            IMMUTABLE_SELECTOR = \"[contenteditable='false']\";\n\n        var rootCondition = function (node) {\n          return $(node).is(\"body,.k-editor\");\n        };\n\n        var immutable = function (node) {\n          return node.getAttribute && node.getAttribute(\"contenteditable\") == \"false\";\n        };\n\n        var immutableParent = function (node) {\n          return dom.closestBy(node, immutable, rootCondition);\n        };\n\n        var expandImmutablesIn = function (range) {\n          var startImmutableParent = immutableParent(range.startContainer);\n          var endImmutableParent = immutableParent(range.endContainer);\n\n          if (startImmutableParent || endImmutableParent) {\n            if (startImmutableParent) {\n              range.setStartBefore(startImmutableParent);\n            }\n\n            if (endImmutableParent) {\n              range.setEndAfter(endImmutableParent);\n            }\n          }\n        };\n\n        var immutablesContext = function (range) {\n          if (immutableParent(range.commonAncestorContainer)) {\n            return true;\n          } else if (immutableParent(range.startContainer) || immutableParent(range.endContainer)) {\n            var editableNodes = RangeUtils.editableTextNodes(range);\n\n            if (editableNodes.length === 0) {\n              return true;\n            }\n          }\n\n          return false;\n        };\n\n        var randomId = function (length) {\n          var result = '';\n          var chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n          for (var i = length || 10; i > 0; --i) {\n            result += chars.charAt(Math.round(Math.random() * (chars.length - 1)));\n          }\n\n          return result;\n        };\n\n        var removeImmutables = function (root) {\n          var serializedImmutables = {\n            empty: true\n          },\n              nodeName,\n              id,\n              serialized;\n          $(root).find(IMMUTABLE_SELECTOR).each(function (i, node) {\n            nodeName = dom.name(node);\n            id = randomId();\n            serialized = \"<\" + nodeName + \" \" + IMMUTABALE + \"='\" + id + \"'></\" + nodeName + \">\";\n            serializedImmutables[id] = {\n              node: node,\n              style: $(node).attr(\"style\")\n            };\n            serializedImmutables.empty = false;\n            $(node).replaceWith(serialized);\n          });\n          return serializedImmutables;\n        };\n\n        var restoreImmutables = function (root, serializedImmutables) {\n          var id, immutable;\n          $(root).find(IMMUTABALE_MARKER_SELECTOR).each(function (i, node) {\n            id = node.getAttribute(IMMUTABALE);\n            immutable = serializedImmutables[id];\n            $(node).replaceWith(immutable.node);\n\n            if (immutable.style != $(immutable.node).attr(\"style\")) {\n              $(immutable.node).removeAttr(\"style\").attr(\"style\", immutable.style);\n            }\n          });\n        };\n\n        var deletingKey = function (keyCode) {\n          var keys = kendo.keys;\n          return keyCode === keys.BACKSPACE || keyCode == keys.DELETE;\n        };\n\n        var updateToolOptions = function (tool) {\n          var options = tool ? tool.options : undefined;\n\n          if (options && options.finder) {\n            options.finder._initOptions({\n              immutables: true\n            });\n          }\n        };\n\n        var Immutables = Class.extend({\n          init: function (editor) {\n            this.editor = editor;\n            this.serializedImmutables = {};\n            this.options = $.extend({}, editor && editor.options && editor.options.immutables);\n            var tools = editor.toolbar.tools;\n            updateToolOptions(tools.justifyLeft);\n            updateToolOptions(tools.justifyCenter);\n            updateToolOptions(tools.justifyRight);\n            updateToolOptions(tools.justifyFull);\n          },\n          serialize: function (node) {\n            var result = this._toHtml(node),\n                id;\n\n            if (result.indexOf(IMMUTABALE) === -1) {\n              id = this.randomId();\n              result = result.replace(/>/, ' ' + IMMUTABALE + '=\"' + id + '\">');\n            } else {\n              id = result.match(/k-immutable\\s*=\\s*['\"](.*)['\"]/)[1];\n            }\n\n            this.serializedImmutables[id] = node;\n            return result;\n          },\n          _toHtml: function (node) {\n            var serialization = this.options.serialization;\n            var serializationType = typeof serialization;\n            var nodeName;\n\n            switch (serializationType) {\n              case \"string\":\n                return template(serialization)(node);\n\n              case \"function\":\n                return serialization(node);\n\n              default:\n                nodeName = dom.name(node);\n                return \"<\" + nodeName + \"></\" + nodeName + \">\";\n            }\n          },\n          deserialize: function (node) {\n            var that = this;\n            var deserialization = this.options.deserialization;\n            $(IMMUTABALE_MARKER_SELECTOR, node).each(function () {\n              var id = this.getAttribute(IMMUTABALE);\n              var immutable = that.serializedImmutables[id];\n\n              if (kendo.isFunction(deserialization)) {\n                deserialization(this, immutable);\n              }\n\n              $(this).replaceWith(immutable);\n            });\n            that.serializedImmutables = {};\n          },\n          randomId: function (length) {\n            return randomId(length);\n          },\n          keydown: function (e, range) {\n            var isDeleting = deletingKey(e.keyCode);\n\n            var shouldCancelEvent = isDeleting && this._cancelDeleting(e, range) || !isDeleting && this._cancelTyping(e, range);\n\n            if (shouldCancelEvent) {\n              e.preventDefault();\n              return true;\n            }\n          },\n          _cancelTyping: function (e, range) {\n            var editor = this.editor;\n            var keyboard = editor.keyboard;\n            return range.collapsed && !keyboard.typingInProgress && keyboard.isTypingKey(e) && immutablesContext(range);\n          },\n          _cancelDeleting: function (e, range) {\n            var keys = kendo.keys;\n            var backspace = e.keyCode === keys.BACKSPACE;\n            var del = e.keyCode == keys.DELETE;\n\n            if (!backspace && !del) {\n              return false;\n            }\n\n            var cancelDeleting = false;\n\n            if (range.collapsed) {\n              if (immutablesContext(range)) {\n                return true;\n              }\n\n              var immutable = this.nextImmutable(range, del);\n\n              if (immutable && backspace) {\n                var closestSelectionLi = dom.closest(range.commonAncestorContainer, \"li\");\n\n                if (closestSelectionLi) {\n                  var closestImmutableLi = dom.closest(immutable, \"li\");\n\n                  if (closestImmutableLi && closestImmutableLi !== closestSelectionLi) {\n                    return cancelDeleting;\n                  }\n                }\n              }\n\n              if (immutable && !dom.tableCell(immutable)) {\n                if (dom.parentOfType(immutable, complexBlocks) === dom.parentOfType(range.commonAncestorContainer, complexBlocks)) {\n                  while (immutable && immutable.parentNode.childNodes.length == 1) {\n                    immutable = immutable.parentNode;\n                  }\n\n                  if (dom.tableCell(immutable)) {\n                    return cancelDeleting;\n                  }\n\n                  this._removeImmutable(immutable, range);\n                }\n\n                cancelDeleting = true;\n              }\n            }\n\n            return cancelDeleting;\n          },\n          nextImmutable: function (range, forwards) {\n            var commonContainer = range.commonAncestorContainer;\n\n            if (dom.isBom(commonContainer) || forwards && RangeUtils.isEndOf(range, commonContainer) || !forwards && RangeUtils.isStartOf(range, commonContainer)) {\n              var next = this._nextNode(commonContainer, forwards);\n\n              if (next && dom.isBlock(next) && !immutableParent(next)) {\n                while (next && next.children && next.children[forwards ? 0 : next.children.length - 1]) {\n                  next = next.children[forwards ? 0 : next.children.length - 1];\n                }\n              }\n\n              return immutableParent(next);\n            }\n          },\n          _removeImmutable: function (immutable, range) {\n            var editor = this.editor;\n            var startRestorePoint = new Editor.RestorePoint(range, editor.body);\n            dom.remove(immutable);\n\n            Editor._finishUpdate(editor, startRestorePoint);\n          },\n          _nextNode: function (node, forwards) {\n            var sibling = forwards ? \"nextSibling\" : \"previousSibling\";\n            var current = node,\n                next;\n\n            while (current && !next) {\n              next = current[sibling];\n\n              if (next && dom.isDataNode(next) && /^\\s|[\\ufeff]$/.test(next.nodeValue)) {\n                current = next;\n                next = current[sibling];\n              }\n\n              if (!next) {\n                current = current.parentNode;\n              }\n            }\n\n            return next;\n          }\n        });\n        Immutables.immutable = immutable;\n        Immutables.immutableParent = immutableParent;\n        Immutables.expandImmutablesIn = expandImmutablesIn;\n        Immutables.immutablesContext = immutablesContext;\n        Immutables.toolsToBeUpdated = toolsToBeUpdated;\n        Immutables.removeImmutables = removeImmutables;\n        Immutables.restoreImmutables = restoreImmutables;\n        Editor.Immutables = Immutables;\n      })(window.kendo.jQuery);\n    }, __webpack_require__(3));\n    /***/\n\n  },\n\n  /***/\n  973:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./range\");\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}