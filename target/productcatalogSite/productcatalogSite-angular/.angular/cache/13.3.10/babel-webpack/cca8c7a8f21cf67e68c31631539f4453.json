{"ast":null,"code":"module.exports =\n/******/\nfunction (modules) {\n  // webpackBootstrap\n\n  /******/\n  // The module cache\n\n  /******/\n  var installedModules = {};\n  /******/\n  // The require function\n\n  /******/\n\n  function __webpack_require__(moduleId) {\n    /******/\n    // Check if module is in cache\n\n    /******/\n    if (installedModules[moduleId])\n      /******/\n      return installedModules[moduleId].exports;\n    /******/\n    // Create a new module (and put it into the cache)\n\n    /******/\n\n    var module = installedModules[moduleId] = {\n      /******/\n      exports: {},\n\n      /******/\n      id: moduleId,\n\n      /******/\n      loaded: false\n      /******/\n\n    };\n    /******/\n    // Execute the module function\n\n    /******/\n\n    modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n    /******/\n    // Flag the module as loaded\n\n    /******/\n\n    module.loaded = true;\n    /******/\n    // Return the exports of the module\n\n    /******/\n\n    return module.exports;\n    /******/\n  }\n  /******/\n  // expose the modules object (__webpack_modules__)\n\n  /******/\n\n\n  __webpack_require__.m = modules;\n  /******/\n  // expose the module cache\n\n  /******/\n\n  __webpack_require__.c = installedModules;\n  /******/\n  // __webpack_public_path__\n\n  /******/\n\n  __webpack_require__.p = \"\";\n  /******/\n  // Load entry module and return exports\n\n  /******/\n\n  return __webpack_require__(0);\n  /******/\n}\n/************************************************************************/\n\n/******/\n({\n  /***/\n  0:\n  /***/\n  function (module, exports, __webpack_require__) {\n    module.exports = __webpack_require__(1493);\n    /***/\n  },\n\n  /***/\n  3:\n  /***/\n  function (module, exports) {\n    module.exports = function () {\n      throw new Error(\"define cannot be used indirect\");\n    };\n    /***/\n\n  },\n\n  /***/\n  1051:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.core\");\n    /***/\n  },\n\n  /***/\n  1052:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.popup\");\n    /***/\n  },\n\n  /***/\n  1060:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"jquery\");\n    /***/\n  },\n\n  /***/\n  1089:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.html.button\");\n    /***/\n  },\n\n  /***/\n  1112:\n  /***/\n  function (module, exports) {\n    module.exports = require(\"./kendo.userevents\");\n    /***/\n  },\n\n  /***/\n  1493:\n  /***/\n  function (module, exports, __webpack_require__) {\n    var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n    /* WEBPACK VAR INJECTION */\n\n\n    (function (jQuery) {\n      (function (f, define) {\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1051), __webpack_require__(1112), __webpack_require__(1052), __webpack_require__(1089)], __WEBPACK_AMD_DEFINE_FACTORY__ = f, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n      })(function () {\n        var __meta__ = {\n          // jshint ignore:line\n          id: \"toolbar\",\n          name: \"ToolBar\",\n          category: \"web\",\n          description: \"The ToolBar widget displays one or more command buttons divided into groups.\",\n          depends: [\"core\", \"html.button\"]\n        };\n\n        (function ($, undefined) {\n          var kendo = window.kendo,\n              Class = kendo.Class,\n              Widget = kendo.ui.Widget,\n              isFunction = kendo.isFunction,\n              keys = kendo.keys,\n              outerWidth = kendo._outerWidth,\n              ns = \".kendoToolBar\",\n              TOOLBAR = \"k-toolbar\",\n              KBUTTON = \"k-button\",\n              BUTTON_DEFAULTS = \"k-button-md k-rounded-md k-button-solid k-button-solid-base\",\n              OVERFLOW_BUTTON = \"k-overflow-button\",\n              TOGGLE_BUTTON = \"k-toggle-button\",\n              BUTTON_GROUP = \"k-button-group\",\n              SPLIT_BUTTON = \"k-split-button\",\n              SPLIT_BUTTON_ARROW = \"k-split-button-arrow\",\n              LIST_CONTAINER = \"k-list-container k-split-container\",\n              ICON_BUTTON = \"k-icon-button\",\n              KSEPARATOR = \"k-separator\",\n              SPACER_CLASS = \"k-spacer\",\n              POPUP = \"k-popup\",\n              RESIZABLE_TOOLBAR = \"k-toolbar-resizable\",\n              STATE_SELECTED = \"k-selected\",\n              STATE_DISABLED = \"k-disabled\",\n              STATE_HIDDEN = \"k-state-hidden\",\n              HIDDEN = \"k-hidden\",\n              GROUP_START = \"k-group-start\",\n              GROUP_END = \"k-group-end\",\n              MENU_LINK = \"k-menu-link\",\n              OVERFLOW_GROUP = \"k-overflow-group\",\n              OVERFLOW_HIDDEN = \"k-overflow-hidden\",\n              OVERFLOW_ANCHOR = \"k-overflow-anchor\",\n              OVERFLOW_CONTAINER = \"k-overflow-container\",\n              OVERFLOW_WRAPPER = \"k-overflow-wrapper\",\n              FIRST_TOOLBAR_VISIBLE = \"k-toolbar-first-visible\",\n              LAST_TOOLBAR_VISIBLE = \"k-toolbar-last-visible\",\n              BUTTON_ROUNDED_MD = \"k-rounded-md\",\n              MENU_GROUP = \"k-group k-menu-group k-reset k-menu-group-md\",\n              ARIA_DISABLED = \"aria-disabled\",\n              ARIA_PRESSED = \"aria-pressed\",\n              CLICK = \"click\",\n              TOGGLE = \"toggle\",\n              OPEN = \"open\",\n              CLOSE = \"close\",\n              FOCUS = \"focus\",\n              FOCUSIN = \"focusin\",\n              KEYDOWN = \"keydown\",\n              TAP = \"tap\",\n              SPACER = \"spacer\",\n              BOTH = \"both\",\n              PRIMARY = \"primary\",\n              HREF = \"href\",\n              ROLE = \"role\",\n              BUTTON = \"button\",\n              SEPARATOR = \"separator\",\n              OVERFLOW = \"overflow\",\n              NEXT = \"next\",\n              PREV = \"prev\",\n              TABINDEX = \"tabindex\",\n              TEMPLATE = \"template\",\n              OVERFLOW_OPEN = \"overflowOpen\",\n              OVERFLOW_CLOSE = \"overflowClose\",\n              OVERFLOW_NEVER = \"never\",\n              OVERFLOW_AUTO = \"auto\",\n              OVERFLOW_ALWAYS = \"always\",\n              OPTION_LIST_SUFFIX = \"_optionlist\",\n              KENDO_UID_ATTR = kendo.attr(\"uid\"),\n              POPUP_ITEM_TEMPLATE = '<li class=\"k-menu-item k-item\">',\n              MENU_LINK_SPAN = '<span tabindex=\"0\" class=\"k-link k-menu-link\">' + '<span class=\"k-menu-link-text\">#:text#</span>' + '</span>',\n              MENU_LINK_A = '<a href=\"#:href#\" class=\"k-link k-menu-link\">' + '<span class=\"k-menu-link-text\">#:text#</span>' + '</a>',\n              EMPTY = \" \",\n              NOTHING = \"\",\n              DOT = \".\",\n              COMMA = \",\",\n              ID = \"id\";\n          kendo.toolbar = {};\n          var components = {\n            overflowAnchor: '<div tabindex=\"0\" class=\"k-overflow-anchor k-button k-button-md k-rounded-md k-button-flat k-button-flat-base\" title=\"More tools\" role=\"button\"></div>',\n            overflowContainer: '<ul class=\"k-overflow-container k-list-container\"></ul>'\n          };\n\n          kendo.toolbar.registerComponent = function (name, toolbar, overflow) {\n            components[name] = {\n              toolbar: toolbar,\n              overflow: overflow\n            };\n          };\n\n          var Item = kendo.Class.extend({\n            addOverflowAttr: function () {\n              this.element.attr(kendo.attr(OVERFLOW), this.options.overflow || OVERFLOW_AUTO);\n            },\n            addUidAttr: function () {\n              this.element.attr(KENDO_UID_ATTR, this.options.uid);\n            },\n            addIdAttr: function () {\n              if (this.options.id) {\n                this.element.attr(ID, this.options.id);\n              }\n            },\n            addOverflowIdAttr: function () {\n              if (this.options.id) {\n                this.element.attr(ID, this.options.id + \"_overflow\");\n              }\n            },\n            attributes: function () {\n              var attributes = this.options.attributes,\n                  classes;\n\n              if (attributes) {\n                if (attributes.class) {\n                  classes = attributes.class;\n                  this.element.addClass(classes);\n                  delete attributes.class;\n                }\n\n                this.element.attr(attributes);\n                attributes.class = classes;\n              }\n            },\n            show: function () {\n              this.element.removeClass(STATE_HIDDEN);\n              this.element.removeClass(HIDDEN);\n              this.options.hidden = false;\n            },\n            hide: function () {\n              this.element.addClass(STATE_HIDDEN);\n              this.element.addClass(HIDDEN);\n\n              if (this.overflow && this.overflowHidden) {\n                this.overflowHidden();\n              }\n\n              this.options.hidden = true;\n            },\n            remove: function () {\n              this.element.remove();\n            },\n            enable: function (isEnabled) {\n              if (isEnabled === undefined) {\n                isEnabled = true;\n              }\n\n              this.element.toggleClass(STATE_DISABLED, !isEnabled);\n              this.element.attr(ARIA_DISABLED, !isEnabled);\n              this.options.enable = isEnabled;\n            },\n            twin: function () {\n              var uid = this.element.attr(KENDO_UID_ATTR);\n\n              if (this.overflow && this.options.splitContainerId) {\n                return $(\"#\" + this.options.splitContainerId).find(\"[\" + KENDO_UID_ATTR + \"='\" + uid + \"']\").data(this.options.type);\n              } else if (this.overflow) {\n                return this.toolbar.element.find(\"[\" + KENDO_UID_ATTR + \"='\" + uid + \"']\").data(this.options.type);\n              } else if (this.toolbar.options.resizable) {\n                return this.toolbar.popup.element.find(\"[\" + KENDO_UID_ATTR + \"='\" + uid + \"']\").data(this.options.type);\n              }\n            }\n          });\n          kendo.toolbar.Item = Item;\n          var Button = Item.extend({\n            init: function (options, toolbar) {\n              var element = options.useButtonTag ? $('<button></button>') : $('<a role=\"button\" href></a>');\n              this.element = element;\n              this.options = $.extend({}, this.options, options);\n              this.toolbar = toolbar;\n              this.attributes();\n\n              if (options.primary) {\n                this.options.themeColor = PRIMARY;\n              }\n\n              if (options.togglable) {\n                element.addClass(TOGGLE_BUTTON);\n                this.toggle(options.selected);\n              }\n\n              if (options.url !== undefined && !options.useButtonTag) {\n                element.attr(HREF, options.url);\n\n                if (options.mobile) {\n                  element.attr(kendo.attr(ROLE), BUTTON);\n                }\n              }\n\n              if (options.group) {\n                element.attr(kendo.attr(\"group\"), options.group);\n                this.group = this.toolbar.addToGroup(this, options.group);\n              }\n\n              if (!options.togglable && options.click && isFunction(options.click)) {\n                this.clickHandler = options.click;\n              }\n\n              if (options.togglable && options.toggle && isFunction(options.toggle)) {\n                this.toggleHandler = options.toggle;\n              }\n            },\n            options: {\n              showIcon: BOTH,\n              showText: BOTH\n            },\n            toggle: function (state, propagate) {\n              state = !!state;\n\n              if (this.group && state) {\n                this.group.select(this);\n              } else if (!this.group) {\n                this.select(state);\n              }\n\n              if (propagate && this.twin()) {\n                this.twin().toggle(state);\n              }\n            },\n            getParentGroup: function () {\n              if (this.options.isChild) {\n                return this.element.closest(DOT + BUTTON_GROUP).data(\"buttonGroup\");\n              }\n            }\n          });\n          kendo.toolbar.Button = Button;\n          var ToolBarButton = Button.extend({\n            init: function (options, toolbar) {\n              Button.fn.init.call(this, options, toolbar);\n              var element = this.element;\n              options = this.options;\n              element.addClass(KBUTTON);\n              this.addIdAttr();\n\n              if (options.align) {\n                element.addClass(\"k-align-\" + options.align);\n              }\n\n              if (!!options.text && (options.showText == \"toolbar\" || options.showText == BOTH)) {\n                if (options.mobile) {\n                  element.html('<span class=\"km-text\">' + options.text + \"</span>\");\n                } else {\n                  element.html(options.text);\n                }\n              } else if (!!options.text) {\n                element.attr(\"aria-label\", options.text);\n              }\n\n              if (options.icon || options.spriteCssClass || options.imageUrl) {\n                if (options.showIcon !== \"toolbar\" && options.showIcon !== BOTH) {\n                  options.icon = null;\n                  options.spriteCssClass = null;\n                  options.imageUrl = null;\n                }\n              }\n\n              kendo.html.renderButton(element, options);\n              this.addUidAttr();\n              this.addOverflowAttr();\n              this.enable(options.enable);\n\n              if (options.hidden) {\n                this.hide();\n              }\n\n              this.element.data({\n                type: BUTTON,\n                button: this\n              });\n            },\n            select: function (selected) {\n              if (selected === undefined) {\n                selected = false;\n              }\n\n              if (this.options.togglable) {\n                this.element.attr(ARIA_PRESSED, selected);\n              }\n\n              this.element.toggleClass(STATE_SELECTED, selected);\n              this.options.selected = selected;\n            }\n          });\n          kendo.toolbar.ToolBarButton = ToolBarButton;\n          var OverflowButton = Button.extend({\n            init: function (options, toolbar) {\n              this.overflow = true;\n              Button.fn.init.call(this, $.extend({}, options), toolbar);\n              var element = this.element;\n              options = this.options;\n\n              if (!!options.text && (options.showText == OVERFLOW || options.showText == BOTH)) {\n                if (options.mobile) {\n                  element.html('<span class=\"km-text\">' + options.text + \"</span>\");\n                } else {\n                  element.html(options.text);\n                }\n              } else if (!!options.text) {\n                element.attr(\"aria-label\", options.text);\n              }\n\n              if (options.icon || options.spriteCssClass || options.imageUrl) {\n                if (options.showIcon !== OVERFLOW && options.showIcon !== BOTH) {\n                  options.icon = null;\n                  options.spriteCssClass = null;\n                  options.imageUrl = null;\n                }\n              }\n\n              kendo.html.renderButton(element, options);\n\n              if (!options.isChild) {\n                this._wrap();\n              }\n\n              this.addOverflowIdAttr();\n              this.attributes();\n              this.addUidAttr();\n              this.addOverflowAttr();\n              this.enable(options.enable);\n              element.addClass(OVERFLOW_BUTTON + EMPTY + KBUTTON);\n\n              if (options.hidden) {\n                this.hide();\n              }\n\n              if (options.togglable) {\n                this.toggle(options.selected);\n              }\n\n              this.element.data({\n                type: BUTTON,\n                button: this\n              });\n            },\n            _wrap: function () {\n              this.element = this.element.wrap(POPUP_ITEM_TEMPLATE).parent();\n            },\n            overflowHidden: function () {\n              this.element.addClass(OVERFLOW_HIDDEN);\n            },\n            select: function (selected) {\n              if (selected === undefined) {\n                selected = false;\n              }\n\n              if (this.options.isChild) {\n                this.element.toggleClass(STATE_SELECTED, selected);\n              } else {\n                this.element.find(DOT + KBUTTON).toggleClass(STATE_SELECTED, selected);\n              }\n\n              this.options.selected = selected;\n            }\n          });\n          kendo.toolbar.OverflowButton = OverflowButton;\n          kendo.toolbar.registerComponent(BUTTON, ToolBarButton, OverflowButton);\n          var ButtonGroup = Item.extend({\n            createButtons: function (buttonConstructor) {\n              var options = this.options;\n              var items = options.buttons || [];\n              var item;\n\n              for (var i = 0; i < items.length; i++) {\n                if (!items[i].uid) {\n                  items[i].uid = kendo.guid();\n                }\n\n                item = new buttonConstructor($.extend({\n                  mobile: options.mobile,\n                  isChild: true,\n                  type: BUTTON\n                }, items[i]), this.toolbar);\n                item.element.appendTo(this.element);\n              }\n            },\n            refresh: function () {\n              this.element.children().filter(\":not('.\" + STATE_HIDDEN + \"')\").first().addClass(GROUP_START);\n              this.element.children().filter(\":not('.\" + STATE_HIDDEN + \"')\").last().addClass(GROUP_END);\n            }\n          });\n          kendo.toolbar.ButtonGroup = ButtonGroup;\n          var ToolBarButtonGroup = ButtonGroup.extend({\n            init: function (options, toolbar) {\n              var element = this.element = $('<div></div>');\n              this.options = options;\n              this.toolbar = toolbar;\n              this.addIdAttr();\n\n              if (options.align) {\n                element.addClass(\"k-align-\" + options.align);\n              }\n\n              this.createButtons(ToolBarButton);\n              this.attributes();\n              this.addUidAttr();\n              this.addOverflowAttr();\n              this.refresh();\n              element.addClass(BUTTON_GROUP);\n\n              if (options.hidden) {\n                this.hide();\n              }\n\n              this.element.data({\n                type: \"buttonGroup\",\n                buttonGroup: this\n              });\n            }\n          });\n          kendo.toolbar.ToolBarButtonGroup = ToolBarButtonGroup;\n          var OverflowButtonGroup = ButtonGroup.extend({\n            init: function (options, toolbar) {\n              var element = this.element = $('<li></li>');\n              this.options = options;\n              this.toolbar = toolbar;\n              this.overflow = true;\n              this.addOverflowIdAttr();\n              this.createButtons(OverflowButton);\n              this.attributes();\n              this.addUidAttr();\n              this.addOverflowAttr();\n              this.refresh();\n              element.addClass((options.mobile ? NOTHING : BUTTON_GROUP) + EMPTY + OVERFLOW_GROUP);\n              this.element.data({\n                type: \"buttonGroup\",\n                buttonGroup: this\n              });\n            },\n            overflowHidden: function () {\n              this.element.addClass(OVERFLOW_HIDDEN);\n            }\n          });\n          kendo.toolbar.OverflowButtonGroup = OverflowButtonGroup;\n          kendo.toolbar.registerComponent(\"buttonGroup\", ToolBarButtonGroup, OverflowButtonGroup);\n          var ToolBarMenuButton = ToolBarButton.extend({\n            init: function (options, toolbar) {\n              var element, img, span;\n              options = this.options = $.extend({}, this.options, options);\n\n              if (options.url !== undefined) {\n                element = $(kendo.template(MENU_LINK_A)({\n                  href: options.url,\n                  text: options.text\n                }));\n              } else {\n                element = $(kendo.template(MENU_LINK_SPAN)({\n                  text: options.text\n                }));\n              }\n\n              this.element = element;\n              this.toolbar = toolbar;\n\n              if (options.click && isFunction(options.click)) {\n                this.clickHandler = options.click;\n              }\n\n              if (options.togglable && options.toggle && isFunction(options.toggle)) {\n                this.toggleHandler = options.toggle;\n              }\n\n              if (options.imageUrl) {\n                img = $('<img alt=\"icon\" class=\"k-image\" />').prependTo(element);\n                img.attr(\"src\", options.imageUrl);\n              } else if (options.icon) {\n                span = $('<span></span>').prependTo(element);\n                span.attr(\"class\", \"k-icon k-i-\" + options.icon);\n              } else if (options.spriteCssClass) {\n                span = $('<span class=\"k-sprite\"></span>').prependTo(element);\n                span.addClass(options.spriteCssClass);\n              }\n\n              this.addIdAttr();\n              this.addUidAttr();\n              this.addOverflowAttr();\n              this.attributes();\n              this.enable(options.enable);\n\n              if (options.group) {\n                element.attr(kendo.attr(\"group\"), options.group);\n                this.group = this.toolbar.addToGroup(this, options.group);\n              }\n\n              if (options.hidden) {\n                this.hide();\n              }\n\n              this.element.data({\n                type: BUTTON,\n                button: this\n              });\n            }\n          });\n          kendo.toolbar.ToolBarMenuButton = ToolBarMenuButton;\n          var ToolBarSplitButton = Item.extend({\n            init: function (options, toolbar) {\n              var element = this.element = $('<div class=\"' + SPLIT_BUTTON + EMPTY + BUTTON_GROUP + EMPTY + BUTTON_ROUNDED_MD + '\" tabindex=\"0\"></div>');\n              this.options = options;\n              this.toolbar = toolbar;\n              this.mainButton = new ToolBarButton($.extend({}, options, {\n                hidden: false\n              }), toolbar);\n              this.arrowButton = $('<a class=\"' + KBUTTON + EMPTY + BUTTON_DEFAULTS + EMPTY + ICON_BUTTON + EMPTY + SPLIT_BUTTON_ARROW + '\"><span class=\"' + (options.mobile ? \"km-icon km-arrowdown\" : \"k-icon k-button-icon k-i-arrow-s\") + '\"></span></a>');\n              this.popupElement = $('<ul class=\"' + LIST_CONTAINER + EMPTY + MENU_GROUP + '\"></ul>');\n              this.mainButton.element.removeAttr(\"href tabindex\").appendTo(element);\n              this.arrowButton.appendTo(element);\n              this.popupElement.appendTo(element);\n\n              if (options.align) {\n                element.addClass(\"k-align-\" + options.align);\n              }\n\n              if (!options.id) {\n                options.id = options.uid;\n              }\n\n              element.attr(ID, options.id + \"_wrapper\");\n              this.addOverflowAttr();\n              this.addUidAttr();\n              this.createMenuButtons();\n              this.createPopup();\n\n              this._navigatable();\n\n              this.mainButton.main = true;\n              this.enable(options.enable);\n\n              if (options.hidden) {\n                this.hide();\n              }\n\n              element.data({\n                type: \"splitButton\",\n                splitButton: this,\n                kendoPopup: this.popup\n              });\n            },\n            _navigatable: function () {\n              var that = this;\n              that.popupElement.on(KEYDOWN + ns, DOT + MENU_LINK, function (e) {\n                var li = $(e.target).parent();\n                e.preventDefault();\n\n                if (e.keyCode === keys.ESC || e.keyCode === keys.TAB || e.altKey && e.keyCode === keys.UP) {\n                  that.toggle();\n                  that.focus();\n                } else if (e.keyCode === keys.DOWN) {\n                  findFocusableSibling(li, NEXT).trigger(FOCUS);\n                } else if (e.keyCode === keys.UP) {\n                  findFocusableSibling(li, PREV).trigger(FOCUS);\n                } else if (e.keyCode === keys.SPACEBAR || e.keyCode === keys.ENTER) {\n                  that.toolbar.userEvents.trigger(TAP, {\n                    target: $(e.target)\n                  });\n                } else if (e.keyCode === keys.HOME) {\n                  li.parent().find(\":kendoFocusable\").first().trigger(FOCUS);\n                } else if (e.keyCode === keys.END) {\n                  li.parent().find(\":kendoFocusable\").last().trigger(FOCUS);\n                }\n              });\n            },\n            createMenuButtons: function () {\n              var options = this.options;\n              var items = options.menuButtons;\n              var item;\n\n              for (var i = 0; i < items.length; i++) {\n                item = new ToolBarMenuButton($.extend({\n                  mobile: options.mobile,\n                  type: BUTTON,\n                  click: options.click\n                }, items[i]), this.toolbar);\n                item.element.wrap(POPUP_ITEM_TEMPLATE).parent().appendTo(this.popupElement);\n              }\n            },\n            createPopup: function () {\n              var that = this;\n              var options = this.options;\n              var element = this.element;\n              this.popupElement.attr(ID, options.id + OPTION_LIST_SUFFIX).attr(KENDO_UID_ATTR, options.rootUid);\n\n              if (options.mobile) {\n                this.popupElement = actionSheetWrap(this.popupElement);\n              }\n\n              this.popup = this.popupElement.kendoPopup({\n                appendTo: options.mobile ? $(options.mobile).children(\".km-pane\") : null,\n                anchor: element,\n                isRtl: this.toolbar._isRtl,\n                copyAnchorStyles: false,\n                animation: options.animation,\n                open: function (e) {\n                  var isDefaultPrevented = that.toolbar.trigger(OPEN, {\n                    target: element\n                  });\n\n                  if (isDefaultPrevented) {\n                    e.preventDefault();\n                    return;\n                  }\n\n                  that.adjustPopupWidth(e.sender);\n                },\n                activate: function () {\n                  this.element.find(\":kendoFocusable\").first().trigger(FOCUS);\n                },\n                close: function (e) {\n                  var isDefaultPrevented = that.toolbar.trigger(CLOSE, {\n                    target: element\n                  });\n\n                  if (isDefaultPrevented) {\n                    e.preventDefault();\n                  }\n\n                  element.trigger(FOCUS);\n                }\n              }).data(\"kendoPopup\");\n              this.popup.element.on(CLICK + ns, \"a.k-button\", preventClick);\n            },\n            adjustPopupWidth: function (popup) {\n              var anchor = popup.options.anchor,\n                  computedWidth = outerWidth(anchor),\n                  width;\n              kendo.wrap(popup.element).addClass(\"k-split-wrapper\");\n\n              if (popup.element.css(\"box-sizing\") !== \"border-box\") {\n                width = computedWidth - (outerWidth(popup.element) - popup.element.width());\n              } else {\n                width = computedWidth;\n              }\n\n              popup.element.css({\n                fontFamily: anchor.css(\"font-family\"),\n                \"min-width\": width\n              });\n            },\n            remove: function () {\n              this.popup.element.off(CLICK + ns, \"a.k-button\");\n              this.popup.destroy();\n              this.element.remove();\n            },\n            toggle: function () {\n              if (this.options.enable || this.popup.visible()) {\n                this.popup.toggle();\n              }\n            },\n            enable: function (isEnabled) {\n              if (isEnabled === undefined) {\n                isEnabled = true;\n              }\n\n              this.mainButton.enable(isEnabled);\n              this.element.toggleClass(STATE_DISABLED, !isEnabled);\n              this.element.attr(ARIA_DISABLED, !isEnabled);\n              this.options.enable = isEnabled;\n            },\n            focus: function () {\n              this.element.trigger(FOCUS);\n            },\n            hide: function () {\n              if (this.popup) {\n                this.popup.close();\n              }\n\n              this.element.addClass(STATE_HIDDEN);\n              this.element.addClass(HIDDEN);\n              this.options.hidden = true;\n            },\n            show: function () {\n              this.element.removeClass(STATE_HIDDEN);\n              this.element.removeClass(HIDDEN);\n              this.options.hidden = false;\n            }\n          });\n          kendo.toolbar.ToolBarSplitButton = ToolBarSplitButton;\n          var OverflowSplitButton = Item.extend({\n            init: function (options, toolbar) {\n              var element = this.element = $('<li class=\"' + SPLIT_BUTTON + '\"></li>'),\n                  items = options.menuButtons,\n                  item,\n                  splitContainerId;\n              this.options = options;\n              this.toolbar = toolbar;\n              this.overflow = true;\n              splitContainerId = (options.id || options.uid) + OPTION_LIST_SUFFIX;\n              this.mainButton = new OverflowButton($.extend({\n                isChild: true\n              }, options));\n              this.mainButton.element.appendTo(element);\n\n              for (var i = 0; i < items.length; i++) {\n                item = new OverflowButton($.extend({\n                  mobile: options.mobile,\n                  type: BUTTON,\n                  splitContainerId: splitContainerId,\n                  isChild: true\n                }, items[i], {\n                  click: options.click\n                }), this.toolbar);\n                item.element.appendTo(element);\n              }\n\n              this.addUidAttr();\n              this.addOverflowAttr();\n              this.mainButton.main = true;\n              element.data({\n                type: \"splitButton\",\n                splitButton: this\n              });\n            },\n            overflowHidden: function () {\n              this.element.addClass(OVERFLOW_HIDDEN);\n            }\n          });\n          kendo.toolbar.OverflowSplitButton = OverflowSplitButton;\n          kendo.toolbar.registerComponent(\"splitButton\", ToolBarSplitButton, OverflowSplitButton);\n          var ToolBarSeparator = Item.extend({\n            init: function (options, toolbar) {\n              var element = this.element = $('<div>&nbsp;</div>');\n              this.element = element;\n              this.options = options;\n              this.toolbar = toolbar;\n              this.attributes();\n              this.addIdAttr();\n              this.addUidAttr();\n              this.addOverflowAttr();\n              element.addClass(KSEPARATOR);\n              element.attr(ROLE, SEPARATOR);\n              element.data({\n                type: SEPARATOR,\n                separator: this\n              });\n            }\n          });\n          var OverflowSeparator = Item.extend({\n            init: function (options, toolbar) {\n              var element = this.element = $('<li>&nbsp;</li>');\n              this.element = element;\n              this.options = options;\n              this.toolbar = toolbar;\n              this.overflow = true;\n              this.attributes();\n              this.addUidAttr();\n              this.addOverflowIdAttr();\n              element.addClass(KSEPARATOR);\n              element.attr(ROLE, SEPARATOR);\n              element.data({\n                type: SEPARATOR,\n                separator: this\n              });\n            },\n            overflowHidden: function () {\n              this.element.addClass(OVERFLOW_HIDDEN);\n            }\n          });\n          kendo.toolbar.registerComponent(\"separator\", ToolBarSeparator, OverflowSeparator);\n          var ToolBarSpacer = Item.extend({\n            init: function (options, toolbar) {\n              var element = this.element = $('<div>&nbsp;</div>');\n              this.element = element;\n              this.options = options;\n              this.toolbar = toolbar;\n              element.addClass(SPACER_CLASS);\n              element.data({\n                type: SPACER\n              });\n            }\n          });\n          kendo.toolbar.registerComponent(SPACER, ToolBarSpacer);\n          var TemplateItem = Item.extend({\n            init: function (template, options, toolbar) {\n              var element = isFunction(template) ? template(options) : template;\n\n              if (!(element instanceof jQuery)) {\n                element = $(\"<div></div>\").html(element);\n              } else {\n                element = element.wrap(\"<div></div>\").parent();\n              }\n\n              this.element = element;\n              this.options = options;\n              this.options.type = TEMPLATE;\n              this.toolbar = toolbar;\n              this.attributes();\n              this.addUidAttr();\n              this.addIdAttr();\n              this.addOverflowAttr();\n\n              if (options.hidden) {\n                this.hide();\n              }\n\n              element.data({\n                type: TEMPLATE,\n                template: this\n              });\n            }\n          });\n          kendo.toolbar.TemplateItem = TemplateItem;\n          var OverflowTemplateItem = Item.extend({\n            init: function (template, options, toolbar) {\n              var element = isFunction(template) ? $(template(options)) : $(template);\n\n              if (!(element instanceof jQuery)) {\n                element = $(\"<li></li>\").html(element);\n              } else {\n                element = element.wrap(\"<li></li>\").parent();\n              }\n\n              this.element = element;\n              this.options = options;\n              this.options.type = TEMPLATE;\n              this.toolbar = toolbar;\n              this.overflow = true;\n              this.attributes();\n              this.addUidAttr();\n              this.addOverflowIdAttr();\n              this.addOverflowAttr();\n              element.data({\n                type: TEMPLATE,\n                template: this\n              });\n            },\n            overflowHidden: function () {\n              this.element.addClass(OVERFLOW_HIDDEN);\n            }\n          });\n          kendo.toolbar.OverflowTemplateItem = OverflowTemplateItem;\n\n          function toggleActive(e) {\n            if (!e.target.is(\".k-toggle-button\")) {\n              e.target.toggleClass(STATE_SELECTED, e.type == \"press\");\n            }\n          }\n\n          function actionSheetWrap(element) {\n            element = $(element);\n            return element.hasClass(\"km-actionsheet\") ? element.closest(\".km-popup-wrapper\") : element.addClass(\"km-widget km-actionsheet\").wrap('<div class=\"km-actionsheet-wrapper km-actionsheet-tablet km-widget km-popup\"></div>').parent().wrap('<div class=\"km-popup-wrapper k-popup\"></div>').parent();\n          }\n\n          function preventClick(e) {\n            if ($(e.target).closest(\"a.k-button\").length) {\n              e.preventDefault();\n            }\n          }\n\n          function findFocusableSibling(element, dir) {\n            var getSibling = dir === NEXT ? $.fn.next : $.fn.prev;\n            var getter = dir === NEXT ? $.fn.first : $.fn.last;\n            var candidate = getSibling.call(element);\n\n            if (!candidate.length && element.is(DOT + OVERFLOW_ANCHOR)) {\n              return element;\n            }\n\n            if (candidate.is(\":kendoFocusable\") || !candidate.length) {\n              return candidate;\n            }\n\n            if (candidate.find(\":kendoFocusable\").length) {\n              return getter.call(candidate.find(\":kendoFocusable\"));\n            }\n\n            return findFocusableSibling(candidate, dir);\n          }\n\n          var Group = Class.extend({\n            init: function (name) {\n              this.name = name;\n              this.buttons = [];\n            },\n            add: function (button) {\n              this.buttons[this.buttons.length] = button;\n            },\n            remove: function (button) {\n              var index = $.inArray(button, this.buttons);\n              this.buttons.splice(index, 1);\n            },\n            select: function (button) {\n              var tmp;\n\n              for (var i = 0; i < this.buttons.length; i++) {\n                tmp = this.buttons[i];\n                tmp.select(false);\n              }\n\n              button.select(true);\n\n              if (button.twin()) {\n                button.twin().select(true);\n              }\n            }\n          });\n          var ToolBar = Widget.extend({\n            init: function (element, options) {\n              var that = this;\n              Widget.fn.init.call(that, element, options);\n              options = that.options;\n              element = that.wrapper = that.element;\n              element.addClass(TOOLBAR + \" k-widget\");\n              element.attr(ROLE, \"toolbar\");\n              this.uid = kendo.guid();\n              this._isRtl = kendo.support.isRtl(element);\n              this._groups = {};\n              element.attr(KENDO_UID_ATTR, this.uid);\n              that.isMobile = typeof options.mobile === \"boolean\" ? options.mobile : that.element.closest(\".km-root\")[0];\n              that.animation = that.isMobile ? {\n                open: {\n                  effects: \"fade\"\n                }\n              } : {};\n\n              if (that.isMobile) {\n                element.addClass(\"km-widget\");\n                KBUTTON = \"km-button\";\n                BUTTON_GROUP = \"km-buttongroup\";\n                STATE_SELECTED = \"km-state-active\";\n                STATE_DISABLED = \"km-state-disabled\";\n              }\n\n              if (options.resizable) {\n                that._renderOverflow();\n\n                element.addClass(RESIZABLE_TOOLBAR);\n                that.overflowUserEvents = new kendo.UserEvents(that.element, {\n                  threshold: 5,\n                  allowSelection: true,\n                  filter: DOT + OVERFLOW_ANCHOR,\n                  tap: that._toggleOverflow.bind(that)\n                });\n                that._resizeHandler = kendo.onResize(function () {\n                  that.resize();\n                });\n              } else {\n                that.popup = {\n                  element: $([])\n                };\n              }\n\n              if (options.items && options.items.length) {\n                for (var i = 0; i < options.items.length; i++) {\n                  that.add(options.items[i]);\n                }\n\n                if (options.resizable) {\n                  that._shrink(that.element.innerWidth());\n                }\n              }\n\n              that.userEvents = new kendo.UserEvents(document.documentElement, {\n                threshold: 5,\n                allowSelection: true,\n                filter: \"[\" + KENDO_UID_ATTR + \"=\" + this.uid + \"] a.\" + KBUTTON + COMMA + EMPTY + \"[\" + KENDO_UID_ATTR + \"=\" + this.uid + \"] .\" + MENU_LINK + COMMA + EMPTY + \"[\" + KENDO_UID_ATTR + \"=\" + this.uid + \"] .\" + OVERFLOW_BUTTON,\n                tap: that._buttonClick.bind(that),\n                press: toggleActive,\n                release: toggleActive\n              });\n              that.element.on(CLICK + ns, \"a.k-button\", preventClick);\n\n              that._navigatable();\n\n              if (options.resizable) {\n                that.popup.element.on(CLICK + ns, +\"a.k-button\", preventClick);\n              }\n\n              if (options.resizable) {\n                this._toggleOverflowAnchor();\n              }\n\n              kendo.notify(that);\n            },\n            events: [CLICK, TOGGLE, OPEN, CLOSE, OVERFLOW_OPEN, OVERFLOW_CLOSE],\n            options: {\n              name: \"ToolBar\",\n              items: [],\n              resizable: true,\n              mobile: null\n            },\n            addToGroup: function (button, groupName) {\n              var group;\n\n              if (!this._groups[groupName]) {\n                group = this._groups[groupName] = new Group();\n              } else {\n                group = this._groups[groupName];\n              }\n\n              group.add(button);\n              return group;\n            },\n            destroy: function () {\n              var that = this;\n              that.element.find(DOT + SPLIT_BUTTON).each(function (idx, element) {\n                $(element).data(\"kendoPopup\").destroy();\n              });\n              that.element.off(ns, \"a.k-button\");\n              that.userEvents.destroy();\n\n              if (that.options.resizable) {\n                kendo.unbindResize(that._resizeHandler);\n                that.overflowUserEvents.destroy();\n                that.popup.element.off(ns, \"a.k-button\");\n                that.popup.destroy();\n              }\n\n              Widget.fn.destroy.call(that);\n            },\n            add: function (options) {\n              var component = components[options.type],\n                  template = options.template,\n                  tool,\n                  that = this,\n                  itemClasses = that.isMobile ? NOTHING : \"k-item\",\n                  overflowTemplate = options.overflowTemplate,\n                  overflowTool;\n              $.extend(options, {\n                uid: kendo.guid(),\n                animation: that.animation,\n                mobile: that.isMobile,\n                rootUid: that.uid\n              });\n\n              if (options.menuButtons) {\n                for (var i = 0; i < options.menuButtons.length; i++) {\n                  $.extend(options.menuButtons[i], {\n                    uid: kendo.guid()\n                  });\n                }\n              }\n\n              if (template && !overflowTemplate || options.type === SPACER) {\n                options.overflow = OVERFLOW_NEVER;\n              } else if (!options.overflow) {\n                options.overflow = OVERFLOW_AUTO;\n              } //add the command in the overflow popup\n\n\n              if (options.overflow !== OVERFLOW_NEVER && that.options.resizable) {\n                if (overflowTemplate) {\n                  //template command\n                  overflowTool = new OverflowTemplateItem(overflowTemplate, options, that);\n                } else if (component) {\n                  //build-in command\n                  overflowTool = new component.overflow(options, that);\n                  overflowTool.element.addClass(itemClasses);\n                }\n\n                if (overflowTool) {\n                  if (options.overflow === OVERFLOW_AUTO) {\n                    overflowTool.overflowHidden();\n                  }\n\n                  overflowTool.element.appendTo(that.popup.container);\n                  that.angular(\"compile\", function () {\n                    return {\n                      elements: overflowTool.element.get()\n                    };\n                  });\n                }\n              } //add the command in the toolbar container\n\n\n              if (options.overflow !== OVERFLOW_ALWAYS) {\n                if (template) {\n                  //template command\n                  tool = new TemplateItem(template, options, that);\n                } else if (component) {\n                  //build-in command\n                  tool = new component.toolbar(options, that);\n                }\n\n                if (tool) {\n                  tool.element.appendTo(that.element);\n                  that.angular(\"compile\", function () {\n                    return {\n                      elements: tool.element.get()\n                    };\n                  });\n                }\n              }\n            },\n            _getItem: function (candidate) {\n              var element,\n                  toolbarItem,\n                  overflowItem,\n                  isResizable = this.options.resizable,\n                  type; //find toolbar item\n\n              element = this.element.find(candidate);\n\n              if (!element.length) {\n                element = $(\".k-split-container[data-uid=\" + this.uid + \"]\").find(candidate);\n              }\n\n              type = element.length ? element.data(\"type\") : NOTHING;\n              toolbarItem = element.data(type);\n\n              if (toolbarItem) {\n                if (toolbarItem.main) {\n                  element = element.parent(DOT + SPLIT_BUTTON);\n                  type = \"splitButton\";\n                  toolbarItem = element.data(type);\n                }\n\n                if (isResizable) {\n                  overflowItem = toolbarItem.twin();\n                }\n              } else if (isResizable) {\n                //find overflow item\n                element = this.popup.element.find(candidate);\n                type = element.length ? element.data(\"type\") : NOTHING;\n                overflowItem = element.data(type);\n\n                if (overflowItem && overflowItem.main) {\n                  element = element.parent(DOT + SPLIT_BUTTON);\n                  type = \"splitButton\";\n                  overflowItem = element.data(type);\n                }\n              }\n\n              return {\n                type: type,\n                toolbar: toolbarItem,\n                overflow: overflowItem\n              };\n            },\n            remove: function (candidate) {\n              var item = this._getItem(candidate);\n\n              if (item.toolbar) {\n                item.toolbar.remove();\n              }\n\n              if (item.overflow) {\n                item.overflow.remove();\n              }\n\n              this.resize(true);\n            },\n            hide: function (candidate) {\n              var item = this._getItem(candidate);\n\n              var buttonGroupInstance;\n\n              if (item.toolbar) {\n                if (item.toolbar.options.type === BUTTON && item.toolbar.options.isChild) {\n                  buttonGroupInstance = item.toolbar.getParentGroup();\n                  item.toolbar.hide();\n\n                  if (buttonGroupInstance) {\n                    buttonGroupInstance.refresh();\n                  }\n                } else if (!item.toolbar.options.hidden) {\n                  item.toolbar.hide();\n                }\n              }\n\n              if (item.overflow) {\n                if (item.overflow.options.type === BUTTON && item.overflow.options.isChild) {\n                  buttonGroupInstance = item.overflow.getParentGroup();\n                  item.overflow.hide();\n\n                  if (buttonGroupInstance) {\n                    buttonGroupInstance.refresh();\n                  }\n                } else if (!item.overflow.options.hidden) {\n                  item.overflow.hide();\n                }\n              }\n\n              this.resize(true);\n            },\n            show: function (candidate) {\n              var item = this._getItem(candidate);\n\n              var buttonGroupInstance;\n\n              if (item.toolbar) {\n                if (item.toolbar.options.type === BUTTON && item.toolbar.options.isChild) {\n                  buttonGroupInstance = item.toolbar.getParentGroup();\n                  item.toolbar.show();\n\n                  if (buttonGroupInstance) {\n                    buttonGroupInstance.refresh();\n                  }\n                } else if (item.toolbar.options.hidden) {\n                  item.toolbar.show();\n                }\n              }\n\n              if (item.overflow) {\n                if (item.overflow.options.type === BUTTON && item.overflow.options.isChild) {\n                  buttonGroupInstance = item.overflow.getParentGroup();\n                  item.toolbar.show();\n\n                  if (buttonGroupInstance) {\n                    buttonGroupInstance.refresh();\n                  }\n                } else if (item.overflow.options.hidden) {\n                  item.overflow.show();\n                }\n              }\n\n              this.resize(true);\n            },\n            enable: function (element, enable) {\n              var item = this._getItem(element);\n\n              if (typeof enable == \"undefined\") {\n                enable = true;\n              }\n\n              if (item.toolbar) {\n                item.toolbar.enable(enable);\n              }\n\n              if (item.overflow) {\n                item.overflow.enable(enable);\n              }\n            },\n            getSelectedFromGroup: function (groupName) {\n              return this.element.find(DOT + TOGGLE_BUTTON + \"[data-group='\" + groupName + \"']\").filter(DOT + STATE_SELECTED);\n            },\n            toggle: function (button, checked) {\n              var element = $(button),\n                  item = element.data(BUTTON);\n\n              if (item.options.togglable) {\n                if (checked === undefined) {\n                  checked = true;\n                }\n\n                item.toggle(checked, true);\n              }\n            },\n            _renderOverflow: function () {\n              var that = this,\n                  overflowContainer = components.overflowContainer,\n                  isRtl = that._isRtl,\n                  horizontalDirection = isRtl ? \"left\" : \"right\";\n              that.overflowAnchor = $(components.overflowAnchor).addClass(KBUTTON);\n              that.element.append(that.overflowAnchor);\n\n              if (that.isMobile) {\n                that.overflowAnchor.append('<span class=\"km-icon km-more\"></span>');\n                overflowContainer = actionSheetWrap(overflowContainer);\n              } else {\n                that.overflowAnchor.append('<span class=\"k-icon k-i-more-vertical\"></span>');\n              }\n\n              that.popup = new kendo.ui.Popup(overflowContainer, {\n                origin: \"bottom \" + horizontalDirection,\n                position: \"top \" + horizontalDirection,\n                anchor: that.overflowAnchor,\n                isRtl: isRtl,\n                animation: that.animation,\n                appendTo: that.isMobile ? $(that.isMobile).children(\".km-pane\") : null,\n                copyAnchorStyles: false,\n                open: function (e) {\n                  var wrapper = kendo.wrap(that.popup.element).addClass(OVERFLOW_WRAPPER);\n\n                  if (!that.isMobile) {\n                    wrapper.css(\"margin-left\", (isRtl ? -1 : 1) * ((outerWidth(wrapper) - wrapper.width()) / 2 + 1));\n                  } else {\n                    that.popup.container.css(\"max-height\", parseFloat($(\".km-content:visible\").innerHeight()) - 15 + \"px\");\n                  }\n\n                  if (that.trigger(OVERFLOW_OPEN)) {\n                    e.preventDefault();\n                  }\n                },\n                activate: function () {\n                  this.element.find(\":kendoFocusable\").first().trigger(FOCUS);\n                },\n                close: function (e) {\n                  if (that.trigger(OVERFLOW_CLOSE)) {\n                    e.preventDefault();\n                  }\n\n                  this.element.trigger(FOCUS);\n                }\n              });\n              that.popup.element.on(KEYDOWN + ns, DOT + KBUTTON, function (e) {\n                var target = $(e.target),\n                    li = target.parent(),\n                    isComplexTool = li.is(DOT + BUTTON_GROUP) || li.is(DOT + SPLIT_BUTTON),\n                    element;\n                e.preventDefault();\n\n                if (e.keyCode === keys.ESC || e.keyCode === keys.TAB || e.altKey && e.keyCode === keys.UP) {\n                  that._toggleOverflow();\n\n                  that.overflowAnchor.trigger(FOCUS);\n                } else if (e.keyCode === keys.DOWN) {\n                  element = !isComplexTool || isComplexTool && target.is(\":last-child\") ? li : target;\n                  findFocusableSibling(element, NEXT).trigger(FOCUS);\n                } else if (e.keyCode === keys.UP) {\n                  element = !isComplexTool || isComplexTool && target.is(\":first-child\") ? li : target;\n                  findFocusableSibling(element, PREV).trigger(FOCUS);\n                } else if (e.keyCode === keys.SPACEBAR || e.keyCode === keys.ENTER) {\n                  that.userEvents.trigger(TAP, {\n                    target: $(e.target)\n                  });\n                  that.overflowAnchor.trigger(FOCUS);\n                } else if (e.keyCode === keys.HOME) {\n                  li.parent().find(\":kendoFocusable\").first().trigger(FOCUS);\n                } else if (e.keyCode === keys.END) {\n                  li.parent().find(\":kendoFocusable\").last().trigger(FOCUS);\n                }\n              });\n\n              if (that.isMobile) {\n                that.popup.container = that.popup.element.find(DOT + OVERFLOW_CONTAINER);\n              } else {\n                that.popup.container = that.popup.element;\n              }\n\n              that.popup.container.attr(KENDO_UID_ATTR, this.uid);\n            },\n            _toggleOverflowAnchor: function () {\n              var hasVisibleChildren = false;\n              var paddingEnd = this._isRtl ? \"padding-left\" : \"padding-right\";\n\n              if (this.options.mobile) {\n                hasVisibleChildren = this.popup.element.find(DOT + OVERFLOW_CONTAINER).children(\":not(.\" + OVERFLOW_HIDDEN + \", .\" + POPUP + \")\").length > 0;\n              } else {\n                hasVisibleChildren = this.popup.element.children(\":not(.\" + OVERFLOW_HIDDEN + \", .\" + POPUP + \")\").length > 0;\n              }\n\n              if (hasVisibleChildren) {\n                this.overflowAnchor.css({\n                  visibility: \"visible\",\n                  width: NOTHING\n                });\n                this.wrapper.css(paddingEnd, this.overflowAnchor.outerWidth(true));\n              } else {\n                this.overflowAnchor.css({\n                  visibility: \"hidden\",\n                  width: \"1px\"\n                });\n                this.wrapper.css(paddingEnd, NOTHING);\n              }\n            },\n            _buttonClick: function (e) {\n              var that = this,\n                  popup,\n                  target,\n                  item,\n                  splitContainer,\n                  isSplitButtonArrow = e.target.closest(DOT + SPLIT_BUTTON_ARROW).length,\n                  handler,\n                  eventData,\n                  urlTarget;\n              e.preventDefault();\n\n              if (isSplitButtonArrow) {\n                that._toggle(e);\n\n                return;\n              }\n\n              target = $(e.target).closest(DOT + KBUTTON + COMMA + EMPTY + DOT + MENU_LINK, that.element);\n\n              if (target.hasClass(OVERFLOW_ANCHOR)) {\n                return;\n              }\n\n              item = target.data(BUTTON);\n\n              if (!item && that.popup) {\n                target = $(e.target).closest(DOT + OVERFLOW_BUTTON, that.popup.container);\n                item = target.parent(\"li\").data(BUTTON);\n              }\n\n              if (!item || !item.options.enable) {\n                return;\n              }\n\n              if (item.options.togglable) {\n                handler = isFunction(item.toggleHandler) ? item.toggleHandler : null;\n                item.toggle(!item.options.selected, true);\n                eventData = {\n                  target: target,\n                  group: item.options.group,\n                  checked: item.options.selected,\n                  id: item.options.id,\n                  item: item\n                };\n\n                if (handler) {\n                  handler.call(that, eventData);\n                }\n\n                that.trigger(TOGGLE, eventData);\n              } else {\n                handler = isFunction(item.clickHandler) ? item.clickHandler : null;\n                eventData = {\n                  sender: that,\n                  target: target,\n                  id: item.options.id,\n                  item: item\n                };\n\n                if (handler) {\n                  handler.call(that, eventData);\n                }\n\n                that.trigger(CLICK, eventData);\n              }\n\n              if (item.options.url) {\n                if (item.options.attributes && item.options.attributes.target) {\n                  urlTarget = item.options.attributes.target;\n                }\n\n                window.open(item.options.url, urlTarget || \"_self\");\n              }\n\n              if (target.hasClass(OVERFLOW_BUTTON)) {\n                that.popup.close();\n              }\n\n              splitContainer = target.closest(\".k-split-container\");\n\n              if (splitContainer[0]) {\n                popup = splitContainer.data(\"kendoPopup\");\n                (popup ? popup : splitContainer.parents(\".km-popup-wrapper\").data(\"kendoPopup\")).close();\n              }\n            },\n            _navigatable: function () {\n              var that = this;\n              that.element.attr(TABINDEX, 0).on(FOCUSIN + ns, function (ev) {\n                var target = $(ev.target);\n                var element = $(this).find(\":kendoFocusable\").first();\n\n                if (!target.is(DOT + TOOLBAR) || element.length === 0) {\n                  return;\n                }\n\n                if (element.is(DOT + OVERFLOW_ANCHOR)) {\n                  element = findFocusableSibling(element, NEXT);\n                }\n\n                if (element.length) {\n                  element[0].focus();\n                }\n              }).on(KEYDOWN + ns, that._keydown.bind(that));\n            },\n            _keydown: function (e) {\n              var target = $(e.target),\n                  keyCode = e.keyCode,\n                  items = this.element.children(\":not(.k-separator):visible\"),\n                  direction = this._isRtl ? -1 : 1;\n\n              if (keyCode === keys.TAB) {\n                var element = target.parentsUntil(this.element).last(),\n                    lastHasFocus = false,\n                    firstHasFocus = false,\n                    isOnlyOverflowAnchor = false;\n\n                if (!items.not(DOT + OVERFLOW_ANCHOR).length) {\n                  isOnlyOverflowAnchor = true;\n                }\n\n                if (!element.length) {\n                  element = target;\n                }\n\n                if (element.is(DOT + OVERFLOW_ANCHOR) && !isOnlyOverflowAnchor) {\n                  var lastItemNotOverflowAnchor = items.last();\n\n                  if (e.shiftKey) {\n                    e.preventDefault();\n                  }\n\n                  if (lastItemNotOverflowAnchor.is(\":kendoFocusable\")) {\n                    items.last().trigger(FOCUS);\n                  } else {\n                    items.last().find(\":kendoFocusable\").last().trigger(FOCUS);\n                  }\n                }\n\n                if (!e.shiftKey && items.index(element) === items.length - 1) {\n                  if (element.is(DOT + BUTTON_GROUP)) {\n                    lastHasFocus = target.is(\":last-child\");\n                  } else {\n                    lastHasFocus = true;\n                  }\n                }\n\n                var isFirstTool = items.index(element) === items.not(\".k-overflow-anchor\").first().index();\n\n                if (e.shiftKey && isFirstTool) {\n                  if (element.is(DOT + BUTTON_GROUP)) {\n                    firstHasFocus = target.is(\":first-child\");\n                  } else {\n                    firstHasFocus = true;\n                  }\n                }\n\n                if (lastHasFocus && this.overflowAnchor && this.overflowAnchor.css(\"visibility\") !== \"hidden\" && !isOnlyOverflowAnchor) {\n                  e.preventDefault();\n                  this.overflowAnchor.trigger(FOCUS);\n                }\n\n                if (firstHasFocus || isOnlyOverflowAnchor && e.shiftKey) {\n                  e.preventDefault();\n\n                  var prevFocusable = this._getPrevFocusable(this.wrapper);\n\n                  if (prevFocusable) {\n                    prevFocusable.trigger(FOCUS);\n                  }\n                }\n\n                this._preventNextFocus = false;\n              }\n\n              if (e.altKey && keyCode === keys.DOWN) {\n                var splitButton = $(document.activeElement).data(\"splitButton\");\n                var isOverflowAnchor = $(document.activeElement).is(DOT + OVERFLOW_ANCHOR);\n\n                if (splitButton) {\n                  splitButton.toggle();\n                } else if (isOverflowAnchor) {\n                  this._toggleOverflow();\n                }\n\n                return;\n              }\n\n              if ((keyCode === keys.SPACEBAR || keyCode === keys.ENTER) && !target.is(\"input, checkbox\")) {\n                if (keyCode === keys.SPACEBAR) {\n                  e.preventDefault(); //prevent spacebar to scroll the page down\n                }\n\n                if (target.is(DOT + SPLIT_BUTTON)) {\n                  target = target.children().first();\n                  this.userEvents.trigger(TAP, {\n                    target: target\n                  });\n                } else if (keyCode === keys.SPACEBAR) {\n                  this.userEvents.trigger(TAP, {\n                    target: target\n                  });\n                }\n\n                return;\n              }\n\n              if (keyCode === keys.HOME) {\n                if (target.is(\".k-dropdownlist\") || target.is(\"input\")) {\n                  return;\n                }\n\n                if (this.overflowAnchor) {\n                  items.eq(1).trigger(FOCUS);\n                } else {\n                  items.first().trigger(FOCUS);\n                }\n\n                e.preventDefault();\n              } else if (keyCode === keys.END) {\n                if (target.is(\".k-dropdownlist\") || target.is(\"input\")) {\n                  return;\n                }\n\n                if (this.overflowAnchor && $(this.overflowAnchor).css(\"visibility\") != \"hidden\") {\n                  this.overflowAnchor.trigger(FOCUS);\n                } else {\n                  items.last().trigger(FOCUS);\n                }\n\n                e.preventDefault();\n              } else if (keyCode === keys.RIGHT && !this._preventNextFocus && !target.is(\"input, select, .k-dropdownlist, .k-colorpicker\") && this._getNextElement(e.target, 1 * direction)) {\n                this._getNextElement(e.target, 1 * direction).focus();\n\n                e.preventDefault();\n              } else if (keyCode === keys.LEFT && !this._preventNextFocus && !target.is(\"input, select, .k-dropdownlist, .k-colorpicker\") && this._getNextElement(e.target, -1 * direction)) {\n                this._getNextElement(e.target, -1 * direction).focus();\n\n                e.preventDefault();\n              }\n            },\n            _getNextElement: function (item, direction) {\n              var items = this.element.children(\":not(.k-separator, .k-spacer):visible\");\n              var itemIndex = items.index(item) === -1 ? items.index(item.parentElement) : items.index(item);\n              var startIndex = this.overflowAnchor ? 1 : 0;\n              var directionNumber = direction;\n              var searchIndex = direction === 1 ? items.length - 1 : startIndex;\n              var index = direction === 1 ? startIndex : items.length - 1;\n              var focusableItem = items[itemIndex + direction];\n              this._preventNextFocus = false;\n\n              if ($(item).closest(DOT + BUTTON_GROUP).not(DOT + SPLIT_BUTTON).length && !$(item).is(direction === 1 ? \":last-child\" : \":first-child\")) {\n                return $(item).closest(DOT + BUTTON_GROUP).children()[$(item).closest(DOT + BUTTON_GROUP).children().index(item) + direction];\n              }\n\n              if (this.overflowAnchor && item === this.overflowAnchor[0] && direction === -1) {\n                focusableItem = items[items.length - 1];\n              }\n\n              if (itemIndex === searchIndex) {\n                focusableItem = !this.overflowAnchor || this.overflowAnchor && $(this.overflowAnchor).css(\"visibility\") === \"hidden\" ? items[index] : this.overflowAnchor;\n              }\n\n              while (!$(focusableItem).is(\":kendoFocusable\")) {\n                if (direction === -1 && $(focusableItem).closest(DOT + BUTTON_GROUP).length) {\n                  focusableItem = $(focusableItem).children(\":not(label, div)\").last();\n                } else {\n                  focusableItem = $(focusableItem).children(\":not(label, div)\").first();\n                }\n\n                if (!focusableItem.length) {\n                  directionNumber = directionNumber + direction;\n                  focusableItem = items[itemIndex + directionNumber];\n\n                  if (!focusableItem) {\n                    return this.overflowAnchor;\n                  }\n                }\n\n                if ($(focusableItem).hasClass(\"k-combobox\")) {\n                  focusableItem = $(focusableItem).find(\"input\");\n                }\n\n                this._preventNextFocus = $(focusableItem).closest(DOT + BUTTON_GROUP).length ? false : true;\n              }\n\n              return focusableItem;\n            },\n            _getPrevFocusable: function (element) {\n              if (element.is(\"html\")) {\n                return element;\n              }\n\n              var elementToFocus,\n                  prevElement,\n                  prevElements = element.prevAll();\n              prevElements.each(function () {\n                prevElement = $(this);\n\n                if (prevElement.is(\":kendoFocusable\")) {\n                  elementToFocus = prevElement;\n                  return false;\n                } else if (prevElement.find(\":kendoFocusable\").length > 0) {\n                  elementToFocus = prevElement.find(\":kendoFocusable\").last();\n                  return false;\n                }\n              });\n\n              if (elementToFocus) {\n                return elementToFocus;\n              } else {\n                return this._getPrevFocusable(element.parent());\n              }\n            },\n            _toggle: function (e) {\n              var splitButton = $(e.target).closest(DOT + SPLIT_BUTTON).data(\"splitButton\");\n              e.preventDefault();\n\n              if (!splitButton.options.enable) {\n                return;\n              }\n\n              splitButton.toggle();\n            },\n            _toggleOverflow: function () {\n              this.popup.toggle();\n            },\n            _resize: function (e) {\n              var containerWidth = e.width;\n\n              if (!this.options.resizable) {\n                return;\n              }\n\n              this.popup.close();\n\n              this._shrink(containerWidth);\n\n              this._stretch(containerWidth);\n\n              this._markVisibles();\n\n              this._toggleOverflowAnchor();\n            },\n            _childrenWidth: function () {\n              var childrenWidth = 0;\n              this.element.children(\":visible:not(.\" + STATE_HIDDEN + COMMA + EMPTY + DOT + SPACER_CLASS + \")\").each(function () {\n                childrenWidth += outerWidth($(this), true);\n              });\n              return Math.ceil(childrenWidth);\n            },\n            _shrink: function (containerWidth) {\n              var commandElement, visibleCommands;\n\n              if (containerWidth < this._childrenWidth()) {\n                visibleCommands = this.element.children(\":visible:not([data-overflow='never'], .\" + OVERFLOW_ANCHOR + \")\");\n\n                for (var i = visibleCommands.length - 1; i >= 0; i--) {\n                  commandElement = visibleCommands.eq(i);\n\n                  if (containerWidth > this._childrenWidth()) {\n                    break;\n                  } else {\n                    this._hideItem(commandElement);\n                  }\n                }\n              }\n            },\n            _stretch: function (containerWidth) {\n              var commandElement, hiddenCommands;\n\n              if (containerWidth > this._childrenWidth()) {\n                hiddenCommands = this.element.children(\":hidden:not('.\" + STATE_HIDDEN + \"')\");\n\n                for (var i = 0; i < hiddenCommands.length; i++) {\n                  commandElement = hiddenCommands.eq(i);\n\n                  if (containerWidth < this._childrenWidth() || !this._showItem(commandElement, containerWidth)) {\n                    break;\n                  }\n                }\n              }\n            },\n            _hideItem: function (item) {\n              item.addClass(HIDDEN);\n\n              if (this.popup) {\n                this.popup.container.find(\">li[data-uid='\" + item.data(\"uid\") + \"']\").removeClass(OVERFLOW_HIDDEN);\n              }\n            },\n            _showItem: function (item, containerWidth) {\n              // From jquery.outerWidth docs:\n              //  > jQuery will attempt to temporarily show and then re-hide an element\n              //  > in order to measure its dimensions, but this is unreliable\n              // Thus we show and hide the item\n              item.removeClass(HIDDEN);\n              var itemOuterWidth = outerWidth(item, true);\n              item.addClass(HIDDEN);\n\n              if (item.length && containerWidth > this._childrenWidth() + itemOuterWidth) {\n                item.removeClass(HIDDEN);\n\n                if (this.popup) {\n                  this.popup.container.find(\">li[data-uid='\" + item.data(\"uid\") + \"']\").addClass(OVERFLOW_HIDDEN);\n                }\n\n                return true;\n              }\n\n              return false;\n            },\n            _markVisibles: function () {\n              var overflowItems = this.popup.container.children(),\n                  toolbarItems = this.element.children(\":not(.k-overflow-anchor)\"),\n                  visibleOverflowItems = overflowItems.filter(\":not(.k-overflow-hidden)\"),\n                  visibleToolbarItems = toolbarItems.filter(\":visible\");\n              overflowItems.add(toolbarItems).removeClass(FIRST_TOOLBAR_VISIBLE + EMPTY + LAST_TOOLBAR_VISIBLE);\n              visibleOverflowItems.first().add(visibleToolbarItems.first()).addClass(FIRST_TOOLBAR_VISIBLE);\n              visibleOverflowItems.last().add(visibleToolbarItems.last()).addClass(LAST_TOOLBAR_VISIBLE);\n            }\n          });\n          kendo.ui.plugin(ToolBar);\n        })(window.kendo.jQuery);\n\n        return window.kendo;\n      }, __webpack_require__(3));\n      /* WEBPACK VAR INJECTION */\n\n    }).call(exports, __webpack_require__(1060));\n    /***/\n  }\n  /******/\n\n});","map":null,"metadata":{},"sourceType":"script"}